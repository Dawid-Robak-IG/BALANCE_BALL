
BALANCE_BALL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa54  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800ac08  0800ac08  0000bc08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acd8  0800acd8  0000c064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800acd8  0800acd8  0000bcd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ace0  0800ace0  0000c064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ace0  0800ace0  0000bce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ace4  0800ace4  0000bce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800ace8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c064  2**0
                  CONTENTS
 10 .bss          00026218  20000064  20000064  0000c064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2002627c  2002627c  0000c064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028798  00000000  00000000  0000c094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006334  00000000  00000000  0003482c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022b0  00000000  00000000  0003ab60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ac5  00000000  00000000  0003ce10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b4f0  00000000  00000000  0003e8d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b4c2  00000000  00000000  00069dc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4faa  00000000  00000000  00095287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0018a231  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009798  00000000  00000000  0018a274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00193a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800abec 	.word	0x0800abec

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	0800abec 	.word	0x0800abec

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	@ 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_uldivmod>:
 8000ac8:	b953      	cbnz	r3, 8000ae0 <__aeabi_uldivmod+0x18>
 8000aca:	b94a      	cbnz	r2, 8000ae0 <__aeabi_uldivmod+0x18>
 8000acc:	2900      	cmp	r1, #0
 8000ace:	bf08      	it	eq
 8000ad0:	2800      	cmpeq	r0, #0
 8000ad2:	bf1c      	itt	ne
 8000ad4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ad8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000adc:	f000 b988 	b.w	8000df0 <__aeabi_idiv0>
 8000ae0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ae8:	f000 f806 	bl	8000af8 <__udivmoddi4>
 8000aec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af4:	b004      	add	sp, #16
 8000af6:	4770      	bx	lr

08000af8 <__udivmoddi4>:
 8000af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000afc:	9d08      	ldr	r5, [sp, #32]
 8000afe:	468e      	mov	lr, r1
 8000b00:	4604      	mov	r4, r0
 8000b02:	4688      	mov	r8, r1
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d14a      	bne.n	8000b9e <__udivmoddi4+0xa6>
 8000b08:	428a      	cmp	r2, r1
 8000b0a:	4617      	mov	r7, r2
 8000b0c:	d962      	bls.n	8000bd4 <__udivmoddi4+0xdc>
 8000b0e:	fab2 f682 	clz	r6, r2
 8000b12:	b14e      	cbz	r6, 8000b28 <__udivmoddi4+0x30>
 8000b14:	f1c6 0320 	rsb	r3, r6, #32
 8000b18:	fa01 f806 	lsl.w	r8, r1, r6
 8000b1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b20:	40b7      	lsls	r7, r6
 8000b22:	ea43 0808 	orr.w	r8, r3, r8
 8000b26:	40b4      	lsls	r4, r6
 8000b28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b2c:	fa1f fc87 	uxth.w	ip, r7
 8000b30:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b34:	0c23      	lsrs	r3, r4, #16
 8000b36:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b3a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b3e:	fb01 f20c 	mul.w	r2, r1, ip
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d909      	bls.n	8000b5a <__udivmoddi4+0x62>
 8000b46:	18fb      	adds	r3, r7, r3
 8000b48:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000b4c:	f080 80ea 	bcs.w	8000d24 <__udivmoddi4+0x22c>
 8000b50:	429a      	cmp	r2, r3
 8000b52:	f240 80e7 	bls.w	8000d24 <__udivmoddi4+0x22c>
 8000b56:	3902      	subs	r1, #2
 8000b58:	443b      	add	r3, r7
 8000b5a:	1a9a      	subs	r2, r3, r2
 8000b5c:	b2a3      	uxth	r3, r4
 8000b5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b6a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b6e:	459c      	cmp	ip, r3
 8000b70:	d909      	bls.n	8000b86 <__udivmoddi4+0x8e>
 8000b72:	18fb      	adds	r3, r7, r3
 8000b74:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000b78:	f080 80d6 	bcs.w	8000d28 <__udivmoddi4+0x230>
 8000b7c:	459c      	cmp	ip, r3
 8000b7e:	f240 80d3 	bls.w	8000d28 <__udivmoddi4+0x230>
 8000b82:	443b      	add	r3, r7
 8000b84:	3802      	subs	r0, #2
 8000b86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b8a:	eba3 030c 	sub.w	r3, r3, ip
 8000b8e:	2100      	movs	r1, #0
 8000b90:	b11d      	cbz	r5, 8000b9a <__udivmoddi4+0xa2>
 8000b92:	40f3      	lsrs	r3, r6
 8000b94:	2200      	movs	r2, #0
 8000b96:	e9c5 3200 	strd	r3, r2, [r5]
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	428b      	cmp	r3, r1
 8000ba0:	d905      	bls.n	8000bae <__udivmoddi4+0xb6>
 8000ba2:	b10d      	cbz	r5, 8000ba8 <__udivmoddi4+0xb0>
 8000ba4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4608      	mov	r0, r1
 8000bac:	e7f5      	b.n	8000b9a <__udivmoddi4+0xa2>
 8000bae:	fab3 f183 	clz	r1, r3
 8000bb2:	2900      	cmp	r1, #0
 8000bb4:	d146      	bne.n	8000c44 <__udivmoddi4+0x14c>
 8000bb6:	4573      	cmp	r3, lr
 8000bb8:	d302      	bcc.n	8000bc0 <__udivmoddi4+0xc8>
 8000bba:	4282      	cmp	r2, r0
 8000bbc:	f200 8105 	bhi.w	8000dca <__udivmoddi4+0x2d2>
 8000bc0:	1a84      	subs	r4, r0, r2
 8000bc2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	4690      	mov	r8, r2
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	d0e5      	beq.n	8000b9a <__udivmoddi4+0xa2>
 8000bce:	e9c5 4800 	strd	r4, r8, [r5]
 8000bd2:	e7e2      	b.n	8000b9a <__udivmoddi4+0xa2>
 8000bd4:	2a00      	cmp	r2, #0
 8000bd6:	f000 8090 	beq.w	8000cfa <__udivmoddi4+0x202>
 8000bda:	fab2 f682 	clz	r6, r2
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	f040 80a4 	bne.w	8000d2c <__udivmoddi4+0x234>
 8000be4:	1a8a      	subs	r2, r1, r2
 8000be6:	0c03      	lsrs	r3, r0, #16
 8000be8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bec:	b280      	uxth	r0, r0
 8000bee:	b2bc      	uxth	r4, r7
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000bf6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bfe:	fb04 f20c 	mul.w	r2, r4, ip
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d907      	bls.n	8000c16 <__udivmoddi4+0x11e>
 8000c06:	18fb      	adds	r3, r7, r3
 8000c08:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000c0c:	d202      	bcs.n	8000c14 <__udivmoddi4+0x11c>
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	f200 80e0 	bhi.w	8000dd4 <__udivmoddi4+0x2dc>
 8000c14:	46c4      	mov	ip, r8
 8000c16:	1a9b      	subs	r3, r3, r2
 8000c18:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c1c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c20:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c24:	fb02 f404 	mul.w	r4, r2, r4
 8000c28:	429c      	cmp	r4, r3
 8000c2a:	d907      	bls.n	8000c3c <__udivmoddi4+0x144>
 8000c2c:	18fb      	adds	r3, r7, r3
 8000c2e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000c32:	d202      	bcs.n	8000c3a <__udivmoddi4+0x142>
 8000c34:	429c      	cmp	r4, r3
 8000c36:	f200 80ca 	bhi.w	8000dce <__udivmoddi4+0x2d6>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	1b1b      	subs	r3, r3, r4
 8000c3e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c42:	e7a5      	b.n	8000b90 <__udivmoddi4+0x98>
 8000c44:	f1c1 0620 	rsb	r6, r1, #32
 8000c48:	408b      	lsls	r3, r1
 8000c4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c4e:	431f      	orrs	r7, r3
 8000c50:	fa0e f401 	lsl.w	r4, lr, r1
 8000c54:	fa20 f306 	lsr.w	r3, r0, r6
 8000c58:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c5c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c60:	4323      	orrs	r3, r4
 8000c62:	fa00 f801 	lsl.w	r8, r0, r1
 8000c66:	fa1f fc87 	uxth.w	ip, r7
 8000c6a:	fbbe f0f9 	udiv	r0, lr, r9
 8000c6e:	0c1c      	lsrs	r4, r3, #16
 8000c70:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c74:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c78:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c7c:	45a6      	cmp	lr, r4
 8000c7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x1a0>
 8000c84:	193c      	adds	r4, r7, r4
 8000c86:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000c8a:	f080 809c 	bcs.w	8000dc6 <__udivmoddi4+0x2ce>
 8000c8e:	45a6      	cmp	lr, r4
 8000c90:	f240 8099 	bls.w	8000dc6 <__udivmoddi4+0x2ce>
 8000c94:	3802      	subs	r0, #2
 8000c96:	443c      	add	r4, r7
 8000c98:	eba4 040e 	sub.w	r4, r4, lr
 8000c9c:	fa1f fe83 	uxth.w	lr, r3
 8000ca0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ca4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ca8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000cac:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cb0:	45a4      	cmp	ip, r4
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x1ce>
 8000cb4:	193c      	adds	r4, r7, r4
 8000cb6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000cba:	f080 8082 	bcs.w	8000dc2 <__udivmoddi4+0x2ca>
 8000cbe:	45a4      	cmp	ip, r4
 8000cc0:	d97f      	bls.n	8000dc2 <__udivmoddi4+0x2ca>
 8000cc2:	3b02      	subs	r3, #2
 8000cc4:	443c      	add	r4, r7
 8000cc6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cca:	eba4 040c 	sub.w	r4, r4, ip
 8000cce:	fba0 ec02 	umull	lr, ip, r0, r2
 8000cd2:	4564      	cmp	r4, ip
 8000cd4:	4673      	mov	r3, lr
 8000cd6:	46e1      	mov	r9, ip
 8000cd8:	d362      	bcc.n	8000da0 <__udivmoddi4+0x2a8>
 8000cda:	d05f      	beq.n	8000d9c <__udivmoddi4+0x2a4>
 8000cdc:	b15d      	cbz	r5, 8000cf6 <__udivmoddi4+0x1fe>
 8000cde:	ebb8 0203 	subs.w	r2, r8, r3
 8000ce2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ce6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cea:	fa22 f301 	lsr.w	r3, r2, r1
 8000cee:	431e      	orrs	r6, r3
 8000cf0:	40cc      	lsrs	r4, r1
 8000cf2:	e9c5 6400 	strd	r6, r4, [r5]
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	e74f      	b.n	8000b9a <__udivmoddi4+0xa2>
 8000cfa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cfe:	0c01      	lsrs	r1, r0, #16
 8000d00:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d04:	b280      	uxth	r0, r0
 8000d06:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	4638      	mov	r0, r7
 8000d0e:	463c      	mov	r4, r7
 8000d10:	46b8      	mov	r8, r7
 8000d12:	46be      	mov	lr, r7
 8000d14:	2620      	movs	r6, #32
 8000d16:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d1a:	eba2 0208 	sub.w	r2, r2, r8
 8000d1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d22:	e766      	b.n	8000bf2 <__udivmoddi4+0xfa>
 8000d24:	4601      	mov	r1, r0
 8000d26:	e718      	b.n	8000b5a <__udivmoddi4+0x62>
 8000d28:	4610      	mov	r0, r2
 8000d2a:	e72c      	b.n	8000b86 <__udivmoddi4+0x8e>
 8000d2c:	f1c6 0220 	rsb	r2, r6, #32
 8000d30:	fa2e f302 	lsr.w	r3, lr, r2
 8000d34:	40b7      	lsls	r7, r6
 8000d36:	40b1      	lsls	r1, r6
 8000d38:	fa20 f202 	lsr.w	r2, r0, r2
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	430a      	orrs	r2, r1
 8000d42:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d46:	b2bc      	uxth	r4, r7
 8000d48:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d4c:	0c11      	lsrs	r1, r2, #16
 8000d4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d52:	fb08 f904 	mul.w	r9, r8, r4
 8000d56:	40b0      	lsls	r0, r6
 8000d58:	4589      	cmp	r9, r1
 8000d5a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d5e:	b280      	uxth	r0, r0
 8000d60:	d93e      	bls.n	8000de0 <__udivmoddi4+0x2e8>
 8000d62:	1879      	adds	r1, r7, r1
 8000d64:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000d68:	d201      	bcs.n	8000d6e <__udivmoddi4+0x276>
 8000d6a:	4589      	cmp	r9, r1
 8000d6c:	d81f      	bhi.n	8000dae <__udivmoddi4+0x2b6>
 8000d6e:	eba1 0109 	sub.w	r1, r1, r9
 8000d72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d76:	fb09 f804 	mul.w	r8, r9, r4
 8000d7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d7e:	b292      	uxth	r2, r2
 8000d80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d84:	4542      	cmp	r2, r8
 8000d86:	d229      	bcs.n	8000ddc <__udivmoddi4+0x2e4>
 8000d88:	18ba      	adds	r2, r7, r2
 8000d8a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000d8e:	d2c4      	bcs.n	8000d1a <__udivmoddi4+0x222>
 8000d90:	4542      	cmp	r2, r8
 8000d92:	d2c2      	bcs.n	8000d1a <__udivmoddi4+0x222>
 8000d94:	f1a9 0102 	sub.w	r1, r9, #2
 8000d98:	443a      	add	r2, r7
 8000d9a:	e7be      	b.n	8000d1a <__udivmoddi4+0x222>
 8000d9c:	45f0      	cmp	r8, lr
 8000d9e:	d29d      	bcs.n	8000cdc <__udivmoddi4+0x1e4>
 8000da0:	ebbe 0302 	subs.w	r3, lr, r2
 8000da4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000da8:	3801      	subs	r0, #1
 8000daa:	46e1      	mov	r9, ip
 8000dac:	e796      	b.n	8000cdc <__udivmoddi4+0x1e4>
 8000dae:	eba7 0909 	sub.w	r9, r7, r9
 8000db2:	4449      	add	r1, r9
 8000db4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000db8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dbc:	fb09 f804 	mul.w	r8, r9, r4
 8000dc0:	e7db      	b.n	8000d7a <__udivmoddi4+0x282>
 8000dc2:	4673      	mov	r3, lr
 8000dc4:	e77f      	b.n	8000cc6 <__udivmoddi4+0x1ce>
 8000dc6:	4650      	mov	r0, sl
 8000dc8:	e766      	b.n	8000c98 <__udivmoddi4+0x1a0>
 8000dca:	4608      	mov	r0, r1
 8000dcc:	e6fd      	b.n	8000bca <__udivmoddi4+0xd2>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3a02      	subs	r2, #2
 8000dd2:	e733      	b.n	8000c3c <__udivmoddi4+0x144>
 8000dd4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dd8:	443b      	add	r3, r7
 8000dda:	e71c      	b.n	8000c16 <__udivmoddi4+0x11e>
 8000ddc:	4649      	mov	r1, r9
 8000dde:	e79c      	b.n	8000d1a <__udivmoddi4+0x222>
 8000de0:	eba1 0109 	sub.w	r1, r1, r9
 8000de4:	46c4      	mov	ip, r8
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fb09 f804 	mul.w	r8, r9, r4
 8000dee:	e7c4      	b.n	8000d7a <__udivmoddi4+0x282>

08000df0 <__aeabi_idiv0>:
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000df8:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <MX_CRC_Init+0x20>)
 8000dfa:	4a07      	ldr	r2, [pc, #28]	@ (8000e18 <MX_CRC_Init+0x24>)
 8000dfc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000dfe:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <MX_CRC_Init+0x20>)
 8000e00:	f001 fd54 	bl	80028ac <HAL_CRC_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000e0a:	f001 f93b 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000080 	.word	0x20000080
 8000e18:	40023000 	.word	0x40023000

08000e1c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0b      	ldr	r2, [pc, #44]	@ (8000e58 <HAL_CRC_MspInit+0x3c>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d10d      	bne.n	8000e4a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	4b0a      	ldr	r3, [pc, #40]	@ (8000e5c <HAL_CRC_MspInit+0x40>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	4a09      	ldr	r2, [pc, #36]	@ (8000e5c <HAL_CRC_MspInit+0x40>)
 8000e38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3e:	4b07      	ldr	r3, [pc, #28]	@ (8000e5c <HAL_CRC_MspInit+0x40>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	40023000 	.word	0x40023000
 8000e5c:	40023800 	.word	0x40023800

08000e60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e9c <MX_DMA_Init+0x3c>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000e9c <MX_DMA_Init+0x3c>)
 8000e70:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e76:	4b09      	ldr	r3, [pc, #36]	@ (8000e9c <MX_DMA_Init+0x3c>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2105      	movs	r1, #5
 8000e86:	203c      	movs	r0, #60	@ 0x3c
 8000e88:	f001 fce6 	bl	8002858 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000e8c:	203c      	movs	r0, #60	@ 0x3c
 8000e8e:	f001 fcff 	bl	8002890 <HAL_NVIC_EnableIRQ>

}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40023800 	.word	0x40023800

08000ea0 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000ea4:	4b15      	ldr	r3, [pc, #84]	@ (8000efc <MX_DMA2D_Init+0x5c>)
 8000ea6:	4a16      	ldr	r2, [pc, #88]	@ (8000f00 <MX_DMA2D_Init+0x60>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000eaa:	4b14      	ldr	r3, [pc, #80]	@ (8000efc <MX_DMA2D_Init+0x5c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000eb0:	4b12      	ldr	r3, [pc, #72]	@ (8000efc <MX_DMA2D_Init+0x5c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000eb6:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <MX_DMA2D_Init+0x5c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8000efc <MX_DMA2D_Init+0x5c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8000efc <MX_DMA2D_Init+0x5c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <MX_DMA2D_Init+0x5c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000ece:	4b0b      	ldr	r3, [pc, #44]	@ (8000efc <MX_DMA2D_Init+0x5c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000ed4:	4809      	ldr	r0, [pc, #36]	@ (8000efc <MX_DMA2D_Init+0x5c>)
 8000ed6:	f002 f875 	bl	8002fc4 <HAL_DMA2D_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000ee0:	f001 f8d0 	bl	8002084 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	4805      	ldr	r0, [pc, #20]	@ (8000efc <MX_DMA2D_Init+0x5c>)
 8000ee8:	f002 f9c6 	bl	8003278 <HAL_DMA2D_ConfigLayer>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000ef2:	f001 f8c7 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000088 	.word	0x20000088
 8000f00:	4002b000 	.word	0x4002b000

08000f04 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0e      	ldr	r2, [pc, #56]	@ (8000f4c <HAL_DMA2D_MspInit+0x48>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d115      	bne.n	8000f42 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f50 <HAL_DMA2D_MspInit+0x4c>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	4a0c      	ldr	r2, [pc, #48]	@ (8000f50 <HAL_DMA2D_MspInit+0x4c>)
 8000f20:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f26:	4b0a      	ldr	r3, [pc, #40]	@ (8000f50 <HAL_DMA2D_MspInit+0x4c>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2105      	movs	r1, #5
 8000f36:	205a      	movs	r0, #90	@ 0x5a
 8000f38:	f001 fc8e 	bl	8002858 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000f3c:	205a      	movs	r0, #90	@ 0x5a
 8000f3e:	f001 fca7 	bl	8002890 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	4002b000 	.word	0x4002b000
 8000f50:	40023800 	.word	0x40023800

08000f54 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
 8000f68:	615a      	str	r2, [r3, #20]
 8000f6a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fec <MX_FMC_Init+0x98>)
 8000f6e:	4a20      	ldr	r2, [pc, #128]	@ (8000ff0 <MX_FMC_Init+0x9c>)
 8000f70:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000f72:	4b1e      	ldr	r3, [pc, #120]	@ (8000fec <MX_FMC_Init+0x98>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000f78:	4b1c      	ldr	r3, [pc, #112]	@ (8000fec <MX_FMC_Init+0x98>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fec <MX_FMC_Init+0x98>)
 8000f80:	2204      	movs	r2, #4
 8000f82:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000f84:	4b19      	ldr	r3, [pc, #100]	@ (8000fec <MX_FMC_Init+0x98>)
 8000f86:	2210      	movs	r2, #16
 8000f88:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f8a:	4b18      	ldr	r3, [pc, #96]	@ (8000fec <MX_FMC_Init+0x98>)
 8000f8c:	2240      	movs	r2, #64	@ 0x40
 8000f8e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000f90:	4b16      	ldr	r3, [pc, #88]	@ (8000fec <MX_FMC_Init+0x98>)
 8000f92:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000f96:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000f98:	4b14      	ldr	r3, [pc, #80]	@ (8000fec <MX_FMC_Init+0x98>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000f9e:	4b13      	ldr	r3, [pc, #76]	@ (8000fec <MX_FMC_Init+0x98>)
 8000fa0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000fa4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000fa6:	4b11      	ldr	r3, [pc, #68]	@ (8000fec <MX_FMC_Init+0x98>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	@ (8000fec <MX_FMC_Init+0x98>)
 8000fae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fb2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000fb8:	2307      	movs	r3, #7
 8000fba:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000fc0:	2307      	movs	r3, #7
 8000fc2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4805      	ldr	r0, [pc, #20]	@ (8000fec <MX_FMC_Init+0x98>)
 8000fd6:	f005 fd31 	bl	8006a3c <HAL_SDRAM_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000fe0:	f001 f850 	bl	8002084 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000fe4:	bf00      	nop
 8000fe6:	3720      	adds	r7, #32
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200000c8 	.word	0x200000c8
 8000ff0:	a0000140 	.word	0xa0000140

08000ff4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001008:	4b3b      	ldr	r3, [pc, #236]	@ (80010f8 <HAL_FMC_MspInit+0x104>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d16f      	bne.n	80010f0 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001010:	4b39      	ldr	r3, [pc, #228]	@ (80010f8 <HAL_FMC_MspInit+0x104>)
 8001012:	2201      	movs	r2, #1
 8001014:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	603b      	str	r3, [r7, #0]
 800101a:	4b38      	ldr	r3, [pc, #224]	@ (80010fc <HAL_FMC_MspInit+0x108>)
 800101c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800101e:	4a37      	ldr	r2, [pc, #220]	@ (80010fc <HAL_FMC_MspInit+0x108>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6393      	str	r3, [r2, #56]	@ 0x38
 8001026:	4b35      	ldr	r3, [pc, #212]	@ (80010fc <HAL_FMC_MspInit+0x108>)
 8001028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001032:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001036:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001044:	230c      	movs	r3, #12
 8001046:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	4619      	mov	r1, r3
 800104c:	482c      	ldr	r0, [pc, #176]	@ (8001100 <HAL_FMC_MspInit+0x10c>)
 800104e:	f002 f9a5 	bl	800339c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001052:	2301      	movs	r3, #1
 8001054:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105e:	2303      	movs	r3, #3
 8001060:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001062:	230c      	movs	r3, #12
 8001064:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	4619      	mov	r1, r3
 800106a:	4826      	ldr	r0, [pc, #152]	@ (8001104 <HAL_FMC_MspInit+0x110>)
 800106c:	f002 f996 	bl	800339c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001070:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001074:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107e:	2303      	movs	r3, #3
 8001080:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001082:	230c      	movs	r3, #12
 8001084:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	4619      	mov	r1, r3
 800108a:	481f      	ldr	r0, [pc, #124]	@ (8001108 <HAL_FMC_MspInit+0x114>)
 800108c:	f002 f986 	bl	800339c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001090:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001094:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010a2:	230c      	movs	r3, #12
 80010a4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	4619      	mov	r1, r3
 80010aa:	4818      	ldr	r0, [pc, #96]	@ (800110c <HAL_FMC_MspInit+0x118>)
 80010ac:	f002 f976 	bl	800339c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80010b0:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80010b4:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010be:	2303      	movs	r3, #3
 80010c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010c2:	230c      	movs	r3, #12
 80010c4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	4619      	mov	r1, r3
 80010ca:	4811      	ldr	r0, [pc, #68]	@ (8001110 <HAL_FMC_MspInit+0x11c>)
 80010cc:	f002 f966 	bl	800339c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80010d0:	2360      	movs	r3, #96	@ 0x60
 80010d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010dc:	2303      	movs	r3, #3
 80010de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010e0:	230c      	movs	r3, #12
 80010e2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	4619      	mov	r1, r3
 80010e8:	480a      	ldr	r0, [pc, #40]	@ (8001114 <HAL_FMC_MspInit+0x120>)
 80010ea:	f002 f957 	bl	800339c <HAL_GPIO_Init>
 80010ee:	e000      	b.n	80010f2 <HAL_FMC_MspInit+0xfe>
    return;
 80010f0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	200000fc 	.word	0x200000fc
 80010fc:	40023800 	.word	0x40023800
 8001100:	40021400 	.word	0x40021400
 8001104:	40020800 	.word	0x40020800
 8001108:	40021800 	.word	0x40021800
 800110c:	40021000 	.word	0x40021000
 8001110:	40020c00 	.word	0x40020c00
 8001114:	40020400 	.word	0x40020400

08001118 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001120:	f7ff ff68 	bl	8000ff4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08e      	sub	sp, #56	@ 0x38
 8001148:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
 8001158:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	623b      	str	r3, [r7, #32]
 800115e:	4b81      	ldr	r3, [pc, #516]	@ (8001364 <MX_GPIO_Init+0x220>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	4a80      	ldr	r2, [pc, #512]	@ (8001364 <MX_GPIO_Init+0x220>)
 8001164:	f043 0304 	orr.w	r3, r3, #4
 8001168:	6313      	str	r3, [r2, #48]	@ 0x30
 800116a:	4b7e      	ldr	r3, [pc, #504]	@ (8001364 <MX_GPIO_Init+0x220>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	f003 0304 	and.w	r3, r3, #4
 8001172:	623b      	str	r3, [r7, #32]
 8001174:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
 800117a:	4b7a      	ldr	r3, [pc, #488]	@ (8001364 <MX_GPIO_Init+0x220>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	4a79      	ldr	r2, [pc, #484]	@ (8001364 <MX_GPIO_Init+0x220>)
 8001180:	f043 0320 	orr.w	r3, r3, #32
 8001184:	6313      	str	r3, [r2, #48]	@ 0x30
 8001186:	4b77      	ldr	r3, [pc, #476]	@ (8001364 <MX_GPIO_Init+0x220>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	f003 0320 	and.w	r3, r3, #32
 800118e:	61fb      	str	r3, [r7, #28]
 8001190:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	61bb      	str	r3, [r7, #24]
 8001196:	4b73      	ldr	r3, [pc, #460]	@ (8001364 <MX_GPIO_Init+0x220>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	4a72      	ldr	r2, [pc, #456]	@ (8001364 <MX_GPIO_Init+0x220>)
 800119c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a2:	4b70      	ldr	r3, [pc, #448]	@ (8001364 <MX_GPIO_Init+0x220>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011aa:	61bb      	str	r3, [r7, #24]
 80011ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
 80011b2:	4b6c      	ldr	r3, [pc, #432]	@ (8001364 <MX_GPIO_Init+0x220>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	4a6b      	ldr	r2, [pc, #428]	@ (8001364 <MX_GPIO_Init+0x220>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011be:	4b69      	ldr	r3, [pc, #420]	@ (8001364 <MX_GPIO_Init+0x220>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	4b65      	ldr	r3, [pc, #404]	@ (8001364 <MX_GPIO_Init+0x220>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	4a64      	ldr	r2, [pc, #400]	@ (8001364 <MX_GPIO_Init+0x220>)
 80011d4:	f043 0302 	orr.w	r3, r3, #2
 80011d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011da:	4b62      	ldr	r3, [pc, #392]	@ (8001364 <MX_GPIO_Init+0x220>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b5e      	ldr	r3, [pc, #376]	@ (8001364 <MX_GPIO_Init+0x220>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	4a5d      	ldr	r2, [pc, #372]	@ (8001364 <MX_GPIO_Init+0x220>)
 80011f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f6:	4b5b      	ldr	r3, [pc, #364]	@ (8001364 <MX_GPIO_Init+0x220>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	4b57      	ldr	r3, [pc, #348]	@ (8001364 <MX_GPIO_Init+0x220>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	4a56      	ldr	r2, [pc, #344]	@ (8001364 <MX_GPIO_Init+0x220>)
 800120c:	f043 0310 	orr.w	r3, r3, #16
 8001210:	6313      	str	r3, [r2, #48]	@ 0x30
 8001212:	4b54      	ldr	r3, [pc, #336]	@ (8001364 <MX_GPIO_Init+0x220>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	f003 0310 	and.w	r3, r3, #16
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	4b50      	ldr	r3, [pc, #320]	@ (8001364 <MX_GPIO_Init+0x220>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	4a4f      	ldr	r2, [pc, #316]	@ (8001364 <MX_GPIO_Init+0x220>)
 8001228:	f043 0308 	orr.w	r3, r3, #8
 800122c:	6313      	str	r3, [r2, #48]	@ 0x30
 800122e:	4b4d      	ldr	r3, [pc, #308]	@ (8001364 <MX_GPIO_Init+0x220>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	f003 0308 	and.w	r3, r3, #8
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800123a:	2200      	movs	r2, #0
 800123c:	2116      	movs	r1, #22
 800123e:	484a      	ldr	r0, [pc, #296]	@ (8001368 <MX_GPIO_Init+0x224>)
 8001240:	f002 fa70 	bl	8003724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001244:	2200      	movs	r2, #0
 8001246:	2180      	movs	r1, #128	@ 0x80
 8001248:	4848      	ldr	r0, [pc, #288]	@ (800136c <MX_GPIO_Init+0x228>)
 800124a:	f002 fa6b 	bl	8003724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001254:	4846      	ldr	r0, [pc, #280]	@ (8001370 <MX_GPIO_Init+0x22c>)
 8001256:	f002 fa65 	bl	8003724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001260:	4844      	ldr	r0, [pc, #272]	@ (8001374 <MX_GPIO_Init+0x230>)
 8001262:	f002 fa5f 	bl	8003724 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001266:	2316      	movs	r3, #22
 8001268:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126a:	2301      	movs	r3, #1
 800126c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	2300      	movs	r3, #0
 8001274:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001276:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800127a:	4619      	mov	r1, r3
 800127c:	483a      	ldr	r0, [pc, #232]	@ (8001368 <MX_GPIO_Init+0x224>)
 800127e:	f002 f88d 	bl	800339c <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8001282:	2301      	movs	r3, #1
 8001284:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001286:	2300      	movs	r3, #0
 8001288:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 800128e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001292:	4619      	mov	r1, r3
 8001294:	4835      	ldr	r0, [pc, #212]	@ (800136c <MX_GPIO_Init+0x228>)
 8001296:	f002 f881 	bl	800339c <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800129a:	f248 0306 	movw	r3, #32774	@ 0x8006
 800129e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012a0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80012a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ae:	4619      	mov	r1, r3
 80012b0:	482e      	ldr	r0, [pc, #184]	@ (800136c <MX_GPIO_Init+0x228>)
 80012b2:	f002 f873 	bl	800339c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80012b6:	2380      	movs	r3, #128	@ 0x80
 80012b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ba:	2301      	movs	r3, #1
 80012bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	2300      	movs	r3, #0
 80012c4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80012c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ca:	4619      	mov	r1, r3
 80012cc:	4827      	ldr	r0, [pc, #156]	@ (800136c <MX_GPIO_Init+0x228>)
 80012ce:	f002 f865 	bl	800339c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80012d2:	2320      	movs	r3, #32
 80012d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012d6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80012da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80012e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e4:	4619      	mov	r1, r3
 80012e6:	4820      	ldr	r0, [pc, #128]	@ (8001368 <MX_GPIO_Init+0x224>)
 80012e8:	f002 f858 	bl	800339c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80012ec:	2304      	movs	r3, #4
 80012ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80012f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012fc:	4619      	mov	r1, r3
 80012fe:	481e      	ldr	r0, [pc, #120]	@ (8001378 <MX_GPIO_Init+0x234>)
 8001300:	f002 f84c 	bl	800339c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001304:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001308:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130a:	2300      	movs	r3, #0
 800130c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001312:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001316:	4619      	mov	r1, r3
 8001318:	4815      	ldr	r0, [pc, #84]	@ (8001370 <MX_GPIO_Init+0x22c>)
 800131a:	f002 f83f 	bl	800339c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800131e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001322:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001324:	2301      	movs	r3, #1
 8001326:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001330:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001334:	4619      	mov	r1, r3
 8001336:	480e      	ldr	r0, [pc, #56]	@ (8001370 <MX_GPIO_Init+0x22c>)
 8001338:	f002 f830 	bl	800339c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800133c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001340:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001342:	2301      	movs	r3, #1
 8001344:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2300      	movs	r3, #0
 800134c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800134e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001352:	4619      	mov	r1, r3
 8001354:	4807      	ldr	r0, [pc, #28]	@ (8001374 <MX_GPIO_Init+0x230>)
 8001356:	f002 f821 	bl	800339c <HAL_GPIO_Init>

}
 800135a:	bf00      	nop
 800135c:	3738      	adds	r7, #56	@ 0x38
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800
 8001368:	40020800 	.word	0x40020800
 800136c:	40020000 	.word	0x40020000
 8001370:	40020c00 	.word	0x40020c00
 8001374:	40021800 	.word	0x40021800
 8001378:	40020400 	.word	0x40020400

0800137c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001380:	4b1b      	ldr	r3, [pc, #108]	@ (80013f0 <MX_I2C3_Init+0x74>)
 8001382:	4a1c      	ldr	r2, [pc, #112]	@ (80013f4 <MX_I2C3_Init+0x78>)
 8001384:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001386:	4b1a      	ldr	r3, [pc, #104]	@ (80013f0 <MX_I2C3_Init+0x74>)
 8001388:	4a1b      	ldr	r2, [pc, #108]	@ (80013f8 <MX_I2C3_Init+0x7c>)
 800138a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800138c:	4b18      	ldr	r3, [pc, #96]	@ (80013f0 <MX_I2C3_Init+0x74>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001392:	4b17      	ldr	r3, [pc, #92]	@ (80013f0 <MX_I2C3_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001398:	4b15      	ldr	r3, [pc, #84]	@ (80013f0 <MX_I2C3_Init+0x74>)
 800139a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800139e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a0:	4b13      	ldr	r3, [pc, #76]	@ (80013f0 <MX_I2C3_Init+0x74>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80013a6:	4b12      	ldr	r3, [pc, #72]	@ (80013f0 <MX_I2C3_Init+0x74>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ac:	4b10      	ldr	r3, [pc, #64]	@ (80013f0 <MX_I2C3_Init+0x74>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013b2:	4b0f      	ldr	r3, [pc, #60]	@ (80013f0 <MX_I2C3_Init+0x74>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80013b8:	480d      	ldr	r0, [pc, #52]	@ (80013f0 <MX_I2C3_Init+0x74>)
 80013ba:	f003 ff8d 	bl	80052d8 <HAL_I2C_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80013c4:	f000 fe5e 	bl	8002084 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013c8:	2100      	movs	r1, #0
 80013ca:	4809      	ldr	r0, [pc, #36]	@ (80013f0 <MX_I2C3_Init+0x74>)
 80013cc:	f004 f8c8 	bl	8005560 <HAL_I2CEx_ConfigAnalogFilter>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80013d6:	f000 fe55 	bl	8002084 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80013da:	2100      	movs	r1, #0
 80013dc:	4804      	ldr	r0, [pc, #16]	@ (80013f0 <MX_I2C3_Init+0x74>)
 80013de:	f004 f8fb 	bl	80055d8 <HAL_I2CEx_ConfigDigitalFilter>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80013e8:	f000 fe4c 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000100 	.word	0x20000100
 80013f4:	40005c00 	.word	0x40005c00
 80013f8:	000186a0 	.word	0x000186a0

080013fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	@ 0x28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a29      	ldr	r2, [pc, #164]	@ (80014c0 <HAL_I2C_MspInit+0xc4>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d14b      	bne.n	80014b6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	4b28      	ldr	r3, [pc, #160]	@ (80014c4 <HAL_I2C_MspInit+0xc8>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	4a27      	ldr	r2, [pc, #156]	@ (80014c4 <HAL_I2C_MspInit+0xc8>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	6313      	str	r3, [r2, #48]	@ 0x30
 800142e:	4b25      	ldr	r3, [pc, #148]	@ (80014c4 <HAL_I2C_MspInit+0xc8>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	4b21      	ldr	r3, [pc, #132]	@ (80014c4 <HAL_I2C_MspInit+0xc8>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	4a20      	ldr	r2, [pc, #128]	@ (80014c4 <HAL_I2C_MspInit+0xc8>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6313      	str	r3, [r2, #48]	@ 0x30
 800144a:	4b1e      	ldr	r3, [pc, #120]	@ (80014c4 <HAL_I2C_MspInit+0xc8>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001456:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800145a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800145c:	2312      	movs	r3, #18
 800145e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001460:	2301      	movs	r3, #1
 8001462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001464:	2300      	movs	r3, #0
 8001466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001468:	2304      	movs	r3, #4
 800146a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	4619      	mov	r1, r3
 8001472:	4815      	ldr	r0, [pc, #84]	@ (80014c8 <HAL_I2C_MspInit+0xcc>)
 8001474:	f001 ff92 	bl	800339c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001478:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800147c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800147e:	2312      	movs	r3, #18
 8001480:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001482:	2301      	movs	r3, #1
 8001484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800148a:	2304      	movs	r3, #4
 800148c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	4619      	mov	r1, r3
 8001494:	480d      	ldr	r0, [pc, #52]	@ (80014cc <HAL_I2C_MspInit+0xd0>)
 8001496:	f001 ff81 	bl	800339c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <HAL_I2C_MspInit+0xc8>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a2:	4a08      	ldr	r2, [pc, #32]	@ (80014c4 <HAL_I2C_MspInit+0xc8>)
 80014a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80014a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014aa:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <HAL_I2C_MspInit+0xc8>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80014b6:	bf00      	nop
 80014b8:	3728      	adds	r7, #40	@ 0x28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40005c00 	.word	0x40005c00
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40020800 	.word	0x40020800
 80014cc:	40020000 	.word	0x40020000

080014d0 <lcd_cmd>:
		CMD(COLMOD), 0x05, // chosen 16-bit, R5, G6, B5
		CMD(MAC), 0x48, //in documentation this means BGR but it turned out to be RGB, also it set (0,0) to up left corner
		CMD(POS_GAMMA_COR), 0x1F, 0x1A, 0x18, 0x0A, 0x0F, 0x06, 0x45, 0x87, 0x32, 0x0A, 0x07, 0x02, 0x07, 0x05, 0x00,
		CMD(NEG_GAMMA_COR), 0x00, 0x25, 0x27, 0x05, 0x10, 0x09, 0x3A, 0x56, 0x4C, 0x05, 0x0D, 0x0C, 0x2E, 0x2F, 0x0F,
};
static void lcd_cmd(uint8_t cmd){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_RESET); //teraz komendy
 80014da:	2200      	movs	r2, #0
 80014dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014e0:	480b      	ldr	r0, [pc, #44]	@ (8001510 <lcd_cmd+0x40>)
 80014e2:	f002 f91f 	bl	8003724 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2104      	movs	r1, #4
 80014ea:	480a      	ldr	r0, [pc, #40]	@ (8001514 <lcd_cmd+0x44>)
 80014ec:	f002 f91a 	bl	8003724 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &cmd, 1, HAL_MAX_DELAY);
 80014f0:	1df9      	adds	r1, r7, #7
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014f6:	2201      	movs	r2, #1
 80014f8:	4807      	ldr	r0, [pc, #28]	@ (8001518 <lcd_cmd+0x48>)
 80014fa:	f005 fb5c 	bl	8006bb6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_SET);
 80014fe:	2201      	movs	r2, #1
 8001500:	2104      	movs	r1, #4
 8001502:	4804      	ldr	r0, [pc, #16]	@ (8001514 <lcd_cmd+0x44>)
 8001504:	f002 f90e 	bl	8003724 <HAL_GPIO_WritePin>
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40020c00 	.word	0x40020c00
 8001514:	40020800 	.word	0x40020800
 8001518:	20025ae4 	.word	0x20025ae4

0800151c <lcd_data>:
static void lcd_data(uint8_t data){
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_SET); //teraz dane
 8001526:	2201      	movs	r2, #1
 8001528:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800152c:	480b      	ldr	r0, [pc, #44]	@ (800155c <lcd_data+0x40>)
 800152e:	f002 f8f9 	bl	8003724 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 8001532:	2200      	movs	r2, #0
 8001534:	2104      	movs	r1, #4
 8001536:	480a      	ldr	r0, [pc, #40]	@ (8001560 <lcd_data+0x44>)
 8001538:	f002 f8f4 	bl	8003724 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &data, 1, HAL_MAX_DELAY);
 800153c:	1df9      	adds	r1, r7, #7
 800153e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001542:	2201      	movs	r2, #1
 8001544:	4807      	ldr	r0, [pc, #28]	@ (8001564 <lcd_data+0x48>)
 8001546:	f005 fb36 	bl	8006bb6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_SET);
 800154a:	2201      	movs	r2, #1
 800154c:	2104      	movs	r1, #4
 800154e:	4804      	ldr	r0, [pc, #16]	@ (8001560 <lcd_data+0x44>)
 8001550:	f002 f8e8 	bl	8003724 <HAL_GPIO_WritePin>
}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40020c00 	.word	0x40020c00
 8001560:	40020800 	.word	0x40020800
 8001564:	20025ae4 	.word	0x20025ae4

08001568 <lcd_data16>:
static void lcd_data16(uint16_t value){
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 8001572:	88fb      	ldrh	r3, [r7, #6]
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	b29b      	uxth	r3, r3
 8001578:	b2db      	uxtb	r3, r3
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff ffce 	bl	800151c <lcd_data>
	lcd_data(value);
 8001580:	88fb      	ldrh	r3, [r7, #6]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ffc9 	bl	800151c <lcd_data>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <lcd_send>:
static void lcd_send(uint16_t value){
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	4603      	mov	r3, r0
 800159a:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 800159c:	88fb      	ldrh	r3, [r7, #6]
 800159e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d005      	beq.n	80015b2 <lcd_send+0x20>
		lcd_cmd(value);
 80015a6:	88fb      	ldrh	r3, [r7, #6]
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff ff90 	bl	80014d0 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 80015b0:	e004      	b.n	80015bc <lcd_send+0x2a>
		lcd_data(value);
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff ffb0 	bl	800151c <lcd_data>
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <lcd_init>:
void lcd_init(void){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
  chunk_size = (LCD_HEIGHT * LCD_WIDTH) / how_many_chunks;
 80015ca:	4b23      	ldr	r3, [pc, #140]	@ (8001658 <lcd_init+0x94>)
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	461a      	mov	r2, r3
 80015d0:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80015d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80015d8:	b29a      	uxth	r2, r3
 80015da:	4b20      	ldr	r3, [pc, #128]	@ (800165c <lcd_init+0x98>)
 80015dc:	801a      	strh	r2, [r3, #0]
  y_per_chunk = LCD_HEIGHT / how_many_chunks;
 80015de:	4b1e      	ldr	r3, [pc, #120]	@ (8001658 <lcd_init+0x94>)
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	461a      	mov	r2, r3
 80015e4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80015e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001660 <lcd_init+0x9c>)
 80015f0:	801a      	strh	r2, [r3, #0]

  int i;
  HAL_GPIO_WritePin(RDX_GPIO_Port, RDX_Pin, GPIO_PIN_RESET);
 80015f2:	2200      	movs	r2, #0
 80015f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015f8:	481a      	ldr	r0, [pc, #104]	@ (8001664 <lcd_init+0xa0>)
 80015fa:	f002 f893 	bl	8003724 <HAL_GPIO_WritePin>
  HAL_Delay(100); // w nocie 10 mikro sec
 80015fe:	2064      	movs	r0, #100	@ 0x64
 8001600:	f001 f84e 	bl	80026a0 <HAL_Delay>
  HAL_GPIO_WritePin(RDX_GPIO_Port, RDX_Pin, GPIO_PIN_SET);
 8001604:	2201      	movs	r2, #1
 8001606:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800160a:	4816      	ldr	r0, [pc, #88]	@ (8001664 <lcd_init+0xa0>)
 800160c:	f002 f88a 	bl	8003724 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001610:	2064      	movs	r0, #100	@ 0x64
 8001612:	f001 f845 	bl	80026a0 <HAL_Delay>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001616:	2300      	movs	r3, #0
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	e009      	b.n	8001630 <lcd_init+0x6c>
    lcd_send(init_table[i]);
 800161c:	4a12      	ldr	r2, [pc, #72]	@ (8001668 <lcd_init+0xa4>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ffb4 	bl	8001592 <lcd_send>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3301      	adds	r3, #1
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b35      	cmp	r3, #53	@ 0x35
 8001634:	d9f2      	bls.n	800161c <lcd_init+0x58>
  }
  HAL_Delay(200);
 8001636:	20c8      	movs	r0, #200	@ 0xc8
 8001638:	f001 f832 	bl	80026a0 <HAL_Delay>
  lcd_cmd(SLEEP_OUT);
 800163c:	2011      	movs	r0, #17
 800163e:	f7ff ff47 	bl	80014d0 <lcd_cmd>
  HAL_Delay(120);
 8001642:	2078      	movs	r0, #120	@ 0x78
 8001644:	f001 f82c 	bl	80026a0 <HAL_Delay>
  lcd_cmd(DISPLAY_ON);
 8001648:	2029      	movs	r0, #41	@ 0x29
 800164a:	f7ff ff41 	bl	80014d0 <lcd_cmd>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000000 	.word	0x20000000
 800165c:	20025a2e 	.word	0x20025a2e
 8001660:	20025a30 	.word	0x20025a30
 8001664:	40020c00 	.word	0x40020c00
 8001668:	0800ac08 	.word	0x0800ac08

0800166c <lcd_set_window>:
static void lcd_set_window(int x, int y, int width, int height){
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
 8001678:	603b      	str	r3, [r7, #0]
	lcd_cmd(COL_ADR_SET);
 800167a:	202a      	movs	r0, #42	@ 0x2a
 800167c:	f7ff ff28 	bl	80014d0 <lcd_cmd>
	lcd_data16(x);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	b29b      	uxth	r3, r3
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff6f 	bl	8001568 <lcd_data16>
	lcd_data16(x+width-1);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	b29a      	uxth	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	b29b      	uxth	r3, r3
 8001692:	4413      	add	r3, r2
 8001694:	b29b      	uxth	r3, r3
 8001696:	3b01      	subs	r3, #1
 8001698:	b29b      	uxth	r3, r3
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff ff64 	bl	8001568 <lcd_data16>
	lcd_cmd(PAGE_ADR_SET);
 80016a0:	202b      	movs	r0, #43	@ 0x2b
 80016a2:	f7ff ff15 	bl	80014d0 <lcd_cmd>
	lcd_data16(y);
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff ff5c 	bl	8001568 <lcd_data16>
	lcd_data16(y+height-1);
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	4413      	add	r3, r2
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	3b01      	subs	r3, #1
 80016be:	b29b      	uxth	r3, r3
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff51 	bl	8001568 <lcd_data16>
}
 80016c6:	bf00      	nop
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <lcd_update_rectangle>:
void lcd_update_rectangle(uint16_t idx,int x,int y,int width,int height,uint16_t color){
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60b9      	str	r1, [r7, #8]
 80016d8:	607a      	str	r2, [r7, #4]
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	4603      	mov	r3, r0
 80016de:	81fb      	strh	r3, [r7, #14]
	rects[idx].x = x;
 80016e0:	89fa      	ldrh	r2, [r7, #14]
 80016e2:	491b      	ldr	r1, [pc, #108]	@ (8001750 <lcd_update_rectangle+0x80>)
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	601a      	str	r2, [r3, #0]
	rects[idx].y = y;
 80016f2:	89fa      	ldrh	r2, [r7, #14]
 80016f4:	4916      	ldr	r1, [pc, #88]	@ (8001750 <lcd_update_rectangle+0x80>)
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	440b      	add	r3, r1
 8001700:	3304      	adds	r3, #4
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	601a      	str	r2, [r3, #0]
	rects[idx].width = width;
 8001706:	89fa      	ldrh	r2, [r7, #14]
 8001708:	4911      	ldr	r1, [pc, #68]	@ (8001750 <lcd_update_rectangle+0x80>)
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	440b      	add	r3, r1
 8001714:	3308      	adds	r3, #8
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	601a      	str	r2, [r3, #0]
	rects[idx].height = height;
 800171a:	89fa      	ldrh	r2, [r7, #14]
 800171c:	490c      	ldr	r1, [pc, #48]	@ (8001750 <lcd_update_rectangle+0x80>)
 800171e:	4613      	mov	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	440b      	add	r3, r1
 8001728:	330c      	adds	r3, #12
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	601a      	str	r2, [r3, #0]
	rects[idx].color = color;
 800172e:	89fa      	ldrh	r2, [r7, #14]
 8001730:	4907      	ldr	r1, [pc, #28]	@ (8001750 <lcd_update_rectangle+0x80>)
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	440b      	add	r3, r1
 800173c:	3310      	adds	r3, #16
 800173e:	8bba      	ldrh	r2, [r7, #28]
 8001740:	801a      	strh	r2, [r3, #0]
}
 8001742:	bf00      	nop
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	20000154 	.word	0x20000154

08001754 <lcd_update_circle>:
void lcd_update_circle(int x,int y,int radius,uint16_t color){
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	807b      	strh	r3, [r7, #2]
	player.x = x;
 8001762:	4a09      	ldr	r2, [pc, #36]	@ (8001788 <lcd_update_circle+0x34>)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6013      	str	r3, [r2, #0]
	player.y = y;
 8001768:	4a07      	ldr	r2, [pc, #28]	@ (8001788 <lcd_update_circle+0x34>)
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	6053      	str	r3, [r2, #4]
	player.radius = radius;
 800176e:	4a06      	ldr	r2, [pc, #24]	@ (8001788 <lcd_update_circle+0x34>)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6093      	str	r3, [r2, #8]
	player.color = color;
 8001774:	4a04      	ldr	r2, [pc, #16]	@ (8001788 <lcd_update_circle+0x34>)
 8001776:	887b      	ldrh	r3, [r7, #2]
 8001778:	8193      	strh	r3, [r2, #12]
}
 800177a:	bf00      	nop
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	2000021c 	.word	0x2000021c

0800178c <lcd_put_pixel>:

void lcd_put_pixel(int x, int y, uint16_t color){
 800178c:	b480      	push	{r7}
 800178e:	b087      	sub	sp, #28
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	4613      	mov	r3, r2
 8001798:	80fb      	strh	r3, [r7, #6]
	screen_buffer[ (LCD_WIDTH*y) + x] = __REV16(color); //to make send most significant bit first
 800179a:	88fb      	ldrh	r3, [r7, #6]
 800179c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	ba5b      	rev16	r3, r3
 80017a2:	613b      	str	r3, [r7, #16]
  return result;
 80017a4:	6939      	ldr	r1, [r7, #16]
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	4613      	mov	r3, r2
 80017aa:	011b      	lsls	r3, r3, #4
 80017ac:	1a9b      	subs	r3, r3, r2
 80017ae:	011b      	lsls	r3, r3, #4
 80017b0:	461a      	mov	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4413      	add	r3, r2
 80017b6:	b289      	uxth	r1, r1
 80017b8:	4a04      	ldr	r2, [pc, #16]	@ (80017cc <lcd_put_pixel+0x40>)
 80017ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 80017be:	bf00      	nop
 80017c0:	371c      	adds	r7, #28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	2000022c 	.word	0x2000022c

080017d0 <lcd_put_rect_to_buffer>:
static void lcd_put_rect_to_buffer(Rectangle rect){
 80017d0:	b084      	sub	sp, #16
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	f107 0c10 	add.w	ip, r7, #16
 80017dc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for(int y=rect.y;y<rect.y+rect.height;y++){
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	e021      	b.n	800182a <lcd_put_rect_to_buffer+0x5a>
		for(int x=rect.x;x<rect.x+rect.width;x++){
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	603b      	str	r3, [r7, #0]
 80017ea:	e015      	b.n	8001818 <lcd_put_rect_to_buffer+0x48>
			if(x>=0 && x<LCD_WIDTH && y>=0 && y<LCD_HEIGHT){
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	db0f      	blt.n	8001812 <lcd_put_rect_to_buffer+0x42>
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	2bef      	cmp	r3, #239	@ 0xef
 80017f6:	dc0c      	bgt.n	8001812 <lcd_put_rect_to_buffer+0x42>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	db09      	blt.n	8001812 <lcd_put_rect_to_buffer+0x42>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001804:	da05      	bge.n	8001812 <lcd_put_rect_to_buffer+0x42>
				lcd_put_pixel(x, y, rect.color);
 8001806:	8c3b      	ldrh	r3, [r7, #32]
 8001808:	461a      	mov	r2, r3
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	6838      	ldr	r0, [r7, #0]
 800180e:	f7ff ffbd 	bl	800178c <lcd_put_pixel>
		for(int x=rect.x;x<rect.x+rect.width;x++){
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	3301      	adds	r3, #1
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	4413      	add	r3, r2
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	429a      	cmp	r2, r3
 8001822:	dbe3      	blt.n	80017ec <lcd_put_rect_to_buffer+0x1c>
	for(int y=rect.y;y<rect.y+rect.height;y++){
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3301      	adds	r3, #1
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	4413      	add	r3, r2
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	429a      	cmp	r2, r3
 8001834:	dbd7      	blt.n	80017e6 <lcd_put_rect_to_buffer+0x16>
			}
		}
	}
}
 8001836:	bf00      	nop
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001842:	b004      	add	sp, #16
 8001844:	4770      	bx	lr
	...

08001848 <lcd_put_circ_to_buffer>:
static void lcd_put_circ_to_buffer(Circle circle){
 8001848:	b5b0      	push	{r4, r5, r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	463c      	mov	r4, r7
 8001850:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for(int y=circle.y-circle.radius;y<circle.y+circle.radius;y++){
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	e060      	b.n	8001920 <lcd_put_circ_to_buffer+0xd8>
		for(int x=circle.x-circle.radius;x<circle.x+circle.radius;x++){
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	e052      	b.n	800190e <lcd_put_circ_to_buffer+0xc6>
			if(x>=0 && x<LCD_WIDTH && y>=0 && y<LCD_HEIGHT){
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	2b00      	cmp	r3, #0
 800186c:	db4c      	blt.n	8001908 <lcd_put_circ_to_buffer+0xc0>
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	2bef      	cmp	r3, #239	@ 0xef
 8001872:	dc49      	bgt.n	8001908 <lcd_put_circ_to_buffer+0xc0>
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	2b00      	cmp	r3, #0
 8001878:	db46      	blt.n	8001908 <lcd_put_circ_to_buffer+0xc0>
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001880:	da42      	bge.n	8001908 <lcd_put_circ_to_buffer+0xc0>
				if ((pow(x - circle.x, 2) + pow(y - circle.y, 2)) <= pow(circle.radius, 2)){
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fe03 	bl	8000494 <__aeabi_i2d>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	ed9f 1b29 	vldr	d1, [pc, #164]	@ 8001938 <lcd_put_circ_to_buffer+0xf0>
 8001896:	ec43 2b10 	vmov	d0, r2, r3
 800189a:	f008 fa49 	bl	8009d30 <pow>
 800189e:	ec55 4b10 	vmov	r4, r5, d0
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fdf3 	bl	8000494 <__aeabi_i2d>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8001938 <lcd_put_circ_to_buffer+0xf0>
 80018b6:	ec43 2b10 	vmov	d0, r2, r3
 80018ba:	f008 fa39 	bl	8009d30 <pow>
 80018be:	ec53 2b10 	vmov	r2, r3, d0
 80018c2:	4620      	mov	r0, r4
 80018c4:	4629      	mov	r1, r5
 80018c6:	f7fe fc99 	bl	80001fc <__adddf3>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	4614      	mov	r4, r2
 80018d0:	461d      	mov	r5, r3
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fddd 	bl	8000494 <__aeabi_i2d>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	ed9f 1b16 	vldr	d1, [pc, #88]	@ 8001938 <lcd_put_circ_to_buffer+0xf0>
 80018e2:	ec43 2b10 	vmov	d0, r2, r3
 80018e6:	f008 fa23 	bl	8009d30 <pow>
 80018ea:	ec53 2b10 	vmov	r2, r3, d0
 80018ee:	4620      	mov	r0, r4
 80018f0:	4629      	mov	r1, r5
 80018f2:	f7ff f8b5 	bl	8000a60 <__aeabi_dcmple>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d005      	beq.n	8001908 <lcd_put_circ_to_buffer+0xc0>
					lcd_put_pixel(x, y, circle.color);
 80018fc:	89bb      	ldrh	r3, [r7, #12]
 80018fe:	461a      	mov	r2, r3
 8001900:	6979      	ldr	r1, [r7, #20]
 8001902:	6938      	ldr	r0, [r7, #16]
 8001904:	f7ff ff42 	bl	800178c <lcd_put_pixel>
		for(int x=circle.x-circle.radius;x<circle.x+circle.radius;x++){
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	3301      	adds	r3, #1
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	4413      	add	r3, r2
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	429a      	cmp	r2, r3
 8001918:	dba6      	blt.n	8001868 <lcd_put_circ_to_buffer+0x20>
	for(int y=circle.y-circle.radius;y<circle.y+circle.radius;y++){
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	3301      	adds	r3, #1
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	4413      	add	r3, r2
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	429a      	cmp	r2, r3
 800192a:	db98      	blt.n	800185e <lcd_put_circ_to_buffer+0x16>
				}
			}
		}
	}
}
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bdb0      	pop	{r4, r5, r7, pc}
 8001936:	bf00      	nop
 8001938:	00000000 	.word	0x00000000
 800193c:	40000000 	.word	0x40000000

08001940 <put_figures_to_buffer>:
static void put_figures_to_buffer(void){
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af02      	add	r7, sp, #8
	for(int i=0;i<RECTS_AMOUNT;i++){
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	e00e      	b.n	800196a <put_figures_to_buffer+0x2a>
		lcd_put_rect_to_buffer(rects[i]);
 800194c:	490c      	ldr	r1, [pc, #48]	@ (8001980 <put_figures_to_buffer+0x40>)
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	440b      	add	r3, r1
 800195a:	691a      	ldr	r2, [r3, #16]
 800195c:	9200      	str	r2, [sp, #0]
 800195e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001960:	f7ff ff36 	bl	80017d0 <lcd_put_rect_to_buffer>
	for(int i=0;i<RECTS_AMOUNT;i++){
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3301      	adds	r3, #1
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b09      	cmp	r3, #9
 800196e:	dded      	ble.n	800194c <put_figures_to_buffer+0xc>
	}
	lcd_put_circ_to_buffer(player);
 8001970:	4b04      	ldr	r3, [pc, #16]	@ (8001984 <put_figures_to_buffer+0x44>)
 8001972:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001974:	f7ff ff68 	bl	8001848 <lcd_put_circ_to_buffer>
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000154 	.word	0x20000154
 8001984:	2000021c 	.word	0x2000021c

08001988 <lcd_update>:
void lcd_update(void){
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
	put_figures_to_buffer();
 800198c:	f7ff ffd8 	bl	8001940 <put_figures_to_buffer>

	current_chunk = 0;
 8001990:	4b1b      	ldr	r3, [pc, #108]	@ (8001a00 <lcd_update+0x78>)
 8001992:	2200      	movs	r2, #0
 8001994:	801a      	strh	r2, [r3, #0]
	lcd_set_window(0, current_chunk*y_per_chunk, LCD_WIDTH, LCD_HEIGHT/how_many_chunks);
 8001996:	4b1a      	ldr	r3, [pc, #104]	@ (8001a00 <lcd_update+0x78>)
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	4b19      	ldr	r3, [pc, #100]	@ (8001a04 <lcd_update+0x7c>)
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	fb03 f102 	mul.w	r1, r3, r2
 80019a4:	4b18      	ldr	r3, [pc, #96]	@ (8001a08 <lcd_update+0x80>)
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80019ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80019b2:	22f0      	movs	r2, #240	@ 0xf0
 80019b4:	2000      	movs	r0, #0
 80019b6:	f7ff fe59 	bl	800166c <lcd_set_window>
	lcd_cmd(MEM_WRITE);
 80019ba:	202c      	movs	r0, #44	@ 0x2c
 80019bc:	f7ff fd88 	bl	80014d0 <lcd_cmd>
	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_SET);
 80019c0:	2201      	movs	r2, #1
 80019c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019c6:	4811      	ldr	r0, [pc, #68]	@ (8001a0c <lcd_update+0x84>)
 80019c8:	f001 feac 	bl	8003724 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 80019cc:	2200      	movs	r2, #0
 80019ce:	2104      	movs	r1, #4
 80019d0:	480f      	ldr	r0, [pc, #60]	@ (8001a10 <lcd_update+0x88>)
 80019d2:	f001 fea7 	bl	8003724 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit_DMA(&hspi5, (uint8_t*)(screen_buffer + (current_chunk * chunk_size)), 2*chunk_size);
 80019d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a00 <lcd_update+0x78>)
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	461a      	mov	r2, r3
 80019dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001a14 <lcd_update+0x8c>)
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	fb02 f303 	mul.w	r3, r2, r3
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	4a0c      	ldr	r2, [pc, #48]	@ (8001a18 <lcd_update+0x90>)
 80019e8:	1899      	adds	r1, r3, r2
 80019ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001a14 <lcd_update+0x8c>)
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	461a      	mov	r2, r3
 80019f4:	4809      	ldr	r0, [pc, #36]	@ (8001a1c <lcd_update+0x94>)
 80019f6:	f005 fa23 	bl	8006e40 <HAL_SPI_Transmit_DMA>
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20025a2c 	.word	0x20025a2c
 8001a04:	20025a30 	.word	0x20025a30
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	40020c00 	.word	0x40020c00
 8001a10:	40020800 	.word	0x40020800
 8001a14:	20025a2e 	.word	0x20025a2e
 8001a18:	2000022c 	.word	0x2000022c
 8001a1c:	20025ae4 	.word	0x20025ae4

08001a20 <lcd_transfer_done>:
void lcd_transfer_done(void){
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_SET);
 8001a24:	2201      	movs	r2, #1
 8001a26:	2104      	movs	r1, #4
 8001a28:	4802      	ldr	r0, [pc, #8]	@ (8001a34 <lcd_transfer_done+0x14>)
 8001a2a:	f001 fe7b 	bl	8003724 <HAL_GPIO_WritePin>
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40020800 	.word	0x40020800

08001a38 <send_next_chunk>:
bool lcd_is_busy(void){
	if (HAL_SPI_GetState(&hspi5) == HAL_SPI_STATE_BUSY) return true;
	else return false;
}
static void send_next_chunk(void){
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
	lcd_set_window(0, current_chunk*y_per_chunk, LCD_WIDTH, LCD_HEIGHT/how_many_chunks);
 8001a3c:	4b19      	ldr	r3, [pc, #100]	@ (8001aa4 <send_next_chunk+0x6c>)
 8001a3e:	881b      	ldrh	r3, [r3, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b19      	ldr	r3, [pc, #100]	@ (8001aa8 <send_next_chunk+0x70>)
 8001a44:	881b      	ldrh	r3, [r3, #0]
 8001a46:	fb03 f102 	mul.w	r1, r3, r2
 8001a4a:	4b18      	ldr	r3, [pc, #96]	@ (8001aac <send_next_chunk+0x74>)
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001a54:	fb93 f3f2 	sdiv	r3, r3, r2
 8001a58:	22f0      	movs	r2, #240	@ 0xf0
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f7ff fe06 	bl	800166c <lcd_set_window>
	lcd_cmd(MEM_WRITE);
 8001a60:	202c      	movs	r0, #44	@ 0x2c
 8001a62:	f7ff fd35 	bl	80014d0 <lcd_cmd>
	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_SET);
 8001a66:	2201      	movs	r2, #1
 8001a68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a6c:	4810      	ldr	r0, [pc, #64]	@ (8001ab0 <send_next_chunk+0x78>)
 8001a6e:	f001 fe59 	bl	8003724 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2104      	movs	r1, #4
 8001a76:	480f      	ldr	r0, [pc, #60]	@ (8001ab4 <send_next_chunk+0x7c>)
 8001a78:	f001 fe54 	bl	8003724 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit_DMA(&hspi5, (uint8_t*)(screen_buffer + (current_chunk * chunk_size)), 2*chunk_size);
 8001a7c:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <send_next_chunk+0x6c>)
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab8 <send_next_chunk+0x80>)
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	fb02 f303 	mul.w	r3, r2, r3
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001abc <send_next_chunk+0x84>)
 8001a8e:	1899      	adds	r1, r3, r2
 8001a90:	4b09      	ldr	r3, [pc, #36]	@ (8001ab8 <send_next_chunk+0x80>)
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4809      	ldr	r0, [pc, #36]	@ (8001ac0 <send_next_chunk+0x88>)
 8001a9c:	f005 f9d0 	bl	8006e40 <HAL_SPI_Transmit_DMA>
}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20025a2c 	.word	0x20025a2c
 8001aa8:	20025a30 	.word	0x20025a30
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	40020c00 	.word	0x40020c00
 8001ab4:	40020800 	.word	0x40020800
 8001ab8:	20025a2e 	.word	0x20025a2e
 8001abc:	2000022c 	.word	0x2000022c
 8001ac0:	20025ae4 	.word	0x20025ae4

08001ac4 <go_for_next_chunk>:
void go_for_next_chunk(void){
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
	current_chunk++;
 8001ac8:	4b09      	ldr	r3, [pc, #36]	@ (8001af0 <go_for_next_chunk+0x2c>)
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	3301      	adds	r3, #1
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	4b07      	ldr	r3, [pc, #28]	@ (8001af0 <go_for_next_chunk+0x2c>)
 8001ad2:	801a      	strh	r2, [r3, #0]
	if (current_chunk < how_many_chunks) {
 8001ad4:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <go_for_next_chunk+0x2c>)
 8001ad6:	881a      	ldrh	r2, [r3, #0]
 8001ad8:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <go_for_next_chunk+0x30>)
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d202      	bcs.n	8001ae6 <go_for_next_chunk+0x22>
		send_next_chunk();
 8001ae0:	f7ff ffaa 	bl	8001a38 <send_next_chunk>
	}
	else {
		lcd_transfer_done();
	}
}
 8001ae4:	e001      	b.n	8001aea <go_for_next_chunk+0x26>
		lcd_transfer_done();
 8001ae6:	f7ff ff9b 	bl	8001a20 <lcd_transfer_done>
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20025a2c 	.word	0x20025a2c
 8001af4:	20000000 	.word	0x20000000

08001af8 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08e      	sub	sp, #56	@ 0x38
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001afe:	1d3b      	adds	r3, r7, #4
 8001b00:	2234      	movs	r2, #52	@ 0x34
 8001b02:	2100      	movs	r1, #0
 8001b04:	4618      	mov	r0, r3
 8001b06:	f008 f8d3 	bl	8009cb0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001b0a:	4b39      	ldr	r3, [pc, #228]	@ (8001bf0 <MX_LTDC_Init+0xf8>)
 8001b0c:	4a39      	ldr	r2, [pc, #228]	@ (8001bf4 <MX_LTDC_Init+0xfc>)
 8001b0e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001b10:	4b37      	ldr	r3, [pc, #220]	@ (8001bf0 <MX_LTDC_Init+0xf8>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001b16:	4b36      	ldr	r3, [pc, #216]	@ (8001bf0 <MX_LTDC_Init+0xf8>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001b1c:	4b34      	ldr	r3, [pc, #208]	@ (8001bf0 <MX_LTDC_Init+0xf8>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001b22:	4b33      	ldr	r3, [pc, #204]	@ (8001bf0 <MX_LTDC_Init+0xf8>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8001b28:	4b31      	ldr	r3, [pc, #196]	@ (8001bf0 <MX_LTDC_Init+0xf8>)
 8001b2a:	2209      	movs	r2, #9
 8001b2c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8001b2e:	4b30      	ldr	r3, [pc, #192]	@ (8001bf0 <MX_LTDC_Init+0xf8>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8001b34:	4b2e      	ldr	r3, [pc, #184]	@ (8001bf0 <MX_LTDC_Init+0xf8>)
 8001b36:	221d      	movs	r2, #29
 8001b38:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8001b3a:	4b2d      	ldr	r3, [pc, #180]	@ (8001bf0 <MX_LTDC_Init+0xf8>)
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8001b40:	4b2b      	ldr	r3, [pc, #172]	@ (8001bf0 <MX_LTDC_Init+0xf8>)
 8001b42:	f240 120d 	movw	r2, #269	@ 0x10d
 8001b46:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8001b48:	4b29      	ldr	r3, [pc, #164]	@ (8001bf0 <MX_LTDC_Init+0xf8>)
 8001b4a:	f240 1243 	movw	r2, #323	@ 0x143
 8001b4e:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 8001b50:	4b27      	ldr	r3, [pc, #156]	@ (8001bf0 <MX_LTDC_Init+0xf8>)
 8001b52:	f240 1217 	movw	r2, #279	@ 0x117
 8001b56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 8001b58:	4b25      	ldr	r3, [pc, #148]	@ (8001bf0 <MX_LTDC_Init+0xf8>)
 8001b5a:	f240 1247 	movw	r2, #327	@ 0x147
 8001b5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001b60:	4b23      	ldr	r3, [pc, #140]	@ (8001bf0 <MX_LTDC_Init+0xf8>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001b68:	4b21      	ldr	r3, [pc, #132]	@ (8001bf0 <MX_LTDC_Init+0xf8>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001b70:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf0 <MX_LTDC_Init+0xf8>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001b78:	481d      	ldr	r0, [pc, #116]	@ (8001bf0 <MX_LTDC_Init+0xf8>)
 8001b7a:	f003 fd6d 	bl	8005658 <HAL_LTDC_Init>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001b84:	f000 fa7e 	bl	8002084 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8001b8c:	23f0      	movs	r3, #240	@ 0xf0
 8001b8e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8001b94:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001b98:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001b9e:	23ff      	movs	r3, #255	@ 0xff
 8001ba0:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001ba6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001baa:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001bac:	2307      	movs	r3, #7
 8001bae:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8001bb0:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8001bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 8001bb6:	23f0      	movs	r3, #240	@ 0xf0
 8001bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 8001bba:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001bbe:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4805      	ldr	r0, [pc, #20]	@ (8001bf0 <MX_LTDC_Init+0xf8>)
 8001bda:	f003 fecf 	bl	800597c <HAL_LTDC_ConfigLayer>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8001be4:	f000 fa4e 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001be8:	bf00      	nop
 8001bea:	3738      	adds	r7, #56	@ 0x38
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20025a34 	.word	0x20025a34
 8001bf4:	40016800 	.word	0x40016800

08001bf8 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b09a      	sub	sp, #104	@ 0x68
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c14:	2230      	movs	r2, #48	@ 0x30
 8001c16:	2100      	movs	r1, #0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f008 f849 	bl	8009cb0 <memset>
  if(ltdcHandle->Instance==LTDC)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a85      	ldr	r2, [pc, #532]	@ (8001e38 <HAL_LTDC_MspInit+0x240>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	f040 8102 	bne.w	8001e2e <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001c2a:	2308      	movs	r3, #8
 8001c2c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001c2e:	2332      	movs	r3, #50	@ 0x32
 8001c30:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001c32:	2302      	movs	r3, #2
 8001c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001c36:	2300      	movs	r3, #0
 8001c38:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f004 fd3c 	bl	80066bc <HAL_RCCEx_PeriphCLKConfig>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001c4a:	f000 fa1b 	bl	8002084 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	623b      	str	r3, [r7, #32]
 8001c52:	4b7a      	ldr	r3, [pc, #488]	@ (8001e3c <HAL_LTDC_MspInit+0x244>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c56:	4a79      	ldr	r2, [pc, #484]	@ (8001e3c <HAL_LTDC_MspInit+0x244>)
 8001c58:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001c5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c5e:	4b77      	ldr	r3, [pc, #476]	@ (8001e3c <HAL_LTDC_MspInit+0x244>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c62:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c66:	623b      	str	r3, [r7, #32]
 8001c68:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61fb      	str	r3, [r7, #28]
 8001c6e:	4b73      	ldr	r3, [pc, #460]	@ (8001e3c <HAL_LTDC_MspInit+0x244>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	4a72      	ldr	r2, [pc, #456]	@ (8001e3c <HAL_LTDC_MspInit+0x244>)
 8001c74:	f043 0320 	orr.w	r3, r3, #32
 8001c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7a:	4b70      	ldr	r3, [pc, #448]	@ (8001e3c <HAL_LTDC_MspInit+0x244>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	f003 0320 	and.w	r3, r3, #32
 8001c82:	61fb      	str	r3, [r7, #28]
 8001c84:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	61bb      	str	r3, [r7, #24]
 8001c8a:	4b6c      	ldr	r3, [pc, #432]	@ (8001e3c <HAL_LTDC_MspInit+0x244>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	4a6b      	ldr	r2, [pc, #428]	@ (8001e3c <HAL_LTDC_MspInit+0x244>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c96:	4b69      	ldr	r3, [pc, #420]	@ (8001e3c <HAL_LTDC_MspInit+0x244>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	61bb      	str	r3, [r7, #24]
 8001ca0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	4b65      	ldr	r3, [pc, #404]	@ (8001e3c <HAL_LTDC_MspInit+0x244>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	4a64      	ldr	r2, [pc, #400]	@ (8001e3c <HAL_LTDC_MspInit+0x244>)
 8001cac:	f043 0302 	orr.w	r3, r3, #2
 8001cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb2:	4b62      	ldr	r3, [pc, #392]	@ (8001e3c <HAL_LTDC_MspInit+0x244>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
 8001cc2:	4b5e      	ldr	r3, [pc, #376]	@ (8001e3c <HAL_LTDC_MspInit+0x244>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc6:	4a5d      	ldr	r2, [pc, #372]	@ (8001e3c <HAL_LTDC_MspInit+0x244>)
 8001cc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cce:	4b5b      	ldr	r3, [pc, #364]	@ (8001e3c <HAL_LTDC_MspInit+0x244>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	4b57      	ldr	r3, [pc, #348]	@ (8001e3c <HAL_LTDC_MspInit+0x244>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce2:	4a56      	ldr	r2, [pc, #344]	@ (8001e3c <HAL_LTDC_MspInit+0x244>)
 8001ce4:	f043 0304 	orr.w	r3, r3, #4
 8001ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cea:	4b54      	ldr	r3, [pc, #336]	@ (8001e3c <HAL_LTDC_MspInit+0x244>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	4b50      	ldr	r3, [pc, #320]	@ (8001e3c <HAL_LTDC_MspInit+0x244>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfe:	4a4f      	ldr	r2, [pc, #316]	@ (8001e3c <HAL_LTDC_MspInit+0x244>)
 8001d00:	f043 0308 	orr.w	r3, r3, #8
 8001d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d06:	4b4d      	ldr	r3, [pc, #308]	@ (8001e3c <HAL_LTDC_MspInit+0x244>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001d12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d16:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d20:	2300      	movs	r3, #0
 8001d22:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d24:	230e      	movs	r3, #14
 8001d26:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001d28:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4844      	ldr	r0, [pc, #272]	@ (8001e40 <HAL_LTDC_MspInit+0x248>)
 8001d30:	f001 fb34 	bl	800339c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001d34:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001d38:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d42:	2300      	movs	r3, #0
 8001d44:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d46:	230e      	movs	r3, #14
 8001d48:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d4e:	4619      	mov	r1, r3
 8001d50:	483c      	ldr	r0, [pc, #240]	@ (8001e44 <HAL_LTDC_MspInit+0x24c>)
 8001d52:	f001 fb23 	bl	800339c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001d56:	2303      	movs	r3, #3
 8001d58:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d62:	2300      	movs	r3, #0
 8001d64:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001d66:	2309      	movs	r3, #9
 8001d68:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d6a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4835      	ldr	r0, [pc, #212]	@ (8001e48 <HAL_LTDC_MspInit+0x250>)
 8001d72:	f001 fb13 	bl	800339c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001d76:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001d7a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d84:	2300      	movs	r3, #0
 8001d86:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d88:	230e      	movs	r3, #14
 8001d8a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d8c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d90:	4619      	mov	r1, r3
 8001d92:	482d      	ldr	r0, [pc, #180]	@ (8001e48 <HAL_LTDC_MspInit+0x250>)
 8001d94:	f001 fb02 	bl	800339c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001d98:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001d9c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da6:	2300      	movs	r3, #0
 8001da8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001daa:	230e      	movs	r3, #14
 8001dac:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001dae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001db2:	4619      	mov	r1, r3
 8001db4:	4825      	ldr	r0, [pc, #148]	@ (8001e4c <HAL_LTDC_MspInit+0x254>)
 8001db6:	f001 faf1 	bl	800339c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001dba:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001dbe:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001dcc:	230e      	movs	r3, #14
 8001dce:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	481e      	ldr	r0, [pc, #120]	@ (8001e50 <HAL_LTDC_MspInit+0x258>)
 8001dd8:	f001 fae0 	bl	800339c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2D6_Pin;
 8001ddc:	2348      	movs	r3, #72	@ 0x48
 8001dde:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de0:	2302      	movs	r3, #2
 8001de2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de8:	2300      	movs	r3, #0
 8001dea:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001dec:	230e      	movs	r3, #14
 8001dee:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001df0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001df4:	4619      	mov	r1, r3
 8001df6:	4817      	ldr	r0, [pc, #92]	@ (8001e54 <HAL_LTDC_MspInit+0x25c>)
 8001df8:	f001 fad0 	bl	800339c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001dfc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001e00:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e02:	2302      	movs	r3, #2
 8001e04:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001e0e:	2309      	movs	r3, #9
 8001e10:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e12:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e16:	4619      	mov	r1, r3
 8001e18:	480c      	ldr	r0, [pc, #48]	@ (8001e4c <HAL_LTDC_MspInit+0x254>)
 8001e1a:	f001 fabf 	bl	800339c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2105      	movs	r1, #5
 8001e22:	2058      	movs	r0, #88	@ 0x58
 8001e24:	f000 fd18 	bl	8002858 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001e28:	2058      	movs	r0, #88	@ 0x58
 8001e2a:	f000 fd31 	bl	8002890 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001e2e:	bf00      	nop
 8001e30:	3768      	adds	r7, #104	@ 0x68
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40016800 	.word	0x40016800
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40021400 	.word	0x40021400
 8001e44:	40020000 	.word	0x40020000
 8001e48:	40020400 	.word	0x40020400
 8001e4c:	40021800 	.word	0x40021800
 8001e50:	40020800 	.word	0x40020800
 8001e54:	40020c00 	.word	0x40020c00

08001e58 <click_led>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void click_led(){
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
	static uint8_t clicked;
	static uint32_t time;
	if(HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin)==GPIO_PIN_SET){
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	4815      	ldr	r0, [pc, #84]	@ (8001eb4 <click_led+0x5c>)
 8001e60:	f001 fc48 	bl	80036f4 <HAL_GPIO_ReadPin>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d11e      	bne.n	8001ea8 <click_led+0x50>
		if((HAL_GetTick()-time)>50){
 8001e6a:	f000 fc0d 	bl	8002688 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	4b11      	ldr	r3, [pc, #68]	@ (8001eb8 <click_led+0x60>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b32      	cmp	r3, #50	@ 0x32
 8001e78:	d919      	bls.n	8001eae <click_led+0x56>
			time=HAL_GetTick();
 8001e7a:	f000 fc05 	bl	8002688 <HAL_GetTick>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4a0d      	ldr	r2, [pc, #52]	@ (8001eb8 <click_led+0x60>)
 8001e82:	6013      	str	r3, [r2, #0]
			if(clicked==0){
 8001e84:	4b0d      	ldr	r3, [pc, #52]	@ (8001ebc <click_led+0x64>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d110      	bne.n	8001eae <click_led+0x56>
				clicked=1;
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ebc <click_led+0x64>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001e92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e96:	480a      	ldr	r0, [pc, #40]	@ (8001ec0 <click_led+0x68>)
 8001e98:	f001 fc5d 	bl	8003756 <HAL_GPIO_TogglePin>
				time=HAL_GetTick();
 8001e9c:	f000 fbf4 	bl	8002688 <HAL_GetTick>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	4a05      	ldr	r2, [pc, #20]	@ (8001eb8 <click_led+0x60>)
 8001ea4:	6013      	str	r3, [r2, #0]
		}
	}
	else{
		clicked=0;
	}
}
 8001ea6:	e002      	b.n	8001eae <click_led+0x56>
		clicked=0;
 8001ea8:	4b04      	ldr	r3, [pc, #16]	@ (8001ebc <click_led+0x64>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40020000 	.word	0x40020000
 8001eb8:	20025adc 	.word	0x20025adc
 8001ebc:	20025ae0 	.word	0x20025ae0
 8001ec0:	40021800 	.word	0x40021800

08001ec4 <HAL_SPI_TxCpltCallback>:
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi5){
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a04      	ldr	r2, [pc, #16]	@ (8001ee0 <HAL_SPI_TxCpltCallback+0x1c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d101      	bne.n	8001ed8 <HAL_SPI_TxCpltCallback+0x14>
		go_for_next_chunk();
 8001ed4:	f7ff fdf6 	bl	8001ac4 <go_for_next_chunk>
	}
}
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20025ae4 	.word	0x20025ae4

08001ee4 <set_new_figs>:
void set_new_figs(void){
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af02      	add	r7, sp, #8
	lcd_update_rectangle(0, 0, 0, 100, 100, RED);
 8001eea:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001eee:	9301      	str	r3, [sp, #4]
 8001ef0:	2364      	movs	r3, #100	@ 0x64
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	2364      	movs	r3, #100	@ 0x64
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2100      	movs	r1, #0
 8001efa:	2000      	movs	r0, #0
 8001efc:	f7ff fbe8 	bl	80016d0 <lcd_update_rectangle>
	lcd_update_circle(100, 100, 20, GREEN);
 8001f00:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001f04:	2214      	movs	r2, #20
 8001f06:	2164      	movs	r1, #100	@ 0x64
 8001f08:	2064      	movs	r0, #100	@ 0x64
 8001f0a:	f7ff fc23 	bl	8001754 <lcd_update_circle>
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f1a:	f000 fb7f 	bl	800261c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f1e:	f000 f835 	bl	8001f8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f22:	f7ff f90f 	bl	8001144 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f26:	f7fe ff9b 	bl	8000e60 <MX_DMA_Init>
  MX_CRC_Init();
 8001f2a:	f7fe ff63 	bl	8000df4 <MX_CRC_Init>
  MX_DMA2D_Init();
 8001f2e:	f7fe ffb7 	bl	8000ea0 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001f32:	f7ff f80f 	bl	8000f54 <MX_FMC_Init>
  MX_I2C3_Init();
 8001f36:	f7ff fa21 	bl	800137c <MX_I2C3_Init>
  MX_LTDC_Init();
 8001f3a:	f7ff fddd 	bl	8001af8 <MX_LTDC_Init>
  MX_SPI5_Init();
 8001f3e:	f000 f8a7 	bl	8002090 <MX_SPI5_Init>
  MX_TIM1_Init();
 8001f42:	f000 fa5d 	bl	8002400 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001f46:	f000 facd 	bl	80024e4 <MX_USART1_UART_Init>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  lcd_init();
 8001f4a:	f7ff fb3b 	bl	80015c4 <lcd_init>
  for (int y = 0; y < LCD_HEIGHT; y++) {
 8001f4e:	2300      	movs	r3, #0
 8001f50:	607b      	str	r3, [r7, #4]
 8001f52:	e010      	b.n	8001f76 <main+0x62>
    for (int x = 0; x < LCD_WIDTH; x++) {
 8001f54:	2300      	movs	r3, #0
 8001f56:	603b      	str	r3, [r7, #0]
 8001f58:	e007      	b.n	8001f6a <main+0x56>
      lcd_put_pixel(x, y, BLUE);
 8001f5a:	221f      	movs	r2, #31
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	6838      	ldr	r0, [r7, #0]
 8001f60:	f7ff fc14 	bl	800178c <lcd_put_pixel>
    for (int x = 0; x < LCD_WIDTH; x++) {
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	3301      	adds	r3, #1
 8001f68:	603b      	str	r3, [r7, #0]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	2bef      	cmp	r3, #239	@ 0xef
 8001f6e:	ddf4      	ble.n	8001f5a <main+0x46>
  for (int y = 0; y < LCD_HEIGHT; y++) {
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3301      	adds	r3, #1
 8001f74:	607b      	str	r3, [r7, #4]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001f7c:	dbea      	blt.n	8001f54 <main+0x40>
    }
  }
  set_new_figs();
 8001f7e:	f7ff ffb1 	bl	8001ee4 <set_new_figs>
  lcd_update();
 8001f82:	f7ff fd01 	bl	8001988 <lcd_update>
  while (1)
  {
	  click_led();
 8001f86:	f7ff ff67 	bl	8001e58 <click_led>
 8001f8a:	e7fc      	b.n	8001f86 <main+0x72>

08001f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b094      	sub	sp, #80	@ 0x50
 8001f90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f92:	f107 0320 	add.w	r3, r7, #32
 8001f96:	2230      	movs	r2, #48	@ 0x30
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f007 fe88 	bl	8009cb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fa0:	f107 030c 	add.w	r3, r7, #12
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60bb      	str	r3, [r7, #8]
 8001fb4:	4b28      	ldr	r3, [pc, #160]	@ (8002058 <SystemClock_Config+0xcc>)
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb8:	4a27      	ldr	r2, [pc, #156]	@ (8002058 <SystemClock_Config+0xcc>)
 8001fba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fc0:	4b25      	ldr	r3, [pc, #148]	@ (8002058 <SystemClock_Config+0xcc>)
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001fcc:	2300      	movs	r3, #0
 8001fce:	607b      	str	r3, [r7, #4]
 8001fd0:	4b22      	ldr	r3, [pc, #136]	@ (800205c <SystemClock_Config+0xd0>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001fd8:	4a20      	ldr	r2, [pc, #128]	@ (800205c <SystemClock_Config+0xd0>)
 8001fda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	4b1e      	ldr	r3, [pc, #120]	@ (800205c <SystemClock_Config+0xd0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001fe8:	607b      	str	r3, [r7, #4]
 8001fea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fec:	2301      	movs	r3, #1
 8001fee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ff0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ff4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ffa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002000:	2304      	movs	r3, #4
 8002002:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002004:	2348      	movs	r3, #72	@ 0x48
 8002006:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002008:	2302      	movs	r3, #2
 800200a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800200c:	2303      	movs	r3, #3
 800200e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002010:	f107 0320 	add.w	r3, r7, #32
 8002014:	4618      	mov	r0, r3
 8002016:	f003 fe87 	bl	8005d28 <HAL_RCC_OscConfig>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002020:	f000 f830 	bl	8002084 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002024:	230f      	movs	r3, #15
 8002026:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002028:	2302      	movs	r3, #2
 800202a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002030:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002034:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800203a:	f107 030c 	add.w	r3, r7, #12
 800203e:	2102      	movs	r1, #2
 8002040:	4618      	mov	r0, r3
 8002042:	f004 f8e9 	bl	8006218 <HAL_RCC_ClockConfig>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800204c:	f000 f81a 	bl	8002084 <Error_Handler>
  }
}
 8002050:	bf00      	nop
 8002052:	3750      	adds	r7, #80	@ 0x50
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40023800 	.word	0x40023800
 800205c:	40007000 	.word	0x40007000

08002060 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a04      	ldr	r2, [pc, #16]	@ (8002080 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d101      	bne.n	8002076 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002072:	f000 faf5 	bl	8002660 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40001000 	.word	0x40001000

08002084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002088:	b672      	cpsid	i
}
 800208a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800208c:	bf00      	nop
 800208e:	e7fd      	b.n	800208c <Error_Handler+0x8>

08002090 <MX_SPI5_Init>:
SPI_HandleTypeDef hspi5;
DMA_HandleTypeDef hdma_spi5_tx;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8002094:	4b17      	ldr	r3, [pc, #92]	@ (80020f4 <MX_SPI5_Init+0x64>)
 8002096:	4a18      	ldr	r2, [pc, #96]	@ (80020f8 <MX_SPI5_Init+0x68>)
 8002098:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800209a:	4b16      	ldr	r3, [pc, #88]	@ (80020f4 <MX_SPI5_Init+0x64>)
 800209c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80020a0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80020a2:	4b14      	ldr	r3, [pc, #80]	@ (80020f4 <MX_SPI5_Init+0x64>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80020a8:	4b12      	ldr	r3, [pc, #72]	@ (80020f4 <MX_SPI5_Init+0x64>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020ae:	4b11      	ldr	r3, [pc, #68]	@ (80020f4 <MX_SPI5_Init+0x64>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020b4:	4b0f      	ldr	r3, [pc, #60]	@ (80020f4 <MX_SPI5_Init+0x64>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80020ba:	4b0e      	ldr	r3, [pc, #56]	@ (80020f4 <MX_SPI5_Init+0x64>)
 80020bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020c0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80020c2:	4b0c      	ldr	r3, [pc, #48]	@ (80020f4 <MX_SPI5_Init+0x64>)
 80020c4:	2218      	movs	r2, #24
 80020c6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020c8:	4b0a      	ldr	r3, [pc, #40]	@ (80020f4 <MX_SPI5_Init+0x64>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80020ce:	4b09      	ldr	r3, [pc, #36]	@ (80020f4 <MX_SPI5_Init+0x64>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020d4:	4b07      	ldr	r3, [pc, #28]	@ (80020f4 <MX_SPI5_Init+0x64>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80020da:	4b06      	ldr	r3, [pc, #24]	@ (80020f4 <MX_SPI5_Init+0x64>)
 80020dc:	220a      	movs	r2, #10
 80020de:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80020e0:	4804      	ldr	r0, [pc, #16]	@ (80020f4 <MX_SPI5_Init+0x64>)
 80020e2:	f004 fcdf 	bl	8006aa4 <HAL_SPI_Init>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80020ec:	f7ff ffca 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20025ae4 	.word	0x20025ae4
 80020f8:	40015000 	.word	0x40015000

080020fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08a      	sub	sp, #40	@ 0x28
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002104:	f107 0314 	add.w	r3, r7, #20
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a30      	ldr	r2, [pc, #192]	@ (80021dc <HAL_SPI_MspInit+0xe0>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d15a      	bne.n	80021d4 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	4b2f      	ldr	r3, [pc, #188]	@ (80021e0 <HAL_SPI_MspInit+0xe4>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002126:	4a2e      	ldr	r2, [pc, #184]	@ (80021e0 <HAL_SPI_MspInit+0xe4>)
 8002128:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800212c:	6453      	str	r3, [r2, #68]	@ 0x44
 800212e:	4b2c      	ldr	r3, [pc, #176]	@ (80021e0 <HAL_SPI_MspInit+0xe4>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002132:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	4b28      	ldr	r3, [pc, #160]	@ (80021e0 <HAL_SPI_MspInit+0xe4>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002142:	4a27      	ldr	r2, [pc, #156]	@ (80021e0 <HAL_SPI_MspInit+0xe4>)
 8002144:	f043 0320 	orr.w	r3, r3, #32
 8002148:	6313      	str	r3, [r2, #48]	@ 0x30
 800214a:	4b25      	ldr	r3, [pc, #148]	@ (80021e0 <HAL_SPI_MspInit+0xe4>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214e:	f003 0320 	and.w	r3, r3, #32
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002156:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800215a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215c:	2302      	movs	r3, #2
 800215e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	2300      	movs	r3, #0
 8002162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002164:	2300      	movs	r3, #0
 8002166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002168:	2305      	movs	r3, #5
 800216a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	4619      	mov	r1, r3
 8002172:	481c      	ldr	r0, [pc, #112]	@ (80021e4 <HAL_SPI_MspInit+0xe8>)
 8002174:	f001 f912 	bl	800339c <HAL_GPIO_Init>

    /* SPI5 DMA Init */
    /* SPI5_TX Init */
    hdma_spi5_tx.Instance = DMA2_Stream4;
 8002178:	4b1b      	ldr	r3, [pc, #108]	@ (80021e8 <HAL_SPI_MspInit+0xec>)
 800217a:	4a1c      	ldr	r2, [pc, #112]	@ (80021ec <HAL_SPI_MspInit+0xf0>)
 800217c:	601a      	str	r2, [r3, #0]
    hdma_spi5_tx.Init.Channel = DMA_CHANNEL_2;
 800217e:	4b1a      	ldr	r3, [pc, #104]	@ (80021e8 <HAL_SPI_MspInit+0xec>)
 8002180:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002184:	605a      	str	r2, [r3, #4]
    hdma_spi5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002186:	4b18      	ldr	r3, [pc, #96]	@ (80021e8 <HAL_SPI_MspInit+0xec>)
 8002188:	2240      	movs	r2, #64	@ 0x40
 800218a:	609a      	str	r2, [r3, #8]
    hdma_spi5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800218c:	4b16      	ldr	r3, [pc, #88]	@ (80021e8 <HAL_SPI_MspInit+0xec>)
 800218e:	2200      	movs	r2, #0
 8002190:	60da      	str	r2, [r3, #12]
    hdma_spi5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002192:	4b15      	ldr	r3, [pc, #84]	@ (80021e8 <HAL_SPI_MspInit+0xec>)
 8002194:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002198:	611a      	str	r2, [r3, #16]
    hdma_spi5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800219a:	4b13      	ldr	r3, [pc, #76]	@ (80021e8 <HAL_SPI_MspInit+0xec>)
 800219c:	2200      	movs	r2, #0
 800219e:	615a      	str	r2, [r3, #20]
    hdma_spi5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021a0:	4b11      	ldr	r3, [pc, #68]	@ (80021e8 <HAL_SPI_MspInit+0xec>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	619a      	str	r2, [r3, #24]
    hdma_spi5_tx.Init.Mode = DMA_NORMAL;
 80021a6:	4b10      	ldr	r3, [pc, #64]	@ (80021e8 <HAL_SPI_MspInit+0xec>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	61da      	str	r2, [r3, #28]
    hdma_spi5_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021ac:	4b0e      	ldr	r3, [pc, #56]	@ (80021e8 <HAL_SPI_MspInit+0xec>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	621a      	str	r2, [r3, #32]
    hdma_spi5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021b2:	4b0d      	ldr	r3, [pc, #52]	@ (80021e8 <HAL_SPI_MspInit+0xec>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi5_tx) != HAL_OK)
 80021b8:	480b      	ldr	r0, [pc, #44]	@ (80021e8 <HAL_SPI_MspInit+0xec>)
 80021ba:	f000 fb93 	bl	80028e4 <HAL_DMA_Init>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80021c4:	f7ff ff5e 	bl	8002084 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi5_tx);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a07      	ldr	r2, [pc, #28]	@ (80021e8 <HAL_SPI_MspInit+0xec>)
 80021cc:	649a      	str	r2, [r3, #72]	@ 0x48
 80021ce:	4a06      	ldr	r2, [pc, #24]	@ (80021e8 <HAL_SPI_MspInit+0xec>)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80021d4:	bf00      	nop
 80021d6:	3728      	adds	r7, #40	@ 0x28
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40015000 	.word	0x40015000
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40021400 	.word	0x40021400
 80021e8:	20025b3c 	.word	0x20025b3c
 80021ec:	40026470 	.word	0x40026470

080021f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	607b      	str	r3, [r7, #4]
 80021fa:	4b12      	ldr	r3, [pc, #72]	@ (8002244 <HAL_MspInit+0x54>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fe:	4a11      	ldr	r2, [pc, #68]	@ (8002244 <HAL_MspInit+0x54>)
 8002200:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002204:	6453      	str	r3, [r2, #68]	@ 0x44
 8002206:	4b0f      	ldr	r3, [pc, #60]	@ (8002244 <HAL_MspInit+0x54>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800220e:	607b      	str	r3, [r7, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	603b      	str	r3, [r7, #0]
 8002216:	4b0b      	ldr	r3, [pc, #44]	@ (8002244 <HAL_MspInit+0x54>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221a:	4a0a      	ldr	r2, [pc, #40]	@ (8002244 <HAL_MspInit+0x54>)
 800221c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002220:	6413      	str	r3, [r2, #64]	@ 0x40
 8002222:	4b08      	ldr	r3, [pc, #32]	@ (8002244 <HAL_MspInit+0x54>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800222a:	603b      	str	r3, [r7, #0]
 800222c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800222e:	2200      	movs	r2, #0
 8002230:	210f      	movs	r1, #15
 8002232:	f06f 0001 	mvn.w	r0, #1
 8002236:	f000 fb0f 	bl	8002858 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40023800 	.word	0x40023800

08002248 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08e      	sub	sp, #56	@ 0x38
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	4b33      	ldr	r3, [pc, #204]	@ (800232c <HAL_InitTick+0xe4>)
 800225e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002260:	4a32      	ldr	r2, [pc, #200]	@ (800232c <HAL_InitTick+0xe4>)
 8002262:	f043 0310 	orr.w	r3, r3, #16
 8002266:	6413      	str	r3, [r2, #64]	@ 0x40
 8002268:	4b30      	ldr	r3, [pc, #192]	@ (800232c <HAL_InitTick+0xe4>)
 800226a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226c:	f003 0310 	and.w	r3, r3, #16
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002274:	f107 0210 	add.w	r2, r7, #16
 8002278:	f107 0314 	add.w	r3, r7, #20
 800227c:	4611      	mov	r1, r2
 800227e:	4618      	mov	r0, r3
 8002280:	f004 f9ea 	bl	8006658 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002284:	6a3b      	ldr	r3, [r7, #32]
 8002286:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800228a:	2b00      	cmp	r3, #0
 800228c:	d103      	bne.n	8002296 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800228e:	f004 f9bb 	bl	8006608 <HAL_RCC_GetPCLK1Freq>
 8002292:	6378      	str	r0, [r7, #52]	@ 0x34
 8002294:	e004      	b.n	80022a0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002296:	f004 f9b7 	bl	8006608 <HAL_RCC_GetPCLK1Freq>
 800229a:	4603      	mov	r3, r0
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022a2:	4a23      	ldr	r2, [pc, #140]	@ (8002330 <HAL_InitTick+0xe8>)
 80022a4:	fba2 2303 	umull	r2, r3, r2, r3
 80022a8:	0c9b      	lsrs	r3, r3, #18
 80022aa:	3b01      	subs	r3, #1
 80022ac:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80022ae:	4b21      	ldr	r3, [pc, #132]	@ (8002334 <HAL_InitTick+0xec>)
 80022b0:	4a21      	ldr	r2, [pc, #132]	@ (8002338 <HAL_InitTick+0xf0>)
 80022b2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80022b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002334 <HAL_InitTick+0xec>)
 80022b6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80022ba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80022bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002334 <HAL_InitTick+0xec>)
 80022be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80022c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002334 <HAL_InitTick+0xec>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002334 <HAL_InitTick+0xec>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ce:	4b19      	ldr	r3, [pc, #100]	@ (8002334 <HAL_InitTick+0xec>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80022d4:	4817      	ldr	r0, [pc, #92]	@ (8002334 <HAL_InitTick+0xec>)
 80022d6:	f004 ffd7 	bl	8007288 <HAL_TIM_Base_Init>
 80022da:	4603      	mov	r3, r0
 80022dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80022e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d11b      	bne.n	8002320 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80022e8:	4812      	ldr	r0, [pc, #72]	@ (8002334 <HAL_InitTick+0xec>)
 80022ea:	f005 f81d 	bl	8007328 <HAL_TIM_Base_Start_IT>
 80022ee:	4603      	mov	r3, r0
 80022f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80022f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d111      	bne.n	8002320 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022fc:	2036      	movs	r0, #54	@ 0x36
 80022fe:	f000 fac7 	bl	8002890 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b0f      	cmp	r3, #15
 8002306:	d808      	bhi.n	800231a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002308:	2200      	movs	r2, #0
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	2036      	movs	r0, #54	@ 0x36
 800230e:	f000 faa3 	bl	8002858 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002312:	4a0a      	ldr	r2, [pc, #40]	@ (800233c <HAL_InitTick+0xf4>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	e002      	b.n	8002320 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002320:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002324:	4618      	mov	r0, r3
 8002326:	3738      	adds	r7, #56	@ 0x38
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40023800 	.word	0x40023800
 8002330:	431bde83 	.word	0x431bde83
 8002334:	20025b9c 	.word	0x20025b9c
 8002338:	40001000 	.word	0x40001000
 800233c:	20000008 	.word	0x20000008

08002340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002344:	bf00      	nop
 8002346:	e7fd      	b.n	8002344 <NMI_Handler+0x4>

08002348 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800234c:	bf00      	nop
 800234e:	e7fd      	b.n	800234c <HardFault_Handler+0x4>

08002350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002354:	bf00      	nop
 8002356:	e7fd      	b.n	8002354 <MemManage_Handler+0x4>

08002358 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800235c:	bf00      	nop
 800235e:	e7fd      	b.n	800235c <BusFault_Handler+0x4>

08002360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002364:	bf00      	nop
 8002366:	e7fd      	b.n	8002364 <UsageFault_Handler+0x4>

08002368 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
	...

08002378 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800237c:	4802      	ldr	r0, [pc, #8]	@ (8002388 <TIM6_DAC_IRQHandler+0x10>)
 800237e:	f005 f843 	bl	8007408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20025b9c 	.word	0x20025b9c

0800238c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_tx);
 8002390:	4802      	ldr	r0, [pc, #8]	@ (800239c <DMA2_Stream4_IRQHandler+0x10>)
 8002392:	f000 fbad 	bl	8002af0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20025b3c 	.word	0x20025b3c

080023a0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80023a4:	4802      	ldr	r0, [pc, #8]	@ (80023b0 <OTG_HS_IRQHandler+0x10>)
 80023a6:	f001 f9f0 	bl	800378a <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20025d64 	.word	0x20025d64

080023b4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80023b8:	4802      	ldr	r0, [pc, #8]	@ (80023c4 <LTDC_IRQHandler+0x10>)
 80023ba:	f003 fa1d 	bl	80057f8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20025a34 	.word	0x20025a34

080023c8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80023cc:	4802      	ldr	r0, [pc, #8]	@ (80023d8 <DMA2D_IRQHandler+0x10>)
 80023ce:	f000 fe42 	bl	8003056 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20000088 	.word	0x20000088

080023dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023e0:	4b06      	ldr	r3, [pc, #24]	@ (80023fc <SystemInit+0x20>)
 80023e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e6:	4a05      	ldr	r2, [pc, #20]	@ (80023fc <SystemInit+0x20>)
 80023e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002406:	f107 0308 	add.w	r3, r7, #8
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	605a      	str	r2, [r3, #4]
 8002410:	609a      	str	r2, [r3, #8]
 8002412:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002414:	463b      	mov	r3, r7
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800241c:	4b1e      	ldr	r3, [pc, #120]	@ (8002498 <MX_TIM1_Init+0x98>)
 800241e:	4a1f      	ldr	r2, [pc, #124]	@ (800249c <MX_TIM1_Init+0x9c>)
 8002420:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002422:	4b1d      	ldr	r3, [pc, #116]	@ (8002498 <MX_TIM1_Init+0x98>)
 8002424:	2200      	movs	r2, #0
 8002426:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002428:	4b1b      	ldr	r3, [pc, #108]	@ (8002498 <MX_TIM1_Init+0x98>)
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800242e:	4b1a      	ldr	r3, [pc, #104]	@ (8002498 <MX_TIM1_Init+0x98>)
 8002430:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002434:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002436:	4b18      	ldr	r3, [pc, #96]	@ (8002498 <MX_TIM1_Init+0x98>)
 8002438:	2200      	movs	r2, #0
 800243a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800243c:	4b16      	ldr	r3, [pc, #88]	@ (8002498 <MX_TIM1_Init+0x98>)
 800243e:	2200      	movs	r2, #0
 8002440:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002442:	4b15      	ldr	r3, [pc, #84]	@ (8002498 <MX_TIM1_Init+0x98>)
 8002444:	2200      	movs	r2, #0
 8002446:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002448:	4813      	ldr	r0, [pc, #76]	@ (8002498 <MX_TIM1_Init+0x98>)
 800244a:	f004 ff1d 	bl	8007288 <HAL_TIM_Base_Init>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002454:	f7ff fe16 	bl	8002084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002458:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800245c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800245e:	f107 0308 	add.w	r3, r7, #8
 8002462:	4619      	mov	r1, r3
 8002464:	480c      	ldr	r0, [pc, #48]	@ (8002498 <MX_TIM1_Init+0x98>)
 8002466:	f005 f8bf 	bl	80075e8 <HAL_TIM_ConfigClockSource>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002470:	f7ff fe08 	bl	8002084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002474:	2300      	movs	r3, #0
 8002476:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002478:	2300      	movs	r3, #0
 800247a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800247c:	463b      	mov	r3, r7
 800247e:	4619      	mov	r1, r3
 8002480:	4805      	ldr	r0, [pc, #20]	@ (8002498 <MX_TIM1_Init+0x98>)
 8002482:	f005 fae7 	bl	8007a54 <HAL_TIMEx_MasterConfigSynchronization>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800248c:	f7ff fdfa 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002490:	bf00      	nop
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	20025be4 	.word	0x20025be4
 800249c:	40010000 	.word	0x40010000

080024a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a0b      	ldr	r2, [pc, #44]	@ (80024dc <HAL_TIM_Base_MspInit+0x3c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d10d      	bne.n	80024ce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	4b0a      	ldr	r3, [pc, #40]	@ (80024e0 <HAL_TIM_Base_MspInit+0x40>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ba:	4a09      	ldr	r2, [pc, #36]	@ (80024e0 <HAL_TIM_Base_MspInit+0x40>)
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80024c2:	4b07      	ldr	r3, [pc, #28]	@ (80024e0 <HAL_TIM_Base_MspInit+0x40>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80024ce:	bf00      	nop
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40010000 	.word	0x40010000
 80024e0:	40023800 	.word	0x40023800

080024e4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024e8:	4b11      	ldr	r3, [pc, #68]	@ (8002530 <MX_USART1_UART_Init+0x4c>)
 80024ea:	4a12      	ldr	r2, [pc, #72]	@ (8002534 <MX_USART1_UART_Init+0x50>)
 80024ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80024ee:	4b10      	ldr	r3, [pc, #64]	@ (8002530 <MX_USART1_UART_Init+0x4c>)
 80024f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002530 <MX_USART1_UART_Init+0x4c>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002530 <MX_USART1_UART_Init+0x4c>)
 80024fe:	2200      	movs	r2, #0
 8002500:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002502:	4b0b      	ldr	r3, [pc, #44]	@ (8002530 <MX_USART1_UART_Init+0x4c>)
 8002504:	2200      	movs	r2, #0
 8002506:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002508:	4b09      	ldr	r3, [pc, #36]	@ (8002530 <MX_USART1_UART_Init+0x4c>)
 800250a:	220c      	movs	r2, #12
 800250c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800250e:	4b08      	ldr	r3, [pc, #32]	@ (8002530 <MX_USART1_UART_Init+0x4c>)
 8002510:	2200      	movs	r2, #0
 8002512:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002514:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <MX_USART1_UART_Init+0x4c>)
 8002516:	2200      	movs	r2, #0
 8002518:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800251a:	4805      	ldr	r0, [pc, #20]	@ (8002530 <MX_USART1_UART_Init+0x4c>)
 800251c:	f005 fb2a 	bl	8007b74 <HAL_UART_Init>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002526:	f7ff fdad 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20025c2c 	.word	0x20025c2c
 8002534:	40011000 	.word	0x40011000

08002538 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08a      	sub	sp, #40	@ 0x28
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002540:	f107 0314 	add.w	r3, r7, #20
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a19      	ldr	r2, [pc, #100]	@ (80025bc <HAL_UART_MspInit+0x84>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d12c      	bne.n	80025b4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	4b18      	ldr	r3, [pc, #96]	@ (80025c0 <HAL_UART_MspInit+0x88>)
 8002560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002562:	4a17      	ldr	r2, [pc, #92]	@ (80025c0 <HAL_UART_MspInit+0x88>)
 8002564:	f043 0310 	orr.w	r3, r3, #16
 8002568:	6453      	str	r3, [r2, #68]	@ 0x44
 800256a:	4b15      	ldr	r3, [pc, #84]	@ (80025c0 <HAL_UART_MspInit+0x88>)
 800256c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256e:	f003 0310 	and.w	r3, r3, #16
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	4b11      	ldr	r3, [pc, #68]	@ (80025c0 <HAL_UART_MspInit+0x88>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257e:	4a10      	ldr	r2, [pc, #64]	@ (80025c0 <HAL_UART_MspInit+0x88>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	6313      	str	r3, [r2, #48]	@ 0x30
 8002586:	4b0e      	ldr	r3, [pc, #56]	@ (80025c0 <HAL_UART_MspInit+0x88>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002592:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002598:	2302      	movs	r3, #2
 800259a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	2300      	movs	r3, #0
 800259e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a0:	2303      	movs	r3, #3
 80025a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025a4:	2307      	movs	r3, #7
 80025a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a8:	f107 0314 	add.w	r3, r7, #20
 80025ac:	4619      	mov	r1, r3
 80025ae:	4805      	ldr	r0, [pc, #20]	@ (80025c4 <HAL_UART_MspInit+0x8c>)
 80025b0:	f000 fef4 	bl	800339c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80025b4:	bf00      	nop
 80025b6:	3728      	adds	r7, #40	@ 0x28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40011000 	.word	0x40011000
 80025c0:	40023800 	.word	0x40023800
 80025c4:	40020000 	.word	0x40020000

080025c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80025c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002600 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025cc:	f7ff ff06 	bl	80023dc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025d0:	480c      	ldr	r0, [pc, #48]	@ (8002604 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025d2:	490d      	ldr	r1, [pc, #52]	@ (8002608 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025d4:	4a0d      	ldr	r2, [pc, #52]	@ (800260c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025d8:	e002      	b.n	80025e0 <LoopCopyDataInit>

080025da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025de:	3304      	adds	r3, #4

080025e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025e4:	d3f9      	bcc.n	80025da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002610 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025e8:	4c0a      	ldr	r4, [pc, #40]	@ (8002614 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025ec:	e001      	b.n	80025f2 <LoopFillZerobss>

080025ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025f0:	3204      	adds	r2, #4

080025f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025f4:	d3fb      	bcc.n	80025ee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80025f6:	f007 fb69 	bl	8009ccc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025fa:	f7ff fc8b 	bl	8001f14 <main>
  bx  lr    
 80025fe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002600:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002608:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800260c:	0800ace8 	.word	0x0800ace8
  ldr r2, =_sbss
 8002610:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8002614:	2002627c 	.word	0x2002627c

08002618 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002618:	e7fe      	b.n	8002618 <ADC_IRQHandler>
	...

0800261c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002620:	4b0e      	ldr	r3, [pc, #56]	@ (800265c <HAL_Init+0x40>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a0d      	ldr	r2, [pc, #52]	@ (800265c <HAL_Init+0x40>)
 8002626:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800262a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800262c:	4b0b      	ldr	r3, [pc, #44]	@ (800265c <HAL_Init+0x40>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a0a      	ldr	r2, [pc, #40]	@ (800265c <HAL_Init+0x40>)
 8002632:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002636:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002638:	4b08      	ldr	r3, [pc, #32]	@ (800265c <HAL_Init+0x40>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a07      	ldr	r2, [pc, #28]	@ (800265c <HAL_Init+0x40>)
 800263e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002642:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002644:	2003      	movs	r0, #3
 8002646:	f000 f8fc 	bl	8002842 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800264a:	200f      	movs	r0, #15
 800264c:	f7ff fdfc 	bl	8002248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002650:	f7ff fdce 	bl	80021f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40023c00 	.word	0x40023c00

08002660 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002664:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <HAL_IncTick+0x20>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	461a      	mov	r2, r3
 800266a:	4b06      	ldr	r3, [pc, #24]	@ (8002684 <HAL_IncTick+0x24>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4413      	add	r3, r2
 8002670:	4a04      	ldr	r2, [pc, #16]	@ (8002684 <HAL_IncTick+0x24>)
 8002672:	6013      	str	r3, [r2, #0]
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	2000000c 	.word	0x2000000c
 8002684:	20025c74 	.word	0x20025c74

08002688 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return uwTick;
 800268c:	4b03      	ldr	r3, [pc, #12]	@ (800269c <HAL_GetTick+0x14>)
 800268e:	681b      	ldr	r3, [r3, #0]
}
 8002690:	4618      	mov	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	20025c74 	.word	0x20025c74

080026a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026a8:	f7ff ffee 	bl	8002688 <HAL_GetTick>
 80026ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026b8:	d005      	beq.n	80026c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026ba:	4b0a      	ldr	r3, [pc, #40]	@ (80026e4 <HAL_Delay+0x44>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	461a      	mov	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4413      	add	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026c6:	bf00      	nop
 80026c8:	f7ff ffde 	bl	8002688 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d8f7      	bhi.n	80026c8 <HAL_Delay+0x28>
  {
  }
}
 80026d8:	bf00      	nop
 80026da:	bf00      	nop
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	2000000c 	.word	0x2000000c

080026e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f8:	4b0c      	ldr	r3, [pc, #48]	@ (800272c <__NVIC_SetPriorityGrouping+0x44>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026fe:	68ba      	ldr	r2, [r7, #8]
 8002700:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002704:	4013      	ands	r3, r2
 8002706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002710:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002714:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800271a:	4a04      	ldr	r2, [pc, #16]	@ (800272c <__NVIC_SetPriorityGrouping+0x44>)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	60d3      	str	r3, [r2, #12]
}
 8002720:	bf00      	nop
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002734:	4b04      	ldr	r3, [pc, #16]	@ (8002748 <__NVIC_GetPriorityGrouping+0x18>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	0a1b      	lsrs	r3, r3, #8
 800273a:	f003 0307 	and.w	r3, r3, #7
}
 800273e:	4618      	mov	r0, r3
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	e000ed00 	.word	0xe000ed00

0800274c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275a:	2b00      	cmp	r3, #0
 800275c:	db0b      	blt.n	8002776 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800275e:	79fb      	ldrb	r3, [r7, #7]
 8002760:	f003 021f 	and.w	r2, r3, #31
 8002764:	4907      	ldr	r1, [pc, #28]	@ (8002784 <__NVIC_EnableIRQ+0x38>)
 8002766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276a:	095b      	lsrs	r3, r3, #5
 800276c:	2001      	movs	r0, #1
 800276e:	fa00 f202 	lsl.w	r2, r0, r2
 8002772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	e000e100 	.word	0xe000e100

08002788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	6039      	str	r1, [r7, #0]
 8002792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002798:	2b00      	cmp	r3, #0
 800279a:	db0a      	blt.n	80027b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	490c      	ldr	r1, [pc, #48]	@ (80027d4 <__NVIC_SetPriority+0x4c>)
 80027a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a6:	0112      	lsls	r2, r2, #4
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	440b      	add	r3, r1
 80027ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027b0:	e00a      	b.n	80027c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	4908      	ldr	r1, [pc, #32]	@ (80027d8 <__NVIC_SetPriority+0x50>)
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	3b04      	subs	r3, #4
 80027c0:	0112      	lsls	r2, r2, #4
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	440b      	add	r3, r1
 80027c6:	761a      	strb	r2, [r3, #24]
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	e000e100 	.word	0xe000e100
 80027d8:	e000ed00 	.word	0xe000ed00

080027dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027dc:	b480      	push	{r7}
 80027de:	b089      	sub	sp, #36	@ 0x24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f1c3 0307 	rsb	r3, r3, #7
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	bf28      	it	cs
 80027fa:	2304      	movcs	r3, #4
 80027fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	3304      	adds	r3, #4
 8002802:	2b06      	cmp	r3, #6
 8002804:	d902      	bls.n	800280c <NVIC_EncodePriority+0x30>
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3b03      	subs	r3, #3
 800280a:	e000      	b.n	800280e <NVIC_EncodePriority+0x32>
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002810:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43da      	mvns	r2, r3
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	401a      	ands	r2, r3
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002824:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	fa01 f303 	lsl.w	r3, r1, r3
 800282e:	43d9      	mvns	r1, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002834:	4313      	orrs	r3, r2
         );
}
 8002836:	4618      	mov	r0, r3
 8002838:	3724      	adds	r7, #36	@ 0x24
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7ff ff4c 	bl	80026e8 <__NVIC_SetPriorityGrouping>
}
 8002850:	bf00      	nop
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
 8002864:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800286a:	f7ff ff61 	bl	8002730 <__NVIC_GetPriorityGrouping>
 800286e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	68b9      	ldr	r1, [r7, #8]
 8002874:	6978      	ldr	r0, [r7, #20]
 8002876:	f7ff ffb1 	bl	80027dc <NVIC_EncodePriority>
 800287a:	4602      	mov	r2, r0
 800287c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002880:	4611      	mov	r1, r2
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff ff80 	bl	8002788 <__NVIC_SetPriority>
}
 8002888:	bf00      	nop
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800289a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff ff54 	bl	800274c <__NVIC_EnableIRQ>
}
 80028a4:	bf00      	nop
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e00e      	b.n	80028dc <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	795b      	ldrb	r3, [r3, #5]
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d105      	bne.n	80028d4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7fe faa4 	bl	8000e1c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028f0:	f7ff feca 	bl	8002688 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e099      	b.n	8002a34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0201 	bic.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002920:	e00f      	b.n	8002942 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002922:	f7ff feb1 	bl	8002688 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b05      	cmp	r3, #5
 800292e:	d908      	bls.n	8002942 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2220      	movs	r2, #32
 8002934:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2203      	movs	r2, #3
 800293a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e078      	b.n	8002a34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1e8      	bne.n	8002922 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	4b38      	ldr	r3, [pc, #224]	@ (8002a3c <HAL_DMA_Init+0x158>)
 800295c:	4013      	ands	r3, r2
 800295e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800296e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800297a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002986:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	4313      	orrs	r3, r2
 8002992:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002998:	2b04      	cmp	r3, #4
 800299a:	d107      	bne.n	80029ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a4:	4313      	orrs	r3, r2
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f023 0307 	bic.w	r3, r3, #7
 80029c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d117      	bne.n	8002a06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	4313      	orrs	r3, r2
 80029de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00e      	beq.n	8002a06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 fa6f 	bl	8002ecc <DMA_CheckFifoParam>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d008      	beq.n	8002a06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2240      	movs	r2, #64	@ 0x40
 80029f8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002a02:	2301      	movs	r3, #1
 8002a04:	e016      	b.n	8002a34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 fa26 	bl	8002e60 <DMA_CalcBaseAndBitshift>
 8002a14:	4603      	mov	r3, r0
 8002a16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a1c:	223f      	movs	r2, #63	@ 0x3f
 8002a1e:	409a      	lsls	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	f010803f 	.word	0xf010803f

08002a40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
 8002a4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_DMA_Start_IT+0x26>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e040      	b.n	8002ae8 <HAL_DMA_Start_IT+0xa8>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d12f      	bne.n	8002ada <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	68b9      	ldr	r1, [r7, #8]
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 f9b8 	bl	8002e04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a98:	223f      	movs	r2, #63	@ 0x3f
 8002a9a:	409a      	lsls	r2, r3
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0216 	orr.w	r2, r2, #22
 8002aae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d007      	beq.n	8002ac8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0208 	orr.w	r2, r2, #8
 8002ac6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	e005      	b.n	8002ae6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002afc:	4b8e      	ldr	r3, [pc, #568]	@ (8002d38 <HAL_DMA_IRQHandler+0x248>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a8e      	ldr	r2, [pc, #568]	@ (8002d3c <HAL_DMA_IRQHandler+0x24c>)
 8002b02:	fba2 2303 	umull	r2, r3, r2, r3
 8002b06:	0a9b      	lsrs	r3, r3, #10
 8002b08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b1a:	2208      	movs	r2, #8
 8002b1c:	409a      	lsls	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d01a      	beq.n	8002b5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d013      	beq.n	8002b5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0204 	bic.w	r2, r2, #4
 8002b42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b48:	2208      	movs	r2, #8
 8002b4a:	409a      	lsls	r2, r3
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b54:	f043 0201 	orr.w	r2, r3, #1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b60:	2201      	movs	r2, #1
 8002b62:	409a      	lsls	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d012      	beq.n	8002b92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00b      	beq.n	8002b92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7e:	2201      	movs	r2, #1
 8002b80:	409a      	lsls	r2, r3
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b8a:	f043 0202 	orr.w	r2, r3, #2
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b96:	2204      	movs	r2, #4
 8002b98:	409a      	lsls	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d012      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00b      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb4:	2204      	movs	r2, #4
 8002bb6:	409a      	lsls	r2, r3
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc0:	f043 0204 	orr.w	r2, r3, #4
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bcc:	2210      	movs	r2, #16
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d043      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d03c      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bea:	2210      	movs	r2, #16
 8002bec:	409a      	lsls	r2, r3
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d018      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d108      	bne.n	8002c20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d024      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	4798      	blx	r3
 8002c1e:	e01f      	b.n	8002c60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d01b      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	4798      	blx	r3
 8002c30:	e016      	b.n	8002c60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d107      	bne.n	8002c50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0208 	bic.w	r2, r2, #8
 8002c4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c64:	2220      	movs	r2, #32
 8002c66:	409a      	lsls	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 808f 	beq.w	8002d90 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 8087 	beq.w	8002d90 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c86:	2220      	movs	r2, #32
 8002c88:	409a      	lsls	r2, r3
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b05      	cmp	r3, #5
 8002c98:	d136      	bne.n	8002d08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0216 	bic.w	r2, r2, #22
 8002ca8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695a      	ldr	r2, [r3, #20]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002cb8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d103      	bne.n	8002cca <HAL_DMA_IRQHandler+0x1da>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d007      	beq.n	8002cda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0208 	bic.w	r2, r2, #8
 8002cd8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cde:	223f      	movs	r2, #63	@ 0x3f
 8002ce0:	409a      	lsls	r2, r3
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d07e      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	4798      	blx	r3
        }
        return;
 8002d06:	e079      	b.n	8002dfc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d01d      	beq.n	8002d52 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10d      	bne.n	8002d40 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d031      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	4798      	blx	r3
 8002d34:	e02c      	b.n	8002d90 <HAL_DMA_IRQHandler+0x2a0>
 8002d36:	bf00      	nop
 8002d38:	20000004 	.word	0x20000004
 8002d3c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d023      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	4798      	blx	r3
 8002d50:	e01e      	b.n	8002d90 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10f      	bne.n	8002d80 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0210 	bic.w	r2, r2, #16
 8002d6e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d032      	beq.n	8002dfe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d022      	beq.n	8002dea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2205      	movs	r2, #5
 8002da8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0201 	bic.w	r2, r2, #1
 8002dba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d307      	bcc.n	8002dd8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f2      	bne.n	8002dbc <HAL_DMA_IRQHandler+0x2cc>
 8002dd6:	e000      	b.n	8002dda <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002dd8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d005      	beq.n	8002dfe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	4798      	blx	r3
 8002dfa:	e000      	b.n	8002dfe <HAL_DMA_IRQHandler+0x30e>
        return;
 8002dfc:	bf00      	nop
    }
  }
}
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
 8002e10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002e20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	2b40      	cmp	r3, #64	@ 0x40
 8002e30:	d108      	bne.n	8002e44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e42:	e007      	b.n	8002e54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	60da      	str	r2, [r3, #12]
}
 8002e54:	bf00      	nop
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	3b10      	subs	r3, #16
 8002e70:	4a14      	ldr	r2, [pc, #80]	@ (8002ec4 <DMA_CalcBaseAndBitshift+0x64>)
 8002e72:	fba2 2303 	umull	r2, r3, r2, r3
 8002e76:	091b      	lsrs	r3, r3, #4
 8002e78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e7a:	4a13      	ldr	r2, [pc, #76]	@ (8002ec8 <DMA_CalcBaseAndBitshift+0x68>)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4413      	add	r3, r2
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	461a      	mov	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d909      	bls.n	8002ea2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e96:	f023 0303 	bic.w	r3, r3, #3
 8002e9a:	1d1a      	adds	r2, r3, #4
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ea0:	e007      	b.n	8002eb2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002eaa:	f023 0303 	bic.w	r3, r3, #3
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	aaaaaaab 	.word	0xaaaaaaab
 8002ec8:	0800ac8c 	.word	0x0800ac8c

08002ecc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002edc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d11f      	bne.n	8002f26 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d856      	bhi.n	8002f9a <DMA_CheckFifoParam+0xce>
 8002eec:	a201      	add	r2, pc, #4	@ (adr r2, 8002ef4 <DMA_CheckFifoParam+0x28>)
 8002eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef2:	bf00      	nop
 8002ef4:	08002f05 	.word	0x08002f05
 8002ef8:	08002f17 	.word	0x08002f17
 8002efc:	08002f05 	.word	0x08002f05
 8002f00:	08002f9b 	.word	0x08002f9b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d046      	beq.n	8002f9e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f14:	e043      	b.n	8002f9e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f1e:	d140      	bne.n	8002fa2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f24:	e03d      	b.n	8002fa2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f2e:	d121      	bne.n	8002f74 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b03      	cmp	r3, #3
 8002f34:	d837      	bhi.n	8002fa6 <DMA_CheckFifoParam+0xda>
 8002f36:	a201      	add	r2, pc, #4	@ (adr r2, 8002f3c <DMA_CheckFifoParam+0x70>)
 8002f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3c:	08002f4d 	.word	0x08002f4d
 8002f40:	08002f53 	.word	0x08002f53
 8002f44:	08002f4d 	.word	0x08002f4d
 8002f48:	08002f65 	.word	0x08002f65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f50:	e030      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f56:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d025      	beq.n	8002faa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f62:	e022      	b.n	8002faa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f68:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f6c:	d11f      	bne.n	8002fae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f72:	e01c      	b.n	8002fae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d903      	bls.n	8002f82 <DMA_CheckFifoParam+0xb6>
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d003      	beq.n	8002f88 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f80:	e018      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	73fb      	strb	r3, [r7, #15]
      break;
 8002f86:	e015      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00e      	beq.n	8002fb2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
      break;
 8002f98:	e00b      	b.n	8002fb2 <DMA_CheckFifoParam+0xe6>
      break;
 8002f9a:	bf00      	nop
 8002f9c:	e00a      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002f9e:	bf00      	nop
 8002fa0:	e008      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fa2:	bf00      	nop
 8002fa4:	e006      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fa6:	bf00      	nop
 8002fa8:	e004      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002faa:	bf00      	nop
 8002fac:	e002      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002fae:	bf00      	nop
 8002fb0:	e000      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fb2:	bf00      	nop
    }
  } 
  
  return status; 
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop

08002fc4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e03b      	b.n	800304e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d106      	bne.n	8002ff0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7fd ff8a 	bl	8000f04 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003014:	f023 0107 	bic.w	r1, r3, #7
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800302e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	68d1      	ldr	r1, [r2, #12]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6812      	ldr	r2, [r2, #0]
 800303a:	430b      	orrs	r3, r1
 800303c:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b084      	sub	sp, #16
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d026      	beq.n	80030c6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800307e:	2b00      	cmp	r3, #0
 8003080:	d021      	beq.n	80030c6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003090:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003096:	f043 0201 	orr.w	r2, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2201      	movs	r2, #1
 80030a4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2204      	movs	r2, #4
 80030aa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f003 0320 	and.w	r3, r3, #32
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d026      	beq.n	800311e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d021      	beq.n	800311e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030e8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2220      	movs	r2, #32
 80030f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030f6:	f043 0202 	orr.w	r2, r3, #2
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2204      	movs	r2, #4
 8003102:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f003 0308 	and.w	r3, r3, #8
 8003124:	2b00      	cmp	r3, #0
 8003126:	d026      	beq.n	8003176 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800312e:	2b00      	cmp	r3, #0
 8003130:	d021      	beq.n	8003176 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003140:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2208      	movs	r2, #8
 8003148:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800314e:	f043 0204 	orr.w	r2, r3, #4
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2204      	movs	r2, #4
 800315a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	d013      	beq.n	80031a8 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00e      	beq.n	80031a8 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003198:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2204      	movs	r2, #4
 80031a0:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f853 	bl	800324e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d024      	beq.n	80031fc <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d01f      	beq.n	80031fc <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80031ca:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2202      	movs	r2, #2
 80031d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f003 0310 	and.w	r3, r3, #16
 8003202:	2b00      	cmp	r3, #0
 8003204:	d01f      	beq.n	8003246 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d01a      	beq.n	8003246 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800321e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2210      	movs	r2, #16
 8003226:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 f80e 	bl	8003262 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003246:	bf00      	nop
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
	...

08003278 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003278:	b480      	push	{r7}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <HAL_DMA2D_ConfigLayer+0x20>
 8003294:	2302      	movs	r3, #2
 8003296:	e079      	b.n	800338c <HAL_DMA2D_ConfigLayer+0x114>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	3318      	adds	r3, #24
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	4413      	add	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	041b      	lsls	r3, r3, #16
 80032be:	4313      	orrs	r3, r2
 80032c0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80032c2:	4b35      	ldr	r3, [pc, #212]	@ (8003398 <HAL_DMA2D_ConfigLayer+0x120>)
 80032c4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b0a      	cmp	r3, #10
 80032cc:	d003      	beq.n	80032d6 <HAL_DMA2D_ConfigLayer+0x5e>
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b09      	cmp	r3, #9
 80032d4:	d107      	bne.n	80032e6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	617b      	str	r3, [r7, #20]
 80032e4:	e005      	b.n	80032f2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	061b      	lsls	r3, r3, #24
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d120      	bne.n	800333a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	43db      	mvns	r3, r3
 8003302:	ea02 0103 	and.w	r1, r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	430a      	orrs	r2, r1
 800330e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	6812      	ldr	r2, [r2, #0]
 8003318:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b0a      	cmp	r3, #10
 8003320:	d003      	beq.n	800332a <HAL_DMA2D_ConfigLayer+0xb2>
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b09      	cmp	r3, #9
 8003328:	d127      	bne.n	800337a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003336:	629a      	str	r2, [r3, #40]	@ 0x28
 8003338:	e01f      	b.n	800337a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	69da      	ldr	r2, [r3, #28]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	43db      	mvns	r3, r3
 8003344:	ea02 0103 	and.w	r1, r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	430a      	orrs	r2, r1
 8003350:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	6812      	ldr	r2, [r2, #0]
 800335a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b0a      	cmp	r3, #10
 8003362:	d003      	beq.n	800336c <HAL_DMA2D_ConfigLayer+0xf4>
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b09      	cmp	r3, #9
 800336a:	d106      	bne.n	800337a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003378:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	371c      	adds	r7, #28
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	ff03000f 	.word	0xff03000f

0800339c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800339c:	b480      	push	{r7}
 800339e:	b089      	sub	sp, #36	@ 0x24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033b2:	2300      	movs	r3, #0
 80033b4:	61fb      	str	r3, [r7, #28]
 80033b6:	e177      	b.n	80036a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033b8:	2201      	movs	r2, #1
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	4013      	ands	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	f040 8166 	bne.w	80036a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f003 0303 	and.w	r3, r3, #3
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d005      	beq.n	80033ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d130      	bne.n	8003450 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	2203      	movs	r2, #3
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	43db      	mvns	r3, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4013      	ands	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68da      	ldr	r2, [r3, #12]
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4313      	orrs	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003424:	2201      	movs	r2, #1
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4013      	ands	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	091b      	lsrs	r3, r3, #4
 800343a:	f003 0201 	and.w	r2, r3, #1
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4313      	orrs	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f003 0303 	and.w	r3, r3, #3
 8003458:	2b03      	cmp	r3, #3
 800345a:	d017      	beq.n	800348c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	2203      	movs	r2, #3
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	43db      	mvns	r3, r3
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4013      	ands	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4313      	orrs	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f003 0303 	and.w	r3, r3, #3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d123      	bne.n	80034e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	08da      	lsrs	r2, r3, #3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3208      	adds	r2, #8
 80034a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	220f      	movs	r2, #15
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	43db      	mvns	r3, r3
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	4013      	ands	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	691a      	ldr	r2, [r3, #16]
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	08da      	lsrs	r2, r3, #3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	3208      	adds	r2, #8
 80034da:	69b9      	ldr	r1, [r7, #24]
 80034dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	2203      	movs	r2, #3
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 0203 	and.w	r2, r3, #3
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4313      	orrs	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 80c0 	beq.w	80036a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	4b66      	ldr	r3, [pc, #408]	@ (80036c0 <HAL_GPIO_Init+0x324>)
 8003528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800352a:	4a65      	ldr	r2, [pc, #404]	@ (80036c0 <HAL_GPIO_Init+0x324>)
 800352c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003530:	6453      	str	r3, [r2, #68]	@ 0x44
 8003532:	4b63      	ldr	r3, [pc, #396]	@ (80036c0 <HAL_GPIO_Init+0x324>)
 8003534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003536:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800353e:	4a61      	ldr	r2, [pc, #388]	@ (80036c4 <HAL_GPIO_Init+0x328>)
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	089b      	lsrs	r3, r3, #2
 8003544:	3302      	adds	r3, #2
 8003546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800354a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	220f      	movs	r2, #15
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	43db      	mvns	r3, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4013      	ands	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a58      	ldr	r2, [pc, #352]	@ (80036c8 <HAL_GPIO_Init+0x32c>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d037      	beq.n	80035da <HAL_GPIO_Init+0x23e>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a57      	ldr	r2, [pc, #348]	@ (80036cc <HAL_GPIO_Init+0x330>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d031      	beq.n	80035d6 <HAL_GPIO_Init+0x23a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a56      	ldr	r2, [pc, #344]	@ (80036d0 <HAL_GPIO_Init+0x334>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d02b      	beq.n	80035d2 <HAL_GPIO_Init+0x236>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a55      	ldr	r2, [pc, #340]	@ (80036d4 <HAL_GPIO_Init+0x338>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d025      	beq.n	80035ce <HAL_GPIO_Init+0x232>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a54      	ldr	r2, [pc, #336]	@ (80036d8 <HAL_GPIO_Init+0x33c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d01f      	beq.n	80035ca <HAL_GPIO_Init+0x22e>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a53      	ldr	r2, [pc, #332]	@ (80036dc <HAL_GPIO_Init+0x340>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d019      	beq.n	80035c6 <HAL_GPIO_Init+0x22a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a52      	ldr	r2, [pc, #328]	@ (80036e0 <HAL_GPIO_Init+0x344>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d013      	beq.n	80035c2 <HAL_GPIO_Init+0x226>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a51      	ldr	r2, [pc, #324]	@ (80036e4 <HAL_GPIO_Init+0x348>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d00d      	beq.n	80035be <HAL_GPIO_Init+0x222>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a50      	ldr	r2, [pc, #320]	@ (80036e8 <HAL_GPIO_Init+0x34c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d007      	beq.n	80035ba <HAL_GPIO_Init+0x21e>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a4f      	ldr	r2, [pc, #316]	@ (80036ec <HAL_GPIO_Init+0x350>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d101      	bne.n	80035b6 <HAL_GPIO_Init+0x21a>
 80035b2:	2309      	movs	r3, #9
 80035b4:	e012      	b.n	80035dc <HAL_GPIO_Init+0x240>
 80035b6:	230a      	movs	r3, #10
 80035b8:	e010      	b.n	80035dc <HAL_GPIO_Init+0x240>
 80035ba:	2308      	movs	r3, #8
 80035bc:	e00e      	b.n	80035dc <HAL_GPIO_Init+0x240>
 80035be:	2307      	movs	r3, #7
 80035c0:	e00c      	b.n	80035dc <HAL_GPIO_Init+0x240>
 80035c2:	2306      	movs	r3, #6
 80035c4:	e00a      	b.n	80035dc <HAL_GPIO_Init+0x240>
 80035c6:	2305      	movs	r3, #5
 80035c8:	e008      	b.n	80035dc <HAL_GPIO_Init+0x240>
 80035ca:	2304      	movs	r3, #4
 80035cc:	e006      	b.n	80035dc <HAL_GPIO_Init+0x240>
 80035ce:	2303      	movs	r3, #3
 80035d0:	e004      	b.n	80035dc <HAL_GPIO_Init+0x240>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e002      	b.n	80035dc <HAL_GPIO_Init+0x240>
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <HAL_GPIO_Init+0x240>
 80035da:	2300      	movs	r3, #0
 80035dc:	69fa      	ldr	r2, [r7, #28]
 80035de:	f002 0203 	and.w	r2, r2, #3
 80035e2:	0092      	lsls	r2, r2, #2
 80035e4:	4093      	lsls	r3, r2
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035ec:	4935      	ldr	r1, [pc, #212]	@ (80036c4 <HAL_GPIO_Init+0x328>)
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	089b      	lsrs	r3, r3, #2
 80035f2:	3302      	adds	r3, #2
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035fa:	4b3d      	ldr	r3, [pc, #244]	@ (80036f0 <HAL_GPIO_Init+0x354>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	43db      	mvns	r3, r3
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	4013      	ands	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	4313      	orrs	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800361e:	4a34      	ldr	r2, [pc, #208]	@ (80036f0 <HAL_GPIO_Init+0x354>)
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003624:	4b32      	ldr	r3, [pc, #200]	@ (80036f0 <HAL_GPIO_Init+0x354>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	43db      	mvns	r3, r3
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4013      	ands	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003648:	4a29      	ldr	r2, [pc, #164]	@ (80036f0 <HAL_GPIO_Init+0x354>)
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800364e:	4b28      	ldr	r3, [pc, #160]	@ (80036f0 <HAL_GPIO_Init+0x354>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	43db      	mvns	r3, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4013      	ands	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003672:	4a1f      	ldr	r2, [pc, #124]	@ (80036f0 <HAL_GPIO_Init+0x354>)
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003678:	4b1d      	ldr	r3, [pc, #116]	@ (80036f0 <HAL_GPIO_Init+0x354>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	43db      	mvns	r3, r3
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4013      	ands	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	4313      	orrs	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800369c:	4a14      	ldr	r2, [pc, #80]	@ (80036f0 <HAL_GPIO_Init+0x354>)
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	3301      	adds	r3, #1
 80036a6:	61fb      	str	r3, [r7, #28]
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	2b0f      	cmp	r3, #15
 80036ac:	f67f ae84 	bls.w	80033b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036b0:	bf00      	nop
 80036b2:	bf00      	nop
 80036b4:	3724      	adds	r7, #36	@ 0x24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40023800 	.word	0x40023800
 80036c4:	40013800 	.word	0x40013800
 80036c8:	40020000 	.word	0x40020000
 80036cc:	40020400 	.word	0x40020400
 80036d0:	40020800 	.word	0x40020800
 80036d4:	40020c00 	.word	0x40020c00
 80036d8:	40021000 	.word	0x40021000
 80036dc:	40021400 	.word	0x40021400
 80036e0:	40021800 	.word	0x40021800
 80036e4:	40021c00 	.word	0x40021c00
 80036e8:	40022000 	.word	0x40022000
 80036ec:	40022400 	.word	0x40022400
 80036f0:	40013c00 	.word	0x40013c00

080036f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691a      	ldr	r2, [r3, #16]
 8003704:	887b      	ldrh	r3, [r7, #2]
 8003706:	4013      	ands	r3, r2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800370c:	2301      	movs	r3, #1
 800370e:	73fb      	strb	r3, [r7, #15]
 8003710:	e001      	b.n	8003716 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003712:	2300      	movs	r3, #0
 8003714:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003716:	7bfb      	ldrb	r3, [r7, #15]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	807b      	strh	r3, [r7, #2]
 8003730:	4613      	mov	r3, r2
 8003732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003734:	787b      	ldrb	r3, [r7, #1]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800373a:	887a      	ldrh	r2, [r7, #2]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003740:	e003      	b.n	800374a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003742:	887b      	ldrh	r3, [r7, #2]
 8003744:	041a      	lsls	r2, r3, #16
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	619a      	str	r2, [r3, #24]
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003756:	b480      	push	{r7}
 8003758:	b085      	sub	sp, #20
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	460b      	mov	r3, r1
 8003760:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003768:	887a      	ldrh	r2, [r7, #2]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4013      	ands	r3, r2
 800376e:	041a      	lsls	r2, r3, #16
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	43d9      	mvns	r1, r3
 8003774:	887b      	ldrh	r3, [r7, #2]
 8003776:	400b      	ands	r3, r1
 8003778:	431a      	orrs	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	619a      	str	r2, [r3, #24]
}
 800377e:	bf00      	nop
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b086      	sub	sp, #24
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f004 fe7f 	bl	80084a4 <USB_GetMode>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	f040 80fb 	bne.w	80039a4 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f004 fe42 	bl	800843c <USB_ReadInterrupts>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 80f1 	beq.w	80039a2 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f004 fe39 	bl	800843c <USB_ReadInterrupts>
 80037ca:	4603      	mov	r3, r0
 80037cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037d4:	d104      	bne.n	80037e0 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80037de:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f004 fe29 	bl	800843c <USB_ReadInterrupts>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037f4:	d104      	bne.n	8003800 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80037fe:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f004 fe19 	bl	800843c <USB_ReadInterrupts>
 800380a:	4603      	mov	r3, r0
 800380c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003810:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003814:	d104      	bne.n	8003820 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800381e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f004 fe09 	bl	800843c <USB_ReadInterrupts>
 800382a:	4603      	mov	r3, r0
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b02      	cmp	r3, #2
 8003832:	d103      	bne.n	800383c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2202      	movs	r2, #2
 800383a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f004 fdfb 	bl	800843c <USB_ReadInterrupts>
 8003846:	4603      	mov	r3, r0
 8003848:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800384c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003850:	d120      	bne.n	8003894 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800385a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	d113      	bne.n	8003894 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800386c:	2110      	movs	r1, #16
 800386e:	6938      	ldr	r0, [r7, #16]
 8003870:	f004 fd2c 	bl	80082cc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003874:	6938      	ldr	r0, [r7, #16]
 8003876:	f004 fd5b 	bl	8008330 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	7a5b      	ldrb	r3, [r3, #9]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d105      	bne.n	800388e <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2101      	movs	r1, #1
 8003888:	4618      	mov	r0, r3
 800388a:	f004 fe19 	bl	80084c0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f006 f98a 	bl	8009ba8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f004 fdcf 	bl	800843c <USB_ReadInterrupts>
 800389e:	4603      	mov	r3, r0
 80038a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038a8:	d102      	bne.n	80038b0 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f001 fca1 	bl	80051f2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f004 fdc1 	bl	800843c <USB_ReadInterrupts>
 80038ba:	4603      	mov	r3, r0
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d106      	bne.n	80038d2 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f006 f953 	bl	8009b70 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2208      	movs	r2, #8
 80038d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f004 fdb0 	bl	800843c <USB_ReadInterrupts>
 80038dc:	4603      	mov	r3, r0
 80038de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038e6:	d139      	bne.n	800395c <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f004 fe24 	bl	800853a <USB_HC_ReadInterrupt>
 80038f2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80038f4:	2300      	movs	r3, #0
 80038f6:	617b      	str	r3, [r7, #20]
 80038f8:	e025      	b.n	8003946 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	fa22 f303 	lsr.w	r3, r2, r3
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d018      	beq.n	8003940 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	015a      	lsls	r2, r3, #5
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4413      	add	r3, r2
 8003916:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003920:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003924:	d106      	bne.n	8003934 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	b2db      	uxtb	r3, r3
 800392a:	4619      	mov	r1, r3
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f859 	bl	80039e4 <HCD_HC_IN_IRQHandler>
 8003932:	e005      	b.n	8003940 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	b2db      	uxtb	r3, r3
 8003938:	4619      	mov	r1, r3
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 febb 	bl	80046b6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	3301      	adds	r3, #1
 8003944:	617b      	str	r3, [r7, #20]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	795b      	ldrb	r3, [r3, #5]
 800394a:	461a      	mov	r2, r3
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	4293      	cmp	r3, r2
 8003950:	d3d3      	bcc.n	80038fa <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800395a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f004 fd6b 	bl	800843c <USB_ReadInterrupts>
 8003966:	4603      	mov	r3, r0
 8003968:	f003 0310 	and.w	r3, r3, #16
 800396c:	2b10      	cmp	r3, #16
 800396e:	d101      	bne.n	8003974 <HAL_HCD_IRQHandler+0x1ea>
 8003970:	2301      	movs	r3, #1
 8003972:	e000      	b.n	8003976 <HAL_HCD_IRQHandler+0x1ec>
 8003974:	2300      	movs	r3, #0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d014      	beq.n	80039a4 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	699a      	ldr	r2, [r3, #24]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0210 	bic.w	r2, r2, #16
 8003988:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f001 fb52 	bl	8005034 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699a      	ldr	r2, [r3, #24]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0210 	orr.w	r2, r2, #16
 800399e:	619a      	str	r2, [r3, #24]
 80039a0:	e000      	b.n	80039a4 <HAL_HCD_IRQHandler+0x21a>
      return;
 80039a2:	bf00      	nop
    }
  }
}
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b082      	sub	sp, #8
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <HAL_HCD_Stop+0x16>
 80039bc:	2302      	movs	r3, #2
 80039be:	e00d      	b.n	80039dc <HAL_HCD_Stop+0x32>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f004 fee5 	bl	800879c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	460b      	mov	r3, r1
 80039ee:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	78fa      	ldrb	r2, [r7, #3]
 8003a00:	4611      	mov	r1, r2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f004 fd2d 	bl	8008462 <USB_ReadChInterrupts>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	f003 0304 	and.w	r3, r3, #4
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d11a      	bne.n	8003a48 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003a12:	78fb      	ldrb	r3, [r7, #3]
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a1e:	461a      	mov	r2, r3
 8003a20:	2304      	movs	r3, #4
 8003a22:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003a24:	78fa      	ldrb	r2, [r7, #3]
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	1a9b      	subs	r3, r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	334d      	adds	r3, #77	@ 0x4d
 8003a34:	2207      	movs	r2, #7
 8003a36:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	78fa      	ldrb	r2, [r7, #3]
 8003a3e:	4611      	mov	r1, r2
 8003a40:	4618      	mov	r0, r3
 8003a42:	f004 fd8b 	bl	800855c <USB_HC_Halt>
 8003a46:	e09e      	b.n	8003b86 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	78fa      	ldrb	r2, [r7, #3]
 8003a4e:	4611      	mov	r1, r2
 8003a50:	4618      	mov	r0, r3
 8003a52:	f004 fd06 	bl	8008462 <USB_ReadChInterrupts>
 8003a56:	4603      	mov	r3, r0
 8003a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a60:	d11b      	bne.n	8003a9a <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003a62:	78fb      	ldrb	r3, [r7, #3]
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a6e:	461a      	mov	r2, r3
 8003a70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a74:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003a76:	78fa      	ldrb	r2, [r7, #3]
 8003a78:	6879      	ldr	r1, [r7, #4]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	1a9b      	subs	r3, r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	440b      	add	r3, r1
 8003a84:	334d      	adds	r3, #77	@ 0x4d
 8003a86:	2208      	movs	r2, #8
 8003a88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	4611      	mov	r1, r2
 8003a92:	4618      	mov	r0, r3
 8003a94:	f004 fd62 	bl	800855c <USB_HC_Halt>
 8003a98:	e075      	b.n	8003b86 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	78fa      	ldrb	r2, [r7, #3]
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f004 fcdd 	bl	8008462 <USB_ReadChInterrupts>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	f003 0308 	and.w	r3, r3, #8
 8003aae:	2b08      	cmp	r3, #8
 8003ab0:	d11a      	bne.n	8003ae8 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003ab2:	78fb      	ldrb	r3, [r7, #3]
 8003ab4:	015a      	lsls	r2, r3, #5
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003abe:	461a      	mov	r2, r3
 8003ac0:	2308      	movs	r3, #8
 8003ac2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003ac4:	78fa      	ldrb	r2, [r7, #3]
 8003ac6:	6879      	ldr	r1, [r7, #4]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	011b      	lsls	r3, r3, #4
 8003acc:	1a9b      	subs	r3, r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	334d      	adds	r3, #77	@ 0x4d
 8003ad4:	2206      	movs	r2, #6
 8003ad6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	78fa      	ldrb	r2, [r7, #3]
 8003ade:	4611      	mov	r1, r2
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f004 fd3b 	bl	800855c <USB_HC_Halt>
 8003ae6:	e04e      	b.n	8003b86 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	78fa      	ldrb	r2, [r7, #3]
 8003aee:	4611      	mov	r1, r2
 8003af0:	4618      	mov	r0, r3
 8003af2:	f004 fcb6 	bl	8008462 <USB_ReadChInterrupts>
 8003af6:	4603      	mov	r3, r0
 8003af8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003afc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b00:	d11b      	bne.n	8003b3a <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003b02:	78fb      	ldrb	r3, [r7, #3]
 8003b04:	015a      	lsls	r2, r3, #5
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b0e:	461a      	mov	r2, r3
 8003b10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b14:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003b16:	78fa      	ldrb	r2, [r7, #3]
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	011b      	lsls	r3, r3, #4
 8003b1e:	1a9b      	subs	r3, r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	440b      	add	r3, r1
 8003b24:	334d      	adds	r3, #77	@ 0x4d
 8003b26:	2209      	movs	r2, #9
 8003b28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	78fa      	ldrb	r2, [r7, #3]
 8003b30:	4611      	mov	r1, r2
 8003b32:	4618      	mov	r0, r3
 8003b34:	f004 fd12 	bl	800855c <USB_HC_Halt>
 8003b38:	e025      	b.n	8003b86 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	78fa      	ldrb	r2, [r7, #3]
 8003b40:	4611      	mov	r1, r2
 8003b42:	4618      	mov	r0, r3
 8003b44:	f004 fc8d 	bl	8008462 <USB_ReadChInterrupts>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b4e:	2b80      	cmp	r3, #128	@ 0x80
 8003b50:	d119      	bne.n	8003b86 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003b52:	78fb      	ldrb	r3, [r7, #3]
 8003b54:	015a      	lsls	r2, r3, #5
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	4413      	add	r3, r2
 8003b5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b5e:	461a      	mov	r2, r3
 8003b60:	2380      	movs	r3, #128	@ 0x80
 8003b62:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003b64:	78fa      	ldrb	r2, [r7, #3]
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	1a9b      	subs	r3, r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	334d      	adds	r3, #77	@ 0x4d
 8003b74:	2207      	movs	r2, #7
 8003b76:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	78fa      	ldrb	r2, [r7, #3]
 8003b7e:	4611      	mov	r1, r2
 8003b80:	4618      	mov	r0, r3
 8003b82:	f004 fceb 	bl	800855c <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	78fa      	ldrb	r2, [r7, #3]
 8003b8c:	4611      	mov	r1, r2
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f004 fc67 	bl	8008462 <USB_ReadChInterrupts>
 8003b94:	4603      	mov	r3, r0
 8003b96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b9e:	d112      	bne.n	8003bc6 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	78fa      	ldrb	r2, [r7, #3]
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f004 fcd7 	bl	800855c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003bae:	78fb      	ldrb	r3, [r7, #3]
 8003bb0:	015a      	lsls	r2, r3, #5
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bba:	461a      	mov	r2, r3
 8003bbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003bc0:	6093      	str	r3, [r2, #8]
 8003bc2:	f000 bd75 	b.w	80046b0 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	78fa      	ldrb	r2, [r7, #3]
 8003bcc:	4611      	mov	r1, r2
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f004 fc47 	bl	8008462 <USB_ReadChInterrupts>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	f040 8128 	bne.w	8003e30 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003be0:	78fb      	ldrb	r3, [r7, #3]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bec:	461a      	mov	r2, r3
 8003bee:	2320      	movs	r3, #32
 8003bf0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003bf2:	78fa      	ldrb	r2, [r7, #3]
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	011b      	lsls	r3, r3, #4
 8003bfa:	1a9b      	subs	r3, r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	440b      	add	r3, r1
 8003c00:	331b      	adds	r3, #27
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d119      	bne.n	8003c3c <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003c08:	78fa      	ldrb	r2, [r7, #3]
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	1a9b      	subs	r3, r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	331b      	adds	r3, #27
 8003c18:	2200      	movs	r2, #0
 8003c1a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003c1c:	78fb      	ldrb	r3, [r7, #3]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	78fa      	ldrb	r2, [r7, #3]
 8003c2c:	0151      	lsls	r1, r2, #5
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	440a      	add	r2, r1
 8003c32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c3a:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	799b      	ldrb	r3, [r3, #6]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d01b      	beq.n	8003c7c <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003c44:	78fa      	ldrb	r2, [r7, #3]
 8003c46:	6879      	ldr	r1, [r7, #4]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	1a9b      	subs	r3, r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	440b      	add	r3, r1
 8003c52:	3330      	adds	r3, #48	@ 0x30
 8003c54:	6819      	ldr	r1, [r3, #0]
 8003c56:	78fb      	ldrb	r3, [r7, #3]
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c68:	78fa      	ldrb	r2, [r7, #3]
 8003c6a:	1ac9      	subs	r1, r1, r3
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	011b      	lsls	r3, r3, #4
 8003c72:	1a9b      	subs	r3, r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4403      	add	r3, r0
 8003c78:	3338      	adds	r3, #56	@ 0x38
 8003c7a:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003c7c:	78fa      	ldrb	r2, [r7, #3]
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	4613      	mov	r3, r2
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	1a9b      	subs	r3, r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	334d      	adds	r3, #77	@ 0x4d
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003c90:	78fa      	ldrb	r2, [r7, #3]
 8003c92:	6879      	ldr	r1, [r7, #4]
 8003c94:	4613      	mov	r3, r2
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	1a9b      	subs	r3, r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	3344      	adds	r3, #68	@ 0x44
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003ca4:	78fb      	ldrb	r3, [r7, #3]
 8003ca6:	015a      	lsls	r2, r3, #5
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	4413      	add	r3, r2
 8003cac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003cb6:	78fa      	ldrb	r2, [r7, #3]
 8003cb8:	6879      	ldr	r1, [r7, #4]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	1a9b      	subs	r3, r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	440b      	add	r3, r1
 8003cc4:	3326      	adds	r3, #38	@ 0x26
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00a      	beq.n	8003ce2 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ccc:	78fa      	ldrb	r2, [r7, #3]
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	1a9b      	subs	r3, r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	440b      	add	r3, r1
 8003cda:	3326      	adds	r3, #38	@ 0x26
 8003cdc:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d110      	bne.n	8003d04 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	78fa      	ldrb	r2, [r7, #3]
 8003ce8:	4611      	mov	r1, r2
 8003cea:	4618      	mov	r0, r3
 8003cec:	f004 fc36 	bl	800855c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003cf0:	78fb      	ldrb	r3, [r7, #3]
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	2310      	movs	r3, #16
 8003d00:	6093      	str	r3, [r2, #8]
 8003d02:	e03d      	b.n	8003d80 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003d04:	78fa      	ldrb	r2, [r7, #3]
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	1a9b      	subs	r3, r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	3326      	adds	r3, #38	@ 0x26
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d00a      	beq.n	8003d30 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003d1a:	78fa      	ldrb	r2, [r7, #3]
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	1a9b      	subs	r3, r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	440b      	add	r3, r1
 8003d28:	3326      	adds	r3, #38	@ 0x26
 8003d2a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d127      	bne.n	8003d80 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003d30:	78fb      	ldrb	r3, [r7, #3]
 8003d32:	015a      	lsls	r2, r3, #5
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	4413      	add	r3, r2
 8003d38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	78fa      	ldrb	r2, [r7, #3]
 8003d40:	0151      	lsls	r1, r2, #5
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	440a      	add	r2, r1
 8003d46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d4a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003d4e:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003d50:	78fa      	ldrb	r2, [r7, #3]
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	4613      	mov	r3, r2
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	1a9b      	subs	r3, r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	334c      	adds	r3, #76	@ 0x4c
 8003d60:	2201      	movs	r2, #1
 8003d62:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003d64:	78fa      	ldrb	r2, [r7, #3]
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	1a9b      	subs	r3, r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	334c      	adds	r3, #76	@ 0x4c
 8003d74:	781a      	ldrb	r2, [r3, #0]
 8003d76:	78fb      	ldrb	r3, [r7, #3]
 8003d78:	4619      	mov	r1, r3
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f005 ff22 	bl	8009bc4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	799b      	ldrb	r3, [r3, #6]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d13b      	bne.n	8003e00 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003d88:	78fa      	ldrb	r2, [r7, #3]
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	011b      	lsls	r3, r3, #4
 8003d90:	1a9b      	subs	r3, r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	3338      	adds	r3, #56	@ 0x38
 8003d98:	6819      	ldr	r1, [r3, #0]
 8003d9a:	78fa      	ldrb	r2, [r7, #3]
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	1a9b      	subs	r3, r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4403      	add	r3, r0
 8003da8:	3328      	adds	r3, #40	@ 0x28
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	440b      	add	r3, r1
 8003dae:	1e59      	subs	r1, r3, #1
 8003db0:	78fa      	ldrb	r2, [r7, #3]
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	4613      	mov	r3, r2
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	1a9b      	subs	r3, r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4403      	add	r3, r0
 8003dbe:	3328      	adds	r3, #40	@ 0x28
 8003dc0:	881b      	ldrh	r3, [r3, #0]
 8003dc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 8470 	beq.w	80046b0 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003dd0:	78fa      	ldrb	r2, [r7, #3]
 8003dd2:	6879      	ldr	r1, [r7, #4]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	1a9b      	subs	r3, r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	440b      	add	r3, r1
 8003dde:	333c      	adds	r3, #60	@ 0x3c
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	78fa      	ldrb	r2, [r7, #3]
 8003de4:	f083 0301 	eor.w	r3, r3, #1
 8003de8:	b2d8      	uxtb	r0, r3
 8003dea:	6879      	ldr	r1, [r7, #4]
 8003dec:	4613      	mov	r3, r2
 8003dee:	011b      	lsls	r3, r3, #4
 8003df0:	1a9b      	subs	r3, r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	440b      	add	r3, r1
 8003df6:	333c      	adds	r3, #60	@ 0x3c
 8003df8:	4602      	mov	r2, r0
 8003dfa:	701a      	strb	r2, [r3, #0]
 8003dfc:	f000 bc58 	b.w	80046b0 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003e00:	78fa      	ldrb	r2, [r7, #3]
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	4613      	mov	r3, r2
 8003e06:	011b      	lsls	r3, r3, #4
 8003e08:	1a9b      	subs	r3, r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	440b      	add	r3, r1
 8003e0e:	333c      	adds	r3, #60	@ 0x3c
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	78fa      	ldrb	r2, [r7, #3]
 8003e14:	f083 0301 	eor.w	r3, r3, #1
 8003e18:	b2d8      	uxtb	r0, r3
 8003e1a:	6879      	ldr	r1, [r7, #4]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	1a9b      	subs	r3, r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	440b      	add	r3, r1
 8003e26:	333c      	adds	r3, #60	@ 0x3c
 8003e28:	4602      	mov	r2, r0
 8003e2a:	701a      	strb	r2, [r3, #0]
 8003e2c:	f000 bc40 	b.w	80046b0 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	78fa      	ldrb	r2, [r7, #3]
 8003e36:	4611      	mov	r1, r2
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f004 fb12 	bl	8008462 <USB_ReadChInterrupts>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	f003 0320 	and.w	r3, r3, #32
 8003e44:	2b20      	cmp	r3, #32
 8003e46:	d131      	bne.n	8003eac <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003e48:	78fb      	ldrb	r3, [r7, #3]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e54:	461a      	mov	r2, r3
 8003e56:	2320      	movs	r3, #32
 8003e58:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003e5a:	78fa      	ldrb	r2, [r7, #3]
 8003e5c:	6879      	ldr	r1, [r7, #4]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	011b      	lsls	r3, r3, #4
 8003e62:	1a9b      	subs	r3, r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	440b      	add	r3, r1
 8003e68:	331a      	adds	r3, #26
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	f040 841f 	bne.w	80046b0 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003e72:	78fa      	ldrb	r2, [r7, #3]
 8003e74:	6879      	ldr	r1, [r7, #4]
 8003e76:	4613      	mov	r3, r2
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	1a9b      	subs	r3, r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	440b      	add	r3, r1
 8003e80:	331b      	adds	r3, #27
 8003e82:	2201      	movs	r2, #1
 8003e84:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003e86:	78fa      	ldrb	r2, [r7, #3]
 8003e88:	6879      	ldr	r1, [r7, #4]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	1a9b      	subs	r3, r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	440b      	add	r3, r1
 8003e94:	334d      	adds	r3, #77	@ 0x4d
 8003e96:	2203      	movs	r2, #3
 8003e98:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	78fa      	ldrb	r2, [r7, #3]
 8003ea0:	4611      	mov	r1, r2
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f004 fb5a 	bl	800855c <USB_HC_Halt>
 8003ea8:	f000 bc02 	b.w	80046b0 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	78fa      	ldrb	r2, [r7, #3]
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f004 fad4 	bl	8008462 <USB_ReadChInterrupts>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	f040 8305 	bne.w	80044d0 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003ec6:	78fb      	ldrb	r3, [r7, #3]
 8003ec8:	015a      	lsls	r2, r3, #5
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003ed8:	78fa      	ldrb	r2, [r7, #3]
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	4613      	mov	r3, r2
 8003ede:	011b      	lsls	r3, r3, #4
 8003ee0:	1a9b      	subs	r3, r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	334d      	adds	r3, #77	@ 0x4d
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d114      	bne.n	8003f18 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003eee:	78fa      	ldrb	r2, [r7, #3]
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	011b      	lsls	r3, r3, #4
 8003ef6:	1a9b      	subs	r3, r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	440b      	add	r3, r1
 8003efc:	334d      	adds	r3, #77	@ 0x4d
 8003efe:	2202      	movs	r2, #2
 8003f00:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003f02:	78fa      	ldrb	r2, [r7, #3]
 8003f04:	6879      	ldr	r1, [r7, #4]
 8003f06:	4613      	mov	r3, r2
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	1a9b      	subs	r3, r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	440b      	add	r3, r1
 8003f10:	334c      	adds	r3, #76	@ 0x4c
 8003f12:	2201      	movs	r2, #1
 8003f14:	701a      	strb	r2, [r3, #0]
 8003f16:	e2cc      	b.n	80044b2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003f18:	78fa      	ldrb	r2, [r7, #3]
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	011b      	lsls	r3, r3, #4
 8003f20:	1a9b      	subs	r3, r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	440b      	add	r3, r1
 8003f26:	334d      	adds	r3, #77	@ 0x4d
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	2b06      	cmp	r3, #6
 8003f2c:	d114      	bne.n	8003f58 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f2e:	78fa      	ldrb	r2, [r7, #3]
 8003f30:	6879      	ldr	r1, [r7, #4]
 8003f32:	4613      	mov	r3, r2
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	1a9b      	subs	r3, r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	440b      	add	r3, r1
 8003f3c:	334d      	adds	r3, #77	@ 0x4d
 8003f3e:	2202      	movs	r2, #2
 8003f40:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003f42:	78fa      	ldrb	r2, [r7, #3]
 8003f44:	6879      	ldr	r1, [r7, #4]
 8003f46:	4613      	mov	r3, r2
 8003f48:	011b      	lsls	r3, r3, #4
 8003f4a:	1a9b      	subs	r3, r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	440b      	add	r3, r1
 8003f50:	334c      	adds	r3, #76	@ 0x4c
 8003f52:	2205      	movs	r2, #5
 8003f54:	701a      	strb	r2, [r3, #0]
 8003f56:	e2ac      	b.n	80044b2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f58:	78fa      	ldrb	r2, [r7, #3]
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	1a9b      	subs	r3, r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	334d      	adds	r3, #77	@ 0x4d
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	2b07      	cmp	r3, #7
 8003f6c:	d00b      	beq.n	8003f86 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003f6e:	78fa      	ldrb	r2, [r7, #3]
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	4613      	mov	r3, r2
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	1a9b      	subs	r3, r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	334d      	adds	r3, #77	@ 0x4d
 8003f7e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f80:	2b09      	cmp	r3, #9
 8003f82:	f040 80a6 	bne.w	80040d2 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f86:	78fa      	ldrb	r2, [r7, #3]
 8003f88:	6879      	ldr	r1, [r7, #4]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	011b      	lsls	r3, r3, #4
 8003f8e:	1a9b      	subs	r3, r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	440b      	add	r3, r1
 8003f94:	334d      	adds	r3, #77	@ 0x4d
 8003f96:	2202      	movs	r2, #2
 8003f98:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003f9a:	78fa      	ldrb	r2, [r7, #3]
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	011b      	lsls	r3, r3, #4
 8003fa2:	1a9b      	subs	r3, r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	440b      	add	r3, r1
 8003fa8:	3344      	adds	r3, #68	@ 0x44
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	1c59      	adds	r1, r3, #1
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	011b      	lsls	r3, r3, #4
 8003fb4:	1a9b      	subs	r3, r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4403      	add	r3, r0
 8003fba:	3344      	adds	r3, #68	@ 0x44
 8003fbc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003fbe:	78fa      	ldrb	r2, [r7, #3]
 8003fc0:	6879      	ldr	r1, [r7, #4]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	1a9b      	subs	r3, r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	440b      	add	r3, r1
 8003fcc:	3344      	adds	r3, #68	@ 0x44
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d943      	bls.n	800405c <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003fd4:	78fa      	ldrb	r2, [r7, #3]
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	1a9b      	subs	r3, r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	3344      	adds	r3, #68	@ 0x44
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003fe8:	78fa      	ldrb	r2, [r7, #3]
 8003fea:	6879      	ldr	r1, [r7, #4]
 8003fec:	4613      	mov	r3, r2
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	1a9b      	subs	r3, r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	331a      	adds	r3, #26
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d123      	bne.n	8004046 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003ffe:	78fa      	ldrb	r2, [r7, #3]
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	4613      	mov	r3, r2
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	1a9b      	subs	r3, r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	331b      	adds	r3, #27
 800400e:	2200      	movs	r2, #0
 8004010:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004012:	78fa      	ldrb	r2, [r7, #3]
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	4613      	mov	r3, r2
 8004018:	011b      	lsls	r3, r3, #4
 800401a:	1a9b      	subs	r3, r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	440b      	add	r3, r1
 8004020:	331c      	adds	r3, #28
 8004022:	2200      	movs	r2, #0
 8004024:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004026:	78fb      	ldrb	r3, [r7, #3]
 8004028:	015a      	lsls	r2, r3, #5
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	4413      	add	r3, r2
 800402e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	78fa      	ldrb	r2, [r7, #3]
 8004036:	0151      	lsls	r1, r2, #5
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	440a      	add	r2, r1
 800403c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004040:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004044:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004046:	78fa      	ldrb	r2, [r7, #3]
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	4613      	mov	r3, r2
 800404c:	011b      	lsls	r3, r3, #4
 800404e:	1a9b      	subs	r3, r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	440b      	add	r3, r1
 8004054:	334c      	adds	r3, #76	@ 0x4c
 8004056:	2204      	movs	r2, #4
 8004058:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800405a:	e229      	b.n	80044b0 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800405c:	78fa      	ldrb	r2, [r7, #3]
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	4613      	mov	r3, r2
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	1a9b      	subs	r3, r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	334c      	adds	r3, #76	@ 0x4c
 800406c:	2202      	movs	r2, #2
 800406e:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004070:	78fa      	ldrb	r2, [r7, #3]
 8004072:	6879      	ldr	r1, [r7, #4]
 8004074:	4613      	mov	r3, r2
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	1a9b      	subs	r3, r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	3326      	adds	r3, #38	@ 0x26
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00b      	beq.n	800409e <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004086:	78fa      	ldrb	r2, [r7, #3]
 8004088:	6879      	ldr	r1, [r7, #4]
 800408a:	4613      	mov	r3, r2
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	1a9b      	subs	r3, r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	440b      	add	r3, r1
 8004094:	3326      	adds	r3, #38	@ 0x26
 8004096:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004098:	2b02      	cmp	r3, #2
 800409a:	f040 8209 	bne.w	80044b0 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800409e:	78fb      	ldrb	r3, [r7, #3]
 80040a0:	015a      	lsls	r2, r3, #5
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	4413      	add	r3, r2
 80040a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80040b4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80040bc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80040be:	78fb      	ldrb	r3, [r7, #3]
 80040c0:	015a      	lsls	r2, r3, #5
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	4413      	add	r3, r2
 80040c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040ca:	461a      	mov	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80040d0:	e1ee      	b.n	80044b0 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80040d2:	78fa      	ldrb	r2, [r7, #3]
 80040d4:	6879      	ldr	r1, [r7, #4]
 80040d6:	4613      	mov	r3, r2
 80040d8:	011b      	lsls	r3, r3, #4
 80040da:	1a9b      	subs	r3, r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	440b      	add	r3, r1
 80040e0:	334d      	adds	r3, #77	@ 0x4d
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	2b05      	cmp	r3, #5
 80040e6:	f040 80c8 	bne.w	800427a <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040ea:	78fa      	ldrb	r2, [r7, #3]
 80040ec:	6879      	ldr	r1, [r7, #4]
 80040ee:	4613      	mov	r3, r2
 80040f0:	011b      	lsls	r3, r3, #4
 80040f2:	1a9b      	subs	r3, r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	440b      	add	r3, r1
 80040f8:	334d      	adds	r3, #77	@ 0x4d
 80040fa:	2202      	movs	r2, #2
 80040fc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80040fe:	78fa      	ldrb	r2, [r7, #3]
 8004100:	6879      	ldr	r1, [r7, #4]
 8004102:	4613      	mov	r3, r2
 8004104:	011b      	lsls	r3, r3, #4
 8004106:	1a9b      	subs	r3, r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	440b      	add	r3, r1
 800410c:	331b      	adds	r3, #27
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b01      	cmp	r3, #1
 8004112:	f040 81ce 	bne.w	80044b2 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004116:	78fa      	ldrb	r2, [r7, #3]
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	4613      	mov	r3, r2
 800411c:	011b      	lsls	r3, r3, #4
 800411e:	1a9b      	subs	r3, r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	440b      	add	r3, r1
 8004124:	3326      	adds	r3, #38	@ 0x26
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b03      	cmp	r3, #3
 800412a:	d16b      	bne.n	8004204 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800412c:	78fa      	ldrb	r2, [r7, #3]
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	4613      	mov	r3, r2
 8004132:	011b      	lsls	r3, r3, #4
 8004134:	1a9b      	subs	r3, r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	3348      	adds	r3, #72	@ 0x48
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	1c59      	adds	r1, r3, #1
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	4613      	mov	r3, r2
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	1a9b      	subs	r3, r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	4403      	add	r3, r0
 800414c:	3348      	adds	r3, #72	@ 0x48
 800414e:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004150:	78fa      	ldrb	r2, [r7, #3]
 8004152:	6879      	ldr	r1, [r7, #4]
 8004154:	4613      	mov	r3, r2
 8004156:	011b      	lsls	r3, r3, #4
 8004158:	1a9b      	subs	r3, r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	440b      	add	r3, r1
 800415e:	3348      	adds	r3, #72	@ 0x48
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b02      	cmp	r3, #2
 8004164:	d943      	bls.n	80041ee <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004166:	78fa      	ldrb	r2, [r7, #3]
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	4613      	mov	r3, r2
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	1a9b      	subs	r3, r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	440b      	add	r3, r1
 8004174:	3348      	adds	r3, #72	@ 0x48
 8004176:	2200      	movs	r2, #0
 8004178:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800417a:	78fa      	ldrb	r2, [r7, #3]
 800417c:	6879      	ldr	r1, [r7, #4]
 800417e:	4613      	mov	r3, r2
 8004180:	011b      	lsls	r3, r3, #4
 8004182:	1a9b      	subs	r3, r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	440b      	add	r3, r1
 8004188:	331b      	adds	r3, #27
 800418a:	2200      	movs	r2, #0
 800418c:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800418e:	78fa      	ldrb	r2, [r7, #3]
 8004190:	6879      	ldr	r1, [r7, #4]
 8004192:	4613      	mov	r3, r2
 8004194:	011b      	lsls	r3, r3, #4
 8004196:	1a9b      	subs	r3, r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	440b      	add	r3, r1
 800419c:	3344      	adds	r3, #68	@ 0x44
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d809      	bhi.n	80041b8 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80041a4:	78fa      	ldrb	r2, [r7, #3]
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	4613      	mov	r3, r2
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	1a9b      	subs	r3, r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	331c      	adds	r3, #28
 80041b4:	2201      	movs	r2, #1
 80041b6:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80041b8:	78fb      	ldrb	r3, [r7, #3]
 80041ba:	015a      	lsls	r2, r3, #5
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	4413      	add	r3, r2
 80041c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	78fa      	ldrb	r2, [r7, #3]
 80041c8:	0151      	lsls	r1, r2, #5
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	440a      	add	r2, r1
 80041ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80041d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041d6:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80041d8:	78fa      	ldrb	r2, [r7, #3]
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	4613      	mov	r3, r2
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	1a9b      	subs	r3, r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	334c      	adds	r3, #76	@ 0x4c
 80041e8:	2204      	movs	r2, #4
 80041ea:	701a      	strb	r2, [r3, #0]
 80041ec:	e014      	b.n	8004218 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041ee:	78fa      	ldrb	r2, [r7, #3]
 80041f0:	6879      	ldr	r1, [r7, #4]
 80041f2:	4613      	mov	r3, r2
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	1a9b      	subs	r3, r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	440b      	add	r3, r1
 80041fc:	334c      	adds	r3, #76	@ 0x4c
 80041fe:	2202      	movs	r2, #2
 8004200:	701a      	strb	r2, [r3, #0]
 8004202:	e009      	b.n	8004218 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004204:	78fa      	ldrb	r2, [r7, #3]
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	4613      	mov	r3, r2
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	1a9b      	subs	r3, r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	440b      	add	r3, r1
 8004212:	334c      	adds	r3, #76	@ 0x4c
 8004214:	2202      	movs	r2, #2
 8004216:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004218:	78fa      	ldrb	r2, [r7, #3]
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	4613      	mov	r3, r2
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	1a9b      	subs	r3, r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	3326      	adds	r3, #38	@ 0x26
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00b      	beq.n	8004246 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800422e:	78fa      	ldrb	r2, [r7, #3]
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	4613      	mov	r3, r2
 8004234:	011b      	lsls	r3, r3, #4
 8004236:	1a9b      	subs	r3, r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	440b      	add	r3, r1
 800423c:	3326      	adds	r3, #38	@ 0x26
 800423e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004240:	2b02      	cmp	r3, #2
 8004242:	f040 8136 	bne.w	80044b2 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004246:	78fb      	ldrb	r3, [r7, #3]
 8004248:	015a      	lsls	r2, r3, #5
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	4413      	add	r3, r2
 800424e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800425c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004264:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004266:	78fb      	ldrb	r3, [r7, #3]
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	4413      	add	r3, r2
 800426e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004272:	461a      	mov	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	e11b      	b.n	80044b2 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800427a:	78fa      	ldrb	r2, [r7, #3]
 800427c:	6879      	ldr	r1, [r7, #4]
 800427e:	4613      	mov	r3, r2
 8004280:	011b      	lsls	r3, r3, #4
 8004282:	1a9b      	subs	r3, r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	440b      	add	r3, r1
 8004288:	334d      	adds	r3, #77	@ 0x4d
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	2b03      	cmp	r3, #3
 800428e:	f040 8081 	bne.w	8004394 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004292:	78fa      	ldrb	r2, [r7, #3]
 8004294:	6879      	ldr	r1, [r7, #4]
 8004296:	4613      	mov	r3, r2
 8004298:	011b      	lsls	r3, r3, #4
 800429a:	1a9b      	subs	r3, r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	440b      	add	r3, r1
 80042a0:	334d      	adds	r3, #77	@ 0x4d
 80042a2:	2202      	movs	r2, #2
 80042a4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80042a6:	78fa      	ldrb	r2, [r7, #3]
 80042a8:	6879      	ldr	r1, [r7, #4]
 80042aa:	4613      	mov	r3, r2
 80042ac:	011b      	lsls	r3, r3, #4
 80042ae:	1a9b      	subs	r3, r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	440b      	add	r3, r1
 80042b4:	331b      	adds	r3, #27
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	f040 80fa 	bne.w	80044b2 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042be:	78fa      	ldrb	r2, [r7, #3]
 80042c0:	6879      	ldr	r1, [r7, #4]
 80042c2:	4613      	mov	r3, r2
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	1a9b      	subs	r3, r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	440b      	add	r3, r1
 80042cc:	334c      	adds	r3, #76	@ 0x4c
 80042ce:	2202      	movs	r2, #2
 80042d0:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80042d2:	78fb      	ldrb	r3, [r7, #3]
 80042d4:	015a      	lsls	r2, r3, #5
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	4413      	add	r3, r2
 80042da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	78fa      	ldrb	r2, [r7, #3]
 80042e2:	0151      	lsls	r1, r2, #5
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	440a      	add	r2, r1
 80042e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80042ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042f0:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80042f2:	78fb      	ldrb	r3, [r7, #3]
 80042f4:	015a      	lsls	r2, r3, #5
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	4413      	add	r3, r2
 80042fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	78fa      	ldrb	r2, [r7, #3]
 8004302:	0151      	lsls	r1, r2, #5
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	440a      	add	r2, r1
 8004308:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800430c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004310:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004312:	78fb      	ldrb	r3, [r7, #3]
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	4413      	add	r3, r2
 800431a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	78fa      	ldrb	r2, [r7, #3]
 8004322:	0151      	lsls	r1, r2, #5
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	440a      	add	r2, r1
 8004328:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800432c:	f023 0320 	bic.w	r3, r3, #32
 8004330:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004332:	78fa      	ldrb	r2, [r7, #3]
 8004334:	6879      	ldr	r1, [r7, #4]
 8004336:	4613      	mov	r3, r2
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	1a9b      	subs	r3, r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	440b      	add	r3, r1
 8004340:	3326      	adds	r3, #38	@ 0x26
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00b      	beq.n	8004360 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004348:	78fa      	ldrb	r2, [r7, #3]
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	4613      	mov	r3, r2
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	1a9b      	subs	r3, r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	3326      	adds	r3, #38	@ 0x26
 8004358:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800435a:	2b02      	cmp	r3, #2
 800435c:	f040 80a9 	bne.w	80044b2 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004360:	78fb      	ldrb	r3, [r7, #3]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	4413      	add	r3, r2
 8004368:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004376:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800437e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004380:	78fb      	ldrb	r3, [r7, #3]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	4413      	add	r3, r2
 8004388:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800438c:	461a      	mov	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	e08e      	b.n	80044b2 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004394:	78fa      	ldrb	r2, [r7, #3]
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	4613      	mov	r3, r2
 800439a:	011b      	lsls	r3, r3, #4
 800439c:	1a9b      	subs	r3, r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	440b      	add	r3, r1
 80043a2:	334d      	adds	r3, #77	@ 0x4d
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b04      	cmp	r3, #4
 80043a8:	d143      	bne.n	8004432 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043aa:	78fa      	ldrb	r2, [r7, #3]
 80043ac:	6879      	ldr	r1, [r7, #4]
 80043ae:	4613      	mov	r3, r2
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	1a9b      	subs	r3, r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	440b      	add	r3, r1
 80043b8:	334d      	adds	r3, #77	@ 0x4d
 80043ba:	2202      	movs	r2, #2
 80043bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80043be:	78fa      	ldrb	r2, [r7, #3]
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	4613      	mov	r3, r2
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	1a9b      	subs	r3, r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	440b      	add	r3, r1
 80043cc:	334c      	adds	r3, #76	@ 0x4c
 80043ce:	2202      	movs	r2, #2
 80043d0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80043d2:	78fa      	ldrb	r2, [r7, #3]
 80043d4:	6879      	ldr	r1, [r7, #4]
 80043d6:	4613      	mov	r3, r2
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	1a9b      	subs	r3, r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	440b      	add	r3, r1
 80043e0:	3326      	adds	r3, #38	@ 0x26
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00a      	beq.n	80043fe <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80043e8:	78fa      	ldrb	r2, [r7, #3]
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	4613      	mov	r3, r2
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	1a9b      	subs	r3, r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	3326      	adds	r3, #38	@ 0x26
 80043f8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d159      	bne.n	80044b2 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80043fe:	78fb      	ldrb	r3, [r7, #3]
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	4413      	add	r3, r2
 8004406:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004414:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800441c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800441e:	78fb      	ldrb	r3, [r7, #3]
 8004420:	015a      	lsls	r2, r3, #5
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	4413      	add	r3, r2
 8004426:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800442a:	461a      	mov	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6013      	str	r3, [r2, #0]
 8004430:	e03f      	b.n	80044b2 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004432:	78fa      	ldrb	r2, [r7, #3]
 8004434:	6879      	ldr	r1, [r7, #4]
 8004436:	4613      	mov	r3, r2
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	1a9b      	subs	r3, r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	440b      	add	r3, r1
 8004440:	334d      	adds	r3, #77	@ 0x4d
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	2b08      	cmp	r3, #8
 8004446:	d126      	bne.n	8004496 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004448:	78fa      	ldrb	r2, [r7, #3]
 800444a:	6879      	ldr	r1, [r7, #4]
 800444c:	4613      	mov	r3, r2
 800444e:	011b      	lsls	r3, r3, #4
 8004450:	1a9b      	subs	r3, r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	440b      	add	r3, r1
 8004456:	334d      	adds	r3, #77	@ 0x4d
 8004458:	2202      	movs	r2, #2
 800445a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800445c:	78fa      	ldrb	r2, [r7, #3]
 800445e:	6879      	ldr	r1, [r7, #4]
 8004460:	4613      	mov	r3, r2
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	1a9b      	subs	r3, r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	440b      	add	r3, r1
 800446a:	3344      	adds	r3, #68	@ 0x44
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	1c59      	adds	r1, r3, #1
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	4613      	mov	r3, r2
 8004474:	011b      	lsls	r3, r3, #4
 8004476:	1a9b      	subs	r3, r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4403      	add	r3, r0
 800447c:	3344      	adds	r3, #68	@ 0x44
 800447e:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004480:	78fa      	ldrb	r2, [r7, #3]
 8004482:	6879      	ldr	r1, [r7, #4]
 8004484:	4613      	mov	r3, r2
 8004486:	011b      	lsls	r3, r3, #4
 8004488:	1a9b      	subs	r3, r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	440b      	add	r3, r1
 800448e:	334c      	adds	r3, #76	@ 0x4c
 8004490:	2204      	movs	r2, #4
 8004492:	701a      	strb	r2, [r3, #0]
 8004494:	e00d      	b.n	80044b2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004496:	78fa      	ldrb	r2, [r7, #3]
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	4613      	mov	r3, r2
 800449c:	011b      	lsls	r3, r3, #4
 800449e:	1a9b      	subs	r3, r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	440b      	add	r3, r1
 80044a4:	334d      	adds	r3, #77	@ 0x4d
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	f000 8100 	beq.w	80046ae <HCD_HC_IN_IRQHandler+0xcca>
 80044ae:	e000      	b.n	80044b2 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80044b0:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80044b2:	78fa      	ldrb	r2, [r7, #3]
 80044b4:	6879      	ldr	r1, [r7, #4]
 80044b6:	4613      	mov	r3, r2
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	1a9b      	subs	r3, r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	440b      	add	r3, r1
 80044c0:	334c      	adds	r3, #76	@ 0x4c
 80044c2:	781a      	ldrb	r2, [r3, #0]
 80044c4:	78fb      	ldrb	r3, [r7, #3]
 80044c6:	4619      	mov	r1, r3
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f005 fb7b 	bl	8009bc4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80044ce:	e0ef      	b.n	80046b0 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	78fa      	ldrb	r2, [r7, #3]
 80044d6:	4611      	mov	r1, r2
 80044d8:	4618      	mov	r0, r3
 80044da:	f003 ffc2 	bl	8008462 <USB_ReadChInterrupts>
 80044de:	4603      	mov	r3, r0
 80044e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e4:	2b40      	cmp	r3, #64	@ 0x40
 80044e6:	d12f      	bne.n	8004548 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80044e8:	78fb      	ldrb	r3, [r7, #3]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044f4:	461a      	mov	r2, r3
 80044f6:	2340      	movs	r3, #64	@ 0x40
 80044f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80044fa:	78fa      	ldrb	r2, [r7, #3]
 80044fc:	6879      	ldr	r1, [r7, #4]
 80044fe:	4613      	mov	r3, r2
 8004500:	011b      	lsls	r3, r3, #4
 8004502:	1a9b      	subs	r3, r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	440b      	add	r3, r1
 8004508:	334d      	adds	r3, #77	@ 0x4d
 800450a:	2205      	movs	r2, #5
 800450c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800450e:	78fa      	ldrb	r2, [r7, #3]
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	4613      	mov	r3, r2
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	1a9b      	subs	r3, r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	440b      	add	r3, r1
 800451c:	331a      	adds	r3, #26
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d109      	bne.n	8004538 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004524:	78fa      	ldrb	r2, [r7, #3]
 8004526:	6879      	ldr	r1, [r7, #4]
 8004528:	4613      	mov	r3, r2
 800452a:	011b      	lsls	r3, r3, #4
 800452c:	1a9b      	subs	r3, r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	440b      	add	r3, r1
 8004532:	3344      	adds	r3, #68	@ 0x44
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	78fa      	ldrb	r2, [r7, #3]
 800453e:	4611      	mov	r1, r2
 8004540:	4618      	mov	r0, r3
 8004542:	f004 f80b 	bl	800855c <USB_HC_Halt>
 8004546:	e0b3      	b.n	80046b0 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	78fa      	ldrb	r2, [r7, #3]
 800454e:	4611      	mov	r1, r2
 8004550:	4618      	mov	r0, r3
 8004552:	f003 ff86 	bl	8008462 <USB_ReadChInterrupts>
 8004556:	4603      	mov	r3, r0
 8004558:	f003 0310 	and.w	r3, r3, #16
 800455c:	2b10      	cmp	r3, #16
 800455e:	f040 80a7 	bne.w	80046b0 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004562:	78fa      	ldrb	r2, [r7, #3]
 8004564:	6879      	ldr	r1, [r7, #4]
 8004566:	4613      	mov	r3, r2
 8004568:	011b      	lsls	r3, r3, #4
 800456a:	1a9b      	subs	r3, r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	440b      	add	r3, r1
 8004570:	3326      	adds	r3, #38	@ 0x26
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	2b03      	cmp	r3, #3
 8004576:	d11b      	bne.n	80045b0 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004578:	78fa      	ldrb	r2, [r7, #3]
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	4613      	mov	r3, r2
 800457e:	011b      	lsls	r3, r3, #4
 8004580:	1a9b      	subs	r3, r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	440b      	add	r3, r1
 8004586:	3344      	adds	r3, #68	@ 0x44
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800458c:	78fa      	ldrb	r2, [r7, #3]
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	4613      	mov	r3, r2
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	1a9b      	subs	r3, r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	440b      	add	r3, r1
 800459a:	334d      	adds	r3, #77	@ 0x4d
 800459c:	2204      	movs	r2, #4
 800459e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	78fa      	ldrb	r2, [r7, #3]
 80045a6:	4611      	mov	r1, r2
 80045a8:	4618      	mov	r0, r3
 80045aa:	f003 ffd7 	bl	800855c <USB_HC_Halt>
 80045ae:	e03f      	b.n	8004630 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80045b0:	78fa      	ldrb	r2, [r7, #3]
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	4613      	mov	r3, r2
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	1a9b      	subs	r3, r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	440b      	add	r3, r1
 80045be:	3326      	adds	r3, #38	@ 0x26
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00a      	beq.n	80045dc <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80045c6:	78fa      	ldrb	r2, [r7, #3]
 80045c8:	6879      	ldr	r1, [r7, #4]
 80045ca:	4613      	mov	r3, r2
 80045cc:	011b      	lsls	r3, r3, #4
 80045ce:	1a9b      	subs	r3, r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	440b      	add	r3, r1
 80045d4:	3326      	adds	r3, #38	@ 0x26
 80045d6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d129      	bne.n	8004630 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80045dc:	78fa      	ldrb	r2, [r7, #3]
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	4613      	mov	r3, r2
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	1a9b      	subs	r3, r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	440b      	add	r3, r1
 80045ea:	3344      	adds	r3, #68	@ 0x44
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	799b      	ldrb	r3, [r3, #6]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00a      	beq.n	800460e <HCD_HC_IN_IRQHandler+0xc2a>
 80045f8:	78fa      	ldrb	r2, [r7, #3]
 80045fa:	6879      	ldr	r1, [r7, #4]
 80045fc:	4613      	mov	r3, r2
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	1a9b      	subs	r3, r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	440b      	add	r3, r1
 8004606:	331b      	adds	r3, #27
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d110      	bne.n	8004630 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800460e:	78fa      	ldrb	r2, [r7, #3]
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	4613      	mov	r3, r2
 8004614:	011b      	lsls	r3, r3, #4
 8004616:	1a9b      	subs	r3, r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	440b      	add	r3, r1
 800461c:	334d      	adds	r3, #77	@ 0x4d
 800461e:	2204      	movs	r2, #4
 8004620:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	78fa      	ldrb	r2, [r7, #3]
 8004628:	4611      	mov	r1, r2
 800462a:	4618      	mov	r0, r3
 800462c:	f003 ff96 	bl	800855c <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004630:	78fa      	ldrb	r2, [r7, #3]
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	4613      	mov	r3, r2
 8004636:	011b      	lsls	r3, r3, #4
 8004638:	1a9b      	subs	r3, r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	440b      	add	r3, r1
 800463e:	331b      	adds	r3, #27
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d129      	bne.n	800469a <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004646:	78fa      	ldrb	r2, [r7, #3]
 8004648:	6879      	ldr	r1, [r7, #4]
 800464a:	4613      	mov	r3, r2
 800464c:	011b      	lsls	r3, r3, #4
 800464e:	1a9b      	subs	r3, r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	440b      	add	r3, r1
 8004654:	331b      	adds	r3, #27
 8004656:	2200      	movs	r2, #0
 8004658:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800465a:	78fb      	ldrb	r3, [r7, #3]
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	4413      	add	r3, r2
 8004662:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	78fa      	ldrb	r2, [r7, #3]
 800466a:	0151      	lsls	r1, r2, #5
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	440a      	add	r2, r1
 8004670:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004674:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004678:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800467a:	78fb      	ldrb	r3, [r7, #3]
 800467c:	015a      	lsls	r2, r3, #5
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	4413      	add	r3, r2
 8004682:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	78fa      	ldrb	r2, [r7, #3]
 800468a:	0151      	lsls	r1, r2, #5
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	440a      	add	r2, r1
 8004690:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004694:	f043 0320 	orr.w	r3, r3, #32
 8004698:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800469a:	78fb      	ldrb	r3, [r7, #3]
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046a6:	461a      	mov	r2, r3
 80046a8:	2310      	movs	r3, #16
 80046aa:	6093      	str	r3, [r2, #8]
 80046ac:	e000      	b.n	80046b0 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80046ae:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b086      	sub	sp, #24
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
 80046be:	460b      	mov	r3, r1
 80046c0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	78fa      	ldrb	r2, [r7, #3]
 80046d2:	4611      	mov	r1, r2
 80046d4:	4618      	mov	r0, r3
 80046d6:	f003 fec4 	bl	8008462 <USB_ReadChInterrupts>
 80046da:	4603      	mov	r3, r0
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	2b04      	cmp	r3, #4
 80046e2:	d11b      	bne.n	800471c <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80046e4:	78fb      	ldrb	r3, [r7, #3]
 80046e6:	015a      	lsls	r2, r3, #5
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046f0:	461a      	mov	r2, r3
 80046f2:	2304      	movs	r3, #4
 80046f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80046f6:	78fa      	ldrb	r2, [r7, #3]
 80046f8:	6879      	ldr	r1, [r7, #4]
 80046fa:	4613      	mov	r3, r2
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	1a9b      	subs	r3, r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	440b      	add	r3, r1
 8004704:	334d      	adds	r3, #77	@ 0x4d
 8004706:	2207      	movs	r2, #7
 8004708:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	78fa      	ldrb	r2, [r7, #3]
 8004710:	4611      	mov	r1, r2
 8004712:	4618      	mov	r0, r3
 8004714:	f003 ff22 	bl	800855c <USB_HC_Halt>
 8004718:	f000 bc89 	b.w	800502e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	78fa      	ldrb	r2, [r7, #3]
 8004722:	4611      	mov	r1, r2
 8004724:	4618      	mov	r0, r3
 8004726:	f003 fe9c 	bl	8008462 <USB_ReadChInterrupts>
 800472a:	4603      	mov	r3, r0
 800472c:	f003 0320 	and.w	r3, r3, #32
 8004730:	2b20      	cmp	r3, #32
 8004732:	f040 8082 	bne.w	800483a <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004736:	78fb      	ldrb	r3, [r7, #3]
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	4413      	add	r3, r2
 800473e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004742:	461a      	mov	r2, r3
 8004744:	2320      	movs	r3, #32
 8004746:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004748:	78fa      	ldrb	r2, [r7, #3]
 800474a:	6879      	ldr	r1, [r7, #4]
 800474c:	4613      	mov	r3, r2
 800474e:	011b      	lsls	r3, r3, #4
 8004750:	1a9b      	subs	r3, r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	440b      	add	r3, r1
 8004756:	3319      	adds	r3, #25
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d124      	bne.n	80047a8 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800475e:	78fa      	ldrb	r2, [r7, #3]
 8004760:	6879      	ldr	r1, [r7, #4]
 8004762:	4613      	mov	r3, r2
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	1a9b      	subs	r3, r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	440b      	add	r3, r1
 800476c:	3319      	adds	r3, #25
 800476e:	2200      	movs	r2, #0
 8004770:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004772:	78fa      	ldrb	r2, [r7, #3]
 8004774:	6879      	ldr	r1, [r7, #4]
 8004776:	4613      	mov	r3, r2
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	1a9b      	subs	r3, r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	440b      	add	r3, r1
 8004780:	334c      	adds	r3, #76	@ 0x4c
 8004782:	2202      	movs	r2, #2
 8004784:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004786:	78fa      	ldrb	r2, [r7, #3]
 8004788:	6879      	ldr	r1, [r7, #4]
 800478a:	4613      	mov	r3, r2
 800478c:	011b      	lsls	r3, r3, #4
 800478e:	1a9b      	subs	r3, r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	440b      	add	r3, r1
 8004794:	334d      	adds	r3, #77	@ 0x4d
 8004796:	2203      	movs	r2, #3
 8004798:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	78fa      	ldrb	r2, [r7, #3]
 80047a0:	4611      	mov	r1, r2
 80047a2:	4618      	mov	r0, r3
 80047a4:	f003 feda 	bl	800855c <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80047a8:	78fa      	ldrb	r2, [r7, #3]
 80047aa:	6879      	ldr	r1, [r7, #4]
 80047ac:	4613      	mov	r3, r2
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	1a9b      	subs	r3, r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	331a      	adds	r3, #26
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	f040 8437 	bne.w	800502e <HCD_HC_OUT_IRQHandler+0x978>
 80047c0:	78fa      	ldrb	r2, [r7, #3]
 80047c2:	6879      	ldr	r1, [r7, #4]
 80047c4:	4613      	mov	r3, r2
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	1a9b      	subs	r3, r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	440b      	add	r3, r1
 80047ce:	331b      	adds	r3, #27
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f040 842b 	bne.w	800502e <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80047d8:	78fa      	ldrb	r2, [r7, #3]
 80047da:	6879      	ldr	r1, [r7, #4]
 80047dc:	4613      	mov	r3, r2
 80047de:	011b      	lsls	r3, r3, #4
 80047e0:	1a9b      	subs	r3, r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	440b      	add	r3, r1
 80047e6:	3326      	adds	r3, #38	@ 0x26
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d009      	beq.n	8004802 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80047ee:	78fa      	ldrb	r2, [r7, #3]
 80047f0:	6879      	ldr	r1, [r7, #4]
 80047f2:	4613      	mov	r3, r2
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	1a9b      	subs	r3, r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	440b      	add	r3, r1
 80047fc:	331b      	adds	r3, #27
 80047fe:	2201      	movs	r2, #1
 8004800:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004802:	78fa      	ldrb	r2, [r7, #3]
 8004804:	6879      	ldr	r1, [r7, #4]
 8004806:	4613      	mov	r3, r2
 8004808:	011b      	lsls	r3, r3, #4
 800480a:	1a9b      	subs	r3, r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	440b      	add	r3, r1
 8004810:	334d      	adds	r3, #77	@ 0x4d
 8004812:	2203      	movs	r2, #3
 8004814:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	78fa      	ldrb	r2, [r7, #3]
 800481c:	4611      	mov	r1, r2
 800481e:	4618      	mov	r0, r3
 8004820:	f003 fe9c 	bl	800855c <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004824:	78fa      	ldrb	r2, [r7, #3]
 8004826:	6879      	ldr	r1, [r7, #4]
 8004828:	4613      	mov	r3, r2
 800482a:	011b      	lsls	r3, r3, #4
 800482c:	1a9b      	subs	r3, r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	440b      	add	r3, r1
 8004832:	3344      	adds	r3, #68	@ 0x44
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	e3f9      	b.n	800502e <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	78fa      	ldrb	r2, [r7, #3]
 8004840:	4611      	mov	r1, r2
 8004842:	4618      	mov	r0, r3
 8004844:	f003 fe0d 	bl	8008462 <USB_ReadChInterrupts>
 8004848:	4603      	mov	r3, r0
 800484a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800484e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004852:	d111      	bne.n	8004878 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004854:	78fb      	ldrb	r3, [r7, #3]
 8004856:	015a      	lsls	r2, r3, #5
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	4413      	add	r3, r2
 800485c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004860:	461a      	mov	r2, r3
 8004862:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004866:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	78fa      	ldrb	r2, [r7, #3]
 800486e:	4611      	mov	r1, r2
 8004870:	4618      	mov	r0, r3
 8004872:	f003 fe73 	bl	800855c <USB_HC_Halt>
 8004876:	e3da      	b.n	800502e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	78fa      	ldrb	r2, [r7, #3]
 800487e:	4611      	mov	r1, r2
 8004880:	4618      	mov	r0, r3
 8004882:	f003 fdee 	bl	8008462 <USB_ReadChInterrupts>
 8004886:	4603      	mov	r3, r0
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b01      	cmp	r3, #1
 800488e:	d168      	bne.n	8004962 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004890:	78fa      	ldrb	r2, [r7, #3]
 8004892:	6879      	ldr	r1, [r7, #4]
 8004894:	4613      	mov	r3, r2
 8004896:	011b      	lsls	r3, r3, #4
 8004898:	1a9b      	subs	r3, r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	440b      	add	r3, r1
 800489e:	3344      	adds	r3, #68	@ 0x44
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	78fa      	ldrb	r2, [r7, #3]
 80048aa:	4611      	mov	r1, r2
 80048ac:	4618      	mov	r0, r3
 80048ae:	f003 fdd8 	bl	8008462 <USB_ReadChInterrupts>
 80048b2:	4603      	mov	r3, r0
 80048b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048b8:	2b40      	cmp	r3, #64	@ 0x40
 80048ba:	d112      	bne.n	80048e2 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80048bc:	78fa      	ldrb	r2, [r7, #3]
 80048be:	6879      	ldr	r1, [r7, #4]
 80048c0:	4613      	mov	r3, r2
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	1a9b      	subs	r3, r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	440b      	add	r3, r1
 80048ca:	3319      	adds	r3, #25
 80048cc:	2201      	movs	r2, #1
 80048ce:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80048d0:	78fb      	ldrb	r3, [r7, #3]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048dc:	461a      	mov	r2, r3
 80048de:	2340      	movs	r3, #64	@ 0x40
 80048e0:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80048e2:	78fa      	ldrb	r2, [r7, #3]
 80048e4:	6879      	ldr	r1, [r7, #4]
 80048e6:	4613      	mov	r3, r2
 80048e8:	011b      	lsls	r3, r3, #4
 80048ea:	1a9b      	subs	r3, r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	440b      	add	r3, r1
 80048f0:	331b      	adds	r3, #27
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d019      	beq.n	800492c <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80048f8:	78fa      	ldrb	r2, [r7, #3]
 80048fa:	6879      	ldr	r1, [r7, #4]
 80048fc:	4613      	mov	r3, r2
 80048fe:	011b      	lsls	r3, r3, #4
 8004900:	1a9b      	subs	r3, r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	440b      	add	r3, r1
 8004906:	331b      	adds	r3, #27
 8004908:	2200      	movs	r2, #0
 800490a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800490c:	78fb      	ldrb	r3, [r7, #3]
 800490e:	015a      	lsls	r2, r3, #5
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	4413      	add	r3, r2
 8004914:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	78fa      	ldrb	r2, [r7, #3]
 800491c:	0151      	lsls	r1, r2, #5
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	440a      	add	r2, r1
 8004922:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004926:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800492a:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800492c:	78fb      	ldrb	r3, [r7, #3]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	4413      	add	r3, r2
 8004934:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004938:	461a      	mov	r2, r3
 800493a:	2301      	movs	r3, #1
 800493c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800493e:	78fa      	ldrb	r2, [r7, #3]
 8004940:	6879      	ldr	r1, [r7, #4]
 8004942:	4613      	mov	r3, r2
 8004944:	011b      	lsls	r3, r3, #4
 8004946:	1a9b      	subs	r3, r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	440b      	add	r3, r1
 800494c:	334d      	adds	r3, #77	@ 0x4d
 800494e:	2201      	movs	r2, #1
 8004950:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	78fa      	ldrb	r2, [r7, #3]
 8004958:	4611      	mov	r1, r2
 800495a:	4618      	mov	r0, r3
 800495c:	f003 fdfe 	bl	800855c <USB_HC_Halt>
 8004960:	e365      	b.n	800502e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	78fa      	ldrb	r2, [r7, #3]
 8004968:	4611      	mov	r1, r2
 800496a:	4618      	mov	r0, r3
 800496c:	f003 fd79 	bl	8008462 <USB_ReadChInterrupts>
 8004970:	4603      	mov	r3, r0
 8004972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004976:	2b40      	cmp	r3, #64	@ 0x40
 8004978:	d139      	bne.n	80049ee <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800497a:	78fa      	ldrb	r2, [r7, #3]
 800497c:	6879      	ldr	r1, [r7, #4]
 800497e:	4613      	mov	r3, r2
 8004980:	011b      	lsls	r3, r3, #4
 8004982:	1a9b      	subs	r3, r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	440b      	add	r3, r1
 8004988:	334d      	adds	r3, #77	@ 0x4d
 800498a:	2205      	movs	r2, #5
 800498c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800498e:	78fa      	ldrb	r2, [r7, #3]
 8004990:	6879      	ldr	r1, [r7, #4]
 8004992:	4613      	mov	r3, r2
 8004994:	011b      	lsls	r3, r3, #4
 8004996:	1a9b      	subs	r3, r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	440b      	add	r3, r1
 800499c:	331a      	adds	r3, #26
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d109      	bne.n	80049b8 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80049a4:	78fa      	ldrb	r2, [r7, #3]
 80049a6:	6879      	ldr	r1, [r7, #4]
 80049a8:	4613      	mov	r3, r2
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	1a9b      	subs	r3, r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	440b      	add	r3, r1
 80049b2:	3319      	adds	r3, #25
 80049b4:	2201      	movs	r2, #1
 80049b6:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80049b8:	78fa      	ldrb	r2, [r7, #3]
 80049ba:	6879      	ldr	r1, [r7, #4]
 80049bc:	4613      	mov	r3, r2
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	1a9b      	subs	r3, r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	440b      	add	r3, r1
 80049c6:	3344      	adds	r3, #68	@ 0x44
 80049c8:	2200      	movs	r2, #0
 80049ca:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	78fa      	ldrb	r2, [r7, #3]
 80049d2:	4611      	mov	r1, r2
 80049d4:	4618      	mov	r0, r3
 80049d6:	f003 fdc1 	bl	800855c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80049da:	78fb      	ldrb	r3, [r7, #3]
 80049dc:	015a      	lsls	r2, r3, #5
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049e6:	461a      	mov	r2, r3
 80049e8:	2340      	movs	r3, #64	@ 0x40
 80049ea:	6093      	str	r3, [r2, #8]
 80049ec:	e31f      	b.n	800502e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	78fa      	ldrb	r2, [r7, #3]
 80049f4:	4611      	mov	r1, r2
 80049f6:	4618      	mov	r0, r3
 80049f8:	f003 fd33 	bl	8008462 <USB_ReadChInterrupts>
 80049fc:	4603      	mov	r3, r0
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b08      	cmp	r3, #8
 8004a04:	d11a      	bne.n	8004a3c <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004a06:	78fb      	ldrb	r3, [r7, #3]
 8004a08:	015a      	lsls	r2, r3, #5
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a12:	461a      	mov	r2, r3
 8004a14:	2308      	movs	r3, #8
 8004a16:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004a18:	78fa      	ldrb	r2, [r7, #3]
 8004a1a:	6879      	ldr	r1, [r7, #4]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	1a9b      	subs	r3, r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	334d      	adds	r3, #77	@ 0x4d
 8004a28:	2206      	movs	r2, #6
 8004a2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	78fa      	ldrb	r2, [r7, #3]
 8004a32:	4611      	mov	r1, r2
 8004a34:	4618      	mov	r0, r3
 8004a36:	f003 fd91 	bl	800855c <USB_HC_Halt>
 8004a3a:	e2f8      	b.n	800502e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	78fa      	ldrb	r2, [r7, #3]
 8004a42:	4611      	mov	r1, r2
 8004a44:	4618      	mov	r0, r3
 8004a46:	f003 fd0c 	bl	8008462 <USB_ReadChInterrupts>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	f003 0310 	and.w	r3, r3, #16
 8004a50:	2b10      	cmp	r3, #16
 8004a52:	d144      	bne.n	8004ade <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004a54:	78fa      	ldrb	r2, [r7, #3]
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	011b      	lsls	r3, r3, #4
 8004a5c:	1a9b      	subs	r3, r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	440b      	add	r3, r1
 8004a62:	3344      	adds	r3, #68	@ 0x44
 8004a64:	2200      	movs	r2, #0
 8004a66:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004a68:	78fa      	ldrb	r2, [r7, #3]
 8004a6a:	6879      	ldr	r1, [r7, #4]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	011b      	lsls	r3, r3, #4
 8004a70:	1a9b      	subs	r3, r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	440b      	add	r3, r1
 8004a76:	334d      	adds	r3, #77	@ 0x4d
 8004a78:	2204      	movs	r2, #4
 8004a7a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004a7c:	78fa      	ldrb	r2, [r7, #3]
 8004a7e:	6879      	ldr	r1, [r7, #4]
 8004a80:	4613      	mov	r3, r2
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	1a9b      	subs	r3, r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	440b      	add	r3, r1
 8004a8a:	3319      	adds	r3, #25
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d114      	bne.n	8004abc <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004a92:	78fa      	ldrb	r2, [r7, #3]
 8004a94:	6879      	ldr	r1, [r7, #4]
 8004a96:	4613      	mov	r3, r2
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	1a9b      	subs	r3, r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	440b      	add	r3, r1
 8004aa0:	3318      	adds	r3, #24
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d109      	bne.n	8004abc <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004aa8:	78fa      	ldrb	r2, [r7, #3]
 8004aaa:	6879      	ldr	r1, [r7, #4]
 8004aac:	4613      	mov	r3, r2
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	1a9b      	subs	r3, r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	3319      	adds	r3, #25
 8004ab8:	2201      	movs	r2, #1
 8004aba:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	78fa      	ldrb	r2, [r7, #3]
 8004ac2:	4611      	mov	r1, r2
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f003 fd49 	bl	800855c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004aca:	78fb      	ldrb	r3, [r7, #3]
 8004acc:	015a      	lsls	r2, r3, #5
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	2310      	movs	r3, #16
 8004ada:	6093      	str	r3, [r2, #8]
 8004adc:	e2a7      	b.n	800502e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	78fa      	ldrb	r2, [r7, #3]
 8004ae4:	4611      	mov	r1, r2
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f003 fcbb 	bl	8008462 <USB_ReadChInterrupts>
 8004aec:	4603      	mov	r3, r0
 8004aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004af2:	2b80      	cmp	r3, #128	@ 0x80
 8004af4:	f040 8083 	bne.w	8004bfe <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	799b      	ldrb	r3, [r3, #6]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d111      	bne.n	8004b24 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004b00:	78fa      	ldrb	r2, [r7, #3]
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	4613      	mov	r3, r2
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	1a9b      	subs	r3, r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	440b      	add	r3, r1
 8004b0e:	334d      	adds	r3, #77	@ 0x4d
 8004b10:	2207      	movs	r2, #7
 8004b12:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	78fa      	ldrb	r2, [r7, #3]
 8004b1a:	4611      	mov	r1, r2
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f003 fd1d 	bl	800855c <USB_HC_Halt>
 8004b22:	e062      	b.n	8004bea <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004b24:	78fa      	ldrb	r2, [r7, #3]
 8004b26:	6879      	ldr	r1, [r7, #4]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	011b      	lsls	r3, r3, #4
 8004b2c:	1a9b      	subs	r3, r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	440b      	add	r3, r1
 8004b32:	3344      	adds	r3, #68	@ 0x44
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	1c59      	adds	r1, r3, #1
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	011b      	lsls	r3, r3, #4
 8004b3e:	1a9b      	subs	r3, r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4403      	add	r3, r0
 8004b44:	3344      	adds	r3, #68	@ 0x44
 8004b46:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b48:	78fa      	ldrb	r2, [r7, #3]
 8004b4a:	6879      	ldr	r1, [r7, #4]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	011b      	lsls	r3, r3, #4
 8004b50:	1a9b      	subs	r3, r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	440b      	add	r3, r1
 8004b56:	3344      	adds	r3, #68	@ 0x44
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d922      	bls.n	8004ba4 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004b5e:	78fa      	ldrb	r2, [r7, #3]
 8004b60:	6879      	ldr	r1, [r7, #4]
 8004b62:	4613      	mov	r3, r2
 8004b64:	011b      	lsls	r3, r3, #4
 8004b66:	1a9b      	subs	r3, r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	440b      	add	r3, r1
 8004b6c:	3344      	adds	r3, #68	@ 0x44
 8004b6e:	2200      	movs	r2, #0
 8004b70:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004b72:	78fa      	ldrb	r2, [r7, #3]
 8004b74:	6879      	ldr	r1, [r7, #4]
 8004b76:	4613      	mov	r3, r2
 8004b78:	011b      	lsls	r3, r3, #4
 8004b7a:	1a9b      	subs	r3, r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	440b      	add	r3, r1
 8004b80:	334c      	adds	r3, #76	@ 0x4c
 8004b82:	2204      	movs	r2, #4
 8004b84:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004b86:	78fa      	ldrb	r2, [r7, #3]
 8004b88:	6879      	ldr	r1, [r7, #4]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	011b      	lsls	r3, r3, #4
 8004b8e:	1a9b      	subs	r3, r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	440b      	add	r3, r1
 8004b94:	334c      	adds	r3, #76	@ 0x4c
 8004b96:	781a      	ldrb	r2, [r3, #0]
 8004b98:	78fb      	ldrb	r3, [r7, #3]
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f005 f811 	bl	8009bc4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004ba2:	e022      	b.n	8004bea <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004ba4:	78fa      	ldrb	r2, [r7, #3]
 8004ba6:	6879      	ldr	r1, [r7, #4]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	011b      	lsls	r3, r3, #4
 8004bac:	1a9b      	subs	r3, r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	440b      	add	r3, r1
 8004bb2:	334c      	adds	r3, #76	@ 0x4c
 8004bb4:	2202      	movs	r2, #2
 8004bb6:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004bb8:	78fb      	ldrb	r3, [r7, #3]
 8004bba:	015a      	lsls	r2, r3, #5
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004bce:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004bd6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004bd8:	78fb      	ldrb	r3, [r7, #3]
 8004bda:	015a      	lsls	r2, r3, #5
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	4413      	add	r3, r2
 8004be0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004be4:	461a      	mov	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004bea:	78fb      	ldrb	r3, [r7, #3]
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	2380      	movs	r3, #128	@ 0x80
 8004bfa:	6093      	str	r3, [r2, #8]
 8004bfc:	e217      	b.n	800502e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	78fa      	ldrb	r2, [r7, #3]
 8004c04:	4611      	mov	r1, r2
 8004c06:	4618      	mov	r0, r3
 8004c08:	f003 fc2b 	bl	8008462 <USB_ReadChInterrupts>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c16:	d11b      	bne.n	8004c50 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004c18:	78fa      	ldrb	r2, [r7, #3]
 8004c1a:	6879      	ldr	r1, [r7, #4]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	011b      	lsls	r3, r3, #4
 8004c20:	1a9b      	subs	r3, r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	334d      	adds	r3, #77	@ 0x4d
 8004c28:	2209      	movs	r2, #9
 8004c2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	78fa      	ldrb	r2, [r7, #3]
 8004c32:	4611      	mov	r1, r2
 8004c34:	4618      	mov	r0, r3
 8004c36:	f003 fc91 	bl	800855c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004c3a:	78fb      	ldrb	r3, [r7, #3]
 8004c3c:	015a      	lsls	r2, r3, #5
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	4413      	add	r3, r2
 8004c42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c46:	461a      	mov	r2, r3
 8004c48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c4c:	6093      	str	r3, [r2, #8]
 8004c4e:	e1ee      	b.n	800502e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	78fa      	ldrb	r2, [r7, #3]
 8004c56:	4611      	mov	r1, r2
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f003 fc02 	bl	8008462 <USB_ReadChInterrupts>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	f040 81df 	bne.w	8005028 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004c6a:	78fb      	ldrb	r3, [r7, #3]
 8004c6c:	015a      	lsls	r2, r3, #5
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c76:	461a      	mov	r2, r3
 8004c78:	2302      	movs	r3, #2
 8004c7a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004c7c:	78fa      	ldrb	r2, [r7, #3]
 8004c7e:	6879      	ldr	r1, [r7, #4]
 8004c80:	4613      	mov	r3, r2
 8004c82:	011b      	lsls	r3, r3, #4
 8004c84:	1a9b      	subs	r3, r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	440b      	add	r3, r1
 8004c8a:	334d      	adds	r3, #77	@ 0x4d
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	f040 8093 	bne.w	8004dba <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c94:	78fa      	ldrb	r2, [r7, #3]
 8004c96:	6879      	ldr	r1, [r7, #4]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	011b      	lsls	r3, r3, #4
 8004c9c:	1a9b      	subs	r3, r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	440b      	add	r3, r1
 8004ca2:	334d      	adds	r3, #77	@ 0x4d
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004ca8:	78fa      	ldrb	r2, [r7, #3]
 8004caa:	6879      	ldr	r1, [r7, #4]
 8004cac:	4613      	mov	r3, r2
 8004cae:	011b      	lsls	r3, r3, #4
 8004cb0:	1a9b      	subs	r3, r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	440b      	add	r3, r1
 8004cb6:	334c      	adds	r3, #76	@ 0x4c
 8004cb8:	2201      	movs	r2, #1
 8004cba:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004cbc:	78fa      	ldrb	r2, [r7, #3]
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	011b      	lsls	r3, r3, #4
 8004cc4:	1a9b      	subs	r3, r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	440b      	add	r3, r1
 8004cca:	3326      	adds	r3, #38	@ 0x26
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d00b      	beq.n	8004cea <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004cd2:	78fa      	ldrb	r2, [r7, #3]
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	1a9b      	subs	r3, r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	440b      	add	r3, r1
 8004ce0:	3326      	adds	r3, #38	@ 0x26
 8004ce2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004ce4:	2b03      	cmp	r3, #3
 8004ce6:	f040 8190 	bne.w	800500a <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	799b      	ldrb	r3, [r3, #6]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d115      	bne.n	8004d1e <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004cf2:	78fa      	ldrb	r2, [r7, #3]
 8004cf4:	6879      	ldr	r1, [r7, #4]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	011b      	lsls	r3, r3, #4
 8004cfa:	1a9b      	subs	r3, r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	440b      	add	r3, r1
 8004d00:	333d      	adds	r3, #61	@ 0x3d
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	78fa      	ldrb	r2, [r7, #3]
 8004d06:	f083 0301 	eor.w	r3, r3, #1
 8004d0a:	b2d8      	uxtb	r0, r3
 8004d0c:	6879      	ldr	r1, [r7, #4]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	011b      	lsls	r3, r3, #4
 8004d12:	1a9b      	subs	r3, r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	440b      	add	r3, r1
 8004d18:	333d      	adds	r3, #61	@ 0x3d
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	799b      	ldrb	r3, [r3, #6]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	f040 8171 	bne.w	800500a <HCD_HC_OUT_IRQHandler+0x954>
 8004d28:	78fa      	ldrb	r2, [r7, #3]
 8004d2a:	6879      	ldr	r1, [r7, #4]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	011b      	lsls	r3, r3, #4
 8004d30:	1a9b      	subs	r3, r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	440b      	add	r3, r1
 8004d36:	3334      	adds	r3, #52	@ 0x34
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 8165 	beq.w	800500a <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004d40:	78fa      	ldrb	r2, [r7, #3]
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	4613      	mov	r3, r2
 8004d46:	011b      	lsls	r3, r3, #4
 8004d48:	1a9b      	subs	r3, r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	440b      	add	r3, r1
 8004d4e:	3334      	adds	r3, #52	@ 0x34
 8004d50:	6819      	ldr	r1, [r3, #0]
 8004d52:	78fa      	ldrb	r2, [r7, #3]
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	4613      	mov	r3, r2
 8004d58:	011b      	lsls	r3, r3, #4
 8004d5a:	1a9b      	subs	r3, r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4403      	add	r3, r0
 8004d60:	3328      	adds	r3, #40	@ 0x28
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	440b      	add	r3, r1
 8004d66:	1e59      	subs	r1, r3, #1
 8004d68:	78fa      	ldrb	r2, [r7, #3]
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	011b      	lsls	r3, r3, #4
 8004d70:	1a9b      	subs	r3, r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4403      	add	r3, r0
 8004d76:	3328      	adds	r3, #40	@ 0x28
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d7e:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 813f 	beq.w	800500a <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004d8c:	78fa      	ldrb	r2, [r7, #3]
 8004d8e:	6879      	ldr	r1, [r7, #4]
 8004d90:	4613      	mov	r3, r2
 8004d92:	011b      	lsls	r3, r3, #4
 8004d94:	1a9b      	subs	r3, r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	440b      	add	r3, r1
 8004d9a:	333d      	adds	r3, #61	@ 0x3d
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	78fa      	ldrb	r2, [r7, #3]
 8004da0:	f083 0301 	eor.w	r3, r3, #1
 8004da4:	b2d8      	uxtb	r0, r3
 8004da6:	6879      	ldr	r1, [r7, #4]
 8004da8:	4613      	mov	r3, r2
 8004daa:	011b      	lsls	r3, r3, #4
 8004dac:	1a9b      	subs	r3, r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	440b      	add	r3, r1
 8004db2:	333d      	adds	r3, #61	@ 0x3d
 8004db4:	4602      	mov	r2, r0
 8004db6:	701a      	strb	r2, [r3, #0]
 8004db8:	e127      	b.n	800500a <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004dba:	78fa      	ldrb	r2, [r7, #3]
 8004dbc:	6879      	ldr	r1, [r7, #4]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	011b      	lsls	r3, r3, #4
 8004dc2:	1a9b      	subs	r3, r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	440b      	add	r3, r1
 8004dc8:	334d      	adds	r3, #77	@ 0x4d
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b03      	cmp	r3, #3
 8004dce:	d120      	bne.n	8004e12 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004dd0:	78fa      	ldrb	r2, [r7, #3]
 8004dd2:	6879      	ldr	r1, [r7, #4]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	011b      	lsls	r3, r3, #4
 8004dd8:	1a9b      	subs	r3, r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	440b      	add	r3, r1
 8004dde:	334d      	adds	r3, #77	@ 0x4d
 8004de0:	2202      	movs	r2, #2
 8004de2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004de4:	78fa      	ldrb	r2, [r7, #3]
 8004de6:	6879      	ldr	r1, [r7, #4]
 8004de8:	4613      	mov	r3, r2
 8004dea:	011b      	lsls	r3, r3, #4
 8004dec:	1a9b      	subs	r3, r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	440b      	add	r3, r1
 8004df2:	331b      	adds	r3, #27
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	f040 8107 	bne.w	800500a <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004dfc:	78fa      	ldrb	r2, [r7, #3]
 8004dfe:	6879      	ldr	r1, [r7, #4]
 8004e00:	4613      	mov	r3, r2
 8004e02:	011b      	lsls	r3, r3, #4
 8004e04:	1a9b      	subs	r3, r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	440b      	add	r3, r1
 8004e0a:	334c      	adds	r3, #76	@ 0x4c
 8004e0c:	2202      	movs	r2, #2
 8004e0e:	701a      	strb	r2, [r3, #0]
 8004e10:	e0fb      	b.n	800500a <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004e12:	78fa      	ldrb	r2, [r7, #3]
 8004e14:	6879      	ldr	r1, [r7, #4]
 8004e16:	4613      	mov	r3, r2
 8004e18:	011b      	lsls	r3, r3, #4
 8004e1a:	1a9b      	subs	r3, r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	440b      	add	r3, r1
 8004e20:	334d      	adds	r3, #77	@ 0x4d
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	2b04      	cmp	r3, #4
 8004e26:	d13a      	bne.n	8004e9e <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e28:	78fa      	ldrb	r2, [r7, #3]
 8004e2a:	6879      	ldr	r1, [r7, #4]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	011b      	lsls	r3, r3, #4
 8004e30:	1a9b      	subs	r3, r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	440b      	add	r3, r1
 8004e36:	334d      	adds	r3, #77	@ 0x4d
 8004e38:	2202      	movs	r2, #2
 8004e3a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004e3c:	78fa      	ldrb	r2, [r7, #3]
 8004e3e:	6879      	ldr	r1, [r7, #4]
 8004e40:	4613      	mov	r3, r2
 8004e42:	011b      	lsls	r3, r3, #4
 8004e44:	1a9b      	subs	r3, r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	440b      	add	r3, r1
 8004e4a:	334c      	adds	r3, #76	@ 0x4c
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004e50:	78fa      	ldrb	r2, [r7, #3]
 8004e52:	6879      	ldr	r1, [r7, #4]
 8004e54:	4613      	mov	r3, r2
 8004e56:	011b      	lsls	r3, r3, #4
 8004e58:	1a9b      	subs	r3, r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	440b      	add	r3, r1
 8004e5e:	331b      	adds	r3, #27
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	f040 80d1 	bne.w	800500a <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004e68:	78fa      	ldrb	r2, [r7, #3]
 8004e6a:	6879      	ldr	r1, [r7, #4]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	011b      	lsls	r3, r3, #4
 8004e70:	1a9b      	subs	r3, r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	440b      	add	r3, r1
 8004e76:	331b      	adds	r3, #27
 8004e78:	2200      	movs	r2, #0
 8004e7a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004e7c:	78fb      	ldrb	r3, [r7, #3]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	78fa      	ldrb	r2, [r7, #3]
 8004e8c:	0151      	lsls	r1, r2, #5
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	440a      	add	r2, r1
 8004e92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e9a:	6053      	str	r3, [r2, #4]
 8004e9c:	e0b5      	b.n	800500a <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004e9e:	78fa      	ldrb	r2, [r7, #3]
 8004ea0:	6879      	ldr	r1, [r7, #4]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	1a9b      	subs	r3, r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	440b      	add	r3, r1
 8004eac:	334d      	adds	r3, #77	@ 0x4d
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	2b05      	cmp	r3, #5
 8004eb2:	d114      	bne.n	8004ede <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004eb4:	78fa      	ldrb	r2, [r7, #3]
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	011b      	lsls	r3, r3, #4
 8004ebc:	1a9b      	subs	r3, r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	440b      	add	r3, r1
 8004ec2:	334d      	adds	r3, #77	@ 0x4d
 8004ec4:	2202      	movs	r2, #2
 8004ec6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004ec8:	78fa      	ldrb	r2, [r7, #3]
 8004eca:	6879      	ldr	r1, [r7, #4]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	011b      	lsls	r3, r3, #4
 8004ed0:	1a9b      	subs	r3, r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	440b      	add	r3, r1
 8004ed6:	334c      	adds	r3, #76	@ 0x4c
 8004ed8:	2202      	movs	r2, #2
 8004eda:	701a      	strb	r2, [r3, #0]
 8004edc:	e095      	b.n	800500a <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004ede:	78fa      	ldrb	r2, [r7, #3]
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	1a9b      	subs	r3, r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	440b      	add	r3, r1
 8004eec:	334d      	adds	r3, #77	@ 0x4d
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	2b06      	cmp	r3, #6
 8004ef2:	d114      	bne.n	8004f1e <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ef4:	78fa      	ldrb	r2, [r7, #3]
 8004ef6:	6879      	ldr	r1, [r7, #4]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	011b      	lsls	r3, r3, #4
 8004efc:	1a9b      	subs	r3, r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	440b      	add	r3, r1
 8004f02:	334d      	adds	r3, #77	@ 0x4d
 8004f04:	2202      	movs	r2, #2
 8004f06:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004f08:	78fa      	ldrb	r2, [r7, #3]
 8004f0a:	6879      	ldr	r1, [r7, #4]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	011b      	lsls	r3, r3, #4
 8004f10:	1a9b      	subs	r3, r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	440b      	add	r3, r1
 8004f16:	334c      	adds	r3, #76	@ 0x4c
 8004f18:	2205      	movs	r2, #5
 8004f1a:	701a      	strb	r2, [r3, #0]
 8004f1c:	e075      	b.n	800500a <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004f1e:	78fa      	ldrb	r2, [r7, #3]
 8004f20:	6879      	ldr	r1, [r7, #4]
 8004f22:	4613      	mov	r3, r2
 8004f24:	011b      	lsls	r3, r3, #4
 8004f26:	1a9b      	subs	r3, r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	440b      	add	r3, r1
 8004f2c:	334d      	adds	r3, #77	@ 0x4d
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	2b07      	cmp	r3, #7
 8004f32:	d00a      	beq.n	8004f4a <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004f34:	78fa      	ldrb	r2, [r7, #3]
 8004f36:	6879      	ldr	r1, [r7, #4]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	1a9b      	subs	r3, r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	440b      	add	r3, r1
 8004f42:	334d      	adds	r3, #77	@ 0x4d
 8004f44:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004f46:	2b09      	cmp	r3, #9
 8004f48:	d170      	bne.n	800502c <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004f4a:	78fa      	ldrb	r2, [r7, #3]
 8004f4c:	6879      	ldr	r1, [r7, #4]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	011b      	lsls	r3, r3, #4
 8004f52:	1a9b      	subs	r3, r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	440b      	add	r3, r1
 8004f58:	334d      	adds	r3, #77	@ 0x4d
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004f5e:	78fa      	ldrb	r2, [r7, #3]
 8004f60:	6879      	ldr	r1, [r7, #4]
 8004f62:	4613      	mov	r3, r2
 8004f64:	011b      	lsls	r3, r3, #4
 8004f66:	1a9b      	subs	r3, r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	440b      	add	r3, r1
 8004f6c:	3344      	adds	r3, #68	@ 0x44
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	1c59      	adds	r1, r3, #1
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	4613      	mov	r3, r2
 8004f76:	011b      	lsls	r3, r3, #4
 8004f78:	1a9b      	subs	r3, r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4403      	add	r3, r0
 8004f7e:	3344      	adds	r3, #68	@ 0x44
 8004f80:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004f82:	78fa      	ldrb	r2, [r7, #3]
 8004f84:	6879      	ldr	r1, [r7, #4]
 8004f86:	4613      	mov	r3, r2
 8004f88:	011b      	lsls	r3, r3, #4
 8004f8a:	1a9b      	subs	r3, r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	3344      	adds	r3, #68	@ 0x44
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d914      	bls.n	8004fc2 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004f98:	78fa      	ldrb	r2, [r7, #3]
 8004f9a:	6879      	ldr	r1, [r7, #4]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	011b      	lsls	r3, r3, #4
 8004fa0:	1a9b      	subs	r3, r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	440b      	add	r3, r1
 8004fa6:	3344      	adds	r3, #68	@ 0x44
 8004fa8:	2200      	movs	r2, #0
 8004faa:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004fac:	78fa      	ldrb	r2, [r7, #3]
 8004fae:	6879      	ldr	r1, [r7, #4]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	1a9b      	subs	r3, r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	440b      	add	r3, r1
 8004fba:	334c      	adds	r3, #76	@ 0x4c
 8004fbc:	2204      	movs	r2, #4
 8004fbe:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004fc0:	e022      	b.n	8005008 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004fc2:	78fa      	ldrb	r2, [r7, #3]
 8004fc4:	6879      	ldr	r1, [r7, #4]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	011b      	lsls	r3, r3, #4
 8004fca:	1a9b      	subs	r3, r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	440b      	add	r3, r1
 8004fd0:	334c      	adds	r3, #76	@ 0x4c
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004fd6:	78fb      	ldrb	r3, [r7, #3]
 8004fd8:	015a      	lsls	r2, r3, #5
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004fec:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ff4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004ff6:	78fb      	ldrb	r3, [r7, #3]
 8004ff8:	015a      	lsls	r2, r3, #5
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005002:	461a      	mov	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005008:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800500a:	78fa      	ldrb	r2, [r7, #3]
 800500c:	6879      	ldr	r1, [r7, #4]
 800500e:	4613      	mov	r3, r2
 8005010:	011b      	lsls	r3, r3, #4
 8005012:	1a9b      	subs	r3, r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	440b      	add	r3, r1
 8005018:	334c      	adds	r3, #76	@ 0x4c
 800501a:	781a      	ldrb	r2, [r3, #0]
 800501c:	78fb      	ldrb	r3, [r7, #3]
 800501e:	4619      	mov	r1, r3
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f004 fdcf 	bl	8009bc4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005026:	e002      	b.n	800502e <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005028:	bf00      	nop
 800502a:	e000      	b.n	800502e <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800502c:	bf00      	nop
  }
}
 800502e:	3718      	adds	r7, #24
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b08a      	sub	sp, #40	@ 0x28
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005044:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	f003 030f 	and.w	r3, r3, #15
 8005054:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	0c5b      	lsrs	r3, r3, #17
 800505a:	f003 030f 	and.w	r3, r3, #15
 800505e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	091b      	lsrs	r3, r3, #4
 8005064:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005068:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2b02      	cmp	r3, #2
 800506e:	d004      	beq.n	800507a <HCD_RXQLVL_IRQHandler+0x46>
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	2b05      	cmp	r3, #5
 8005074:	f000 80b6 	beq.w	80051e4 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005078:	e0b7      	b.n	80051ea <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 80b3 	beq.w	80051e8 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005082:	6879      	ldr	r1, [r7, #4]
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	4613      	mov	r3, r2
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	1a9b      	subs	r3, r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	440b      	add	r3, r1
 8005090:	332c      	adds	r3, #44	@ 0x2c
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 80a7 	beq.w	80051e8 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800509a:	6879      	ldr	r1, [r7, #4]
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	4613      	mov	r3, r2
 80050a0:	011b      	lsls	r3, r3, #4
 80050a2:	1a9b      	subs	r3, r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	440b      	add	r3, r1
 80050a8:	3338      	adds	r3, #56	@ 0x38
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	18d1      	adds	r1, r2, r3
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	4613      	mov	r3, r2
 80050b6:	011b      	lsls	r3, r3, #4
 80050b8:	1a9b      	subs	r3, r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4403      	add	r3, r0
 80050be:	3334      	adds	r3, #52	@ 0x34
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4299      	cmp	r1, r3
 80050c4:	f200 8083 	bhi.w	80051ce <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6818      	ldr	r0, [r3, #0]
 80050cc:	6879      	ldr	r1, [r7, #4]
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	4613      	mov	r3, r2
 80050d2:	011b      	lsls	r3, r3, #4
 80050d4:	1a9b      	subs	r3, r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	440b      	add	r3, r1
 80050da:	332c      	adds	r3, #44	@ 0x2c
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	b292      	uxth	r2, r2
 80050e2:	4619      	mov	r1, r3
 80050e4:	f003 f952 	bl	800838c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80050e8:	6879      	ldr	r1, [r7, #4]
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	4613      	mov	r3, r2
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	1a9b      	subs	r3, r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	440b      	add	r3, r1
 80050f6:	332c      	adds	r3, #44	@ 0x2c
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	18d1      	adds	r1, r2, r3
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	4613      	mov	r3, r2
 8005104:	011b      	lsls	r3, r3, #4
 8005106:	1a9b      	subs	r3, r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	4403      	add	r3, r0
 800510c:	332c      	adds	r3, #44	@ 0x2c
 800510e:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005110:	6879      	ldr	r1, [r7, #4]
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	4613      	mov	r3, r2
 8005116:	011b      	lsls	r3, r3, #4
 8005118:	1a9b      	subs	r3, r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	440b      	add	r3, r1
 800511e:	3338      	adds	r3, #56	@ 0x38
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	18d1      	adds	r1, r2, r3
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	4613      	mov	r3, r2
 800512c:	011b      	lsls	r3, r3, #4
 800512e:	1a9b      	subs	r3, r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4403      	add	r3, r0
 8005134:	3338      	adds	r3, #56	@ 0x38
 8005136:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	6a3b      	ldr	r3, [r7, #32]
 800513e:	4413      	add	r3, r2
 8005140:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	0cdb      	lsrs	r3, r3, #19
 8005148:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800514c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800514e:	6879      	ldr	r1, [r7, #4]
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	4613      	mov	r3, r2
 8005154:	011b      	lsls	r3, r3, #4
 8005156:	1a9b      	subs	r3, r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	440b      	add	r3, r1
 800515c:	3328      	adds	r3, #40	@ 0x28
 800515e:	881b      	ldrh	r3, [r3, #0]
 8005160:	461a      	mov	r2, r3
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	4293      	cmp	r3, r2
 8005166:	d13f      	bne.n	80051e8 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d03c      	beq.n	80051e8 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	4413      	add	r3, r2
 8005176:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005184:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800518c:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	4413      	add	r3, r2
 8005196:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800519a:	461a      	mov	r2, r3
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80051a0:	6879      	ldr	r1, [r7, #4]
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	4613      	mov	r3, r2
 80051a6:	011b      	lsls	r3, r3, #4
 80051a8:	1a9b      	subs	r3, r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	440b      	add	r3, r1
 80051ae:	333c      	adds	r3, #60	@ 0x3c
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	f083 0301 	eor.w	r3, r3, #1
 80051b6:	b2d8      	uxtb	r0, r3
 80051b8:	6879      	ldr	r1, [r7, #4]
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	4613      	mov	r3, r2
 80051be:	011b      	lsls	r3, r3, #4
 80051c0:	1a9b      	subs	r3, r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	440b      	add	r3, r1
 80051c6:	333c      	adds	r3, #60	@ 0x3c
 80051c8:	4602      	mov	r2, r0
 80051ca:	701a      	strb	r2, [r3, #0]
      break;
 80051cc:	e00c      	b.n	80051e8 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80051ce:	6879      	ldr	r1, [r7, #4]
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	4613      	mov	r3, r2
 80051d4:	011b      	lsls	r3, r3, #4
 80051d6:	1a9b      	subs	r3, r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	440b      	add	r3, r1
 80051dc:	334c      	adds	r3, #76	@ 0x4c
 80051de:	2204      	movs	r2, #4
 80051e0:	701a      	strb	r2, [r3, #0]
      break;
 80051e2:	e001      	b.n	80051e8 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80051e4:	bf00      	nop
 80051e6:	e000      	b.n	80051ea <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80051e8:	bf00      	nop
  }
}
 80051ea:	bf00      	nop
 80051ec:	3728      	adds	r7, #40	@ 0x28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b086      	sub	sp, #24
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800521e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b02      	cmp	r3, #2
 8005228:	d10b      	bne.n	8005242 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	2b01      	cmp	r3, #1
 8005232:	d102      	bne.n	800523a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f004 fca9 	bl	8009b8c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	f043 0302 	orr.w	r3, r3, #2
 8005240:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f003 0308 	and.w	r3, r3, #8
 8005248:	2b08      	cmp	r3, #8
 800524a:	d132      	bne.n	80052b2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f043 0308 	orr.w	r3, r3, #8
 8005252:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f003 0304 	and.w	r3, r3, #4
 800525a:	2b04      	cmp	r3, #4
 800525c:	d126      	bne.n	80052ac <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	7a5b      	ldrb	r3, [r3, #9]
 8005262:	2b02      	cmp	r3, #2
 8005264:	d113      	bne.n	800528e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800526c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005270:	d106      	bne.n	8005280 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2102      	movs	r1, #2
 8005278:	4618      	mov	r0, r3
 800527a:	f003 f921 	bl	80084c0 <USB_InitFSLSPClkSel>
 800527e:	e011      	b.n	80052a4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2101      	movs	r1, #1
 8005286:	4618      	mov	r0, r3
 8005288:	f003 f91a 	bl	80084c0 <USB_InitFSLSPClkSel>
 800528c:	e00a      	b.n	80052a4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	79db      	ldrb	r3, [r3, #7]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d106      	bne.n	80052a4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800529c:	461a      	mov	r2, r3
 800529e:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80052a2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f004 fc9f 	bl	8009be8 <HAL_HCD_PortEnabled_Callback>
 80052aa:	e002      	b.n	80052b2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f004 fca9 	bl	8009c04 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f003 0320 	and.w	r3, r3, #32
 80052b8:	2b20      	cmp	r3, #32
 80052ba:	d103      	bne.n	80052c4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	f043 0320 	orr.w	r3, r3, #32
 80052c2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80052ca:	461a      	mov	r2, r3
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	6013      	str	r3, [r2, #0]
}
 80052d0:	bf00      	nop
 80052d2:	3718      	adds	r7, #24
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e12b      	b.n	8005542 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d106      	bne.n	8005304 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7fc f87c 	bl	80013fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2224      	movs	r2, #36	@ 0x24
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f022 0201 	bic.w	r2, r2, #1
 800531a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800532a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800533a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800533c:	f001 f964 	bl	8006608 <HAL_RCC_GetPCLK1Freq>
 8005340:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	4a81      	ldr	r2, [pc, #516]	@ (800554c <HAL_I2C_Init+0x274>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d807      	bhi.n	800535c <HAL_I2C_Init+0x84>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4a80      	ldr	r2, [pc, #512]	@ (8005550 <HAL_I2C_Init+0x278>)
 8005350:	4293      	cmp	r3, r2
 8005352:	bf94      	ite	ls
 8005354:	2301      	movls	r3, #1
 8005356:	2300      	movhi	r3, #0
 8005358:	b2db      	uxtb	r3, r3
 800535a:	e006      	b.n	800536a <HAL_I2C_Init+0x92>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4a7d      	ldr	r2, [pc, #500]	@ (8005554 <HAL_I2C_Init+0x27c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	bf94      	ite	ls
 8005364:	2301      	movls	r3, #1
 8005366:	2300      	movhi	r3, #0
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e0e7      	b.n	8005542 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	4a78      	ldr	r2, [pc, #480]	@ (8005558 <HAL_I2C_Init+0x280>)
 8005376:	fba2 2303 	umull	r2, r3, r2, r3
 800537a:	0c9b      	lsrs	r3, r3, #18
 800537c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	430a      	orrs	r2, r1
 8005390:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	4a6a      	ldr	r2, [pc, #424]	@ (800554c <HAL_I2C_Init+0x274>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d802      	bhi.n	80053ac <HAL_I2C_Init+0xd4>
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	3301      	adds	r3, #1
 80053aa:	e009      	b.n	80053c0 <HAL_I2C_Init+0xe8>
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80053b2:	fb02 f303 	mul.w	r3, r2, r3
 80053b6:	4a69      	ldr	r2, [pc, #420]	@ (800555c <HAL_I2C_Init+0x284>)
 80053b8:	fba2 2303 	umull	r2, r3, r2, r3
 80053bc:	099b      	lsrs	r3, r3, #6
 80053be:	3301      	adds	r3, #1
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	6812      	ldr	r2, [r2, #0]
 80053c4:	430b      	orrs	r3, r1
 80053c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80053d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	495c      	ldr	r1, [pc, #368]	@ (800554c <HAL_I2C_Init+0x274>)
 80053dc:	428b      	cmp	r3, r1
 80053de:	d819      	bhi.n	8005414 <HAL_I2C_Init+0x13c>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	1e59      	subs	r1, r3, #1
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	005b      	lsls	r3, r3, #1
 80053ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80053ee:	1c59      	adds	r1, r3, #1
 80053f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80053f4:	400b      	ands	r3, r1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <HAL_I2C_Init+0x138>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	1e59      	subs	r1, r3, #1
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	fbb1 f3f3 	udiv	r3, r1, r3
 8005408:	3301      	adds	r3, #1
 800540a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800540e:	e051      	b.n	80054b4 <HAL_I2C_Init+0x1dc>
 8005410:	2304      	movs	r3, #4
 8005412:	e04f      	b.n	80054b4 <HAL_I2C_Init+0x1dc>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d111      	bne.n	8005440 <HAL_I2C_Init+0x168>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	1e58      	subs	r0, r3, #1
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6859      	ldr	r1, [r3, #4]
 8005424:	460b      	mov	r3, r1
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	440b      	add	r3, r1
 800542a:	fbb0 f3f3 	udiv	r3, r0, r3
 800542e:	3301      	adds	r3, #1
 8005430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005434:	2b00      	cmp	r3, #0
 8005436:	bf0c      	ite	eq
 8005438:	2301      	moveq	r3, #1
 800543a:	2300      	movne	r3, #0
 800543c:	b2db      	uxtb	r3, r3
 800543e:	e012      	b.n	8005466 <HAL_I2C_Init+0x18e>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	1e58      	subs	r0, r3, #1
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6859      	ldr	r1, [r3, #4]
 8005448:	460b      	mov	r3, r1
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	440b      	add	r3, r1
 800544e:	0099      	lsls	r1, r3, #2
 8005450:	440b      	add	r3, r1
 8005452:	fbb0 f3f3 	udiv	r3, r0, r3
 8005456:	3301      	adds	r3, #1
 8005458:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800545c:	2b00      	cmp	r3, #0
 800545e:	bf0c      	ite	eq
 8005460:	2301      	moveq	r3, #1
 8005462:	2300      	movne	r3, #0
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <HAL_I2C_Init+0x196>
 800546a:	2301      	movs	r3, #1
 800546c:	e022      	b.n	80054b4 <HAL_I2C_Init+0x1dc>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10e      	bne.n	8005494 <HAL_I2C_Init+0x1bc>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	1e58      	subs	r0, r3, #1
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6859      	ldr	r1, [r3, #4]
 800547e:	460b      	mov	r3, r1
 8005480:	005b      	lsls	r3, r3, #1
 8005482:	440b      	add	r3, r1
 8005484:	fbb0 f3f3 	udiv	r3, r0, r3
 8005488:	3301      	adds	r3, #1
 800548a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800548e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005492:	e00f      	b.n	80054b4 <HAL_I2C_Init+0x1dc>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	1e58      	subs	r0, r3, #1
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6859      	ldr	r1, [r3, #4]
 800549c:	460b      	mov	r3, r1
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	440b      	add	r3, r1
 80054a2:	0099      	lsls	r1, r3, #2
 80054a4:	440b      	add	r3, r1
 80054a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80054aa:	3301      	adds	r3, #1
 80054ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80054b4:	6879      	ldr	r1, [r7, #4]
 80054b6:	6809      	ldr	r1, [r1, #0]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	69da      	ldr	r2, [r3, #28]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	431a      	orrs	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80054e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	6911      	ldr	r1, [r2, #16]
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	68d2      	ldr	r2, [r2, #12]
 80054ee:	4311      	orrs	r1, r2
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	6812      	ldr	r2, [r2, #0]
 80054f4:	430b      	orrs	r3, r1
 80054f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	695a      	ldr	r2, [r3, #20]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	431a      	orrs	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f042 0201 	orr.w	r2, r2, #1
 8005522:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2220      	movs	r2, #32
 800552e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	000186a0 	.word	0x000186a0
 8005550:	001e847f 	.word	0x001e847f
 8005554:	003d08ff 	.word	0x003d08ff
 8005558:	431bde83 	.word	0x431bde83
 800555c:	10624dd3 	.word	0x10624dd3

08005560 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b20      	cmp	r3, #32
 8005574:	d129      	bne.n	80055ca <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2224      	movs	r2, #36	@ 0x24
 800557a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 0201 	bic.w	r2, r2, #1
 800558c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 0210 	bic.w	r2, r2, #16
 800559c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	683a      	ldr	r2, [r7, #0]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f042 0201 	orr.w	r2, r2, #1
 80055bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2220      	movs	r2, #32
 80055c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	e000      	b.n	80055cc <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80055ca:	2302      	movs	r3, #2
  }
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80055e2:	2300      	movs	r3, #0
 80055e4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b20      	cmp	r3, #32
 80055f0:	d12a      	bne.n	8005648 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2224      	movs	r2, #36	@ 0x24
 80055f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0201 	bic.w	r2, r2, #1
 8005608:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005610:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005612:	89fb      	ldrh	r3, [r7, #14]
 8005614:	f023 030f 	bic.w	r3, r3, #15
 8005618:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	b29a      	uxth	r2, r3
 800561e:	89fb      	ldrh	r3, [r7, #14]
 8005620:	4313      	orrs	r3, r2
 8005622:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	89fa      	ldrh	r2, [r7, #14]
 800562a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f042 0201 	orr.w	r2, r2, #1
 800563a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2220      	movs	r2, #32
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005644:	2300      	movs	r3, #0
 8005646:	e000      	b.n	800564a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005648:	2302      	movs	r3, #2
  }
}
 800564a:	4618      	mov	r0, r3
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
	...

08005658 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e0bf      	b.n	80057ea <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d106      	bne.n	8005684 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7fc faba 	bl	8001bf8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2202      	movs	r2, #2
 8005688:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	699a      	ldr	r2, [r3, #24]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800569a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6999      	ldr	r1, [r3, #24]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80056b0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	430a      	orrs	r2, r1
 80056be:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6899      	ldr	r1, [r3, #8]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	4b4a      	ldr	r3, [pc, #296]	@ (80057f4 <HAL_LTDC_Init+0x19c>)
 80056cc:	400b      	ands	r3, r1
 80056ce:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	041b      	lsls	r3, r3, #16
 80056d6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6899      	ldr	r1, [r3, #8]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	699a      	ldr	r2, [r3, #24]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	431a      	orrs	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	430a      	orrs	r2, r1
 80056ec:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68d9      	ldr	r1, [r3, #12]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	4b3e      	ldr	r3, [pc, #248]	@ (80057f4 <HAL_LTDC_Init+0x19c>)
 80056fa:	400b      	ands	r3, r1
 80056fc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	041b      	lsls	r3, r3, #16
 8005704:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68d9      	ldr	r1, [r3, #12]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a1a      	ldr	r2, [r3, #32]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	431a      	orrs	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	430a      	orrs	r2, r1
 800571a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6919      	ldr	r1, [r3, #16]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	4b33      	ldr	r3, [pc, #204]	@ (80057f4 <HAL_LTDC_Init+0x19c>)
 8005728:	400b      	ands	r3, r1
 800572a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005730:	041b      	lsls	r3, r3, #16
 8005732:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6919      	ldr	r1, [r3, #16]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	431a      	orrs	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	430a      	orrs	r2, r1
 8005748:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6959      	ldr	r1, [r3, #20]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	4b27      	ldr	r3, [pc, #156]	@ (80057f4 <HAL_LTDC_Init+0x19c>)
 8005756:	400b      	ands	r3, r1
 8005758:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800575e:	041b      	lsls	r3, r3, #16
 8005760:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6959      	ldr	r1, [r3, #20]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	431a      	orrs	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	430a      	orrs	r2, r1
 8005776:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800577e:	021b      	lsls	r3, r3, #8
 8005780:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005788:	041b      	lsls	r3, r3, #16
 800578a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800579a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80057ae:	431a      	orrs	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	430a      	orrs	r2, r1
 80057b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f042 0206 	orr.w	r2, r2, #6
 80057c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699a      	ldr	r2, [r3, #24]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f042 0201 	orr.w	r2, r2, #1
 80057d6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	f000f800 	.word	0xf000f800

080057f8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005806:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800580e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f003 0304 	and.w	r3, r3, #4
 8005816:	2b00      	cmp	r3, #0
 8005818:	d023      	beq.n	8005862 <HAL_LTDC_IRQHandler+0x6a>
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	f003 0304 	and.w	r3, r3, #4
 8005820:	2b00      	cmp	r3, #0
 8005822:	d01e      	beq.n	8005862 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 0204 	bic.w	r2, r2, #4
 8005832:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2204      	movs	r2, #4
 800583a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005842:	f043 0201 	orr.w	r2, r3, #1
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2204      	movs	r2, #4
 8005850:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 f86f 	bl	8005940 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f003 0302 	and.w	r3, r3, #2
 8005868:	2b00      	cmp	r3, #0
 800586a:	d023      	beq.n	80058b4 <HAL_LTDC_IRQHandler+0xbc>
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d01e      	beq.n	80058b4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f022 0202 	bic.w	r2, r2, #2
 8005884:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2202      	movs	r2, #2
 800588c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005894:	f043 0202 	orr.w	r2, r3, #2
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2204      	movs	r2, #4
 80058a2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f846 	bl	8005940 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d01b      	beq.n	80058f6 <HAL_LTDC_IRQHandler+0xfe>
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d016      	beq.n	80058f6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 0201 	bic.w	r2, r2, #1
 80058d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2201      	movs	r2, #1
 80058de:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f82f 	bl	8005954 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f003 0308 	and.w	r3, r3, #8
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d01b      	beq.n	8005938 <HAL_LTDC_IRQHandler+0x140>
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	f003 0308 	and.w	r3, r3, #8
 8005906:	2b00      	cmp	r3, #0
 8005908:	d016      	beq.n	8005938 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f022 0208 	bic.w	r2, r2, #8
 8005918:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2208      	movs	r2, #8
 8005920:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f818 	bl	8005968 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005938:	bf00      	nop
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800597c:	b5b0      	push	{r4, r5, r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800598e:	2b01      	cmp	r3, #1
 8005990:	d101      	bne.n	8005996 <HAL_LTDC_ConfigLayer+0x1a>
 8005992:	2302      	movs	r3, #2
 8005994:	e02c      	b.n	80059f0 <HAL_LTDC_ConfigLayer+0x74>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2202      	movs	r2, #2
 80059a2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2134      	movs	r1, #52	@ 0x34
 80059ac:	fb01 f303 	mul.w	r3, r1, r3
 80059b0:	4413      	add	r3, r2
 80059b2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	4614      	mov	r4, r2
 80059ba:	461d      	mov	r5, r3
 80059bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059c8:	682b      	ldr	r3, [r5, #0]
 80059ca:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	68b9      	ldr	r1, [r7, #8]
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f000 f811 	bl	80059f8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2201      	movs	r2, #1
 80059dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bdb0      	pop	{r4, r5, r7, pc}

080059f8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b089      	sub	sp, #36	@ 0x24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	0c1b      	lsrs	r3, r3, #16
 8005a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a14:	4413      	add	r3, r2
 8005a16:	041b      	lsls	r3, r3, #16
 8005a18:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	01db      	lsls	r3, r3, #7
 8005a24:	4413      	add	r3, r2
 8005a26:	3384      	adds	r3, #132	@ 0x84
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	6812      	ldr	r2, [r2, #0]
 8005a2e:	4611      	mov	r1, r2
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	01d2      	lsls	r2, r2, #7
 8005a34:	440a      	add	r2, r1
 8005a36:	3284      	adds	r2, #132	@ 0x84
 8005a38:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005a3c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	0c1b      	lsrs	r3, r3, #16
 8005a4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005a4e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005a50:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4619      	mov	r1, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	01db      	lsls	r3, r3, #7
 8005a5c:	440b      	add	r3, r1
 8005a5e:	3384      	adds	r3, #132	@ 0x84
 8005a60:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005a66:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	68da      	ldr	r2, [r3, #12]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a76:	4413      	add	r3, r2
 8005a78:	041b      	lsls	r3, r3, #16
 8005a7a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	461a      	mov	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	01db      	lsls	r3, r3, #7
 8005a86:	4413      	add	r3, r2
 8005a88:	3384      	adds	r3, #132	@ 0x84
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	6812      	ldr	r2, [r2, #0]
 8005a90:	4611      	mov	r1, r2
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	01d2      	lsls	r2, r2, #7
 8005a96:	440a      	add	r2, r1
 8005a98:	3284      	adds	r2, #132	@ 0x84
 8005a9a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005a9e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	689a      	ldr	r2, [r3, #8]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005aae:	4413      	add	r3, r2
 8005ab0:	1c5a      	adds	r2, r3, #1
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	01db      	lsls	r3, r3, #7
 8005abc:	440b      	add	r3, r1
 8005abe:	3384      	adds	r3, #132	@ 0x84
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	461a      	mov	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	01db      	lsls	r3, r3, #7
 8005ad2:	4413      	add	r3, r2
 8005ad4:	3384      	adds	r3, #132	@ 0x84
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	6812      	ldr	r2, [r2, #0]
 8005adc:	4611      	mov	r1, r2
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	01d2      	lsls	r2, r2, #7
 8005ae2:	440a      	add	r2, r1
 8005ae4:	3284      	adds	r2, #132	@ 0x84
 8005ae6:	f023 0307 	bic.w	r3, r3, #7
 8005aea:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	461a      	mov	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	01db      	lsls	r3, r3, #7
 8005af6:	4413      	add	r3, r2
 8005af8:	3384      	adds	r3, #132	@ 0x84
 8005afa:	461a      	mov	r2, r3
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005b08:	021b      	lsls	r3, r3, #8
 8005b0a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005b12:	041b      	lsls	r3, r3, #16
 8005b14:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	061b      	lsls	r3, r3, #24
 8005b1c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	461a      	mov	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	01db      	lsls	r3, r3, #7
 8005b28:	4413      	add	r3, r2
 8005b2a:	3384      	adds	r3, #132	@ 0x84
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	461a      	mov	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	01db      	lsls	r3, r3, #7
 8005b38:	4413      	add	r3, r2
 8005b3a:	3384      	adds	r3, #132	@ 0x84
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	2300      	movs	r3, #0
 8005b40:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005b48:	461a      	mov	r2, r3
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	431a      	orrs	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4619      	mov	r1, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	01db      	lsls	r3, r3, #7
 8005b5c:	440b      	add	r3, r1
 8005b5e:	3384      	adds	r3, #132	@ 0x84
 8005b60:	4619      	mov	r1, r3
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	01db      	lsls	r3, r3, #7
 8005b72:	4413      	add	r3, r2
 8005b74:	3384      	adds	r3, #132	@ 0x84
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	6812      	ldr	r2, [r2, #0]
 8005b7c:	4611      	mov	r1, r2
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	01d2      	lsls	r2, r2, #7
 8005b82:	440a      	add	r2, r1
 8005b84:	3284      	adds	r2, #132	@ 0x84
 8005b86:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005b8a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	461a      	mov	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	01db      	lsls	r3, r3, #7
 8005b96:	4413      	add	r3, r2
 8005b98:	3384      	adds	r3, #132	@ 0x84
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	01db      	lsls	r3, r3, #7
 8005bac:	4413      	add	r3, r2
 8005bae:	3384      	adds	r3, #132	@ 0x84
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	6812      	ldr	r2, [r2, #0]
 8005bb6:	4611      	mov	r1, r2
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	01d2      	lsls	r2, r2, #7
 8005bbc:	440a      	add	r2, r1
 8005bbe:	3284      	adds	r2, #132	@ 0x84
 8005bc0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005bc4:	f023 0307 	bic.w	r3, r3, #7
 8005bc8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	69da      	ldr	r2, [r3, #28]
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	68f9      	ldr	r1, [r7, #12]
 8005bd4:	6809      	ldr	r1, [r1, #0]
 8005bd6:	4608      	mov	r0, r1
 8005bd8:	6879      	ldr	r1, [r7, #4]
 8005bda:	01c9      	lsls	r1, r1, #7
 8005bdc:	4401      	add	r1, r0
 8005bde:	3184      	adds	r1, #132	@ 0x84
 8005be0:	4313      	orrs	r3, r2
 8005be2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	461a      	mov	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	01db      	lsls	r3, r3, #7
 8005bee:	4413      	add	r3, r2
 8005bf0:	3384      	adds	r3, #132	@ 0x84
 8005bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	01db      	lsls	r3, r3, #7
 8005bfe:	4413      	add	r3, r2
 8005c00:	3384      	adds	r3, #132	@ 0x84
 8005c02:	461a      	mov	r2, r3
 8005c04:	2300      	movs	r3, #0
 8005c06:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	01db      	lsls	r3, r3, #7
 8005c12:	4413      	add	r3, r2
 8005c14:	3384      	adds	r3, #132	@ 0x84
 8005c16:	461a      	mov	r2, r3
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c1c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d102      	bne.n	8005c2c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005c26:	2304      	movs	r3, #4
 8005c28:	61fb      	str	r3, [r7, #28]
 8005c2a:	e01b      	b.n	8005c64 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d102      	bne.n	8005c3a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005c34:	2303      	movs	r3, #3
 8005c36:	61fb      	str	r3, [r7, #28]
 8005c38:	e014      	b.n	8005c64 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	2b04      	cmp	r3, #4
 8005c40:	d00b      	beq.n	8005c5a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d007      	beq.n	8005c5a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005c4e:	2b03      	cmp	r3, #3
 8005c50:	d003      	beq.n	8005c5a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005c56:	2b07      	cmp	r3, #7
 8005c58:	d102      	bne.n	8005c60 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	61fb      	str	r3, [r7, #28]
 8005c5e:	e001      	b.n	8005c64 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005c60:	2301      	movs	r3, #1
 8005c62:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	461a      	mov	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	01db      	lsls	r3, r3, #7
 8005c6e:	4413      	add	r3, r2
 8005c70:	3384      	adds	r3, #132	@ 0x84
 8005c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	6812      	ldr	r2, [r2, #0]
 8005c78:	4611      	mov	r1, r2
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	01d2      	lsls	r2, r2, #7
 8005c7e:	440a      	add	r2, r1
 8005c80:	3284      	adds	r2, #132	@ 0x84
 8005c82:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005c86:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c8c:	69fa      	ldr	r2, [r7, #28]
 8005c8e:	fb02 f303 	mul.w	r3, r2, r3
 8005c92:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	6859      	ldr	r1, [r3, #4]
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	1acb      	subs	r3, r1, r3
 8005c9e:	69f9      	ldr	r1, [r7, #28]
 8005ca0:	fb01 f303 	mul.w	r3, r1, r3
 8005ca4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005ca6:	68f9      	ldr	r1, [r7, #12]
 8005ca8:	6809      	ldr	r1, [r1, #0]
 8005caa:	4608      	mov	r0, r1
 8005cac:	6879      	ldr	r1, [r7, #4]
 8005cae:	01c9      	lsls	r1, r1, #7
 8005cb0:	4401      	add	r1, r0
 8005cb2:	3184      	adds	r1, #132	@ 0x84
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	01db      	lsls	r3, r3, #7
 8005cc2:	4413      	add	r3, r2
 8005cc4:	3384      	adds	r3, #132	@ 0x84
 8005cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	6812      	ldr	r2, [r2, #0]
 8005ccc:	4611      	mov	r1, r2
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	01d2      	lsls	r2, r2, #7
 8005cd2:	440a      	add	r2, r1
 8005cd4:	3284      	adds	r2, #132	@ 0x84
 8005cd6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005cda:	f023 0307 	bic.w	r3, r3, #7
 8005cde:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	01db      	lsls	r3, r3, #7
 8005cea:	4413      	add	r3, r2
 8005cec:	3384      	adds	r3, #132	@ 0x84
 8005cee:	461a      	mov	r2, r3
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	01db      	lsls	r3, r3, #7
 8005d00:	4413      	add	r3, r2
 8005d02:	3384      	adds	r3, #132	@ 0x84
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	6812      	ldr	r2, [r2, #0]
 8005d0a:	4611      	mov	r1, r2
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	01d2      	lsls	r2, r2, #7
 8005d10:	440a      	add	r2, r1
 8005d12:	3284      	adds	r2, #132	@ 0x84
 8005d14:	f043 0301 	orr.w	r3, r3, #1
 8005d18:	6013      	str	r3, [r2, #0]
}
 8005d1a:	bf00      	nop
 8005d1c:	3724      	adds	r7, #36	@ 0x24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
	...

08005d28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e267      	b.n	800620a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d075      	beq.n	8005e32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005d46:	4b88      	ldr	r3, [pc, #544]	@ (8005f68 <HAL_RCC_OscConfig+0x240>)
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f003 030c 	and.w	r3, r3, #12
 8005d4e:	2b04      	cmp	r3, #4
 8005d50:	d00c      	beq.n	8005d6c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d52:	4b85      	ldr	r3, [pc, #532]	@ (8005f68 <HAL_RCC_OscConfig+0x240>)
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005d5a:	2b08      	cmp	r3, #8
 8005d5c:	d112      	bne.n	8005d84 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d5e:	4b82      	ldr	r3, [pc, #520]	@ (8005f68 <HAL_RCC_OscConfig+0x240>)
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d6a:	d10b      	bne.n	8005d84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d6c:	4b7e      	ldr	r3, [pc, #504]	@ (8005f68 <HAL_RCC_OscConfig+0x240>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d05b      	beq.n	8005e30 <HAL_RCC_OscConfig+0x108>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d157      	bne.n	8005e30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e242      	b.n	800620a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d8c:	d106      	bne.n	8005d9c <HAL_RCC_OscConfig+0x74>
 8005d8e:	4b76      	ldr	r3, [pc, #472]	@ (8005f68 <HAL_RCC_OscConfig+0x240>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a75      	ldr	r2, [pc, #468]	@ (8005f68 <HAL_RCC_OscConfig+0x240>)
 8005d94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d98:	6013      	str	r3, [r2, #0]
 8005d9a:	e01d      	b.n	8005dd8 <HAL_RCC_OscConfig+0xb0>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005da4:	d10c      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x98>
 8005da6:	4b70      	ldr	r3, [pc, #448]	@ (8005f68 <HAL_RCC_OscConfig+0x240>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a6f      	ldr	r2, [pc, #444]	@ (8005f68 <HAL_RCC_OscConfig+0x240>)
 8005dac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005db0:	6013      	str	r3, [r2, #0]
 8005db2:	4b6d      	ldr	r3, [pc, #436]	@ (8005f68 <HAL_RCC_OscConfig+0x240>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a6c      	ldr	r2, [pc, #432]	@ (8005f68 <HAL_RCC_OscConfig+0x240>)
 8005db8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dbc:	6013      	str	r3, [r2, #0]
 8005dbe:	e00b      	b.n	8005dd8 <HAL_RCC_OscConfig+0xb0>
 8005dc0:	4b69      	ldr	r3, [pc, #420]	@ (8005f68 <HAL_RCC_OscConfig+0x240>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a68      	ldr	r2, [pc, #416]	@ (8005f68 <HAL_RCC_OscConfig+0x240>)
 8005dc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dca:	6013      	str	r3, [r2, #0]
 8005dcc:	4b66      	ldr	r3, [pc, #408]	@ (8005f68 <HAL_RCC_OscConfig+0x240>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a65      	ldr	r2, [pc, #404]	@ (8005f68 <HAL_RCC_OscConfig+0x240>)
 8005dd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005dd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d013      	beq.n	8005e08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005de0:	f7fc fc52 	bl	8002688 <HAL_GetTick>
 8005de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005de6:	e008      	b.n	8005dfa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005de8:	f7fc fc4e 	bl	8002688 <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	2b64      	cmp	r3, #100	@ 0x64
 8005df4:	d901      	bls.n	8005dfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e207      	b.n	800620a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dfa:	4b5b      	ldr	r3, [pc, #364]	@ (8005f68 <HAL_RCC_OscConfig+0x240>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d0f0      	beq.n	8005de8 <HAL_RCC_OscConfig+0xc0>
 8005e06:	e014      	b.n	8005e32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e08:	f7fc fc3e 	bl	8002688 <HAL_GetTick>
 8005e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e0e:	e008      	b.n	8005e22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e10:	f7fc fc3a 	bl	8002688 <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	2b64      	cmp	r3, #100	@ 0x64
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e1f3      	b.n	800620a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e22:	4b51      	ldr	r3, [pc, #324]	@ (8005f68 <HAL_RCC_OscConfig+0x240>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1f0      	bne.n	8005e10 <HAL_RCC_OscConfig+0xe8>
 8005e2e:	e000      	b.n	8005e32 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0302 	and.w	r3, r3, #2
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d063      	beq.n	8005f06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005e3e:	4b4a      	ldr	r3, [pc, #296]	@ (8005f68 <HAL_RCC_OscConfig+0x240>)
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f003 030c 	and.w	r3, r3, #12
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00b      	beq.n	8005e62 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e4a:	4b47      	ldr	r3, [pc, #284]	@ (8005f68 <HAL_RCC_OscConfig+0x240>)
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005e52:	2b08      	cmp	r3, #8
 8005e54:	d11c      	bne.n	8005e90 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e56:	4b44      	ldr	r3, [pc, #272]	@ (8005f68 <HAL_RCC_OscConfig+0x240>)
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d116      	bne.n	8005e90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e62:	4b41      	ldr	r3, [pc, #260]	@ (8005f68 <HAL_RCC_OscConfig+0x240>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d005      	beq.n	8005e7a <HAL_RCC_OscConfig+0x152>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d001      	beq.n	8005e7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e1c7      	b.n	800620a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e7a:	4b3b      	ldr	r3, [pc, #236]	@ (8005f68 <HAL_RCC_OscConfig+0x240>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	00db      	lsls	r3, r3, #3
 8005e88:	4937      	ldr	r1, [pc, #220]	@ (8005f68 <HAL_RCC_OscConfig+0x240>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e8e:	e03a      	b.n	8005f06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d020      	beq.n	8005eda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e98:	4b34      	ldr	r3, [pc, #208]	@ (8005f6c <HAL_RCC_OscConfig+0x244>)
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e9e:	f7fc fbf3 	bl	8002688 <HAL_GetTick>
 8005ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ea4:	e008      	b.n	8005eb8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ea6:	f7fc fbef 	bl	8002688 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d901      	bls.n	8005eb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e1a8      	b.n	800620a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eb8:	4b2b      	ldr	r3, [pc, #172]	@ (8005f68 <HAL_RCC_OscConfig+0x240>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0302 	and.w	r3, r3, #2
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d0f0      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ec4:	4b28      	ldr	r3, [pc, #160]	@ (8005f68 <HAL_RCC_OscConfig+0x240>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	00db      	lsls	r3, r3, #3
 8005ed2:	4925      	ldr	r1, [pc, #148]	@ (8005f68 <HAL_RCC_OscConfig+0x240>)
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	600b      	str	r3, [r1, #0]
 8005ed8:	e015      	b.n	8005f06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005eda:	4b24      	ldr	r3, [pc, #144]	@ (8005f6c <HAL_RCC_OscConfig+0x244>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee0:	f7fc fbd2 	bl	8002688 <HAL_GetTick>
 8005ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ee6:	e008      	b.n	8005efa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ee8:	f7fc fbce 	bl	8002688 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e187      	b.n	800620a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005efa:	4b1b      	ldr	r3, [pc, #108]	@ (8005f68 <HAL_RCC_OscConfig+0x240>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0302 	and.w	r3, r3, #2
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1f0      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0308 	and.w	r3, r3, #8
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d036      	beq.n	8005f80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d016      	beq.n	8005f48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f1a:	4b15      	ldr	r3, [pc, #84]	@ (8005f70 <HAL_RCC_OscConfig+0x248>)
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f20:	f7fc fbb2 	bl	8002688 <HAL_GetTick>
 8005f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f26:	e008      	b.n	8005f3a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f28:	f7fc fbae 	bl	8002688 <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d901      	bls.n	8005f3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e167      	b.n	800620a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8005f68 <HAL_RCC_OscConfig+0x240>)
 8005f3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d0f0      	beq.n	8005f28 <HAL_RCC_OscConfig+0x200>
 8005f46:	e01b      	b.n	8005f80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f48:	4b09      	ldr	r3, [pc, #36]	@ (8005f70 <HAL_RCC_OscConfig+0x248>)
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f4e:	f7fc fb9b 	bl	8002688 <HAL_GetTick>
 8005f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f54:	e00e      	b.n	8005f74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f56:	f7fc fb97 	bl	8002688 <HAL_GetTick>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d907      	bls.n	8005f74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e150      	b.n	800620a <HAL_RCC_OscConfig+0x4e2>
 8005f68:	40023800 	.word	0x40023800
 8005f6c:	42470000 	.word	0x42470000
 8005f70:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f74:	4b88      	ldr	r3, [pc, #544]	@ (8006198 <HAL_RCC_OscConfig+0x470>)
 8005f76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f78:	f003 0302 	and.w	r3, r3, #2
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1ea      	bne.n	8005f56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0304 	and.w	r3, r3, #4
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f000 8097 	beq.w	80060bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f92:	4b81      	ldr	r3, [pc, #516]	@ (8006198 <HAL_RCC_OscConfig+0x470>)
 8005f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10f      	bne.n	8005fbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	60bb      	str	r3, [r7, #8]
 8005fa2:	4b7d      	ldr	r3, [pc, #500]	@ (8006198 <HAL_RCC_OscConfig+0x470>)
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa6:	4a7c      	ldr	r2, [pc, #496]	@ (8006198 <HAL_RCC_OscConfig+0x470>)
 8005fa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fac:	6413      	str	r3, [r2, #64]	@ 0x40
 8005fae:	4b7a      	ldr	r3, [pc, #488]	@ (8006198 <HAL_RCC_OscConfig+0x470>)
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fb6:	60bb      	str	r3, [r7, #8]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fbe:	4b77      	ldr	r3, [pc, #476]	@ (800619c <HAL_RCC_OscConfig+0x474>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d118      	bne.n	8005ffc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fca:	4b74      	ldr	r3, [pc, #464]	@ (800619c <HAL_RCC_OscConfig+0x474>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a73      	ldr	r2, [pc, #460]	@ (800619c <HAL_RCC_OscConfig+0x474>)
 8005fd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fd6:	f7fc fb57 	bl	8002688 <HAL_GetTick>
 8005fda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fdc:	e008      	b.n	8005ff0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fde:	f7fc fb53 	bl	8002688 <HAL_GetTick>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d901      	bls.n	8005ff0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e10c      	b.n	800620a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ff0:	4b6a      	ldr	r3, [pc, #424]	@ (800619c <HAL_RCC_OscConfig+0x474>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d0f0      	beq.n	8005fde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d106      	bne.n	8006012 <HAL_RCC_OscConfig+0x2ea>
 8006004:	4b64      	ldr	r3, [pc, #400]	@ (8006198 <HAL_RCC_OscConfig+0x470>)
 8006006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006008:	4a63      	ldr	r2, [pc, #396]	@ (8006198 <HAL_RCC_OscConfig+0x470>)
 800600a:	f043 0301 	orr.w	r3, r3, #1
 800600e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006010:	e01c      	b.n	800604c <HAL_RCC_OscConfig+0x324>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	2b05      	cmp	r3, #5
 8006018:	d10c      	bne.n	8006034 <HAL_RCC_OscConfig+0x30c>
 800601a:	4b5f      	ldr	r3, [pc, #380]	@ (8006198 <HAL_RCC_OscConfig+0x470>)
 800601c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800601e:	4a5e      	ldr	r2, [pc, #376]	@ (8006198 <HAL_RCC_OscConfig+0x470>)
 8006020:	f043 0304 	orr.w	r3, r3, #4
 8006024:	6713      	str	r3, [r2, #112]	@ 0x70
 8006026:	4b5c      	ldr	r3, [pc, #368]	@ (8006198 <HAL_RCC_OscConfig+0x470>)
 8006028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800602a:	4a5b      	ldr	r2, [pc, #364]	@ (8006198 <HAL_RCC_OscConfig+0x470>)
 800602c:	f043 0301 	orr.w	r3, r3, #1
 8006030:	6713      	str	r3, [r2, #112]	@ 0x70
 8006032:	e00b      	b.n	800604c <HAL_RCC_OscConfig+0x324>
 8006034:	4b58      	ldr	r3, [pc, #352]	@ (8006198 <HAL_RCC_OscConfig+0x470>)
 8006036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006038:	4a57      	ldr	r2, [pc, #348]	@ (8006198 <HAL_RCC_OscConfig+0x470>)
 800603a:	f023 0301 	bic.w	r3, r3, #1
 800603e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006040:	4b55      	ldr	r3, [pc, #340]	@ (8006198 <HAL_RCC_OscConfig+0x470>)
 8006042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006044:	4a54      	ldr	r2, [pc, #336]	@ (8006198 <HAL_RCC_OscConfig+0x470>)
 8006046:	f023 0304 	bic.w	r3, r3, #4
 800604a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d015      	beq.n	8006080 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006054:	f7fc fb18 	bl	8002688 <HAL_GetTick>
 8006058:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800605a:	e00a      	b.n	8006072 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800605c:	f7fc fb14 	bl	8002688 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800606a:	4293      	cmp	r3, r2
 800606c:	d901      	bls.n	8006072 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e0cb      	b.n	800620a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006072:	4b49      	ldr	r3, [pc, #292]	@ (8006198 <HAL_RCC_OscConfig+0x470>)
 8006074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d0ee      	beq.n	800605c <HAL_RCC_OscConfig+0x334>
 800607e:	e014      	b.n	80060aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006080:	f7fc fb02 	bl	8002688 <HAL_GetTick>
 8006084:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006086:	e00a      	b.n	800609e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006088:	f7fc fafe 	bl	8002688 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006096:	4293      	cmp	r3, r2
 8006098:	d901      	bls.n	800609e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e0b5      	b.n	800620a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800609e:	4b3e      	ldr	r3, [pc, #248]	@ (8006198 <HAL_RCC_OscConfig+0x470>)
 80060a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060a2:	f003 0302 	and.w	r3, r3, #2
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1ee      	bne.n	8006088 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80060aa:	7dfb      	ldrb	r3, [r7, #23]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d105      	bne.n	80060bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060b0:	4b39      	ldr	r3, [pc, #228]	@ (8006198 <HAL_RCC_OscConfig+0x470>)
 80060b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b4:	4a38      	ldr	r2, [pc, #224]	@ (8006198 <HAL_RCC_OscConfig+0x470>)
 80060b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f000 80a1 	beq.w	8006208 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060c6:	4b34      	ldr	r3, [pc, #208]	@ (8006198 <HAL_RCC_OscConfig+0x470>)
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f003 030c 	and.w	r3, r3, #12
 80060ce:	2b08      	cmp	r3, #8
 80060d0:	d05c      	beq.n	800618c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d141      	bne.n	800615e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060da:	4b31      	ldr	r3, [pc, #196]	@ (80061a0 <HAL_RCC_OscConfig+0x478>)
 80060dc:	2200      	movs	r2, #0
 80060de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060e0:	f7fc fad2 	bl	8002688 <HAL_GetTick>
 80060e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060e6:	e008      	b.n	80060fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060e8:	f7fc face 	bl	8002688 <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d901      	bls.n	80060fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e087      	b.n	800620a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060fa:	4b27      	ldr	r3, [pc, #156]	@ (8006198 <HAL_RCC_OscConfig+0x470>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1f0      	bne.n	80060e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	69da      	ldr	r2, [r3, #28]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	431a      	orrs	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006114:	019b      	lsls	r3, r3, #6
 8006116:	431a      	orrs	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800611c:	085b      	lsrs	r3, r3, #1
 800611e:	3b01      	subs	r3, #1
 8006120:	041b      	lsls	r3, r3, #16
 8006122:	431a      	orrs	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006128:	061b      	lsls	r3, r3, #24
 800612a:	491b      	ldr	r1, [pc, #108]	@ (8006198 <HAL_RCC_OscConfig+0x470>)
 800612c:	4313      	orrs	r3, r2
 800612e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006130:	4b1b      	ldr	r3, [pc, #108]	@ (80061a0 <HAL_RCC_OscConfig+0x478>)
 8006132:	2201      	movs	r2, #1
 8006134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006136:	f7fc faa7 	bl	8002688 <HAL_GetTick>
 800613a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800613c:	e008      	b.n	8006150 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800613e:	f7fc faa3 	bl	8002688 <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	2b02      	cmp	r3, #2
 800614a:	d901      	bls.n	8006150 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e05c      	b.n	800620a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006150:	4b11      	ldr	r3, [pc, #68]	@ (8006198 <HAL_RCC_OscConfig+0x470>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d0f0      	beq.n	800613e <HAL_RCC_OscConfig+0x416>
 800615c:	e054      	b.n	8006208 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800615e:	4b10      	ldr	r3, [pc, #64]	@ (80061a0 <HAL_RCC_OscConfig+0x478>)
 8006160:	2200      	movs	r2, #0
 8006162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006164:	f7fc fa90 	bl	8002688 <HAL_GetTick>
 8006168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800616a:	e008      	b.n	800617e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800616c:	f7fc fa8c 	bl	8002688 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	2b02      	cmp	r3, #2
 8006178:	d901      	bls.n	800617e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e045      	b.n	800620a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800617e:	4b06      	ldr	r3, [pc, #24]	@ (8006198 <HAL_RCC_OscConfig+0x470>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1f0      	bne.n	800616c <HAL_RCC_OscConfig+0x444>
 800618a:	e03d      	b.n	8006208 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d107      	bne.n	80061a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e038      	b.n	800620a <HAL_RCC_OscConfig+0x4e2>
 8006198:	40023800 	.word	0x40023800
 800619c:	40007000 	.word	0x40007000
 80061a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061a4:	4b1b      	ldr	r3, [pc, #108]	@ (8006214 <HAL_RCC_OscConfig+0x4ec>)
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d028      	beq.n	8006204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061bc:	429a      	cmp	r2, r3
 80061be:	d121      	bne.n	8006204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d11a      	bne.n	8006204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80061d4:	4013      	ands	r3, r2
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80061da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061dc:	4293      	cmp	r3, r2
 80061de:	d111      	bne.n	8006204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ea:	085b      	lsrs	r3, r3, #1
 80061ec:	3b01      	subs	r3, #1
 80061ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d107      	bne.n	8006204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006200:	429a      	cmp	r2, r3
 8006202:	d001      	beq.n	8006208 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e000      	b.n	800620a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3718      	adds	r7, #24
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	40023800 	.word	0x40023800

08006218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d101      	bne.n	800622c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e0cc      	b.n	80063c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800622c:	4b68      	ldr	r3, [pc, #416]	@ (80063d0 <HAL_RCC_ClockConfig+0x1b8>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 030f 	and.w	r3, r3, #15
 8006234:	683a      	ldr	r2, [r7, #0]
 8006236:	429a      	cmp	r2, r3
 8006238:	d90c      	bls.n	8006254 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800623a:	4b65      	ldr	r3, [pc, #404]	@ (80063d0 <HAL_RCC_ClockConfig+0x1b8>)
 800623c:	683a      	ldr	r2, [r7, #0]
 800623e:	b2d2      	uxtb	r2, r2
 8006240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006242:	4b63      	ldr	r3, [pc, #396]	@ (80063d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 030f 	and.w	r3, r3, #15
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	429a      	cmp	r2, r3
 800624e:	d001      	beq.n	8006254 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e0b8      	b.n	80063c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0302 	and.w	r3, r3, #2
 800625c:	2b00      	cmp	r3, #0
 800625e:	d020      	beq.n	80062a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0304 	and.w	r3, r3, #4
 8006268:	2b00      	cmp	r3, #0
 800626a:	d005      	beq.n	8006278 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800626c:	4b59      	ldr	r3, [pc, #356]	@ (80063d4 <HAL_RCC_ClockConfig+0x1bc>)
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	4a58      	ldr	r2, [pc, #352]	@ (80063d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006272:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006276:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0308 	and.w	r3, r3, #8
 8006280:	2b00      	cmp	r3, #0
 8006282:	d005      	beq.n	8006290 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006284:	4b53      	ldr	r3, [pc, #332]	@ (80063d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	4a52      	ldr	r2, [pc, #328]	@ (80063d4 <HAL_RCC_ClockConfig+0x1bc>)
 800628a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800628e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006290:	4b50      	ldr	r3, [pc, #320]	@ (80063d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	494d      	ldr	r1, [pc, #308]	@ (80063d4 <HAL_RCC_ClockConfig+0x1bc>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d044      	beq.n	8006338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d107      	bne.n	80062c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062b6:	4b47      	ldr	r3, [pc, #284]	@ (80063d4 <HAL_RCC_ClockConfig+0x1bc>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d119      	bne.n	80062f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e07f      	b.n	80063c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d003      	beq.n	80062d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062d2:	2b03      	cmp	r3, #3
 80062d4:	d107      	bne.n	80062e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062d6:	4b3f      	ldr	r3, [pc, #252]	@ (80063d4 <HAL_RCC_ClockConfig+0x1bc>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d109      	bne.n	80062f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e06f      	b.n	80063c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062e6:	4b3b      	ldr	r3, [pc, #236]	@ (80063d4 <HAL_RCC_ClockConfig+0x1bc>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e067      	b.n	80063c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062f6:	4b37      	ldr	r3, [pc, #220]	@ (80063d4 <HAL_RCC_ClockConfig+0x1bc>)
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f023 0203 	bic.w	r2, r3, #3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	4934      	ldr	r1, [pc, #208]	@ (80063d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006304:	4313      	orrs	r3, r2
 8006306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006308:	f7fc f9be 	bl	8002688 <HAL_GetTick>
 800630c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800630e:	e00a      	b.n	8006326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006310:	f7fc f9ba 	bl	8002688 <HAL_GetTick>
 8006314:	4602      	mov	r2, r0
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800631e:	4293      	cmp	r3, r2
 8006320:	d901      	bls.n	8006326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e04f      	b.n	80063c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006326:	4b2b      	ldr	r3, [pc, #172]	@ (80063d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f003 020c 	and.w	r2, r3, #12
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	429a      	cmp	r2, r3
 8006336:	d1eb      	bne.n	8006310 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006338:	4b25      	ldr	r3, [pc, #148]	@ (80063d0 <HAL_RCC_ClockConfig+0x1b8>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 030f 	and.w	r3, r3, #15
 8006340:	683a      	ldr	r2, [r7, #0]
 8006342:	429a      	cmp	r2, r3
 8006344:	d20c      	bcs.n	8006360 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006346:	4b22      	ldr	r3, [pc, #136]	@ (80063d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	b2d2      	uxtb	r2, r2
 800634c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800634e:	4b20      	ldr	r3, [pc, #128]	@ (80063d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 030f 	and.w	r3, r3, #15
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	429a      	cmp	r2, r3
 800635a:	d001      	beq.n	8006360 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e032      	b.n	80063c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0304 	and.w	r3, r3, #4
 8006368:	2b00      	cmp	r3, #0
 800636a:	d008      	beq.n	800637e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800636c:	4b19      	ldr	r3, [pc, #100]	@ (80063d4 <HAL_RCC_ClockConfig+0x1bc>)
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	4916      	ldr	r1, [pc, #88]	@ (80063d4 <HAL_RCC_ClockConfig+0x1bc>)
 800637a:	4313      	orrs	r3, r2
 800637c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0308 	and.w	r3, r3, #8
 8006386:	2b00      	cmp	r3, #0
 8006388:	d009      	beq.n	800639e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800638a:	4b12      	ldr	r3, [pc, #72]	@ (80063d4 <HAL_RCC_ClockConfig+0x1bc>)
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	00db      	lsls	r3, r3, #3
 8006398:	490e      	ldr	r1, [pc, #56]	@ (80063d4 <HAL_RCC_ClockConfig+0x1bc>)
 800639a:	4313      	orrs	r3, r2
 800639c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800639e:	f000 f821 	bl	80063e4 <HAL_RCC_GetSysClockFreq>
 80063a2:	4602      	mov	r2, r0
 80063a4:	4b0b      	ldr	r3, [pc, #44]	@ (80063d4 <HAL_RCC_ClockConfig+0x1bc>)
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	091b      	lsrs	r3, r3, #4
 80063aa:	f003 030f 	and.w	r3, r3, #15
 80063ae:	490a      	ldr	r1, [pc, #40]	@ (80063d8 <HAL_RCC_ClockConfig+0x1c0>)
 80063b0:	5ccb      	ldrb	r3, [r1, r3]
 80063b2:	fa22 f303 	lsr.w	r3, r2, r3
 80063b6:	4a09      	ldr	r2, [pc, #36]	@ (80063dc <HAL_RCC_ClockConfig+0x1c4>)
 80063b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80063ba:	4b09      	ldr	r3, [pc, #36]	@ (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4618      	mov	r0, r3
 80063c0:	f7fb ff42 	bl	8002248 <HAL_InitTick>

  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	40023c00 	.word	0x40023c00
 80063d4:	40023800 	.word	0x40023800
 80063d8:	0800ac74 	.word	0x0800ac74
 80063dc:	20000004 	.word	0x20000004
 80063e0:	20000008 	.word	0x20000008

080063e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063e8:	b094      	sub	sp, #80	@ 0x50
 80063ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80063ec:	2300      	movs	r3, #0
 80063ee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80063f0:	2300      	movs	r3, #0
 80063f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80063f4:	2300      	movs	r3, #0
 80063f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80063f8:	2300      	movs	r3, #0
 80063fa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063fc:	4b79      	ldr	r3, [pc, #484]	@ (80065e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f003 030c 	and.w	r3, r3, #12
 8006404:	2b08      	cmp	r3, #8
 8006406:	d00d      	beq.n	8006424 <HAL_RCC_GetSysClockFreq+0x40>
 8006408:	2b08      	cmp	r3, #8
 800640a:	f200 80e1 	bhi.w	80065d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800640e:	2b00      	cmp	r3, #0
 8006410:	d002      	beq.n	8006418 <HAL_RCC_GetSysClockFreq+0x34>
 8006412:	2b04      	cmp	r3, #4
 8006414:	d003      	beq.n	800641e <HAL_RCC_GetSysClockFreq+0x3a>
 8006416:	e0db      	b.n	80065d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006418:	4b73      	ldr	r3, [pc, #460]	@ (80065e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800641a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800641c:	e0db      	b.n	80065d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800641e:	4b73      	ldr	r3, [pc, #460]	@ (80065ec <HAL_RCC_GetSysClockFreq+0x208>)
 8006420:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006422:	e0d8      	b.n	80065d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006424:	4b6f      	ldr	r3, [pc, #444]	@ (80065e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800642c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800642e:	4b6d      	ldr	r3, [pc, #436]	@ (80065e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d063      	beq.n	8006502 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800643a:	4b6a      	ldr	r3, [pc, #424]	@ (80065e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	099b      	lsrs	r3, r3, #6
 8006440:	2200      	movs	r2, #0
 8006442:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006444:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800644c:	633b      	str	r3, [r7, #48]	@ 0x30
 800644e:	2300      	movs	r3, #0
 8006450:	637b      	str	r3, [r7, #52]	@ 0x34
 8006452:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006456:	4622      	mov	r2, r4
 8006458:	462b      	mov	r3, r5
 800645a:	f04f 0000 	mov.w	r0, #0
 800645e:	f04f 0100 	mov.w	r1, #0
 8006462:	0159      	lsls	r1, r3, #5
 8006464:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006468:	0150      	lsls	r0, r2, #5
 800646a:	4602      	mov	r2, r0
 800646c:	460b      	mov	r3, r1
 800646e:	4621      	mov	r1, r4
 8006470:	1a51      	subs	r1, r2, r1
 8006472:	6139      	str	r1, [r7, #16]
 8006474:	4629      	mov	r1, r5
 8006476:	eb63 0301 	sbc.w	r3, r3, r1
 800647a:	617b      	str	r3, [r7, #20]
 800647c:	f04f 0200 	mov.w	r2, #0
 8006480:	f04f 0300 	mov.w	r3, #0
 8006484:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006488:	4659      	mov	r1, fp
 800648a:	018b      	lsls	r3, r1, #6
 800648c:	4651      	mov	r1, sl
 800648e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006492:	4651      	mov	r1, sl
 8006494:	018a      	lsls	r2, r1, #6
 8006496:	4651      	mov	r1, sl
 8006498:	ebb2 0801 	subs.w	r8, r2, r1
 800649c:	4659      	mov	r1, fp
 800649e:	eb63 0901 	sbc.w	r9, r3, r1
 80064a2:	f04f 0200 	mov.w	r2, #0
 80064a6:	f04f 0300 	mov.w	r3, #0
 80064aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064b6:	4690      	mov	r8, r2
 80064b8:	4699      	mov	r9, r3
 80064ba:	4623      	mov	r3, r4
 80064bc:	eb18 0303 	adds.w	r3, r8, r3
 80064c0:	60bb      	str	r3, [r7, #8]
 80064c2:	462b      	mov	r3, r5
 80064c4:	eb49 0303 	adc.w	r3, r9, r3
 80064c8:	60fb      	str	r3, [r7, #12]
 80064ca:	f04f 0200 	mov.w	r2, #0
 80064ce:	f04f 0300 	mov.w	r3, #0
 80064d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80064d6:	4629      	mov	r1, r5
 80064d8:	024b      	lsls	r3, r1, #9
 80064da:	4621      	mov	r1, r4
 80064dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80064e0:	4621      	mov	r1, r4
 80064e2:	024a      	lsls	r2, r1, #9
 80064e4:	4610      	mov	r0, r2
 80064e6:	4619      	mov	r1, r3
 80064e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064ea:	2200      	movs	r2, #0
 80064ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80064f4:	f7fa fae8 	bl	8000ac8 <__aeabi_uldivmod>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	4613      	mov	r3, r2
 80064fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006500:	e058      	b.n	80065b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006502:	4b38      	ldr	r3, [pc, #224]	@ (80065e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	099b      	lsrs	r3, r3, #6
 8006508:	2200      	movs	r2, #0
 800650a:	4618      	mov	r0, r3
 800650c:	4611      	mov	r1, r2
 800650e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006512:	623b      	str	r3, [r7, #32]
 8006514:	2300      	movs	r3, #0
 8006516:	627b      	str	r3, [r7, #36]	@ 0x24
 8006518:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800651c:	4642      	mov	r2, r8
 800651e:	464b      	mov	r3, r9
 8006520:	f04f 0000 	mov.w	r0, #0
 8006524:	f04f 0100 	mov.w	r1, #0
 8006528:	0159      	lsls	r1, r3, #5
 800652a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800652e:	0150      	lsls	r0, r2, #5
 8006530:	4602      	mov	r2, r0
 8006532:	460b      	mov	r3, r1
 8006534:	4641      	mov	r1, r8
 8006536:	ebb2 0a01 	subs.w	sl, r2, r1
 800653a:	4649      	mov	r1, r9
 800653c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006540:	f04f 0200 	mov.w	r2, #0
 8006544:	f04f 0300 	mov.w	r3, #0
 8006548:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800654c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006550:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006554:	ebb2 040a 	subs.w	r4, r2, sl
 8006558:	eb63 050b 	sbc.w	r5, r3, fp
 800655c:	f04f 0200 	mov.w	r2, #0
 8006560:	f04f 0300 	mov.w	r3, #0
 8006564:	00eb      	lsls	r3, r5, #3
 8006566:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800656a:	00e2      	lsls	r2, r4, #3
 800656c:	4614      	mov	r4, r2
 800656e:	461d      	mov	r5, r3
 8006570:	4643      	mov	r3, r8
 8006572:	18e3      	adds	r3, r4, r3
 8006574:	603b      	str	r3, [r7, #0]
 8006576:	464b      	mov	r3, r9
 8006578:	eb45 0303 	adc.w	r3, r5, r3
 800657c:	607b      	str	r3, [r7, #4]
 800657e:	f04f 0200 	mov.w	r2, #0
 8006582:	f04f 0300 	mov.w	r3, #0
 8006586:	e9d7 4500 	ldrd	r4, r5, [r7]
 800658a:	4629      	mov	r1, r5
 800658c:	028b      	lsls	r3, r1, #10
 800658e:	4621      	mov	r1, r4
 8006590:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006594:	4621      	mov	r1, r4
 8006596:	028a      	lsls	r2, r1, #10
 8006598:	4610      	mov	r0, r2
 800659a:	4619      	mov	r1, r3
 800659c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800659e:	2200      	movs	r2, #0
 80065a0:	61bb      	str	r3, [r7, #24]
 80065a2:	61fa      	str	r2, [r7, #28]
 80065a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065a8:	f7fa fa8e 	bl	8000ac8 <__aeabi_uldivmod>
 80065ac:	4602      	mov	r2, r0
 80065ae:	460b      	mov	r3, r1
 80065b0:	4613      	mov	r3, r2
 80065b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80065b4:	4b0b      	ldr	r3, [pc, #44]	@ (80065e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	0c1b      	lsrs	r3, r3, #16
 80065ba:	f003 0303 	and.w	r3, r3, #3
 80065be:	3301      	adds	r3, #1
 80065c0:	005b      	lsls	r3, r3, #1
 80065c2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80065c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80065c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80065ce:	e002      	b.n	80065d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065d0:	4b05      	ldr	r3, [pc, #20]	@ (80065e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80065d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80065d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3750      	adds	r7, #80	@ 0x50
 80065dc:	46bd      	mov	sp, r7
 80065de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065e2:	bf00      	nop
 80065e4:	40023800 	.word	0x40023800
 80065e8:	00f42400 	.word	0x00f42400
 80065ec:	007a1200 	.word	0x007a1200

080065f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065f0:	b480      	push	{r7}
 80065f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065f4:	4b03      	ldr	r3, [pc, #12]	@ (8006604 <HAL_RCC_GetHCLKFreq+0x14>)
 80065f6:	681b      	ldr	r3, [r3, #0]
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	20000004 	.word	0x20000004

08006608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800660c:	f7ff fff0 	bl	80065f0 <HAL_RCC_GetHCLKFreq>
 8006610:	4602      	mov	r2, r0
 8006612:	4b05      	ldr	r3, [pc, #20]	@ (8006628 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	0a9b      	lsrs	r3, r3, #10
 8006618:	f003 0307 	and.w	r3, r3, #7
 800661c:	4903      	ldr	r1, [pc, #12]	@ (800662c <HAL_RCC_GetPCLK1Freq+0x24>)
 800661e:	5ccb      	ldrb	r3, [r1, r3]
 8006620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006624:	4618      	mov	r0, r3
 8006626:	bd80      	pop	{r7, pc}
 8006628:	40023800 	.word	0x40023800
 800662c:	0800ac84 	.word	0x0800ac84

08006630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006634:	f7ff ffdc 	bl	80065f0 <HAL_RCC_GetHCLKFreq>
 8006638:	4602      	mov	r2, r0
 800663a:	4b05      	ldr	r3, [pc, #20]	@ (8006650 <HAL_RCC_GetPCLK2Freq+0x20>)
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	0b5b      	lsrs	r3, r3, #13
 8006640:	f003 0307 	and.w	r3, r3, #7
 8006644:	4903      	ldr	r1, [pc, #12]	@ (8006654 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006646:	5ccb      	ldrb	r3, [r1, r3]
 8006648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800664c:	4618      	mov	r0, r3
 800664e:	bd80      	pop	{r7, pc}
 8006650:	40023800 	.word	0x40023800
 8006654:	0800ac84 	.word	0x0800ac84

08006658 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	220f      	movs	r2, #15
 8006666:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006668:	4b12      	ldr	r3, [pc, #72]	@ (80066b4 <HAL_RCC_GetClockConfig+0x5c>)
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	f003 0203 	and.w	r2, r3, #3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006674:	4b0f      	ldr	r3, [pc, #60]	@ (80066b4 <HAL_RCC_GetClockConfig+0x5c>)
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006680:	4b0c      	ldr	r3, [pc, #48]	@ (80066b4 <HAL_RCC_GetClockConfig+0x5c>)
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800668c:	4b09      	ldr	r3, [pc, #36]	@ (80066b4 <HAL_RCC_GetClockConfig+0x5c>)
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	08db      	lsrs	r3, r3, #3
 8006692:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800669a:	4b07      	ldr	r3, [pc, #28]	@ (80066b8 <HAL_RCC_GetClockConfig+0x60>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 020f 	and.w	r2, r3, #15
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	601a      	str	r2, [r3, #0]
}
 80066a6:	bf00      	nop
 80066a8:	370c      	adds	r7, #12
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	40023800 	.word	0x40023800
 80066b8:	40023c00 	.word	0x40023c00

080066bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80066c4:	2300      	movs	r3, #0
 80066c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80066c8:	2300      	movs	r3, #0
 80066ca:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0301 	and.w	r3, r3, #1
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10b      	bne.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d105      	bne.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d075      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80066f0:	4b91      	ldr	r3, [pc, #580]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80066f2:	2200      	movs	r2, #0
 80066f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066f6:	f7fb ffc7 	bl	8002688 <HAL_GetTick>
 80066fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066fc:	e008      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80066fe:	f7fb ffc3 	bl	8002688 <HAL_GetTick>
 8006702:	4602      	mov	r2, r0
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	2b02      	cmp	r3, #2
 800670a:	d901      	bls.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e189      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006710:	4b8a      	ldr	r3, [pc, #552]	@ (800693c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1f0      	bne.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0301 	and.w	r3, r3, #1
 8006724:	2b00      	cmp	r3, #0
 8006726:	d009      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	019a      	lsls	r2, r3, #6
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	071b      	lsls	r3, r3, #28
 8006734:	4981      	ldr	r1, [pc, #516]	@ (800693c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006736:	4313      	orrs	r3, r2
 8006738:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0302 	and.w	r3, r3, #2
 8006744:	2b00      	cmp	r3, #0
 8006746:	d01f      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006748:	4b7c      	ldr	r3, [pc, #496]	@ (800693c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800674a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800674e:	0f1b      	lsrs	r3, r3, #28
 8006750:	f003 0307 	and.w	r3, r3, #7
 8006754:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	019a      	lsls	r2, r3, #6
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	061b      	lsls	r3, r3, #24
 8006762:	431a      	orrs	r2, r3
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	071b      	lsls	r3, r3, #28
 8006768:	4974      	ldr	r1, [pc, #464]	@ (800693c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800676a:	4313      	orrs	r3, r2
 800676c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006770:	4b72      	ldr	r3, [pc, #456]	@ (800693c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006772:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006776:	f023 021f 	bic.w	r2, r3, #31
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	69db      	ldr	r3, [r3, #28]
 800677e:	3b01      	subs	r3, #1
 8006780:	496e      	ldr	r1, [pc, #440]	@ (800693c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006782:	4313      	orrs	r3, r2
 8006784:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00d      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	019a      	lsls	r2, r3, #6
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	061b      	lsls	r3, r3, #24
 80067a0:	431a      	orrs	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	071b      	lsls	r3, r3, #28
 80067a8:	4964      	ldr	r1, [pc, #400]	@ (800693c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067aa:	4313      	orrs	r3, r2
 80067ac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80067b0:	4b61      	ldr	r3, [pc, #388]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80067b2:	2201      	movs	r2, #1
 80067b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067b6:	f7fb ff67 	bl	8002688 <HAL_GetTick>
 80067ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067bc:	e008      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80067be:	f7fb ff63 	bl	8002688 <HAL_GetTick>
 80067c2:	4602      	mov	r2, r0
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d901      	bls.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e129      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067d0:	4b5a      	ldr	r3, [pc, #360]	@ (800693c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d0f0      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0304 	and.w	r3, r3, #4
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d105      	bne.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d079      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80067f4:	4b52      	ldr	r3, [pc, #328]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80067f6:	2200      	movs	r2, #0
 80067f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067fa:	f7fb ff45 	bl	8002688 <HAL_GetTick>
 80067fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006800:	e008      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006802:	f7fb ff41 	bl	8002688 <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	2b02      	cmp	r3, #2
 800680e:	d901      	bls.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e107      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006814:	4b49      	ldr	r3, [pc, #292]	@ (800693c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800681c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006820:	d0ef      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0304 	and.w	r3, r3, #4
 800682a:	2b00      	cmp	r3, #0
 800682c:	d020      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800682e:	4b43      	ldr	r3, [pc, #268]	@ (800693c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006834:	0f1b      	lsrs	r3, r3, #28
 8006836:	f003 0307 	and.w	r3, r3, #7
 800683a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	019a      	lsls	r2, r3, #6
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	061b      	lsls	r3, r3, #24
 8006848:	431a      	orrs	r2, r3
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	071b      	lsls	r3, r3, #28
 800684e:	493b      	ldr	r1, [pc, #236]	@ (800693c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006850:	4313      	orrs	r3, r2
 8006852:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006856:	4b39      	ldr	r3, [pc, #228]	@ (800693c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006858:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800685c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a1b      	ldr	r3, [r3, #32]
 8006864:	3b01      	subs	r3, #1
 8006866:	021b      	lsls	r3, r3, #8
 8006868:	4934      	ldr	r1, [pc, #208]	@ (800693c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800686a:	4313      	orrs	r3, r2
 800686c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0308 	and.w	r3, r3, #8
 8006878:	2b00      	cmp	r3, #0
 800687a:	d01e      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800687c:	4b2f      	ldr	r3, [pc, #188]	@ (800693c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800687e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006882:	0e1b      	lsrs	r3, r3, #24
 8006884:	f003 030f 	and.w	r3, r3, #15
 8006888:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	019a      	lsls	r2, r3, #6
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	061b      	lsls	r3, r3, #24
 8006894:	431a      	orrs	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	071b      	lsls	r3, r3, #28
 800689c:	4927      	ldr	r1, [pc, #156]	@ (800693c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80068a4:	4b25      	ldr	r3, [pc, #148]	@ (800693c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068aa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b2:	4922      	ldr	r1, [pc, #136]	@ (800693c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80068ba:	4b21      	ldr	r3, [pc, #132]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80068bc:	2201      	movs	r2, #1
 80068be:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068c0:	f7fb fee2 	bl	8002688 <HAL_GetTick>
 80068c4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80068c6:	e008      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80068c8:	f7fb fede 	bl	8002688 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d901      	bls.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e0a4      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80068da:	4b18      	ldr	r3, [pc, #96]	@ (800693c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068e6:	d1ef      	bne.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0320 	and.w	r3, r3, #32
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f000 808b 	beq.w	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80068f6:	2300      	movs	r3, #0
 80068f8:	60fb      	str	r3, [r7, #12]
 80068fa:	4b10      	ldr	r3, [pc, #64]	@ (800693c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068fe:	4a0f      	ldr	r2, [pc, #60]	@ (800693c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006904:	6413      	str	r3, [r2, #64]	@ 0x40
 8006906:	4b0d      	ldr	r3, [pc, #52]	@ (800693c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800690a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800690e:	60fb      	str	r3, [r7, #12]
 8006910:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006912:	4b0c      	ldr	r3, [pc, #48]	@ (8006944 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a0b      	ldr	r2, [pc, #44]	@ (8006944 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006918:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800691c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800691e:	f7fb feb3 	bl	8002688 <HAL_GetTick>
 8006922:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006924:	e010      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006926:	f7fb feaf 	bl	8002688 <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	2b02      	cmp	r3, #2
 8006932:	d909      	bls.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006934:	2303      	movs	r3, #3
 8006936:	e075      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006938:	42470068 	.word	0x42470068
 800693c:	40023800 	.word	0x40023800
 8006940:	42470070 	.word	0x42470070
 8006944:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006948:	4b38      	ldr	r3, [pc, #224]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006950:	2b00      	cmp	r3, #0
 8006952:	d0e8      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006954:	4b36      	ldr	r3, [pc, #216]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006958:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800695c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d02f      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006968:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	429a      	cmp	r2, r3
 8006970:	d028      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006972:	4b2f      	ldr	r3, [pc, #188]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006976:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800697a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800697c:	4b2d      	ldr	r3, [pc, #180]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800697e:	2201      	movs	r2, #1
 8006980:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006982:	4b2c      	ldr	r3, [pc, #176]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006984:	2200      	movs	r2, #0
 8006986:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006988:	4a29      	ldr	r2, [pc, #164]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800698e:	4b28      	ldr	r3, [pc, #160]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006992:	f003 0301 	and.w	r3, r3, #1
 8006996:	2b01      	cmp	r3, #1
 8006998:	d114      	bne.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800699a:	f7fb fe75 	bl	8002688 <HAL_GetTick>
 800699e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069a0:	e00a      	b.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069a2:	f7fb fe71 	bl	8002688 <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d901      	bls.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	e035      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069b8:	4b1d      	ldr	r3, [pc, #116]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80069ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069bc:	f003 0302 	and.w	r3, r3, #2
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d0ee      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069d0:	d10d      	bne.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x332>
 80069d2:	4b17      	ldr	r3, [pc, #92]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069de:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80069e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069e6:	4912      	ldr	r1, [pc, #72]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80069e8:	4313      	orrs	r3, r2
 80069ea:	608b      	str	r3, [r1, #8]
 80069ec:	e005      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80069ee:	4b10      	ldr	r3, [pc, #64]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	4a0f      	ldr	r2, [pc, #60]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80069f4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80069f8:	6093      	str	r3, [r2, #8]
 80069fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80069fc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a06:	490a      	ldr	r1, [pc, #40]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0310 	and.w	r3, r3, #16
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d004      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8006a1e:	4b06      	ldr	r3, [pc, #24]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006a20:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3718      	adds	r7, #24
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	40007000 	.word	0x40007000
 8006a30:	40023800 	.word	0x40023800
 8006a34:	42470e40 	.word	0x42470e40
 8006a38:	424711e0 	.word	0x424711e0

08006a3c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d101      	bne.n	8006a50 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e025      	b.n	8006a9c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d106      	bne.n	8006a6a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f7fa fb57 	bl	8001118 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2202      	movs	r2, #2
 8006a6e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	3304      	adds	r3, #4
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	4610      	mov	r0, r2
 8006a7e:	f001 fb3d 	bl	80080fc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6818      	ldr	r0, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	6839      	ldr	r1, [r7, #0]
 8006a8e:	f001 fb92 	bl	80081b6 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3708      	adds	r7, #8
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d101      	bne.n	8006ab6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e07b      	b.n	8006bae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d108      	bne.n	8006ad0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ac6:	d009      	beq.n	8006adc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	61da      	str	r2, [r3, #28]
 8006ace:	e005      	b.n	8006adc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d106      	bne.n	8006afc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7fb fb00 	bl	80020fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2202      	movs	r2, #2
 8006b00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006b24:	431a      	orrs	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b2e:	431a      	orrs	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	f003 0302 	and.w	r3, r3, #2
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	f003 0301 	and.w	r3, r3, #1
 8006b42:	431a      	orrs	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b4c:	431a      	orrs	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b56:	431a      	orrs	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a1b      	ldr	r3, [r3, #32]
 8006b5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b60:	ea42 0103 	orr.w	r1, r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b68:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	430a      	orrs	r2, r1
 8006b72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	0c1b      	lsrs	r3, r3, #16
 8006b7a:	f003 0104 	and.w	r1, r3, #4
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b82:	f003 0210 	and.w	r2, r3, #16
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	430a      	orrs	r2, r1
 8006b8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	69da      	ldr	r2, [r3, #28]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b088      	sub	sp, #32
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	60f8      	str	r0, [r7, #12]
 8006bbe:	60b9      	str	r1, [r7, #8]
 8006bc0:	603b      	str	r3, [r7, #0]
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bc6:	f7fb fd5f 	bl	8002688 <HAL_GetTick>
 8006bca:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006bcc:	88fb      	ldrh	r3, [r7, #6]
 8006bce:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d001      	beq.n	8006be0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006bdc:	2302      	movs	r3, #2
 8006bde:	e12a      	b.n	8006e36 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d002      	beq.n	8006bec <HAL_SPI_Transmit+0x36>
 8006be6:	88fb      	ldrh	r3, [r7, #6]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d101      	bne.n	8006bf0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e122      	b.n	8006e36 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d101      	bne.n	8006bfe <HAL_SPI_Transmit+0x48>
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	e11b      	b.n	8006e36 <HAL_SPI_Transmit+0x280>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2203      	movs	r2, #3
 8006c0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	68ba      	ldr	r2, [r7, #8]
 8006c18:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	88fa      	ldrh	r2, [r7, #6]
 8006c1e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	88fa      	ldrh	r2, [r7, #6]
 8006c24:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c4c:	d10f      	bne.n	8006c6e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c78:	2b40      	cmp	r3, #64	@ 0x40
 8006c7a:	d007      	beq.n	8006c8c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c94:	d152      	bne.n	8006d3c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d002      	beq.n	8006ca4 <HAL_SPI_Transmit+0xee>
 8006c9e:	8b7b      	ldrh	r3, [r7, #26]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d145      	bne.n	8006d30 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ca8:	881a      	ldrh	r2, [r3, #0]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cb4:	1c9a      	adds	r2, r3, #2
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006cc8:	e032      	b.n	8006d30 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	f003 0302 	and.w	r3, r3, #2
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d112      	bne.n	8006cfe <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cdc:	881a      	ldrh	r2, [r3, #0]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce8:	1c9a      	adds	r2, r3, #2
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006cfc:	e018      	b.n	8006d30 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cfe:	f7fb fcc3 	bl	8002688 <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	683a      	ldr	r2, [r7, #0]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d803      	bhi.n	8006d16 <HAL_SPI_Transmit+0x160>
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d14:	d102      	bne.n	8006d1c <HAL_SPI_Transmit+0x166>
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d109      	bne.n	8006d30 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	e082      	b.n	8006e36 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1c7      	bne.n	8006cca <HAL_SPI_Transmit+0x114>
 8006d3a:	e053      	b.n	8006de4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d002      	beq.n	8006d4a <HAL_SPI_Transmit+0x194>
 8006d44:	8b7b      	ldrh	r3, [r7, #26]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d147      	bne.n	8006dda <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	330c      	adds	r3, #12
 8006d54:	7812      	ldrb	r2, [r2, #0]
 8006d56:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d5c:	1c5a      	adds	r2, r3, #1
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	b29a      	uxth	r2, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006d70:	e033      	b.n	8006dda <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f003 0302 	and.w	r3, r3, #2
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d113      	bne.n	8006da8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	330c      	adds	r3, #12
 8006d8a:	7812      	ldrb	r2, [r2, #0]
 8006d8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d92:	1c5a      	adds	r2, r3, #1
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006da6:	e018      	b.n	8006dda <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006da8:	f7fb fc6e 	bl	8002688 <HAL_GetTick>
 8006dac:	4602      	mov	r2, r0
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	683a      	ldr	r2, [r7, #0]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d803      	bhi.n	8006dc0 <HAL_SPI_Transmit+0x20a>
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006dbe:	d102      	bne.n	8006dc6 <HAL_SPI_Transmit+0x210>
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d109      	bne.n	8006dda <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e02d      	b.n	8006e36 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1c6      	bne.n	8006d72 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006de4:	69fa      	ldr	r2, [r7, #28]
 8006de6:	6839      	ldr	r1, [r7, #0]
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f000 f9f9 	bl	80071e0 <SPI_EndRxTxTransaction>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d002      	beq.n	8006dfa <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2220      	movs	r2, #32
 8006df8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10a      	bne.n	8006e18 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e02:	2300      	movs	r3, #0
 8006e04:	617b      	str	r3, [r7, #20]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	617b      	str	r3, [r7, #20]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	617b      	str	r3, [r7, #20]
 8006e16:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d001      	beq.n	8006e34 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e000      	b.n	8006e36 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006e34:	2300      	movs	r3, #0
  }
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3720      	adds	r7, #32
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
	...

08006e40 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d001      	beq.n	8006e5e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8006e5a:	2302      	movs	r3, #2
 8006e5c:	e097      	b.n	8006f8e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d002      	beq.n	8006e6a <HAL_SPI_Transmit_DMA+0x2a>
 8006e64:	88fb      	ldrh	r3, [r7, #6]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e08f      	b.n	8006f8e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d101      	bne.n	8006e7c <HAL_SPI_Transmit_DMA+0x3c>
 8006e78:	2302      	movs	r3, #2
 8006e7a:	e088      	b.n	8006f8e <HAL_SPI_Transmit_DMA+0x14e>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2203      	movs	r2, #3
 8006e88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	88fa      	ldrh	r2, [r7, #6]
 8006e9c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	88fa      	ldrh	r2, [r7, #6]
 8006ea2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006eca:	d10f      	bne.n	8006eec <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006eda:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006eea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ef0:	4a29      	ldr	r2, [pc, #164]	@ (8006f98 <HAL_SPI_Transmit_DMA+0x158>)
 8006ef2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ef8:	4a28      	ldr	r2, [pc, #160]	@ (8006f9c <HAL_SPI_Transmit_DMA+0x15c>)
 8006efa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f00:	4a27      	ldr	r2, [pc, #156]	@ (8006fa0 <HAL_SPI_Transmit_DMA+0x160>)
 8006f02:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f08:	2200      	movs	r2, #0
 8006f0a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f14:	4619      	mov	r1, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	330c      	adds	r3, #12
 8006f1c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f22:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006f24:	f7fb fd8c 	bl	8002a40 <HAL_DMA_Start_IT>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00b      	beq.n	8006f46 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f32:	f043 0210 	orr.w	r2, r3, #16
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e023      	b.n	8006f8e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f50:	2b40      	cmp	r3, #64	@ 0x40
 8006f52:	d007      	beq.n	8006f64 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f62:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	685a      	ldr	r2, [r3, #4]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f042 0220 	orr.w	r2, r2, #32
 8006f7a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	685a      	ldr	r2, [r3, #4]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f042 0202 	orr.w	r2, r2, #2
 8006f8a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	08007075 	.word	0x08007075
 8006f9c:	08006fcd 	.word	0x08006fcd
 8006fa0:	08007091 	.word	0x08007091

08006fa4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fda:	f7fb fb55 	bl	8002688 <HAL_GetTick>
 8006fde:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fee:	d03b      	beq.n	8007068 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	685a      	ldr	r2, [r3, #4]
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f022 0220 	bic.w	r2, r2, #32
 8006ffe:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	685a      	ldr	r2, [r3, #4]
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f022 0202 	bic.w	r2, r2, #2
 800700e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	2164      	movs	r1, #100	@ 0x64
 8007014:	6978      	ldr	r0, [r7, #20]
 8007016:	f000 f8e3 	bl	80071e0 <SPI_EndRxTxTransaction>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d005      	beq.n	800702c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007024:	f043 0220 	orr.w	r2, r3, #32
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d10a      	bne.n	800704a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007034:	2300      	movs	r3, #0
 8007036:	60fb      	str	r3, [r7, #12]
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	60fb      	str	r3, [r7, #12]
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	60fb      	str	r3, [r7, #12]
 8007048:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	2200      	movs	r2, #0
 800704e:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800705c:	2b00      	cmp	r3, #0
 800705e:	d003      	beq.n	8007068 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007060:	6978      	ldr	r0, [r7, #20]
 8007062:	f7ff ffa9 	bl	8006fb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007066:	e002      	b.n	800706e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007068:	6978      	ldr	r0, [r7, #20]
 800706a:	f7fa ff2b 	bl	8001ec4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800706e:	3718      	adds	r7, #24
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007080:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f7ff ff8e 	bl	8006fa4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007088:	bf00      	nop
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800709c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	685a      	ldr	r2, [r3, #4]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f022 0203 	bic.w	r2, r2, #3
 80070ac:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070b2:	f043 0210 	orr.w	r2, r3, #16
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f7ff ff78 	bl	8006fb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80070c8:	bf00      	nop
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b088      	sub	sp, #32
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	603b      	str	r3, [r7, #0]
 80070dc:	4613      	mov	r3, r2
 80070de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80070e0:	f7fb fad2 	bl	8002688 <HAL_GetTick>
 80070e4:	4602      	mov	r2, r0
 80070e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e8:	1a9b      	subs	r3, r3, r2
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	4413      	add	r3, r2
 80070ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80070f0:	f7fb faca 	bl	8002688 <HAL_GetTick>
 80070f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80070f6:	4b39      	ldr	r3, [pc, #228]	@ (80071dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	015b      	lsls	r3, r3, #5
 80070fc:	0d1b      	lsrs	r3, r3, #20
 80070fe:	69fa      	ldr	r2, [r7, #28]
 8007100:	fb02 f303 	mul.w	r3, r2, r3
 8007104:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007106:	e054      	b.n	80071b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800710e:	d050      	beq.n	80071b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007110:	f7fb faba 	bl	8002688 <HAL_GetTick>
 8007114:	4602      	mov	r2, r0
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	69fa      	ldr	r2, [r7, #28]
 800711c:	429a      	cmp	r2, r3
 800711e:	d902      	bls.n	8007126 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d13d      	bne.n	80071a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	685a      	ldr	r2, [r3, #4]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007134:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800713e:	d111      	bne.n	8007164 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007148:	d004      	beq.n	8007154 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007152:	d107      	bne.n	8007164 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007162:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007168:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800716c:	d10f      	bne.n	800718e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800717c:	601a      	str	r2, [r3, #0]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800718c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2201      	movs	r2, #1
 8007192:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e017      	b.n	80071d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d101      	bne.n	80071ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80071a8:	2300      	movs	r3, #0
 80071aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	3b01      	subs	r3, #1
 80071b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	689a      	ldr	r2, [r3, #8]
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	4013      	ands	r3, r2
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	429a      	cmp	r2, r3
 80071c0:	bf0c      	ite	eq
 80071c2:	2301      	moveq	r3, #1
 80071c4:	2300      	movne	r3, #0
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	461a      	mov	r2, r3
 80071ca:	79fb      	ldrb	r3, [r7, #7]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d19b      	bne.n	8007108 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3720      	adds	r7, #32
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	20000004 	.word	0x20000004

080071e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b088      	sub	sp, #32
 80071e4:	af02      	add	r7, sp, #8
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	9300      	str	r3, [sp, #0]
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	2201      	movs	r2, #1
 80071f4:	2102      	movs	r1, #2
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f7ff ff6a 	bl	80070d0 <SPI_WaitFlagStateUntilTimeout>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d007      	beq.n	8007212 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007206:	f043 0220 	orr.w	r2, r3, #32
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e032      	b.n	8007278 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007212:	4b1b      	ldr	r3, [pc, #108]	@ (8007280 <SPI_EndRxTxTransaction+0xa0>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a1b      	ldr	r2, [pc, #108]	@ (8007284 <SPI_EndRxTxTransaction+0xa4>)
 8007218:	fba2 2303 	umull	r2, r3, r2, r3
 800721c:	0d5b      	lsrs	r3, r3, #21
 800721e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007222:	fb02 f303 	mul.w	r3, r2, r3
 8007226:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007230:	d112      	bne.n	8007258 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	2200      	movs	r2, #0
 800723a:	2180      	movs	r1, #128	@ 0x80
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f7ff ff47 	bl	80070d0 <SPI_WaitFlagStateUntilTimeout>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d016      	beq.n	8007276 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800724c:	f043 0220 	orr.w	r2, r3, #32
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	e00f      	b.n	8007278 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00a      	beq.n	8007274 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	3b01      	subs	r3, #1
 8007262:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800726e:	2b80      	cmp	r3, #128	@ 0x80
 8007270:	d0f2      	beq.n	8007258 <SPI_EndRxTxTransaction+0x78>
 8007272:	e000      	b.n	8007276 <SPI_EndRxTxTransaction+0x96>
        break;
 8007274:	bf00      	nop
  }

  return HAL_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3718      	adds	r7, #24
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	20000004 	.word	0x20000004
 8007284:	165e9f81 	.word	0x165e9f81

08007288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d101      	bne.n	800729a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e041      	b.n	800731e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d106      	bne.n	80072b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f7fb f8f6 	bl	80024a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2202      	movs	r2, #2
 80072b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	3304      	adds	r3, #4
 80072c4:	4619      	mov	r1, r3
 80072c6:	4610      	mov	r0, r2
 80072c8:	f000 fa7e 	bl	80077c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
	...

08007328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007336:	b2db      	uxtb	r3, r3
 8007338:	2b01      	cmp	r3, #1
 800733a:	d001      	beq.n	8007340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e04e      	b.n	80073de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2202      	movs	r2, #2
 8007344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68da      	ldr	r2, [r3, #12]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f042 0201 	orr.w	r2, r2, #1
 8007356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a23      	ldr	r2, [pc, #140]	@ (80073ec <HAL_TIM_Base_Start_IT+0xc4>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d022      	beq.n	80073a8 <HAL_TIM_Base_Start_IT+0x80>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800736a:	d01d      	beq.n	80073a8 <HAL_TIM_Base_Start_IT+0x80>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a1f      	ldr	r2, [pc, #124]	@ (80073f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d018      	beq.n	80073a8 <HAL_TIM_Base_Start_IT+0x80>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a1e      	ldr	r2, [pc, #120]	@ (80073f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d013      	beq.n	80073a8 <HAL_TIM_Base_Start_IT+0x80>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a1c      	ldr	r2, [pc, #112]	@ (80073f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d00e      	beq.n	80073a8 <HAL_TIM_Base_Start_IT+0x80>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a1b      	ldr	r2, [pc, #108]	@ (80073fc <HAL_TIM_Base_Start_IT+0xd4>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d009      	beq.n	80073a8 <HAL_TIM_Base_Start_IT+0x80>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a19      	ldr	r2, [pc, #100]	@ (8007400 <HAL_TIM_Base_Start_IT+0xd8>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d004      	beq.n	80073a8 <HAL_TIM_Base_Start_IT+0x80>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a18      	ldr	r2, [pc, #96]	@ (8007404 <HAL_TIM_Base_Start_IT+0xdc>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d111      	bne.n	80073cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	f003 0307 	and.w	r3, r3, #7
 80073b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2b06      	cmp	r3, #6
 80073b8:	d010      	beq.n	80073dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f042 0201 	orr.w	r2, r2, #1
 80073c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ca:	e007      	b.n	80073dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f042 0201 	orr.w	r2, r2, #1
 80073da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3714      	adds	r7, #20
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	40010000 	.word	0x40010000
 80073f0:	40000400 	.word	0x40000400
 80073f4:	40000800 	.word	0x40000800
 80073f8:	40000c00 	.word	0x40000c00
 80073fc:	40010400 	.word	0x40010400
 8007400:	40014000 	.word	0x40014000
 8007404:	40001800 	.word	0x40001800

08007408 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	f003 0302 	and.w	r3, r3, #2
 8007426:	2b00      	cmp	r3, #0
 8007428:	d020      	beq.n	800746c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f003 0302 	and.w	r3, r3, #2
 8007430:	2b00      	cmp	r3, #0
 8007432:	d01b      	beq.n	800746c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f06f 0202 	mvn.w	r2, #2
 800743c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	f003 0303 	and.w	r3, r3, #3
 800744e:	2b00      	cmp	r3, #0
 8007450:	d003      	beq.n	800745a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f999 	bl	800778a <HAL_TIM_IC_CaptureCallback>
 8007458:	e005      	b.n	8007466 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f98b 	bl	8007776 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 f99c 	bl	800779e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	f003 0304 	and.w	r3, r3, #4
 8007472:	2b00      	cmp	r3, #0
 8007474:	d020      	beq.n	80074b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f003 0304 	and.w	r3, r3, #4
 800747c:	2b00      	cmp	r3, #0
 800747e:	d01b      	beq.n	80074b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f06f 0204 	mvn.w	r2, #4
 8007488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2202      	movs	r2, #2
 800748e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	699b      	ldr	r3, [r3, #24]
 8007496:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800749a:	2b00      	cmp	r3, #0
 800749c:	d003      	beq.n	80074a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f973 	bl	800778a <HAL_TIM_IC_CaptureCallback>
 80074a4:	e005      	b.n	80074b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f965 	bl	8007776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 f976 	bl	800779e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	f003 0308 	and.w	r3, r3, #8
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d020      	beq.n	8007504 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f003 0308 	and.w	r3, r3, #8
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d01b      	beq.n	8007504 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f06f 0208 	mvn.w	r2, #8
 80074d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2204      	movs	r2, #4
 80074da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	69db      	ldr	r3, [r3, #28]
 80074e2:	f003 0303 	and.w	r3, r3, #3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d003      	beq.n	80074f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 f94d 	bl	800778a <HAL_TIM_IC_CaptureCallback>
 80074f0:	e005      	b.n	80074fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f93f 	bl	8007776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f950 	bl	800779e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	f003 0310 	and.w	r3, r3, #16
 800750a:	2b00      	cmp	r3, #0
 800750c:	d020      	beq.n	8007550 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f003 0310 	and.w	r3, r3, #16
 8007514:	2b00      	cmp	r3, #0
 8007516:	d01b      	beq.n	8007550 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f06f 0210 	mvn.w	r2, #16
 8007520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2208      	movs	r2, #8
 8007526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	69db      	ldr	r3, [r3, #28]
 800752e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007532:	2b00      	cmp	r3, #0
 8007534:	d003      	beq.n	800753e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f927 	bl	800778a <HAL_TIM_IC_CaptureCallback>
 800753c:	e005      	b.n	800754a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f919 	bl	8007776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 f92a 	bl	800779e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	f003 0301 	and.w	r3, r3, #1
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00c      	beq.n	8007574 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f003 0301 	and.w	r3, r3, #1
 8007560:	2b00      	cmp	r3, #0
 8007562:	d007      	beq.n	8007574 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f06f 0201 	mvn.w	r2, #1
 800756c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7fa fd76 	bl	8002060 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00c      	beq.n	8007598 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007584:	2b00      	cmp	r3, #0
 8007586:	d007      	beq.n	8007598 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 fae4 	bl	8007b60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00c      	beq.n	80075bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d007      	beq.n	80075bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80075b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f8fb 	bl	80077b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	f003 0320 	and.w	r3, r3, #32
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00c      	beq.n	80075e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f003 0320 	and.w	r3, r3, #32
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d007      	beq.n	80075e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f06f 0220 	mvn.w	r2, #32
 80075d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fab6 	bl	8007b4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075e0:	bf00      	nop
 80075e2:	3710      	adds	r7, #16
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075f2:	2300      	movs	r3, #0
 80075f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d101      	bne.n	8007604 <HAL_TIM_ConfigClockSource+0x1c>
 8007600:	2302      	movs	r3, #2
 8007602:	e0b4      	b.n	800776e <HAL_TIM_ConfigClockSource+0x186>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2202      	movs	r2, #2
 8007610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007622:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800762a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68ba      	ldr	r2, [r7, #8]
 8007632:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800763c:	d03e      	beq.n	80076bc <HAL_TIM_ConfigClockSource+0xd4>
 800763e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007642:	f200 8087 	bhi.w	8007754 <HAL_TIM_ConfigClockSource+0x16c>
 8007646:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800764a:	f000 8086 	beq.w	800775a <HAL_TIM_ConfigClockSource+0x172>
 800764e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007652:	d87f      	bhi.n	8007754 <HAL_TIM_ConfigClockSource+0x16c>
 8007654:	2b70      	cmp	r3, #112	@ 0x70
 8007656:	d01a      	beq.n	800768e <HAL_TIM_ConfigClockSource+0xa6>
 8007658:	2b70      	cmp	r3, #112	@ 0x70
 800765a:	d87b      	bhi.n	8007754 <HAL_TIM_ConfigClockSource+0x16c>
 800765c:	2b60      	cmp	r3, #96	@ 0x60
 800765e:	d050      	beq.n	8007702 <HAL_TIM_ConfigClockSource+0x11a>
 8007660:	2b60      	cmp	r3, #96	@ 0x60
 8007662:	d877      	bhi.n	8007754 <HAL_TIM_ConfigClockSource+0x16c>
 8007664:	2b50      	cmp	r3, #80	@ 0x50
 8007666:	d03c      	beq.n	80076e2 <HAL_TIM_ConfigClockSource+0xfa>
 8007668:	2b50      	cmp	r3, #80	@ 0x50
 800766a:	d873      	bhi.n	8007754 <HAL_TIM_ConfigClockSource+0x16c>
 800766c:	2b40      	cmp	r3, #64	@ 0x40
 800766e:	d058      	beq.n	8007722 <HAL_TIM_ConfigClockSource+0x13a>
 8007670:	2b40      	cmp	r3, #64	@ 0x40
 8007672:	d86f      	bhi.n	8007754 <HAL_TIM_ConfigClockSource+0x16c>
 8007674:	2b30      	cmp	r3, #48	@ 0x30
 8007676:	d064      	beq.n	8007742 <HAL_TIM_ConfigClockSource+0x15a>
 8007678:	2b30      	cmp	r3, #48	@ 0x30
 800767a:	d86b      	bhi.n	8007754 <HAL_TIM_ConfigClockSource+0x16c>
 800767c:	2b20      	cmp	r3, #32
 800767e:	d060      	beq.n	8007742 <HAL_TIM_ConfigClockSource+0x15a>
 8007680:	2b20      	cmp	r3, #32
 8007682:	d867      	bhi.n	8007754 <HAL_TIM_ConfigClockSource+0x16c>
 8007684:	2b00      	cmp	r3, #0
 8007686:	d05c      	beq.n	8007742 <HAL_TIM_ConfigClockSource+0x15a>
 8007688:	2b10      	cmp	r3, #16
 800768a:	d05a      	beq.n	8007742 <HAL_TIM_ConfigClockSource+0x15a>
 800768c:	e062      	b.n	8007754 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800769e:	f000 f9b9 	bl	8007a14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80076b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	609a      	str	r2, [r3, #8]
      break;
 80076ba:	e04f      	b.n	800775c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80076cc:	f000 f9a2 	bl	8007a14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	689a      	ldr	r2, [r3, #8]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80076de:	609a      	str	r2, [r3, #8]
      break;
 80076e0:	e03c      	b.n	800775c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076ee:	461a      	mov	r2, r3
 80076f0:	f000 f916 	bl	8007920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2150      	movs	r1, #80	@ 0x50
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 f96f 	bl	80079de <TIM_ITRx_SetConfig>
      break;
 8007700:	e02c      	b.n	800775c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800770e:	461a      	mov	r2, r3
 8007710:	f000 f935 	bl	800797e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2160      	movs	r1, #96	@ 0x60
 800771a:	4618      	mov	r0, r3
 800771c:	f000 f95f 	bl	80079de <TIM_ITRx_SetConfig>
      break;
 8007720:	e01c      	b.n	800775c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800772e:	461a      	mov	r2, r3
 8007730:	f000 f8f6 	bl	8007920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2140      	movs	r1, #64	@ 0x40
 800773a:	4618      	mov	r0, r3
 800773c:	f000 f94f 	bl	80079de <TIM_ITRx_SetConfig>
      break;
 8007740:	e00c      	b.n	800775c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4619      	mov	r1, r3
 800774c:	4610      	mov	r0, r2
 800774e:	f000 f946 	bl	80079de <TIM_ITRx_SetConfig>
      break;
 8007752:	e003      	b.n	800775c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	73fb      	strb	r3, [r7, #15]
      break;
 8007758:	e000      	b.n	800775c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800775a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800776c:	7bfb      	ldrb	r3, [r7, #15]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007776:	b480      	push	{r7}
 8007778:	b083      	sub	sp, #12
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800777e:	bf00      	nop
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800778a:	b480      	push	{r7}
 800778c:	b083      	sub	sp, #12
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007792:	bf00      	nop
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800779e:	b480      	push	{r7}
 80077a0:	b083      	sub	sp, #12
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077a6:	bf00      	nop
 80077a8:	370c      	adds	r7, #12
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr

080077b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077b2:	b480      	push	{r7}
 80077b4:	b083      	sub	sp, #12
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077ba:	bf00      	nop
 80077bc:	370c      	adds	r7, #12
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
	...

080077c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a46      	ldr	r2, [pc, #280]	@ (80078f4 <TIM_Base_SetConfig+0x12c>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d013      	beq.n	8007808 <TIM_Base_SetConfig+0x40>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077e6:	d00f      	beq.n	8007808 <TIM_Base_SetConfig+0x40>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a43      	ldr	r2, [pc, #268]	@ (80078f8 <TIM_Base_SetConfig+0x130>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d00b      	beq.n	8007808 <TIM_Base_SetConfig+0x40>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a42      	ldr	r2, [pc, #264]	@ (80078fc <TIM_Base_SetConfig+0x134>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d007      	beq.n	8007808 <TIM_Base_SetConfig+0x40>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a41      	ldr	r2, [pc, #260]	@ (8007900 <TIM_Base_SetConfig+0x138>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d003      	beq.n	8007808 <TIM_Base_SetConfig+0x40>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a40      	ldr	r2, [pc, #256]	@ (8007904 <TIM_Base_SetConfig+0x13c>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d108      	bne.n	800781a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800780e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	4313      	orrs	r3, r2
 8007818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a35      	ldr	r2, [pc, #212]	@ (80078f4 <TIM_Base_SetConfig+0x12c>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d02b      	beq.n	800787a <TIM_Base_SetConfig+0xb2>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007828:	d027      	beq.n	800787a <TIM_Base_SetConfig+0xb2>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a32      	ldr	r2, [pc, #200]	@ (80078f8 <TIM_Base_SetConfig+0x130>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d023      	beq.n	800787a <TIM_Base_SetConfig+0xb2>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a31      	ldr	r2, [pc, #196]	@ (80078fc <TIM_Base_SetConfig+0x134>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d01f      	beq.n	800787a <TIM_Base_SetConfig+0xb2>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a30      	ldr	r2, [pc, #192]	@ (8007900 <TIM_Base_SetConfig+0x138>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d01b      	beq.n	800787a <TIM_Base_SetConfig+0xb2>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a2f      	ldr	r2, [pc, #188]	@ (8007904 <TIM_Base_SetConfig+0x13c>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d017      	beq.n	800787a <TIM_Base_SetConfig+0xb2>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a2e      	ldr	r2, [pc, #184]	@ (8007908 <TIM_Base_SetConfig+0x140>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d013      	beq.n	800787a <TIM_Base_SetConfig+0xb2>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a2d      	ldr	r2, [pc, #180]	@ (800790c <TIM_Base_SetConfig+0x144>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d00f      	beq.n	800787a <TIM_Base_SetConfig+0xb2>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a2c      	ldr	r2, [pc, #176]	@ (8007910 <TIM_Base_SetConfig+0x148>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d00b      	beq.n	800787a <TIM_Base_SetConfig+0xb2>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a2b      	ldr	r2, [pc, #172]	@ (8007914 <TIM_Base_SetConfig+0x14c>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d007      	beq.n	800787a <TIM_Base_SetConfig+0xb2>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a2a      	ldr	r2, [pc, #168]	@ (8007918 <TIM_Base_SetConfig+0x150>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d003      	beq.n	800787a <TIM_Base_SetConfig+0xb2>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a29      	ldr	r2, [pc, #164]	@ (800791c <TIM_Base_SetConfig+0x154>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d108      	bne.n	800788c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	4313      	orrs	r3, r2
 800788a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	4313      	orrs	r3, r2
 8007898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	689a      	ldr	r2, [r3, #8]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a10      	ldr	r2, [pc, #64]	@ (80078f4 <TIM_Base_SetConfig+0x12c>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d003      	beq.n	80078c0 <TIM_Base_SetConfig+0xf8>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a12      	ldr	r2, [pc, #72]	@ (8007904 <TIM_Base_SetConfig+0x13c>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d103      	bne.n	80078c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	691a      	ldr	r2, [r3, #16]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	f003 0301 	and.w	r3, r3, #1
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d105      	bne.n	80078e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	f023 0201 	bic.w	r2, r3, #1
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	611a      	str	r2, [r3, #16]
  }
}
 80078e6:	bf00      	nop
 80078e8:	3714      	adds	r7, #20
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	40010000 	.word	0x40010000
 80078f8:	40000400 	.word	0x40000400
 80078fc:	40000800 	.word	0x40000800
 8007900:	40000c00 	.word	0x40000c00
 8007904:	40010400 	.word	0x40010400
 8007908:	40014000 	.word	0x40014000
 800790c:	40014400 	.word	0x40014400
 8007910:	40014800 	.word	0x40014800
 8007914:	40001800 	.word	0x40001800
 8007918:	40001c00 	.word	0x40001c00
 800791c:	40002000 	.word	0x40002000

08007920 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007920:	b480      	push	{r7}
 8007922:	b087      	sub	sp, #28
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6a1b      	ldr	r3, [r3, #32]
 8007930:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	f023 0201 	bic.w	r2, r3, #1
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800794a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	011b      	lsls	r3, r3, #4
 8007950:	693a      	ldr	r2, [r7, #16]
 8007952:	4313      	orrs	r3, r2
 8007954:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	f023 030a 	bic.w	r3, r3, #10
 800795c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	4313      	orrs	r3, r2
 8007964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	693a      	ldr	r2, [r7, #16]
 800796a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	697a      	ldr	r2, [r7, #20]
 8007970:	621a      	str	r2, [r3, #32]
}
 8007972:	bf00      	nop
 8007974:	371c      	adds	r7, #28
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr

0800797e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800797e:	b480      	push	{r7}
 8007980:	b087      	sub	sp, #28
 8007982:	af00      	add	r7, sp, #0
 8007984:	60f8      	str	r0, [r7, #12]
 8007986:	60b9      	str	r1, [r7, #8]
 8007988:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6a1b      	ldr	r3, [r3, #32]
 8007994:	f023 0210 	bic.w	r2, r3, #16
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	699b      	ldr	r3, [r3, #24]
 80079a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80079a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	031b      	lsls	r3, r3, #12
 80079ae:	693a      	ldr	r2, [r7, #16]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80079ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	011b      	lsls	r3, r3, #4
 80079c0:	697a      	ldr	r2, [r7, #20]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	693a      	ldr	r2, [r7, #16]
 80079ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	697a      	ldr	r2, [r7, #20]
 80079d0:	621a      	str	r2, [r3, #32]
}
 80079d2:	bf00      	nop
 80079d4:	371c      	adds	r7, #28
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079de:	b480      	push	{r7}
 80079e0:	b085      	sub	sp, #20
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
 80079e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079f6:	683a      	ldr	r2, [r7, #0]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	f043 0307 	orr.w	r3, r3, #7
 8007a00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	609a      	str	r2, [r3, #8]
}
 8007a08:	bf00      	nop
 8007a0a:	3714      	adds	r7, #20
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b087      	sub	sp, #28
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	607a      	str	r2, [r7, #4]
 8007a20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	021a      	lsls	r2, r3, #8
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	431a      	orrs	r2, r3
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	697a      	ldr	r2, [r7, #20]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	609a      	str	r2, [r3, #8]
}
 8007a48:	bf00      	nop
 8007a4a:	371c      	adds	r7, #28
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d101      	bne.n	8007a6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a68:	2302      	movs	r3, #2
 8007a6a:	e05a      	b.n	8007b22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2202      	movs	r2, #2
 8007a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a21      	ldr	r2, [pc, #132]	@ (8007b30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d022      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ab8:	d01d      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a1d      	ldr	r2, [pc, #116]	@ (8007b34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d018      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8007b38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d013      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a1a      	ldr	r2, [pc, #104]	@ (8007b3c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d00e      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a18      	ldr	r2, [pc, #96]	@ (8007b40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d009      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a17      	ldr	r2, [pc, #92]	@ (8007b44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d004      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a15      	ldr	r2, [pc, #84]	@ (8007b48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d10c      	bne.n	8007b10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007afc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	68ba      	ldr	r2, [r7, #8]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68ba      	ldr	r2, [r7, #8]
 8007b0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3714      	adds	r7, #20
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	40010000 	.word	0x40010000
 8007b34:	40000400 	.word	0x40000400
 8007b38:	40000800 	.word	0x40000800
 8007b3c:	40000c00 	.word	0x40000c00
 8007b40:	40010400 	.word	0x40010400
 8007b44:	40014000 	.word	0x40014000
 8007b48:	40001800 	.word	0x40001800

08007b4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d101      	bne.n	8007b86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e042      	b.n	8007c0c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d106      	bne.n	8007ba0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f7fa fccc 	bl	8002538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2224      	movs	r2, #36	@ 0x24
 8007ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68da      	ldr	r2, [r3, #12]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007bb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f82b 	bl	8007c14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	691a      	ldr	r2, [r3, #16]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007bcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	695a      	ldr	r2, [r3, #20]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007bdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	68da      	ldr	r2, [r3, #12]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007bec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2220      	movs	r2, #32
 8007bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2220      	movs	r2, #32
 8007c00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c18:	b0c0      	sub	sp, #256	@ 0x100
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c30:	68d9      	ldr	r1, [r3, #12]
 8007c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	ea40 0301 	orr.w	r3, r0, r1
 8007c3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c42:	689a      	ldr	r2, [r3, #8]
 8007c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	431a      	orrs	r2, r3
 8007c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c50:	695b      	ldr	r3, [r3, #20]
 8007c52:	431a      	orrs	r2, r3
 8007c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c58:	69db      	ldr	r3, [r3, #28]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007c6c:	f021 010c 	bic.w	r1, r1, #12
 8007c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007c7a:	430b      	orrs	r3, r1
 8007c7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	695b      	ldr	r3, [r3, #20]
 8007c86:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c8e:	6999      	ldr	r1, [r3, #24]
 8007c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	ea40 0301 	orr.w	r3, r0, r1
 8007c9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	4b8f      	ldr	r3, [pc, #572]	@ (8007ee0 <UART_SetConfig+0x2cc>)
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d005      	beq.n	8007cb4 <UART_SetConfig+0xa0>
 8007ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	4b8d      	ldr	r3, [pc, #564]	@ (8007ee4 <UART_SetConfig+0x2d0>)
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d104      	bne.n	8007cbe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007cb4:	f7fe fcbc 	bl	8006630 <HAL_RCC_GetPCLK2Freq>
 8007cb8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007cbc:	e003      	b.n	8007cc6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007cbe:	f7fe fca3 	bl	8006608 <HAL_RCC_GetPCLK1Freq>
 8007cc2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cca:	69db      	ldr	r3, [r3, #28]
 8007ccc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cd0:	f040 810c 	bne.w	8007eec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007cd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007cde:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007ce2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007ce6:	4622      	mov	r2, r4
 8007ce8:	462b      	mov	r3, r5
 8007cea:	1891      	adds	r1, r2, r2
 8007cec:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007cee:	415b      	adcs	r3, r3
 8007cf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007cf2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007cf6:	4621      	mov	r1, r4
 8007cf8:	eb12 0801 	adds.w	r8, r2, r1
 8007cfc:	4629      	mov	r1, r5
 8007cfe:	eb43 0901 	adc.w	r9, r3, r1
 8007d02:	f04f 0200 	mov.w	r2, #0
 8007d06:	f04f 0300 	mov.w	r3, #0
 8007d0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d16:	4690      	mov	r8, r2
 8007d18:	4699      	mov	r9, r3
 8007d1a:	4623      	mov	r3, r4
 8007d1c:	eb18 0303 	adds.w	r3, r8, r3
 8007d20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007d24:	462b      	mov	r3, r5
 8007d26:	eb49 0303 	adc.w	r3, r9, r3
 8007d2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007d3a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007d3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007d42:	460b      	mov	r3, r1
 8007d44:	18db      	adds	r3, r3, r3
 8007d46:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d48:	4613      	mov	r3, r2
 8007d4a:	eb42 0303 	adc.w	r3, r2, r3
 8007d4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007d54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007d58:	f7f8 feb6 	bl	8000ac8 <__aeabi_uldivmod>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	460b      	mov	r3, r1
 8007d60:	4b61      	ldr	r3, [pc, #388]	@ (8007ee8 <UART_SetConfig+0x2d4>)
 8007d62:	fba3 2302 	umull	r2, r3, r3, r2
 8007d66:	095b      	lsrs	r3, r3, #5
 8007d68:	011c      	lsls	r4, r3, #4
 8007d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d74:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007d78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007d7c:	4642      	mov	r2, r8
 8007d7e:	464b      	mov	r3, r9
 8007d80:	1891      	adds	r1, r2, r2
 8007d82:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007d84:	415b      	adcs	r3, r3
 8007d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007d8c:	4641      	mov	r1, r8
 8007d8e:	eb12 0a01 	adds.w	sl, r2, r1
 8007d92:	4649      	mov	r1, r9
 8007d94:	eb43 0b01 	adc.w	fp, r3, r1
 8007d98:	f04f 0200 	mov.w	r2, #0
 8007d9c:	f04f 0300 	mov.w	r3, #0
 8007da0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007da4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007da8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007dac:	4692      	mov	sl, r2
 8007dae:	469b      	mov	fp, r3
 8007db0:	4643      	mov	r3, r8
 8007db2:	eb1a 0303 	adds.w	r3, sl, r3
 8007db6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007dba:	464b      	mov	r3, r9
 8007dbc:	eb4b 0303 	adc.w	r3, fp, r3
 8007dc0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007dd0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007dd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007dd8:	460b      	mov	r3, r1
 8007dda:	18db      	adds	r3, r3, r3
 8007ddc:	643b      	str	r3, [r7, #64]	@ 0x40
 8007dde:	4613      	mov	r3, r2
 8007de0:	eb42 0303 	adc.w	r3, r2, r3
 8007de4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007de6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007dea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007dee:	f7f8 fe6b 	bl	8000ac8 <__aeabi_uldivmod>
 8007df2:	4602      	mov	r2, r0
 8007df4:	460b      	mov	r3, r1
 8007df6:	4611      	mov	r1, r2
 8007df8:	4b3b      	ldr	r3, [pc, #236]	@ (8007ee8 <UART_SetConfig+0x2d4>)
 8007dfa:	fba3 2301 	umull	r2, r3, r3, r1
 8007dfe:	095b      	lsrs	r3, r3, #5
 8007e00:	2264      	movs	r2, #100	@ 0x64
 8007e02:	fb02 f303 	mul.w	r3, r2, r3
 8007e06:	1acb      	subs	r3, r1, r3
 8007e08:	00db      	lsls	r3, r3, #3
 8007e0a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007e0e:	4b36      	ldr	r3, [pc, #216]	@ (8007ee8 <UART_SetConfig+0x2d4>)
 8007e10:	fba3 2302 	umull	r2, r3, r3, r2
 8007e14:	095b      	lsrs	r3, r3, #5
 8007e16:	005b      	lsls	r3, r3, #1
 8007e18:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007e1c:	441c      	add	r4, r3
 8007e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e22:	2200      	movs	r2, #0
 8007e24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e28:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007e2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007e30:	4642      	mov	r2, r8
 8007e32:	464b      	mov	r3, r9
 8007e34:	1891      	adds	r1, r2, r2
 8007e36:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007e38:	415b      	adcs	r3, r3
 8007e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007e40:	4641      	mov	r1, r8
 8007e42:	1851      	adds	r1, r2, r1
 8007e44:	6339      	str	r1, [r7, #48]	@ 0x30
 8007e46:	4649      	mov	r1, r9
 8007e48:	414b      	adcs	r3, r1
 8007e4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e4c:	f04f 0200 	mov.w	r2, #0
 8007e50:	f04f 0300 	mov.w	r3, #0
 8007e54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007e58:	4659      	mov	r1, fp
 8007e5a:	00cb      	lsls	r3, r1, #3
 8007e5c:	4651      	mov	r1, sl
 8007e5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e62:	4651      	mov	r1, sl
 8007e64:	00ca      	lsls	r2, r1, #3
 8007e66:	4610      	mov	r0, r2
 8007e68:	4619      	mov	r1, r3
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	4642      	mov	r2, r8
 8007e6e:	189b      	adds	r3, r3, r2
 8007e70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e74:	464b      	mov	r3, r9
 8007e76:	460a      	mov	r2, r1
 8007e78:	eb42 0303 	adc.w	r3, r2, r3
 8007e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007e8c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007e90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007e94:	460b      	mov	r3, r1
 8007e96:	18db      	adds	r3, r3, r3
 8007e98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	eb42 0303 	adc.w	r3, r2, r3
 8007ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ea2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007ea6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007eaa:	f7f8 fe0d 	bl	8000ac8 <__aeabi_uldivmod>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8007ee8 <UART_SetConfig+0x2d4>)
 8007eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8007eb8:	095b      	lsrs	r3, r3, #5
 8007eba:	2164      	movs	r1, #100	@ 0x64
 8007ebc:	fb01 f303 	mul.w	r3, r1, r3
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	00db      	lsls	r3, r3, #3
 8007ec4:	3332      	adds	r3, #50	@ 0x32
 8007ec6:	4a08      	ldr	r2, [pc, #32]	@ (8007ee8 <UART_SetConfig+0x2d4>)
 8007ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8007ecc:	095b      	lsrs	r3, r3, #5
 8007ece:	f003 0207 	and.w	r2, r3, #7
 8007ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4422      	add	r2, r4
 8007eda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007edc:	e106      	b.n	80080ec <UART_SetConfig+0x4d8>
 8007ede:	bf00      	nop
 8007ee0:	40011000 	.word	0x40011000
 8007ee4:	40011400 	.word	0x40011400
 8007ee8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007eec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007ef6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007efa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007efe:	4642      	mov	r2, r8
 8007f00:	464b      	mov	r3, r9
 8007f02:	1891      	adds	r1, r2, r2
 8007f04:	6239      	str	r1, [r7, #32]
 8007f06:	415b      	adcs	r3, r3
 8007f08:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f0e:	4641      	mov	r1, r8
 8007f10:	1854      	adds	r4, r2, r1
 8007f12:	4649      	mov	r1, r9
 8007f14:	eb43 0501 	adc.w	r5, r3, r1
 8007f18:	f04f 0200 	mov.w	r2, #0
 8007f1c:	f04f 0300 	mov.w	r3, #0
 8007f20:	00eb      	lsls	r3, r5, #3
 8007f22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f26:	00e2      	lsls	r2, r4, #3
 8007f28:	4614      	mov	r4, r2
 8007f2a:	461d      	mov	r5, r3
 8007f2c:	4643      	mov	r3, r8
 8007f2e:	18e3      	adds	r3, r4, r3
 8007f30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f34:	464b      	mov	r3, r9
 8007f36:	eb45 0303 	adc.w	r3, r5, r3
 8007f3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007f4e:	f04f 0200 	mov.w	r2, #0
 8007f52:	f04f 0300 	mov.w	r3, #0
 8007f56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007f5a:	4629      	mov	r1, r5
 8007f5c:	008b      	lsls	r3, r1, #2
 8007f5e:	4621      	mov	r1, r4
 8007f60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f64:	4621      	mov	r1, r4
 8007f66:	008a      	lsls	r2, r1, #2
 8007f68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007f6c:	f7f8 fdac 	bl	8000ac8 <__aeabi_uldivmod>
 8007f70:	4602      	mov	r2, r0
 8007f72:	460b      	mov	r3, r1
 8007f74:	4b60      	ldr	r3, [pc, #384]	@ (80080f8 <UART_SetConfig+0x4e4>)
 8007f76:	fba3 2302 	umull	r2, r3, r3, r2
 8007f7a:	095b      	lsrs	r3, r3, #5
 8007f7c:	011c      	lsls	r4, r3, #4
 8007f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f82:	2200      	movs	r2, #0
 8007f84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007f88:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007f8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007f90:	4642      	mov	r2, r8
 8007f92:	464b      	mov	r3, r9
 8007f94:	1891      	adds	r1, r2, r2
 8007f96:	61b9      	str	r1, [r7, #24]
 8007f98:	415b      	adcs	r3, r3
 8007f9a:	61fb      	str	r3, [r7, #28]
 8007f9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007fa0:	4641      	mov	r1, r8
 8007fa2:	1851      	adds	r1, r2, r1
 8007fa4:	6139      	str	r1, [r7, #16]
 8007fa6:	4649      	mov	r1, r9
 8007fa8:	414b      	adcs	r3, r1
 8007faa:	617b      	str	r3, [r7, #20]
 8007fac:	f04f 0200 	mov.w	r2, #0
 8007fb0:	f04f 0300 	mov.w	r3, #0
 8007fb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007fb8:	4659      	mov	r1, fp
 8007fba:	00cb      	lsls	r3, r1, #3
 8007fbc:	4651      	mov	r1, sl
 8007fbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fc2:	4651      	mov	r1, sl
 8007fc4:	00ca      	lsls	r2, r1, #3
 8007fc6:	4610      	mov	r0, r2
 8007fc8:	4619      	mov	r1, r3
 8007fca:	4603      	mov	r3, r0
 8007fcc:	4642      	mov	r2, r8
 8007fce:	189b      	adds	r3, r3, r2
 8007fd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007fd4:	464b      	mov	r3, r9
 8007fd6:	460a      	mov	r2, r1
 8007fd8:	eb42 0303 	adc.w	r3, r2, r3
 8007fdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007fea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007fec:	f04f 0200 	mov.w	r2, #0
 8007ff0:	f04f 0300 	mov.w	r3, #0
 8007ff4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007ff8:	4649      	mov	r1, r9
 8007ffa:	008b      	lsls	r3, r1, #2
 8007ffc:	4641      	mov	r1, r8
 8007ffe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008002:	4641      	mov	r1, r8
 8008004:	008a      	lsls	r2, r1, #2
 8008006:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800800a:	f7f8 fd5d 	bl	8000ac8 <__aeabi_uldivmod>
 800800e:	4602      	mov	r2, r0
 8008010:	460b      	mov	r3, r1
 8008012:	4611      	mov	r1, r2
 8008014:	4b38      	ldr	r3, [pc, #224]	@ (80080f8 <UART_SetConfig+0x4e4>)
 8008016:	fba3 2301 	umull	r2, r3, r3, r1
 800801a:	095b      	lsrs	r3, r3, #5
 800801c:	2264      	movs	r2, #100	@ 0x64
 800801e:	fb02 f303 	mul.w	r3, r2, r3
 8008022:	1acb      	subs	r3, r1, r3
 8008024:	011b      	lsls	r3, r3, #4
 8008026:	3332      	adds	r3, #50	@ 0x32
 8008028:	4a33      	ldr	r2, [pc, #204]	@ (80080f8 <UART_SetConfig+0x4e4>)
 800802a:	fba2 2303 	umull	r2, r3, r2, r3
 800802e:	095b      	lsrs	r3, r3, #5
 8008030:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008034:	441c      	add	r4, r3
 8008036:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800803a:	2200      	movs	r2, #0
 800803c:	673b      	str	r3, [r7, #112]	@ 0x70
 800803e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008040:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008044:	4642      	mov	r2, r8
 8008046:	464b      	mov	r3, r9
 8008048:	1891      	adds	r1, r2, r2
 800804a:	60b9      	str	r1, [r7, #8]
 800804c:	415b      	adcs	r3, r3
 800804e:	60fb      	str	r3, [r7, #12]
 8008050:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008054:	4641      	mov	r1, r8
 8008056:	1851      	adds	r1, r2, r1
 8008058:	6039      	str	r1, [r7, #0]
 800805a:	4649      	mov	r1, r9
 800805c:	414b      	adcs	r3, r1
 800805e:	607b      	str	r3, [r7, #4]
 8008060:	f04f 0200 	mov.w	r2, #0
 8008064:	f04f 0300 	mov.w	r3, #0
 8008068:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800806c:	4659      	mov	r1, fp
 800806e:	00cb      	lsls	r3, r1, #3
 8008070:	4651      	mov	r1, sl
 8008072:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008076:	4651      	mov	r1, sl
 8008078:	00ca      	lsls	r2, r1, #3
 800807a:	4610      	mov	r0, r2
 800807c:	4619      	mov	r1, r3
 800807e:	4603      	mov	r3, r0
 8008080:	4642      	mov	r2, r8
 8008082:	189b      	adds	r3, r3, r2
 8008084:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008086:	464b      	mov	r3, r9
 8008088:	460a      	mov	r2, r1
 800808a:	eb42 0303 	adc.w	r3, r2, r3
 800808e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	663b      	str	r3, [r7, #96]	@ 0x60
 800809a:	667a      	str	r2, [r7, #100]	@ 0x64
 800809c:	f04f 0200 	mov.w	r2, #0
 80080a0:	f04f 0300 	mov.w	r3, #0
 80080a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80080a8:	4649      	mov	r1, r9
 80080aa:	008b      	lsls	r3, r1, #2
 80080ac:	4641      	mov	r1, r8
 80080ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080b2:	4641      	mov	r1, r8
 80080b4:	008a      	lsls	r2, r1, #2
 80080b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80080ba:	f7f8 fd05 	bl	8000ac8 <__aeabi_uldivmod>
 80080be:	4602      	mov	r2, r0
 80080c0:	460b      	mov	r3, r1
 80080c2:	4b0d      	ldr	r3, [pc, #52]	@ (80080f8 <UART_SetConfig+0x4e4>)
 80080c4:	fba3 1302 	umull	r1, r3, r3, r2
 80080c8:	095b      	lsrs	r3, r3, #5
 80080ca:	2164      	movs	r1, #100	@ 0x64
 80080cc:	fb01 f303 	mul.w	r3, r1, r3
 80080d0:	1ad3      	subs	r3, r2, r3
 80080d2:	011b      	lsls	r3, r3, #4
 80080d4:	3332      	adds	r3, #50	@ 0x32
 80080d6:	4a08      	ldr	r2, [pc, #32]	@ (80080f8 <UART_SetConfig+0x4e4>)
 80080d8:	fba2 2303 	umull	r2, r3, r2, r3
 80080dc:	095b      	lsrs	r3, r3, #5
 80080de:	f003 020f 	and.w	r2, r3, #15
 80080e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4422      	add	r2, r4
 80080ea:	609a      	str	r2, [r3, #8]
}
 80080ec:	bf00      	nop
 80080ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80080f2:	46bd      	mov	sp, r7
 80080f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080f8:	51eb851f 	.word	0x51eb851f

080080fc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d123      	bne.n	8008156 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8008116:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800811a:	683a      	ldr	r2, [r7, #0]
 800811c:	6851      	ldr	r1, [r2, #4]
 800811e:	683a      	ldr	r2, [r7, #0]
 8008120:	6892      	ldr	r2, [r2, #8]
 8008122:	4311      	orrs	r1, r2
 8008124:	683a      	ldr	r2, [r7, #0]
 8008126:	68d2      	ldr	r2, [r2, #12]
 8008128:	4311      	orrs	r1, r2
 800812a:	683a      	ldr	r2, [r7, #0]
 800812c:	6912      	ldr	r2, [r2, #16]
 800812e:	4311      	orrs	r1, r2
 8008130:	683a      	ldr	r2, [r7, #0]
 8008132:	6952      	ldr	r2, [r2, #20]
 8008134:	4311      	orrs	r1, r2
 8008136:	683a      	ldr	r2, [r7, #0]
 8008138:	6992      	ldr	r2, [r2, #24]
 800813a:	4311      	orrs	r1, r2
 800813c:	683a      	ldr	r2, [r7, #0]
 800813e:	69d2      	ldr	r2, [r2, #28]
 8008140:	4311      	orrs	r1, r2
 8008142:	683a      	ldr	r2, [r7, #0]
 8008144:	6a12      	ldr	r2, [r2, #32]
 8008146:	4311      	orrs	r1, r2
 8008148:	683a      	ldr	r2, [r7, #0]
 800814a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800814c:	430a      	orrs	r2, r1
 800814e:	431a      	orrs	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	601a      	str	r2, [r3, #0]
 8008154:	e028      	b.n	80081a8 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	69d9      	ldr	r1, [r3, #28]
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	6a1b      	ldr	r3, [r3, #32]
 8008166:	4319      	orrs	r1, r3
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800816c:	430b      	orrs	r3, r1
 800816e:	431a      	orrs	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800817c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008180:	683a      	ldr	r2, [r7, #0]
 8008182:	6851      	ldr	r1, [r2, #4]
 8008184:	683a      	ldr	r2, [r7, #0]
 8008186:	6892      	ldr	r2, [r2, #8]
 8008188:	4311      	orrs	r1, r2
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	68d2      	ldr	r2, [r2, #12]
 800818e:	4311      	orrs	r1, r2
 8008190:	683a      	ldr	r2, [r7, #0]
 8008192:	6912      	ldr	r2, [r2, #16]
 8008194:	4311      	orrs	r1, r2
 8008196:	683a      	ldr	r2, [r7, #0]
 8008198:	6952      	ldr	r2, [r2, #20]
 800819a:	4311      	orrs	r1, r2
 800819c:	683a      	ldr	r2, [r7, #0]
 800819e:	6992      	ldr	r2, [r2, #24]
 80081a0:	430a      	orrs	r2, r1
 80081a2:	431a      	orrs	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	370c      	adds	r7, #12
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr

080081b6 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80081b6:	b480      	push	{r7}
 80081b8:	b085      	sub	sp, #20
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	60f8      	str	r0, [r7, #12]
 80081be:	60b9      	str	r1, [r7, #8]
 80081c0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d128      	bne.n	800821a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	1e59      	subs	r1, r3, #1
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	3b01      	subs	r3, #1
 80081dc:	011b      	lsls	r3, r3, #4
 80081de:	4319      	orrs	r1, r3
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	3b01      	subs	r3, #1
 80081e6:	021b      	lsls	r3, r3, #8
 80081e8:	4319      	orrs	r1, r3
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	3b01      	subs	r3, #1
 80081f0:	031b      	lsls	r3, r3, #12
 80081f2:	4319      	orrs	r1, r3
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	3b01      	subs	r3, #1
 80081fa:	041b      	lsls	r3, r3, #16
 80081fc:	4319      	orrs	r1, r3
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	695b      	ldr	r3, [r3, #20]
 8008202:	3b01      	subs	r3, #1
 8008204:	051b      	lsls	r3, r3, #20
 8008206:	4319      	orrs	r1, r3
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	699b      	ldr	r3, [r3, #24]
 800820c:	3b01      	subs	r3, #1
 800820e:	061b      	lsls	r3, r3, #24
 8008210:	430b      	orrs	r3, r1
 8008212:	431a      	orrs	r2, r3
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	609a      	str	r2, [r3, #8]
 8008218:	e02f      	b.n	800827a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008222:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	68d2      	ldr	r2, [r2, #12]
 800822a:	3a01      	subs	r2, #1
 800822c:	0311      	lsls	r1, r2, #12
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	6952      	ldr	r2, [r2, #20]
 8008232:	3a01      	subs	r2, #1
 8008234:	0512      	lsls	r2, r2, #20
 8008236:	430a      	orrs	r2, r1
 8008238:	431a      	orrs	r2, r3
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	1e59      	subs	r1, r3, #1
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	3b01      	subs	r3, #1
 8008252:	011b      	lsls	r3, r3, #4
 8008254:	4319      	orrs	r1, r3
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	3b01      	subs	r3, #1
 800825c:	021b      	lsls	r3, r3, #8
 800825e:	4319      	orrs	r1, r3
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	3b01      	subs	r3, #1
 8008266:	041b      	lsls	r3, r3, #16
 8008268:	4319      	orrs	r1, r3
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	699b      	ldr	r3, [r3, #24]
 800826e:	3b01      	subs	r3, #1
 8008270:	061b      	lsls	r3, r3, #24
 8008272:	430b      	orrs	r3, r1
 8008274:	431a      	orrs	r2, r3
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3714      	adds	r7, #20
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	f043 0201 	orr.w	r2, r3, #1
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	370c      	adds	r7, #12
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr

080082aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082aa:	b480      	push	{r7}
 80082ac:	b083      	sub	sp, #12
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	f023 0201 	bic.w	r2, r3, #1
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b085      	sub	sp, #20
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80082d6:	2300      	movs	r3, #0
 80082d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	3301      	adds	r3, #1
 80082de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082e6:	d901      	bls.n	80082ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80082e8:	2303      	movs	r3, #3
 80082ea:	e01b      	b.n	8008324 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	daf2      	bge.n	80082da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80082f4:	2300      	movs	r3, #0
 80082f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	019b      	lsls	r3, r3, #6
 80082fc:	f043 0220 	orr.w	r2, r3, #32
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	3301      	adds	r3, #1
 8008308:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008310:	d901      	bls.n	8008316 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008312:	2303      	movs	r3, #3
 8008314:	e006      	b.n	8008324 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	691b      	ldr	r3, [r3, #16]
 800831a:	f003 0320 	and.w	r3, r3, #32
 800831e:	2b20      	cmp	r3, #32
 8008320:	d0f0      	beq.n	8008304 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	3714      	adds	r7, #20
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008338:	2300      	movs	r3, #0
 800833a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	3301      	adds	r3, #1
 8008340:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008348:	d901      	bls.n	800834e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800834a:	2303      	movs	r3, #3
 800834c:	e018      	b.n	8008380 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	2b00      	cmp	r3, #0
 8008354:	daf2      	bge.n	800833c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008356:	2300      	movs	r3, #0
 8008358:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2210      	movs	r2, #16
 800835e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	3301      	adds	r3, #1
 8008364:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800836c:	d901      	bls.n	8008372 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800836e:	2303      	movs	r3, #3
 8008370:	e006      	b.n	8008380 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	f003 0310 	and.w	r3, r3, #16
 800837a:	2b10      	cmp	r3, #16
 800837c:	d0f0      	beq.n	8008360 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3714      	adds	r7, #20
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800838c:	b480      	push	{r7}
 800838e:	b08b      	sub	sp, #44	@ 0x2c
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	4613      	mov	r3, r2
 8008398:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80083a2:	88fb      	ldrh	r3, [r7, #6]
 80083a4:	089b      	lsrs	r3, r3, #2
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80083aa:	88fb      	ldrh	r3, [r7, #6]
 80083ac:	f003 0303 	and.w	r3, r3, #3
 80083b0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80083b2:	2300      	movs	r3, #0
 80083b4:	623b      	str	r3, [r7, #32]
 80083b6:	e014      	b.n	80083e2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80083b8:	69bb      	ldr	r3, [r7, #24]
 80083ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80083c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c6:	3301      	adds	r3, #1
 80083c8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80083ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083cc:	3301      	adds	r3, #1
 80083ce:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80083d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d2:	3301      	adds	r3, #1
 80083d4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80083d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d8:	3301      	adds	r3, #1
 80083da:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80083dc:	6a3b      	ldr	r3, [r7, #32]
 80083de:	3301      	adds	r3, #1
 80083e0:	623b      	str	r3, [r7, #32]
 80083e2:	6a3a      	ldr	r2, [r7, #32]
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d3e6      	bcc.n	80083b8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80083ea:	8bfb      	ldrh	r3, [r7, #30]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d01e      	beq.n	800842e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80083f0:	2300      	movs	r3, #0
 80083f2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80083f4:	69bb      	ldr	r3, [r7, #24]
 80083f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083fa:	461a      	mov	r2, r3
 80083fc:	f107 0310 	add.w	r3, r7, #16
 8008400:	6812      	ldr	r2, [r2, #0]
 8008402:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008404:	693a      	ldr	r2, [r7, #16]
 8008406:	6a3b      	ldr	r3, [r7, #32]
 8008408:	b2db      	uxtb	r3, r3
 800840a:	00db      	lsls	r3, r3, #3
 800840c:	fa22 f303 	lsr.w	r3, r2, r3
 8008410:	b2da      	uxtb	r2, r3
 8008412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008414:	701a      	strb	r2, [r3, #0]
      i++;
 8008416:	6a3b      	ldr	r3, [r7, #32]
 8008418:	3301      	adds	r3, #1
 800841a:	623b      	str	r3, [r7, #32]
      pDest++;
 800841c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800841e:	3301      	adds	r3, #1
 8008420:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008422:	8bfb      	ldrh	r3, [r7, #30]
 8008424:	3b01      	subs	r3, #1
 8008426:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008428:	8bfb      	ldrh	r3, [r7, #30]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1ea      	bne.n	8008404 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800842e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008430:	4618      	mov	r0, r3
 8008432:	372c      	adds	r7, #44	@ 0x2c
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	695b      	ldr	r3, [r3, #20]
 8008448:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	699b      	ldr	r3, [r3, #24]
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	4013      	ands	r3, r2
 8008452:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008454:	68fb      	ldr	r3, [r7, #12]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8008462:	b480      	push	{r7}
 8008464:	b085      	sub	sp, #20
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
 800846a:	460b      	mov	r3, r1
 800846c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8008472:	78fb      	ldrb	r3, [r7, #3]
 8008474:	015a      	lsls	r2, r3, #5
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	4413      	add	r3, r2
 800847a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8008482:	78fb      	ldrb	r3, [r7, #3]
 8008484:	015a      	lsls	r2, r3, #5
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	4413      	add	r3, r2
 800848a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	68ba      	ldr	r2, [r7, #8]
 8008492:	4013      	ands	r3, r2
 8008494:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008496:	68bb      	ldr	r3, [r7, #8]
}
 8008498:	4618      	mov	r0, r3
 800849a:	3714      	adds	r7, #20
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	695b      	ldr	r3, [r3, #20]
 80084b0:	f003 0301 	and.w	r3, r3, #1
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	460b      	mov	r3, r1
 80084ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	68fa      	ldr	r2, [r7, #12]
 80084da:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80084de:	f023 0303 	bic.w	r3, r3, #3
 80084e2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	78fb      	ldrb	r3, [r7, #3]
 80084ee:	f003 0303 	and.w	r3, r3, #3
 80084f2:	68f9      	ldr	r1, [r7, #12]
 80084f4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80084f8:	4313      	orrs	r3, r2
 80084fa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80084fc:	78fb      	ldrb	r3, [r7, #3]
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d107      	bne.n	8008512 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008508:	461a      	mov	r2, r3
 800850a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800850e:	6053      	str	r3, [r2, #4]
 8008510:	e00c      	b.n	800852c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8008512:	78fb      	ldrb	r3, [r7, #3]
 8008514:	2b02      	cmp	r3, #2
 8008516:	d107      	bne.n	8008528 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800851e:	461a      	mov	r2, r3
 8008520:	f241 7370 	movw	r3, #6000	@ 0x1770
 8008524:	6053      	str	r3, [r2, #4]
 8008526:	e001      	b.n	800852c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	e000      	b.n	800852e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	3714      	adds	r7, #20
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr

0800853a <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800853a:	b480      	push	{r7}
 800853c:	b085      	sub	sp, #20
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800854c:	695b      	ldr	r3, [r3, #20]
 800854e:	b29b      	uxth	r3, r3
}
 8008550:	4618      	mov	r0, r3
 8008552:	3714      	adds	r7, #20
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800855c:	b480      	push	{r7}
 800855e:	b089      	sub	sp, #36	@ 0x24
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	460b      	mov	r3, r1
 8008566:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800856c:	78fb      	ldrb	r3, [r7, #3]
 800856e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008570:	2300      	movs	r3, #0
 8008572:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	015a      	lsls	r2, r3, #5
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	4413      	add	r3, r2
 800857c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	0c9b      	lsrs	r3, r3, #18
 8008584:	f003 0303 	and.w	r3, r3, #3
 8008588:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	015a      	lsls	r2, r3, #5
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	4413      	add	r3, r2
 8008592:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	0fdb      	lsrs	r3, r3, #31
 800859a:	f003 0301 	and.w	r3, r3, #1
 800859e:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80085a0:	69bb      	ldr	r3, [r7, #24]
 80085a2:	015a      	lsls	r2, r3, #5
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	4413      	add	r3, r2
 80085a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	0fdb      	lsrs	r3, r3, #31
 80085b0:	f003 0301 	and.w	r3, r3, #1
 80085b4:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	f003 0320 	and.w	r3, r3, #32
 80085be:	2b20      	cmp	r3, #32
 80085c0:	d10d      	bne.n	80085de <USB_HC_Halt+0x82>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d10a      	bne.n	80085de <USB_HC_Halt+0x82>
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d005      	beq.n	80085da <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d002      	beq.n	80085da <USB_HC_Halt+0x7e>
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	2b03      	cmp	r3, #3
 80085d8:	d101      	bne.n	80085de <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80085da:	2300      	movs	r3, #0
 80085dc:	e0d8      	b.n	8008790 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d002      	beq.n	80085ea <USB_HC_Halt+0x8e>
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	d173      	bne.n	80086d2 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	015a      	lsls	r2, r3, #5
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	4413      	add	r3, r2
 80085f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	69ba      	ldr	r2, [r7, #24]
 80085fa:	0151      	lsls	r1, r2, #5
 80085fc:	69fa      	ldr	r2, [r7, #28]
 80085fe:	440a      	add	r2, r1
 8008600:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008604:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008608:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	f003 0320 	and.w	r3, r3, #32
 8008612:	2b00      	cmp	r3, #0
 8008614:	d14a      	bne.n	80086ac <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800861a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800861e:	2b00      	cmp	r3, #0
 8008620:	d133      	bne.n	800868a <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	015a      	lsls	r2, r3, #5
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	4413      	add	r3, r2
 800862a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	69ba      	ldr	r2, [r7, #24]
 8008632:	0151      	lsls	r1, r2, #5
 8008634:	69fa      	ldr	r2, [r7, #28]
 8008636:	440a      	add	r2, r1
 8008638:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800863c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008640:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	015a      	lsls	r2, r3, #5
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	4413      	add	r3, r2
 800864a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	69ba      	ldr	r2, [r7, #24]
 8008652:	0151      	lsls	r1, r2, #5
 8008654:	69fa      	ldr	r2, [r7, #28]
 8008656:	440a      	add	r2, r1
 8008658:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800865c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008660:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	3301      	adds	r3, #1
 8008666:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800866e:	d82e      	bhi.n	80086ce <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	015a      	lsls	r2, r3, #5
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	4413      	add	r3, r2
 8008678:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008682:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008686:	d0ec      	beq.n	8008662 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008688:	e081      	b.n	800878e <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800868a:	69bb      	ldr	r3, [r7, #24]
 800868c:	015a      	lsls	r2, r3, #5
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	4413      	add	r3, r2
 8008692:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	69ba      	ldr	r2, [r7, #24]
 800869a:	0151      	lsls	r1, r2, #5
 800869c:	69fa      	ldr	r2, [r7, #28]
 800869e:	440a      	add	r2, r1
 80086a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80086a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80086a8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80086aa:	e070      	b.n	800878e <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	015a      	lsls	r2, r3, #5
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	4413      	add	r3, r2
 80086b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	69ba      	ldr	r2, [r7, #24]
 80086bc:	0151      	lsls	r1, r2, #5
 80086be:	69fa      	ldr	r2, [r7, #28]
 80086c0:	440a      	add	r2, r1
 80086c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80086c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80086ca:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80086cc:	e05f      	b.n	800878e <USB_HC_Halt+0x232>
            break;
 80086ce:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80086d0:	e05d      	b.n	800878e <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	015a      	lsls	r2, r3, #5
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	4413      	add	r3, r2
 80086da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	69ba      	ldr	r2, [r7, #24]
 80086e2:	0151      	lsls	r1, r2, #5
 80086e4:	69fa      	ldr	r2, [r7, #28]
 80086e6:	440a      	add	r2, r1
 80086e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80086ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80086f0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80086f2:	69fb      	ldr	r3, [r7, #28]
 80086f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086f8:	691b      	ldr	r3, [r3, #16]
 80086fa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d133      	bne.n	800876a <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008702:	69bb      	ldr	r3, [r7, #24]
 8008704:	015a      	lsls	r2, r3, #5
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	4413      	add	r3, r2
 800870a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	69ba      	ldr	r2, [r7, #24]
 8008712:	0151      	lsls	r1, r2, #5
 8008714:	69fa      	ldr	r2, [r7, #28]
 8008716:	440a      	add	r2, r1
 8008718:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800871c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008720:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	015a      	lsls	r2, r3, #5
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	4413      	add	r3, r2
 800872a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	69ba      	ldr	r2, [r7, #24]
 8008732:	0151      	lsls	r1, r2, #5
 8008734:	69fa      	ldr	r2, [r7, #28]
 8008736:	440a      	add	r2, r1
 8008738:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800873c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008740:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	3301      	adds	r3, #1
 8008746:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800874e:	d81d      	bhi.n	800878c <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	015a      	lsls	r2, r3, #5
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	4413      	add	r3, r2
 8008758:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008762:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008766:	d0ec      	beq.n	8008742 <USB_HC_Halt+0x1e6>
 8008768:	e011      	b.n	800878e <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	015a      	lsls	r2, r3, #5
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	4413      	add	r3, r2
 8008772:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	69ba      	ldr	r2, [r7, #24]
 800877a:	0151      	lsls	r1, r2, #5
 800877c:	69fa      	ldr	r2, [r7, #28]
 800877e:	440a      	add	r2, r1
 8008780:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008784:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008788:	6013      	str	r3, [r2, #0]
 800878a:	e000      	b.n	800878e <USB_HC_Halt+0x232>
          break;
 800878c:	bf00      	nop
    }
  }

  return HAL_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3724      	adds	r7, #36	@ 0x24
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b088      	sub	sp, #32
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80087a4:	2300      	movs	r3, #0
 80087a6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80087ac:	2300      	movs	r3, #0
 80087ae:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f7ff fd7a 	bl	80082aa <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80087b6:	2110      	movs	r1, #16
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f7ff fd87 	bl	80082cc <USB_FlushTxFifo>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d001      	beq.n	80087c8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f7ff fdb1 	bl	8008330 <USB_FlushRxFifo>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d001      	beq.n	80087d8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80087d8:	2300      	movs	r3, #0
 80087da:	61bb      	str	r3, [r7, #24]
 80087dc:	e01f      	b.n	800881e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	015a      	lsls	r2, r3, #5
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	4413      	add	r3, r2
 80087e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80087f4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80087fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008804:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	015a      	lsls	r2, r3, #5
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	4413      	add	r3, r2
 800880e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008812:	461a      	mov	r2, r3
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	3301      	adds	r3, #1
 800881c:	61bb      	str	r3, [r7, #24]
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	2b0f      	cmp	r3, #15
 8008822:	d9dc      	bls.n	80087de <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008824:	2300      	movs	r3, #0
 8008826:	61bb      	str	r3, [r7, #24]
 8008828:	e034      	b.n	8008894 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	015a      	lsls	r2, r3, #5
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	4413      	add	r3, r2
 8008832:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008840:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008848:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008850:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	015a      	lsls	r2, r3, #5
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	4413      	add	r3, r2
 800885a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800885e:	461a      	mov	r2, r3
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	3301      	adds	r3, #1
 8008868:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008870:	d80c      	bhi.n	800888c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008872:	69bb      	ldr	r3, [r7, #24]
 8008874:	015a      	lsls	r2, r3, #5
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	4413      	add	r3, r2
 800887a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008884:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008888:	d0ec      	beq.n	8008864 <USB_StopHost+0xc8>
 800888a:	e000      	b.n	800888e <USB_StopHost+0xf2>
        break;
 800888c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	3301      	adds	r3, #1
 8008892:	61bb      	str	r3, [r7, #24]
 8008894:	69bb      	ldr	r3, [r7, #24]
 8008896:	2b0f      	cmp	r3, #15
 8008898:	d9c7      	bls.n	800882a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80088a0:	461a      	mov	r2, r3
 80088a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80088a6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80088ae:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f7ff fce9 	bl	8008288 <USB_EnableGlobalInt>

  return ret;
 80088b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3720      	adds	r7, #32
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80088ce:	1c5a      	adds	r2, r3, #1
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 f804 	bl	80088e4 <USBH_HandleSof>
}
 80088dc:	bf00      	nop
 80088de:	3708      	adds	r7, #8
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	2b0b      	cmp	r3, #11
 80088f4:	d10a      	bne.n	800890c <USBH_HandleSof+0x28>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d005      	beq.n	800890c <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008906:	699b      	ldr	r3, [r3, #24]
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	4798      	blx	r3
  }
}
 800890c:	bf00      	nop
 800890e:	3708      	adds	r7, #8
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008938:	2200      	movs	r2, #0
 800893a:	4619      	mov	r1, r3
 800893c:	f000 f8ae 	bl	8008a9c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008940:	bf00      	nop
}
 8008942:	3708      	adds	r7, #8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008958:	bf00      	nop
}
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008998:	2200      	movs	r2, #0
 800899a:	4619      	mov	r1, r3
 800899c:	f000 f87e 	bl	8008a9c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3708      	adds	r7, #8
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b082      	sub	sp, #8
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2201      	movs	r2, #1
 80089b6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f001 f928 	bl	8009c20 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	791b      	ldrb	r3, [r3, #4]
 80089d4:	4619      	mov	r1, r3
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 f830 	bl	8008a3c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	795b      	ldrb	r3, [r3, #5]
 80089e0:	4619      	mov	r1, r3
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 f82a 	bl	8008a3c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80089fc:	2200      	movs	r2, #0
 80089fe:	4619      	mov	r1, r3
 8008a00:	f000 f84c 	bl	8008a9c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3708      	adds	r7, #8
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b082      	sub	sp, #8
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	f000 f835 	bl	8008a9c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	460b      	mov	r3, r1
 8008a46:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008a48:	78fb      	ldrb	r3, [r7, #3]
 8008a4a:	2b0f      	cmp	r3, #15
 8008a4c:	d80d      	bhi.n	8008a6a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008a4e:	78fb      	ldrb	r3, [r7, #3]
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	33e0      	adds	r3, #224	@ 0xe0
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	4413      	add	r3, r2
 8008a58:	685a      	ldr	r2, [r3, #4]
 8008a5a:	78fb      	ldrb	r3, [r7, #3]
 8008a5c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008a60:	6879      	ldr	r1, [r7, #4]
 8008a62:	33e0      	adds	r3, #224	@ 0xe0
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	440b      	add	r3, r1
 8008a68:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a7e:	f3ef 8305 	mrs	r3, IPSR
 8008a82:	607b      	str	r3, [r7, #4]
  return(result);
 8008a84:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	bf14      	ite	ne
 8008a8a:	2301      	movne	r3, #1
 8008a8c:	2300      	moveq	r3, #0
 8008a8e:	b2db      	uxtb	r3, r3
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b086      	sub	sp, #24
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	60b9      	str	r1, [r7, #8]
 8008aa6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d101      	bne.n	8008aba <osMessagePut+0x1e>
    ticks = 1;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008aba:	f7ff ffdd 	bl	8008a78 <inHandlerMode>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d018      	beq.n	8008af6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008ac4:	f107 0210 	add.w	r2, r7, #16
 8008ac8:	f107 0108 	add.w	r1, r7, #8
 8008acc:	2300      	movs	r3, #0
 8008ace:	68f8      	ldr	r0, [r7, #12]
 8008ad0:	f000 f9ae 	bl	8008e30 <xQueueGenericSendFromISR>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d001      	beq.n	8008ade <osMessagePut+0x42>
      return osErrorOS;
 8008ada:	23ff      	movs	r3, #255	@ 0xff
 8008adc:	e018      	b.n	8008b10 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d014      	beq.n	8008b0e <osMessagePut+0x72>
 8008ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8008b18 <osMessagePut+0x7c>)
 8008ae6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008aea:	601a      	str	r2, [r3, #0]
 8008aec:	f3bf 8f4f 	dsb	sy
 8008af0:	f3bf 8f6f 	isb	sy
 8008af4:	e00b      	b.n	8008b0e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008af6:	f107 0108 	add.w	r1, r7, #8
 8008afa:	2300      	movs	r3, #0
 8008afc:	697a      	ldr	r2, [r7, #20]
 8008afe:	68f8      	ldr	r0, [r7, #12]
 8008b00:	f000 f894 	bl	8008c2c <xQueueGenericSend>
 8008b04:	4603      	mov	r3, r0
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d001      	beq.n	8008b0e <osMessagePut+0x72>
      return osErrorOS;
 8008b0a:	23ff      	movs	r3, #255	@ 0xff
 8008b0c:	e000      	b.n	8008b10 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3718      	adds	r7, #24
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	e000ed04 	.word	0xe000ed04

08008b1c <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b085      	sub	sp, #20
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	689a      	ldr	r2, [r3, #8]
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	683a      	ldr	r2, [r7, #0]
 8008b40:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	683a      	ldr	r2, [r7, #0]
 8008b46:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	1c5a      	adds	r2, r3, #1
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	601a      	str	r2, [r3, #0]
}
 8008b58:	bf00      	nop
 8008b5a:	3714      	adds	r7, #20
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b64:	b480      	push	{r7}
 8008b66:	b085      	sub	sp, #20
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b7a:	d103      	bne.n	8008b84 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	691b      	ldr	r3, [r3, #16]
 8008b80:	60fb      	str	r3, [r7, #12]
 8008b82:	e00c      	b.n	8008b9e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	3308      	adds	r3, #8
 8008b88:	60fb      	str	r3, [r7, #12]
 8008b8a:	e002      	b.n	8008b92 <vListInsert+0x2e>
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	60fb      	str	r3, [r7, #12]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	68ba      	ldr	r2, [r7, #8]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d2f6      	bcs.n	8008b8c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	685a      	ldr	r2, [r3, #4]
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	683a      	ldr	r2, [r7, #0]
 8008bac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	68fa      	ldr	r2, [r7, #12]
 8008bb2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	683a      	ldr	r2, [r7, #0]
 8008bb8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	1c5a      	adds	r2, r3, #1
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	601a      	str	r2, [r3, #0]
}
 8008bca:	bf00      	nop
 8008bcc:	3714      	adds	r7, #20
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr

08008bd6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008bd6:	b480      	push	{r7}
 8008bd8:	b085      	sub	sp, #20
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	691b      	ldr	r3, [r3, #16]
 8008be2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	6892      	ldr	r2, [r2, #8]
 8008bec:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	6852      	ldr	r2, [r2, #4]
 8008bf6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d103      	bne.n	8008c0a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	689a      	ldr	r2, [r3, #8]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	1e5a      	subs	r2, r3, #1
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3714      	adds	r7, #20
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr
	...

08008c2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b08e      	sub	sp, #56	@ 0x38
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	607a      	str	r2, [r7, #4]
 8008c38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d10b      	bne.n	8008c60 <xQueueGenericSend+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c4c:	f383 8811 	msr	BASEPRI, r3
 8008c50:	f3bf 8f6f 	isb	sy
 8008c54:	f3bf 8f4f 	dsb	sy
 8008c58:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008c5a:	bf00      	nop
 8008c5c:	bf00      	nop
 8008c5e:	e7fd      	b.n	8008c5c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d103      	bne.n	8008c6e <xQueueGenericSend+0x42>
 8008c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d101      	bne.n	8008c72 <xQueueGenericSend+0x46>
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e000      	b.n	8008c74 <xQueueGenericSend+0x48>
 8008c72:	2300      	movs	r3, #0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d10b      	bne.n	8008c90 <xQueueGenericSend+0x64>
	__asm volatile
 8008c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c7c:	f383 8811 	msr	BASEPRI, r3
 8008c80:	f3bf 8f6f 	isb	sy
 8008c84:	f3bf 8f4f 	dsb	sy
 8008c88:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008c8a:	bf00      	nop
 8008c8c:	bf00      	nop
 8008c8e:	e7fd      	b.n	8008c8c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	d103      	bne.n	8008c9e <xQueueGenericSend+0x72>
 8008c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d101      	bne.n	8008ca2 <xQueueGenericSend+0x76>
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e000      	b.n	8008ca4 <xQueueGenericSend+0x78>
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d10b      	bne.n	8008cc0 <xQueueGenericSend+0x94>
	__asm volatile
 8008ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cac:	f383 8811 	msr	BASEPRI, r3
 8008cb0:	f3bf 8f6f 	isb	sy
 8008cb4:	f3bf 8f4f 	dsb	sy
 8008cb8:	623b      	str	r3, [r7, #32]
}
 8008cba:	bf00      	nop
 8008cbc:	bf00      	nop
 8008cbe:	e7fd      	b.n	8008cbc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008cc0:	f000 fd40 	bl	8009744 <xTaskGetSchedulerState>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d102      	bne.n	8008cd0 <xQueueGenericSend+0xa4>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d101      	bne.n	8008cd4 <xQueueGenericSend+0xa8>
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e000      	b.n	8008cd6 <xQueueGenericSend+0xaa>
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d10b      	bne.n	8008cf2 <xQueueGenericSend+0xc6>
	__asm volatile
 8008cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cde:	f383 8811 	msr	BASEPRI, r3
 8008ce2:	f3bf 8f6f 	isb	sy
 8008ce6:	f3bf 8f4f 	dsb	sy
 8008cea:	61fb      	str	r3, [r7, #28]
}
 8008cec:	bf00      	nop
 8008cee:	bf00      	nop
 8008cf0:	e7fd      	b.n	8008cee <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008cf2:	f000 fe49 	bl	8009988 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d302      	bcc.n	8008d08 <xQueueGenericSend+0xdc>
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	2b02      	cmp	r3, #2
 8008d06:	d129      	bne.n	8008d5c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d08:	683a      	ldr	r2, [r7, #0]
 8008d0a:	68b9      	ldr	r1, [r7, #8]
 8008d0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d0e:	f000 f92d 	bl	8008f6c <prvCopyDataToQueue>
 8008d12:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d010      	beq.n	8008d3e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d1e:	3324      	adds	r3, #36	@ 0x24
 8008d20:	4618      	mov	r0, r3
 8008d22:	f000 fc05 	bl	8009530 <xTaskRemoveFromEventList>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d013      	beq.n	8008d54 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008d2c:	4b3f      	ldr	r3, [pc, #252]	@ (8008e2c <xQueueGenericSend+0x200>)
 8008d2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d32:	601a      	str	r2, [r3, #0]
 8008d34:	f3bf 8f4f 	dsb	sy
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	e00a      	b.n	8008d54 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d007      	beq.n	8008d54 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008d44:	4b39      	ldr	r3, [pc, #228]	@ (8008e2c <xQueueGenericSend+0x200>)
 8008d46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d4a:	601a      	str	r2, [r3, #0]
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008d54:	f000 fe4a 	bl	80099ec <vPortExitCritical>
				return pdPASS;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e063      	b.n	8008e24 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d103      	bne.n	8008d6a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d62:	f000 fe43 	bl	80099ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008d66:	2300      	movs	r3, #0
 8008d68:	e05c      	b.n	8008e24 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d106      	bne.n	8008d7e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d70:	f107 0314 	add.w	r3, r7, #20
 8008d74:	4618      	mov	r0, r3
 8008d76:	f000 fc3f 	bl	80095f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d7e:	f000 fe35 	bl	80099ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d82:	f000 f9c7 	bl	8009114 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d86:	f000 fdff 	bl	8009988 <vPortEnterCritical>
 8008d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d90:	b25b      	sxtb	r3, r3
 8008d92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d96:	d103      	bne.n	8008da0 <xQueueGenericSend+0x174>
 8008d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008da6:	b25b      	sxtb	r3, r3
 8008da8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008dac:	d103      	bne.n	8008db6 <xQueueGenericSend+0x18a>
 8008dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db0:	2200      	movs	r2, #0
 8008db2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008db6:	f000 fe19 	bl	80099ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008dba:	1d3a      	adds	r2, r7, #4
 8008dbc:	f107 0314 	add.w	r3, r7, #20
 8008dc0:	4611      	mov	r1, r2
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f000 fc2e 	bl	8009624 <xTaskCheckForTimeOut>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d124      	bne.n	8008e18 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008dce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008dd0:	f000 f988 	bl	80090e4 <prvIsQueueFull>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d018      	beq.n	8008e0c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ddc:	3310      	adds	r3, #16
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	4611      	mov	r1, r2
 8008de2:	4618      	mov	r0, r3
 8008de4:	f000 fb7e 	bl	80094e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008de8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008dea:	f000 f929 	bl	8009040 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008dee:	f000 f99f 	bl	8009130 <xTaskResumeAll>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f47f af7c 	bne.w	8008cf2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8008e2c <xQueueGenericSend+0x200>)
 8008dfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e00:	601a      	str	r2, [r3, #0]
 8008e02:	f3bf 8f4f 	dsb	sy
 8008e06:	f3bf 8f6f 	isb	sy
 8008e0a:	e772      	b.n	8008cf2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008e0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e0e:	f000 f917 	bl	8009040 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e12:	f000 f98d 	bl	8009130 <xTaskResumeAll>
 8008e16:	e76c      	b.n	8008cf2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008e18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e1a:	f000 f911 	bl	8009040 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e1e:	f000 f987 	bl	8009130 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008e22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3738      	adds	r7, #56	@ 0x38
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	e000ed04 	.word	0xe000ed04

08008e30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b090      	sub	sp, #64	@ 0x40
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	607a      	str	r2, [r7, #4]
 8008e3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d10b      	bne.n	8008e60 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e4c:	f383 8811 	msr	BASEPRI, r3
 8008e50:	f3bf 8f6f 	isb	sy
 8008e54:	f3bf 8f4f 	dsb	sy
 8008e58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008e5a:	bf00      	nop
 8008e5c:	bf00      	nop
 8008e5e:	e7fd      	b.n	8008e5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d103      	bne.n	8008e6e <xQueueGenericSendFromISR+0x3e>
 8008e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d101      	bne.n	8008e72 <xQueueGenericSendFromISR+0x42>
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e000      	b.n	8008e74 <xQueueGenericSendFromISR+0x44>
 8008e72:	2300      	movs	r3, #0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d10b      	bne.n	8008e90 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e7c:	f383 8811 	msr	BASEPRI, r3
 8008e80:	f3bf 8f6f 	isb	sy
 8008e84:	f3bf 8f4f 	dsb	sy
 8008e88:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008e8a:	bf00      	nop
 8008e8c:	bf00      	nop
 8008e8e:	e7fd      	b.n	8008e8c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	d103      	bne.n	8008e9e <xQueueGenericSendFromISR+0x6e>
 8008e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d101      	bne.n	8008ea2 <xQueueGenericSendFromISR+0x72>
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e000      	b.n	8008ea4 <xQueueGenericSendFromISR+0x74>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d10b      	bne.n	8008ec0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eac:	f383 8811 	msr	BASEPRI, r3
 8008eb0:	f3bf 8f6f 	isb	sy
 8008eb4:	f3bf 8f4f 	dsb	sy
 8008eb8:	623b      	str	r3, [r7, #32]
}
 8008eba:	bf00      	nop
 8008ebc:	bf00      	nop
 8008ebe:	e7fd      	b.n	8008ebc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ec0:	f000 fe14 	bl	8009aec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008ec4:	f3ef 8211 	mrs	r2, BASEPRI
 8008ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ecc:	f383 8811 	msr	BASEPRI, r3
 8008ed0:	f3bf 8f6f 	isb	sy
 8008ed4:	f3bf 8f4f 	dsb	sy
 8008ed8:	61fa      	str	r2, [r7, #28]
 8008eda:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008edc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ede:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ee2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d302      	bcc.n	8008ef2 <xQueueGenericSendFromISR+0xc2>
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	2b02      	cmp	r3, #2
 8008ef0:	d12f      	bne.n	8008f52 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ef8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f02:	683a      	ldr	r2, [r7, #0]
 8008f04:	68b9      	ldr	r1, [r7, #8]
 8008f06:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008f08:	f000 f830 	bl	8008f6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008f0c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008f10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f14:	d112      	bne.n	8008f3c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d016      	beq.n	8008f4c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f20:	3324      	adds	r3, #36	@ 0x24
 8008f22:	4618      	mov	r0, r3
 8008f24:	f000 fb04 	bl	8009530 <xTaskRemoveFromEventList>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d00e      	beq.n	8008f4c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d00b      	beq.n	8008f4c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	601a      	str	r2, [r3, #0]
 8008f3a:	e007      	b.n	8008f4c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008f3c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008f40:	3301      	adds	r3, #1
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	b25a      	sxtb	r2, r3
 8008f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008f50:	e001      	b.n	8008f56 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008f52:	2300      	movs	r3, #0
 8008f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f58:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008f60:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008f62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3740      	adds	r7, #64	@ 0x40
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b086      	sub	sp, #24
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d10d      	bne.n	8008fa6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d14d      	bne.n	800902e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	4618      	mov	r0, r3
 8008f98:	f000 fbf2 	bl	8009780 <xTaskPriorityDisinherit>
 8008f9c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	609a      	str	r2, [r3, #8]
 8008fa4:	e043      	b.n	800902e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d119      	bne.n	8008fe0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6858      	ldr	r0, [r3, #4]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	68b9      	ldr	r1, [r7, #8]
 8008fb8:	f000 feac 	bl	8009d14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	685a      	ldr	r2, [r3, #4]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fc4:	441a      	add	r2, r3
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	685a      	ldr	r2, [r3, #4]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d32b      	bcc.n	800902e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	605a      	str	r2, [r3, #4]
 8008fde:	e026      	b.n	800902e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	68d8      	ldr	r0, [r3, #12]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fe8:	461a      	mov	r2, r3
 8008fea:	68b9      	ldr	r1, [r7, #8]
 8008fec:	f000 fe92 	bl	8009d14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	68da      	ldr	r2, [r3, #12]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ff8:	425b      	negs	r3, r3
 8008ffa:	441a      	add	r2, r3
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	68da      	ldr	r2, [r3, #12]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	429a      	cmp	r2, r3
 800900a:	d207      	bcs.n	800901c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	689a      	ldr	r2, [r3, #8]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009014:	425b      	negs	r3, r3
 8009016:	441a      	add	r2, r3
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2b02      	cmp	r3, #2
 8009020:	d105      	bne.n	800902e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d002      	beq.n	800902e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	3b01      	subs	r3, #1
 800902c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	1c5a      	adds	r2, r3, #1
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009036:	697b      	ldr	r3, [r7, #20]
}
 8009038:	4618      	mov	r0, r3
 800903a:	3718      	adds	r7, #24
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009048:	f000 fc9e 	bl	8009988 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009052:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009054:	e011      	b.n	800907a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800905a:	2b00      	cmp	r3, #0
 800905c:	d012      	beq.n	8009084 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	3324      	adds	r3, #36	@ 0x24
 8009062:	4618      	mov	r0, r3
 8009064:	f000 fa64 	bl	8009530 <xTaskRemoveFromEventList>
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	d001      	beq.n	8009072 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800906e:	f000 fb3d 	bl	80096ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009072:	7bfb      	ldrb	r3, [r7, #15]
 8009074:	3b01      	subs	r3, #1
 8009076:	b2db      	uxtb	r3, r3
 8009078:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800907a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800907e:	2b00      	cmp	r3, #0
 8009080:	dce9      	bgt.n	8009056 <prvUnlockQueue+0x16>
 8009082:	e000      	b.n	8009086 <prvUnlockQueue+0x46>
					break;
 8009084:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	22ff      	movs	r2, #255	@ 0xff
 800908a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800908e:	f000 fcad 	bl	80099ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009092:	f000 fc79 	bl	8009988 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800909c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800909e:	e011      	b.n	80090c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	691b      	ldr	r3, [r3, #16]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d012      	beq.n	80090ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	3310      	adds	r3, #16
 80090ac:	4618      	mov	r0, r3
 80090ae:	f000 fa3f 	bl	8009530 <xTaskRemoveFromEventList>
 80090b2:	4603      	mov	r3, r0
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d001      	beq.n	80090bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80090b8:	f000 fb18 	bl	80096ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80090bc:	7bbb      	ldrb	r3, [r7, #14]
 80090be:	3b01      	subs	r3, #1
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80090c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	dce9      	bgt.n	80090a0 <prvUnlockQueue+0x60>
 80090cc:	e000      	b.n	80090d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80090ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	22ff      	movs	r2, #255	@ 0xff
 80090d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80090d8:	f000 fc88 	bl	80099ec <vPortExitCritical>
}
 80090dc:	bf00      	nop
 80090de:	3710      	adds	r7, #16
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80090ec:	f000 fc4c 	bl	8009988 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d102      	bne.n	8009102 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80090fc:	2301      	movs	r3, #1
 80090fe:	60fb      	str	r3, [r7, #12]
 8009100:	e001      	b.n	8009106 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009102:	2300      	movs	r3, #0
 8009104:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009106:	f000 fc71 	bl	80099ec <vPortExitCritical>

	return xReturn;
 800910a:	68fb      	ldr	r3, [r7, #12]
}
 800910c:	4618      	mov	r0, r3
 800910e:	3710      	adds	r7, #16
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009114:	b480      	push	{r7}
 8009116:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009118:	4b04      	ldr	r3, [pc, #16]	@ (800912c <vTaskSuspendAll+0x18>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	3301      	adds	r3, #1
 800911e:	4a03      	ldr	r2, [pc, #12]	@ (800912c <vTaskSuspendAll+0x18>)
 8009120:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009122:	bf00      	nop
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr
 800912c:	20025d58 	.word	0x20025d58

08009130 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009136:	2300      	movs	r3, #0
 8009138:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800913a:	2300      	movs	r3, #0
 800913c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800913e:	4b42      	ldr	r3, [pc, #264]	@ (8009248 <xTaskResumeAll+0x118>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d10b      	bne.n	800915e <xTaskResumeAll+0x2e>
	__asm volatile
 8009146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800914a:	f383 8811 	msr	BASEPRI, r3
 800914e:	f3bf 8f6f 	isb	sy
 8009152:	f3bf 8f4f 	dsb	sy
 8009156:	603b      	str	r3, [r7, #0]
}
 8009158:	bf00      	nop
 800915a:	bf00      	nop
 800915c:	e7fd      	b.n	800915a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800915e:	f000 fc13 	bl	8009988 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009162:	4b39      	ldr	r3, [pc, #228]	@ (8009248 <xTaskResumeAll+0x118>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	3b01      	subs	r3, #1
 8009168:	4a37      	ldr	r2, [pc, #220]	@ (8009248 <xTaskResumeAll+0x118>)
 800916a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800916c:	4b36      	ldr	r3, [pc, #216]	@ (8009248 <xTaskResumeAll+0x118>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d161      	bne.n	8009238 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009174:	4b35      	ldr	r3, [pc, #212]	@ (800924c <xTaskResumeAll+0x11c>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d05d      	beq.n	8009238 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800917c:	e02e      	b.n	80091dc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800917e:	4b34      	ldr	r3, [pc, #208]	@ (8009250 <xTaskResumeAll+0x120>)
 8009180:	68db      	ldr	r3, [r3, #12]
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	3318      	adds	r3, #24
 800918a:	4618      	mov	r0, r3
 800918c:	f7ff fd23 	bl	8008bd6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	3304      	adds	r3, #4
 8009194:	4618      	mov	r0, r3
 8009196:	f7ff fd1e 	bl	8008bd6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800919e:	2201      	movs	r2, #1
 80091a0:	409a      	lsls	r2, r3
 80091a2:	4b2c      	ldr	r3, [pc, #176]	@ (8009254 <xTaskResumeAll+0x124>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4313      	orrs	r3, r2
 80091a8:	4a2a      	ldr	r2, [pc, #168]	@ (8009254 <xTaskResumeAll+0x124>)
 80091aa:	6013      	str	r3, [r2, #0]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091b0:	4613      	mov	r3, r2
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	4413      	add	r3, r2
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	4a27      	ldr	r2, [pc, #156]	@ (8009258 <xTaskResumeAll+0x128>)
 80091ba:	441a      	add	r2, r3
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	3304      	adds	r3, #4
 80091c0:	4619      	mov	r1, r3
 80091c2:	4610      	mov	r0, r2
 80091c4:	f7ff fcaa 	bl	8008b1c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091cc:	4b23      	ldr	r3, [pc, #140]	@ (800925c <xTaskResumeAll+0x12c>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d302      	bcc.n	80091dc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80091d6:	4b22      	ldr	r3, [pc, #136]	@ (8009260 <xTaskResumeAll+0x130>)
 80091d8:	2201      	movs	r2, #1
 80091da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091dc:	4b1c      	ldr	r3, [pc, #112]	@ (8009250 <xTaskResumeAll+0x120>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d1cc      	bne.n	800917e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d001      	beq.n	80091ee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80091ea:	f000 fa8b 	bl	8009704 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80091ee:	4b1d      	ldr	r3, [pc, #116]	@ (8009264 <xTaskResumeAll+0x134>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d010      	beq.n	800921c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80091fa:	f000 f837 	bl	800926c <xTaskIncrementTick>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d002      	beq.n	800920a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009204:	4b16      	ldr	r3, [pc, #88]	@ (8009260 <xTaskResumeAll+0x130>)
 8009206:	2201      	movs	r2, #1
 8009208:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	3b01      	subs	r3, #1
 800920e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d1f1      	bne.n	80091fa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009216:	4b13      	ldr	r3, [pc, #76]	@ (8009264 <xTaskResumeAll+0x134>)
 8009218:	2200      	movs	r2, #0
 800921a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800921c:	4b10      	ldr	r3, [pc, #64]	@ (8009260 <xTaskResumeAll+0x130>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d009      	beq.n	8009238 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009224:	2301      	movs	r3, #1
 8009226:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009228:	4b0f      	ldr	r3, [pc, #60]	@ (8009268 <xTaskResumeAll+0x138>)
 800922a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800922e:	601a      	str	r2, [r3, #0]
 8009230:	f3bf 8f4f 	dsb	sy
 8009234:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009238:	f000 fbd8 	bl	80099ec <vPortExitCritical>

	return xAlreadyYielded;
 800923c:	68bb      	ldr	r3, [r7, #8]
}
 800923e:	4618      	mov	r0, r3
 8009240:	3710      	adds	r7, #16
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	20025d58 	.word	0x20025d58
 800924c:	20025d38 	.word	0x20025d38
 8009250:	20025d10 	.word	0x20025d10
 8009254:	20025d40 	.word	0x20025d40
 8009258:	20025c7c 	.word	0x20025c7c
 800925c:	20025c78 	.word	0x20025c78
 8009260:	20025d4c 	.word	0x20025d4c
 8009264:	20025d48 	.word	0x20025d48
 8009268:	e000ed04 	.word	0xe000ed04

0800926c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b086      	sub	sp, #24
 8009270:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009272:	2300      	movs	r3, #0
 8009274:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009276:	4b4f      	ldr	r3, [pc, #316]	@ (80093b4 <xTaskIncrementTick+0x148>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	2b00      	cmp	r3, #0
 800927c:	f040 808f 	bne.w	800939e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009280:	4b4d      	ldr	r3, [pc, #308]	@ (80093b8 <xTaskIncrementTick+0x14c>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	3301      	adds	r3, #1
 8009286:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009288:	4a4b      	ldr	r2, [pc, #300]	@ (80093b8 <xTaskIncrementTick+0x14c>)
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d121      	bne.n	80092d8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009294:	4b49      	ldr	r3, [pc, #292]	@ (80093bc <xTaskIncrementTick+0x150>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d00b      	beq.n	80092b6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800929e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092a2:	f383 8811 	msr	BASEPRI, r3
 80092a6:	f3bf 8f6f 	isb	sy
 80092aa:	f3bf 8f4f 	dsb	sy
 80092ae:	603b      	str	r3, [r7, #0]
}
 80092b0:	bf00      	nop
 80092b2:	bf00      	nop
 80092b4:	e7fd      	b.n	80092b2 <xTaskIncrementTick+0x46>
 80092b6:	4b41      	ldr	r3, [pc, #260]	@ (80093bc <xTaskIncrementTick+0x150>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	60fb      	str	r3, [r7, #12]
 80092bc:	4b40      	ldr	r3, [pc, #256]	@ (80093c0 <xTaskIncrementTick+0x154>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a3e      	ldr	r2, [pc, #248]	@ (80093bc <xTaskIncrementTick+0x150>)
 80092c2:	6013      	str	r3, [r2, #0]
 80092c4:	4a3e      	ldr	r2, [pc, #248]	@ (80093c0 <xTaskIncrementTick+0x154>)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	6013      	str	r3, [r2, #0]
 80092ca:	4b3e      	ldr	r3, [pc, #248]	@ (80093c4 <xTaskIncrementTick+0x158>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	3301      	adds	r3, #1
 80092d0:	4a3c      	ldr	r2, [pc, #240]	@ (80093c4 <xTaskIncrementTick+0x158>)
 80092d2:	6013      	str	r3, [r2, #0]
 80092d4:	f000 fa16 	bl	8009704 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80092d8:	4b3b      	ldr	r3, [pc, #236]	@ (80093c8 <xTaskIncrementTick+0x15c>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	693a      	ldr	r2, [r7, #16]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d348      	bcc.n	8009374 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092e2:	4b36      	ldr	r3, [pc, #216]	@ (80093bc <xTaskIncrementTick+0x150>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d104      	bne.n	80092f6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092ec:	4b36      	ldr	r3, [pc, #216]	@ (80093c8 <xTaskIncrementTick+0x15c>)
 80092ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80092f2:	601a      	str	r2, [r3, #0]
					break;
 80092f4:	e03e      	b.n	8009374 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092f6:	4b31      	ldr	r3, [pc, #196]	@ (80093bc <xTaskIncrementTick+0x150>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009306:	693a      	ldr	r2, [r7, #16]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	429a      	cmp	r2, r3
 800930c:	d203      	bcs.n	8009316 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800930e:	4a2e      	ldr	r2, [pc, #184]	@ (80093c8 <xTaskIncrementTick+0x15c>)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009314:	e02e      	b.n	8009374 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	3304      	adds	r3, #4
 800931a:	4618      	mov	r0, r3
 800931c:	f7ff fc5b 	bl	8008bd6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009324:	2b00      	cmp	r3, #0
 8009326:	d004      	beq.n	8009332 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	3318      	adds	r3, #24
 800932c:	4618      	mov	r0, r3
 800932e:	f7ff fc52 	bl	8008bd6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009336:	2201      	movs	r2, #1
 8009338:	409a      	lsls	r2, r3
 800933a:	4b24      	ldr	r3, [pc, #144]	@ (80093cc <xTaskIncrementTick+0x160>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4313      	orrs	r3, r2
 8009340:	4a22      	ldr	r2, [pc, #136]	@ (80093cc <xTaskIncrementTick+0x160>)
 8009342:	6013      	str	r3, [r2, #0]
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009348:	4613      	mov	r3, r2
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	4413      	add	r3, r2
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	4a1f      	ldr	r2, [pc, #124]	@ (80093d0 <xTaskIncrementTick+0x164>)
 8009352:	441a      	add	r2, r3
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	3304      	adds	r3, #4
 8009358:	4619      	mov	r1, r3
 800935a:	4610      	mov	r0, r2
 800935c:	f7ff fbde 	bl	8008b1c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009364:	4b1b      	ldr	r3, [pc, #108]	@ (80093d4 <xTaskIncrementTick+0x168>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800936a:	429a      	cmp	r2, r3
 800936c:	d3b9      	bcc.n	80092e2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800936e:	2301      	movs	r3, #1
 8009370:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009372:	e7b6      	b.n	80092e2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009374:	4b17      	ldr	r3, [pc, #92]	@ (80093d4 <xTaskIncrementTick+0x168>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800937a:	4915      	ldr	r1, [pc, #84]	@ (80093d0 <xTaskIncrementTick+0x164>)
 800937c:	4613      	mov	r3, r2
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	4413      	add	r3, r2
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	440b      	add	r3, r1
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	2b01      	cmp	r3, #1
 800938a:	d901      	bls.n	8009390 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800938c:	2301      	movs	r3, #1
 800938e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009390:	4b11      	ldr	r3, [pc, #68]	@ (80093d8 <xTaskIncrementTick+0x16c>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d007      	beq.n	80093a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009398:	2301      	movs	r3, #1
 800939a:	617b      	str	r3, [r7, #20]
 800939c:	e004      	b.n	80093a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800939e:	4b0f      	ldr	r3, [pc, #60]	@ (80093dc <xTaskIncrementTick+0x170>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	3301      	adds	r3, #1
 80093a4:	4a0d      	ldr	r2, [pc, #52]	@ (80093dc <xTaskIncrementTick+0x170>)
 80093a6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80093a8:	697b      	ldr	r3, [r7, #20]
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3718      	adds	r7, #24
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	20025d58 	.word	0x20025d58
 80093b8:	20025d3c 	.word	0x20025d3c
 80093bc:	20025d08 	.word	0x20025d08
 80093c0:	20025d0c 	.word	0x20025d0c
 80093c4:	20025d50 	.word	0x20025d50
 80093c8:	20025d54 	.word	0x20025d54
 80093cc:	20025d40 	.word	0x20025d40
 80093d0:	20025c7c 	.word	0x20025c7c
 80093d4:	20025c78 	.word	0x20025c78
 80093d8:	20025d4c 	.word	0x20025d4c
 80093dc:	20025d48 	.word	0x20025d48

080093e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b088      	sub	sp, #32
 80093e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80093e6:	4b3a      	ldr	r3, [pc, #232]	@ (80094d0 <vTaskSwitchContext+0xf0>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d003      	beq.n	80093f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80093ee:	4b39      	ldr	r3, [pc, #228]	@ (80094d4 <vTaskSwitchContext+0xf4>)
 80093f0:	2201      	movs	r2, #1
 80093f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80093f4:	e067      	b.n	80094c6 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 80093f6:	4b37      	ldr	r3, [pc, #220]	@ (80094d4 <vTaskSwitchContext+0xf4>)
 80093f8:	2200      	movs	r2, #0
 80093fa:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80093fc:	4b36      	ldr	r3, [pc, #216]	@ (80094d8 <vTaskSwitchContext+0xf8>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009402:	61fb      	str	r3, [r7, #28]
 8009404:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8009408:	61bb      	str	r3, [r7, #24]
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	69ba      	ldr	r2, [r7, #24]
 8009410:	429a      	cmp	r2, r3
 8009412:	d111      	bne.n	8009438 <vTaskSwitchContext+0x58>
 8009414:	69fb      	ldr	r3, [r7, #28]
 8009416:	3304      	adds	r3, #4
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	69ba      	ldr	r2, [r7, #24]
 800941c:	429a      	cmp	r2, r3
 800941e:	d10b      	bne.n	8009438 <vTaskSwitchContext+0x58>
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	3308      	adds	r3, #8
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	69ba      	ldr	r2, [r7, #24]
 8009428:	429a      	cmp	r2, r3
 800942a:	d105      	bne.n	8009438 <vTaskSwitchContext+0x58>
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	330c      	adds	r3, #12
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	69ba      	ldr	r2, [r7, #24]
 8009434:	429a      	cmp	r2, r3
 8009436:	d008      	beq.n	800944a <vTaskSwitchContext+0x6a>
 8009438:	4b27      	ldr	r3, [pc, #156]	@ (80094d8 <vTaskSwitchContext+0xf8>)
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	4b26      	ldr	r3, [pc, #152]	@ (80094d8 <vTaskSwitchContext+0xf8>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	3334      	adds	r3, #52	@ 0x34
 8009442:	4619      	mov	r1, r3
 8009444:	4610      	mov	r0, r2
 8009446:	f7f7 fe71 	bl	800112c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800944a:	4b24      	ldr	r3, [pc, #144]	@ (80094dc <vTaskSwitchContext+0xfc>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	fab3 f383 	clz	r3, r3
 8009456:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009458:	7afb      	ldrb	r3, [r7, #11]
 800945a:	f1c3 031f 	rsb	r3, r3, #31
 800945e:	617b      	str	r3, [r7, #20]
 8009460:	491f      	ldr	r1, [pc, #124]	@ (80094e0 <vTaskSwitchContext+0x100>)
 8009462:	697a      	ldr	r2, [r7, #20]
 8009464:	4613      	mov	r3, r2
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	4413      	add	r3, r2
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	440b      	add	r3, r1
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d10b      	bne.n	800948c <vTaskSwitchContext+0xac>
	__asm volatile
 8009474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009478:	f383 8811 	msr	BASEPRI, r3
 800947c:	f3bf 8f6f 	isb	sy
 8009480:	f3bf 8f4f 	dsb	sy
 8009484:	607b      	str	r3, [r7, #4]
}
 8009486:	bf00      	nop
 8009488:	bf00      	nop
 800948a:	e7fd      	b.n	8009488 <vTaskSwitchContext+0xa8>
 800948c:	697a      	ldr	r2, [r7, #20]
 800948e:	4613      	mov	r3, r2
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	4413      	add	r3, r2
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	4a12      	ldr	r2, [pc, #72]	@ (80094e0 <vTaskSwitchContext+0x100>)
 8009498:	4413      	add	r3, r2
 800949a:	613b      	str	r3, [r7, #16]
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	685a      	ldr	r2, [r3, #4]
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	605a      	str	r2, [r3, #4]
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	685a      	ldr	r2, [r3, #4]
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	3308      	adds	r3, #8
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d104      	bne.n	80094bc <vTaskSwitchContext+0xdc>
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	685a      	ldr	r2, [r3, #4]
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	605a      	str	r2, [r3, #4]
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	4a05      	ldr	r2, [pc, #20]	@ (80094d8 <vTaskSwitchContext+0xf8>)
 80094c4:	6013      	str	r3, [r2, #0]
}
 80094c6:	bf00      	nop
 80094c8:	3720      	adds	r7, #32
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	20025d58 	.word	0x20025d58
 80094d4:	20025d4c 	.word	0x20025d4c
 80094d8:	20025c78 	.word	0x20025c78
 80094dc:	20025d40 	.word	0x20025d40
 80094e0:	20025c7c 	.word	0x20025c7c

080094e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d10b      	bne.n	800950c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80094f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094f8:	f383 8811 	msr	BASEPRI, r3
 80094fc:	f3bf 8f6f 	isb	sy
 8009500:	f3bf 8f4f 	dsb	sy
 8009504:	60fb      	str	r3, [r7, #12]
}
 8009506:	bf00      	nop
 8009508:	bf00      	nop
 800950a:	e7fd      	b.n	8009508 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800950c:	4b07      	ldr	r3, [pc, #28]	@ (800952c <vTaskPlaceOnEventList+0x48>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	3318      	adds	r3, #24
 8009512:	4619      	mov	r1, r3
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f7ff fb25 	bl	8008b64 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800951a:	2101      	movs	r1, #1
 800951c:	6838      	ldr	r0, [r7, #0]
 800951e:	f000 f9b7 	bl	8009890 <prvAddCurrentTaskToDelayedList>
}
 8009522:	bf00      	nop
 8009524:	3710      	adds	r7, #16
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	20025c78 	.word	0x20025c78

08009530 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b086      	sub	sp, #24
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d10b      	bne.n	800955e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800954a:	f383 8811 	msr	BASEPRI, r3
 800954e:	f3bf 8f6f 	isb	sy
 8009552:	f3bf 8f4f 	dsb	sy
 8009556:	60fb      	str	r3, [r7, #12]
}
 8009558:	bf00      	nop
 800955a:	bf00      	nop
 800955c:	e7fd      	b.n	800955a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	3318      	adds	r3, #24
 8009562:	4618      	mov	r0, r3
 8009564:	f7ff fb37 	bl	8008bd6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009568:	4b1d      	ldr	r3, [pc, #116]	@ (80095e0 <xTaskRemoveFromEventList+0xb0>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d11c      	bne.n	80095aa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	3304      	adds	r3, #4
 8009574:	4618      	mov	r0, r3
 8009576:	f7ff fb2e 	bl	8008bd6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800957e:	2201      	movs	r2, #1
 8009580:	409a      	lsls	r2, r3
 8009582:	4b18      	ldr	r3, [pc, #96]	@ (80095e4 <xTaskRemoveFromEventList+0xb4>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4313      	orrs	r3, r2
 8009588:	4a16      	ldr	r2, [pc, #88]	@ (80095e4 <xTaskRemoveFromEventList+0xb4>)
 800958a:	6013      	str	r3, [r2, #0]
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009590:	4613      	mov	r3, r2
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	4413      	add	r3, r2
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	4a13      	ldr	r2, [pc, #76]	@ (80095e8 <xTaskRemoveFromEventList+0xb8>)
 800959a:	441a      	add	r2, r3
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	3304      	adds	r3, #4
 80095a0:	4619      	mov	r1, r3
 80095a2:	4610      	mov	r0, r2
 80095a4:	f7ff faba 	bl	8008b1c <vListInsertEnd>
 80095a8:	e005      	b.n	80095b6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	3318      	adds	r3, #24
 80095ae:	4619      	mov	r1, r3
 80095b0:	480e      	ldr	r0, [pc, #56]	@ (80095ec <xTaskRemoveFromEventList+0xbc>)
 80095b2:	f7ff fab3 	bl	8008b1c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095ba:	4b0d      	ldr	r3, [pc, #52]	@ (80095f0 <xTaskRemoveFromEventList+0xc0>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d905      	bls.n	80095d0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80095c4:	2301      	movs	r3, #1
 80095c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80095c8:	4b0a      	ldr	r3, [pc, #40]	@ (80095f4 <xTaskRemoveFromEventList+0xc4>)
 80095ca:	2201      	movs	r2, #1
 80095cc:	601a      	str	r2, [r3, #0]
 80095ce:	e001      	b.n	80095d4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80095d0:	2300      	movs	r3, #0
 80095d2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80095d4:	697b      	ldr	r3, [r7, #20]
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3718      	adds	r7, #24
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	20025d58 	.word	0x20025d58
 80095e4:	20025d40 	.word	0x20025d40
 80095e8:	20025c7c 	.word	0x20025c7c
 80095ec:	20025d10 	.word	0x20025d10
 80095f0:	20025c78 	.word	0x20025c78
 80095f4:	20025d4c 	.word	0x20025d4c

080095f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009600:	4b06      	ldr	r3, [pc, #24]	@ (800961c <vTaskInternalSetTimeOutState+0x24>)
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009608:	4b05      	ldr	r3, [pc, #20]	@ (8009620 <vTaskInternalSetTimeOutState+0x28>)
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	605a      	str	r2, [r3, #4]
}
 8009610:	bf00      	nop
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr
 800961c:	20025d50 	.word	0x20025d50
 8009620:	20025d3c 	.word	0x20025d3c

08009624 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b088      	sub	sp, #32
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d10b      	bne.n	800964c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009638:	f383 8811 	msr	BASEPRI, r3
 800963c:	f3bf 8f6f 	isb	sy
 8009640:	f3bf 8f4f 	dsb	sy
 8009644:	613b      	str	r3, [r7, #16]
}
 8009646:	bf00      	nop
 8009648:	bf00      	nop
 800964a:	e7fd      	b.n	8009648 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d10b      	bne.n	800966a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009656:	f383 8811 	msr	BASEPRI, r3
 800965a:	f3bf 8f6f 	isb	sy
 800965e:	f3bf 8f4f 	dsb	sy
 8009662:	60fb      	str	r3, [r7, #12]
}
 8009664:	bf00      	nop
 8009666:	bf00      	nop
 8009668:	e7fd      	b.n	8009666 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800966a:	f000 f98d 	bl	8009988 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800966e:	4b1d      	ldr	r3, [pc, #116]	@ (80096e4 <xTaskCheckForTimeOut+0xc0>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	69ba      	ldr	r2, [r7, #24]
 800967a:	1ad3      	subs	r3, r2, r3
 800967c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009686:	d102      	bne.n	800968e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009688:	2300      	movs	r3, #0
 800968a:	61fb      	str	r3, [r7, #28]
 800968c:	e023      	b.n	80096d6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	4b15      	ldr	r3, [pc, #84]	@ (80096e8 <xTaskCheckForTimeOut+0xc4>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	429a      	cmp	r2, r3
 8009698:	d007      	beq.n	80096aa <xTaskCheckForTimeOut+0x86>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	69ba      	ldr	r2, [r7, #24]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d302      	bcc.n	80096aa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80096a4:	2301      	movs	r3, #1
 80096a6:	61fb      	str	r3, [r7, #28]
 80096a8:	e015      	b.n	80096d6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	697a      	ldr	r2, [r7, #20]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d20b      	bcs.n	80096cc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	1ad2      	subs	r2, r2, r3
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f7ff ff99 	bl	80095f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80096c6:	2300      	movs	r3, #0
 80096c8:	61fb      	str	r3, [r7, #28]
 80096ca:	e004      	b.n	80096d6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	2200      	movs	r2, #0
 80096d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80096d2:	2301      	movs	r3, #1
 80096d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80096d6:	f000 f989 	bl	80099ec <vPortExitCritical>

	return xReturn;
 80096da:	69fb      	ldr	r3, [r7, #28]
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3720      	adds	r7, #32
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}
 80096e4:	20025d3c 	.word	0x20025d3c
 80096e8:	20025d50 	.word	0x20025d50

080096ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80096ec:	b480      	push	{r7}
 80096ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80096f0:	4b03      	ldr	r3, [pc, #12]	@ (8009700 <vTaskMissedYield+0x14>)
 80096f2:	2201      	movs	r2, #1
 80096f4:	601a      	str	r2, [r3, #0]
}
 80096f6:	bf00      	nop
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr
 8009700:	20025d4c 	.word	0x20025d4c

08009704 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800970a:	4b0c      	ldr	r3, [pc, #48]	@ (800973c <prvResetNextTaskUnblockTime+0x38>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d104      	bne.n	800971e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009714:	4b0a      	ldr	r3, [pc, #40]	@ (8009740 <prvResetNextTaskUnblockTime+0x3c>)
 8009716:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800971a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800971c:	e008      	b.n	8009730 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800971e:	4b07      	ldr	r3, [pc, #28]	@ (800973c <prvResetNextTaskUnblockTime+0x38>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	68db      	ldr	r3, [r3, #12]
 8009726:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	4a04      	ldr	r2, [pc, #16]	@ (8009740 <prvResetNextTaskUnblockTime+0x3c>)
 800972e:	6013      	str	r3, [r2, #0]
}
 8009730:	bf00      	nop
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr
 800973c:	20025d08 	.word	0x20025d08
 8009740:	20025d54 	.word	0x20025d54

08009744 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800974a:	4b0b      	ldr	r3, [pc, #44]	@ (8009778 <xTaskGetSchedulerState+0x34>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d102      	bne.n	8009758 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009752:	2301      	movs	r3, #1
 8009754:	607b      	str	r3, [r7, #4]
 8009756:	e008      	b.n	800976a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009758:	4b08      	ldr	r3, [pc, #32]	@ (800977c <xTaskGetSchedulerState+0x38>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d102      	bne.n	8009766 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009760:	2302      	movs	r3, #2
 8009762:	607b      	str	r3, [r7, #4]
 8009764:	e001      	b.n	800976a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009766:	2300      	movs	r3, #0
 8009768:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800976a:	687b      	ldr	r3, [r7, #4]
	}
 800976c:	4618      	mov	r0, r3
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr
 8009778:	20025d44 	.word	0x20025d44
 800977c:	20025d58 	.word	0x20025d58

08009780 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009780:	b580      	push	{r7, lr}
 8009782:	b086      	sub	sp, #24
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800978c:	2300      	movs	r3, #0
 800978e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d070      	beq.n	8009878 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009796:	4b3b      	ldr	r3, [pc, #236]	@ (8009884 <xTaskPriorityDisinherit+0x104>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	693a      	ldr	r2, [r7, #16]
 800979c:	429a      	cmp	r2, r3
 800979e:	d00b      	beq.n	80097b8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80097a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097a4:	f383 8811 	msr	BASEPRI, r3
 80097a8:	f3bf 8f6f 	isb	sy
 80097ac:	f3bf 8f4f 	dsb	sy
 80097b0:	60fb      	str	r3, [r7, #12]
}
 80097b2:	bf00      	nop
 80097b4:	bf00      	nop
 80097b6:	e7fd      	b.n	80097b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d10b      	bne.n	80097d8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80097c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c4:	f383 8811 	msr	BASEPRI, r3
 80097c8:	f3bf 8f6f 	isb	sy
 80097cc:	f3bf 8f4f 	dsb	sy
 80097d0:	60bb      	str	r3, [r7, #8]
}
 80097d2:	bf00      	nop
 80097d4:	bf00      	nop
 80097d6:	e7fd      	b.n	80097d4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097dc:	1e5a      	subs	r2, r3, #1
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d044      	beq.n	8009878 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d140      	bne.n	8009878 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	3304      	adds	r3, #4
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7ff f9eb 	bl	8008bd6 <uxListRemove>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d115      	bne.n	8009832 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800980a:	491f      	ldr	r1, [pc, #124]	@ (8009888 <xTaskPriorityDisinherit+0x108>)
 800980c:	4613      	mov	r3, r2
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	4413      	add	r3, r2
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	440b      	add	r3, r1
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d10a      	bne.n	8009832 <xTaskPriorityDisinherit+0xb2>
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009820:	2201      	movs	r2, #1
 8009822:	fa02 f303 	lsl.w	r3, r2, r3
 8009826:	43da      	mvns	r2, r3
 8009828:	4b18      	ldr	r3, [pc, #96]	@ (800988c <xTaskPriorityDisinherit+0x10c>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4013      	ands	r3, r2
 800982e:	4a17      	ldr	r2, [pc, #92]	@ (800988c <xTaskPriorityDisinherit+0x10c>)
 8009830:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800983e:	f1c3 0207 	rsb	r2, r3, #7
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800984a:	2201      	movs	r2, #1
 800984c:	409a      	lsls	r2, r3
 800984e:	4b0f      	ldr	r3, [pc, #60]	@ (800988c <xTaskPriorityDisinherit+0x10c>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4313      	orrs	r3, r2
 8009854:	4a0d      	ldr	r2, [pc, #52]	@ (800988c <xTaskPriorityDisinherit+0x10c>)
 8009856:	6013      	str	r3, [r2, #0]
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800985c:	4613      	mov	r3, r2
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	4413      	add	r3, r2
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	4a08      	ldr	r2, [pc, #32]	@ (8009888 <xTaskPriorityDisinherit+0x108>)
 8009866:	441a      	add	r2, r3
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	3304      	adds	r3, #4
 800986c:	4619      	mov	r1, r3
 800986e:	4610      	mov	r0, r2
 8009870:	f7ff f954 	bl	8008b1c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009874:	2301      	movs	r3, #1
 8009876:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009878:	697b      	ldr	r3, [r7, #20]
	}
 800987a:	4618      	mov	r0, r3
 800987c:	3718      	adds	r7, #24
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	20025c78 	.word	0x20025c78
 8009888:	20025c7c 	.word	0x20025c7c
 800988c:	20025d40 	.word	0x20025d40

08009890 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800989a:	4b29      	ldr	r3, [pc, #164]	@ (8009940 <prvAddCurrentTaskToDelayedList+0xb0>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098a0:	4b28      	ldr	r3, [pc, #160]	@ (8009944 <prvAddCurrentTaskToDelayedList+0xb4>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	3304      	adds	r3, #4
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7ff f995 	bl	8008bd6 <uxListRemove>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10b      	bne.n	80098ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80098b2:	4b24      	ldr	r3, [pc, #144]	@ (8009944 <prvAddCurrentTaskToDelayedList+0xb4>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098b8:	2201      	movs	r2, #1
 80098ba:	fa02 f303 	lsl.w	r3, r2, r3
 80098be:	43da      	mvns	r2, r3
 80098c0:	4b21      	ldr	r3, [pc, #132]	@ (8009948 <prvAddCurrentTaskToDelayedList+0xb8>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4013      	ands	r3, r2
 80098c6:	4a20      	ldr	r2, [pc, #128]	@ (8009948 <prvAddCurrentTaskToDelayedList+0xb8>)
 80098c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80098d0:	d10a      	bne.n	80098e8 <prvAddCurrentTaskToDelayedList+0x58>
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d007      	beq.n	80098e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098d8:	4b1a      	ldr	r3, [pc, #104]	@ (8009944 <prvAddCurrentTaskToDelayedList+0xb4>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	3304      	adds	r3, #4
 80098de:	4619      	mov	r1, r3
 80098e0:	481a      	ldr	r0, [pc, #104]	@ (800994c <prvAddCurrentTaskToDelayedList+0xbc>)
 80098e2:	f7ff f91b 	bl	8008b1c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80098e6:	e026      	b.n	8009936 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80098e8:	68fa      	ldr	r2, [r7, #12]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	4413      	add	r3, r2
 80098ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80098f0:	4b14      	ldr	r3, [pc, #80]	@ (8009944 <prvAddCurrentTaskToDelayedList+0xb4>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80098f8:	68ba      	ldr	r2, [r7, #8]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d209      	bcs.n	8009914 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009900:	4b13      	ldr	r3, [pc, #76]	@ (8009950 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	4b0f      	ldr	r3, [pc, #60]	@ (8009944 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	3304      	adds	r3, #4
 800990a:	4619      	mov	r1, r3
 800990c:	4610      	mov	r0, r2
 800990e:	f7ff f929 	bl	8008b64 <vListInsert>
}
 8009912:	e010      	b.n	8009936 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009914:	4b0f      	ldr	r3, [pc, #60]	@ (8009954 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	4b0a      	ldr	r3, [pc, #40]	@ (8009944 <prvAddCurrentTaskToDelayedList+0xb4>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	3304      	adds	r3, #4
 800991e:	4619      	mov	r1, r3
 8009920:	4610      	mov	r0, r2
 8009922:	f7ff f91f 	bl	8008b64 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009926:	4b0c      	ldr	r3, [pc, #48]	@ (8009958 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	68ba      	ldr	r2, [r7, #8]
 800992c:	429a      	cmp	r2, r3
 800992e:	d202      	bcs.n	8009936 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009930:	4a09      	ldr	r2, [pc, #36]	@ (8009958 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	6013      	str	r3, [r2, #0]
}
 8009936:	bf00      	nop
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	20025d3c 	.word	0x20025d3c
 8009944:	20025c78 	.word	0x20025c78
 8009948:	20025d40 	.word	0x20025d40
 800994c:	20025d24 	.word	0x20025d24
 8009950:	20025d0c 	.word	0x20025d0c
 8009954:	20025d08 	.word	0x20025d08
 8009958:	20025d54 	.word	0x20025d54
 800995c:	00000000 	.word	0x00000000

08009960 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009960:	4b07      	ldr	r3, [pc, #28]	@ (8009980 <pxCurrentTCBConst2>)
 8009962:	6819      	ldr	r1, [r3, #0]
 8009964:	6808      	ldr	r0, [r1, #0]
 8009966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800996a:	f380 8809 	msr	PSP, r0
 800996e:	f3bf 8f6f 	isb	sy
 8009972:	f04f 0000 	mov.w	r0, #0
 8009976:	f380 8811 	msr	BASEPRI, r0
 800997a:	4770      	bx	lr
 800997c:	f3af 8000 	nop.w

08009980 <pxCurrentTCBConst2>:
 8009980:	20025c78 	.word	0x20025c78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009984:	bf00      	nop
 8009986:	bf00      	nop

08009988 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009988:	b480      	push	{r7}
 800998a:	b083      	sub	sp, #12
 800998c:	af00      	add	r7, sp, #0
	__asm volatile
 800998e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	607b      	str	r3, [r7, #4]
}
 80099a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80099a2:	4b10      	ldr	r3, [pc, #64]	@ (80099e4 <vPortEnterCritical+0x5c>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	3301      	adds	r3, #1
 80099a8:	4a0e      	ldr	r2, [pc, #56]	@ (80099e4 <vPortEnterCritical+0x5c>)
 80099aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80099ac:	4b0d      	ldr	r3, [pc, #52]	@ (80099e4 <vPortEnterCritical+0x5c>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d110      	bne.n	80099d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80099b4:	4b0c      	ldr	r3, [pc, #48]	@ (80099e8 <vPortEnterCritical+0x60>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	b2db      	uxtb	r3, r3
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d00b      	beq.n	80099d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80099be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099c2:	f383 8811 	msr	BASEPRI, r3
 80099c6:	f3bf 8f6f 	isb	sy
 80099ca:	f3bf 8f4f 	dsb	sy
 80099ce:	603b      	str	r3, [r7, #0]
}
 80099d0:	bf00      	nop
 80099d2:	bf00      	nop
 80099d4:	e7fd      	b.n	80099d2 <vPortEnterCritical+0x4a>
	}
}
 80099d6:	bf00      	nop
 80099d8:	370c      	adds	r7, #12
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop
 80099e4:	20000010 	.word	0x20000010
 80099e8:	e000ed04 	.word	0xe000ed04

080099ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80099f2:	4b12      	ldr	r3, [pc, #72]	@ (8009a3c <vPortExitCritical+0x50>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d10b      	bne.n	8009a12 <vPortExitCritical+0x26>
	__asm volatile
 80099fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099fe:	f383 8811 	msr	BASEPRI, r3
 8009a02:	f3bf 8f6f 	isb	sy
 8009a06:	f3bf 8f4f 	dsb	sy
 8009a0a:	607b      	str	r3, [r7, #4]
}
 8009a0c:	bf00      	nop
 8009a0e:	bf00      	nop
 8009a10:	e7fd      	b.n	8009a0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009a12:	4b0a      	ldr	r3, [pc, #40]	@ (8009a3c <vPortExitCritical+0x50>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	3b01      	subs	r3, #1
 8009a18:	4a08      	ldr	r2, [pc, #32]	@ (8009a3c <vPortExitCritical+0x50>)
 8009a1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a1c:	4b07      	ldr	r3, [pc, #28]	@ (8009a3c <vPortExitCritical+0x50>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d105      	bne.n	8009a30 <vPortExitCritical+0x44>
 8009a24:	2300      	movs	r3, #0
 8009a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	f383 8811 	msr	BASEPRI, r3
}
 8009a2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a30:	bf00      	nop
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr
 8009a3c:	20000010 	.word	0x20000010

08009a40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009a40:	f3ef 8009 	mrs	r0, PSP
 8009a44:	f3bf 8f6f 	isb	sy
 8009a48:	4b15      	ldr	r3, [pc, #84]	@ (8009aa0 <pxCurrentTCBConst>)
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	f01e 0f10 	tst.w	lr, #16
 8009a50:	bf08      	it	eq
 8009a52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009a56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a5a:	6010      	str	r0, [r2, #0]
 8009a5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009a60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009a64:	f380 8811 	msr	BASEPRI, r0
 8009a68:	f3bf 8f4f 	dsb	sy
 8009a6c:	f3bf 8f6f 	isb	sy
 8009a70:	f7ff fcb6 	bl	80093e0 <vTaskSwitchContext>
 8009a74:	f04f 0000 	mov.w	r0, #0
 8009a78:	f380 8811 	msr	BASEPRI, r0
 8009a7c:	bc09      	pop	{r0, r3}
 8009a7e:	6819      	ldr	r1, [r3, #0]
 8009a80:	6808      	ldr	r0, [r1, #0]
 8009a82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a86:	f01e 0f10 	tst.w	lr, #16
 8009a8a:	bf08      	it	eq
 8009a8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009a90:	f380 8809 	msr	PSP, r0
 8009a94:	f3bf 8f6f 	isb	sy
 8009a98:	4770      	bx	lr
 8009a9a:	bf00      	nop
 8009a9c:	f3af 8000 	nop.w

08009aa0 <pxCurrentTCBConst>:
 8009aa0:	20025c78 	.word	0x20025c78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009aa4:	bf00      	nop
 8009aa6:	bf00      	nop

08009aa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
	__asm volatile
 8009aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ab2:	f383 8811 	msr	BASEPRI, r3
 8009ab6:	f3bf 8f6f 	isb	sy
 8009aba:	f3bf 8f4f 	dsb	sy
 8009abe:	607b      	str	r3, [r7, #4]
}
 8009ac0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009ac2:	f7ff fbd3 	bl	800926c <xTaskIncrementTick>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d003      	beq.n	8009ad4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009acc:	4b06      	ldr	r3, [pc, #24]	@ (8009ae8 <SysTick_Handler+0x40>)
 8009ace:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ad2:	601a      	str	r2, [r3, #0]
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	f383 8811 	msr	BASEPRI, r3
}
 8009ade:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ae0:	bf00      	nop
 8009ae2:	3708      	adds	r7, #8
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}
 8009ae8:	e000ed04 	.word	0xe000ed04

08009aec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009aec:	b480      	push	{r7}
 8009aee:	b085      	sub	sp, #20
 8009af0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009af2:	f3ef 8305 	mrs	r3, IPSR
 8009af6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2b0f      	cmp	r3, #15
 8009afc:	d915      	bls.n	8009b2a <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009afe:	4a18      	ldr	r2, [pc, #96]	@ (8009b60 <vPortValidateInterruptPriority+0x74>)
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	4413      	add	r3, r2
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009b08:	4b16      	ldr	r3, [pc, #88]	@ (8009b64 <vPortValidateInterruptPriority+0x78>)
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	7afa      	ldrb	r2, [r7, #11]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d20b      	bcs.n	8009b2a <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b16:	f383 8811 	msr	BASEPRI, r3
 8009b1a:	f3bf 8f6f 	isb	sy
 8009b1e:	f3bf 8f4f 	dsb	sy
 8009b22:	607b      	str	r3, [r7, #4]
}
 8009b24:	bf00      	nop
 8009b26:	bf00      	nop
 8009b28:	e7fd      	b.n	8009b26 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8009b68 <vPortValidateInterruptPriority+0x7c>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009b32:	4b0e      	ldr	r3, [pc, #56]	@ (8009b6c <vPortValidateInterruptPriority+0x80>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d90b      	bls.n	8009b52 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b3e:	f383 8811 	msr	BASEPRI, r3
 8009b42:	f3bf 8f6f 	isb	sy
 8009b46:	f3bf 8f4f 	dsb	sy
 8009b4a:	603b      	str	r3, [r7, #0]
}
 8009b4c:	bf00      	nop
 8009b4e:	bf00      	nop
 8009b50:	e7fd      	b.n	8009b4e <vPortValidateInterruptPriority+0x62>
	}
 8009b52:	bf00      	nop
 8009b54:	3714      	adds	r7, #20
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr
 8009b5e:	bf00      	nop
 8009b60:	e000e3f0 	.word	0xe000e3f0
 8009b64:	20025d5c 	.word	0x20025d5c
 8009b68:	e000ed0c 	.word	0xe000ed0c
 8009b6c:	20025d60 	.word	0x20025d60

08009b70 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7fe fe9e 	bl	80088c0 <USBH_LL_IncTimer>
}
 8009b84:	bf00      	nop
 8009b86:	3708      	adds	r7, #8
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7fe fee2 	bl	8008964 <USBH_LL_Connect>
}
 8009ba0:	bf00      	nop
 8009ba2:	3708      	adds	r7, #8
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7fe fef7 	bl	80089aa <USBH_LL_Disconnect>
}
 8009bbc:	bf00      	nop
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	460b      	mov	r3, r1
 8009bce:	70fb      	strb	r3, [r7, #3]
 8009bd0:	4613      	mov	r3, r2
 8009bd2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7fe ff17 	bl	8008a0e <USBH_LL_NotifyURBChange>
#endif
}
 8009be0:	bf00      	nop
 8009be2:	3708      	adds	r7, #8
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f7fe fe8c 	bl	8008914 <USBH_LL_PortEnabled>
}
 8009bfc:	bf00      	nop
 8009bfe:	3708      	adds	r7, #8
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7fe fe98 	bl	8008948 <USBH_LL_PortDisabled>
}
 8009c18:	bf00      	nop
 8009c1a:	3708      	adds	r7, #8
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7f9 feb7 	bl	80039aa <HAL_HCD_Stop>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009c40:	7bfb      	ldrb	r3, [r7, #15]
 8009c42:	4618      	mov	r0, r3
 8009c44:	f000 f808 	bl	8009c58 <USBH_Get_USB_Status>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3710      	adds	r7, #16
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
	...

08009c58 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	4603      	mov	r3, r0
 8009c60:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c62:	2300      	movs	r3, #0
 8009c64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c66:	79fb      	ldrb	r3, [r7, #7]
 8009c68:	2b03      	cmp	r3, #3
 8009c6a:	d817      	bhi.n	8009c9c <USBH_Get_USB_Status+0x44>
 8009c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8009c74 <USBH_Get_USB_Status+0x1c>)
 8009c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c72:	bf00      	nop
 8009c74:	08009c85 	.word	0x08009c85
 8009c78:	08009c8b 	.word	0x08009c8b
 8009c7c:	08009c91 	.word	0x08009c91
 8009c80:	08009c97 	.word	0x08009c97
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009c84:	2300      	movs	r3, #0
 8009c86:	73fb      	strb	r3, [r7, #15]
    break;
 8009c88:	e00b      	b.n	8009ca2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009c8a:	2302      	movs	r3, #2
 8009c8c:	73fb      	strb	r3, [r7, #15]
    break;
 8009c8e:	e008      	b.n	8009ca2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009c90:	2301      	movs	r3, #1
 8009c92:	73fb      	strb	r3, [r7, #15]
    break;
 8009c94:	e005      	b.n	8009ca2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009c96:	2302      	movs	r3, #2
 8009c98:	73fb      	strb	r3, [r7, #15]
    break;
 8009c9a:	e002      	b.n	8009ca2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009c9c:	2302      	movs	r3, #2
 8009c9e:	73fb      	strb	r3, [r7, #15]
    break;
 8009ca0:	bf00      	nop
  }
  return usb_status;
 8009ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3714      	adds	r7, #20
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <memset>:
 8009cb0:	4402      	add	r2, r0
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d100      	bne.n	8009cba <memset+0xa>
 8009cb8:	4770      	bx	lr
 8009cba:	f803 1b01 	strb.w	r1, [r3], #1
 8009cbe:	e7f9      	b.n	8009cb4 <memset+0x4>

08009cc0 <__errno>:
 8009cc0:	4b01      	ldr	r3, [pc, #4]	@ (8009cc8 <__errno+0x8>)
 8009cc2:	6818      	ldr	r0, [r3, #0]
 8009cc4:	4770      	bx	lr
 8009cc6:	bf00      	nop
 8009cc8:	20000014 	.word	0x20000014

08009ccc <__libc_init_array>:
 8009ccc:	b570      	push	{r4, r5, r6, lr}
 8009cce:	4d0d      	ldr	r5, [pc, #52]	@ (8009d04 <__libc_init_array+0x38>)
 8009cd0:	4c0d      	ldr	r4, [pc, #52]	@ (8009d08 <__libc_init_array+0x3c>)
 8009cd2:	1b64      	subs	r4, r4, r5
 8009cd4:	10a4      	asrs	r4, r4, #2
 8009cd6:	2600      	movs	r6, #0
 8009cd8:	42a6      	cmp	r6, r4
 8009cda:	d109      	bne.n	8009cf0 <__libc_init_array+0x24>
 8009cdc:	4d0b      	ldr	r5, [pc, #44]	@ (8009d0c <__libc_init_array+0x40>)
 8009cde:	4c0c      	ldr	r4, [pc, #48]	@ (8009d10 <__libc_init_array+0x44>)
 8009ce0:	f000 ff84 	bl	800abec <_init>
 8009ce4:	1b64      	subs	r4, r4, r5
 8009ce6:	10a4      	asrs	r4, r4, #2
 8009ce8:	2600      	movs	r6, #0
 8009cea:	42a6      	cmp	r6, r4
 8009cec:	d105      	bne.n	8009cfa <__libc_init_array+0x2e>
 8009cee:	bd70      	pop	{r4, r5, r6, pc}
 8009cf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cf4:	4798      	blx	r3
 8009cf6:	3601      	adds	r6, #1
 8009cf8:	e7ee      	b.n	8009cd8 <__libc_init_array+0xc>
 8009cfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cfe:	4798      	blx	r3
 8009d00:	3601      	adds	r6, #1
 8009d02:	e7f2      	b.n	8009cea <__libc_init_array+0x1e>
 8009d04:	0800ace0 	.word	0x0800ace0
 8009d08:	0800ace0 	.word	0x0800ace0
 8009d0c:	0800ace0 	.word	0x0800ace0
 8009d10:	0800ace4 	.word	0x0800ace4

08009d14 <memcpy>:
 8009d14:	440a      	add	r2, r1
 8009d16:	4291      	cmp	r1, r2
 8009d18:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009d1c:	d100      	bne.n	8009d20 <memcpy+0xc>
 8009d1e:	4770      	bx	lr
 8009d20:	b510      	push	{r4, lr}
 8009d22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d2a:	4291      	cmp	r1, r2
 8009d2c:	d1f9      	bne.n	8009d22 <memcpy+0xe>
 8009d2e:	bd10      	pop	{r4, pc}

08009d30 <pow>:
 8009d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d32:	ed2d 8b02 	vpush	{d8}
 8009d36:	eeb0 8a40 	vmov.f32	s16, s0
 8009d3a:	eef0 8a60 	vmov.f32	s17, s1
 8009d3e:	ec55 4b11 	vmov	r4, r5, d1
 8009d42:	f000 f871 	bl	8009e28 <__ieee754_pow>
 8009d46:	4622      	mov	r2, r4
 8009d48:	462b      	mov	r3, r5
 8009d4a:	4620      	mov	r0, r4
 8009d4c:	4629      	mov	r1, r5
 8009d4e:	ec57 6b10 	vmov	r6, r7, d0
 8009d52:	f7f6 fea3 	bl	8000a9c <__aeabi_dcmpun>
 8009d56:	2800      	cmp	r0, #0
 8009d58:	d13b      	bne.n	8009dd2 <pow+0xa2>
 8009d5a:	ec51 0b18 	vmov	r0, r1, d8
 8009d5e:	2200      	movs	r2, #0
 8009d60:	2300      	movs	r3, #0
 8009d62:	f7f6 fe69 	bl	8000a38 <__aeabi_dcmpeq>
 8009d66:	b1b8      	cbz	r0, 8009d98 <pow+0x68>
 8009d68:	2200      	movs	r2, #0
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	4629      	mov	r1, r5
 8009d70:	f7f6 fe62 	bl	8000a38 <__aeabi_dcmpeq>
 8009d74:	2800      	cmp	r0, #0
 8009d76:	d146      	bne.n	8009e06 <pow+0xd6>
 8009d78:	ec45 4b10 	vmov	d0, r4, r5
 8009d7c:	f000 f848 	bl	8009e10 <finite>
 8009d80:	b338      	cbz	r0, 8009dd2 <pow+0xa2>
 8009d82:	2200      	movs	r2, #0
 8009d84:	2300      	movs	r3, #0
 8009d86:	4620      	mov	r0, r4
 8009d88:	4629      	mov	r1, r5
 8009d8a:	f7f6 fe5f 	bl	8000a4c <__aeabi_dcmplt>
 8009d8e:	b300      	cbz	r0, 8009dd2 <pow+0xa2>
 8009d90:	f7ff ff96 	bl	8009cc0 <__errno>
 8009d94:	2322      	movs	r3, #34	@ 0x22
 8009d96:	e01b      	b.n	8009dd0 <pow+0xa0>
 8009d98:	ec47 6b10 	vmov	d0, r6, r7
 8009d9c:	f000 f838 	bl	8009e10 <finite>
 8009da0:	b9e0      	cbnz	r0, 8009ddc <pow+0xac>
 8009da2:	eeb0 0a48 	vmov.f32	s0, s16
 8009da6:	eef0 0a68 	vmov.f32	s1, s17
 8009daa:	f000 f831 	bl	8009e10 <finite>
 8009dae:	b1a8      	cbz	r0, 8009ddc <pow+0xac>
 8009db0:	ec45 4b10 	vmov	d0, r4, r5
 8009db4:	f000 f82c 	bl	8009e10 <finite>
 8009db8:	b180      	cbz	r0, 8009ddc <pow+0xac>
 8009dba:	4632      	mov	r2, r6
 8009dbc:	463b      	mov	r3, r7
 8009dbe:	4630      	mov	r0, r6
 8009dc0:	4639      	mov	r1, r7
 8009dc2:	f7f6 fe6b 	bl	8000a9c <__aeabi_dcmpun>
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	d0e2      	beq.n	8009d90 <pow+0x60>
 8009dca:	f7ff ff79 	bl	8009cc0 <__errno>
 8009dce:	2321      	movs	r3, #33	@ 0x21
 8009dd0:	6003      	str	r3, [r0, #0]
 8009dd2:	ecbd 8b02 	vpop	{d8}
 8009dd6:	ec47 6b10 	vmov	d0, r6, r7
 8009dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ddc:	2200      	movs	r2, #0
 8009dde:	2300      	movs	r3, #0
 8009de0:	4630      	mov	r0, r6
 8009de2:	4639      	mov	r1, r7
 8009de4:	f7f6 fe28 	bl	8000a38 <__aeabi_dcmpeq>
 8009de8:	2800      	cmp	r0, #0
 8009dea:	d0f2      	beq.n	8009dd2 <pow+0xa2>
 8009dec:	eeb0 0a48 	vmov.f32	s0, s16
 8009df0:	eef0 0a68 	vmov.f32	s1, s17
 8009df4:	f000 f80c 	bl	8009e10 <finite>
 8009df8:	2800      	cmp	r0, #0
 8009dfa:	d0ea      	beq.n	8009dd2 <pow+0xa2>
 8009dfc:	ec45 4b10 	vmov	d0, r4, r5
 8009e00:	f000 f806 	bl	8009e10 <finite>
 8009e04:	e7c3      	b.n	8009d8e <pow+0x5e>
 8009e06:	4f01      	ldr	r7, [pc, #4]	@ (8009e0c <pow+0xdc>)
 8009e08:	2600      	movs	r6, #0
 8009e0a:	e7e2      	b.n	8009dd2 <pow+0xa2>
 8009e0c:	3ff00000 	.word	0x3ff00000

08009e10 <finite>:
 8009e10:	b082      	sub	sp, #8
 8009e12:	ed8d 0b00 	vstr	d0, [sp]
 8009e16:	9801      	ldr	r0, [sp, #4]
 8009e18:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8009e1c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009e20:	0fc0      	lsrs	r0, r0, #31
 8009e22:	b002      	add	sp, #8
 8009e24:	4770      	bx	lr
	...

08009e28 <__ieee754_pow>:
 8009e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e2c:	b091      	sub	sp, #68	@ 0x44
 8009e2e:	ed8d 1b00 	vstr	d1, [sp]
 8009e32:	e9dd 1900 	ldrd	r1, r9, [sp]
 8009e36:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8009e3a:	ea5a 0001 	orrs.w	r0, sl, r1
 8009e3e:	ec57 6b10 	vmov	r6, r7, d0
 8009e42:	d113      	bne.n	8009e6c <__ieee754_pow+0x44>
 8009e44:	19b3      	adds	r3, r6, r6
 8009e46:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8009e4a:	4152      	adcs	r2, r2
 8009e4c:	4298      	cmp	r0, r3
 8009e4e:	4b9a      	ldr	r3, [pc, #616]	@ (800a0b8 <__ieee754_pow+0x290>)
 8009e50:	4193      	sbcs	r3, r2
 8009e52:	f080 84ee 	bcs.w	800a832 <__ieee754_pow+0xa0a>
 8009e56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e5a:	4630      	mov	r0, r6
 8009e5c:	4639      	mov	r1, r7
 8009e5e:	f7f6 f9cd 	bl	80001fc <__adddf3>
 8009e62:	ec41 0b10 	vmov	d0, r0, r1
 8009e66:	b011      	add	sp, #68	@ 0x44
 8009e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e6c:	4a93      	ldr	r2, [pc, #588]	@ (800a0bc <__ieee754_pow+0x294>)
 8009e6e:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8009e72:	4295      	cmp	r5, r2
 8009e74:	46b8      	mov	r8, r7
 8009e76:	4633      	mov	r3, r6
 8009e78:	d80a      	bhi.n	8009e90 <__ieee754_pow+0x68>
 8009e7a:	d104      	bne.n	8009e86 <__ieee754_pow+0x5e>
 8009e7c:	2e00      	cmp	r6, #0
 8009e7e:	d1ea      	bne.n	8009e56 <__ieee754_pow+0x2e>
 8009e80:	45aa      	cmp	sl, r5
 8009e82:	d8e8      	bhi.n	8009e56 <__ieee754_pow+0x2e>
 8009e84:	e001      	b.n	8009e8a <__ieee754_pow+0x62>
 8009e86:	4592      	cmp	sl, r2
 8009e88:	d802      	bhi.n	8009e90 <__ieee754_pow+0x68>
 8009e8a:	4592      	cmp	sl, r2
 8009e8c:	d10f      	bne.n	8009eae <__ieee754_pow+0x86>
 8009e8e:	b171      	cbz	r1, 8009eae <__ieee754_pow+0x86>
 8009e90:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8009e94:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8009e98:	ea58 0803 	orrs.w	r8, r8, r3
 8009e9c:	d1db      	bne.n	8009e56 <__ieee754_pow+0x2e>
 8009e9e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009ea2:	18db      	adds	r3, r3, r3
 8009ea4:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8009ea8:	4152      	adcs	r2, r2
 8009eaa:	4598      	cmp	r8, r3
 8009eac:	e7cf      	b.n	8009e4e <__ieee754_pow+0x26>
 8009eae:	f1b8 0f00 	cmp.w	r8, #0
 8009eb2:	46ab      	mov	fp, r5
 8009eb4:	da43      	bge.n	8009f3e <__ieee754_pow+0x116>
 8009eb6:	4a82      	ldr	r2, [pc, #520]	@ (800a0c0 <__ieee754_pow+0x298>)
 8009eb8:	4592      	cmp	sl, r2
 8009eba:	d856      	bhi.n	8009f6a <__ieee754_pow+0x142>
 8009ebc:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8009ec0:	4592      	cmp	sl, r2
 8009ec2:	f240 84c5 	bls.w	800a850 <__ieee754_pow+0xa28>
 8009ec6:	ea4f 522a 	mov.w	r2, sl, asr #20
 8009eca:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009ece:	2a14      	cmp	r2, #20
 8009ed0:	dd18      	ble.n	8009f04 <__ieee754_pow+0xdc>
 8009ed2:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8009ed6:	fa21 f402 	lsr.w	r4, r1, r2
 8009eda:	fa04 f202 	lsl.w	r2, r4, r2
 8009ede:	428a      	cmp	r2, r1
 8009ee0:	f040 84b6 	bne.w	800a850 <__ieee754_pow+0xa28>
 8009ee4:	f004 0401 	and.w	r4, r4, #1
 8009ee8:	f1c4 0402 	rsb	r4, r4, #2
 8009eec:	2900      	cmp	r1, #0
 8009eee:	d159      	bne.n	8009fa4 <__ieee754_pow+0x17c>
 8009ef0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8009ef4:	d148      	bne.n	8009f88 <__ieee754_pow+0x160>
 8009ef6:	4632      	mov	r2, r6
 8009ef8:	463b      	mov	r3, r7
 8009efa:	4630      	mov	r0, r6
 8009efc:	4639      	mov	r1, r7
 8009efe:	f7f6 fb33 	bl	8000568 <__aeabi_dmul>
 8009f02:	e7ae      	b.n	8009e62 <__ieee754_pow+0x3a>
 8009f04:	2900      	cmp	r1, #0
 8009f06:	d14c      	bne.n	8009fa2 <__ieee754_pow+0x17a>
 8009f08:	f1c2 0214 	rsb	r2, r2, #20
 8009f0c:	fa4a f402 	asr.w	r4, sl, r2
 8009f10:	fa04 f202 	lsl.w	r2, r4, r2
 8009f14:	4552      	cmp	r2, sl
 8009f16:	f040 8498 	bne.w	800a84a <__ieee754_pow+0xa22>
 8009f1a:	f004 0401 	and.w	r4, r4, #1
 8009f1e:	f1c4 0402 	rsb	r4, r4, #2
 8009f22:	4a68      	ldr	r2, [pc, #416]	@ (800a0c4 <__ieee754_pow+0x29c>)
 8009f24:	4592      	cmp	sl, r2
 8009f26:	d1e3      	bne.n	8009ef0 <__ieee754_pow+0xc8>
 8009f28:	f1b9 0f00 	cmp.w	r9, #0
 8009f2c:	f280 8489 	bge.w	800a842 <__ieee754_pow+0xa1a>
 8009f30:	4964      	ldr	r1, [pc, #400]	@ (800a0c4 <__ieee754_pow+0x29c>)
 8009f32:	4632      	mov	r2, r6
 8009f34:	463b      	mov	r3, r7
 8009f36:	2000      	movs	r0, #0
 8009f38:	f7f6 fc40 	bl	80007bc <__aeabi_ddiv>
 8009f3c:	e791      	b.n	8009e62 <__ieee754_pow+0x3a>
 8009f3e:	2400      	movs	r4, #0
 8009f40:	bb81      	cbnz	r1, 8009fa4 <__ieee754_pow+0x17c>
 8009f42:	4a5e      	ldr	r2, [pc, #376]	@ (800a0bc <__ieee754_pow+0x294>)
 8009f44:	4592      	cmp	sl, r2
 8009f46:	d1ec      	bne.n	8009f22 <__ieee754_pow+0xfa>
 8009f48:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8009f4c:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8009f50:	431a      	orrs	r2, r3
 8009f52:	f000 846e 	beq.w	800a832 <__ieee754_pow+0xa0a>
 8009f56:	4b5c      	ldr	r3, [pc, #368]	@ (800a0c8 <__ieee754_pow+0x2a0>)
 8009f58:	429d      	cmp	r5, r3
 8009f5a:	d908      	bls.n	8009f6e <__ieee754_pow+0x146>
 8009f5c:	f1b9 0f00 	cmp.w	r9, #0
 8009f60:	f280 846b 	bge.w	800a83a <__ieee754_pow+0xa12>
 8009f64:	2000      	movs	r0, #0
 8009f66:	2100      	movs	r1, #0
 8009f68:	e77b      	b.n	8009e62 <__ieee754_pow+0x3a>
 8009f6a:	2402      	movs	r4, #2
 8009f6c:	e7e8      	b.n	8009f40 <__ieee754_pow+0x118>
 8009f6e:	f1b9 0f00 	cmp.w	r9, #0
 8009f72:	f04f 0000 	mov.w	r0, #0
 8009f76:	f04f 0100 	mov.w	r1, #0
 8009f7a:	f6bf af72 	bge.w	8009e62 <__ieee754_pow+0x3a>
 8009f7e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009f82:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009f86:	e76c      	b.n	8009e62 <__ieee754_pow+0x3a>
 8009f88:	4a50      	ldr	r2, [pc, #320]	@ (800a0cc <__ieee754_pow+0x2a4>)
 8009f8a:	4591      	cmp	r9, r2
 8009f8c:	d10a      	bne.n	8009fa4 <__ieee754_pow+0x17c>
 8009f8e:	f1b8 0f00 	cmp.w	r8, #0
 8009f92:	db07      	blt.n	8009fa4 <__ieee754_pow+0x17c>
 8009f94:	ec47 6b10 	vmov	d0, r6, r7
 8009f98:	b011      	add	sp, #68	@ 0x44
 8009f9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f9e:	f000 bd4f 	b.w	800aa40 <__ieee754_sqrt>
 8009fa2:	2400      	movs	r4, #0
 8009fa4:	ec47 6b10 	vmov	d0, r6, r7
 8009fa8:	9302      	str	r3, [sp, #8]
 8009faa:	f000 fc87 	bl	800a8bc <fabs>
 8009fae:	9b02      	ldr	r3, [sp, #8]
 8009fb0:	ec51 0b10 	vmov	r0, r1, d0
 8009fb4:	bb43      	cbnz	r3, 800a008 <__ieee754_pow+0x1e0>
 8009fb6:	4b43      	ldr	r3, [pc, #268]	@ (800a0c4 <__ieee754_pow+0x29c>)
 8009fb8:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d000      	beq.n	8009fc2 <__ieee754_pow+0x19a>
 8009fc0:	bb15      	cbnz	r5, 800a008 <__ieee754_pow+0x1e0>
 8009fc2:	f1b9 0f00 	cmp.w	r9, #0
 8009fc6:	da05      	bge.n	8009fd4 <__ieee754_pow+0x1ac>
 8009fc8:	4602      	mov	r2, r0
 8009fca:	460b      	mov	r3, r1
 8009fcc:	2000      	movs	r0, #0
 8009fce:	493d      	ldr	r1, [pc, #244]	@ (800a0c4 <__ieee754_pow+0x29c>)
 8009fd0:	f7f6 fbf4 	bl	80007bc <__aeabi_ddiv>
 8009fd4:	f1b8 0f00 	cmp.w	r8, #0
 8009fd8:	f6bf af43 	bge.w	8009e62 <__ieee754_pow+0x3a>
 8009fdc:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8009fe0:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8009fe4:	4325      	orrs	r5, r4
 8009fe6:	d108      	bne.n	8009ffa <__ieee754_pow+0x1d2>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	460b      	mov	r3, r1
 8009fec:	4610      	mov	r0, r2
 8009fee:	4619      	mov	r1, r3
 8009ff0:	f7f6 f902 	bl	80001f8 <__aeabi_dsub>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	e79e      	b.n	8009f38 <__ieee754_pow+0x110>
 8009ffa:	2c01      	cmp	r4, #1
 8009ffc:	f47f af31 	bne.w	8009e62 <__ieee754_pow+0x3a>
 800a000:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a004:	4619      	mov	r1, r3
 800a006:	e72c      	b.n	8009e62 <__ieee754_pow+0x3a>
 800a008:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800a00c:	3b01      	subs	r3, #1
 800a00e:	ea53 0204 	orrs.w	r2, r3, r4
 800a012:	d102      	bne.n	800a01a <__ieee754_pow+0x1f2>
 800a014:	4632      	mov	r2, r6
 800a016:	463b      	mov	r3, r7
 800a018:	e7e8      	b.n	8009fec <__ieee754_pow+0x1c4>
 800a01a:	3c01      	subs	r4, #1
 800a01c:	431c      	orrs	r4, r3
 800a01e:	d016      	beq.n	800a04e <__ieee754_pow+0x226>
 800a020:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a0a8 <__ieee754_pow+0x280>
 800a024:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800a028:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a02c:	f240 8110 	bls.w	800a250 <__ieee754_pow+0x428>
 800a030:	4b27      	ldr	r3, [pc, #156]	@ (800a0d0 <__ieee754_pow+0x2a8>)
 800a032:	459a      	cmp	sl, r3
 800a034:	4b24      	ldr	r3, [pc, #144]	@ (800a0c8 <__ieee754_pow+0x2a0>)
 800a036:	d916      	bls.n	800a066 <__ieee754_pow+0x23e>
 800a038:	429d      	cmp	r5, r3
 800a03a:	d80b      	bhi.n	800a054 <__ieee754_pow+0x22c>
 800a03c:	f1b9 0f00 	cmp.w	r9, #0
 800a040:	da0b      	bge.n	800a05a <__ieee754_pow+0x232>
 800a042:	2000      	movs	r0, #0
 800a044:	b011      	add	sp, #68	@ 0x44
 800a046:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a04a:	f000 bcf1 	b.w	800aa30 <__math_oflow>
 800a04e:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 800a0b0 <__ieee754_pow+0x288>
 800a052:	e7e7      	b.n	800a024 <__ieee754_pow+0x1fc>
 800a054:	f1b9 0f00 	cmp.w	r9, #0
 800a058:	dcf3      	bgt.n	800a042 <__ieee754_pow+0x21a>
 800a05a:	2000      	movs	r0, #0
 800a05c:	b011      	add	sp, #68	@ 0x44
 800a05e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a062:	f000 bcdd 	b.w	800aa20 <__math_uflow>
 800a066:	429d      	cmp	r5, r3
 800a068:	d20c      	bcs.n	800a084 <__ieee754_pow+0x25c>
 800a06a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a06e:	2200      	movs	r2, #0
 800a070:	2300      	movs	r3, #0
 800a072:	f7f6 fceb 	bl	8000a4c <__aeabi_dcmplt>
 800a076:	3800      	subs	r0, #0
 800a078:	bf18      	it	ne
 800a07a:	2001      	movne	r0, #1
 800a07c:	f1b9 0f00 	cmp.w	r9, #0
 800a080:	daec      	bge.n	800a05c <__ieee754_pow+0x234>
 800a082:	e7df      	b.n	800a044 <__ieee754_pow+0x21c>
 800a084:	4b0f      	ldr	r3, [pc, #60]	@ (800a0c4 <__ieee754_pow+0x29c>)
 800a086:	429d      	cmp	r5, r3
 800a088:	f04f 0200 	mov.w	r2, #0
 800a08c:	d922      	bls.n	800a0d4 <__ieee754_pow+0x2ac>
 800a08e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a092:	2300      	movs	r3, #0
 800a094:	f7f6 fcda 	bl	8000a4c <__aeabi_dcmplt>
 800a098:	3800      	subs	r0, #0
 800a09a:	bf18      	it	ne
 800a09c:	2001      	movne	r0, #1
 800a09e:	f1b9 0f00 	cmp.w	r9, #0
 800a0a2:	dccf      	bgt.n	800a044 <__ieee754_pow+0x21c>
 800a0a4:	e7da      	b.n	800a05c <__ieee754_pow+0x234>
 800a0a6:	bf00      	nop
 800a0a8:	00000000 	.word	0x00000000
 800a0ac:	3ff00000 	.word	0x3ff00000
 800a0b0:	00000000 	.word	0x00000000
 800a0b4:	bff00000 	.word	0xbff00000
 800a0b8:	fff00000 	.word	0xfff00000
 800a0bc:	7ff00000 	.word	0x7ff00000
 800a0c0:	433fffff 	.word	0x433fffff
 800a0c4:	3ff00000 	.word	0x3ff00000
 800a0c8:	3fefffff 	.word	0x3fefffff
 800a0cc:	3fe00000 	.word	0x3fe00000
 800a0d0:	43f00000 	.word	0x43f00000
 800a0d4:	4b5a      	ldr	r3, [pc, #360]	@ (800a240 <__ieee754_pow+0x418>)
 800a0d6:	f7f6 f88f 	bl	80001f8 <__aeabi_dsub>
 800a0da:	a351      	add	r3, pc, #324	@ (adr r3, 800a220 <__ieee754_pow+0x3f8>)
 800a0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e0:	4604      	mov	r4, r0
 800a0e2:	460d      	mov	r5, r1
 800a0e4:	f7f6 fa40 	bl	8000568 <__aeabi_dmul>
 800a0e8:	a34f      	add	r3, pc, #316	@ (adr r3, 800a228 <__ieee754_pow+0x400>)
 800a0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ee:	4606      	mov	r6, r0
 800a0f0:	460f      	mov	r7, r1
 800a0f2:	4620      	mov	r0, r4
 800a0f4:	4629      	mov	r1, r5
 800a0f6:	f7f6 fa37 	bl	8000568 <__aeabi_dmul>
 800a0fa:	4b52      	ldr	r3, [pc, #328]	@ (800a244 <__ieee754_pow+0x41c>)
 800a0fc:	4682      	mov	sl, r0
 800a0fe:	468b      	mov	fp, r1
 800a100:	2200      	movs	r2, #0
 800a102:	4620      	mov	r0, r4
 800a104:	4629      	mov	r1, r5
 800a106:	f7f6 fa2f 	bl	8000568 <__aeabi_dmul>
 800a10a:	4602      	mov	r2, r0
 800a10c:	460b      	mov	r3, r1
 800a10e:	a148      	add	r1, pc, #288	@ (adr r1, 800a230 <__ieee754_pow+0x408>)
 800a110:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a114:	f7f6 f870 	bl	80001f8 <__aeabi_dsub>
 800a118:	4622      	mov	r2, r4
 800a11a:	462b      	mov	r3, r5
 800a11c:	f7f6 fa24 	bl	8000568 <__aeabi_dmul>
 800a120:	4602      	mov	r2, r0
 800a122:	460b      	mov	r3, r1
 800a124:	2000      	movs	r0, #0
 800a126:	4948      	ldr	r1, [pc, #288]	@ (800a248 <__ieee754_pow+0x420>)
 800a128:	f7f6 f866 	bl	80001f8 <__aeabi_dsub>
 800a12c:	4622      	mov	r2, r4
 800a12e:	4680      	mov	r8, r0
 800a130:	4689      	mov	r9, r1
 800a132:	462b      	mov	r3, r5
 800a134:	4620      	mov	r0, r4
 800a136:	4629      	mov	r1, r5
 800a138:	f7f6 fa16 	bl	8000568 <__aeabi_dmul>
 800a13c:	4602      	mov	r2, r0
 800a13e:	460b      	mov	r3, r1
 800a140:	4640      	mov	r0, r8
 800a142:	4649      	mov	r1, r9
 800a144:	f7f6 fa10 	bl	8000568 <__aeabi_dmul>
 800a148:	a33b      	add	r3, pc, #236	@ (adr r3, 800a238 <__ieee754_pow+0x410>)
 800a14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14e:	f7f6 fa0b 	bl	8000568 <__aeabi_dmul>
 800a152:	4602      	mov	r2, r0
 800a154:	460b      	mov	r3, r1
 800a156:	4650      	mov	r0, sl
 800a158:	4659      	mov	r1, fp
 800a15a:	f7f6 f84d 	bl	80001f8 <__aeabi_dsub>
 800a15e:	4602      	mov	r2, r0
 800a160:	460b      	mov	r3, r1
 800a162:	4680      	mov	r8, r0
 800a164:	4689      	mov	r9, r1
 800a166:	4630      	mov	r0, r6
 800a168:	4639      	mov	r1, r7
 800a16a:	f7f6 f847 	bl	80001fc <__adddf3>
 800a16e:	2400      	movs	r4, #0
 800a170:	4632      	mov	r2, r6
 800a172:	463b      	mov	r3, r7
 800a174:	4620      	mov	r0, r4
 800a176:	460d      	mov	r5, r1
 800a178:	f7f6 f83e 	bl	80001f8 <__aeabi_dsub>
 800a17c:	4602      	mov	r2, r0
 800a17e:	460b      	mov	r3, r1
 800a180:	4640      	mov	r0, r8
 800a182:	4649      	mov	r1, r9
 800a184:	f7f6 f838 	bl	80001f8 <__aeabi_dsub>
 800a188:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a18c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a190:	2300      	movs	r3, #0
 800a192:	9304      	str	r3, [sp, #16]
 800a194:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a198:	4606      	mov	r6, r0
 800a19a:	460f      	mov	r7, r1
 800a19c:	465b      	mov	r3, fp
 800a19e:	4652      	mov	r2, sl
 800a1a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1a4:	f7f6 f828 	bl	80001f8 <__aeabi_dsub>
 800a1a8:	4622      	mov	r2, r4
 800a1aa:	462b      	mov	r3, r5
 800a1ac:	f7f6 f9dc 	bl	8000568 <__aeabi_dmul>
 800a1b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1b4:	4680      	mov	r8, r0
 800a1b6:	4689      	mov	r9, r1
 800a1b8:	4630      	mov	r0, r6
 800a1ba:	4639      	mov	r1, r7
 800a1bc:	f7f6 f9d4 	bl	8000568 <__aeabi_dmul>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	4640      	mov	r0, r8
 800a1c6:	4649      	mov	r1, r9
 800a1c8:	f7f6 f818 	bl	80001fc <__adddf3>
 800a1cc:	465b      	mov	r3, fp
 800a1ce:	4606      	mov	r6, r0
 800a1d0:	460f      	mov	r7, r1
 800a1d2:	4652      	mov	r2, sl
 800a1d4:	4620      	mov	r0, r4
 800a1d6:	4629      	mov	r1, r5
 800a1d8:	f7f6 f9c6 	bl	8000568 <__aeabi_dmul>
 800a1dc:	460b      	mov	r3, r1
 800a1de:	4602      	mov	r2, r0
 800a1e0:	4680      	mov	r8, r0
 800a1e2:	4689      	mov	r9, r1
 800a1e4:	4630      	mov	r0, r6
 800a1e6:	4639      	mov	r1, r7
 800a1e8:	f7f6 f808 	bl	80001fc <__adddf3>
 800a1ec:	4b17      	ldr	r3, [pc, #92]	@ (800a24c <__ieee754_pow+0x424>)
 800a1ee:	4299      	cmp	r1, r3
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	460d      	mov	r5, r1
 800a1f4:	468b      	mov	fp, r1
 800a1f6:	f340 820b 	ble.w	800a610 <__ieee754_pow+0x7e8>
 800a1fa:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800a1fe:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800a202:	4303      	orrs	r3, r0
 800a204:	f000 81ea 	beq.w	800a5dc <__ieee754_pow+0x7b4>
 800a208:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a20c:	2200      	movs	r2, #0
 800a20e:	2300      	movs	r3, #0
 800a210:	f7f6 fc1c 	bl	8000a4c <__aeabi_dcmplt>
 800a214:	3800      	subs	r0, #0
 800a216:	bf18      	it	ne
 800a218:	2001      	movne	r0, #1
 800a21a:	e713      	b.n	800a044 <__ieee754_pow+0x21c>
 800a21c:	f3af 8000 	nop.w
 800a220:	60000000 	.word	0x60000000
 800a224:	3ff71547 	.word	0x3ff71547
 800a228:	f85ddf44 	.word	0xf85ddf44
 800a22c:	3e54ae0b 	.word	0x3e54ae0b
 800a230:	55555555 	.word	0x55555555
 800a234:	3fd55555 	.word	0x3fd55555
 800a238:	652b82fe 	.word	0x652b82fe
 800a23c:	3ff71547 	.word	0x3ff71547
 800a240:	3ff00000 	.word	0x3ff00000
 800a244:	3fd00000 	.word	0x3fd00000
 800a248:	3fe00000 	.word	0x3fe00000
 800a24c:	408fffff 	.word	0x408fffff
 800a250:	4bd5      	ldr	r3, [pc, #852]	@ (800a5a8 <__ieee754_pow+0x780>)
 800a252:	ea08 0303 	and.w	r3, r8, r3
 800a256:	2200      	movs	r2, #0
 800a258:	b92b      	cbnz	r3, 800a266 <__ieee754_pow+0x43e>
 800a25a:	4bd4      	ldr	r3, [pc, #848]	@ (800a5ac <__ieee754_pow+0x784>)
 800a25c:	f7f6 f984 	bl	8000568 <__aeabi_dmul>
 800a260:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800a264:	468b      	mov	fp, r1
 800a266:	ea4f 532b 	mov.w	r3, fp, asr #20
 800a26a:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a26e:	4413      	add	r3, r2
 800a270:	930a      	str	r3, [sp, #40]	@ 0x28
 800a272:	4bcf      	ldr	r3, [pc, #828]	@ (800a5b0 <__ieee754_pow+0x788>)
 800a274:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800a278:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800a27c:	459b      	cmp	fp, r3
 800a27e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a282:	dd08      	ble.n	800a296 <__ieee754_pow+0x46e>
 800a284:	4bcb      	ldr	r3, [pc, #812]	@ (800a5b4 <__ieee754_pow+0x78c>)
 800a286:	459b      	cmp	fp, r3
 800a288:	f340 81a5 	ble.w	800a5d6 <__ieee754_pow+0x7ae>
 800a28c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a28e:	3301      	adds	r3, #1
 800a290:	930a      	str	r3, [sp, #40]	@ 0x28
 800a292:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800a296:	f04f 0a00 	mov.w	sl, #0
 800a29a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a29e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a2a0:	4bc5      	ldr	r3, [pc, #788]	@ (800a5b8 <__ieee754_pow+0x790>)
 800a2a2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a2a6:	ed93 7b00 	vldr	d7, [r3]
 800a2aa:	4629      	mov	r1, r5
 800a2ac:	ec53 2b17 	vmov	r2, r3, d7
 800a2b0:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a2b4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a2b8:	f7f5 ff9e 	bl	80001f8 <__aeabi_dsub>
 800a2bc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a2c0:	4606      	mov	r6, r0
 800a2c2:	460f      	mov	r7, r1
 800a2c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2c8:	f7f5 ff98 	bl	80001fc <__adddf3>
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	2000      	movs	r0, #0
 800a2d2:	49ba      	ldr	r1, [pc, #744]	@ (800a5bc <__ieee754_pow+0x794>)
 800a2d4:	f7f6 fa72 	bl	80007bc <__aeabi_ddiv>
 800a2d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800a2dc:	4602      	mov	r2, r0
 800a2de:	460b      	mov	r3, r1
 800a2e0:	4630      	mov	r0, r6
 800a2e2:	4639      	mov	r1, r7
 800a2e4:	f7f6 f940 	bl	8000568 <__aeabi_dmul>
 800a2e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2ec:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800a2f0:	106d      	asrs	r5, r5, #1
 800a2f2:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800a2f6:	f04f 0b00 	mov.w	fp, #0
 800a2fa:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800a2fe:	4661      	mov	r1, ip
 800a300:	2200      	movs	r2, #0
 800a302:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800a306:	4658      	mov	r0, fp
 800a308:	46e1      	mov	r9, ip
 800a30a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800a30e:	4614      	mov	r4, r2
 800a310:	461d      	mov	r5, r3
 800a312:	f7f6 f929 	bl	8000568 <__aeabi_dmul>
 800a316:	4602      	mov	r2, r0
 800a318:	460b      	mov	r3, r1
 800a31a:	4630      	mov	r0, r6
 800a31c:	4639      	mov	r1, r7
 800a31e:	f7f5 ff6b 	bl	80001f8 <__aeabi_dsub>
 800a322:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a326:	4606      	mov	r6, r0
 800a328:	460f      	mov	r7, r1
 800a32a:	4620      	mov	r0, r4
 800a32c:	4629      	mov	r1, r5
 800a32e:	f7f5 ff63 	bl	80001f8 <__aeabi_dsub>
 800a332:	4602      	mov	r2, r0
 800a334:	460b      	mov	r3, r1
 800a336:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a33a:	f7f5 ff5d 	bl	80001f8 <__aeabi_dsub>
 800a33e:	465a      	mov	r2, fp
 800a340:	464b      	mov	r3, r9
 800a342:	f7f6 f911 	bl	8000568 <__aeabi_dmul>
 800a346:	4602      	mov	r2, r0
 800a348:	460b      	mov	r3, r1
 800a34a:	4630      	mov	r0, r6
 800a34c:	4639      	mov	r1, r7
 800a34e:	f7f5 ff53 	bl	80001f8 <__aeabi_dsub>
 800a352:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a356:	f7f6 f907 	bl	8000568 <__aeabi_dmul>
 800a35a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a35e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a362:	4610      	mov	r0, r2
 800a364:	4619      	mov	r1, r3
 800a366:	f7f6 f8ff 	bl	8000568 <__aeabi_dmul>
 800a36a:	a37d      	add	r3, pc, #500	@ (adr r3, 800a560 <__ieee754_pow+0x738>)
 800a36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a370:	4604      	mov	r4, r0
 800a372:	460d      	mov	r5, r1
 800a374:	f7f6 f8f8 	bl	8000568 <__aeabi_dmul>
 800a378:	a37b      	add	r3, pc, #492	@ (adr r3, 800a568 <__ieee754_pow+0x740>)
 800a37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37e:	f7f5 ff3d 	bl	80001fc <__adddf3>
 800a382:	4622      	mov	r2, r4
 800a384:	462b      	mov	r3, r5
 800a386:	f7f6 f8ef 	bl	8000568 <__aeabi_dmul>
 800a38a:	a379      	add	r3, pc, #484	@ (adr r3, 800a570 <__ieee754_pow+0x748>)
 800a38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a390:	f7f5 ff34 	bl	80001fc <__adddf3>
 800a394:	4622      	mov	r2, r4
 800a396:	462b      	mov	r3, r5
 800a398:	f7f6 f8e6 	bl	8000568 <__aeabi_dmul>
 800a39c:	a376      	add	r3, pc, #472	@ (adr r3, 800a578 <__ieee754_pow+0x750>)
 800a39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a2:	f7f5 ff2b 	bl	80001fc <__adddf3>
 800a3a6:	4622      	mov	r2, r4
 800a3a8:	462b      	mov	r3, r5
 800a3aa:	f7f6 f8dd 	bl	8000568 <__aeabi_dmul>
 800a3ae:	a374      	add	r3, pc, #464	@ (adr r3, 800a580 <__ieee754_pow+0x758>)
 800a3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b4:	f7f5 ff22 	bl	80001fc <__adddf3>
 800a3b8:	4622      	mov	r2, r4
 800a3ba:	462b      	mov	r3, r5
 800a3bc:	f7f6 f8d4 	bl	8000568 <__aeabi_dmul>
 800a3c0:	a371      	add	r3, pc, #452	@ (adr r3, 800a588 <__ieee754_pow+0x760>)
 800a3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c6:	f7f5 ff19 	bl	80001fc <__adddf3>
 800a3ca:	4622      	mov	r2, r4
 800a3cc:	4606      	mov	r6, r0
 800a3ce:	460f      	mov	r7, r1
 800a3d0:	462b      	mov	r3, r5
 800a3d2:	4620      	mov	r0, r4
 800a3d4:	4629      	mov	r1, r5
 800a3d6:	f7f6 f8c7 	bl	8000568 <__aeabi_dmul>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	460b      	mov	r3, r1
 800a3de:	4630      	mov	r0, r6
 800a3e0:	4639      	mov	r1, r7
 800a3e2:	f7f6 f8c1 	bl	8000568 <__aeabi_dmul>
 800a3e6:	465a      	mov	r2, fp
 800a3e8:	4604      	mov	r4, r0
 800a3ea:	460d      	mov	r5, r1
 800a3ec:	464b      	mov	r3, r9
 800a3ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3f2:	f7f5 ff03 	bl	80001fc <__adddf3>
 800a3f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a3fa:	f7f6 f8b5 	bl	8000568 <__aeabi_dmul>
 800a3fe:	4622      	mov	r2, r4
 800a400:	462b      	mov	r3, r5
 800a402:	f7f5 fefb 	bl	80001fc <__adddf3>
 800a406:	465a      	mov	r2, fp
 800a408:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a40c:	464b      	mov	r3, r9
 800a40e:	4658      	mov	r0, fp
 800a410:	4649      	mov	r1, r9
 800a412:	f7f6 f8a9 	bl	8000568 <__aeabi_dmul>
 800a416:	4b6a      	ldr	r3, [pc, #424]	@ (800a5c0 <__ieee754_pow+0x798>)
 800a418:	2200      	movs	r2, #0
 800a41a:	4606      	mov	r6, r0
 800a41c:	460f      	mov	r7, r1
 800a41e:	f7f5 feed 	bl	80001fc <__adddf3>
 800a422:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a426:	f7f5 fee9 	bl	80001fc <__adddf3>
 800a42a:	46d8      	mov	r8, fp
 800a42c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800a430:	460d      	mov	r5, r1
 800a432:	465a      	mov	r2, fp
 800a434:	460b      	mov	r3, r1
 800a436:	4640      	mov	r0, r8
 800a438:	4649      	mov	r1, r9
 800a43a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800a43e:	f7f6 f893 	bl	8000568 <__aeabi_dmul>
 800a442:	465c      	mov	r4, fp
 800a444:	4680      	mov	r8, r0
 800a446:	4689      	mov	r9, r1
 800a448:	4b5d      	ldr	r3, [pc, #372]	@ (800a5c0 <__ieee754_pow+0x798>)
 800a44a:	2200      	movs	r2, #0
 800a44c:	4620      	mov	r0, r4
 800a44e:	4629      	mov	r1, r5
 800a450:	f7f5 fed2 	bl	80001f8 <__aeabi_dsub>
 800a454:	4632      	mov	r2, r6
 800a456:	463b      	mov	r3, r7
 800a458:	f7f5 fece 	bl	80001f8 <__aeabi_dsub>
 800a45c:	4602      	mov	r2, r0
 800a45e:	460b      	mov	r3, r1
 800a460:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a464:	f7f5 fec8 	bl	80001f8 <__aeabi_dsub>
 800a468:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a46c:	f7f6 f87c 	bl	8000568 <__aeabi_dmul>
 800a470:	4622      	mov	r2, r4
 800a472:	4606      	mov	r6, r0
 800a474:	460f      	mov	r7, r1
 800a476:	462b      	mov	r3, r5
 800a478:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a47c:	f7f6 f874 	bl	8000568 <__aeabi_dmul>
 800a480:	4602      	mov	r2, r0
 800a482:	460b      	mov	r3, r1
 800a484:	4630      	mov	r0, r6
 800a486:	4639      	mov	r1, r7
 800a488:	f7f5 feb8 	bl	80001fc <__adddf3>
 800a48c:	4606      	mov	r6, r0
 800a48e:	460f      	mov	r7, r1
 800a490:	4602      	mov	r2, r0
 800a492:	460b      	mov	r3, r1
 800a494:	4640      	mov	r0, r8
 800a496:	4649      	mov	r1, r9
 800a498:	f7f5 feb0 	bl	80001fc <__adddf3>
 800a49c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800a4a0:	a33b      	add	r3, pc, #236	@ (adr r3, 800a590 <__ieee754_pow+0x768>)
 800a4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a6:	4658      	mov	r0, fp
 800a4a8:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800a4ac:	460d      	mov	r5, r1
 800a4ae:	f7f6 f85b 	bl	8000568 <__aeabi_dmul>
 800a4b2:	465c      	mov	r4, fp
 800a4b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4b8:	4642      	mov	r2, r8
 800a4ba:	464b      	mov	r3, r9
 800a4bc:	4620      	mov	r0, r4
 800a4be:	4629      	mov	r1, r5
 800a4c0:	f7f5 fe9a 	bl	80001f8 <__aeabi_dsub>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	4630      	mov	r0, r6
 800a4ca:	4639      	mov	r1, r7
 800a4cc:	f7f5 fe94 	bl	80001f8 <__aeabi_dsub>
 800a4d0:	a331      	add	r3, pc, #196	@ (adr r3, 800a598 <__ieee754_pow+0x770>)
 800a4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d6:	f7f6 f847 	bl	8000568 <__aeabi_dmul>
 800a4da:	a331      	add	r3, pc, #196	@ (adr r3, 800a5a0 <__ieee754_pow+0x778>)
 800a4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e0:	4606      	mov	r6, r0
 800a4e2:	460f      	mov	r7, r1
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	4629      	mov	r1, r5
 800a4e8:	f7f6 f83e 	bl	8000568 <__aeabi_dmul>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	4630      	mov	r0, r6
 800a4f2:	4639      	mov	r1, r7
 800a4f4:	f7f5 fe82 	bl	80001fc <__adddf3>
 800a4f8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a4fa:	4b32      	ldr	r3, [pc, #200]	@ (800a5c4 <__ieee754_pow+0x79c>)
 800a4fc:	4413      	add	r3, r2
 800a4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a502:	f7f5 fe7b 	bl	80001fc <__adddf3>
 800a506:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a50a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a50c:	f7f5 ffc2 	bl	8000494 <__aeabi_i2d>
 800a510:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a512:	4b2d      	ldr	r3, [pc, #180]	@ (800a5c8 <__ieee754_pow+0x7a0>)
 800a514:	4413      	add	r3, r2
 800a516:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a51a:	4606      	mov	r6, r0
 800a51c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a520:	460f      	mov	r7, r1
 800a522:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a526:	f7f5 fe69 	bl	80001fc <__adddf3>
 800a52a:	4642      	mov	r2, r8
 800a52c:	464b      	mov	r3, r9
 800a52e:	f7f5 fe65 	bl	80001fc <__adddf3>
 800a532:	4632      	mov	r2, r6
 800a534:	463b      	mov	r3, r7
 800a536:	f7f5 fe61 	bl	80001fc <__adddf3>
 800a53a:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800a53e:	4632      	mov	r2, r6
 800a540:	463b      	mov	r3, r7
 800a542:	4658      	mov	r0, fp
 800a544:	460d      	mov	r5, r1
 800a546:	f7f5 fe57 	bl	80001f8 <__aeabi_dsub>
 800a54a:	4642      	mov	r2, r8
 800a54c:	464b      	mov	r3, r9
 800a54e:	f7f5 fe53 	bl	80001f8 <__aeabi_dsub>
 800a552:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a556:	f7f5 fe4f 	bl	80001f8 <__aeabi_dsub>
 800a55a:	465c      	mov	r4, fp
 800a55c:	e036      	b.n	800a5cc <__ieee754_pow+0x7a4>
 800a55e:	bf00      	nop
 800a560:	4a454eef 	.word	0x4a454eef
 800a564:	3fca7e28 	.word	0x3fca7e28
 800a568:	93c9db65 	.word	0x93c9db65
 800a56c:	3fcd864a 	.word	0x3fcd864a
 800a570:	a91d4101 	.word	0xa91d4101
 800a574:	3fd17460 	.word	0x3fd17460
 800a578:	518f264d 	.word	0x518f264d
 800a57c:	3fd55555 	.word	0x3fd55555
 800a580:	db6fabff 	.word	0xdb6fabff
 800a584:	3fdb6db6 	.word	0x3fdb6db6
 800a588:	33333303 	.word	0x33333303
 800a58c:	3fe33333 	.word	0x3fe33333
 800a590:	e0000000 	.word	0xe0000000
 800a594:	3feec709 	.word	0x3feec709
 800a598:	dc3a03fd 	.word	0xdc3a03fd
 800a59c:	3feec709 	.word	0x3feec709
 800a5a0:	145b01f5 	.word	0x145b01f5
 800a5a4:	be3e2fe0 	.word	0xbe3e2fe0
 800a5a8:	7ff00000 	.word	0x7ff00000
 800a5ac:	43400000 	.word	0x43400000
 800a5b0:	0003988e 	.word	0x0003988e
 800a5b4:	000bb679 	.word	0x000bb679
 800a5b8:	0800acb8 	.word	0x0800acb8
 800a5bc:	3ff00000 	.word	0x3ff00000
 800a5c0:	40080000 	.word	0x40080000
 800a5c4:	0800ac98 	.word	0x0800ac98
 800a5c8:	0800aca8 	.word	0x0800aca8
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	460b      	mov	r3, r1
 800a5d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5d4:	e5d6      	b.n	800a184 <__ieee754_pow+0x35c>
 800a5d6:	f04f 0a01 	mov.w	sl, #1
 800a5da:	e65e      	b.n	800a29a <__ieee754_pow+0x472>
 800a5dc:	a3b5      	add	r3, pc, #724	@ (adr r3, 800a8b4 <__ieee754_pow+0xa8c>)
 800a5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e2:	4630      	mov	r0, r6
 800a5e4:	4639      	mov	r1, r7
 800a5e6:	f7f5 fe09 	bl	80001fc <__adddf3>
 800a5ea:	4642      	mov	r2, r8
 800a5ec:	e9cd 0100 	strd	r0, r1, [sp]
 800a5f0:	464b      	mov	r3, r9
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	4629      	mov	r1, r5
 800a5f6:	f7f5 fdff 	bl	80001f8 <__aeabi_dsub>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a602:	f7f6 fa41 	bl	8000a88 <__aeabi_dcmpgt>
 800a606:	2800      	cmp	r0, #0
 800a608:	f47f adfe 	bne.w	800a208 <__ieee754_pow+0x3e0>
 800a60c:	4ba2      	ldr	r3, [pc, #648]	@ (800a898 <__ieee754_pow+0xa70>)
 800a60e:	e022      	b.n	800a656 <__ieee754_pow+0x82e>
 800a610:	4ca2      	ldr	r4, [pc, #648]	@ (800a89c <__ieee754_pow+0xa74>)
 800a612:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a616:	42a3      	cmp	r3, r4
 800a618:	d919      	bls.n	800a64e <__ieee754_pow+0x826>
 800a61a:	4ba1      	ldr	r3, [pc, #644]	@ (800a8a0 <__ieee754_pow+0xa78>)
 800a61c:	440b      	add	r3, r1
 800a61e:	4303      	orrs	r3, r0
 800a620:	d009      	beq.n	800a636 <__ieee754_pow+0x80e>
 800a622:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a626:	2200      	movs	r2, #0
 800a628:	2300      	movs	r3, #0
 800a62a:	f7f6 fa0f 	bl	8000a4c <__aeabi_dcmplt>
 800a62e:	3800      	subs	r0, #0
 800a630:	bf18      	it	ne
 800a632:	2001      	movne	r0, #1
 800a634:	e512      	b.n	800a05c <__ieee754_pow+0x234>
 800a636:	4642      	mov	r2, r8
 800a638:	464b      	mov	r3, r9
 800a63a:	f7f5 fddd 	bl	80001f8 <__aeabi_dsub>
 800a63e:	4632      	mov	r2, r6
 800a640:	463b      	mov	r3, r7
 800a642:	f7f6 fa17 	bl	8000a74 <__aeabi_dcmpge>
 800a646:	2800      	cmp	r0, #0
 800a648:	d1eb      	bne.n	800a622 <__ieee754_pow+0x7fa>
 800a64a:	4b96      	ldr	r3, [pc, #600]	@ (800a8a4 <__ieee754_pow+0xa7c>)
 800a64c:	e003      	b.n	800a656 <__ieee754_pow+0x82e>
 800a64e:	4a96      	ldr	r2, [pc, #600]	@ (800a8a8 <__ieee754_pow+0xa80>)
 800a650:	4293      	cmp	r3, r2
 800a652:	f240 80e7 	bls.w	800a824 <__ieee754_pow+0x9fc>
 800a656:	151b      	asrs	r3, r3, #20
 800a658:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800a65c:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 800a660:	fa4a fa03 	asr.w	sl, sl, r3
 800a664:	44da      	add	sl, fp
 800a666:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a66a:	4890      	ldr	r0, [pc, #576]	@ (800a8ac <__ieee754_pow+0xa84>)
 800a66c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a670:	4108      	asrs	r0, r1
 800a672:	ea00 030a 	and.w	r3, r0, sl
 800a676:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a67a:	f1c1 0114 	rsb	r1, r1, #20
 800a67e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800a682:	fa4a fa01 	asr.w	sl, sl, r1
 800a686:	f1bb 0f00 	cmp.w	fp, #0
 800a68a:	4640      	mov	r0, r8
 800a68c:	4649      	mov	r1, r9
 800a68e:	f04f 0200 	mov.w	r2, #0
 800a692:	bfb8      	it	lt
 800a694:	f1ca 0a00 	rsblt	sl, sl, #0
 800a698:	f7f5 fdae 	bl	80001f8 <__aeabi_dsub>
 800a69c:	4680      	mov	r8, r0
 800a69e:	4689      	mov	r9, r1
 800a6a0:	4632      	mov	r2, r6
 800a6a2:	463b      	mov	r3, r7
 800a6a4:	4640      	mov	r0, r8
 800a6a6:	4649      	mov	r1, r9
 800a6a8:	f7f5 fda8 	bl	80001fc <__adddf3>
 800a6ac:	2400      	movs	r4, #0
 800a6ae:	a36a      	add	r3, pc, #424	@ (adr r3, 800a858 <__ieee754_pow+0xa30>)
 800a6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b4:	4620      	mov	r0, r4
 800a6b6:	460d      	mov	r5, r1
 800a6b8:	f7f5 ff56 	bl	8000568 <__aeabi_dmul>
 800a6bc:	4642      	mov	r2, r8
 800a6be:	e9cd 0100 	strd	r0, r1, [sp]
 800a6c2:	464b      	mov	r3, r9
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	4629      	mov	r1, r5
 800a6c8:	f7f5 fd96 	bl	80001f8 <__aeabi_dsub>
 800a6cc:	4602      	mov	r2, r0
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	4639      	mov	r1, r7
 800a6d4:	f7f5 fd90 	bl	80001f8 <__aeabi_dsub>
 800a6d8:	a361      	add	r3, pc, #388	@ (adr r3, 800a860 <__ieee754_pow+0xa38>)
 800a6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6de:	f7f5 ff43 	bl	8000568 <__aeabi_dmul>
 800a6e2:	a361      	add	r3, pc, #388	@ (adr r3, 800a868 <__ieee754_pow+0xa40>)
 800a6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e8:	4680      	mov	r8, r0
 800a6ea:	4689      	mov	r9, r1
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	4629      	mov	r1, r5
 800a6f0:	f7f5 ff3a 	bl	8000568 <__aeabi_dmul>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	4640      	mov	r0, r8
 800a6fa:	4649      	mov	r1, r9
 800a6fc:	f7f5 fd7e 	bl	80001fc <__adddf3>
 800a700:	4604      	mov	r4, r0
 800a702:	460d      	mov	r5, r1
 800a704:	4602      	mov	r2, r0
 800a706:	460b      	mov	r3, r1
 800a708:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a70c:	f7f5 fd76 	bl	80001fc <__adddf3>
 800a710:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a714:	4680      	mov	r8, r0
 800a716:	4689      	mov	r9, r1
 800a718:	f7f5 fd6e 	bl	80001f8 <__aeabi_dsub>
 800a71c:	4602      	mov	r2, r0
 800a71e:	460b      	mov	r3, r1
 800a720:	4620      	mov	r0, r4
 800a722:	4629      	mov	r1, r5
 800a724:	f7f5 fd68 	bl	80001f8 <__aeabi_dsub>
 800a728:	4642      	mov	r2, r8
 800a72a:	4606      	mov	r6, r0
 800a72c:	460f      	mov	r7, r1
 800a72e:	464b      	mov	r3, r9
 800a730:	4640      	mov	r0, r8
 800a732:	4649      	mov	r1, r9
 800a734:	f7f5 ff18 	bl	8000568 <__aeabi_dmul>
 800a738:	a34d      	add	r3, pc, #308	@ (adr r3, 800a870 <__ieee754_pow+0xa48>)
 800a73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73e:	4604      	mov	r4, r0
 800a740:	460d      	mov	r5, r1
 800a742:	f7f5 ff11 	bl	8000568 <__aeabi_dmul>
 800a746:	a34c      	add	r3, pc, #304	@ (adr r3, 800a878 <__ieee754_pow+0xa50>)
 800a748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74c:	f7f5 fd54 	bl	80001f8 <__aeabi_dsub>
 800a750:	4622      	mov	r2, r4
 800a752:	462b      	mov	r3, r5
 800a754:	f7f5 ff08 	bl	8000568 <__aeabi_dmul>
 800a758:	a349      	add	r3, pc, #292	@ (adr r3, 800a880 <__ieee754_pow+0xa58>)
 800a75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75e:	f7f5 fd4d 	bl	80001fc <__adddf3>
 800a762:	4622      	mov	r2, r4
 800a764:	462b      	mov	r3, r5
 800a766:	f7f5 feff 	bl	8000568 <__aeabi_dmul>
 800a76a:	a347      	add	r3, pc, #284	@ (adr r3, 800a888 <__ieee754_pow+0xa60>)
 800a76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a770:	f7f5 fd42 	bl	80001f8 <__aeabi_dsub>
 800a774:	4622      	mov	r2, r4
 800a776:	462b      	mov	r3, r5
 800a778:	f7f5 fef6 	bl	8000568 <__aeabi_dmul>
 800a77c:	a344      	add	r3, pc, #272	@ (adr r3, 800a890 <__ieee754_pow+0xa68>)
 800a77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a782:	f7f5 fd3b 	bl	80001fc <__adddf3>
 800a786:	4622      	mov	r2, r4
 800a788:	462b      	mov	r3, r5
 800a78a:	f7f5 feed 	bl	8000568 <__aeabi_dmul>
 800a78e:	4602      	mov	r2, r0
 800a790:	460b      	mov	r3, r1
 800a792:	4640      	mov	r0, r8
 800a794:	4649      	mov	r1, r9
 800a796:	f7f5 fd2f 	bl	80001f8 <__aeabi_dsub>
 800a79a:	4604      	mov	r4, r0
 800a79c:	460d      	mov	r5, r1
 800a79e:	4602      	mov	r2, r0
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	4640      	mov	r0, r8
 800a7a4:	4649      	mov	r1, r9
 800a7a6:	f7f5 fedf 	bl	8000568 <__aeabi_dmul>
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	e9cd 0100 	strd	r0, r1, [sp]
 800a7b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a7b4:	4620      	mov	r0, r4
 800a7b6:	4629      	mov	r1, r5
 800a7b8:	f7f5 fd1e 	bl	80001f8 <__aeabi_dsub>
 800a7bc:	4602      	mov	r2, r0
 800a7be:	460b      	mov	r3, r1
 800a7c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7c4:	f7f5 fffa 	bl	80007bc <__aeabi_ddiv>
 800a7c8:	4632      	mov	r2, r6
 800a7ca:	4604      	mov	r4, r0
 800a7cc:	460d      	mov	r5, r1
 800a7ce:	463b      	mov	r3, r7
 800a7d0:	4640      	mov	r0, r8
 800a7d2:	4649      	mov	r1, r9
 800a7d4:	f7f5 fec8 	bl	8000568 <__aeabi_dmul>
 800a7d8:	4632      	mov	r2, r6
 800a7da:	463b      	mov	r3, r7
 800a7dc:	f7f5 fd0e 	bl	80001fc <__adddf3>
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	460b      	mov	r3, r1
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	4629      	mov	r1, r5
 800a7e8:	f7f5 fd06 	bl	80001f8 <__aeabi_dsub>
 800a7ec:	4642      	mov	r2, r8
 800a7ee:	464b      	mov	r3, r9
 800a7f0:	f7f5 fd02 	bl	80001f8 <__aeabi_dsub>
 800a7f4:	460b      	mov	r3, r1
 800a7f6:	4602      	mov	r2, r0
 800a7f8:	492d      	ldr	r1, [pc, #180]	@ (800a8b0 <__ieee754_pow+0xa88>)
 800a7fa:	2000      	movs	r0, #0
 800a7fc:	f7f5 fcfc 	bl	80001f8 <__aeabi_dsub>
 800a800:	ec41 0b10 	vmov	d0, r0, r1
 800a804:	ee10 3a90 	vmov	r3, s1
 800a808:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a80c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a810:	da0b      	bge.n	800a82a <__ieee754_pow+0xa02>
 800a812:	4650      	mov	r0, sl
 800a814:	f000 f85c 	bl	800a8d0 <scalbn>
 800a818:	ec51 0b10 	vmov	r0, r1, d0
 800a81c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a820:	f7ff bb6d 	b.w	8009efe <__ieee754_pow+0xd6>
 800a824:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a828:	e73a      	b.n	800a6a0 <__ieee754_pow+0x878>
 800a82a:	ec51 0b10 	vmov	r0, r1, d0
 800a82e:	4619      	mov	r1, r3
 800a830:	e7f4      	b.n	800a81c <__ieee754_pow+0x9f4>
 800a832:	491f      	ldr	r1, [pc, #124]	@ (800a8b0 <__ieee754_pow+0xa88>)
 800a834:	2000      	movs	r0, #0
 800a836:	f7ff bb14 	b.w	8009e62 <__ieee754_pow+0x3a>
 800a83a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a83e:	f7ff bb10 	b.w	8009e62 <__ieee754_pow+0x3a>
 800a842:	4630      	mov	r0, r6
 800a844:	4639      	mov	r1, r7
 800a846:	f7ff bb0c 	b.w	8009e62 <__ieee754_pow+0x3a>
 800a84a:	460c      	mov	r4, r1
 800a84c:	f7ff bb69 	b.w	8009f22 <__ieee754_pow+0xfa>
 800a850:	2400      	movs	r4, #0
 800a852:	f7ff bb4b 	b.w	8009eec <__ieee754_pow+0xc4>
 800a856:	bf00      	nop
 800a858:	00000000 	.word	0x00000000
 800a85c:	3fe62e43 	.word	0x3fe62e43
 800a860:	fefa39ef 	.word	0xfefa39ef
 800a864:	3fe62e42 	.word	0x3fe62e42
 800a868:	0ca86c39 	.word	0x0ca86c39
 800a86c:	be205c61 	.word	0xbe205c61
 800a870:	72bea4d0 	.word	0x72bea4d0
 800a874:	3e663769 	.word	0x3e663769
 800a878:	c5d26bf1 	.word	0xc5d26bf1
 800a87c:	3ebbbd41 	.word	0x3ebbbd41
 800a880:	af25de2c 	.word	0xaf25de2c
 800a884:	3f11566a 	.word	0x3f11566a
 800a888:	16bebd93 	.word	0x16bebd93
 800a88c:	3f66c16c 	.word	0x3f66c16c
 800a890:	5555553e 	.word	0x5555553e
 800a894:	3fc55555 	.word	0x3fc55555
 800a898:	40900000 	.word	0x40900000
 800a89c:	4090cbff 	.word	0x4090cbff
 800a8a0:	3f6f3400 	.word	0x3f6f3400
 800a8a4:	4090cc00 	.word	0x4090cc00
 800a8a8:	3fe00000 	.word	0x3fe00000
 800a8ac:	fff00000 	.word	0xfff00000
 800a8b0:	3ff00000 	.word	0x3ff00000
 800a8b4:	652b82fe 	.word	0x652b82fe
 800a8b8:	3c971547 	.word	0x3c971547

0800a8bc <fabs>:
 800a8bc:	ec51 0b10 	vmov	r0, r1, d0
 800a8c0:	4602      	mov	r2, r0
 800a8c2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a8c6:	ec43 2b10 	vmov	d0, r2, r3
 800a8ca:	4770      	bx	lr
 800a8cc:	0000      	movs	r0, r0
	...

0800a8d0 <scalbn>:
 800a8d0:	b570      	push	{r4, r5, r6, lr}
 800a8d2:	ec55 4b10 	vmov	r4, r5, d0
 800a8d6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a8da:	4606      	mov	r6, r0
 800a8dc:	462b      	mov	r3, r5
 800a8de:	b991      	cbnz	r1, 800a906 <scalbn+0x36>
 800a8e0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a8e4:	4323      	orrs	r3, r4
 800a8e6:	d03b      	beq.n	800a960 <scalbn+0x90>
 800a8e8:	4b33      	ldr	r3, [pc, #204]	@ (800a9b8 <scalbn+0xe8>)
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	4629      	mov	r1, r5
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f7f5 fe3a 	bl	8000568 <__aeabi_dmul>
 800a8f4:	4b31      	ldr	r3, [pc, #196]	@ (800a9bc <scalbn+0xec>)
 800a8f6:	429e      	cmp	r6, r3
 800a8f8:	4604      	mov	r4, r0
 800a8fa:	460d      	mov	r5, r1
 800a8fc:	da0f      	bge.n	800a91e <scalbn+0x4e>
 800a8fe:	a326      	add	r3, pc, #152	@ (adr r3, 800a998 <scalbn+0xc8>)
 800a900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a904:	e01e      	b.n	800a944 <scalbn+0x74>
 800a906:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800a90a:	4291      	cmp	r1, r2
 800a90c:	d10b      	bne.n	800a926 <scalbn+0x56>
 800a90e:	4622      	mov	r2, r4
 800a910:	4620      	mov	r0, r4
 800a912:	4629      	mov	r1, r5
 800a914:	f7f5 fc72 	bl	80001fc <__adddf3>
 800a918:	4604      	mov	r4, r0
 800a91a:	460d      	mov	r5, r1
 800a91c:	e020      	b.n	800a960 <scalbn+0x90>
 800a91e:	460b      	mov	r3, r1
 800a920:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a924:	3936      	subs	r1, #54	@ 0x36
 800a926:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a92a:	4296      	cmp	r6, r2
 800a92c:	dd0d      	ble.n	800a94a <scalbn+0x7a>
 800a92e:	2d00      	cmp	r5, #0
 800a930:	a11b      	add	r1, pc, #108	@ (adr r1, 800a9a0 <scalbn+0xd0>)
 800a932:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a936:	da02      	bge.n	800a93e <scalbn+0x6e>
 800a938:	a11b      	add	r1, pc, #108	@ (adr r1, 800a9a8 <scalbn+0xd8>)
 800a93a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a93e:	a318      	add	r3, pc, #96	@ (adr r3, 800a9a0 <scalbn+0xd0>)
 800a940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a944:	f7f5 fe10 	bl	8000568 <__aeabi_dmul>
 800a948:	e7e6      	b.n	800a918 <scalbn+0x48>
 800a94a:	1872      	adds	r2, r6, r1
 800a94c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a950:	428a      	cmp	r2, r1
 800a952:	dcec      	bgt.n	800a92e <scalbn+0x5e>
 800a954:	2a00      	cmp	r2, #0
 800a956:	dd06      	ble.n	800a966 <scalbn+0x96>
 800a958:	f36f 531e 	bfc	r3, #20, #11
 800a95c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a960:	ec45 4b10 	vmov	d0, r4, r5
 800a964:	bd70      	pop	{r4, r5, r6, pc}
 800a966:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a96a:	da08      	bge.n	800a97e <scalbn+0xae>
 800a96c:	2d00      	cmp	r5, #0
 800a96e:	a10a      	add	r1, pc, #40	@ (adr r1, 800a998 <scalbn+0xc8>)
 800a970:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a974:	dac3      	bge.n	800a8fe <scalbn+0x2e>
 800a976:	a10e      	add	r1, pc, #56	@ (adr r1, 800a9b0 <scalbn+0xe0>)
 800a978:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a97c:	e7bf      	b.n	800a8fe <scalbn+0x2e>
 800a97e:	3236      	adds	r2, #54	@ 0x36
 800a980:	f36f 531e 	bfc	r3, #20, #11
 800a984:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a988:	4620      	mov	r0, r4
 800a98a:	4b0d      	ldr	r3, [pc, #52]	@ (800a9c0 <scalbn+0xf0>)
 800a98c:	4629      	mov	r1, r5
 800a98e:	2200      	movs	r2, #0
 800a990:	e7d8      	b.n	800a944 <scalbn+0x74>
 800a992:	bf00      	nop
 800a994:	f3af 8000 	nop.w
 800a998:	c2f8f359 	.word	0xc2f8f359
 800a99c:	01a56e1f 	.word	0x01a56e1f
 800a9a0:	8800759c 	.word	0x8800759c
 800a9a4:	7e37e43c 	.word	0x7e37e43c
 800a9a8:	8800759c 	.word	0x8800759c
 800a9ac:	fe37e43c 	.word	0xfe37e43c
 800a9b0:	c2f8f359 	.word	0xc2f8f359
 800a9b4:	81a56e1f 	.word	0x81a56e1f
 800a9b8:	43500000 	.word	0x43500000
 800a9bc:	ffff3cb0 	.word	0xffff3cb0
 800a9c0:	3c900000 	.word	0x3c900000

0800a9c4 <with_errno>:
 800a9c4:	b510      	push	{r4, lr}
 800a9c6:	ed2d 8b02 	vpush	{d8}
 800a9ca:	eeb0 8a40 	vmov.f32	s16, s0
 800a9ce:	eef0 8a60 	vmov.f32	s17, s1
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	f7ff f974 	bl	8009cc0 <__errno>
 800a9d8:	eeb0 0a48 	vmov.f32	s0, s16
 800a9dc:	eef0 0a68 	vmov.f32	s1, s17
 800a9e0:	ecbd 8b02 	vpop	{d8}
 800a9e4:	6004      	str	r4, [r0, #0]
 800a9e6:	bd10      	pop	{r4, pc}

0800a9e8 <xflow>:
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	b507      	push	{r0, r1, r2, lr}
 800a9ec:	ec51 0b10 	vmov	r0, r1, d0
 800a9f0:	b183      	cbz	r3, 800aa14 <xflow+0x2c>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a9f8:	e9cd 2300 	strd	r2, r3, [sp]
 800a9fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa00:	f7f5 fdb2 	bl	8000568 <__aeabi_dmul>
 800aa04:	ec41 0b10 	vmov	d0, r0, r1
 800aa08:	2022      	movs	r0, #34	@ 0x22
 800aa0a:	b003      	add	sp, #12
 800aa0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa10:	f7ff bfd8 	b.w	800a9c4 <with_errno>
 800aa14:	4602      	mov	r2, r0
 800aa16:	460b      	mov	r3, r1
 800aa18:	e7ee      	b.n	800a9f8 <xflow+0x10>
 800aa1a:	0000      	movs	r0, r0
 800aa1c:	0000      	movs	r0, r0
	...

0800aa20 <__math_uflow>:
 800aa20:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800aa28 <__math_uflow+0x8>
 800aa24:	f7ff bfe0 	b.w	800a9e8 <xflow>
 800aa28:	00000000 	.word	0x00000000
 800aa2c:	10000000 	.word	0x10000000

0800aa30 <__math_oflow>:
 800aa30:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800aa38 <__math_oflow+0x8>
 800aa34:	f7ff bfd8 	b.w	800a9e8 <xflow>
 800aa38:	00000000 	.word	0x00000000
 800aa3c:	70000000 	.word	0x70000000

0800aa40 <__ieee754_sqrt>:
 800aa40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa44:	4a66      	ldr	r2, [pc, #408]	@ (800abe0 <__ieee754_sqrt+0x1a0>)
 800aa46:	ec55 4b10 	vmov	r4, r5, d0
 800aa4a:	43aa      	bics	r2, r5
 800aa4c:	462b      	mov	r3, r5
 800aa4e:	4621      	mov	r1, r4
 800aa50:	d110      	bne.n	800aa74 <__ieee754_sqrt+0x34>
 800aa52:	4622      	mov	r2, r4
 800aa54:	4620      	mov	r0, r4
 800aa56:	4629      	mov	r1, r5
 800aa58:	f7f5 fd86 	bl	8000568 <__aeabi_dmul>
 800aa5c:	4602      	mov	r2, r0
 800aa5e:	460b      	mov	r3, r1
 800aa60:	4620      	mov	r0, r4
 800aa62:	4629      	mov	r1, r5
 800aa64:	f7f5 fbca 	bl	80001fc <__adddf3>
 800aa68:	4604      	mov	r4, r0
 800aa6a:	460d      	mov	r5, r1
 800aa6c:	ec45 4b10 	vmov	d0, r4, r5
 800aa70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa74:	2d00      	cmp	r5, #0
 800aa76:	dc0e      	bgt.n	800aa96 <__ieee754_sqrt+0x56>
 800aa78:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800aa7c:	4322      	orrs	r2, r4
 800aa7e:	d0f5      	beq.n	800aa6c <__ieee754_sqrt+0x2c>
 800aa80:	b19d      	cbz	r5, 800aaaa <__ieee754_sqrt+0x6a>
 800aa82:	4622      	mov	r2, r4
 800aa84:	4620      	mov	r0, r4
 800aa86:	4629      	mov	r1, r5
 800aa88:	f7f5 fbb6 	bl	80001f8 <__aeabi_dsub>
 800aa8c:	4602      	mov	r2, r0
 800aa8e:	460b      	mov	r3, r1
 800aa90:	f7f5 fe94 	bl	80007bc <__aeabi_ddiv>
 800aa94:	e7e8      	b.n	800aa68 <__ieee754_sqrt+0x28>
 800aa96:	152a      	asrs	r2, r5, #20
 800aa98:	d115      	bne.n	800aac6 <__ieee754_sqrt+0x86>
 800aa9a:	2000      	movs	r0, #0
 800aa9c:	e009      	b.n	800aab2 <__ieee754_sqrt+0x72>
 800aa9e:	0acb      	lsrs	r3, r1, #11
 800aaa0:	3a15      	subs	r2, #21
 800aaa2:	0549      	lsls	r1, r1, #21
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d0fa      	beq.n	800aa9e <__ieee754_sqrt+0x5e>
 800aaa8:	e7f7      	b.n	800aa9a <__ieee754_sqrt+0x5a>
 800aaaa:	462a      	mov	r2, r5
 800aaac:	e7fa      	b.n	800aaa4 <__ieee754_sqrt+0x64>
 800aaae:	005b      	lsls	r3, r3, #1
 800aab0:	3001      	adds	r0, #1
 800aab2:	02dc      	lsls	r4, r3, #11
 800aab4:	d5fb      	bpl.n	800aaae <__ieee754_sqrt+0x6e>
 800aab6:	1e44      	subs	r4, r0, #1
 800aab8:	1b12      	subs	r2, r2, r4
 800aaba:	f1c0 0420 	rsb	r4, r0, #32
 800aabe:	fa21 f404 	lsr.w	r4, r1, r4
 800aac2:	4323      	orrs	r3, r4
 800aac4:	4081      	lsls	r1, r0
 800aac6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aaca:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800aace:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aad2:	07d2      	lsls	r2, r2, #31
 800aad4:	bf5c      	itt	pl
 800aad6:	005b      	lslpl	r3, r3, #1
 800aad8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800aadc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aae0:	bf58      	it	pl
 800aae2:	0049      	lslpl	r1, r1, #1
 800aae4:	2600      	movs	r6, #0
 800aae6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800aaea:	107f      	asrs	r7, r7, #1
 800aaec:	0049      	lsls	r1, r1, #1
 800aaee:	2016      	movs	r0, #22
 800aaf0:	4632      	mov	r2, r6
 800aaf2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800aaf6:	1915      	adds	r5, r2, r4
 800aaf8:	429d      	cmp	r5, r3
 800aafa:	bfde      	ittt	le
 800aafc:	192a      	addle	r2, r5, r4
 800aafe:	1b5b      	suble	r3, r3, r5
 800ab00:	1936      	addle	r6, r6, r4
 800ab02:	0fcd      	lsrs	r5, r1, #31
 800ab04:	3801      	subs	r0, #1
 800ab06:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800ab0a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ab0e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ab12:	d1f0      	bne.n	800aaf6 <__ieee754_sqrt+0xb6>
 800ab14:	4605      	mov	r5, r0
 800ab16:	2420      	movs	r4, #32
 800ab18:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	eb0c 0e00 	add.w	lr, ip, r0
 800ab22:	dc02      	bgt.n	800ab2a <__ieee754_sqrt+0xea>
 800ab24:	d113      	bne.n	800ab4e <__ieee754_sqrt+0x10e>
 800ab26:	458e      	cmp	lr, r1
 800ab28:	d811      	bhi.n	800ab4e <__ieee754_sqrt+0x10e>
 800ab2a:	f1be 0f00 	cmp.w	lr, #0
 800ab2e:	eb0e 000c 	add.w	r0, lr, ip
 800ab32:	da3f      	bge.n	800abb4 <__ieee754_sqrt+0x174>
 800ab34:	2800      	cmp	r0, #0
 800ab36:	db3d      	blt.n	800abb4 <__ieee754_sqrt+0x174>
 800ab38:	f102 0801 	add.w	r8, r2, #1
 800ab3c:	1a9b      	subs	r3, r3, r2
 800ab3e:	458e      	cmp	lr, r1
 800ab40:	bf88      	it	hi
 800ab42:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800ab46:	eba1 010e 	sub.w	r1, r1, lr
 800ab4a:	4465      	add	r5, ip
 800ab4c:	4642      	mov	r2, r8
 800ab4e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ab52:	3c01      	subs	r4, #1
 800ab54:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ab58:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ab5c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ab60:	d1dc      	bne.n	800ab1c <__ieee754_sqrt+0xdc>
 800ab62:	4319      	orrs	r1, r3
 800ab64:	d01b      	beq.n	800ab9e <__ieee754_sqrt+0x15e>
 800ab66:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800abe4 <__ieee754_sqrt+0x1a4>
 800ab6a:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800abe8 <__ieee754_sqrt+0x1a8>
 800ab6e:	e9da 0100 	ldrd	r0, r1, [sl]
 800ab72:	e9db 2300 	ldrd	r2, r3, [fp]
 800ab76:	f7f5 fb3f 	bl	80001f8 <__aeabi_dsub>
 800ab7a:	e9da 8900 	ldrd	r8, r9, [sl]
 800ab7e:	4602      	mov	r2, r0
 800ab80:	460b      	mov	r3, r1
 800ab82:	4640      	mov	r0, r8
 800ab84:	4649      	mov	r1, r9
 800ab86:	f7f5 ff6b 	bl	8000a60 <__aeabi_dcmple>
 800ab8a:	b140      	cbz	r0, 800ab9e <__ieee754_sqrt+0x15e>
 800ab8c:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 800ab90:	e9da 0100 	ldrd	r0, r1, [sl]
 800ab94:	e9db 2300 	ldrd	r2, r3, [fp]
 800ab98:	d10e      	bne.n	800abb8 <__ieee754_sqrt+0x178>
 800ab9a:	3601      	adds	r6, #1
 800ab9c:	4625      	mov	r5, r4
 800ab9e:	1073      	asrs	r3, r6, #1
 800aba0:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800aba4:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800aba8:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800abac:	086b      	lsrs	r3, r5, #1
 800abae:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800abb2:	e759      	b.n	800aa68 <__ieee754_sqrt+0x28>
 800abb4:	4690      	mov	r8, r2
 800abb6:	e7c1      	b.n	800ab3c <__ieee754_sqrt+0xfc>
 800abb8:	f7f5 fb20 	bl	80001fc <__adddf3>
 800abbc:	e9da 8900 	ldrd	r8, r9, [sl]
 800abc0:	4602      	mov	r2, r0
 800abc2:	460b      	mov	r3, r1
 800abc4:	4640      	mov	r0, r8
 800abc6:	4649      	mov	r1, r9
 800abc8:	f7f5 ff40 	bl	8000a4c <__aeabi_dcmplt>
 800abcc:	b120      	cbz	r0, 800abd8 <__ieee754_sqrt+0x198>
 800abce:	1cab      	adds	r3, r5, #2
 800abd0:	bf08      	it	eq
 800abd2:	3601      	addeq	r6, #1
 800abd4:	3502      	adds	r5, #2
 800abd6:	e7e2      	b.n	800ab9e <__ieee754_sqrt+0x15e>
 800abd8:	1c6b      	adds	r3, r5, #1
 800abda:	f023 0501 	bic.w	r5, r3, #1
 800abde:	e7de      	b.n	800ab9e <__ieee754_sqrt+0x15e>
 800abe0:	7ff00000 	.word	0x7ff00000
 800abe4:	0800acd0 	.word	0x0800acd0
 800abe8:	0800acc8 	.word	0x0800acc8

0800abec <_init>:
 800abec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abee:	bf00      	nop
 800abf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abf2:	bc08      	pop	{r3}
 800abf4:	469e      	mov	lr, r3
 800abf6:	4770      	bx	lr

0800abf8 <_fini>:
 800abf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abfa:	bf00      	nop
 800abfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abfe:	bc08      	pop	{r3}
 800ac00:	469e      	mov	lr, r3
 800ac02:	4770      	bx	lr
