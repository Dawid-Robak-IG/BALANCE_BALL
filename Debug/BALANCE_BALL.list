
BALANCE_BALL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6bc  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  0800d870  0800d870  0000e870  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd4c  0800dd4c  0000f1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800dd4c  0800dd4c  0000ed4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd54  0800dd54  0000f1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd54  0800dd54  0000ed54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dd58  0800dd58  0000ed58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800dd5c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f1dc  2**0
                  CONTENTS
 10 .bss          00026284  200001dc  200001dc  0000f1dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20026460  20026460  0000f1dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f1dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002971e  00000000  00000000  0000f20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000066de  00000000  00000000  0003892a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002370  00000000  00000000  0003f008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b53  00000000  00000000  00041378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cb9c  00000000  00000000  00042ecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002de57  00000000  00000000  0006fa67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f64af  00000000  00000000  0009d8be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00193d6d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a4c0  00000000  00000000  00193db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0019e270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d854 	.word	0x0800d854

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	0800d854 	.word	0x0800d854

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bdc:	f000 b988 	b.w	8000ef0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	468e      	mov	lr, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	4688      	mov	r8, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d962      	bls.n	8000cd4 <__udivmoddi4+0xdc>
 8000c0e:	fab2 f682 	clz	r6, r2
 8000c12:	b14e      	cbz	r6, 8000c28 <__udivmoddi4+0x30>
 8000c14:	f1c6 0320 	rsb	r3, r6, #32
 8000c18:	fa01 f806 	lsl.w	r8, r1, r6
 8000c1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c20:	40b7      	lsls	r7, r6
 8000c22:	ea43 0808 	orr.w	r8, r3, r8
 8000c26:	40b4      	lsls	r4, r6
 8000c28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c2c:	fa1f fc87 	uxth.w	ip, r7
 8000c30:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c34:	0c23      	lsrs	r3, r4, #16
 8000c36:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c3a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d909      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c4c:	f080 80ea 	bcs.w	8000e24 <__udivmoddi4+0x22c>
 8000c50:	429a      	cmp	r2, r3
 8000c52:	f240 80e7 	bls.w	8000e24 <__udivmoddi4+0x22c>
 8000c56:	3902      	subs	r1, #2
 8000c58:	443b      	add	r3, r7
 8000c5a:	1a9a      	subs	r2, r3, r2
 8000c5c:	b2a3      	uxth	r3, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c6a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c6e:	459c      	cmp	ip, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x8e>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c78:	f080 80d6 	bcs.w	8000e28 <__udivmoddi4+0x230>
 8000c7c:	459c      	cmp	ip, r3
 8000c7e:	f240 80d3 	bls.w	8000e28 <__udivmoddi4+0x230>
 8000c82:	443b      	add	r3, r7
 8000c84:	3802      	subs	r0, #2
 8000c86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8a:	eba3 030c 	sub.w	r3, r3, ip
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11d      	cbz	r5, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40f3      	lsrs	r3, r6
 8000c94:	2200      	movs	r2, #0
 8000c96:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d905      	bls.n	8000cae <__udivmoddi4+0xb6>
 8000ca2:	b10d      	cbz	r5, 8000ca8 <__udivmoddi4+0xb0>
 8000ca4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4608      	mov	r0, r1
 8000cac:	e7f5      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cae:	fab3 f183 	clz	r1, r3
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	d146      	bne.n	8000d44 <__udivmoddi4+0x14c>
 8000cb6:	4573      	cmp	r3, lr
 8000cb8:	d302      	bcc.n	8000cc0 <__udivmoddi4+0xc8>
 8000cba:	4282      	cmp	r2, r0
 8000cbc:	f200 8105 	bhi.w	8000eca <__udivmoddi4+0x2d2>
 8000cc0:	1a84      	subs	r4, r0, r2
 8000cc2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	4690      	mov	r8, r2
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	d0e5      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cce:	e9c5 4800 	strd	r4, r8, [r5]
 8000cd2:	e7e2      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f000 8090 	beq.w	8000dfa <__udivmoddi4+0x202>
 8000cda:	fab2 f682 	clz	r6, r2
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	f040 80a4 	bne.w	8000e2c <__udivmoddi4+0x234>
 8000ce4:	1a8a      	subs	r2, r1, r2
 8000ce6:	0c03      	lsrs	r3, r0, #16
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	b280      	uxth	r0, r0
 8000cee:	b2bc      	uxth	r4, r7
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cf6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfe:	fb04 f20c 	mul.w	r2, r4, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d907      	bls.n	8000d16 <__udivmoddi4+0x11e>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x11c>
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	f200 80e0 	bhi.w	8000ed4 <__udivmoddi4+0x2dc>
 8000d14:	46c4      	mov	ip, r8
 8000d16:	1a9b      	subs	r3, r3, r2
 8000d18:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d1c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d20:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d24:	fb02 f404 	mul.w	r4, r2, r4
 8000d28:	429c      	cmp	r4, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x144>
 8000d2c:	18fb      	adds	r3, r7, r3
 8000d2e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x142>
 8000d34:	429c      	cmp	r4, r3
 8000d36:	f200 80ca 	bhi.w	8000ece <__udivmoddi4+0x2d6>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	1b1b      	subs	r3, r3, r4
 8000d3e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d42:	e7a5      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d44:	f1c1 0620 	rsb	r6, r1, #32
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d4e:	431f      	orrs	r7, r3
 8000d50:	fa0e f401 	lsl.w	r4, lr, r1
 8000d54:	fa20 f306 	lsr.w	r3, r0, r6
 8000d58:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d5c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d60:	4323      	orrs	r3, r4
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	fa1f fc87 	uxth.w	ip, r7
 8000d6a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d6e:	0c1c      	lsrs	r4, r3, #16
 8000d70:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d74:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d78:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d7c:	45a6      	cmp	lr, r4
 8000d7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d82:	d909      	bls.n	8000d98 <__udivmoddi4+0x1a0>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d8a:	f080 809c 	bcs.w	8000ec6 <__udivmoddi4+0x2ce>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	f240 8099 	bls.w	8000ec6 <__udivmoddi4+0x2ce>
 8000d94:	3802      	subs	r0, #2
 8000d96:	443c      	add	r4, r7
 8000d98:	eba4 040e 	sub.w	r4, r4, lr
 8000d9c:	fa1f fe83 	uxth.w	lr, r3
 8000da0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da4:	fb09 4413 	mls	r4, r9, r3, r4
 8000da8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dac:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db0:	45a4      	cmp	ip, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1ce>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dba:	f080 8082 	bcs.w	8000ec2 <__udivmoddi4+0x2ca>
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d97f      	bls.n	8000ec2 <__udivmoddi4+0x2ca>
 8000dc2:	3b02      	subs	r3, #2
 8000dc4:	443c      	add	r4, r7
 8000dc6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dca:	eba4 040c 	sub.w	r4, r4, ip
 8000dce:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dd2:	4564      	cmp	r4, ip
 8000dd4:	4673      	mov	r3, lr
 8000dd6:	46e1      	mov	r9, ip
 8000dd8:	d362      	bcc.n	8000ea0 <__udivmoddi4+0x2a8>
 8000dda:	d05f      	beq.n	8000e9c <__udivmoddi4+0x2a4>
 8000ddc:	b15d      	cbz	r5, 8000df6 <__udivmoddi4+0x1fe>
 8000dde:	ebb8 0203 	subs.w	r2, r8, r3
 8000de2:	eb64 0409 	sbc.w	r4, r4, r9
 8000de6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dea:	fa22 f301 	lsr.w	r3, r2, r1
 8000dee:	431e      	orrs	r6, r3
 8000df0:	40cc      	lsrs	r4, r1
 8000df2:	e9c5 6400 	strd	r6, r4, [r5]
 8000df6:	2100      	movs	r1, #0
 8000df8:	e74f      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000dfa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dfe:	0c01      	lsrs	r1, r0, #16
 8000e00:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e04:	b280      	uxth	r0, r0
 8000e06:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	4638      	mov	r0, r7
 8000e0e:	463c      	mov	r4, r7
 8000e10:	46b8      	mov	r8, r7
 8000e12:	46be      	mov	lr, r7
 8000e14:	2620      	movs	r6, #32
 8000e16:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e1a:	eba2 0208 	sub.w	r2, r2, r8
 8000e1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e22:	e766      	b.n	8000cf2 <__udivmoddi4+0xfa>
 8000e24:	4601      	mov	r1, r0
 8000e26:	e718      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e28:	4610      	mov	r0, r2
 8000e2a:	e72c      	b.n	8000c86 <__udivmoddi4+0x8e>
 8000e2c:	f1c6 0220 	rsb	r2, r6, #32
 8000e30:	fa2e f302 	lsr.w	r3, lr, r2
 8000e34:	40b7      	lsls	r7, r6
 8000e36:	40b1      	lsls	r1, r6
 8000e38:	fa20 f202 	lsr.w	r2, r0, r2
 8000e3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e40:	430a      	orrs	r2, r1
 8000e42:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e46:	b2bc      	uxth	r4, r7
 8000e48:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb08 f904 	mul.w	r9, r8, r4
 8000e56:	40b0      	lsls	r0, r6
 8000e58:	4589      	cmp	r9, r1
 8000e5a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e5e:	b280      	uxth	r0, r0
 8000e60:	d93e      	bls.n	8000ee0 <__udivmoddi4+0x2e8>
 8000e62:	1879      	adds	r1, r7, r1
 8000e64:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e68:	d201      	bcs.n	8000e6e <__udivmoddi4+0x276>
 8000e6a:	4589      	cmp	r9, r1
 8000e6c:	d81f      	bhi.n	8000eae <__udivmoddi4+0x2b6>
 8000e6e:	eba1 0109 	sub.w	r1, r1, r9
 8000e72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e76:	fb09 f804 	mul.w	r8, r9, r4
 8000e7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e7e:	b292      	uxth	r2, r2
 8000e80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e84:	4542      	cmp	r2, r8
 8000e86:	d229      	bcs.n	8000edc <__udivmoddi4+0x2e4>
 8000e88:	18ba      	adds	r2, r7, r2
 8000e8a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e8e:	d2c4      	bcs.n	8000e1a <__udivmoddi4+0x222>
 8000e90:	4542      	cmp	r2, r8
 8000e92:	d2c2      	bcs.n	8000e1a <__udivmoddi4+0x222>
 8000e94:	f1a9 0102 	sub.w	r1, r9, #2
 8000e98:	443a      	add	r2, r7
 8000e9a:	e7be      	b.n	8000e1a <__udivmoddi4+0x222>
 8000e9c:	45f0      	cmp	r8, lr
 8000e9e:	d29d      	bcs.n	8000ddc <__udivmoddi4+0x1e4>
 8000ea0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ea4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	46e1      	mov	r9, ip
 8000eac:	e796      	b.n	8000ddc <__udivmoddi4+0x1e4>
 8000eae:	eba7 0909 	sub.w	r9, r7, r9
 8000eb2:	4449      	add	r1, r9
 8000eb4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000eb8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ebc:	fb09 f804 	mul.w	r8, r9, r4
 8000ec0:	e7db      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ec2:	4673      	mov	r3, lr
 8000ec4:	e77f      	b.n	8000dc6 <__udivmoddi4+0x1ce>
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	e766      	b.n	8000d98 <__udivmoddi4+0x1a0>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e6fd      	b.n	8000cca <__udivmoddi4+0xd2>
 8000ece:	443b      	add	r3, r7
 8000ed0:	3a02      	subs	r2, #2
 8000ed2:	e733      	b.n	8000d3c <__udivmoddi4+0x144>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	443b      	add	r3, r7
 8000eda:	e71c      	b.n	8000d16 <__udivmoddi4+0x11e>
 8000edc:	4649      	mov	r1, r9
 8000ede:	e79c      	b.n	8000e1a <__udivmoddi4+0x222>
 8000ee0:	eba1 0109 	sub.w	r1, r1, r9
 8000ee4:	46c4      	mov	ip, r8
 8000ee6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eea:	fb09 f804 	mul.w	r8, r9, r4
 8000eee:	e7c4      	b.n	8000e7a <__udivmoddi4+0x282>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <MX_CRC_Init+0x20>)
 8000efa:	4a07      	ldr	r2, [pc, #28]	@ (8000f18 <MX_CRC_Init+0x24>)
 8000efc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000efe:	4805      	ldr	r0, [pc, #20]	@ (8000f14 <MX_CRC_Init+0x20>)
 8000f00:	f002 f99e 	bl	8003240 <HAL_CRC_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000f0a:	f001 fcbb 	bl	8002884 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200001f8 	.word	0x200001f8
 8000f18:	40023000 	.word	0x40023000

08000f1c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0b      	ldr	r2, [pc, #44]	@ (8000f58 <HAL_CRC_MspInit+0x3c>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d10d      	bne.n	8000f4a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b0a      	ldr	r3, [pc, #40]	@ (8000f5c <HAL_CRC_MspInit+0x40>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	4a09      	ldr	r2, [pc, #36]	@ (8000f5c <HAL_CRC_MspInit+0x40>)
 8000f38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3e:	4b07      	ldr	r3, [pc, #28]	@ (8000f5c <HAL_CRC_MspInit+0x40>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40023000 	.word	0x40023000
 8000f5c:	40023800 	.word	0x40023800

08000f60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f9c <MX_DMA_Init+0x3c>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f9c <MX_DMA_Init+0x3c>)
 8000f70:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f76:	4b09      	ldr	r3, [pc, #36]	@ (8000f9c <MX_DMA_Init+0x3c>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2105      	movs	r1, #5
 8000f86:	203c      	movs	r0, #60	@ 0x3c
 8000f88:	f002 f930 	bl	80031ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000f8c:	203c      	movs	r0, #60	@ 0x3c
 8000f8e:	f002 f949 	bl	8003224 <HAL_NVIC_EnableIRQ>

}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800

08000fa0 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000fa4:	4b15      	ldr	r3, [pc, #84]	@ (8000ffc <MX_DMA2D_Init+0x5c>)
 8000fa6:	4a16      	ldr	r2, [pc, #88]	@ (8001000 <MX_DMA2D_Init+0x60>)
 8000fa8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000faa:	4b14      	ldr	r3, [pc, #80]	@ (8000ffc <MX_DMA2D_Init+0x5c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000fb0:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <MX_DMA2D_Init+0x5c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000fb6:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <MX_DMA2D_Init+0x5c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000ffc <MX_DMA2D_Init+0x5c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ffc <MX_DMA2D_Init+0x5c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ffc <MX_DMA2D_Init+0x5c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000fce:	4b0b      	ldr	r3, [pc, #44]	@ (8000ffc <MX_DMA2D_Init+0x5c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000fd4:	4809      	ldr	r0, [pc, #36]	@ (8000ffc <MX_DMA2D_Init+0x5c>)
 8000fd6:	f002 fcbf 	bl	8003958 <HAL_DMA2D_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000fe0:	f001 fc50 	bl	8002884 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	4805      	ldr	r0, [pc, #20]	@ (8000ffc <MX_DMA2D_Init+0x5c>)
 8000fe8:	f002 fe10 	bl	8003c0c <HAL_DMA2D_ConfigLayer>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000ff2:	f001 fc47 	bl	8002884 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000200 	.word	0x20000200
 8001000:	4002b000 	.word	0x4002b000

08001004 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0e      	ldr	r2, [pc, #56]	@ (800104c <HAL_DMA2D_MspInit+0x48>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d115      	bne.n	8001042 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	4b0d      	ldr	r3, [pc, #52]	@ (8001050 <HAL_DMA2D_MspInit+0x4c>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	4a0c      	ldr	r2, [pc, #48]	@ (8001050 <HAL_DMA2D_MspInit+0x4c>)
 8001020:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001024:	6313      	str	r3, [r2, #48]	@ 0x30
 8001026:	4b0a      	ldr	r3, [pc, #40]	@ (8001050 <HAL_DMA2D_MspInit+0x4c>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2105      	movs	r1, #5
 8001036:	205a      	movs	r0, #90	@ 0x5a
 8001038:	f002 f8d8 	bl	80031ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800103c:	205a      	movs	r0, #90	@ 0x5a
 800103e:	f002 f8f1 	bl	8003224 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	4002b000 	.word	0x4002b000
 8001050:	40023800 	.word	0x40023800

08001054 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
 8001068:	615a      	str	r2, [r3, #20]
 800106a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800106c:	4b1f      	ldr	r3, [pc, #124]	@ (80010ec <MX_FMC_Init+0x98>)
 800106e:	4a20      	ldr	r2, [pc, #128]	@ (80010f0 <MX_FMC_Init+0x9c>)
 8001070:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001072:	4b1e      	ldr	r3, [pc, #120]	@ (80010ec <MX_FMC_Init+0x98>)
 8001074:	2201      	movs	r2, #1
 8001076:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001078:	4b1c      	ldr	r3, [pc, #112]	@ (80010ec <MX_FMC_Init+0x98>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800107e:	4b1b      	ldr	r3, [pc, #108]	@ (80010ec <MX_FMC_Init+0x98>)
 8001080:	2204      	movs	r2, #4
 8001082:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001084:	4b19      	ldr	r3, [pc, #100]	@ (80010ec <MX_FMC_Init+0x98>)
 8001086:	2210      	movs	r2, #16
 8001088:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800108a:	4b18      	ldr	r3, [pc, #96]	@ (80010ec <MX_FMC_Init+0x98>)
 800108c:	2240      	movs	r2, #64	@ 0x40
 800108e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001090:	4b16      	ldr	r3, [pc, #88]	@ (80010ec <MX_FMC_Init+0x98>)
 8001092:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001096:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001098:	4b14      	ldr	r3, [pc, #80]	@ (80010ec <MX_FMC_Init+0x98>)
 800109a:	2200      	movs	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800109e:	4b13      	ldr	r3, [pc, #76]	@ (80010ec <MX_FMC_Init+0x98>)
 80010a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010a4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80010a6:	4b11      	ldr	r3, [pc, #68]	@ (80010ec <MX_FMC_Init+0x98>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	@ (80010ec <MX_FMC_Init+0x98>)
 80010ae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010b2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80010b4:	2302      	movs	r3, #2
 80010b6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80010b8:	2307      	movs	r3, #7
 80010ba:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80010bc:	2304      	movs	r3, #4
 80010be:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80010c0:	2307      	movs	r3, #7
 80010c2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80010c4:	2303      	movs	r3, #3
 80010c6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80010c8:	2302      	movs	r3, #2
 80010ca:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80010cc:	2302      	movs	r3, #2
 80010ce:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	4619      	mov	r1, r3
 80010d4:	4805      	ldr	r0, [pc, #20]	@ (80010ec <MX_FMC_Init+0x98>)
 80010d6:	f006 f949 	bl	800736c <HAL_SDRAM_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80010e0:	f001 fbd0 	bl	8002884 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80010e4:	bf00      	nop
 80010e6:	3720      	adds	r7, #32
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000240 	.word	0x20000240
 80010f0:	a0000140 	.word	0xa0000140

080010f4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001108:	4b3b      	ldr	r3, [pc, #236]	@ (80011f8 <HAL_FMC_MspInit+0x104>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d16f      	bne.n	80011f0 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001110:	4b39      	ldr	r3, [pc, #228]	@ (80011f8 <HAL_FMC_MspInit+0x104>)
 8001112:	2201      	movs	r2, #1
 8001114:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	603b      	str	r3, [r7, #0]
 800111a:	4b38      	ldr	r3, [pc, #224]	@ (80011fc <HAL_FMC_MspInit+0x108>)
 800111c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800111e:	4a37      	ldr	r2, [pc, #220]	@ (80011fc <HAL_FMC_MspInit+0x108>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6393      	str	r3, [r2, #56]	@ 0x38
 8001126:	4b35      	ldr	r3, [pc, #212]	@ (80011fc <HAL_FMC_MspInit+0x108>)
 8001128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001132:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001136:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001140:	2303      	movs	r3, #3
 8001142:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001144:	230c      	movs	r3, #12
 8001146:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	4619      	mov	r1, r3
 800114c:	482c      	ldr	r0, [pc, #176]	@ (8001200 <HAL_FMC_MspInit+0x10c>)
 800114e:	f002 fdef 	bl	8003d30 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001152:	2301      	movs	r3, #1
 8001154:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115e:	2303      	movs	r3, #3
 8001160:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001162:	230c      	movs	r3, #12
 8001164:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	4619      	mov	r1, r3
 800116a:	4826      	ldr	r0, [pc, #152]	@ (8001204 <HAL_FMC_MspInit+0x110>)
 800116c:	f002 fde0 	bl	8003d30 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001170:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001174:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117e:	2303      	movs	r3, #3
 8001180:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001182:	230c      	movs	r3, #12
 8001184:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	4619      	mov	r1, r3
 800118a:	481f      	ldr	r0, [pc, #124]	@ (8001208 <HAL_FMC_MspInit+0x114>)
 800118c:	f002 fdd0 	bl	8003d30 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001190:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001194:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	2302      	movs	r3, #2
 8001198:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119e:	2303      	movs	r3, #3
 80011a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011a2:	230c      	movs	r3, #12
 80011a4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	4619      	mov	r1, r3
 80011aa:	4818      	ldr	r0, [pc, #96]	@ (800120c <HAL_FMC_MspInit+0x118>)
 80011ac:	f002 fdc0 	bl	8003d30 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80011b0:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80011b4:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011be:	2303      	movs	r3, #3
 80011c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011c2:	230c      	movs	r3, #12
 80011c4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	4619      	mov	r1, r3
 80011ca:	4811      	ldr	r0, [pc, #68]	@ (8001210 <HAL_FMC_MspInit+0x11c>)
 80011cc:	f002 fdb0 	bl	8003d30 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80011d0:	2360      	movs	r3, #96	@ 0x60
 80011d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011dc:	2303      	movs	r3, #3
 80011de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011e0:	230c      	movs	r3, #12
 80011e2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	4619      	mov	r1, r3
 80011e8:	480a      	ldr	r0, [pc, #40]	@ (8001214 <HAL_FMC_MspInit+0x120>)
 80011ea:	f002 fda1 	bl	8003d30 <HAL_GPIO_Init>
 80011ee:	e000      	b.n	80011f2 <HAL_FMC_MspInit+0xfe>
    return;
 80011f0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000274 	.word	0x20000274
 80011fc:	40023800 	.word	0x40023800
 8001200:	40021400 	.word	0x40021400
 8001204:	40020800 	.word	0x40020800
 8001208:	40021800 	.word	0x40021800
 800120c:	40021000 	.word	0x40021000
 8001210:	40020c00 	.word	0x40020c00
 8001214:	40020400 	.word	0x40020400

08001218 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001220:	f7ff ff68 	bl	80010f4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08e      	sub	sp, #56	@ 0x38
 8001230:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001232:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	623b      	str	r3, [r7, #32]
 8001246:	4b88      	ldr	r3, [pc, #544]	@ (8001468 <MX_GPIO_Init+0x23c>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	4a87      	ldr	r2, [pc, #540]	@ (8001468 <MX_GPIO_Init+0x23c>)
 800124c:	f043 0304 	orr.w	r3, r3, #4
 8001250:	6313      	str	r3, [r2, #48]	@ 0x30
 8001252:	4b85      	ldr	r3, [pc, #532]	@ (8001468 <MX_GPIO_Init+0x23c>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	623b      	str	r3, [r7, #32]
 800125c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
 8001262:	4b81      	ldr	r3, [pc, #516]	@ (8001468 <MX_GPIO_Init+0x23c>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	4a80      	ldr	r2, [pc, #512]	@ (8001468 <MX_GPIO_Init+0x23c>)
 8001268:	f043 0320 	orr.w	r3, r3, #32
 800126c:	6313      	str	r3, [r2, #48]	@ 0x30
 800126e:	4b7e      	ldr	r3, [pc, #504]	@ (8001468 <MX_GPIO_Init+0x23c>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	f003 0320 	and.w	r3, r3, #32
 8001276:	61fb      	str	r3, [r7, #28]
 8001278:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	61bb      	str	r3, [r7, #24]
 800127e:	4b7a      	ldr	r3, [pc, #488]	@ (8001468 <MX_GPIO_Init+0x23c>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	4a79      	ldr	r2, [pc, #484]	@ (8001468 <MX_GPIO_Init+0x23c>)
 8001284:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001288:	6313      	str	r3, [r2, #48]	@ 0x30
 800128a:	4b77      	ldr	r3, [pc, #476]	@ (8001468 <MX_GPIO_Init+0x23c>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001292:	61bb      	str	r3, [r7, #24]
 8001294:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	4b73      	ldr	r3, [pc, #460]	@ (8001468 <MX_GPIO_Init+0x23c>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	4a72      	ldr	r2, [pc, #456]	@ (8001468 <MX_GPIO_Init+0x23c>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a6:	4b70      	ldr	r3, [pc, #448]	@ (8001468 <MX_GPIO_Init+0x23c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	617b      	str	r3, [r7, #20]
 80012b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	4b6c      	ldr	r3, [pc, #432]	@ (8001468 <MX_GPIO_Init+0x23c>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	4a6b      	ldr	r2, [pc, #428]	@ (8001468 <MX_GPIO_Init+0x23c>)
 80012bc:	f043 0302 	orr.w	r3, r3, #2
 80012c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c2:	4b69      	ldr	r3, [pc, #420]	@ (8001468 <MX_GPIO_Init+0x23c>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	4b65      	ldr	r3, [pc, #404]	@ (8001468 <MX_GPIO_Init+0x23c>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	4a64      	ldr	r2, [pc, #400]	@ (8001468 <MX_GPIO_Init+0x23c>)
 80012d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012de:	4b62      	ldr	r3, [pc, #392]	@ (8001468 <MX_GPIO_Init+0x23c>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	4b5e      	ldr	r3, [pc, #376]	@ (8001468 <MX_GPIO_Init+0x23c>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	4a5d      	ldr	r2, [pc, #372]	@ (8001468 <MX_GPIO_Init+0x23c>)
 80012f4:	f043 0310 	orr.w	r3, r3, #16
 80012f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fa:	4b5b      	ldr	r3, [pc, #364]	@ (8001468 <MX_GPIO_Init+0x23c>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	f003 0310 	and.w	r3, r3, #16
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	4b57      	ldr	r3, [pc, #348]	@ (8001468 <MX_GPIO_Init+0x23c>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	4a56      	ldr	r2, [pc, #344]	@ (8001468 <MX_GPIO_Init+0x23c>)
 8001310:	f043 0308 	orr.w	r3, r3, #8
 8001314:	6313      	str	r3, [r2, #48]	@ 0x30
 8001316:	4b54      	ldr	r3, [pc, #336]	@ (8001468 <MX_GPIO_Init+0x23c>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	2116      	movs	r1, #22
 8001326:	4851      	ldr	r0, [pc, #324]	@ (800146c <MX_GPIO_Init+0x240>)
 8001328:	f002 feae 	bl	8004088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800132c:	2200      	movs	r2, #0
 800132e:	2180      	movs	r1, #128	@ 0x80
 8001330:	484f      	ldr	r0, [pc, #316]	@ (8001470 <MX_GPIO_Init+0x244>)
 8001332:	f002 fea9 	bl	8004088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001336:	2200      	movs	r2, #0
 8001338:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800133c:	484d      	ldr	r0, [pc, #308]	@ (8001474 <MX_GPIO_Init+0x248>)
 800133e:	f002 fea3 	bl	8004088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001342:	2200      	movs	r2, #0
 8001344:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001348:	484b      	ldr	r0, [pc, #300]	@ (8001478 <MX_GPIO_Init+0x24c>)
 800134a:	f002 fe9d 	bl	8004088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NCS_MEMS_SPI_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin;
 800134e:	2302      	movs	r3, #2
 8001350:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001356:	2301      	movs	r3, #1
 8001358:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(NCS_MEMS_SPI_GPIO_Port, &GPIO_InitStruct);
 800135e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001362:	4619      	mov	r1, r3
 8001364:	4841      	ldr	r0, [pc, #260]	@ (800146c <MX_GPIO_Init+0x240>)
 8001366:	f002 fce3 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = CSX_Pin|OTG_FS_PSO_Pin;
 800136a:	2314      	movs	r3, #20
 800136c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2301      	movs	r3, #1
 8001370:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800137e:	4619      	mov	r1, r3
 8001380:	483a      	ldr	r0, [pc, #232]	@ (800146c <MX_GPIO_Init+0x240>)
 8001382:	f002 fcd5 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8001386:	2301      	movs	r3, #1
 8001388:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138a:	2300      	movs	r3, #0
 800138c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8001392:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001396:	4619      	mov	r1, r3
 8001398:	4835      	ldr	r0, [pc, #212]	@ (8001470 <MX_GPIO_Init+0x244>)
 800139a:	f002 fcc9 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800139e:	f248 0306 	movw	r3, #32774	@ 0x8006
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013a4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80013a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013b2:	4619      	mov	r1, r3
 80013b4:	482e      	ldr	r0, [pc, #184]	@ (8001470 <MX_GPIO_Init+0x244>)
 80013b6:	f002 fcbb 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80013ba:	2380      	movs	r3, #128	@ 0x80
 80013bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013be:	2301      	movs	r3, #1
 80013c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80013ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ce:	4619      	mov	r1, r3
 80013d0:	4827      	ldr	r0, [pc, #156]	@ (8001470 <MX_GPIO_Init+0x244>)
 80013d2:	f002 fcad 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80013d6:	2320      	movs	r3, #32
 80013d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013da:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80013de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80013e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e8:	4619      	mov	r1, r3
 80013ea:	4820      	ldr	r0, [pc, #128]	@ (800146c <MX_GPIO_Init+0x240>)
 80013ec:	f002 fca0 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80013f0:	2304      	movs	r3, #4
 80013f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80013fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001400:	4619      	mov	r1, r3
 8001402:	481e      	ldr	r0, [pc, #120]	@ (800147c <MX_GPIO_Init+0x250>)
 8001404:	f002 fc94 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001408:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140e:	2300      	movs	r3, #0
 8001410:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001416:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800141a:	4619      	mov	r1, r3
 800141c:	4815      	ldr	r0, [pc, #84]	@ (8001474 <MX_GPIO_Init+0x248>)
 800141e:	f002 fc87 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001422:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001426:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001428:	2301      	movs	r3, #1
 800142a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2300      	movs	r3, #0
 8001432:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001434:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001438:	4619      	mov	r1, r3
 800143a:	480e      	ldr	r0, [pc, #56]	@ (8001474 <MX_GPIO_Init+0x248>)
 800143c:	f002 fc78 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001440:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001444:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001446:	2301      	movs	r3, #1
 8001448:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001452:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001456:	4619      	mov	r1, r3
 8001458:	4807      	ldr	r0, [pc, #28]	@ (8001478 <MX_GPIO_Init+0x24c>)
 800145a:	f002 fc69 	bl	8003d30 <HAL_GPIO_Init>

}
 800145e:	bf00      	nop
 8001460:	3738      	adds	r7, #56	@ 0x38
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800
 800146c:	40020800 	.word	0x40020800
 8001470:	40020000 	.word	0x40020000
 8001474:	40020c00 	.word	0x40020c00
 8001478:	40021800 	.word	0x40021800
 800147c:	40020400 	.word	0x40020400

08001480 <_write>:
static int16_t x_data[MOVING_AVERAGE_WINDOW];
static int16_t y_data[MOVING_AVERAGE_WINDOW];
static int16_t z_data[MOVING_AVERAGE_WINDOW];
static uint8_t data_index = 0;

ssize_t _write(int file, const char *data, size_t len) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) data, len, HAL_MAX_DELAY); // Wysyłanie danych przez UART
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	b29a      	uxth	r2, r3
 8001490:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	4804      	ldr	r0, [pc, #16]	@ (80014a8 <_write+0x28>)
 8001498:	f007 fb7c 	bl	8008b94 <HAL_UART_Transmit>
	return len;
 800149c:	687b      	ldr	r3, [r7, #4]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20025dfc 	.word	0x20025dfc

080014ac <gyro_init>:

void gyro_init(void) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
	uint8_t configData[2] = { CTRL_REG1, 0x0F }; // PD=1, Zen=1, Yen=1, Xen=;
 80014b2:	f44f 6372 	mov.w	r3, #3872	@ 0xf20
 80014b6:	80bb      	strh	r3, [r7, #4]

	if (!spi5_acquire())
 80014b8:	f001 f9ea 	bl	8002890 <spi5_acquire>
 80014bc:	4603      	mov	r3, r0
 80014be:	f083 0301 	eor.w	r3, r3, #1
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d116      	bne.n	80014f6 <gyro_init+0x4a>
		return;

	GYRO_CS_LOW();
 80014c8:	2200      	movs	r2, #0
 80014ca:	2102      	movs	r1, #2
 80014cc:	480c      	ldr	r0, [pc, #48]	@ (8001500 <gyro_init+0x54>)
 80014ce:	f002 fddb 	bl	8004088 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, configData, 2, 100);
 80014d2:	1d39      	adds	r1, r7, #4
 80014d4:	2364      	movs	r3, #100	@ 0x64
 80014d6:	2202      	movs	r2, #2
 80014d8:	480a      	ldr	r0, [pc, #40]	@ (8001504 <gyro_init+0x58>)
 80014da:	f006 f804 	bl	80074e6 <HAL_SPI_Transmit>
	GYRO_CS_HIGH();
 80014de:	2201      	movs	r2, #1
 80014e0:	2102      	movs	r1, #2
 80014e2:	4807      	ldr	r0, [pc, #28]	@ (8001500 <gyro_init+0x54>)
 80014e4:	f002 fdd0 	bl	8004088 <HAL_GPIO_WritePin>

	spi5_release();
 80014e8:	f001 f9e6 	bl	80028b8 <spi5_release>

	gyro_set_sensitivity();
 80014ec:	f000 f80c 	bl	8001508 <gyro_set_sensitivity>

	// Weryfikacja połączenia
	gyro_ReadWhoAmI();
 80014f0:	f000 f8cc 	bl	800168c <gyro_ReadWhoAmI>
 80014f4:	e000      	b.n	80014f8 <gyro_init+0x4c>
		return;
 80014f6:	bf00      	nop
}
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40020800 	.word	0x40020800
 8001504:	20025cb0 	.word	0x20025cb0

08001508 <gyro_set_sensitivity>:

void gyro_set_sensitivity() {
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
	uint8_t configData[2] = { CTRL_REG4, SENSITIVITY };
 800150e:	f243 0323 	movw	r3, #12323	@ 0x3023
 8001512:	80bb      	strh	r3, [r7, #4]

	if (!spi5_acquire())
 8001514:	f001 f9bc 	bl	8002890 <spi5_acquire>
 8001518:	4603      	mov	r3, r0
 800151a:	f083 0301 	eor.w	r3, r3, #1
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b00      	cmp	r3, #0
 8001522:	d112      	bne.n	800154a <gyro_set_sensitivity+0x42>
		return;

	GYRO_CS_LOW();
 8001524:	2200      	movs	r2, #0
 8001526:	2102      	movs	r1, #2
 8001528:	480a      	ldr	r0, [pc, #40]	@ (8001554 <gyro_set_sensitivity+0x4c>)
 800152a:	f002 fdad 	bl	8004088 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, configData, 2, 100);
 800152e:	1d39      	adds	r1, r7, #4
 8001530:	2364      	movs	r3, #100	@ 0x64
 8001532:	2202      	movs	r2, #2
 8001534:	4808      	ldr	r0, [pc, #32]	@ (8001558 <gyro_set_sensitivity+0x50>)
 8001536:	f005 ffd6 	bl	80074e6 <HAL_SPI_Transmit>
	GYRO_CS_HIGH();
 800153a:	2201      	movs	r2, #1
 800153c:	2102      	movs	r1, #2
 800153e:	4805      	ldr	r0, [pc, #20]	@ (8001554 <gyro_set_sensitivity+0x4c>)
 8001540:	f002 fda2 	bl	8004088 <HAL_GPIO_WritePin>

	spi5_release();
 8001544:	f001 f9b8 	bl	80028b8 <spi5_release>
 8001548:	e000      	b.n	800154c <gyro_set_sensitivity+0x44>
		return;
 800154a:	bf00      	nop
}
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40020800 	.word	0x40020800
 8001558:	20025cb0 	.word	0x20025cb0

0800155c <gyro_get_filtered_data>:

void gyro_get_filtered_data(Gyro_Int_Data *gyro_data) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
	//int16_t x_raw, y_raw, z_raw;
	int32_t x_sum = 0, y_sum = 0, z_sum = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
 8001568:	2300      	movs	r3, #0
 800156a:	61bb      	str	r3, [r7, #24]
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
	Gyro_Int_Data raw_data;
	// Bufory do filtracji
	memset(x_data, 0, sizeof(x_data));
 8001570:	2214      	movs	r2, #20
 8001572:	2100      	movs	r1, #0
 8001574:	4840      	ldr	r0, [pc, #256]	@ (8001678 <gyro_get_filtered_data+0x11c>)
 8001576:	f00a fb91 	bl	800bc9c <memset>
	memset(y_data, 0, sizeof(y_data));
 800157a:	2214      	movs	r2, #20
 800157c:	2100      	movs	r1, #0
 800157e:	483f      	ldr	r0, [pc, #252]	@ (800167c <gyro_get_filtered_data+0x120>)
 8001580:	f00a fb8c 	bl	800bc9c <memset>
	memset(z_data, 0, sizeof(z_data));
 8001584:	2214      	movs	r2, #20
 8001586:	2100      	movs	r1, #0
 8001588:	483d      	ldr	r0, [pc, #244]	@ (8001680 <gyro_get_filtered_data+0x124>)
 800158a:	f00a fb87 	bl	800bc9c <memset>
	data_index = 0;
 800158e:	4b3d      	ldr	r3, [pc, #244]	@ (8001684 <gyro_get_filtered_data+0x128>)
 8001590:	2200      	movs	r2, #0
 8001592:	701a      	strb	r2, [r3, #0]

	gyro_get_data(&raw_data);
 8001594:	f107 030c 	add.w	r3, r7, #12
 8001598:	4618      	mov	r0, r3
 800159a:	f000 f8b9 	bl	8001710 <gyro_get_data>

	// Aktualizacja bufora
	x_data[data_index] = raw_data.x;
 800159e:	4b39      	ldr	r3, [pc, #228]	@ (8001684 <gyro_get_filtered_data+0x128>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	461a      	mov	r2, r3
 80015a4:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80015a8:	4b33      	ldr	r3, [pc, #204]	@ (8001678 <gyro_get_filtered_data+0x11c>)
 80015aa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	y_data[data_index] = raw_data.y;
 80015ae:	4b35      	ldr	r3, [pc, #212]	@ (8001684 <gyro_get_filtered_data+0x128>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	461a      	mov	r2, r3
 80015b4:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80015b8:	4b30      	ldr	r3, [pc, #192]	@ (800167c <gyro_get_filtered_data+0x120>)
 80015ba:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	z_data[data_index] = raw_data.z;
 80015be:	4b31      	ldr	r3, [pc, #196]	@ (8001684 <gyro_get_filtered_data+0x128>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 80015c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001680 <gyro_get_filtered_data+0x124>)
 80015ca:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	//Średnia
	for (uint8_t i = 0; i < MOVING_AVERAGE_WINDOW; i++) {
 80015ce:	2300      	movs	r3, #0
 80015d0:	74fb      	strb	r3, [r7, #19]
 80015d2:	e01a      	b.n	800160a <gyro_get_filtered_data+0xae>
		x_sum += x_data[i];
 80015d4:	7cfb      	ldrb	r3, [r7, #19]
 80015d6:	4a28      	ldr	r2, [pc, #160]	@ (8001678 <gyro_get_filtered_data+0x11c>)
 80015d8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80015dc:	461a      	mov	r2, r3
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	4413      	add	r3, r2
 80015e2:	61fb      	str	r3, [r7, #28]
		y_sum += y_data[i];
 80015e4:	7cfb      	ldrb	r3, [r7, #19]
 80015e6:	4a25      	ldr	r2, [pc, #148]	@ (800167c <gyro_get_filtered_data+0x120>)
 80015e8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80015ec:	461a      	mov	r2, r3
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	4413      	add	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
		z_sum += z_data[i];
 80015f4:	7cfb      	ldrb	r3, [r7, #19]
 80015f6:	4a22      	ldr	r2, [pc, #136]	@ (8001680 <gyro_get_filtered_data+0x124>)
 80015f8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80015fc:	461a      	mov	r2, r3
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	4413      	add	r3, r2
 8001602:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MOVING_AVERAGE_WINDOW; i++) {
 8001604:	7cfb      	ldrb	r3, [r7, #19]
 8001606:	3301      	adds	r3, #1
 8001608:	74fb      	strb	r3, [r7, #19]
 800160a:	7cfb      	ldrb	r3, [r7, #19]
 800160c:	2b09      	cmp	r3, #9
 800160e:	d9e1      	bls.n	80015d4 <gyro_get_filtered_data+0x78>
	}

	gyro_data->x = x_sum / MOVING_AVERAGE_WINDOW;
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	4a1d      	ldr	r2, [pc, #116]	@ (8001688 <gyro_get_filtered_data+0x12c>)
 8001614:	fb82 1203 	smull	r1, r2, r2, r3
 8001618:	1092      	asrs	r2, r2, #2
 800161a:	17db      	asrs	r3, r3, #31
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	b21a      	sxth	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	801a      	strh	r2, [r3, #0]
	gyro_data->y = y_sum / MOVING_AVERAGE_WINDOW;
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	4a18      	ldr	r2, [pc, #96]	@ (8001688 <gyro_get_filtered_data+0x12c>)
 8001628:	fb82 1203 	smull	r1, r2, r2, r3
 800162c:	1092      	asrs	r2, r2, #2
 800162e:	17db      	asrs	r3, r3, #31
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	b21a      	sxth	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	805a      	strh	r2, [r3, #2]
	gyro_data->z = z_sum / MOVING_AVERAGE_WINDOW;
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	4a13      	ldr	r2, [pc, #76]	@ (8001688 <gyro_get_filtered_data+0x12c>)
 800163c:	fb82 1203 	smull	r1, r2, r2, r3
 8001640:	1092      	asrs	r2, r2, #2
 8001642:	17db      	asrs	r3, r3, #31
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	b21a      	sxth	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	809a      	strh	r2, [r3, #4]

	// Aktualizuj indeks
	data_index = (data_index + 1) % MOVING_AVERAGE_WINDOW;
 800164c:	4b0d      	ldr	r3, [pc, #52]	@ (8001684 <gyro_get_filtered_data+0x128>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	1c5a      	adds	r2, r3, #1
 8001652:	4b0d      	ldr	r3, [pc, #52]	@ (8001688 <gyro_get_filtered_data+0x12c>)
 8001654:	fb83 1302 	smull	r1, r3, r3, r2
 8001658:	1099      	asrs	r1, r3, #2
 800165a:	17d3      	asrs	r3, r2, #31
 800165c:	1ac9      	subs	r1, r1, r3
 800165e:	460b      	mov	r3, r1
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	1ad1      	subs	r1, r2, r3
 8001668:	b2ca      	uxtb	r2, r1
 800166a:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <gyro_get_filtered_data+0x128>)
 800166c:	701a      	strb	r2, [r3, #0]
}
 800166e:	bf00      	nop
 8001670:	3720      	adds	r7, #32
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000278 	.word	0x20000278
 800167c:	2000028c 	.word	0x2000028c
 8001680:	200002a0 	.word	0x200002a0
 8001684:	200002b4 	.word	0x200002b4
 8001688:	66666667 	.word	0x66666667

0800168c <gyro_ReadWhoAmI>:

void gyro_ReadWhoAmI(void) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
	uint8_t tx = WHO_AM_I | 0x80;
 8001692:	238f      	movs	r3, #143	@ 0x8f
 8001694:	71fb      	strb	r3, [r7, #7]
	uint8_t rx = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	71bb      	strb	r3, [r7, #6]

	if (!spi5_acquire())
 800169a:	f001 f8f9 	bl	8002890 <spi5_acquire>
 800169e:	4603      	mov	r3, r0
 80016a0:	f083 0301 	eor.w	r3, r3, #1
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d126      	bne.n	80016f8 <gyro_ReadWhoAmI+0x6c>
		return;

	GYRO_CS_LOW();
 80016aa:	2200      	movs	r2, #0
 80016ac:	2102      	movs	r1, #2
 80016ae:	4814      	ldr	r0, [pc, #80]	@ (8001700 <gyro_ReadWhoAmI+0x74>)
 80016b0:	f002 fcea 	bl	8004088 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &tx, 1, 10);
 80016b4:	1df9      	adds	r1, r7, #7
 80016b6:	230a      	movs	r3, #10
 80016b8:	2201      	movs	r2, #1
 80016ba:	4812      	ldr	r0, [pc, #72]	@ (8001704 <gyro_ReadWhoAmI+0x78>)
 80016bc:	f005 ff13 	bl	80074e6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi5, &rx, 1, 10);
 80016c0:	1db9      	adds	r1, r7, #6
 80016c2:	230a      	movs	r3, #10
 80016c4:	2201      	movs	r2, #1
 80016c6:	480f      	ldr	r0, [pc, #60]	@ (8001704 <gyro_ReadWhoAmI+0x78>)
 80016c8:	f006 f851 	bl	800776e <HAL_SPI_Receive>
	GYRO_CS_HIGH();
 80016cc:	2201      	movs	r2, #1
 80016ce:	2102      	movs	r1, #2
 80016d0:	480b      	ldr	r0, [pc, #44]	@ (8001700 <gyro_ReadWhoAmI+0x74>)
 80016d2:	f002 fcd9 	bl	8004088 <HAL_GPIO_WritePin>

	spi5_release();
 80016d6:	f001 f8ef 	bl	80028b8 <spi5_release>

	if (rx != 0xD3) {
 80016da:	79bb      	ldrb	r3, [r7, #6]
 80016dc:	2bd3      	cmp	r3, #211	@ 0xd3
 80016de:	d005      	beq.n	80016ec <gyro_ReadWhoAmI+0x60>
		printf("WHO_AM_I error: 0x%02X (expected 0xD3)\r\n", rx);
 80016e0:	79bb      	ldrb	r3, [r7, #6]
 80016e2:	4619      	mov	r1, r3
 80016e4:	4808      	ldr	r0, [pc, #32]	@ (8001708 <gyro_ReadWhoAmI+0x7c>)
 80016e6:	f00a f991 	bl	800ba0c <iprintf>
 80016ea:	e006      	b.n	80016fa <gyro_ReadWhoAmI+0x6e>
	} else {
		printf("WHO_AM_I OK: 0x%02X\r\n", rx);
 80016ec:	79bb      	ldrb	r3, [r7, #6]
 80016ee:	4619      	mov	r1, r3
 80016f0:	4806      	ldr	r0, [pc, #24]	@ (800170c <gyro_ReadWhoAmI+0x80>)
 80016f2:	f00a f98b 	bl	800ba0c <iprintf>
 80016f6:	e000      	b.n	80016fa <gyro_ReadWhoAmI+0x6e>
		return;
 80016f8:	bf00      	nop
	}
}
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40020800 	.word	0x40020800
 8001704:	20025cb0 	.word	0x20025cb0
 8001708:	0800d870 	.word	0x0800d870
 800170c:	0800d89c 	.word	0x0800d89c

08001710 <gyro_get_data>:

void gyro_get_data(Gyro_Int_Data *gyro_data) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]

	uint8_t tx = OUT_X_L | 0x80 | 0x40;
 8001718:	23e8      	movs	r3, #232	@ 0xe8
 800171a:	73fb      	strb	r3, [r7, #15]
	uint8_t rx[6];
	if (gyro_is_data_ready()==false) {
 800171c:	f000 f856 	bl	80017cc <gyro_is_data_ready>
 8001720:	4603      	mov	r3, r0
 8001722:	f083 0301 	eor.w	r3, r3, #1
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <gyro_get_data+0x24>
		printf("Data not ready\r\n");
 800172c:	4824      	ldr	r0, [pc, #144]	@ (80017c0 <gyro_get_data+0xb0>)
 800172e:	f00a f9d5 	bl	800badc <puts>
		return;
 8001732:	e041      	b.n	80017b8 <gyro_get_data+0xa8>
	}

	if (!spi5_acquire())
 8001734:	f001 f8ac 	bl	8002890 <spi5_acquire>
 8001738:	4603      	mov	r3, r0
 800173a:	f083 0301 	eor.w	r3, r3, #1
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	d138      	bne.n	80017b6 <gyro_get_data+0xa6>
		return;

	GYRO_CS_LOW();
 8001744:	2200      	movs	r2, #0
 8001746:	2102      	movs	r1, #2
 8001748:	481e      	ldr	r0, [pc, #120]	@ (80017c4 <gyro_get_data+0xb4>)
 800174a:	f002 fc9d 	bl	8004088 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &tx, 1, 10);
 800174e:	f107 010f 	add.w	r1, r7, #15
 8001752:	230a      	movs	r3, #10
 8001754:	2201      	movs	r2, #1
 8001756:	481c      	ldr	r0, [pc, #112]	@ (80017c8 <gyro_get_data+0xb8>)
 8001758:	f005 fec5 	bl	80074e6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi5, rx, 6, 10);
 800175c:	f107 0108 	add.w	r1, r7, #8
 8001760:	230a      	movs	r3, #10
 8001762:	2206      	movs	r2, #6
 8001764:	4818      	ldr	r0, [pc, #96]	@ (80017c8 <gyro_get_data+0xb8>)
 8001766:	f006 f802 	bl	800776e <HAL_SPI_Receive>
	GYRO_CS_HIGH();
 800176a:	2201      	movs	r2, #1
 800176c:	2102      	movs	r1, #2
 800176e:	4815      	ldr	r0, [pc, #84]	@ (80017c4 <gyro_get_data+0xb4>)
 8001770:	f002 fc8a 	bl	8004088 <HAL_GPIO_WritePin>

	spi5_release();
 8001774:	f001 f8a0 	bl	80028b8 <spi5_release>

	gyro_data->x = (int16_t) (rx[1] << 8 | rx[0]);
 8001778:	7a7b      	ldrb	r3, [r7, #9]
 800177a:	b21b      	sxth	r3, r3
 800177c:	021b      	lsls	r3, r3, #8
 800177e:	b21a      	sxth	r2, r3
 8001780:	7a3b      	ldrb	r3, [r7, #8]
 8001782:	b21b      	sxth	r3, r3
 8001784:	4313      	orrs	r3, r2
 8001786:	b21a      	sxth	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	801a      	strh	r2, [r3, #0]
	gyro_data->y = (int16_t) (rx[3] << 8 | rx[2]);
 800178c:	7afb      	ldrb	r3, [r7, #11]
 800178e:	b21b      	sxth	r3, r3
 8001790:	021b      	lsls	r3, r3, #8
 8001792:	b21a      	sxth	r2, r3
 8001794:	7abb      	ldrb	r3, [r7, #10]
 8001796:	b21b      	sxth	r3, r3
 8001798:	4313      	orrs	r3, r2
 800179a:	b21a      	sxth	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	805a      	strh	r2, [r3, #2]
	gyro_data->z = (int16_t) (rx[5] << 8 | rx[4]);
 80017a0:	7b7b      	ldrb	r3, [r7, #13]
 80017a2:	b21b      	sxth	r3, r3
 80017a4:	021b      	lsls	r3, r3, #8
 80017a6:	b21a      	sxth	r2, r3
 80017a8:	7b3b      	ldrb	r3, [r7, #12]
 80017aa:	b21b      	sxth	r3, r3
 80017ac:	4313      	orrs	r3, r2
 80017ae:	b21a      	sxth	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	809a      	strh	r2, [r3, #4]
 80017b4:	e000      	b.n	80017b8 <gyro_get_data+0xa8>
		return;
 80017b6:	bf00      	nop

}
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	0800d8b4 	.word	0x0800d8b4
 80017c4:	40020800 	.word	0x40020800
 80017c8:	20025cb0 	.word	0x20025cb0

080017cc <gyro_is_data_ready>:

bool gyro_is_data_ready(void) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
	uint8_t tx = STATUS_REG | 0x80;
 80017d2:	23a7      	movs	r3, #167	@ 0xa7
 80017d4:	71fb      	strb	r3, [r7, #7]
	uint8_t rx = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	71bb      	strb	r3, [r7, #6]

	if (!spi5_acquire())
 80017da:	f001 f859 	bl	8002890 <spi5_acquire>
 80017de:	4603      	mov	r3, r0
 80017e0:	f083 0301 	eor.w	r3, r3, #1
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <gyro_is_data_ready+0x22>
		return false;
 80017ea:	2300      	movs	r3, #0
 80017ec:	e01f      	b.n	800182e <gyro_is_data_ready+0x62>

	GYRO_CS_LOW();
 80017ee:	2200      	movs	r2, #0
 80017f0:	2102      	movs	r1, #2
 80017f2:	4811      	ldr	r0, [pc, #68]	@ (8001838 <gyro_is_data_ready+0x6c>)
 80017f4:	f002 fc48 	bl	8004088 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &tx, 1, 10);
 80017f8:	1df9      	adds	r1, r7, #7
 80017fa:	230a      	movs	r3, #10
 80017fc:	2201      	movs	r2, #1
 80017fe:	480f      	ldr	r0, [pc, #60]	@ (800183c <gyro_is_data_ready+0x70>)
 8001800:	f005 fe71 	bl	80074e6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi5, &rx, 1, 10);
 8001804:	1db9      	adds	r1, r7, #6
 8001806:	230a      	movs	r3, #10
 8001808:	2201      	movs	r2, #1
 800180a:	480c      	ldr	r0, [pc, #48]	@ (800183c <gyro_is_data_ready+0x70>)
 800180c:	f005 ffaf 	bl	800776e <HAL_SPI_Receive>
	GYRO_CS_HIGH();
 8001810:	2201      	movs	r2, #1
 8001812:	2102      	movs	r1, #2
 8001814:	4808      	ldr	r0, [pc, #32]	@ (8001838 <gyro_is_data_ready+0x6c>)
 8001816:	f002 fc37 	bl	8004088 <HAL_GPIO_WritePin>

	spi5_release();
 800181a:	f001 f84d 	bl	80028b8 <spi5_release>

	return (rx & 0x08);
 800181e:	79bb      	ldrb	r3, [r7, #6]
 8001820:	f003 0308 	and.w	r3, r3, #8
 8001824:	2b00      	cmp	r3, #0
 8001826:	bf14      	ite	ne
 8001828:	2301      	movne	r3, #1
 800182a:	2300      	moveq	r3, #0
 800182c:	b2db      	uxtb	r3, r3
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40020800 	.word	0x40020800
 800183c:	20025cb0 	.word	0x20025cb0

08001840 <gyro_calculate_offset>:

void gyro_calculate_offset(Gyro_Int_Data *offset) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	int32_t sum_x = 0, sum_y = 0, sum_z = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]
 800184c:	2300      	movs	r3, #0
 800184e:	61bb      	str	r3, [r7, #24]
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
	const uint16_t samples = 500;
 8001854:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001858:	823b      	strh	r3, [r7, #16]
	Gyro_Int_Data raw_data;

	printf("Starting calibration...\r\n");
 800185a:	482e      	ldr	r0, [pc, #184]	@ (8001914 <gyro_calculate_offset+0xd4>)
 800185c:	f00a f93e 	bl	800badc <puts>

	for (uint16_t i = 0; i < samples; i++) {
 8001860:	2300      	movs	r3, #0
 8001862:	827b      	strh	r3, [r7, #18]
 8001864:	e02b      	b.n	80018be <gyro_calculate_offset+0x7e>
		gyro_get_data(&raw_data);
 8001866:	f107 0308 	add.w	r3, r7, #8
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff ff50 	bl	8001710 <gyro_get_data>
		sum_x += raw_data.x;
 8001870:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001874:	461a      	mov	r2, r3
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	4413      	add	r3, r2
 800187a:	61fb      	str	r3, [r7, #28]
		sum_y += raw_data.y;
 800187c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001880:	461a      	mov	r2, r3
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	4413      	add	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
		sum_z += raw_data.z;
 8001888:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800188c:	461a      	mov	r2, r3
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	4413      	add	r3, r2
 8001892:	617b      	str	r3, [r7, #20]
		HAL_Delay(10);
 8001894:	200a      	movs	r0, #10
 8001896:	f001 fbcd 	bl	8003034 <HAL_Delay>

		if (i % 100 == 0)
 800189a:	8a7b      	ldrh	r3, [r7, #18]
 800189c:	4a1e      	ldr	r2, [pc, #120]	@ (8001918 <gyro_calculate_offset+0xd8>)
 800189e:	fba2 1203 	umull	r1, r2, r2, r3
 80018a2:	0952      	lsrs	r2, r2, #5
 80018a4:	2164      	movs	r1, #100	@ 0x64
 80018a6:	fb01 f202 	mul.w	r2, r1, r2
 80018aa:	1a9b      	subs	r3, r3, r2
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d102      	bne.n	80018b8 <gyro_calculate_offset+0x78>
			printf(".\r\n");
 80018b2:	481a      	ldr	r0, [pc, #104]	@ (800191c <gyro_calculate_offset+0xdc>)
 80018b4:	f00a f912 	bl	800badc <puts>
	for (uint16_t i = 0; i < samples; i++) {
 80018b8:	8a7b      	ldrh	r3, [r7, #18]
 80018ba:	3301      	adds	r3, #1
 80018bc:	827b      	strh	r3, [r7, #18]
 80018be:	8a7a      	ldrh	r2, [r7, #18]
 80018c0:	8a3b      	ldrh	r3, [r7, #16]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d3cf      	bcc.n	8001866 <gyro_calculate_offset+0x26>
	}

	offset->x = sum_x / samples;
 80018c6:	8a3b      	ldrh	r3, [r7, #16]
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80018ce:	b21a      	sxth	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	801a      	strh	r2, [r3, #0]
	offset->y = sum_y / samples;
 80018d4:	8a3b      	ldrh	r3, [r7, #16]
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80018dc:	b21a      	sxth	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	805a      	strh	r2, [r3, #2]
	offset->z = sum_z / samples;
 80018e2:	8a3b      	ldrh	r3, [r7, #16]
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80018ea:	b21a      	sxth	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	809a      	strh	r2, [r3, #4]

	printf("\nCalibration complete. Offsets: X=%d, Y=%d, Z=%d\r\n", offset->x,
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018f6:	4619      	mov	r1, r3
			offset->y, offset->z);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	printf("\nCalibration complete. Offsets: X=%d, Y=%d, Z=%d\r\n", offset->x,
 80018fe:	461a      	mov	r2, r3
			offset->y, offset->z);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	printf("\nCalibration complete. Offsets: X=%d, Y=%d, Z=%d\r\n", offset->x,
 8001906:	4806      	ldr	r0, [pc, #24]	@ (8001920 <gyro_calculate_offset+0xe0>)
 8001908:	f00a f880 	bl	800ba0c <iprintf>
}
 800190c:	bf00      	nop
 800190e:	3720      	adds	r7, #32
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	0800d8c4 	.word	0x0800d8c4
 8001918:	51eb851f 	.word	0x51eb851f
 800191c:	0800d8e0 	.word	0x0800d8e0
 8001920:	0800d8e4 	.word	0x0800d8e4

08001924 <gyro_compensate_and_scale>:

void gyro_compensate_and_scale(Gyro_Int_Data *gyro_data, Gyro_Int_Data *offset, Gyro_Float_Data *gyro_calibrated_dat) {
 8001924:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001928:	b08a      	sub	sp, #40	@ 0x28
 800192a:	af04      	add	r7, sp, #16
 800192c:	60f8      	str	r0, [r7, #12]
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]

	// uwzględenienie kalibracji
	gyro_data->x -= offset->x;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001938:	b29a      	uxth	r2, r3
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001940:	b29b      	uxth	r3, r3
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	b29b      	uxth	r3, r3
 8001946:	b21a      	sxth	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	801a      	strh	r2, [r3, #0]
	gyro_data->y -= offset->y;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001952:	b29a      	uxth	r2, r3
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800195a:	b29b      	uxth	r3, r3
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	b29b      	uxth	r3, r3
 8001960:	b21a      	sxth	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	805a      	strh	r2, [r3, #2]
	gyro_data->z -= offset->z;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800196c:	b29a      	uxth	r2, r3
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001974:	b29b      	uxth	r3, r3
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	b29b      	uxth	r3, r3
 800197a:	b21a      	sxth	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	809a      	strh	r2, [r3, #4]

	float scale = 1.0f;
 8001980:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001984:	617b      	str	r3, [r7, #20]

	if (SENSITIVITY == 0x30)
		scale = 2000.0f / 32768.0f;
 8001986:	4b27      	ldr	r3, [pc, #156]	@ (8001a24 <gyro_compensate_and_scale+0x100>)
 8001988:	617b      	str	r3, [r7, #20]

	if (SENSITIVITY == 0x00)
		scale = 250.0f / 32768.0f;

	// Konwersja do dps (dla skali 2000dps)
	gyro_calibrated_dat->x = gyro_data->x * scale;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001990:	ee07 3a90 	vmov	s15, r3
 8001994:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001998:	edd7 7a05 	vldr	s15, [r7, #20]
 800199c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	edc3 7a00 	vstr	s15, [r3]
	gyro_calibrated_dat->y = gyro_data->y * scale;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019ac:	ee07 3a90 	vmov	s15, r3
 80019b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80019b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	edc3 7a01 	vstr	s15, [r3, #4]
	gyro_calibrated_dat->z = gyro_data->z * scale;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019c8:	ee07 3a90 	vmov	s15, r3
 80019cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80019d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	edc3 7a02 	vstr	s15, [r3, #8]

	printf("X: %.2f dps, Y: %.2f dps, Z: %.2f dps\r\n", gyro_calibrated_dat->x, gyro_calibrated_dat->y, gyro_calibrated_dat->z);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe fdc0 	bl	8000568 <__aeabi_f2d>
 80019e8:	4680      	mov	r8, r0
 80019ea:	4689      	mov	r9, r1
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fdb9 	bl	8000568 <__aeabi_f2d>
 80019f6:	4604      	mov	r4, r0
 80019f8:	460d      	mov	r5, r1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fdb2 	bl	8000568 <__aeabi_f2d>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a0c:	e9cd 4500 	strd	r4, r5, [sp]
 8001a10:	4642      	mov	r2, r8
 8001a12:	464b      	mov	r3, r9
 8001a14:	4804      	ldr	r0, [pc, #16]	@ (8001a28 <gyro_compensate_and_scale+0x104>)
 8001a16:	f009 fff9 	bl	800ba0c <iprintf>
}
 8001a1a:	bf00      	nop
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a24:	3d7a0000 	.word	0x3d7a0000
 8001a28:	0800d918 	.word	0x0800d918

08001a2c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001a30:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa0 <MX_I2C3_Init+0x74>)
 8001a32:	4a1c      	ldr	r2, [pc, #112]	@ (8001aa4 <MX_I2C3_Init+0x78>)
 8001a34:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001a36:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa0 <MX_I2C3_Init+0x74>)
 8001a38:	4a1b      	ldr	r2, [pc, #108]	@ (8001aa8 <MX_I2C3_Init+0x7c>)
 8001a3a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a3c:	4b18      	ldr	r3, [pc, #96]	@ (8001aa0 <MX_I2C3_Init+0x74>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001a42:	4b17      	ldr	r3, [pc, #92]	@ (8001aa0 <MX_I2C3_Init+0x74>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a48:	4b15      	ldr	r3, [pc, #84]	@ (8001aa0 <MX_I2C3_Init+0x74>)
 8001a4a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a4e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a50:	4b13      	ldr	r3, [pc, #76]	@ (8001aa0 <MX_I2C3_Init+0x74>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001a56:	4b12      	ldr	r3, [pc, #72]	@ (8001aa0 <MX_I2C3_Init+0x74>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a5c:	4b10      	ldr	r3, [pc, #64]	@ (8001aa0 <MX_I2C3_Init+0x74>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a62:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa0 <MX_I2C3_Init+0x74>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a68:	480d      	ldr	r0, [pc, #52]	@ (8001aa0 <MX_I2C3_Init+0x74>)
 8001a6a:	f004 f8cd 	bl	8005c08 <HAL_I2C_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001a74:	f000 ff06 	bl	8002884 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4809      	ldr	r0, [pc, #36]	@ (8001aa0 <MX_I2C3_Init+0x74>)
 8001a7c:	f004 fa08 	bl	8005e90 <HAL_I2CEx_ConfigAnalogFilter>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001a86:	f000 fefd 	bl	8002884 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4804      	ldr	r0, [pc, #16]	@ (8001aa0 <MX_I2C3_Init+0x74>)
 8001a8e:	f004 fa3b 	bl	8005f08 <HAL_I2CEx_ConfigDigitalFilter>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001a98:	f000 fef4 	bl	8002884 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	200002b8 	.word	0x200002b8
 8001aa4:	40005c00 	.word	0x40005c00
 8001aa8:	000186a0 	.word	0x000186a0

08001aac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	@ 0x28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a29      	ldr	r2, [pc, #164]	@ (8001b70 <HAL_I2C_MspInit+0xc4>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d14b      	bne.n	8001b66 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	4b28      	ldr	r3, [pc, #160]	@ (8001b74 <HAL_I2C_MspInit+0xc8>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad6:	4a27      	ldr	r2, [pc, #156]	@ (8001b74 <HAL_I2C_MspInit+0xc8>)
 8001ad8:	f043 0304 	orr.w	r3, r3, #4
 8001adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ade:	4b25      	ldr	r3, [pc, #148]	@ (8001b74 <HAL_I2C_MspInit+0xc8>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	4b21      	ldr	r3, [pc, #132]	@ (8001b74 <HAL_I2C_MspInit+0xc8>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af2:	4a20      	ldr	r2, [pc, #128]	@ (8001b74 <HAL_I2C_MspInit+0xc8>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afa:	4b1e      	ldr	r3, [pc, #120]	@ (8001b74 <HAL_I2C_MspInit+0xc8>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001b06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b0c:	2312      	movs	r3, #18
 8001b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b10:	2301      	movs	r3, #1
 8001b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b14:	2300      	movs	r3, #0
 8001b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b18:	2304      	movs	r3, #4
 8001b1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	4619      	mov	r1, r3
 8001b22:	4815      	ldr	r0, [pc, #84]	@ (8001b78 <HAL_I2C_MspInit+0xcc>)
 8001b24:	f002 f904 	bl	8003d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001b28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b2e:	2312      	movs	r3, #18
 8001b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b32:	2301      	movs	r3, #1
 8001b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b36:	2300      	movs	r3, #0
 8001b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b3a:	2304      	movs	r3, #4
 8001b3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	4619      	mov	r1, r3
 8001b44:	480d      	ldr	r0, [pc, #52]	@ (8001b7c <HAL_I2C_MspInit+0xd0>)
 8001b46:	f002 f8f3 	bl	8003d30 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	4b09      	ldr	r3, [pc, #36]	@ (8001b74 <HAL_I2C_MspInit+0xc8>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b52:	4a08      	ldr	r2, [pc, #32]	@ (8001b74 <HAL_I2C_MspInit+0xc8>)
 8001b54:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b5a:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <HAL_I2C_MspInit+0xc8>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b62:	60bb      	str	r3, [r7, #8]
 8001b64:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001b66:	bf00      	nop
 8001b68:	3728      	adds	r7, #40	@ 0x28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40005c00 	.word	0x40005c00
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40020800 	.word	0x40020800
 8001b7c:	40020000 	.word	0x40020000

08001b80 <lcd_cmd>:
		CMD(COLMOD), 0x05, // chosen 16-bit, R5, G6, B5
		CMD(MAC), 0x48, //in documentation this means BGR but it turned out to be RGB, also it set (0,0) to up left corner
		CMD(POS_GAMMA_COR), 0x1F, 0x1A, 0x18, 0x0A, 0x0F, 0x06, 0x45, 0x87, 0x32, 0x0A, 0x07, 0x02, 0x07, 0x05, 0x00,
		CMD(NEG_GAMMA_COR), 0x00, 0x25, 0x27, 0x05, 0x10, 0x09, 0x3A, 0x56, 0x4C, 0x05, 0x0D, 0x0C, 0x2E, 0x2F, 0x0F,
};
static void lcd_cmd(uint8_t cmd){
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	71fb      	strb	r3, [r7, #7]

	if (!spi5_acquire()) return;  // SPI jest zajęte, zwróć
 8001b8a:	f000 fe81 	bl	8002890 <spi5_acquire>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	f083 0301 	eor.w	r3, r3, #1
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d119      	bne.n	8001bce <lcd_cmd+0x4e>

	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_RESET); //teraz komendy
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ba0:	480d      	ldr	r0, [pc, #52]	@ (8001bd8 <lcd_cmd+0x58>)
 8001ba2:	f002 fa71 	bl	8004088 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2104      	movs	r1, #4
 8001baa:	480c      	ldr	r0, [pc, #48]	@ (8001bdc <lcd_cmd+0x5c>)
 8001bac:	f002 fa6c 	bl	8004088 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &cmd, 1, HAL_MAX_DELAY);
 8001bb0:	1df9      	adds	r1, r7, #7
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	4809      	ldr	r0, [pc, #36]	@ (8001be0 <lcd_cmd+0x60>)
 8001bba:	f005 fc94 	bl	80074e6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_SET);
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	2104      	movs	r1, #4
 8001bc2:	4806      	ldr	r0, [pc, #24]	@ (8001bdc <lcd_cmd+0x5c>)
 8001bc4:	f002 fa60 	bl	8004088 <HAL_GPIO_WritePin>

	spi5_release();
 8001bc8:	f000 fe76 	bl	80028b8 <spi5_release>
 8001bcc:	e000      	b.n	8001bd0 <lcd_cmd+0x50>
	if (!spi5_acquire()) return;  // SPI jest zajęte, zwróć
 8001bce:	bf00      	nop

}
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40020c00 	.word	0x40020c00
 8001bdc:	40020800 	.word	0x40020800
 8001be0:	20025cb0 	.word	0x20025cb0

08001be4 <lcd_data>:
static void lcd_data(uint8_t data){
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_SET); //teraz dane
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bf4:	480b      	ldr	r0, [pc, #44]	@ (8001c24 <lcd_data+0x40>)
 8001bf6:	f002 fa47 	bl	8004088 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2104      	movs	r1, #4
 8001bfe:	480a      	ldr	r0, [pc, #40]	@ (8001c28 <lcd_data+0x44>)
 8001c00:	f002 fa42 	bl	8004088 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &data, 1, HAL_MAX_DELAY);
 8001c04:	1df9      	adds	r1, r7, #7
 8001c06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	4807      	ldr	r0, [pc, #28]	@ (8001c2c <lcd_data+0x48>)
 8001c0e:	f005 fc6a 	bl	80074e6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_SET);
 8001c12:	2201      	movs	r2, #1
 8001c14:	2104      	movs	r1, #4
 8001c16:	4804      	ldr	r0, [pc, #16]	@ (8001c28 <lcd_data+0x44>)
 8001c18:	f002 fa36 	bl	8004088 <HAL_GPIO_WritePin>
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40020c00 	.word	0x40020c00
 8001c28:	40020800 	.word	0x40020800
 8001c2c:	20025cb0 	.word	0x20025cb0

08001c30 <lcd_data16>:
static void lcd_data16(uint16_t value){
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 8001c3a:	88fb      	ldrh	r3, [r7, #6]
 8001c3c:	0a1b      	lsrs	r3, r3, #8
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff ffce 	bl	8001be4 <lcd_data>
	lcd_data(value);
 8001c48:	88fb      	ldrh	r3, [r7, #6]
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ffc9 	bl	8001be4 <lcd_data>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <lcd_send>:
static void lcd_send(uint16_t value){
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	4603      	mov	r3, r0
 8001c62:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 8001c64:	88fb      	ldrh	r3, [r7, #6]
 8001c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d005      	beq.n	8001c7a <lcd_send+0x20>
		lcd_cmd(value);
 8001c6e:	88fb      	ldrh	r3, [r7, #6]
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff ff84 	bl	8001b80 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 8001c78:	e004      	b.n	8001c84 <lcd_send+0x2a>
		lcd_data(value);
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff ffb0 	bl	8001be4 <lcd_data>
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <lcd_init>:
void lcd_init(void){
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
  chunk_size = (LCD_HEIGHT * LCD_WIDTH) / how_many_chunks;
 8001c92:	4b23      	ldr	r3, [pc, #140]	@ (8001d20 <lcd_init+0x94>)
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	461a      	mov	r2, r3
 8001c98:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8001c9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	4b20      	ldr	r3, [pc, #128]	@ (8001d24 <lcd_init+0x98>)
 8001ca4:	801a      	strh	r2, [r3, #0]
  y_per_chunk = LCD_HEIGHT / how_many_chunks;
 8001ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d20 <lcd_init+0x94>)
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001cb0:	fb93 f3f2 	sdiv	r3, r3, r2
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d28 <lcd_init+0x9c>)
 8001cb8:	801a      	strh	r2, [r3, #0]

  int i;
  HAL_GPIO_WritePin(RDX_GPIO_Port, RDX_Pin, GPIO_PIN_RESET);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001cc0:	481a      	ldr	r0, [pc, #104]	@ (8001d2c <lcd_init+0xa0>)
 8001cc2:	f002 f9e1 	bl	8004088 <HAL_GPIO_WritePin>
  HAL_Delay(100); // w nocie 10 mikro sec
 8001cc6:	2064      	movs	r0, #100	@ 0x64
 8001cc8:	f001 f9b4 	bl	8003034 <HAL_Delay>
  HAL_GPIO_WritePin(RDX_GPIO_Port, RDX_Pin, GPIO_PIN_SET);
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001cd2:	4816      	ldr	r0, [pc, #88]	@ (8001d2c <lcd_init+0xa0>)
 8001cd4:	f002 f9d8 	bl	8004088 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001cd8:	2064      	movs	r0, #100	@ 0x64
 8001cda:	f001 f9ab 	bl	8003034 <HAL_Delay>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001cde:	2300      	movs	r3, #0
 8001ce0:	607b      	str	r3, [r7, #4]
 8001ce2:	e009      	b.n	8001cf8 <lcd_init+0x6c>
    lcd_send(init_table[i]);
 8001ce4:	4a12      	ldr	r2, [pc, #72]	@ (8001d30 <lcd_init+0xa4>)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ffb4 	bl	8001c5a <lcd_send>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	607b      	str	r3, [r7, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b35      	cmp	r3, #53	@ 0x35
 8001cfc:	d9f2      	bls.n	8001ce4 <lcd_init+0x58>
  }
  HAL_Delay(200);
 8001cfe:	20c8      	movs	r0, #200	@ 0xc8
 8001d00:	f001 f998 	bl	8003034 <HAL_Delay>
  lcd_cmd(SLEEP_OUT);
 8001d04:	2011      	movs	r0, #17
 8001d06:	f7ff ff3b 	bl	8001b80 <lcd_cmd>
  HAL_Delay(120);
 8001d0a:	2078      	movs	r0, #120	@ 0x78
 8001d0c:	f001 f992 	bl	8003034 <HAL_Delay>
  lcd_cmd(DISPLAY_ON);
 8001d10:	2029      	movs	r0, #41	@ 0x29
 8001d12:	f7ff ff35 	bl	8001b80 <lcd_cmd>
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000000 	.word	0x20000000
 8001d24:	20025be6 	.word	0x20025be6
 8001d28:	20025be8 	.word	0x20025be8
 8001d2c:	40020c00 	.word	0x40020c00
 8001d30:	0800d94c 	.word	0x0800d94c

08001d34 <lcd_set_window>:

static void lcd_set_window(int x, int y, int width, int height){
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
 8001d40:	603b      	str	r3, [r7, #0]
	lcd_cmd(COL_ADR_SET);
 8001d42:	202a      	movs	r0, #42	@ 0x2a
 8001d44:	f7ff ff1c 	bl	8001b80 <lcd_cmd>
	lcd_data16(x);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff6f 	bl	8001c30 <lcd_data16>
	lcd_data16(x+width-1);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff ff64 	bl	8001c30 <lcd_data16>
	lcd_cmd(PAGE_ADR_SET);
 8001d68:	202b      	movs	r0, #43	@ 0x2b
 8001d6a:	f7ff ff09 	bl	8001b80 <lcd_cmd>
	lcd_data16(y);
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ff5c 	bl	8001c30 <lcd_data16>
	lcd_data16(y+height-1);
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	4413      	add	r3, r2
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff51 	bl	8001c30 <lcd_data16>
}
 8001d8e:	bf00      	nop
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <lcd_update_rectangle>:
void lcd_update_rectangle(uint16_t idx,int x,int y,int width,int height,uint16_t color){
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
 8001da2:	603b      	str	r3, [r7, #0]
 8001da4:	4603      	mov	r3, r0
 8001da6:	81fb      	strh	r3, [r7, #14]
	rects[idx].x = x;
 8001da8:	89fa      	ldrh	r2, [r7, #14]
 8001daa:	491b      	ldr	r1, [pc, #108]	@ (8001e18 <lcd_update_rectangle+0x80>)
 8001dac:	4613      	mov	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	601a      	str	r2, [r3, #0]
	rects[idx].y = y;
 8001dba:	89fa      	ldrh	r2, [r7, #14]
 8001dbc:	4916      	ldr	r1, [pc, #88]	@ (8001e18 <lcd_update_rectangle+0x80>)
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	3304      	adds	r3, #4
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	601a      	str	r2, [r3, #0]
	rects[idx].width = width;
 8001dce:	89fa      	ldrh	r2, [r7, #14]
 8001dd0:	4911      	ldr	r1, [pc, #68]	@ (8001e18 <lcd_update_rectangle+0x80>)
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	440b      	add	r3, r1
 8001ddc:	3308      	adds	r3, #8
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	601a      	str	r2, [r3, #0]
	rects[idx].height = height;
 8001de2:	89fa      	ldrh	r2, [r7, #14]
 8001de4:	490c      	ldr	r1, [pc, #48]	@ (8001e18 <lcd_update_rectangle+0x80>)
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	440b      	add	r3, r1
 8001df0:	330c      	adds	r3, #12
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	601a      	str	r2, [r3, #0]
	rects[idx].color = color;
 8001df6:	89fa      	ldrh	r2, [r7, #14]
 8001df8:	4907      	ldr	r1, [pc, #28]	@ (8001e18 <lcd_update_rectangle+0x80>)
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	440b      	add	r3, r1
 8001e04:	3310      	adds	r3, #16
 8001e06:	8bba      	ldrh	r2, [r7, #28]
 8001e08:	801a      	strh	r2, [r3, #0]
}
 8001e0a:	bf00      	nop
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	2000030c 	.word	0x2000030c

08001e1c <lcd_update_circle>:
void lcd_update_circle(int x,int y,int radius,uint16_t color){
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
 8001e28:	807b      	strh	r3, [r7, #2]
	player.x = x;
 8001e2a:	4a09      	ldr	r2, [pc, #36]	@ (8001e50 <lcd_update_circle+0x34>)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6013      	str	r3, [r2, #0]
	player.y = y;
 8001e30:	4a07      	ldr	r2, [pc, #28]	@ (8001e50 <lcd_update_circle+0x34>)
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	6053      	str	r3, [r2, #4]
	player.radius = radius;
 8001e36:	4a06      	ldr	r2, [pc, #24]	@ (8001e50 <lcd_update_circle+0x34>)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6093      	str	r3, [r2, #8]
	player.color = color;
 8001e3c:	4a04      	ldr	r2, [pc, #16]	@ (8001e50 <lcd_update_circle+0x34>)
 8001e3e:	887b      	ldrh	r3, [r7, #2]
 8001e40:	8193      	strh	r3, [r2, #12]
}
 8001e42:	bf00      	nop
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	200003d4 	.word	0x200003d4

08001e54 <lcd_delta_circle>:
void lcd_delta_circle(int dx,int dy,int dradius){
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
	player.x += dx;
 8001e60:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee0 <lcd_delta_circle+0x8c>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4413      	add	r3, r2
 8001e68:	4a1d      	ldr	r2, [pc, #116]	@ (8001ee0 <lcd_delta_circle+0x8c>)
 8001e6a:	6013      	str	r3, [r2, #0]
	player.y += dy;
 8001e6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee0 <lcd_delta_circle+0x8c>)
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	4413      	add	r3, r2
 8001e74:	4a1a      	ldr	r2, [pc, #104]	@ (8001ee0 <lcd_delta_circle+0x8c>)
 8001e76:	6053      	str	r3, [r2, #4]
	player.radius += dradius;
 8001e78:	4b19      	ldr	r3, [pc, #100]	@ (8001ee0 <lcd_delta_circle+0x8c>)
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4413      	add	r3, r2
 8001e80:	4a17      	ldr	r2, [pc, #92]	@ (8001ee0 <lcd_delta_circle+0x8c>)
 8001e82:	6093      	str	r3, [r2, #8]

	if (player.x < 0) player.x = 0;
 8001e84:	4b16      	ldr	r3, [pc, #88]	@ (8001ee0 <lcd_delta_circle+0x8c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	da03      	bge.n	8001e94 <lcd_delta_circle+0x40>
 8001e8c:	4b14      	ldr	r3, [pc, #80]	@ (8001ee0 <lcd_delta_circle+0x8c>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	e006      	b.n	8001ea2 <lcd_delta_circle+0x4e>
	else if (player.x > LCD_WIDTH) player.x = LCD_WIDTH;
 8001e94:	4b12      	ldr	r3, [pc, #72]	@ (8001ee0 <lcd_delta_circle+0x8c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2bf0      	cmp	r3, #240	@ 0xf0
 8001e9a:	dd02      	ble.n	8001ea2 <lcd_delta_circle+0x4e>
 8001e9c:	4b10      	ldr	r3, [pc, #64]	@ (8001ee0 <lcd_delta_circle+0x8c>)
 8001e9e:	22f0      	movs	r2, #240	@ 0xf0
 8001ea0:	601a      	str	r2, [r3, #0]
	if (player.y < 0) player.y = 0;
 8001ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee0 <lcd_delta_circle+0x8c>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	da03      	bge.n	8001eb2 <lcd_delta_circle+0x5e>
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee0 <lcd_delta_circle+0x8c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	605a      	str	r2, [r3, #4]
 8001eb0:	e008      	b.n	8001ec4 <lcd_delta_circle+0x70>
	else if (player.y > LCD_HEIGHT) player.y = LCD_HEIGHT;
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee0 <lcd_delta_circle+0x8c>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001eba:	dd03      	ble.n	8001ec4 <lcd_delta_circle+0x70>
 8001ebc:	4b08      	ldr	r3, [pc, #32]	@ (8001ee0 <lcd_delta_circle+0x8c>)
 8001ebe:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001ec2:	605a      	str	r2, [r3, #4]
	if(player.radius<0)player.radius = 0;
 8001ec4:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <lcd_delta_circle+0x8c>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	da02      	bge.n	8001ed2 <lcd_delta_circle+0x7e>
 8001ecc:	4b04      	ldr	r3, [pc, #16]	@ (8001ee0 <lcd_delta_circle+0x8c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
}
 8001ed2:	bf00      	nop
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	200003d4 	.word	0x200003d4

08001ee4 <lcd_put_pixel>:

void lcd_put_pixel(int x, int y, uint16_t color){
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	80fb      	strh	r3, [r7, #6]
	screen_buffer[ (LCD_WIDTH*y) + x] = __REV16(color); //to make send most significant bit first
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	ba5b      	rev16	r3, r3
 8001efa:	613b      	str	r3, [r7, #16]
  return result;
 8001efc:	6939      	ldr	r1, [r7, #16]
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	4613      	mov	r3, r2
 8001f02:	011b      	lsls	r3, r3, #4
 8001f04:	1a9b      	subs	r3, r3, r2
 8001f06:	011b      	lsls	r3, r3, #4
 8001f08:	461a      	mov	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	b289      	uxth	r1, r1
 8001f10:	4a04      	ldr	r2, [pc, #16]	@ (8001f24 <lcd_put_pixel+0x40>)
 8001f12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8001f16:	bf00      	nop
 8001f18:	371c      	adds	r7, #28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	200003e4 	.word	0x200003e4

08001f28 <lcd_put_rect_to_buffer>:
static void lcd_put_rect_to_buffer(Rectangle rect){
 8001f28:	b084      	sub	sp, #16
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	f107 0c10 	add.w	ip, r7, #16
 8001f34:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for(int y=rect.y;y<rect.y+rect.height;y++){
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	e021      	b.n	8001f82 <lcd_put_rect_to_buffer+0x5a>
		for(int x=rect.x;x<rect.x+rect.width;x++){
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	603b      	str	r3, [r7, #0]
 8001f42:	e015      	b.n	8001f70 <lcd_put_rect_to_buffer+0x48>
			if(x>=0 && x<LCD_WIDTH && y>=0 && y<LCD_HEIGHT){
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	db0f      	blt.n	8001f6a <lcd_put_rect_to_buffer+0x42>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	2bef      	cmp	r3, #239	@ 0xef
 8001f4e:	dc0c      	bgt.n	8001f6a <lcd_put_rect_to_buffer+0x42>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	db09      	blt.n	8001f6a <lcd_put_rect_to_buffer+0x42>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001f5c:	da05      	bge.n	8001f6a <lcd_put_rect_to_buffer+0x42>
				lcd_put_pixel(x, y, rect.color);
 8001f5e:	8c3b      	ldrh	r3, [r7, #32]
 8001f60:	461a      	mov	r2, r3
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	6838      	ldr	r0, [r7, #0]
 8001f66:	f7ff ffbd 	bl	8001ee4 <lcd_put_pixel>
		for(int x=rect.x;x<rect.x+rect.width;x++){
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	4413      	add	r3, r2
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	dbe3      	blt.n	8001f44 <lcd_put_rect_to_buffer+0x1c>
	for(int y=rect.y;y<rect.y+rect.height;y++){
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	607b      	str	r3, [r7, #4]
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	4413      	add	r3, r2
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	dbd7      	blt.n	8001f3e <lcd_put_rect_to_buffer+0x16>
			}
		}
	}
}
 8001f8e:	bf00      	nop
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f9a:	b004      	add	sp, #16
 8001f9c:	4770      	bx	lr

08001f9e <lcd_put_circ_to_buffer>:
static void lcd_put_circ_to_buffer(Circle circle){
 8001f9e:	b590      	push	{r4, r7, lr}
 8001fa0:	b087      	sub	sp, #28
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	463c      	mov	r4, r7
 8001fa6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for(int y=circle.y-circle.radius;y<circle.y+circle.radius;y++){
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	e03a      	b.n	800202a <lcd_put_circ_to_buffer+0x8c>
		for(int x=circle.x-circle.radius;x<circle.x+circle.radius;x++){
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	e02c      	b.n	8002018 <lcd_put_circ_to_buffer+0x7a>
			if(x>=0 && x<LCD_WIDTH && y>=0 && y<LCD_HEIGHT){
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	db26      	blt.n	8002012 <lcd_put_circ_to_buffer+0x74>
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	2bef      	cmp	r3, #239	@ 0xef
 8001fc8:	dc23      	bgt.n	8002012 <lcd_put_circ_to_buffer+0x74>
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	db20      	blt.n	8002012 <lcd_put_circ_to_buffer+0x74>
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001fd6:	da1c      	bge.n	8002012 <lcd_put_circ_to_buffer+0x74>
//				if ((pow(x - circle.x, 2) + pow(y - circle.y, 2)) <= pow(circle.radius, 2)){
//					lcd_put_pixel(x, y, circle.color);
//				}
				if( ( (x-circle.x)*(x-circle.x)+(y-circle.y)*(y-circle.y)) <= (circle.radius*circle.radius)){
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	6939      	ldr	r1, [r7, #16]
 8001fe2:	1a8a      	subs	r2, r1, r2
 8001fe4:	fb03 f202 	mul.w	r2, r3, r2
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6979      	ldr	r1, [r7, #20]
 8001fec:	1acb      	subs	r3, r1, r3
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	6978      	ldr	r0, [r7, #20]
 8001ff2:	1a41      	subs	r1, r0, r1
 8001ff4:	fb01 f303 	mul.w	r3, r1, r3
 8001ff8:	441a      	add	r2, r3
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	68b9      	ldr	r1, [r7, #8]
 8001ffe:	fb01 f303 	mul.w	r3, r1, r3
 8002002:	429a      	cmp	r2, r3
 8002004:	dc05      	bgt.n	8002012 <lcd_put_circ_to_buffer+0x74>
					lcd_put_pixel(x, y, circle.color);
 8002006:	89bb      	ldrh	r3, [r7, #12]
 8002008:	461a      	mov	r2, r3
 800200a:	6979      	ldr	r1, [r7, #20]
 800200c:	6938      	ldr	r0, [r7, #16]
 800200e:	f7ff ff69 	bl	8001ee4 <lcd_put_pixel>
		for(int x=circle.x-circle.radius;x<circle.x+circle.radius;x++){
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	3301      	adds	r3, #1
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	4413      	add	r3, r2
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	429a      	cmp	r2, r3
 8002022:	dbcc      	blt.n	8001fbe <lcd_put_circ_to_buffer+0x20>
	for(int y=circle.y-circle.radius;y<circle.y+circle.radius;y++){
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	3301      	adds	r3, #1
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	4413      	add	r3, r2
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	429a      	cmp	r2, r3
 8002034:	dbbe      	blt.n	8001fb4 <lcd_put_circ_to_buffer+0x16>
				}
			}
		}
	}
}
 8002036:	bf00      	nop
 8002038:	bf00      	nop
 800203a:	371c      	adds	r7, #28
 800203c:	46bd      	mov	sp, r7
 800203e:	bd90      	pop	{r4, r7, pc}

08002040 <put_figures_to_buffer>:
static void put_figures_to_buffer(void){
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af02      	add	r7, sp, #8
	for(int i=0; i<LCD_WIDTH*LCD_HEIGHT;i++) {
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	e00d      	b.n	8002068 <put_figures_to_buffer+0x28>
 800204c:	231f      	movs	r3, #31
 800204e:	607b      	str	r3, [r7, #4]
  __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	ba5b      	rev16	r3, r3
 8002054:	603b      	str	r3, [r7, #0]
  return result;
 8002056:	683b      	ldr	r3, [r7, #0]
		screen_buffer[i] = __REV16(BLUE);
 8002058:	b299      	uxth	r1, r3
 800205a:	4a14      	ldr	r2, [pc, #80]	@ (80020ac <put_figures_to_buffer+0x6c>)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0; i<LCD_WIDTH*LCD_HEIGHT;i++) {
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	3301      	adds	r3, #1
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 800206e:	dbed      	blt.n	800204c <put_figures_to_buffer+0xc>
	}

	for(int i=0;i<RECTS_AMOUNT;i++){
 8002070:	2300      	movs	r3, #0
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	e00e      	b.n	8002094 <put_figures_to_buffer+0x54>
		lcd_put_rect_to_buffer(rects[i]);
 8002076:	490e      	ldr	r1, [pc, #56]	@ (80020b0 <put_figures_to_buffer+0x70>)
 8002078:	68ba      	ldr	r2, [r7, #8]
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	691a      	ldr	r2, [r3, #16]
 8002086:	9200      	str	r2, [sp, #0]
 8002088:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800208a:	f7ff ff4d 	bl	8001f28 <lcd_put_rect_to_buffer>
	for(int i=0;i<RECTS_AMOUNT;i++){
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	3301      	adds	r3, #1
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	2b09      	cmp	r3, #9
 8002098:	dded      	ble.n	8002076 <put_figures_to_buffer+0x36>
	}
	lcd_put_circ_to_buffer(player);
 800209a:	4b06      	ldr	r3, [pc, #24]	@ (80020b4 <put_figures_to_buffer+0x74>)
 800209c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800209e:	f7ff ff7e 	bl	8001f9e <lcd_put_circ_to_buffer>
}
 80020a2:	bf00      	nop
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	200003e4 	.word	0x200003e4
 80020b0:	2000030c 	.word	0x2000030c
 80020b4:	200003d4 	.word	0x200003d4

080020b8 <lcd_update>:
void lcd_update(void){
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
	put_figures_to_buffer();
 80020bc:	f7ff ffc0 	bl	8002040 <put_figures_to_buffer>

	current_chunk = 0;
 80020c0:	4b20      	ldr	r3, [pc, #128]	@ (8002144 <lcd_update+0x8c>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	801a      	strh	r2, [r3, #0]
	lcd_set_window(0, current_chunk*y_per_chunk, LCD_WIDTH, LCD_HEIGHT/how_many_chunks);
 80020c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002144 <lcd_update+0x8c>)
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002148 <lcd_update+0x90>)
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	fb03 f102 	mul.w	r1, r3, r2
 80020d4:	4b1d      	ldr	r3, [pc, #116]	@ (800214c <lcd_update+0x94>)
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	461a      	mov	r2, r3
 80020da:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80020de:	fb93 f3f2 	sdiv	r3, r3, r2
 80020e2:	22f0      	movs	r2, #240	@ 0xf0
 80020e4:	2000      	movs	r0, #0
 80020e6:	f7ff fe25 	bl	8001d34 <lcd_set_window>
	lcd_cmd(MEM_WRITE);
 80020ea:	202c      	movs	r0, #44	@ 0x2c
 80020ec:	f7ff fd48 	bl	8001b80 <lcd_cmd>
	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_SET);
 80020f0:	2201      	movs	r2, #1
 80020f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020f6:	4816      	ldr	r0, [pc, #88]	@ (8002150 <lcd_update+0x98>)
 80020f8:	f001 ffc6 	bl	8004088 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 80020fc:	2200      	movs	r2, #0
 80020fe:	2104      	movs	r1, #4
 8002100:	4814      	ldr	r0, [pc, #80]	@ (8002154 <lcd_update+0x9c>)
 8002102:	f001 ffc1 	bl	8004088 <HAL_GPIO_WritePin>

	if (!spi5_acquire()) return;
 8002106:	f000 fbc3 	bl	8002890 <spi5_acquire>
 800210a:	4603      	mov	r3, r0
 800210c:	f083 0301 	eor.w	r3, r3, #1
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d114      	bne.n	8002140 <lcd_update+0x88>

	HAL_SPI_Transmit_DMA(&hspi5, (uint8_t*)(screen_buffer + (current_chunk * chunk_size)), 2*chunk_size);
 8002116:	4b0b      	ldr	r3, [pc, #44]	@ (8002144 <lcd_update+0x8c>)
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	4b0e      	ldr	r3, [pc, #56]	@ (8002158 <lcd_update+0xa0>)
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	fb02 f303 	mul.w	r3, r2, r3
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	4a0d      	ldr	r2, [pc, #52]	@ (800215c <lcd_update+0xa4>)
 8002128:	1899      	adds	r1, r3, r2
 800212a:	4b0b      	ldr	r3, [pc, #44]	@ (8002158 <lcd_update+0xa0>)
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	b29b      	uxth	r3, r3
 8002132:	461a      	mov	r2, r3
 8002134:	480a      	ldr	r0, [pc, #40]	@ (8002160 <lcd_update+0xa8>)
 8002136:	f005 fddd 	bl	8007cf4 <HAL_SPI_Transmit_DMA>

	spi5_release();
 800213a:	f000 fbbd 	bl	80028b8 <spi5_release>
 800213e:	e000      	b.n	8002142 <lcd_update+0x8a>
	if (!spi5_acquire()) return;
 8002140:	bf00      	nop
}
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20025be4 	.word	0x20025be4
 8002148:	20025be8 	.word	0x20025be8
 800214c:	20000000 	.word	0x20000000
 8002150:	40020c00 	.word	0x40020c00
 8002154:	40020800 	.word	0x40020800
 8002158:	20025be6 	.word	0x20025be6
 800215c:	200003e4 	.word	0x200003e4
 8002160:	20025cb0 	.word	0x20025cb0

08002164 <lcd_transfer_done>:
void lcd_transfer_done(void){
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_SET);
 8002168:	2201      	movs	r2, #1
 800216a:	2104      	movs	r1, #4
 800216c:	4802      	ldr	r0, [pc, #8]	@ (8002178 <lcd_transfer_done+0x14>)
 800216e:	f001 ff8b 	bl	8004088 <HAL_GPIO_WritePin>
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40020800 	.word	0x40020800

0800217c <send_next_chunk>:
bool lcd_is_busy(void){
	if (HAL_SPI_GetState(&hspi5) == HAL_SPI_STATE_BUSY) return true;
	else return false;
}
static void send_next_chunk(void){
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
	lcd_set_window(0, current_chunk*y_per_chunk, LCD_WIDTH, LCD_HEIGHT/how_many_chunks);
 8002180:	4b20      	ldr	r3, [pc, #128]	@ (8002204 <send_next_chunk+0x88>)
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	461a      	mov	r2, r3
 8002186:	4b20      	ldr	r3, [pc, #128]	@ (8002208 <send_next_chunk+0x8c>)
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	fb03 f102 	mul.w	r1, r3, r2
 800218e:	4b1f      	ldr	r3, [pc, #124]	@ (800220c <send_next_chunk+0x90>)
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002198:	fb93 f3f2 	sdiv	r3, r3, r2
 800219c:	22f0      	movs	r2, #240	@ 0xf0
 800219e:	2000      	movs	r0, #0
 80021a0:	f7ff fdc8 	bl	8001d34 <lcd_set_window>
	lcd_cmd(MEM_WRITE);
 80021a4:	202c      	movs	r0, #44	@ 0x2c
 80021a6:	f7ff fceb 	bl	8001b80 <lcd_cmd>
	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_SET);
 80021aa:	2201      	movs	r2, #1
 80021ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021b0:	4817      	ldr	r0, [pc, #92]	@ (8002210 <send_next_chunk+0x94>)
 80021b2:	f001 ff69 	bl	8004088 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 80021b6:	2200      	movs	r2, #0
 80021b8:	2104      	movs	r1, #4
 80021ba:	4816      	ldr	r0, [pc, #88]	@ (8002214 <send_next_chunk+0x98>)
 80021bc:	f001 ff64 	bl	8004088 <HAL_GPIO_WritePin>
	lcd_ready = false;
 80021c0:	4b15      	ldr	r3, [pc, #84]	@ (8002218 <send_next_chunk+0x9c>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	701a      	strb	r2, [r3, #0]
	if (!spi5_acquire()) return;
 80021c6:	f000 fb63 	bl	8002890 <spi5_acquire>
 80021ca:	4603      	mov	r3, r0
 80021cc:	f083 0301 	eor.w	r3, r3, #1
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d114      	bne.n	8002200 <send_next_chunk+0x84>
	HAL_SPI_Transmit_DMA(&hspi5, (uint8_t*)(screen_buffer + (current_chunk * chunk_size)), 2*chunk_size);
 80021d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002204 <send_next_chunk+0x88>)
 80021d8:	881b      	ldrh	r3, [r3, #0]
 80021da:	461a      	mov	r2, r3
 80021dc:	4b0f      	ldr	r3, [pc, #60]	@ (800221c <send_next_chunk+0xa0>)
 80021de:	881b      	ldrh	r3, [r3, #0]
 80021e0:	fb02 f303 	mul.w	r3, r2, r3
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	4a0e      	ldr	r2, [pc, #56]	@ (8002220 <send_next_chunk+0xa4>)
 80021e8:	1899      	adds	r1, r3, r2
 80021ea:	4b0c      	ldr	r3, [pc, #48]	@ (800221c <send_next_chunk+0xa0>)
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	461a      	mov	r2, r3
 80021f4:	480b      	ldr	r0, [pc, #44]	@ (8002224 <send_next_chunk+0xa8>)
 80021f6:	f005 fd7d 	bl	8007cf4 <HAL_SPI_Transmit_DMA>

	spi5_release();
 80021fa:	f000 fb5d 	bl	80028b8 <spi5_release>
 80021fe:	e000      	b.n	8002202 <send_next_chunk+0x86>
	if (!spi5_acquire()) return;
 8002200:	bf00      	nop
}
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20025be4 	.word	0x20025be4
 8002208:	20025be8 	.word	0x20025be8
 800220c:	20000000 	.word	0x20000000
 8002210:	40020c00 	.word	0x40020c00
 8002214:	40020800 	.word	0x40020800
 8002218:	20000002 	.word	0x20000002
 800221c:	20025be6 	.word	0x20025be6
 8002220:	200003e4 	.word	0x200003e4
 8002224:	20025cb0 	.word	0x20025cb0

08002228 <go_for_next_chunk>:
void go_for_next_chunk(void){
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
	current_chunk++;
 800222c:	4b0a      	ldr	r3, [pc, #40]	@ (8002258 <go_for_next_chunk+0x30>)
 800222e:	881b      	ldrh	r3, [r3, #0]
 8002230:	3301      	adds	r3, #1
 8002232:	b29a      	uxth	r2, r3
 8002234:	4b08      	ldr	r3, [pc, #32]	@ (8002258 <go_for_next_chunk+0x30>)
 8002236:	801a      	strh	r2, [r3, #0]
	if (current_chunk < how_many_chunks) {
 8002238:	4b07      	ldr	r3, [pc, #28]	@ (8002258 <go_for_next_chunk+0x30>)
 800223a:	881a      	ldrh	r2, [r3, #0]
 800223c:	4b07      	ldr	r3, [pc, #28]	@ (800225c <go_for_next_chunk+0x34>)
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	429a      	cmp	r2, r3
 8002242:	d202      	bcs.n	800224a <go_for_next_chunk+0x22>
		send_next_chunk();
 8002244:	f7ff ff9a 	bl	800217c <send_next_chunk>
	}
	else {
		lcd_ready=true;
		lcd_transfer_done();
	}
}
 8002248:	e004      	b.n	8002254 <go_for_next_chunk+0x2c>
		lcd_ready=true;
 800224a:	4b05      	ldr	r3, [pc, #20]	@ (8002260 <go_for_next_chunk+0x38>)
 800224c:	2201      	movs	r2, #1
 800224e:	701a      	strb	r2, [r3, #0]
		lcd_transfer_done();
 8002250:	f7ff ff88 	bl	8002164 <lcd_transfer_done>
}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20025be4 	.word	0x20025be4
 800225c:	20000000 	.word	0x20000000
 8002260:	20000002 	.word	0x20000002

08002264 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08e      	sub	sp, #56	@ 0x38
 8002268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800226a:	1d3b      	adds	r3, r7, #4
 800226c:	2234      	movs	r2, #52	@ 0x34
 800226e:	2100      	movs	r1, #0
 8002270:	4618      	mov	r0, r3
 8002272:	f009 fd13 	bl	800bc9c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002276:	4b39      	ldr	r3, [pc, #228]	@ (800235c <MX_LTDC_Init+0xf8>)
 8002278:	4a39      	ldr	r2, [pc, #228]	@ (8002360 <MX_LTDC_Init+0xfc>)
 800227a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800227c:	4b37      	ldr	r3, [pc, #220]	@ (800235c <MX_LTDC_Init+0xf8>)
 800227e:	2200      	movs	r2, #0
 8002280:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002282:	4b36      	ldr	r3, [pc, #216]	@ (800235c <MX_LTDC_Init+0xf8>)
 8002284:	2200      	movs	r2, #0
 8002286:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002288:	4b34      	ldr	r3, [pc, #208]	@ (800235c <MX_LTDC_Init+0xf8>)
 800228a:	2200      	movs	r2, #0
 800228c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800228e:	4b33      	ldr	r3, [pc, #204]	@ (800235c <MX_LTDC_Init+0xf8>)
 8002290:	2200      	movs	r2, #0
 8002292:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8002294:	4b31      	ldr	r3, [pc, #196]	@ (800235c <MX_LTDC_Init+0xf8>)
 8002296:	2209      	movs	r2, #9
 8002298:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800229a:	4b30      	ldr	r3, [pc, #192]	@ (800235c <MX_LTDC_Init+0xf8>)
 800229c:	2201      	movs	r2, #1
 800229e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80022a0:	4b2e      	ldr	r3, [pc, #184]	@ (800235c <MX_LTDC_Init+0xf8>)
 80022a2:	221d      	movs	r2, #29
 80022a4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80022a6:	4b2d      	ldr	r3, [pc, #180]	@ (800235c <MX_LTDC_Init+0xf8>)
 80022a8:	2203      	movs	r2, #3
 80022aa:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80022ac:	4b2b      	ldr	r3, [pc, #172]	@ (800235c <MX_LTDC_Init+0xf8>)
 80022ae:	f240 120d 	movw	r2, #269	@ 0x10d
 80022b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80022b4:	4b29      	ldr	r3, [pc, #164]	@ (800235c <MX_LTDC_Init+0xf8>)
 80022b6:	f240 1243 	movw	r2, #323	@ 0x143
 80022ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 80022bc:	4b27      	ldr	r3, [pc, #156]	@ (800235c <MX_LTDC_Init+0xf8>)
 80022be:	f240 1217 	movw	r2, #279	@ 0x117
 80022c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 80022c4:	4b25      	ldr	r3, [pc, #148]	@ (800235c <MX_LTDC_Init+0xf8>)
 80022c6:	f240 1247 	movw	r2, #327	@ 0x147
 80022ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80022cc:	4b23      	ldr	r3, [pc, #140]	@ (800235c <MX_LTDC_Init+0xf8>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80022d4:	4b21      	ldr	r3, [pc, #132]	@ (800235c <MX_LTDC_Init+0xf8>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80022dc:	4b1f      	ldr	r3, [pc, #124]	@ (800235c <MX_LTDC_Init+0xf8>)
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80022e4:	481d      	ldr	r0, [pc, #116]	@ (800235c <MX_LTDC_Init+0xf8>)
 80022e6:	f003 fe4f 	bl	8005f88 <HAL_LTDC_Init>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80022f0:	f000 fac8 	bl	8002884 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80022f8:	23f0      	movs	r3, #240	@ 0xf0
 80022fa:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8002300:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002304:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002306:	2302      	movs	r3, #2
 8002308:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800230a:	23ff      	movs	r3, #255	@ 0xff
 800230c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002312:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002316:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002318:	2307      	movs	r3, #7
 800231a:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800231c:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8002320:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 8002322:	23f0      	movs	r3, #240	@ 0xf0
 8002324:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 8002326:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800232a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002332:	2300      	movs	r3, #0
 8002334:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800233e:	1d3b      	adds	r3, r7, #4
 8002340:	2200      	movs	r2, #0
 8002342:	4619      	mov	r1, r3
 8002344:	4805      	ldr	r0, [pc, #20]	@ (800235c <MX_LTDC_Init+0xf8>)
 8002346:	f003 ffb1 	bl	80062ac <HAL_LTDC_ConfigLayer>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8002350:	f000 fa98 	bl	8002884 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002354:	bf00      	nop
 8002356:	3738      	adds	r7, #56	@ 0x38
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20025bec 	.word	0x20025bec
 8002360:	40016800 	.word	0x40016800

08002364 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b09a      	sub	sp, #104	@ 0x68
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800237c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002380:	2230      	movs	r2, #48	@ 0x30
 8002382:	2100      	movs	r1, #0
 8002384:	4618      	mov	r0, r3
 8002386:	f009 fc89 	bl	800bc9c <memset>
  if(ltdcHandle->Instance==LTDC)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a85      	ldr	r2, [pc, #532]	@ (80025a4 <HAL_LTDC_MspInit+0x240>)
 8002390:	4293      	cmp	r3, r2
 8002392:	f040 8102 	bne.w	800259a <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002396:	2308      	movs	r3, #8
 8002398:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800239a:	2332      	movs	r3, #50	@ 0x32
 800239c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800239e:	2302      	movs	r3, #2
 80023a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80023a2:	2300      	movs	r3, #0
 80023a4:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023aa:	4618      	mov	r0, r3
 80023ac:	f004 fe1e 	bl	8006fec <HAL_RCCEx_PeriphCLKConfig>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80023b6:	f000 fa65 	bl	8002884 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	623b      	str	r3, [r7, #32]
 80023be:	4b7a      	ldr	r3, [pc, #488]	@ (80025a8 <HAL_LTDC_MspInit+0x244>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c2:	4a79      	ldr	r2, [pc, #484]	@ (80025a8 <HAL_LTDC_MspInit+0x244>)
 80023c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80023c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ca:	4b77      	ldr	r3, [pc, #476]	@ (80025a8 <HAL_LTDC_MspInit+0x244>)
 80023cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80023d2:	623b      	str	r3, [r7, #32]
 80023d4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
 80023da:	4b73      	ldr	r3, [pc, #460]	@ (80025a8 <HAL_LTDC_MspInit+0x244>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023de:	4a72      	ldr	r2, [pc, #456]	@ (80025a8 <HAL_LTDC_MspInit+0x244>)
 80023e0:	f043 0320 	orr.w	r3, r3, #32
 80023e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023e6:	4b70      	ldr	r3, [pc, #448]	@ (80025a8 <HAL_LTDC_MspInit+0x244>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ea:	f003 0320 	and.w	r3, r3, #32
 80023ee:	61fb      	str	r3, [r7, #28]
 80023f0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	61bb      	str	r3, [r7, #24]
 80023f6:	4b6c      	ldr	r3, [pc, #432]	@ (80025a8 <HAL_LTDC_MspInit+0x244>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fa:	4a6b      	ldr	r2, [pc, #428]	@ (80025a8 <HAL_LTDC_MspInit+0x244>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	6313      	str	r3, [r2, #48]	@ 0x30
 8002402:	4b69      	ldr	r3, [pc, #420]	@ (80025a8 <HAL_LTDC_MspInit+0x244>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	61bb      	str	r3, [r7, #24]
 800240c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	4b65      	ldr	r3, [pc, #404]	@ (80025a8 <HAL_LTDC_MspInit+0x244>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002416:	4a64      	ldr	r2, [pc, #400]	@ (80025a8 <HAL_LTDC_MspInit+0x244>)
 8002418:	f043 0302 	orr.w	r3, r3, #2
 800241c:	6313      	str	r3, [r2, #48]	@ 0x30
 800241e:	4b62      	ldr	r3, [pc, #392]	@ (80025a8 <HAL_LTDC_MspInit+0x244>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
 800242e:	4b5e      	ldr	r3, [pc, #376]	@ (80025a8 <HAL_LTDC_MspInit+0x244>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002432:	4a5d      	ldr	r2, [pc, #372]	@ (80025a8 <HAL_LTDC_MspInit+0x244>)
 8002434:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002438:	6313      	str	r3, [r2, #48]	@ 0x30
 800243a:	4b5b      	ldr	r3, [pc, #364]	@ (80025a8 <HAL_LTDC_MspInit+0x244>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	4b57      	ldr	r3, [pc, #348]	@ (80025a8 <HAL_LTDC_MspInit+0x244>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244e:	4a56      	ldr	r2, [pc, #344]	@ (80025a8 <HAL_LTDC_MspInit+0x244>)
 8002450:	f043 0304 	orr.w	r3, r3, #4
 8002454:	6313      	str	r3, [r2, #48]	@ 0x30
 8002456:	4b54      	ldr	r3, [pc, #336]	@ (80025a8 <HAL_LTDC_MspInit+0x244>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245a:	f003 0304 	and.w	r3, r3, #4
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	4b50      	ldr	r3, [pc, #320]	@ (80025a8 <HAL_LTDC_MspInit+0x244>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246a:	4a4f      	ldr	r2, [pc, #316]	@ (80025a8 <HAL_LTDC_MspInit+0x244>)
 800246c:	f043 0308 	orr.w	r3, r3, #8
 8002470:	6313      	str	r3, [r2, #48]	@ 0x30
 8002472:	4b4d      	ldr	r3, [pc, #308]	@ (80025a8 <HAL_LTDC_MspInit+0x244>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800247e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002482:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002484:	2302      	movs	r3, #2
 8002486:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248c:	2300      	movs	r3, #0
 800248e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002490:	230e      	movs	r3, #14
 8002492:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002494:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002498:	4619      	mov	r1, r3
 800249a:	4844      	ldr	r0, [pc, #272]	@ (80025ac <HAL_LTDC_MspInit+0x248>)
 800249c:	f001 fc48 	bl	8003d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80024a0:	f641 0358 	movw	r3, #6232	@ 0x1858
 80024a4:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a6:	2302      	movs	r3, #2
 80024a8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ae:	2300      	movs	r3, #0
 80024b0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024b2:	230e      	movs	r3, #14
 80024b4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024ba:	4619      	mov	r1, r3
 80024bc:	483c      	ldr	r0, [pc, #240]	@ (80025b0 <HAL_LTDC_MspInit+0x24c>)
 80024be:	f001 fc37 	bl	8003d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80024c2:	2303      	movs	r3, #3
 80024c4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c6:	2302      	movs	r3, #2
 80024c8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ce:	2300      	movs	r3, #0
 80024d0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80024d2:	2309      	movs	r3, #9
 80024d4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024da:	4619      	mov	r1, r3
 80024dc:	4835      	ldr	r0, [pc, #212]	@ (80025b4 <HAL_LTDC_MspInit+0x250>)
 80024de:	f001 fc27 	bl	8003d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80024e2:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80024e6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e8:	2302      	movs	r3, #2
 80024ea:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f0:	2300      	movs	r3, #0
 80024f2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024f4:	230e      	movs	r3, #14
 80024f6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024fc:	4619      	mov	r1, r3
 80024fe:	482d      	ldr	r0, [pc, #180]	@ (80025b4 <HAL_LTDC_MspInit+0x250>)
 8002500:	f001 fc16 	bl	8003d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002504:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002508:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250a:	2302      	movs	r3, #2
 800250c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002512:	2300      	movs	r3, #0
 8002514:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002516:	230e      	movs	r3, #14
 8002518:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800251a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800251e:	4619      	mov	r1, r3
 8002520:	4825      	ldr	r0, [pc, #148]	@ (80025b8 <HAL_LTDC_MspInit+0x254>)
 8002522:	f001 fc05 	bl	8003d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002526:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800252a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252c:	2302      	movs	r3, #2
 800252e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002534:	2300      	movs	r3, #0
 8002536:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002538:	230e      	movs	r3, #14
 800253a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800253c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002540:	4619      	mov	r1, r3
 8002542:	481e      	ldr	r0, [pc, #120]	@ (80025bc <HAL_LTDC_MspInit+0x258>)
 8002544:	f001 fbf4 	bl	8003d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2D6_Pin;
 8002548:	2348      	movs	r3, #72	@ 0x48
 800254a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254c:	2302      	movs	r3, #2
 800254e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002550:	2300      	movs	r3, #0
 8002552:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002554:	2300      	movs	r3, #0
 8002556:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002558:	230e      	movs	r3, #14
 800255a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800255c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002560:	4619      	mov	r1, r3
 8002562:	4817      	ldr	r0, [pc, #92]	@ (80025c0 <HAL_LTDC_MspInit+0x25c>)
 8002564:	f001 fbe4 	bl	8003d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002568:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800256c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256e:	2302      	movs	r3, #2
 8002570:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002576:	2300      	movs	r3, #0
 8002578:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800257a:	2309      	movs	r3, #9
 800257c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800257e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002582:	4619      	mov	r1, r3
 8002584:	480c      	ldr	r0, [pc, #48]	@ (80025b8 <HAL_LTDC_MspInit+0x254>)
 8002586:	f001 fbd3 	bl	8003d30 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800258a:	2200      	movs	r2, #0
 800258c:	2105      	movs	r1, #5
 800258e:	2058      	movs	r0, #88	@ 0x58
 8002590:	f000 fe2c 	bl	80031ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002594:	2058      	movs	r0, #88	@ 0x58
 8002596:	f000 fe45 	bl	8003224 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800259a:	bf00      	nop
 800259c:	3768      	adds	r7, #104	@ 0x68
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40016800 	.word	0x40016800
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40021400 	.word	0x40021400
 80025b0:	40020000 	.word	0x40020000
 80025b4:	40020400 	.word	0x40020400
 80025b8:	40021800 	.word	0x40021800
 80025bc:	40020800 	.word	0x40020800
 80025c0:	40020c00 	.word	0x40020c00

080025c4 <ball_move>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ball_move(){
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
	int dx = (int)(gyro_scaled_data_s.y);
 80025ca:	4b27      	ldr	r3, [pc, #156]	@ (8002668 <ball_move+0xa4>)
 80025cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80025d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025d4:	ee17 3a90 	vmov	r3, s15
 80025d8:	607b      	str	r3, [r7, #4]
	int dy = (int)(gyro_scaled_data_s.x);
 80025da:	4b23      	ldr	r3, [pc, #140]	@ (8002668 <ball_move+0xa4>)
 80025dc:	edd3 7a00 	vldr	s15, [r3]
 80025e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025e4:	ee17 3a90 	vmov	r3, s15
 80025e8:	603b      	str	r3, [r7, #0]

	if (abs(dx) < 1) dx=0;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	db04      	blt.n	80025fa <ball_move+0x36>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	dc01      	bgt.n	80025fa <ball_move+0x36>
 80025f6:	2300      	movs	r3, #0
 80025f8:	607b      	str	r3, [r7, #4]
	if (abs(dy) < 1) dy=0;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	db04      	blt.n	800260a <ball_move+0x46>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	dc01      	bgt.n	800260a <ball_move+0x46>
 8002606:	2300      	movs	r3, #0
 8002608:	603b      	str	r3, [r7, #0]
	if(dx==0 && dy==0)return;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d102      	bne.n	8002616 <ball_move+0x52>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d023      	beq.n	800265e <ball_move+0x9a>

	dx *= 5.0f;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	ee07 3a90 	vmov	s15, r3
 800261c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002620:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002624:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002628:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800262c:	ee17 3a90 	vmov	r3, s15
 8002630:	607b      	str	r3, [r7, #4]
	dy *= 5.0f;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	ee07 3a90 	vmov	s15, r3
 8002638:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800263c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002640:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002644:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002648:	ee17 3a90 	vmov	r3, s15
 800264c:	603b      	str	r3, [r7, #0]

	lcd_delta_circle(dx,dy,0);
 800264e:	2200      	movs	r2, #0
 8002650:	6839      	ldr	r1, [r7, #0]
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff fbfe 	bl	8001e54 <lcd_delta_circle>
	lcd_update();
 8002658:	f7ff fd2e 	bl	80020b8 <lcd_update>
 800265c:	e000      	b.n	8002660 <ball_move+0x9c>
	if(dx==0 && dy==0)return;
 800265e:	bf00      	nop
}
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20025c9c 	.word	0x20025c9c

0800266c <HAL_SPI_TxCpltCallback>:
	} else {
		clicked = 0;
	}
}

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi5) {
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a0a      	ldr	r2, [pc, #40]	@ (80026a0 <HAL_SPI_TxCpltCallback+0x34>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d10c      	bne.n	8002696 <HAL_SPI_TxCpltCallback+0x2a>
		go_for_next_chunk();
 800267c:	f7ff fdd4 	bl	8002228 <go_for_next_chunk>
		if (lcd_ready) {
 8002680:	4b08      	ldr	r3, [pc, #32]	@ (80026a4 <HAL_SPI_TxCpltCallback+0x38>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d005      	beq.n	8002696 <HAL_SPI_TxCpltCallback+0x2a>
			printf("LCD ready\r\n");
 800268a:	4807      	ldr	r0, [pc, #28]	@ (80026a8 <HAL_SPI_TxCpltCallback+0x3c>)
 800268c:	f009 fa26 	bl	800badc <puts>
			gyro_get_filtered_data(&gyro_raw_data_s);
 8002690:	4806      	ldr	r0, [pc, #24]	@ (80026ac <HAL_SPI_TxCpltCallback+0x40>)
 8002692:	f7fe ff63 	bl	800155c <gyro_get_filtered_data>
		}
	}
}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20025cb0 	.word	0x20025cb0
 80026a4:	20000002 	.word	0x20000002
 80026a8:	0800d940 	.word	0x0800d940
 80026ac:	20025c94 	.word	0x20025c94

080026b0 <set_new_figs>:

void set_new_figs(void) {
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af02      	add	r7, sp, #8
	lcd_update_rectangle(0, 0, 0, 100, 100, RED);
 80026b6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80026ba:	9301      	str	r3, [sp, #4]
 80026bc:	2364      	movs	r3, #100	@ 0x64
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	2364      	movs	r3, #100	@ 0x64
 80026c2:	2200      	movs	r2, #0
 80026c4:	2100      	movs	r1, #0
 80026c6:	2000      	movs	r0, #0
 80026c8:	f7ff fb66 	bl	8001d98 <lcd_update_rectangle>
	lcd_update_circle(100, 100, 20, GREEN);
 80026cc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80026d0:	2214      	movs	r2, #20
 80026d2:	2164      	movs	r1, #100	@ 0x64
 80026d4:	2064      	movs	r0, #100	@ 0x64
 80026d6:	f7ff fba1 	bl	8001e1c <lcd_update_circle>
}
 80026da:	bf00      	nop
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80026e6:	f000 fc63 	bl	8002fb0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80026ea:	f000 f84f 	bl	800278c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80026ee:	f7fe fd9d 	bl	800122c <MX_GPIO_Init>
	MX_DMA_Init();
 80026f2:	f7fe fc35 	bl	8000f60 <MX_DMA_Init>
	MX_CRC_Init();
 80026f6:	f7fe fbfd 	bl	8000ef4 <MX_CRC_Init>
	MX_DMA2D_Init();
 80026fa:	f7fe fc51 	bl	8000fa0 <MX_DMA2D_Init>
	MX_FMC_Init();
 80026fe:	f7fe fca9 	bl	8001054 <MX_FMC_Init>
	MX_I2C3_Init();
 8002702:	f7ff f993 	bl	8001a2c <MX_I2C3_Init>
	MX_LTDC_Init();
 8002706:	f7ff fdad 	bl	8002264 <MX_LTDC_Init>
	MX_SPI5_Init();
 800270a:	f000 f8e1 	bl	80028d0 <MX_SPI5_Init>
	MX_TIM1_Init();
 800270e:	f000 fb41 	bl	8002d94 <MX_TIM1_Init>
	MX_USART1_UART_Init();
 8002712:	f000 fbb1 	bl	8002e78 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	lcd_init();
 8002716:	f7ff fab9 	bl	8001c8c <lcd_init>
	for (int y = 0; y < LCD_HEIGHT; y++) {
 800271a:	2300      	movs	r3, #0
 800271c:	607b      	str	r3, [r7, #4]
 800271e:	e010      	b.n	8002742 <main+0x62>
		for (int x = 0; x < LCD_WIDTH; x++) {
 8002720:	2300      	movs	r3, #0
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	e007      	b.n	8002736 <main+0x56>
			lcd_put_pixel(x, y, BLUE);
 8002726:	221f      	movs	r2, #31
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	6838      	ldr	r0, [r7, #0]
 800272c:	f7ff fbda 	bl	8001ee4 <lcd_put_pixel>
		for (int x = 0; x < LCD_WIDTH; x++) {
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	3301      	adds	r3, #1
 8002734:	603b      	str	r3, [r7, #0]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2bef      	cmp	r3, #239	@ 0xef
 800273a:	ddf4      	ble.n	8002726 <main+0x46>
	for (int y = 0; y < LCD_HEIGHT; y++) {
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3301      	adds	r3, #1
 8002740:	607b      	str	r3, [r7, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002748:	dbea      	blt.n	8002720 <main+0x40>
		}
	}
	set_new_figs();
 800274a:	f7ff ffb1 	bl	80026b0 <set_new_figs>
	lcd_update();
 800274e:	f7ff fcb3 	bl	80020b8 <lcd_update>


	HAL_Delay(300); //żeby LCD skończył swoje przesyłanie
 8002752:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002756:	f000 fc6d 	bl	8003034 <HAL_Delay>
	gyro_init();
 800275a:	f7fe fea7 	bl	80014ac <gyro_init>
	gyro_calculate_offset(&gyro_offset_s);
 800275e:	4808      	ldr	r0, [pc, #32]	@ (8002780 <main+0xa0>)
 8002760:	f7ff f86e 	bl	8001840 <gyro_calculate_offset>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
		gyro_compensate_and_scale(&gyro_raw_data_s, &gyro_offset_s, &gyro_scaled_data_s);
 8002764:	4a07      	ldr	r2, [pc, #28]	@ (8002784 <main+0xa4>)
 8002766:	4906      	ldr	r1, [pc, #24]	@ (8002780 <main+0xa0>)
 8002768:	4807      	ldr	r0, [pc, #28]	@ (8002788 <main+0xa8>)
 800276a:	f7ff f8db 	bl	8001924 <gyro_compensate_and_scale>
		ball_move();
 800276e:	f7ff ff29 	bl	80025c4 <ball_move>
		HAL_Delay(300);
 8002772:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002776:	f000 fc5d 	bl	8003034 <HAL_Delay>
		gyro_compensate_and_scale(&gyro_raw_data_s, &gyro_offset_s, &gyro_scaled_data_s);
 800277a:	bf00      	nop
 800277c:	e7f2      	b.n	8002764 <main+0x84>
 800277e:	bf00      	nop
 8002780:	20025ca8 	.word	0x20025ca8
 8002784:	20025c9c 	.word	0x20025c9c
 8002788:	20025c94 	.word	0x20025c94

0800278c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800278c:	b580      	push	{r7, lr}
 800278e:	b094      	sub	sp, #80	@ 0x50
 8002790:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002792:	f107 0320 	add.w	r3, r7, #32
 8002796:	2230      	movs	r2, #48	@ 0x30
 8002798:	2100      	movs	r1, #0
 800279a:	4618      	mov	r0, r3
 800279c:	f009 fa7e 	bl	800bc9c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80027a0:	f107 030c 	add.w	r3, r7, #12
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	60da      	str	r2, [r3, #12]
 80027ae:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80027b0:	2300      	movs	r3, #0
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	4b28      	ldr	r3, [pc, #160]	@ (8002858 <SystemClock_Config+0xcc>)
 80027b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b8:	4a27      	ldr	r2, [pc, #156]	@ (8002858 <SystemClock_Config+0xcc>)
 80027ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027be:	6413      	str	r3, [r2, #64]	@ 0x40
 80027c0:	4b25      	ldr	r3, [pc, #148]	@ (8002858 <SystemClock_Config+0xcc>)
 80027c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027c8:	60bb      	str	r3, [r7, #8]
 80027ca:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80027cc:	2300      	movs	r3, #0
 80027ce:	607b      	str	r3, [r7, #4]
 80027d0:	4b22      	ldr	r3, [pc, #136]	@ (800285c <SystemClock_Config+0xd0>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80027d8:	4a20      	ldr	r2, [pc, #128]	@ (800285c <SystemClock_Config+0xd0>)
 80027da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027de:	6013      	str	r3, [r2, #0]
 80027e0:	4b1e      	ldr	r3, [pc, #120]	@ (800285c <SystemClock_Config+0xd0>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80027e8:	607b      	str	r3, [r7, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027ec:	2301      	movs	r3, #1
 80027ee:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027f4:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027f6:	2302      	movs	r3, #2
 80027f8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80027fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8002800:	2304      	movs	r3, #4
 8002802:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 8002804:	2348      	movs	r3, #72	@ 0x48
 8002806:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002808:	2302      	movs	r3, #2
 800280a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 3;
 800280c:	2303      	movs	r3, #3
 800280e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002810:	f107 0320 	add.w	r3, r7, #32
 8002814:	4618      	mov	r0, r3
 8002816:	f003 ff1f 	bl	8006658 <HAL_RCC_OscConfig>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <SystemClock_Config+0x98>
		Error_Handler();
 8002820:	f000 f830 	bl	8002884 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002824:	230f      	movs	r3, #15
 8002826:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002828:	2302      	movs	r3, #2
 800282a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002830:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002834:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800283a:	f107 030c 	add.w	r3, r7, #12
 800283e:	2102      	movs	r1, #2
 8002840:	4618      	mov	r0, r3
 8002842:	f004 f981 	bl	8006b48 <HAL_RCC_ClockConfig>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <SystemClock_Config+0xc4>
		Error_Handler();
 800284c:	f000 f81a 	bl	8002884 <Error_Handler>
	}
}
 8002850:	bf00      	nop
 8002852:	3750      	adds	r7, #80	@ 0x50
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40023800 	.word	0x40023800
 800285c:	40007000 	.word	0x40007000

08002860 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a04      	ldr	r2, [pc, #16]	@ (8002880 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d101      	bne.n	8002876 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8002872:	f000 fbbf 	bl	8002ff4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002876:	bf00      	nop
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40001000 	.word	0x40001000

08002884 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002888:	b672      	cpsid	i
}
 800288a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800288c:	bf00      	nop
 800288e:	e7fd      	b.n	800288c <Error_Handler+0x8>

08002890 <spi5_acquire>:
/* USER CODE BEGIN 0 */


static volatile bool spi5_busy = false;  //flaga informująca czy SPI5 jest zajęte

bool spi5_acquire(void) {  //zajmij SPI, gdy jest wolne
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0

	if (spi5_busy) return false;
 8002894:	4b07      	ldr	r3, [pc, #28]	@ (80028b4 <spi5_acquire+0x24>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <spi5_acquire+0x12>
 800289e:	2300      	movs	r3, #0
 80028a0:	e003      	b.n	80028aa <spi5_acquire+0x1a>

    spi5_busy = true;
 80028a2:	4b04      	ldr	r3, [pc, #16]	@ (80028b4 <spi5_acquire+0x24>)
 80028a4:	2201      	movs	r2, #1
 80028a6:	701a      	strb	r2, [r3, #0]
    return true;
 80028a8:	2301      	movs	r3, #1
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	20025cae 	.word	0x20025cae

080028b8 <spi5_release>:

void spi5_release(void) { //zwolnij SPI
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
    spi5_busy = false;
 80028bc:	4b03      	ldr	r3, [pc, #12]	@ (80028cc <spi5_release+0x14>)
 80028be:	2200      	movs	r2, #0
 80028c0:	701a      	strb	r2, [r3, #0]
}
 80028c2:	bf00      	nop
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	20025cae 	.word	0x20025cae

080028d0 <MX_SPI5_Init>:
SPI_HandleTypeDef hspi5;
DMA_HandleTypeDef hdma_spi5_tx;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80028d4:	4b17      	ldr	r3, [pc, #92]	@ (8002934 <MX_SPI5_Init+0x64>)
 80028d6:	4a18      	ldr	r2, [pc, #96]	@ (8002938 <MX_SPI5_Init+0x68>)
 80028d8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80028da:	4b16      	ldr	r3, [pc, #88]	@ (8002934 <MX_SPI5_Init+0x64>)
 80028dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80028e0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80028e2:	4b14      	ldr	r3, [pc, #80]	@ (8002934 <MX_SPI5_Init+0x64>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80028e8:	4b12      	ldr	r3, [pc, #72]	@ (8002934 <MX_SPI5_Init+0x64>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028ee:	4b11      	ldr	r3, [pc, #68]	@ (8002934 <MX_SPI5_Init+0x64>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002934 <MX_SPI5_Init+0x64>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80028fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002934 <MX_SPI5_Init+0x64>)
 80028fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002900:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002902:	4b0c      	ldr	r3, [pc, #48]	@ (8002934 <MX_SPI5_Init+0x64>)
 8002904:	2218      	movs	r2, #24
 8002906:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002908:	4b0a      	ldr	r3, [pc, #40]	@ (8002934 <MX_SPI5_Init+0x64>)
 800290a:	2200      	movs	r2, #0
 800290c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800290e:	4b09      	ldr	r3, [pc, #36]	@ (8002934 <MX_SPI5_Init+0x64>)
 8002910:	2200      	movs	r2, #0
 8002912:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002914:	4b07      	ldr	r3, [pc, #28]	@ (8002934 <MX_SPI5_Init+0x64>)
 8002916:	2200      	movs	r2, #0
 8002918:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800291a:	4b06      	ldr	r3, [pc, #24]	@ (8002934 <MX_SPI5_Init+0x64>)
 800291c:	220a      	movs	r2, #10
 800291e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002920:	4804      	ldr	r0, [pc, #16]	@ (8002934 <MX_SPI5_Init+0x64>)
 8002922:	f004 fd57 	bl	80073d4 <HAL_SPI_Init>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800292c:	f7ff ffaa 	bl	8002884 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002930:	bf00      	nop
 8002932:	bd80      	pop	{r7, pc}
 8002934:	20025cb0 	.word	0x20025cb0
 8002938:	40015000 	.word	0x40015000

0800293c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08a      	sub	sp, #40	@ 0x28
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002944:	f107 0314 	add.w	r3, r7, #20
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	605a      	str	r2, [r3, #4]
 800294e:	609a      	str	r2, [r3, #8]
 8002950:	60da      	str	r2, [r3, #12]
 8002952:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a30      	ldr	r2, [pc, #192]	@ (8002a1c <HAL_SPI_MspInit+0xe0>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d15a      	bne.n	8002a14 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	4b2f      	ldr	r3, [pc, #188]	@ (8002a20 <HAL_SPI_MspInit+0xe4>)
 8002964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002966:	4a2e      	ldr	r2, [pc, #184]	@ (8002a20 <HAL_SPI_MspInit+0xe4>)
 8002968:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800296c:	6453      	str	r3, [r2, #68]	@ 0x44
 800296e:	4b2c      	ldr	r3, [pc, #176]	@ (8002a20 <HAL_SPI_MspInit+0xe4>)
 8002970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002972:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002976:	613b      	str	r3, [r7, #16]
 8002978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	4b28      	ldr	r3, [pc, #160]	@ (8002a20 <HAL_SPI_MspInit+0xe4>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002982:	4a27      	ldr	r2, [pc, #156]	@ (8002a20 <HAL_SPI_MspInit+0xe4>)
 8002984:	f043 0320 	orr.w	r3, r3, #32
 8002988:	6313      	str	r3, [r2, #48]	@ 0x30
 800298a:	4b25      	ldr	r3, [pc, #148]	@ (8002a20 <HAL_SPI_MspInit+0xe4>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298e:	f003 0320 	and.w	r3, r3, #32
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002996:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800299a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299c:	2302      	movs	r3, #2
 800299e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a4:	2300      	movs	r3, #0
 80029a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80029a8:	2305      	movs	r3, #5
 80029aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029ac:	f107 0314 	add.w	r3, r7, #20
 80029b0:	4619      	mov	r1, r3
 80029b2:	481c      	ldr	r0, [pc, #112]	@ (8002a24 <HAL_SPI_MspInit+0xe8>)
 80029b4:	f001 f9bc 	bl	8003d30 <HAL_GPIO_Init>

    /* SPI5 DMA Init */
    /* SPI5_TX Init */
    hdma_spi5_tx.Instance = DMA2_Stream4;
 80029b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a28 <HAL_SPI_MspInit+0xec>)
 80029ba:	4a1c      	ldr	r2, [pc, #112]	@ (8002a2c <HAL_SPI_MspInit+0xf0>)
 80029bc:	601a      	str	r2, [r3, #0]
    hdma_spi5_tx.Init.Channel = DMA_CHANNEL_2;
 80029be:	4b1a      	ldr	r3, [pc, #104]	@ (8002a28 <HAL_SPI_MspInit+0xec>)
 80029c0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80029c4:	605a      	str	r2, [r3, #4]
    hdma_spi5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029c6:	4b18      	ldr	r3, [pc, #96]	@ (8002a28 <HAL_SPI_MspInit+0xec>)
 80029c8:	2240      	movs	r2, #64	@ 0x40
 80029ca:	609a      	str	r2, [r3, #8]
    hdma_spi5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029cc:	4b16      	ldr	r3, [pc, #88]	@ (8002a28 <HAL_SPI_MspInit+0xec>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	60da      	str	r2, [r3, #12]
    hdma_spi5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029d2:	4b15      	ldr	r3, [pc, #84]	@ (8002a28 <HAL_SPI_MspInit+0xec>)
 80029d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029d8:	611a      	str	r2, [r3, #16]
    hdma_spi5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029da:	4b13      	ldr	r3, [pc, #76]	@ (8002a28 <HAL_SPI_MspInit+0xec>)
 80029dc:	2200      	movs	r2, #0
 80029de:	615a      	str	r2, [r3, #20]
    hdma_spi5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029e0:	4b11      	ldr	r3, [pc, #68]	@ (8002a28 <HAL_SPI_MspInit+0xec>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	619a      	str	r2, [r3, #24]
    hdma_spi5_tx.Init.Mode = DMA_NORMAL;
 80029e6:	4b10      	ldr	r3, [pc, #64]	@ (8002a28 <HAL_SPI_MspInit+0xec>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	61da      	str	r2, [r3, #28]
    hdma_spi5_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002a28 <HAL_SPI_MspInit+0xec>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	621a      	str	r2, [r3, #32]
    hdma_spi5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002a28 <HAL_SPI_MspInit+0xec>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi5_tx) != HAL_OK)
 80029f8:	480b      	ldr	r0, [pc, #44]	@ (8002a28 <HAL_SPI_MspInit+0xec>)
 80029fa:	f000 fc3d 	bl	8003278 <HAL_DMA_Init>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8002a04:	f7ff ff3e 	bl	8002884 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi5_tx);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a07      	ldr	r2, [pc, #28]	@ (8002a28 <HAL_SPI_MspInit+0xec>)
 8002a0c:	649a      	str	r2, [r3, #72]	@ 0x48
 8002a0e:	4a06      	ldr	r2, [pc, #24]	@ (8002a28 <HAL_SPI_MspInit+0xec>)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8002a14:	bf00      	nop
 8002a16:	3728      	adds	r7, #40	@ 0x28
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40015000 	.word	0x40015000
 8002a20:	40023800 	.word	0x40023800
 8002a24:	40021400 	.word	0x40021400
 8002a28:	20025d08 	.word	0x20025d08
 8002a2c:	40026470 	.word	0x40026470

08002a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	607b      	str	r3, [r7, #4]
 8002a3a:	4b12      	ldr	r3, [pc, #72]	@ (8002a84 <HAL_MspInit+0x54>)
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3e:	4a11      	ldr	r2, [pc, #68]	@ (8002a84 <HAL_MspInit+0x54>)
 8002a40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a44:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a46:	4b0f      	ldr	r3, [pc, #60]	@ (8002a84 <HAL_MspInit+0x54>)
 8002a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a4e:	607b      	str	r3, [r7, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	603b      	str	r3, [r7, #0]
 8002a56:	4b0b      	ldr	r3, [pc, #44]	@ (8002a84 <HAL_MspInit+0x54>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a84 <HAL_MspInit+0x54>)
 8002a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a62:	4b08      	ldr	r3, [pc, #32]	@ (8002a84 <HAL_MspInit+0x54>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a6a:	603b      	str	r3, [r7, #0]
 8002a6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	210f      	movs	r1, #15
 8002a72:	f06f 0001 	mvn.w	r0, #1
 8002a76:	f000 fbb9 	bl	80031ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40023800 	.word	0x40023800

08002a88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08e      	sub	sp, #56	@ 0x38
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	4b33      	ldr	r3, [pc, #204]	@ (8002b6c <HAL_InitTick+0xe4>)
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa0:	4a32      	ldr	r2, [pc, #200]	@ (8002b6c <HAL_InitTick+0xe4>)
 8002aa2:	f043 0310 	orr.w	r3, r3, #16
 8002aa6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aa8:	4b30      	ldr	r3, [pc, #192]	@ (8002b6c <HAL_InitTick+0xe4>)
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aac:	f003 0310 	and.w	r3, r3, #16
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ab4:	f107 0210 	add.w	r2, r7, #16
 8002ab8:	f107 0314 	add.w	r3, r7, #20
 8002abc:	4611      	mov	r1, r2
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f004 fa62 	bl	8006f88 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002ac4:	6a3b      	ldr	r3, [r7, #32]
 8002ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d103      	bne.n	8002ad6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002ace:	f004 fa33 	bl	8006f38 <HAL_RCC_GetPCLK1Freq>
 8002ad2:	6378      	str	r0, [r7, #52]	@ 0x34
 8002ad4:	e004      	b.n	8002ae0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002ad6:	f004 fa2f 	bl	8006f38 <HAL_RCC_GetPCLK1Freq>
 8002ada:	4603      	mov	r3, r0
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ae2:	4a23      	ldr	r2, [pc, #140]	@ (8002b70 <HAL_InitTick+0xe8>)
 8002ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae8:	0c9b      	lsrs	r3, r3, #18
 8002aea:	3b01      	subs	r3, #1
 8002aec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002aee:	4b21      	ldr	r3, [pc, #132]	@ (8002b74 <HAL_InitTick+0xec>)
 8002af0:	4a21      	ldr	r2, [pc, #132]	@ (8002b78 <HAL_InitTick+0xf0>)
 8002af2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002af4:	4b1f      	ldr	r3, [pc, #124]	@ (8002b74 <HAL_InitTick+0xec>)
 8002af6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002afa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002afc:	4a1d      	ldr	r2, [pc, #116]	@ (8002b74 <HAL_InitTick+0xec>)
 8002afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b00:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002b02:	4b1c      	ldr	r3, [pc, #112]	@ (8002b74 <HAL_InitTick+0xec>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b08:	4b1a      	ldr	r3, [pc, #104]	@ (8002b74 <HAL_InitTick+0xec>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b0e:	4b19      	ldr	r3, [pc, #100]	@ (8002b74 <HAL_InitTick+0xec>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002b14:	4817      	ldr	r0, [pc, #92]	@ (8002b74 <HAL_InitTick+0xec>)
 8002b16:	f005 fb77 	bl	8008208 <HAL_TIM_Base_Init>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002b20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d11b      	bne.n	8002b60 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002b28:	4812      	ldr	r0, [pc, #72]	@ (8002b74 <HAL_InitTick+0xec>)
 8002b2a:	f005 fbbd 	bl	80082a8 <HAL_TIM_Base_Start_IT>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002b34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d111      	bne.n	8002b60 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b3c:	2036      	movs	r0, #54	@ 0x36
 8002b3e:	f000 fb71 	bl	8003224 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b0f      	cmp	r3, #15
 8002b46:	d808      	bhi.n	8002b5a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002b48:	2200      	movs	r2, #0
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	2036      	movs	r0, #54	@ 0x36
 8002b4e:	f000 fb4d 	bl	80031ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b52:	4a0a      	ldr	r2, [pc, #40]	@ (8002b7c <HAL_InitTick+0xf4>)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6013      	str	r3, [r2, #0]
 8002b58:	e002      	b.n	8002b60 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002b60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3738      	adds	r7, #56	@ 0x38
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	431bde83 	.word	0x431bde83
 8002b74:	20025d68 	.word	0x20025d68
 8002b78:	40001000 	.word	0x40001000
 8002b7c:	20000008 	.word	0x20000008

08002b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b84:	bf00      	nop
 8002b86:	e7fd      	b.n	8002b84 <NMI_Handler+0x4>

08002b88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b8c:	bf00      	nop
 8002b8e:	e7fd      	b.n	8002b8c <HardFault_Handler+0x4>

08002b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b94:	bf00      	nop
 8002b96:	e7fd      	b.n	8002b94 <MemManage_Handler+0x4>

08002b98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b9c:	bf00      	nop
 8002b9e:	e7fd      	b.n	8002b9c <BusFault_Handler+0x4>

08002ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ba4:	bf00      	nop
 8002ba6:	e7fd      	b.n	8002ba4 <UsageFault_Handler+0x4>

08002ba8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bac:	bf00      	nop
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
	...

08002bb8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002bbc:	4802      	ldr	r0, [pc, #8]	@ (8002bc8 <TIM6_DAC_IRQHandler+0x10>)
 8002bbe:	f005 fbe3 	bl	8008388 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20025d68 	.word	0x20025d68

08002bcc <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_tx);
 8002bd0:	4802      	ldr	r0, [pc, #8]	@ (8002bdc <DMA2_Stream4_IRQHandler+0x10>)
 8002bd2:	f000 fc57 	bl	8003484 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20025d08 	.word	0x20025d08

08002be0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8002be4:	4802      	ldr	r0, [pc, #8]	@ (8002bf0 <OTG_HS_IRQHandler+0x10>)
 8002be6:	f001 fa68 	bl	80040ba <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20025f34 	.word	0x20025f34

08002bf4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002bf8:	4802      	ldr	r0, [pc, #8]	@ (8002c04 <LTDC_IRQHandler+0x10>)
 8002bfa:	f003 fa95 	bl	8006128 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20025bec 	.word	0x20025bec

08002c08 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002c0c:	4802      	ldr	r0, [pc, #8]	@ (8002c18 <DMA2D_IRQHandler+0x10>)
 8002c0e:	f000 feec 	bl	80039ea <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20000200 	.word	0x20000200

08002c1c <_getpid>:
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	2301      	movs	r3, #1
 8002c22:	4618      	mov	r0, r3
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <_kill>:
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
 8002c36:	f009 f893 	bl	800bd60 <__errno>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2216      	movs	r2, #22
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c44:	4618      	mov	r0, r3
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <_exit>:
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7ff ffe7 	bl	8002c2c <_kill>
 8002c5e:	bf00      	nop
 8002c60:	e7fd      	b.n	8002c5e <_exit+0x12>

08002c62 <_read>:
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b086      	sub	sp, #24
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	60f8      	str	r0, [r7, #12]
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	607a      	str	r2, [r7, #4]
 8002c6e:	2300      	movs	r3, #0
 8002c70:	617b      	str	r3, [r7, #20]
 8002c72:	e00a      	b.n	8002c8a <_read+0x28>
 8002c74:	f3af 8000 	nop.w
 8002c78:	4601      	mov	r1, r0
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	60ba      	str	r2, [r7, #8]
 8002c80:	b2ca      	uxtb	r2, r1
 8002c82:	701a      	strb	r2, [r3, #0]
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	3301      	adds	r3, #1
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	dbf0      	blt.n	8002c74 <_read+0x12>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4618      	mov	r0, r3
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <_close>:
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ca8:	4618      	mov	r0, r3
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <_fstat>:
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002cc4:	605a      	str	r2, [r3, #4]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	4618      	mov	r0, r3
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <_isatty>:
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	2301      	movs	r3, #1
 8002cde:	4618      	mov	r0, r3
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <_lseek>:
 8002cea:	b480      	push	{r7}
 8002cec:	b085      	sub	sp, #20
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	607a      	str	r2, [r7, #4]
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <_sbrk>:
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	4a14      	ldr	r2, [pc, #80]	@ (8002d60 <_sbrk+0x5c>)
 8002d0e:	4b15      	ldr	r3, [pc, #84]	@ (8002d64 <_sbrk+0x60>)
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	613b      	str	r3, [r7, #16]
 8002d18:	4b13      	ldr	r3, [pc, #76]	@ (8002d68 <_sbrk+0x64>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d102      	bne.n	8002d26 <_sbrk+0x22>
 8002d20:	4b11      	ldr	r3, [pc, #68]	@ (8002d68 <_sbrk+0x64>)
 8002d22:	4a12      	ldr	r2, [pc, #72]	@ (8002d6c <_sbrk+0x68>)
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	4b10      	ldr	r3, [pc, #64]	@ (8002d68 <_sbrk+0x64>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d207      	bcs.n	8002d44 <_sbrk+0x40>
 8002d34:	f009 f814 	bl	800bd60 <__errno>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	220c      	movs	r2, #12
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d42:	e009      	b.n	8002d58 <_sbrk+0x54>
 8002d44:	4b08      	ldr	r3, [pc, #32]	@ (8002d68 <_sbrk+0x64>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	4b07      	ldr	r3, [pc, #28]	@ (8002d68 <_sbrk+0x64>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4413      	add	r3, r2
 8002d52:	4a05      	ldr	r2, [pc, #20]	@ (8002d68 <_sbrk+0x64>)
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	20030000 	.word	0x20030000
 8002d64:	00000400 	.word	0x00000400
 8002d68:	20025db0 	.word	0x20025db0
 8002d6c:	20026460 	.word	0x20026460

08002d70 <SystemInit>:
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	4b06      	ldr	r3, [pc, #24]	@ (8002d90 <SystemInit+0x20>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d7a:	4a05      	ldr	r2, [pc, #20]	@ (8002d90 <SystemInit+0x20>)
 8002d7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8002d84:	bf00      	nop
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	e000ed00 	.word	0xe000ed00

08002d94 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d9a:	f107 0308 	add.w	r3, r7, #8
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	605a      	str	r2, [r3, #4]
 8002da4:	609a      	str	r2, [r3, #8]
 8002da6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002da8:	463b      	mov	r3, r7
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002db0:	4b1e      	ldr	r3, [pc, #120]	@ (8002e2c <MX_TIM1_Init+0x98>)
 8002db2:	4a1f      	ldr	r2, [pc, #124]	@ (8002e30 <MX_TIM1_Init+0x9c>)
 8002db4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002db6:	4b1d      	ldr	r3, [pc, #116]	@ (8002e2c <MX_TIM1_Init+0x98>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e2c <MX_TIM1_Init+0x98>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e2c <MX_TIM1_Init+0x98>)
 8002dc4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002dc8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dca:	4b18      	ldr	r3, [pc, #96]	@ (8002e2c <MX_TIM1_Init+0x98>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002dd0:	4b16      	ldr	r3, [pc, #88]	@ (8002e2c <MX_TIM1_Init+0x98>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dd6:	4b15      	ldr	r3, [pc, #84]	@ (8002e2c <MX_TIM1_Init+0x98>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002ddc:	4813      	ldr	r0, [pc, #76]	@ (8002e2c <MX_TIM1_Init+0x98>)
 8002dde:	f005 fa13 	bl	8008208 <HAL_TIM_Base_Init>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002de8:	f7ff fd4c 	bl	8002884 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002df0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002df2:	f107 0308 	add.w	r3, r7, #8
 8002df6:	4619      	mov	r1, r3
 8002df8:	480c      	ldr	r0, [pc, #48]	@ (8002e2c <MX_TIM1_Init+0x98>)
 8002dfa:	f005 fbb5 	bl	8008568 <HAL_TIM_ConfigClockSource>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002e04:	f7ff fd3e 	bl	8002884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e10:	463b      	mov	r3, r7
 8002e12:	4619      	mov	r1, r3
 8002e14:	4805      	ldr	r0, [pc, #20]	@ (8002e2c <MX_TIM1_Init+0x98>)
 8002e16:	f005 fddd 	bl	80089d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002e20:	f7ff fd30 	bl	8002884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002e24:	bf00      	nop
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	20025db4 	.word	0x20025db4
 8002e30:	40010000 	.word	0x40010000

08002e34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a0b      	ldr	r2, [pc, #44]	@ (8002e70 <HAL_TIM_Base_MspInit+0x3c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d10d      	bne.n	8002e62 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e74 <HAL_TIM_Base_MspInit+0x40>)
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e4e:	4a09      	ldr	r2, [pc, #36]	@ (8002e74 <HAL_TIM_Base_MspInit+0x40>)
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e56:	4b07      	ldr	r3, [pc, #28]	@ (8002e74 <HAL_TIM_Base_MspInit+0x40>)
 8002e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002e62:	bf00      	nop
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40010000 	.word	0x40010000
 8002e74:	40023800 	.word	0x40023800

08002e78 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e7c:	4b11      	ldr	r3, [pc, #68]	@ (8002ec4 <MX_USART1_UART_Init+0x4c>)
 8002e7e:	4a12      	ldr	r2, [pc, #72]	@ (8002ec8 <MX_USART1_UART_Init+0x50>)
 8002e80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e82:	4b10      	ldr	r3, [pc, #64]	@ (8002ec4 <MX_USART1_UART_Init+0x4c>)
 8002e84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ec4 <MX_USART1_UART_Init+0x4c>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e90:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec4 <MX_USART1_UART_Init+0x4c>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e96:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec4 <MX_USART1_UART_Init+0x4c>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e9c:	4b09      	ldr	r3, [pc, #36]	@ (8002ec4 <MX_USART1_UART_Init+0x4c>)
 8002e9e:	220c      	movs	r2, #12
 8002ea0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ea2:	4b08      	ldr	r3, [pc, #32]	@ (8002ec4 <MX_USART1_UART_Init+0x4c>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ea8:	4b06      	ldr	r3, [pc, #24]	@ (8002ec4 <MX_USART1_UART_Init+0x4c>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002eae:	4805      	ldr	r0, [pc, #20]	@ (8002ec4 <MX_USART1_UART_Init+0x4c>)
 8002eb0:	f005 fe20 	bl	8008af4 <HAL_UART_Init>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002eba:	f7ff fce3 	bl	8002884 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ebe:	bf00      	nop
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20025dfc 	.word	0x20025dfc
 8002ec8:	40011000 	.word	0x40011000

08002ecc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08a      	sub	sp, #40	@ 0x28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed4:	f107 0314 	add.w	r3, r7, #20
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a19      	ldr	r2, [pc, #100]	@ (8002f50 <HAL_UART_MspInit+0x84>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d12c      	bne.n	8002f48 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	4b18      	ldr	r3, [pc, #96]	@ (8002f54 <HAL_UART_MspInit+0x88>)
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef6:	4a17      	ldr	r2, [pc, #92]	@ (8002f54 <HAL_UART_MspInit+0x88>)
 8002ef8:	f043 0310 	orr.w	r3, r3, #16
 8002efc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002efe:	4b15      	ldr	r3, [pc, #84]	@ (8002f54 <HAL_UART_MspInit+0x88>)
 8002f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f02:	f003 0310 	and.w	r3, r3, #16
 8002f06:	613b      	str	r3, [r7, #16]
 8002f08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	4b11      	ldr	r3, [pc, #68]	@ (8002f54 <HAL_UART_MspInit+0x88>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f12:	4a10      	ldr	r2, [pc, #64]	@ (8002f54 <HAL_UART_MspInit+0x88>)
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f54 <HAL_UART_MspInit+0x88>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	60fb      	str	r3, [r7, #12]
 8002f24:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002f26:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f34:	2303      	movs	r3, #3
 8002f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f38:	2307      	movs	r3, #7
 8002f3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f3c:	f107 0314 	add.w	r3, r7, #20
 8002f40:	4619      	mov	r1, r3
 8002f42:	4805      	ldr	r0, [pc, #20]	@ (8002f58 <HAL_UART_MspInit+0x8c>)
 8002f44:	f000 fef4 	bl	8003d30 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002f48:	bf00      	nop
 8002f4a:	3728      	adds	r7, #40	@ 0x28
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40011000 	.word	0x40011000
 8002f54:	40023800 	.word	0x40023800
 8002f58:	40020000 	.word	0x40020000

08002f5c <Reset_Handler>:
 8002f5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f94 <LoopFillZerobss+0xe>
 8002f60:	f7ff ff06 	bl	8002d70 <SystemInit>
 8002f64:	480c      	ldr	r0, [pc, #48]	@ (8002f98 <LoopFillZerobss+0x12>)
 8002f66:	490d      	ldr	r1, [pc, #52]	@ (8002f9c <LoopFillZerobss+0x16>)
 8002f68:	4a0d      	ldr	r2, [pc, #52]	@ (8002fa0 <LoopFillZerobss+0x1a>)
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	e002      	b.n	8002f74 <LoopCopyDataInit>

08002f6e <CopyDataInit>:
 8002f6e:	58d4      	ldr	r4, [r2, r3]
 8002f70:	50c4      	str	r4, [r0, r3]
 8002f72:	3304      	adds	r3, #4

08002f74 <LoopCopyDataInit>:
 8002f74:	18c4      	adds	r4, r0, r3
 8002f76:	428c      	cmp	r4, r1
 8002f78:	d3f9      	bcc.n	8002f6e <CopyDataInit>
 8002f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8002fa4 <LoopFillZerobss+0x1e>)
 8002f7c:	4c0a      	ldr	r4, [pc, #40]	@ (8002fa8 <LoopFillZerobss+0x22>)
 8002f7e:	2300      	movs	r3, #0
 8002f80:	e001      	b.n	8002f86 <LoopFillZerobss>

08002f82 <FillZerobss>:
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	3204      	adds	r2, #4

08002f86 <LoopFillZerobss>:
 8002f86:	42a2      	cmp	r2, r4
 8002f88:	d3fb      	bcc.n	8002f82 <FillZerobss>
 8002f8a:	f008 feef 	bl	800bd6c <__libc_init_array>
 8002f8e:	f7ff fba7 	bl	80026e0 <main>
 8002f92:	4770      	bx	lr
 8002f94:	20030000 	.word	0x20030000
 8002f98:	20000000 	.word	0x20000000
 8002f9c:	200001dc 	.word	0x200001dc
 8002fa0:	0800dd5c 	.word	0x0800dd5c
 8002fa4:	200001dc 	.word	0x200001dc
 8002fa8:	20026460 	.word	0x20026460

08002fac <ADC_IRQHandler>:
 8002fac:	e7fe      	b.n	8002fac <ADC_IRQHandler>
	...

08002fb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8002ff0 <HAL_Init+0x40>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8002ff0 <HAL_Init+0x40>)
 8002fba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff0 <HAL_Init+0x40>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a0a      	ldr	r2, [pc, #40]	@ (8002ff0 <HAL_Init+0x40>)
 8002fc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fcc:	4b08      	ldr	r3, [pc, #32]	@ (8002ff0 <HAL_Init+0x40>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a07      	ldr	r2, [pc, #28]	@ (8002ff0 <HAL_Init+0x40>)
 8002fd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fd8:	2003      	movs	r0, #3
 8002fda:	f000 f8fc 	bl	80031d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fde:	200f      	movs	r0, #15
 8002fe0:	f7ff fd52 	bl	8002a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fe4:	f7ff fd24 	bl	8002a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40023c00 	.word	0x40023c00

08002ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ff8:	4b06      	ldr	r3, [pc, #24]	@ (8003014 <HAL_IncTick+0x20>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	4b06      	ldr	r3, [pc, #24]	@ (8003018 <HAL_IncTick+0x24>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4413      	add	r3, r2
 8003004:	4a04      	ldr	r2, [pc, #16]	@ (8003018 <HAL_IncTick+0x24>)
 8003006:	6013      	str	r3, [r2, #0]
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	2000000c 	.word	0x2000000c
 8003018:	20025e44 	.word	0x20025e44

0800301c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  return uwTick;
 8003020:	4b03      	ldr	r3, [pc, #12]	@ (8003030 <HAL_GetTick+0x14>)
 8003022:	681b      	ldr	r3, [r3, #0]
}
 8003024:	4618      	mov	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	20025e44 	.word	0x20025e44

08003034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800303c:	f7ff ffee 	bl	800301c <HAL_GetTick>
 8003040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800304c:	d005      	beq.n	800305a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800304e:	4b0a      	ldr	r3, [pc, #40]	@ (8003078 <HAL_Delay+0x44>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4413      	add	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800305a:	bf00      	nop
 800305c:	f7ff ffde 	bl	800301c <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	429a      	cmp	r2, r3
 800306a:	d8f7      	bhi.n	800305c <HAL_Delay+0x28>
  {
  }
}
 800306c:	bf00      	nop
 800306e:	bf00      	nop
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	2000000c 	.word	0x2000000c

0800307c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800308c:	4b0c      	ldr	r3, [pc, #48]	@ (80030c0 <__NVIC_SetPriorityGrouping+0x44>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003098:	4013      	ands	r3, r2
 800309a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ae:	4a04      	ldr	r2, [pc, #16]	@ (80030c0 <__NVIC_SetPriorityGrouping+0x44>)
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	60d3      	str	r3, [r2, #12]
}
 80030b4:	bf00      	nop
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	e000ed00 	.word	0xe000ed00

080030c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030c8:	4b04      	ldr	r3, [pc, #16]	@ (80030dc <__NVIC_GetPriorityGrouping+0x18>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	0a1b      	lsrs	r3, r3, #8
 80030ce:	f003 0307 	and.w	r3, r3, #7
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	e000ed00 	.word	0xe000ed00

080030e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	db0b      	blt.n	800310a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	f003 021f 	and.w	r2, r3, #31
 80030f8:	4907      	ldr	r1, [pc, #28]	@ (8003118 <__NVIC_EnableIRQ+0x38>)
 80030fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	2001      	movs	r0, #1
 8003102:	fa00 f202 	lsl.w	r2, r0, r2
 8003106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	e000e100 	.word	0xe000e100

0800311c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	6039      	str	r1, [r7, #0]
 8003126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312c:	2b00      	cmp	r3, #0
 800312e:	db0a      	blt.n	8003146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	b2da      	uxtb	r2, r3
 8003134:	490c      	ldr	r1, [pc, #48]	@ (8003168 <__NVIC_SetPriority+0x4c>)
 8003136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313a:	0112      	lsls	r2, r2, #4
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	440b      	add	r3, r1
 8003140:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003144:	e00a      	b.n	800315c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	b2da      	uxtb	r2, r3
 800314a:	4908      	ldr	r1, [pc, #32]	@ (800316c <__NVIC_SetPriority+0x50>)
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	3b04      	subs	r3, #4
 8003154:	0112      	lsls	r2, r2, #4
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	440b      	add	r3, r1
 800315a:	761a      	strb	r2, [r3, #24]
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	e000e100 	.word	0xe000e100
 800316c:	e000ed00 	.word	0xe000ed00

08003170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003170:	b480      	push	{r7}
 8003172:	b089      	sub	sp, #36	@ 0x24
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f1c3 0307 	rsb	r3, r3, #7
 800318a:	2b04      	cmp	r3, #4
 800318c:	bf28      	it	cs
 800318e:	2304      	movcs	r3, #4
 8003190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	3304      	adds	r3, #4
 8003196:	2b06      	cmp	r3, #6
 8003198:	d902      	bls.n	80031a0 <NVIC_EncodePriority+0x30>
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	3b03      	subs	r3, #3
 800319e:	e000      	b.n	80031a2 <NVIC_EncodePriority+0x32>
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43da      	mvns	r2, r3
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	401a      	ands	r2, r3
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	fa01 f303 	lsl.w	r3, r1, r3
 80031c2:	43d9      	mvns	r1, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c8:	4313      	orrs	r3, r2
         );
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3724      	adds	r7, #36	@ 0x24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7ff ff4c 	bl	800307c <__NVIC_SetPriorityGrouping>
}
 80031e4:	bf00      	nop
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
 80031f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031fe:	f7ff ff61 	bl	80030c4 <__NVIC_GetPriorityGrouping>
 8003202:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	68b9      	ldr	r1, [r7, #8]
 8003208:	6978      	ldr	r0, [r7, #20]
 800320a:	f7ff ffb1 	bl	8003170 <NVIC_EncodePriority>
 800320e:	4602      	mov	r2, r0
 8003210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003214:	4611      	mov	r1, r2
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff ff80 	bl	800311c <__NVIC_SetPriority>
}
 800321c:	bf00      	nop
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	4603      	mov	r3, r0
 800322c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800322e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff ff54 	bl	80030e0 <__NVIC_EnableIRQ>
}
 8003238:	bf00      	nop
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e00e      	b.n	8003270 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	795b      	ldrb	r3, [r3, #5]
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	d105      	bne.n	8003268 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7fd fe5a 	bl	8000f1c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003284:	f7ff feca 	bl	800301c <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e099      	b.n	80033c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0201 	bic.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032b4:	e00f      	b.n	80032d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032b6:	f7ff feb1 	bl	800301c <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b05      	cmp	r3, #5
 80032c2:	d908      	bls.n	80032d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2220      	movs	r2, #32
 80032c8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2203      	movs	r2, #3
 80032ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e078      	b.n	80033c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1e8      	bne.n	80032b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	4b38      	ldr	r3, [pc, #224]	@ (80033d0 <HAL_DMA_Init+0x158>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003302:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800330e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800331a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4313      	orrs	r3, r2
 8003326:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332c:	2b04      	cmp	r3, #4
 800332e:	d107      	bne.n	8003340 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003338:	4313      	orrs	r3, r2
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	4313      	orrs	r3, r2
 800333e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f023 0307 	bic.w	r3, r3, #7
 8003356:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	4313      	orrs	r3, r2
 8003360:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003366:	2b04      	cmp	r3, #4
 8003368:	d117      	bne.n	800339a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	4313      	orrs	r3, r2
 8003372:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00e      	beq.n	800339a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 fa6f 	bl	8003860 <DMA_CheckFifoParam>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d008      	beq.n	800339a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2240      	movs	r2, #64	@ 0x40
 800338c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003396:	2301      	movs	r3, #1
 8003398:	e016      	b.n	80033c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 fa26 	bl	80037f4 <DMA_CalcBaseAndBitshift>
 80033a8:	4603      	mov	r3, r0
 80033aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b0:	223f      	movs	r2, #63	@ 0x3f
 80033b2:	409a      	lsls	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	f010803f 	.word	0xf010803f

080033d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
 80033e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_DMA_Start_IT+0x26>
 80033f6:	2302      	movs	r3, #2
 80033f8:	e040      	b.n	800347c <HAL_DMA_Start_IT+0xa8>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b01      	cmp	r3, #1
 800340c:	d12f      	bne.n	800346e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2202      	movs	r2, #2
 8003412:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	68b9      	ldr	r1, [r7, #8]
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 f9b8 	bl	8003798 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800342c:	223f      	movs	r2, #63	@ 0x3f
 800342e:	409a      	lsls	r2, r3
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0216 	orr.w	r2, r2, #22
 8003442:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003448:	2b00      	cmp	r3, #0
 800344a:	d007      	beq.n	800345c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0208 	orr.w	r2, r2, #8
 800345a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0201 	orr.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	e005      	b.n	800347a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003476:	2302      	movs	r3, #2
 8003478:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800347a:	7dfb      	ldrb	r3, [r7, #23]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3718      	adds	r7, #24
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003490:	4b8e      	ldr	r3, [pc, #568]	@ (80036cc <HAL_DMA_IRQHandler+0x248>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a8e      	ldr	r2, [pc, #568]	@ (80036d0 <HAL_DMA_IRQHandler+0x24c>)
 8003496:	fba2 2303 	umull	r2, r3, r2, r3
 800349a:	0a9b      	lsrs	r3, r3, #10
 800349c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ae:	2208      	movs	r2, #8
 80034b0:	409a      	lsls	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	4013      	ands	r3, r2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d01a      	beq.n	80034f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d013      	beq.n	80034f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0204 	bic.w	r2, r2, #4
 80034d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034dc:	2208      	movs	r2, #8
 80034de:	409a      	lsls	r2, r3
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e8:	f043 0201 	orr.w	r2, r3, #1
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f4:	2201      	movs	r2, #1
 80034f6:	409a      	lsls	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4013      	ands	r3, r2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d012      	beq.n	8003526 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00b      	beq.n	8003526 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003512:	2201      	movs	r2, #1
 8003514:	409a      	lsls	r2, r3
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800351e:	f043 0202 	orr.w	r2, r3, #2
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800352a:	2204      	movs	r2, #4
 800352c:	409a      	lsls	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	4013      	ands	r3, r2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d012      	beq.n	800355c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00b      	beq.n	800355c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003548:	2204      	movs	r2, #4
 800354a:	409a      	lsls	r2, r3
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003554:	f043 0204 	orr.w	r2, r3, #4
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003560:	2210      	movs	r2, #16
 8003562:	409a      	lsls	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	4013      	ands	r3, r2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d043      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d03c      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800357e:	2210      	movs	r2, #16
 8003580:	409a      	lsls	r2, r3
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d018      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d108      	bne.n	80035b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d024      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	4798      	blx	r3
 80035b2:	e01f      	b.n	80035f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d01b      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	4798      	blx	r3
 80035c4:	e016      	b.n	80035f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d107      	bne.n	80035e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0208 	bic.w	r2, r2, #8
 80035e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f8:	2220      	movs	r2, #32
 80035fa:	409a      	lsls	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4013      	ands	r3, r2
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 808f 	beq.w	8003724 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0310 	and.w	r3, r3, #16
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 8087 	beq.w	8003724 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800361a:	2220      	movs	r2, #32
 800361c:	409a      	lsls	r2, r3
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b05      	cmp	r3, #5
 800362c:	d136      	bne.n	800369c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0216 	bic.w	r2, r2, #22
 800363c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	695a      	ldr	r2, [r3, #20]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800364c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003652:	2b00      	cmp	r3, #0
 8003654:	d103      	bne.n	800365e <HAL_DMA_IRQHandler+0x1da>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800365a:	2b00      	cmp	r3, #0
 800365c:	d007      	beq.n	800366e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0208 	bic.w	r2, r2, #8
 800366c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003672:	223f      	movs	r2, #63	@ 0x3f
 8003674:	409a      	lsls	r2, r3
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800368e:	2b00      	cmp	r3, #0
 8003690:	d07e      	beq.n	8003790 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	4798      	blx	r3
        }
        return;
 800369a:	e079      	b.n	8003790 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d01d      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10d      	bne.n	80036d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d031      	beq.n	8003724 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	4798      	blx	r3
 80036c8:	e02c      	b.n	8003724 <HAL_DMA_IRQHandler+0x2a0>
 80036ca:	bf00      	nop
 80036cc:	20000004 	.word	0x20000004
 80036d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d023      	beq.n	8003724 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	4798      	blx	r3
 80036e4:	e01e      	b.n	8003724 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10f      	bne.n	8003714 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0210 	bic.w	r2, r2, #16
 8003702:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003728:	2b00      	cmp	r3, #0
 800372a:	d032      	beq.n	8003792 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	d022      	beq.n	800377e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2205      	movs	r2, #5
 800373c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0201 	bic.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	3301      	adds	r3, #1
 8003754:	60bb      	str	r3, [r7, #8]
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	429a      	cmp	r2, r3
 800375a:	d307      	bcc.n	800376c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f2      	bne.n	8003750 <HAL_DMA_IRQHandler+0x2cc>
 800376a:	e000      	b.n	800376e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800376c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003782:	2b00      	cmp	r3, #0
 8003784:	d005      	beq.n	8003792 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	4798      	blx	r3
 800378e:	e000      	b.n	8003792 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003790:	bf00      	nop
    }
  }
}
 8003792:	3718      	adds	r7, #24
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80037b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	2b40      	cmp	r3, #64	@ 0x40
 80037c4:	d108      	bne.n	80037d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80037d6:	e007      	b.n	80037e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	60da      	str	r2, [r3, #12]
}
 80037e8:	bf00      	nop
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	b2db      	uxtb	r3, r3
 8003802:	3b10      	subs	r3, #16
 8003804:	4a14      	ldr	r2, [pc, #80]	@ (8003858 <DMA_CalcBaseAndBitshift+0x64>)
 8003806:	fba2 2303 	umull	r2, r3, r2, r3
 800380a:	091b      	lsrs	r3, r3, #4
 800380c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800380e:	4a13      	ldr	r2, [pc, #76]	@ (800385c <DMA_CalcBaseAndBitshift+0x68>)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4413      	add	r3, r2
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	461a      	mov	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2b03      	cmp	r3, #3
 8003820:	d909      	bls.n	8003836 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800382a:	f023 0303 	bic.w	r3, r3, #3
 800382e:	1d1a      	adds	r2, r3, #4
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	659a      	str	r2, [r3, #88]	@ 0x58
 8003834:	e007      	b.n	8003846 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800383e:	f023 0303 	bic.w	r3, r3, #3
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800384a:	4618      	mov	r0, r3
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	aaaaaaab 	.word	0xaaaaaaab
 800385c:	0800d9d0 	.word	0x0800d9d0

08003860 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003868:	2300      	movs	r3, #0
 800386a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003870:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d11f      	bne.n	80038ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	2b03      	cmp	r3, #3
 800387e:	d856      	bhi.n	800392e <DMA_CheckFifoParam+0xce>
 8003880:	a201      	add	r2, pc, #4	@ (adr r2, 8003888 <DMA_CheckFifoParam+0x28>)
 8003882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003886:	bf00      	nop
 8003888:	08003899 	.word	0x08003899
 800388c:	080038ab 	.word	0x080038ab
 8003890:	08003899 	.word	0x08003899
 8003894:	0800392f 	.word	0x0800392f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d046      	beq.n	8003932 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038a8:	e043      	b.n	8003932 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80038b2:	d140      	bne.n	8003936 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038b8:	e03d      	b.n	8003936 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038c2:	d121      	bne.n	8003908 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2b03      	cmp	r3, #3
 80038c8:	d837      	bhi.n	800393a <DMA_CheckFifoParam+0xda>
 80038ca:	a201      	add	r2, pc, #4	@ (adr r2, 80038d0 <DMA_CheckFifoParam+0x70>)
 80038cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d0:	080038e1 	.word	0x080038e1
 80038d4:	080038e7 	.word	0x080038e7
 80038d8:	080038e1 	.word	0x080038e1
 80038dc:	080038f9 	.word	0x080038f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	73fb      	strb	r3, [r7, #15]
      break;
 80038e4:	e030      	b.n	8003948 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d025      	beq.n	800393e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038f6:	e022      	b.n	800393e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003900:	d11f      	bne.n	8003942 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003906:	e01c      	b.n	8003942 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2b02      	cmp	r3, #2
 800390c:	d903      	bls.n	8003916 <DMA_CheckFifoParam+0xb6>
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	2b03      	cmp	r3, #3
 8003912:	d003      	beq.n	800391c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003914:	e018      	b.n	8003948 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	73fb      	strb	r3, [r7, #15]
      break;
 800391a:	e015      	b.n	8003948 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003920:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00e      	beq.n	8003946 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	73fb      	strb	r3, [r7, #15]
      break;
 800392c:	e00b      	b.n	8003946 <DMA_CheckFifoParam+0xe6>
      break;
 800392e:	bf00      	nop
 8003930:	e00a      	b.n	8003948 <DMA_CheckFifoParam+0xe8>
      break;
 8003932:	bf00      	nop
 8003934:	e008      	b.n	8003948 <DMA_CheckFifoParam+0xe8>
      break;
 8003936:	bf00      	nop
 8003938:	e006      	b.n	8003948 <DMA_CheckFifoParam+0xe8>
      break;
 800393a:	bf00      	nop
 800393c:	e004      	b.n	8003948 <DMA_CheckFifoParam+0xe8>
      break;
 800393e:	bf00      	nop
 8003940:	e002      	b.n	8003948 <DMA_CheckFifoParam+0xe8>
      break;   
 8003942:	bf00      	nop
 8003944:	e000      	b.n	8003948 <DMA_CheckFifoParam+0xe8>
      break;
 8003946:	bf00      	nop
    }
  } 
  
  return status; 
 8003948:	7bfb      	ldrb	r3, [r7, #15]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop

08003958 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e03b      	b.n	80039e2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d106      	bne.n	8003984 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7fd fb40 	bl	8001004 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039a8:	f023 0107 	bic.w	r1, r3, #7
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039be:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80039c2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	68d1      	ldr	r1, [r2, #12]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6812      	ldr	r2, [r2, #0]
 80039ce:	430b      	orrs	r3, r1
 80039d0:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b084      	sub	sp, #16
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d026      	beq.n	8003a5a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d021      	beq.n	8003a5a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a24:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a2a:	f043 0201 	orr.w	r2, r3, #1
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2201      	movs	r2, #1
 8003a38:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2204      	movs	r2, #4
 8003a3e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f003 0320 	and.w	r3, r3, #32
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d026      	beq.n	8003ab2 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d021      	beq.n	8003ab2 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a7c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2220      	movs	r2, #32
 8003a84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a8a:	f043 0202 	orr.w	r2, r3, #2
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2204      	movs	r2, #4
 8003a96:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f003 0308 	and.w	r3, r3, #8
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d026      	beq.n	8003b0a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d021      	beq.n	8003b0a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ad4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2208      	movs	r2, #8
 8003adc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae2:	f043 0204 	orr.w	r2, r3, #4
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2204      	movs	r2, #4
 8003aee:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d013      	beq.n	8003b3c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00e      	beq.n	8003b3c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b2c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2204      	movs	r2, #4
 8003b34:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f853 	bl	8003be2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d024      	beq.n	8003b90 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d01f      	beq.n	8003b90 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003b5e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2202      	movs	r2, #2
 8003b66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f003 0310 	and.w	r3, r3, #16
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d01f      	beq.n	8003bda <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d01a      	beq.n	8003bda <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003bb2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2210      	movs	r2, #16
 8003bba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f80e 	bl	8003bf6 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003bda:	bf00      	nop
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
	...

08003c0c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b087      	sub	sp, #28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_DMA2D_ConfigLayer+0x20>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e079      	b.n	8003d20 <HAL_DMA2D_ConfigLayer+0x114>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	3318      	adds	r3, #24
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	4413      	add	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	041b      	lsls	r3, r3, #16
 8003c52:	4313      	orrs	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003c56:	4b35      	ldr	r3, [pc, #212]	@ (8003d2c <HAL_DMA2D_ConfigLayer+0x120>)
 8003c58:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b0a      	cmp	r3, #10
 8003c60:	d003      	beq.n	8003c6a <HAL_DMA2D_ConfigLayer+0x5e>
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b09      	cmp	r3, #9
 8003c68:	d107      	bne.n	8003c7a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	e005      	b.n	8003c86 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	061b      	lsls	r3, r3, #24
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d120      	bne.n	8003cce <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	43db      	mvns	r3, r3
 8003c96:	ea02 0103 	and.w	r1, r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2b0a      	cmp	r3, #10
 8003cb4:	d003      	beq.n	8003cbe <HAL_DMA2D_ConfigLayer+0xb2>
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b09      	cmp	r3, #9
 8003cbc:	d127      	bne.n	8003d0e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003cca:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ccc:	e01f      	b.n	8003d0e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69da      	ldr	r2, [r3, #28]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	43db      	mvns	r3, r3
 8003cd8:	ea02 0103 	and.w	r1, r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	6812      	ldr	r2, [r2, #0]
 8003cee:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b0a      	cmp	r3, #10
 8003cf6:	d003      	beq.n	8003d00 <HAL_DMA2D_ConfigLayer+0xf4>
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	2b09      	cmp	r3, #9
 8003cfe:	d106      	bne.n	8003d0e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003d0c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	371c      	adds	r7, #28
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	ff03000f 	.word	0xff03000f

08003d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b089      	sub	sp, #36	@ 0x24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d42:	2300      	movs	r3, #0
 8003d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d46:	2300      	movs	r3, #0
 8003d48:	61fb      	str	r3, [r7, #28]
 8003d4a:	e177      	b.n	800403c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	f040 8166 	bne.w	8004036 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f003 0303 	and.w	r3, r3, #3
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d005      	beq.n	8003d82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d130      	bne.n	8003de4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	2203      	movs	r2, #3
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	43db      	mvns	r3, r3
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	4013      	ands	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	fa02 f303 	lsl.w	r3, r2, r3
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003db8:	2201      	movs	r2, #1
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	091b      	lsrs	r3, r3, #4
 8003dce:	f003 0201 	and.w	r2, r3, #1
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f003 0303 	and.w	r3, r3, #3
 8003dec:	2b03      	cmp	r3, #3
 8003dee:	d017      	beq.n	8003e20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	2203      	movs	r2, #3
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	43db      	mvns	r3, r3
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	4013      	ands	r3, r2
 8003e06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f003 0303 	and.w	r3, r3, #3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d123      	bne.n	8003e74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	08da      	lsrs	r2, r3, #3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3208      	adds	r2, #8
 8003e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	f003 0307 	and.w	r3, r3, #7
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	220f      	movs	r2, #15
 8003e44:	fa02 f303 	lsl.w	r3, r2, r3
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	691a      	ldr	r2, [r3, #16]
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	08da      	lsrs	r2, r3, #3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	3208      	adds	r2, #8
 8003e6e:	69b9      	ldr	r1, [r7, #24]
 8003e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	2203      	movs	r2, #3
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	43db      	mvns	r3, r3
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f003 0203 	and.w	r2, r3, #3
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 80c0 	beq.w	8004036 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60fb      	str	r3, [r7, #12]
 8003eba:	4b66      	ldr	r3, [pc, #408]	@ (8004054 <HAL_GPIO_Init+0x324>)
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ebe:	4a65      	ldr	r2, [pc, #404]	@ (8004054 <HAL_GPIO_Init+0x324>)
 8003ec0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ec4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ec6:	4b63      	ldr	r3, [pc, #396]	@ (8004054 <HAL_GPIO_Init+0x324>)
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ed2:	4a61      	ldr	r2, [pc, #388]	@ (8004058 <HAL_GPIO_Init+0x328>)
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	089b      	lsrs	r3, r3, #2
 8003ed8:	3302      	adds	r3, #2
 8003eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	220f      	movs	r2, #15
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a58      	ldr	r2, [pc, #352]	@ (800405c <HAL_GPIO_Init+0x32c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d037      	beq.n	8003f6e <HAL_GPIO_Init+0x23e>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a57      	ldr	r2, [pc, #348]	@ (8004060 <HAL_GPIO_Init+0x330>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d031      	beq.n	8003f6a <HAL_GPIO_Init+0x23a>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a56      	ldr	r2, [pc, #344]	@ (8004064 <HAL_GPIO_Init+0x334>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d02b      	beq.n	8003f66 <HAL_GPIO_Init+0x236>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a55      	ldr	r2, [pc, #340]	@ (8004068 <HAL_GPIO_Init+0x338>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d025      	beq.n	8003f62 <HAL_GPIO_Init+0x232>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a54      	ldr	r2, [pc, #336]	@ (800406c <HAL_GPIO_Init+0x33c>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d01f      	beq.n	8003f5e <HAL_GPIO_Init+0x22e>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a53      	ldr	r2, [pc, #332]	@ (8004070 <HAL_GPIO_Init+0x340>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d019      	beq.n	8003f5a <HAL_GPIO_Init+0x22a>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a52      	ldr	r2, [pc, #328]	@ (8004074 <HAL_GPIO_Init+0x344>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d013      	beq.n	8003f56 <HAL_GPIO_Init+0x226>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a51      	ldr	r2, [pc, #324]	@ (8004078 <HAL_GPIO_Init+0x348>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d00d      	beq.n	8003f52 <HAL_GPIO_Init+0x222>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a50      	ldr	r2, [pc, #320]	@ (800407c <HAL_GPIO_Init+0x34c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d007      	beq.n	8003f4e <HAL_GPIO_Init+0x21e>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a4f      	ldr	r2, [pc, #316]	@ (8004080 <HAL_GPIO_Init+0x350>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d101      	bne.n	8003f4a <HAL_GPIO_Init+0x21a>
 8003f46:	2309      	movs	r3, #9
 8003f48:	e012      	b.n	8003f70 <HAL_GPIO_Init+0x240>
 8003f4a:	230a      	movs	r3, #10
 8003f4c:	e010      	b.n	8003f70 <HAL_GPIO_Init+0x240>
 8003f4e:	2308      	movs	r3, #8
 8003f50:	e00e      	b.n	8003f70 <HAL_GPIO_Init+0x240>
 8003f52:	2307      	movs	r3, #7
 8003f54:	e00c      	b.n	8003f70 <HAL_GPIO_Init+0x240>
 8003f56:	2306      	movs	r3, #6
 8003f58:	e00a      	b.n	8003f70 <HAL_GPIO_Init+0x240>
 8003f5a:	2305      	movs	r3, #5
 8003f5c:	e008      	b.n	8003f70 <HAL_GPIO_Init+0x240>
 8003f5e:	2304      	movs	r3, #4
 8003f60:	e006      	b.n	8003f70 <HAL_GPIO_Init+0x240>
 8003f62:	2303      	movs	r3, #3
 8003f64:	e004      	b.n	8003f70 <HAL_GPIO_Init+0x240>
 8003f66:	2302      	movs	r3, #2
 8003f68:	e002      	b.n	8003f70 <HAL_GPIO_Init+0x240>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e000      	b.n	8003f70 <HAL_GPIO_Init+0x240>
 8003f6e:	2300      	movs	r3, #0
 8003f70:	69fa      	ldr	r2, [r7, #28]
 8003f72:	f002 0203 	and.w	r2, r2, #3
 8003f76:	0092      	lsls	r2, r2, #2
 8003f78:	4093      	lsls	r3, r2
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f80:	4935      	ldr	r1, [pc, #212]	@ (8004058 <HAL_GPIO_Init+0x328>)
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	089b      	lsrs	r3, r3, #2
 8003f86:	3302      	adds	r3, #2
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f8e:	4b3d      	ldr	r3, [pc, #244]	@ (8004084 <HAL_GPIO_Init+0x354>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	43db      	mvns	r3, r3
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fb2:	4a34      	ldr	r2, [pc, #208]	@ (8004084 <HAL_GPIO_Init+0x354>)
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fb8:	4b32      	ldr	r3, [pc, #200]	@ (8004084 <HAL_GPIO_Init+0x354>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fdc:	4a29      	ldr	r2, [pc, #164]	@ (8004084 <HAL_GPIO_Init+0x354>)
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003fe2:	4b28      	ldr	r3, [pc, #160]	@ (8004084 <HAL_GPIO_Init+0x354>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	43db      	mvns	r3, r3
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	4313      	orrs	r3, r2
 8004004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004006:	4a1f      	ldr	r2, [pc, #124]	@ (8004084 <HAL_GPIO_Init+0x354>)
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800400c:	4b1d      	ldr	r3, [pc, #116]	@ (8004084 <HAL_GPIO_Init+0x354>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	43db      	mvns	r3, r3
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	4013      	ands	r3, r2
 800401a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d003      	beq.n	8004030 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	4313      	orrs	r3, r2
 800402e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004030:	4a14      	ldr	r2, [pc, #80]	@ (8004084 <HAL_GPIO_Init+0x354>)
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	3301      	adds	r3, #1
 800403a:	61fb      	str	r3, [r7, #28]
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	2b0f      	cmp	r3, #15
 8004040:	f67f ae84 	bls.w	8003d4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004044:	bf00      	nop
 8004046:	bf00      	nop
 8004048:	3724      	adds	r7, #36	@ 0x24
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	40023800 	.word	0x40023800
 8004058:	40013800 	.word	0x40013800
 800405c:	40020000 	.word	0x40020000
 8004060:	40020400 	.word	0x40020400
 8004064:	40020800 	.word	0x40020800
 8004068:	40020c00 	.word	0x40020c00
 800406c:	40021000 	.word	0x40021000
 8004070:	40021400 	.word	0x40021400
 8004074:	40021800 	.word	0x40021800
 8004078:	40021c00 	.word	0x40021c00
 800407c:	40022000 	.word	0x40022000
 8004080:	40022400 	.word	0x40022400
 8004084:	40013c00 	.word	0x40013c00

08004088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	460b      	mov	r3, r1
 8004092:	807b      	strh	r3, [r7, #2]
 8004094:	4613      	mov	r3, r2
 8004096:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004098:	787b      	ldrb	r3, [r7, #1]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800409e:	887a      	ldrh	r2, [r7, #2]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040a4:	e003      	b.n	80040ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040a6:	887b      	ldrh	r3, [r7, #2]
 80040a8:	041a      	lsls	r2, r3, #16
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	619a      	str	r2, [r3, #24]
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b086      	sub	sp, #24
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f005 faef 	bl	80096b4 <USB_GetMode>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b01      	cmp	r3, #1
 80040da:	f040 80fb 	bne.w	80042d4 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f005 fab2 	bl	800964c <USB_ReadInterrupts>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f000 80f1 	beq.w	80042d2 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f005 faa9 	bl	800964c <USB_ReadInterrupts>
 80040fa:	4603      	mov	r3, r0
 80040fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004100:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004104:	d104      	bne.n	8004110 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800410e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4618      	mov	r0, r3
 8004116:	f005 fa99 	bl	800964c <USB_ReadInterrupts>
 800411a:	4603      	mov	r3, r0
 800411c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004120:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004124:	d104      	bne.n	8004130 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800412e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4618      	mov	r0, r3
 8004136:	f005 fa89 	bl	800964c <USB_ReadInterrupts>
 800413a:	4603      	mov	r3, r0
 800413c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004140:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004144:	d104      	bne.n	8004150 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800414e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4618      	mov	r0, r3
 8004156:	f005 fa79 	bl	800964c <USB_ReadInterrupts>
 800415a:	4603      	mov	r3, r0
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b02      	cmp	r3, #2
 8004162:	d103      	bne.n	800416c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2202      	movs	r2, #2
 800416a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4618      	mov	r0, r3
 8004172:	f005 fa6b 	bl	800964c <USB_ReadInterrupts>
 8004176:	4603      	mov	r3, r0
 8004178:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800417c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004180:	d120      	bne.n	80041c4 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800418a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b00      	cmp	r3, #0
 800419a:	d113      	bne.n	80041c4 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800419c:	2110      	movs	r1, #16
 800419e:	6938      	ldr	r0, [r7, #16]
 80041a0:	f005 f99c 	bl	80094dc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80041a4:	6938      	ldr	r0, [r7, #16]
 80041a6:	f005 f9cb 	bl	8009540 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	7a5b      	ldrb	r3, [r3, #9]
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d105      	bne.n	80041be <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2101      	movs	r1, #1
 80041b8:	4618      	mov	r0, r3
 80041ba:	f005 fa89 	bl	80096d0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f006 fdd2 	bl	800ad68 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f005 fa3f 	bl	800964c <USB_ReadInterrupts>
 80041ce:	4603      	mov	r3, r0
 80041d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041d8:	d102      	bne.n	80041e0 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f001 fca1 	bl	8005b22 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f005 fa31 	bl	800964c <USB_ReadInterrupts>
 80041ea:	4603      	mov	r3, r0
 80041ec:	f003 0308 	and.w	r3, r3, #8
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	d106      	bne.n	8004202 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f006 fd9b 	bl	800ad30 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2208      	movs	r2, #8
 8004200:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f005 fa20 	bl	800964c <USB_ReadInterrupts>
 800420c:	4603      	mov	r3, r0
 800420e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004212:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004216:	d139      	bne.n	800428c <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4618      	mov	r0, r3
 800421e:	f005 fa94 	bl	800974a <USB_HC_ReadInterrupt>
 8004222:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004224:	2300      	movs	r3, #0
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	e025      	b.n	8004276 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f003 030f 	and.w	r3, r3, #15
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	fa22 f303 	lsr.w	r3, r2, r3
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d018      	beq.n	8004270 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	4413      	add	r3, r2
 8004246:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004250:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004254:	d106      	bne.n	8004264 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	b2db      	uxtb	r3, r3
 800425a:	4619      	mov	r1, r3
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f859 	bl	8004314 <HCD_HC_IN_IRQHandler>
 8004262:	e005      	b.n	8004270 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	b2db      	uxtb	r3, r3
 8004268:	4619      	mov	r1, r3
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 febb 	bl	8004fe6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	3301      	adds	r3, #1
 8004274:	617b      	str	r3, [r7, #20]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	795b      	ldrb	r3, [r3, #5]
 800427a:	461a      	mov	r2, r3
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	4293      	cmp	r3, r2
 8004280:	d3d3      	bcc.n	800422a <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800428a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4618      	mov	r0, r3
 8004292:	f005 f9db 	bl	800964c <USB_ReadInterrupts>
 8004296:	4603      	mov	r3, r0
 8004298:	f003 0310 	and.w	r3, r3, #16
 800429c:	2b10      	cmp	r3, #16
 800429e:	d101      	bne.n	80042a4 <HAL_HCD_IRQHandler+0x1ea>
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <HAL_HCD_IRQHandler+0x1ec>
 80042a4:	2300      	movs	r3, #0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d014      	beq.n	80042d4 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	699a      	ldr	r2, [r3, #24]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 0210 	bic.w	r2, r2, #16
 80042b8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f001 fb52 	bl	8005964 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	699a      	ldr	r2, [r3, #24]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 0210 	orr.w	r2, r2, #16
 80042ce:	619a      	str	r2, [r3, #24]
 80042d0:	e000      	b.n	80042d4 <HAL_HCD_IRQHandler+0x21a>
      return;
 80042d2:	bf00      	nop
    }
  }
}
 80042d4:	3718      	adds	r7, #24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b082      	sub	sp, #8
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d101      	bne.n	80042f0 <HAL_HCD_Stop+0x16>
 80042ec:	2302      	movs	r3, #2
 80042ee:	e00d      	b.n	800430c <HAL_HCD_Stop+0x32>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f005 fb55 	bl	80099ac <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	460b      	mov	r3, r1
 800431e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	78fa      	ldrb	r2, [r7, #3]
 8004330:	4611      	mov	r1, r2
 8004332:	4618      	mov	r0, r3
 8004334:	f005 f99d 	bl	8009672 <USB_ReadChInterrupts>
 8004338:	4603      	mov	r3, r0
 800433a:	f003 0304 	and.w	r3, r3, #4
 800433e:	2b04      	cmp	r3, #4
 8004340:	d11a      	bne.n	8004378 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004342:	78fb      	ldrb	r3, [r7, #3]
 8004344:	015a      	lsls	r2, r3, #5
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	4413      	add	r3, r2
 800434a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800434e:	461a      	mov	r2, r3
 8004350:	2304      	movs	r3, #4
 8004352:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004354:	78fa      	ldrb	r2, [r7, #3]
 8004356:	6879      	ldr	r1, [r7, #4]
 8004358:	4613      	mov	r3, r2
 800435a:	011b      	lsls	r3, r3, #4
 800435c:	1a9b      	subs	r3, r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	440b      	add	r3, r1
 8004362:	334d      	adds	r3, #77	@ 0x4d
 8004364:	2207      	movs	r2, #7
 8004366:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	78fa      	ldrb	r2, [r7, #3]
 800436e:	4611      	mov	r1, r2
 8004370:	4618      	mov	r0, r3
 8004372:	f005 f9fb 	bl	800976c <USB_HC_Halt>
 8004376:	e09e      	b.n	80044b6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	78fa      	ldrb	r2, [r7, #3]
 800437e:	4611      	mov	r1, r2
 8004380:	4618      	mov	r0, r3
 8004382:	f005 f976 	bl	8009672 <USB_ReadChInterrupts>
 8004386:	4603      	mov	r3, r0
 8004388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800438c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004390:	d11b      	bne.n	80043ca <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004392:	78fb      	ldrb	r3, [r7, #3]
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	4413      	add	r3, r2
 800439a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800439e:	461a      	mov	r2, r3
 80043a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80043a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80043a6:	78fa      	ldrb	r2, [r7, #3]
 80043a8:	6879      	ldr	r1, [r7, #4]
 80043aa:	4613      	mov	r3, r2
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	1a9b      	subs	r3, r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	440b      	add	r3, r1
 80043b4:	334d      	adds	r3, #77	@ 0x4d
 80043b6:	2208      	movs	r2, #8
 80043b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	78fa      	ldrb	r2, [r7, #3]
 80043c0:	4611      	mov	r1, r2
 80043c2:	4618      	mov	r0, r3
 80043c4:	f005 f9d2 	bl	800976c <USB_HC_Halt>
 80043c8:	e075      	b.n	80044b6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	78fa      	ldrb	r2, [r7, #3]
 80043d0:	4611      	mov	r1, r2
 80043d2:	4618      	mov	r0, r3
 80043d4:	f005 f94d 	bl	8009672 <USB_ReadChInterrupts>
 80043d8:	4603      	mov	r3, r0
 80043da:	f003 0308 	and.w	r3, r3, #8
 80043de:	2b08      	cmp	r3, #8
 80043e0:	d11a      	bne.n	8004418 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80043e2:	78fb      	ldrb	r3, [r7, #3]
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043ee:	461a      	mov	r2, r3
 80043f0:	2308      	movs	r3, #8
 80043f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80043f4:	78fa      	ldrb	r2, [r7, #3]
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	4613      	mov	r3, r2
 80043fa:	011b      	lsls	r3, r3, #4
 80043fc:	1a9b      	subs	r3, r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	440b      	add	r3, r1
 8004402:	334d      	adds	r3, #77	@ 0x4d
 8004404:	2206      	movs	r2, #6
 8004406:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	78fa      	ldrb	r2, [r7, #3]
 800440e:	4611      	mov	r1, r2
 8004410:	4618      	mov	r0, r3
 8004412:	f005 f9ab 	bl	800976c <USB_HC_Halt>
 8004416:	e04e      	b.n	80044b6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	78fa      	ldrb	r2, [r7, #3]
 800441e:	4611      	mov	r1, r2
 8004420:	4618      	mov	r0, r3
 8004422:	f005 f926 	bl	8009672 <USB_ReadChInterrupts>
 8004426:	4603      	mov	r3, r0
 8004428:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800442c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004430:	d11b      	bne.n	800446a <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004432:	78fb      	ldrb	r3, [r7, #3]
 8004434:	015a      	lsls	r2, r3, #5
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	4413      	add	r3, r2
 800443a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800443e:	461a      	mov	r2, r3
 8004440:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004444:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004446:	78fa      	ldrb	r2, [r7, #3]
 8004448:	6879      	ldr	r1, [r7, #4]
 800444a:	4613      	mov	r3, r2
 800444c:	011b      	lsls	r3, r3, #4
 800444e:	1a9b      	subs	r3, r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	440b      	add	r3, r1
 8004454:	334d      	adds	r3, #77	@ 0x4d
 8004456:	2209      	movs	r2, #9
 8004458:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	78fa      	ldrb	r2, [r7, #3]
 8004460:	4611      	mov	r1, r2
 8004462:	4618      	mov	r0, r3
 8004464:	f005 f982 	bl	800976c <USB_HC_Halt>
 8004468:	e025      	b.n	80044b6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	78fa      	ldrb	r2, [r7, #3]
 8004470:	4611      	mov	r1, r2
 8004472:	4618      	mov	r0, r3
 8004474:	f005 f8fd 	bl	8009672 <USB_ReadChInterrupts>
 8004478:	4603      	mov	r3, r0
 800447a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800447e:	2b80      	cmp	r3, #128	@ 0x80
 8004480:	d119      	bne.n	80044b6 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004482:	78fb      	ldrb	r3, [r7, #3]
 8004484:	015a      	lsls	r2, r3, #5
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	4413      	add	r3, r2
 800448a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800448e:	461a      	mov	r2, r3
 8004490:	2380      	movs	r3, #128	@ 0x80
 8004492:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004494:	78fa      	ldrb	r2, [r7, #3]
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	4613      	mov	r3, r2
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	1a9b      	subs	r3, r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	334d      	adds	r3, #77	@ 0x4d
 80044a4:	2207      	movs	r2, #7
 80044a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	78fa      	ldrb	r2, [r7, #3]
 80044ae:	4611      	mov	r1, r2
 80044b0:	4618      	mov	r0, r3
 80044b2:	f005 f95b 	bl	800976c <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	78fa      	ldrb	r2, [r7, #3]
 80044bc:	4611      	mov	r1, r2
 80044be:	4618      	mov	r0, r3
 80044c0:	f005 f8d7 	bl	8009672 <USB_ReadChInterrupts>
 80044c4:	4603      	mov	r3, r0
 80044c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044ce:	d112      	bne.n	80044f6 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	78fa      	ldrb	r2, [r7, #3]
 80044d6:	4611      	mov	r1, r2
 80044d8:	4618      	mov	r0, r3
 80044da:	f005 f947 	bl	800976c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80044de:	78fb      	ldrb	r3, [r7, #3]
 80044e0:	015a      	lsls	r2, r3, #5
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	4413      	add	r3, r2
 80044e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044ea:	461a      	mov	r2, r3
 80044ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80044f0:	6093      	str	r3, [r2, #8]
 80044f2:	f000 bd75 	b.w	8004fe0 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	78fa      	ldrb	r2, [r7, #3]
 80044fc:	4611      	mov	r1, r2
 80044fe:	4618      	mov	r0, r3
 8004500:	f005 f8b7 	bl	8009672 <USB_ReadChInterrupts>
 8004504:	4603      	mov	r3, r0
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b01      	cmp	r3, #1
 800450c:	f040 8128 	bne.w	8004760 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004510:	78fb      	ldrb	r3, [r7, #3]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	4413      	add	r3, r2
 8004518:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800451c:	461a      	mov	r2, r3
 800451e:	2320      	movs	r3, #32
 8004520:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004522:	78fa      	ldrb	r2, [r7, #3]
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	4613      	mov	r3, r2
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	1a9b      	subs	r3, r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	440b      	add	r3, r1
 8004530:	331b      	adds	r3, #27
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d119      	bne.n	800456c <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004538:	78fa      	ldrb	r2, [r7, #3]
 800453a:	6879      	ldr	r1, [r7, #4]
 800453c:	4613      	mov	r3, r2
 800453e:	011b      	lsls	r3, r3, #4
 8004540:	1a9b      	subs	r3, r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	440b      	add	r3, r1
 8004546:	331b      	adds	r3, #27
 8004548:	2200      	movs	r2, #0
 800454a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800454c:	78fb      	ldrb	r3, [r7, #3]
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	4413      	add	r3, r2
 8004554:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	78fa      	ldrb	r2, [r7, #3]
 800455c:	0151      	lsls	r1, r2, #5
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	440a      	add	r2, r1
 8004562:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004566:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800456a:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	799b      	ldrb	r3, [r3, #6]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d01b      	beq.n	80045ac <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004574:	78fa      	ldrb	r2, [r7, #3]
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	4613      	mov	r3, r2
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	1a9b      	subs	r3, r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	440b      	add	r3, r1
 8004582:	3330      	adds	r3, #48	@ 0x30
 8004584:	6819      	ldr	r1, [r3, #0]
 8004586:	78fb      	ldrb	r3, [r7, #3]
 8004588:	015a      	lsls	r2, r3, #5
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	4413      	add	r3, r2
 800458e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004598:	78fa      	ldrb	r2, [r7, #3]
 800459a:	1ac9      	subs	r1, r1, r3
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	4613      	mov	r3, r2
 80045a0:	011b      	lsls	r3, r3, #4
 80045a2:	1a9b      	subs	r3, r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4403      	add	r3, r0
 80045a8:	3338      	adds	r3, #56	@ 0x38
 80045aa:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80045ac:	78fa      	ldrb	r2, [r7, #3]
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	4613      	mov	r3, r2
 80045b2:	011b      	lsls	r3, r3, #4
 80045b4:	1a9b      	subs	r3, r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	440b      	add	r3, r1
 80045ba:	334d      	adds	r3, #77	@ 0x4d
 80045bc:	2201      	movs	r2, #1
 80045be:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80045c0:	78fa      	ldrb	r2, [r7, #3]
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	4613      	mov	r3, r2
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	1a9b      	subs	r3, r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	3344      	adds	r3, #68	@ 0x44
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80045d4:	78fb      	ldrb	r3, [r7, #3]
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045e0:	461a      	mov	r2, r3
 80045e2:	2301      	movs	r3, #1
 80045e4:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80045e6:	78fa      	ldrb	r2, [r7, #3]
 80045e8:	6879      	ldr	r1, [r7, #4]
 80045ea:	4613      	mov	r3, r2
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	1a9b      	subs	r3, r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	440b      	add	r3, r1
 80045f4:	3326      	adds	r3, #38	@ 0x26
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00a      	beq.n	8004612 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80045fc:	78fa      	ldrb	r2, [r7, #3]
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	4613      	mov	r3, r2
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	1a9b      	subs	r3, r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	3326      	adds	r3, #38	@ 0x26
 800460c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800460e:	2b02      	cmp	r3, #2
 8004610:	d110      	bne.n	8004634 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	78fa      	ldrb	r2, [r7, #3]
 8004618:	4611      	mov	r1, r2
 800461a:	4618      	mov	r0, r3
 800461c:	f005 f8a6 	bl	800976c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004620:	78fb      	ldrb	r3, [r7, #3]
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	4413      	add	r3, r2
 8004628:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800462c:	461a      	mov	r2, r3
 800462e:	2310      	movs	r3, #16
 8004630:	6093      	str	r3, [r2, #8]
 8004632:	e03d      	b.n	80046b0 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004634:	78fa      	ldrb	r2, [r7, #3]
 8004636:	6879      	ldr	r1, [r7, #4]
 8004638:	4613      	mov	r3, r2
 800463a:	011b      	lsls	r3, r3, #4
 800463c:	1a9b      	subs	r3, r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	3326      	adds	r3, #38	@ 0x26
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	2b03      	cmp	r3, #3
 8004648:	d00a      	beq.n	8004660 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800464a:	78fa      	ldrb	r2, [r7, #3]
 800464c:	6879      	ldr	r1, [r7, #4]
 800464e:	4613      	mov	r3, r2
 8004650:	011b      	lsls	r3, r3, #4
 8004652:	1a9b      	subs	r3, r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	440b      	add	r3, r1
 8004658:	3326      	adds	r3, #38	@ 0x26
 800465a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800465c:	2b01      	cmp	r3, #1
 800465e:	d127      	bne.n	80046b0 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004660:	78fb      	ldrb	r3, [r7, #3]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	4413      	add	r3, r2
 8004668:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	78fa      	ldrb	r2, [r7, #3]
 8004670:	0151      	lsls	r1, r2, #5
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	440a      	add	r2, r1
 8004676:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800467a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800467e:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004680:	78fa      	ldrb	r2, [r7, #3]
 8004682:	6879      	ldr	r1, [r7, #4]
 8004684:	4613      	mov	r3, r2
 8004686:	011b      	lsls	r3, r3, #4
 8004688:	1a9b      	subs	r3, r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	440b      	add	r3, r1
 800468e:	334c      	adds	r3, #76	@ 0x4c
 8004690:	2201      	movs	r2, #1
 8004692:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004694:	78fa      	ldrb	r2, [r7, #3]
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	4613      	mov	r3, r2
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	1a9b      	subs	r3, r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	334c      	adds	r3, #76	@ 0x4c
 80046a4:	781a      	ldrb	r2, [r3, #0]
 80046a6:	78fb      	ldrb	r3, [r7, #3]
 80046a8:	4619      	mov	r1, r3
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f006 fb6a 	bl	800ad84 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	799b      	ldrb	r3, [r3, #6]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d13b      	bne.n	8004730 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80046b8:	78fa      	ldrb	r2, [r7, #3]
 80046ba:	6879      	ldr	r1, [r7, #4]
 80046bc:	4613      	mov	r3, r2
 80046be:	011b      	lsls	r3, r3, #4
 80046c0:	1a9b      	subs	r3, r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	440b      	add	r3, r1
 80046c6:	3338      	adds	r3, #56	@ 0x38
 80046c8:	6819      	ldr	r1, [r3, #0]
 80046ca:	78fa      	ldrb	r2, [r7, #3]
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	4613      	mov	r3, r2
 80046d0:	011b      	lsls	r3, r3, #4
 80046d2:	1a9b      	subs	r3, r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4403      	add	r3, r0
 80046d8:	3328      	adds	r3, #40	@ 0x28
 80046da:	881b      	ldrh	r3, [r3, #0]
 80046dc:	440b      	add	r3, r1
 80046de:	1e59      	subs	r1, r3, #1
 80046e0:	78fa      	ldrb	r2, [r7, #3]
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	4613      	mov	r3, r2
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	1a9b      	subs	r3, r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4403      	add	r3, r0
 80046ee:	3328      	adds	r3, #40	@ 0x28
 80046f0:	881b      	ldrh	r3, [r3, #0]
 80046f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 8470 	beq.w	8004fe0 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8004700:	78fa      	ldrb	r2, [r7, #3]
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	4613      	mov	r3, r2
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	333c      	adds	r3, #60	@ 0x3c
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	78fa      	ldrb	r2, [r7, #3]
 8004714:	f083 0301 	eor.w	r3, r3, #1
 8004718:	b2d8      	uxtb	r0, r3
 800471a:	6879      	ldr	r1, [r7, #4]
 800471c:	4613      	mov	r3, r2
 800471e:	011b      	lsls	r3, r3, #4
 8004720:	1a9b      	subs	r3, r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	440b      	add	r3, r1
 8004726:	333c      	adds	r3, #60	@ 0x3c
 8004728:	4602      	mov	r2, r0
 800472a:	701a      	strb	r2, [r3, #0]
 800472c:	f000 bc58 	b.w	8004fe0 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8004730:	78fa      	ldrb	r2, [r7, #3]
 8004732:	6879      	ldr	r1, [r7, #4]
 8004734:	4613      	mov	r3, r2
 8004736:	011b      	lsls	r3, r3, #4
 8004738:	1a9b      	subs	r3, r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	440b      	add	r3, r1
 800473e:	333c      	adds	r3, #60	@ 0x3c
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	78fa      	ldrb	r2, [r7, #3]
 8004744:	f083 0301 	eor.w	r3, r3, #1
 8004748:	b2d8      	uxtb	r0, r3
 800474a:	6879      	ldr	r1, [r7, #4]
 800474c:	4613      	mov	r3, r2
 800474e:	011b      	lsls	r3, r3, #4
 8004750:	1a9b      	subs	r3, r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	440b      	add	r3, r1
 8004756:	333c      	adds	r3, #60	@ 0x3c
 8004758:	4602      	mov	r2, r0
 800475a:	701a      	strb	r2, [r3, #0]
 800475c:	f000 bc40 	b.w	8004fe0 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	78fa      	ldrb	r2, [r7, #3]
 8004766:	4611      	mov	r1, r2
 8004768:	4618      	mov	r0, r3
 800476a:	f004 ff82 	bl	8009672 <USB_ReadChInterrupts>
 800476e:	4603      	mov	r3, r0
 8004770:	f003 0320 	and.w	r3, r3, #32
 8004774:	2b20      	cmp	r3, #32
 8004776:	d131      	bne.n	80047dc <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004778:	78fb      	ldrb	r3, [r7, #3]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	4413      	add	r3, r2
 8004780:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004784:	461a      	mov	r2, r3
 8004786:	2320      	movs	r3, #32
 8004788:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800478a:	78fa      	ldrb	r2, [r7, #3]
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	4613      	mov	r3, r2
 8004790:	011b      	lsls	r3, r3, #4
 8004792:	1a9b      	subs	r3, r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	440b      	add	r3, r1
 8004798:	331a      	adds	r3, #26
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	2b01      	cmp	r3, #1
 800479e:	f040 841f 	bne.w	8004fe0 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80047a2:	78fa      	ldrb	r2, [r7, #3]
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	4613      	mov	r3, r2
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	1a9b      	subs	r3, r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	440b      	add	r3, r1
 80047b0:	331b      	adds	r3, #27
 80047b2:	2201      	movs	r2, #1
 80047b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80047b6:	78fa      	ldrb	r2, [r7, #3]
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	4613      	mov	r3, r2
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	1a9b      	subs	r3, r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	440b      	add	r3, r1
 80047c4:	334d      	adds	r3, #77	@ 0x4d
 80047c6:	2203      	movs	r2, #3
 80047c8:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	78fa      	ldrb	r2, [r7, #3]
 80047d0:	4611      	mov	r1, r2
 80047d2:	4618      	mov	r0, r3
 80047d4:	f004 ffca 	bl	800976c <USB_HC_Halt>
 80047d8:	f000 bc02 	b.w	8004fe0 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	78fa      	ldrb	r2, [r7, #3]
 80047e2:	4611      	mov	r1, r2
 80047e4:	4618      	mov	r0, r3
 80047e6:	f004 ff44 	bl	8009672 <USB_ReadChInterrupts>
 80047ea:	4603      	mov	r3, r0
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	f040 8305 	bne.w	8004e00 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80047f6:	78fb      	ldrb	r3, [r7, #3]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004802:	461a      	mov	r2, r3
 8004804:	2302      	movs	r3, #2
 8004806:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004808:	78fa      	ldrb	r2, [r7, #3]
 800480a:	6879      	ldr	r1, [r7, #4]
 800480c:	4613      	mov	r3, r2
 800480e:	011b      	lsls	r3, r3, #4
 8004810:	1a9b      	subs	r3, r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	440b      	add	r3, r1
 8004816:	334d      	adds	r3, #77	@ 0x4d
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d114      	bne.n	8004848 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800481e:	78fa      	ldrb	r2, [r7, #3]
 8004820:	6879      	ldr	r1, [r7, #4]
 8004822:	4613      	mov	r3, r2
 8004824:	011b      	lsls	r3, r3, #4
 8004826:	1a9b      	subs	r3, r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	440b      	add	r3, r1
 800482c:	334d      	adds	r3, #77	@ 0x4d
 800482e:	2202      	movs	r2, #2
 8004830:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004832:	78fa      	ldrb	r2, [r7, #3]
 8004834:	6879      	ldr	r1, [r7, #4]
 8004836:	4613      	mov	r3, r2
 8004838:	011b      	lsls	r3, r3, #4
 800483a:	1a9b      	subs	r3, r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	440b      	add	r3, r1
 8004840:	334c      	adds	r3, #76	@ 0x4c
 8004842:	2201      	movs	r2, #1
 8004844:	701a      	strb	r2, [r3, #0]
 8004846:	e2cc      	b.n	8004de2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004848:	78fa      	ldrb	r2, [r7, #3]
 800484a:	6879      	ldr	r1, [r7, #4]
 800484c:	4613      	mov	r3, r2
 800484e:	011b      	lsls	r3, r3, #4
 8004850:	1a9b      	subs	r3, r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	440b      	add	r3, r1
 8004856:	334d      	adds	r3, #77	@ 0x4d
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	2b06      	cmp	r3, #6
 800485c:	d114      	bne.n	8004888 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800485e:	78fa      	ldrb	r2, [r7, #3]
 8004860:	6879      	ldr	r1, [r7, #4]
 8004862:	4613      	mov	r3, r2
 8004864:	011b      	lsls	r3, r3, #4
 8004866:	1a9b      	subs	r3, r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	440b      	add	r3, r1
 800486c:	334d      	adds	r3, #77	@ 0x4d
 800486e:	2202      	movs	r2, #2
 8004870:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004872:	78fa      	ldrb	r2, [r7, #3]
 8004874:	6879      	ldr	r1, [r7, #4]
 8004876:	4613      	mov	r3, r2
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	1a9b      	subs	r3, r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	440b      	add	r3, r1
 8004880:	334c      	adds	r3, #76	@ 0x4c
 8004882:	2205      	movs	r2, #5
 8004884:	701a      	strb	r2, [r3, #0]
 8004886:	e2ac      	b.n	8004de2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004888:	78fa      	ldrb	r2, [r7, #3]
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	4613      	mov	r3, r2
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	1a9b      	subs	r3, r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	334d      	adds	r3, #77	@ 0x4d
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	2b07      	cmp	r3, #7
 800489c:	d00b      	beq.n	80048b6 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800489e:	78fa      	ldrb	r2, [r7, #3]
 80048a0:	6879      	ldr	r1, [r7, #4]
 80048a2:	4613      	mov	r3, r2
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	1a9b      	subs	r3, r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	440b      	add	r3, r1
 80048ac:	334d      	adds	r3, #77	@ 0x4d
 80048ae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80048b0:	2b09      	cmp	r3, #9
 80048b2:	f040 80a6 	bne.w	8004a02 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80048b6:	78fa      	ldrb	r2, [r7, #3]
 80048b8:	6879      	ldr	r1, [r7, #4]
 80048ba:	4613      	mov	r3, r2
 80048bc:	011b      	lsls	r3, r3, #4
 80048be:	1a9b      	subs	r3, r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	440b      	add	r3, r1
 80048c4:	334d      	adds	r3, #77	@ 0x4d
 80048c6:	2202      	movs	r2, #2
 80048c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80048ca:	78fa      	ldrb	r2, [r7, #3]
 80048cc:	6879      	ldr	r1, [r7, #4]
 80048ce:	4613      	mov	r3, r2
 80048d0:	011b      	lsls	r3, r3, #4
 80048d2:	1a9b      	subs	r3, r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	440b      	add	r3, r1
 80048d8:	3344      	adds	r3, #68	@ 0x44
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	1c59      	adds	r1, r3, #1
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	4613      	mov	r3, r2
 80048e2:	011b      	lsls	r3, r3, #4
 80048e4:	1a9b      	subs	r3, r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4403      	add	r3, r0
 80048ea:	3344      	adds	r3, #68	@ 0x44
 80048ec:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80048ee:	78fa      	ldrb	r2, [r7, #3]
 80048f0:	6879      	ldr	r1, [r7, #4]
 80048f2:	4613      	mov	r3, r2
 80048f4:	011b      	lsls	r3, r3, #4
 80048f6:	1a9b      	subs	r3, r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	440b      	add	r3, r1
 80048fc:	3344      	adds	r3, #68	@ 0x44
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b02      	cmp	r3, #2
 8004902:	d943      	bls.n	800498c <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004904:	78fa      	ldrb	r2, [r7, #3]
 8004906:	6879      	ldr	r1, [r7, #4]
 8004908:	4613      	mov	r3, r2
 800490a:	011b      	lsls	r3, r3, #4
 800490c:	1a9b      	subs	r3, r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	440b      	add	r3, r1
 8004912:	3344      	adds	r3, #68	@ 0x44
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8004918:	78fa      	ldrb	r2, [r7, #3]
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	4613      	mov	r3, r2
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	1a9b      	subs	r3, r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	440b      	add	r3, r1
 8004926:	331a      	adds	r3, #26
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d123      	bne.n	8004976 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800492e:	78fa      	ldrb	r2, [r7, #3]
 8004930:	6879      	ldr	r1, [r7, #4]
 8004932:	4613      	mov	r3, r2
 8004934:	011b      	lsls	r3, r3, #4
 8004936:	1a9b      	subs	r3, r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	440b      	add	r3, r1
 800493c:	331b      	adds	r3, #27
 800493e:	2200      	movs	r2, #0
 8004940:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004942:	78fa      	ldrb	r2, [r7, #3]
 8004944:	6879      	ldr	r1, [r7, #4]
 8004946:	4613      	mov	r3, r2
 8004948:	011b      	lsls	r3, r3, #4
 800494a:	1a9b      	subs	r3, r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	440b      	add	r3, r1
 8004950:	331c      	adds	r3, #28
 8004952:	2200      	movs	r2, #0
 8004954:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004956:	78fb      	ldrb	r3, [r7, #3]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	4413      	add	r3, r2
 800495e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	78fa      	ldrb	r2, [r7, #3]
 8004966:	0151      	lsls	r1, r2, #5
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	440a      	add	r2, r1
 800496c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004970:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004974:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004976:	78fa      	ldrb	r2, [r7, #3]
 8004978:	6879      	ldr	r1, [r7, #4]
 800497a:	4613      	mov	r3, r2
 800497c:	011b      	lsls	r3, r3, #4
 800497e:	1a9b      	subs	r3, r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	440b      	add	r3, r1
 8004984:	334c      	adds	r3, #76	@ 0x4c
 8004986:	2204      	movs	r2, #4
 8004988:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800498a:	e229      	b.n	8004de0 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800498c:	78fa      	ldrb	r2, [r7, #3]
 800498e:	6879      	ldr	r1, [r7, #4]
 8004990:	4613      	mov	r3, r2
 8004992:	011b      	lsls	r3, r3, #4
 8004994:	1a9b      	subs	r3, r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	440b      	add	r3, r1
 800499a:	334c      	adds	r3, #76	@ 0x4c
 800499c:	2202      	movs	r2, #2
 800499e:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80049a0:	78fa      	ldrb	r2, [r7, #3]
 80049a2:	6879      	ldr	r1, [r7, #4]
 80049a4:	4613      	mov	r3, r2
 80049a6:	011b      	lsls	r3, r3, #4
 80049a8:	1a9b      	subs	r3, r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	440b      	add	r3, r1
 80049ae:	3326      	adds	r3, #38	@ 0x26
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00b      	beq.n	80049ce <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80049b6:	78fa      	ldrb	r2, [r7, #3]
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	4613      	mov	r3, r2
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	1a9b      	subs	r3, r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	440b      	add	r3, r1
 80049c4:	3326      	adds	r3, #38	@ 0x26
 80049c6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	f040 8209 	bne.w	8004de0 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80049ce:	78fb      	ldrb	r3, [r7, #3]
 80049d0:	015a      	lsls	r2, r3, #5
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	4413      	add	r3, r2
 80049d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80049e4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80049ec:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80049ee:	78fb      	ldrb	r3, [r7, #3]
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049fa:	461a      	mov	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004a00:	e1ee      	b.n	8004de0 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004a02:	78fa      	ldrb	r2, [r7, #3]
 8004a04:	6879      	ldr	r1, [r7, #4]
 8004a06:	4613      	mov	r3, r2
 8004a08:	011b      	lsls	r3, r3, #4
 8004a0a:	1a9b      	subs	r3, r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	440b      	add	r3, r1
 8004a10:	334d      	adds	r3, #77	@ 0x4d
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	2b05      	cmp	r3, #5
 8004a16:	f040 80c8 	bne.w	8004baa <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a1a:	78fa      	ldrb	r2, [r7, #3]
 8004a1c:	6879      	ldr	r1, [r7, #4]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	011b      	lsls	r3, r3, #4
 8004a22:	1a9b      	subs	r3, r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	440b      	add	r3, r1
 8004a28:	334d      	adds	r3, #77	@ 0x4d
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004a2e:	78fa      	ldrb	r2, [r7, #3]
 8004a30:	6879      	ldr	r1, [r7, #4]
 8004a32:	4613      	mov	r3, r2
 8004a34:	011b      	lsls	r3, r3, #4
 8004a36:	1a9b      	subs	r3, r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	331b      	adds	r3, #27
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	f040 81ce 	bne.w	8004de2 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004a46:	78fa      	ldrb	r2, [r7, #3]
 8004a48:	6879      	ldr	r1, [r7, #4]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	011b      	lsls	r3, r3, #4
 8004a4e:	1a9b      	subs	r3, r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	440b      	add	r3, r1
 8004a54:	3326      	adds	r3, #38	@ 0x26
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	2b03      	cmp	r3, #3
 8004a5a:	d16b      	bne.n	8004b34 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004a5c:	78fa      	ldrb	r2, [r7, #3]
 8004a5e:	6879      	ldr	r1, [r7, #4]
 8004a60:	4613      	mov	r3, r2
 8004a62:	011b      	lsls	r3, r3, #4
 8004a64:	1a9b      	subs	r3, r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	440b      	add	r3, r1
 8004a6a:	3348      	adds	r3, #72	@ 0x48
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	1c59      	adds	r1, r3, #1
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	4613      	mov	r3, r2
 8004a74:	011b      	lsls	r3, r3, #4
 8004a76:	1a9b      	subs	r3, r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4403      	add	r3, r0
 8004a7c:	3348      	adds	r3, #72	@ 0x48
 8004a7e:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004a80:	78fa      	ldrb	r2, [r7, #3]
 8004a82:	6879      	ldr	r1, [r7, #4]
 8004a84:	4613      	mov	r3, r2
 8004a86:	011b      	lsls	r3, r3, #4
 8004a88:	1a9b      	subs	r3, r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	440b      	add	r3, r1
 8004a8e:	3348      	adds	r3, #72	@ 0x48
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d943      	bls.n	8004b1e <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004a96:	78fa      	ldrb	r2, [r7, #3]
 8004a98:	6879      	ldr	r1, [r7, #4]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	011b      	lsls	r3, r3, #4
 8004a9e:	1a9b      	subs	r3, r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	440b      	add	r3, r1
 8004aa4:	3348      	adds	r3, #72	@ 0x48
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004aaa:	78fa      	ldrb	r2, [r7, #3]
 8004aac:	6879      	ldr	r1, [r7, #4]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	1a9b      	subs	r3, r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	440b      	add	r3, r1
 8004ab8:	331b      	adds	r3, #27
 8004aba:	2200      	movs	r2, #0
 8004abc:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004abe:	78fa      	ldrb	r2, [r7, #3]
 8004ac0:	6879      	ldr	r1, [r7, #4]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	1a9b      	subs	r3, r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	440b      	add	r3, r1
 8004acc:	3344      	adds	r3, #68	@ 0x44
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d809      	bhi.n	8004ae8 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8004ad4:	78fa      	ldrb	r2, [r7, #3]
 8004ad6:	6879      	ldr	r1, [r7, #4]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	011b      	lsls	r3, r3, #4
 8004adc:	1a9b      	subs	r3, r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	440b      	add	r3, r1
 8004ae2:	331c      	adds	r3, #28
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004ae8:	78fb      	ldrb	r3, [r7, #3]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	78fa      	ldrb	r2, [r7, #3]
 8004af8:	0151      	lsls	r1, r2, #5
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	440a      	add	r2, r1
 8004afe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b06:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004b08:	78fa      	ldrb	r2, [r7, #3]
 8004b0a:	6879      	ldr	r1, [r7, #4]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	011b      	lsls	r3, r3, #4
 8004b10:	1a9b      	subs	r3, r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	440b      	add	r3, r1
 8004b16:	334c      	adds	r3, #76	@ 0x4c
 8004b18:	2204      	movs	r2, #4
 8004b1a:	701a      	strb	r2, [r3, #0]
 8004b1c:	e014      	b.n	8004b48 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004b1e:	78fa      	ldrb	r2, [r7, #3]
 8004b20:	6879      	ldr	r1, [r7, #4]
 8004b22:	4613      	mov	r3, r2
 8004b24:	011b      	lsls	r3, r3, #4
 8004b26:	1a9b      	subs	r3, r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	440b      	add	r3, r1
 8004b2c:	334c      	adds	r3, #76	@ 0x4c
 8004b2e:	2202      	movs	r2, #2
 8004b30:	701a      	strb	r2, [r3, #0]
 8004b32:	e009      	b.n	8004b48 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004b34:	78fa      	ldrb	r2, [r7, #3]
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	011b      	lsls	r3, r3, #4
 8004b3c:	1a9b      	subs	r3, r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	440b      	add	r3, r1
 8004b42:	334c      	adds	r3, #76	@ 0x4c
 8004b44:	2202      	movs	r2, #2
 8004b46:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004b48:	78fa      	ldrb	r2, [r7, #3]
 8004b4a:	6879      	ldr	r1, [r7, #4]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	011b      	lsls	r3, r3, #4
 8004b50:	1a9b      	subs	r3, r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	440b      	add	r3, r1
 8004b56:	3326      	adds	r3, #38	@ 0x26
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00b      	beq.n	8004b76 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004b5e:	78fa      	ldrb	r2, [r7, #3]
 8004b60:	6879      	ldr	r1, [r7, #4]
 8004b62:	4613      	mov	r3, r2
 8004b64:	011b      	lsls	r3, r3, #4
 8004b66:	1a9b      	subs	r3, r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	440b      	add	r3, r1
 8004b6c:	3326      	adds	r3, #38	@ 0x26
 8004b6e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	f040 8136 	bne.w	8004de2 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004b76:	78fb      	ldrb	r3, [r7, #3]
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004b8c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b94:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004b96:	78fb      	ldrb	r3, [r7, #3]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6013      	str	r3, [r2, #0]
 8004ba8:	e11b      	b.n	8004de2 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004baa:	78fa      	ldrb	r2, [r7, #3]
 8004bac:	6879      	ldr	r1, [r7, #4]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	011b      	lsls	r3, r3, #4
 8004bb2:	1a9b      	subs	r3, r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	440b      	add	r3, r1
 8004bb8:	334d      	adds	r3, #77	@ 0x4d
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	2b03      	cmp	r3, #3
 8004bbe:	f040 8081 	bne.w	8004cc4 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004bc2:	78fa      	ldrb	r2, [r7, #3]
 8004bc4:	6879      	ldr	r1, [r7, #4]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	011b      	lsls	r3, r3, #4
 8004bca:	1a9b      	subs	r3, r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	440b      	add	r3, r1
 8004bd0:	334d      	adds	r3, #77	@ 0x4d
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004bd6:	78fa      	ldrb	r2, [r7, #3]
 8004bd8:	6879      	ldr	r1, [r7, #4]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	011b      	lsls	r3, r3, #4
 8004bde:	1a9b      	subs	r3, r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	440b      	add	r3, r1
 8004be4:	331b      	adds	r3, #27
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	f040 80fa 	bne.w	8004de2 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004bee:	78fa      	ldrb	r2, [r7, #3]
 8004bf0:	6879      	ldr	r1, [r7, #4]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	011b      	lsls	r3, r3, #4
 8004bf6:	1a9b      	subs	r3, r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	440b      	add	r3, r1
 8004bfc:	334c      	adds	r3, #76	@ 0x4c
 8004bfe:	2202      	movs	r2, #2
 8004c00:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004c02:	78fb      	ldrb	r3, [r7, #3]
 8004c04:	015a      	lsls	r2, r3, #5
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	4413      	add	r3, r2
 8004c0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	78fa      	ldrb	r2, [r7, #3]
 8004c12:	0151      	lsls	r1, r2, #5
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	440a      	add	r2, r1
 8004c18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c20:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004c22:	78fb      	ldrb	r3, [r7, #3]
 8004c24:	015a      	lsls	r2, r3, #5
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	78fa      	ldrb	r2, [r7, #3]
 8004c32:	0151      	lsls	r1, r2, #5
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	440a      	add	r2, r1
 8004c38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c40:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004c42:	78fb      	ldrb	r3, [r7, #3]
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	78fa      	ldrb	r2, [r7, #3]
 8004c52:	0151      	lsls	r1, r2, #5
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	440a      	add	r2, r1
 8004c58:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c5c:	f023 0320 	bic.w	r3, r3, #32
 8004c60:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c62:	78fa      	ldrb	r2, [r7, #3]
 8004c64:	6879      	ldr	r1, [r7, #4]
 8004c66:	4613      	mov	r3, r2
 8004c68:	011b      	lsls	r3, r3, #4
 8004c6a:	1a9b      	subs	r3, r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	440b      	add	r3, r1
 8004c70:	3326      	adds	r3, #38	@ 0x26
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00b      	beq.n	8004c90 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004c78:	78fa      	ldrb	r2, [r7, #3]
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	011b      	lsls	r3, r3, #4
 8004c80:	1a9b      	subs	r3, r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	440b      	add	r3, r1
 8004c86:	3326      	adds	r3, #38	@ 0x26
 8004c88:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	f040 80a9 	bne.w	8004de2 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004c90:	78fb      	ldrb	r3, [r7, #3]
 8004c92:	015a      	lsls	r2, r3, #5
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	4413      	add	r3, r2
 8004c98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004ca6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004cae:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004cb0:	78fb      	ldrb	r3, [r7, #3]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6013      	str	r3, [r2, #0]
 8004cc2:	e08e      	b.n	8004de2 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004cc4:	78fa      	ldrb	r2, [r7, #3]
 8004cc6:	6879      	ldr	r1, [r7, #4]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	011b      	lsls	r3, r3, #4
 8004ccc:	1a9b      	subs	r3, r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	440b      	add	r3, r1
 8004cd2:	334d      	adds	r3, #77	@ 0x4d
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d143      	bne.n	8004d62 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004cda:	78fa      	ldrb	r2, [r7, #3]
 8004cdc:	6879      	ldr	r1, [r7, #4]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	011b      	lsls	r3, r3, #4
 8004ce2:	1a9b      	subs	r3, r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	440b      	add	r3, r1
 8004ce8:	334d      	adds	r3, #77	@ 0x4d
 8004cea:	2202      	movs	r2, #2
 8004cec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004cee:	78fa      	ldrb	r2, [r7, #3]
 8004cf0:	6879      	ldr	r1, [r7, #4]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	011b      	lsls	r3, r3, #4
 8004cf6:	1a9b      	subs	r3, r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	440b      	add	r3, r1
 8004cfc:	334c      	adds	r3, #76	@ 0x4c
 8004cfe:	2202      	movs	r2, #2
 8004d00:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004d02:	78fa      	ldrb	r2, [r7, #3]
 8004d04:	6879      	ldr	r1, [r7, #4]
 8004d06:	4613      	mov	r3, r2
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	1a9b      	subs	r3, r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	440b      	add	r3, r1
 8004d10:	3326      	adds	r3, #38	@ 0x26
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00a      	beq.n	8004d2e <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004d18:	78fa      	ldrb	r2, [r7, #3]
 8004d1a:	6879      	ldr	r1, [r7, #4]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	011b      	lsls	r3, r3, #4
 8004d20:	1a9b      	subs	r3, r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	440b      	add	r3, r1
 8004d26:	3326      	adds	r3, #38	@ 0x26
 8004d28:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d159      	bne.n	8004de2 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004d2e:	78fb      	ldrb	r3, [r7, #3]
 8004d30:	015a      	lsls	r2, r3, #5
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	4413      	add	r3, r2
 8004d36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004d44:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004d4c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004d4e:	78fb      	ldrb	r3, [r7, #3]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	e03f      	b.n	8004de2 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004d62:	78fa      	ldrb	r2, [r7, #3]
 8004d64:	6879      	ldr	r1, [r7, #4]
 8004d66:	4613      	mov	r3, r2
 8004d68:	011b      	lsls	r3, r3, #4
 8004d6a:	1a9b      	subs	r3, r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	440b      	add	r3, r1
 8004d70:	334d      	adds	r3, #77	@ 0x4d
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	2b08      	cmp	r3, #8
 8004d76:	d126      	bne.n	8004dc6 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004d78:	78fa      	ldrb	r2, [r7, #3]
 8004d7a:	6879      	ldr	r1, [r7, #4]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	1a9b      	subs	r3, r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	440b      	add	r3, r1
 8004d86:	334d      	adds	r3, #77	@ 0x4d
 8004d88:	2202      	movs	r2, #2
 8004d8a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004d8c:	78fa      	ldrb	r2, [r7, #3]
 8004d8e:	6879      	ldr	r1, [r7, #4]
 8004d90:	4613      	mov	r3, r2
 8004d92:	011b      	lsls	r3, r3, #4
 8004d94:	1a9b      	subs	r3, r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	440b      	add	r3, r1
 8004d9a:	3344      	adds	r3, #68	@ 0x44
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	1c59      	adds	r1, r3, #1
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	4613      	mov	r3, r2
 8004da4:	011b      	lsls	r3, r3, #4
 8004da6:	1a9b      	subs	r3, r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4403      	add	r3, r0
 8004dac:	3344      	adds	r3, #68	@ 0x44
 8004dae:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004db0:	78fa      	ldrb	r2, [r7, #3]
 8004db2:	6879      	ldr	r1, [r7, #4]
 8004db4:	4613      	mov	r3, r2
 8004db6:	011b      	lsls	r3, r3, #4
 8004db8:	1a9b      	subs	r3, r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	440b      	add	r3, r1
 8004dbe:	334c      	adds	r3, #76	@ 0x4c
 8004dc0:	2204      	movs	r2, #4
 8004dc2:	701a      	strb	r2, [r3, #0]
 8004dc4:	e00d      	b.n	8004de2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004dc6:	78fa      	ldrb	r2, [r7, #3]
 8004dc8:	6879      	ldr	r1, [r7, #4]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	011b      	lsls	r3, r3, #4
 8004dce:	1a9b      	subs	r3, r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	440b      	add	r3, r1
 8004dd4:	334d      	adds	r3, #77	@ 0x4d
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	f000 8100 	beq.w	8004fde <HCD_HC_IN_IRQHandler+0xcca>
 8004dde:	e000      	b.n	8004de2 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004de0:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004de2:	78fa      	ldrb	r2, [r7, #3]
 8004de4:	6879      	ldr	r1, [r7, #4]
 8004de6:	4613      	mov	r3, r2
 8004de8:	011b      	lsls	r3, r3, #4
 8004dea:	1a9b      	subs	r3, r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	440b      	add	r3, r1
 8004df0:	334c      	adds	r3, #76	@ 0x4c
 8004df2:	781a      	ldrb	r2, [r3, #0]
 8004df4:	78fb      	ldrb	r3, [r7, #3]
 8004df6:	4619      	mov	r1, r3
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f005 ffc3 	bl	800ad84 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004dfe:	e0ef      	b.n	8004fe0 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	78fa      	ldrb	r2, [r7, #3]
 8004e06:	4611      	mov	r1, r2
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f004 fc32 	bl	8009672 <USB_ReadChInterrupts>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e14:	2b40      	cmp	r3, #64	@ 0x40
 8004e16:	d12f      	bne.n	8004e78 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004e18:	78fb      	ldrb	r3, [r7, #3]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e24:	461a      	mov	r2, r3
 8004e26:	2340      	movs	r3, #64	@ 0x40
 8004e28:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004e2a:	78fa      	ldrb	r2, [r7, #3]
 8004e2c:	6879      	ldr	r1, [r7, #4]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	011b      	lsls	r3, r3, #4
 8004e32:	1a9b      	subs	r3, r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	440b      	add	r3, r1
 8004e38:	334d      	adds	r3, #77	@ 0x4d
 8004e3a:	2205      	movs	r2, #5
 8004e3c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004e3e:	78fa      	ldrb	r2, [r7, #3]
 8004e40:	6879      	ldr	r1, [r7, #4]
 8004e42:	4613      	mov	r3, r2
 8004e44:	011b      	lsls	r3, r3, #4
 8004e46:	1a9b      	subs	r3, r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	440b      	add	r3, r1
 8004e4c:	331a      	adds	r3, #26
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d109      	bne.n	8004e68 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004e54:	78fa      	ldrb	r2, [r7, #3]
 8004e56:	6879      	ldr	r1, [r7, #4]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	011b      	lsls	r3, r3, #4
 8004e5c:	1a9b      	subs	r3, r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	440b      	add	r3, r1
 8004e62:	3344      	adds	r3, #68	@ 0x44
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	78fa      	ldrb	r2, [r7, #3]
 8004e6e:	4611      	mov	r1, r2
 8004e70:	4618      	mov	r0, r3
 8004e72:	f004 fc7b 	bl	800976c <USB_HC_Halt>
 8004e76:	e0b3      	b.n	8004fe0 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	78fa      	ldrb	r2, [r7, #3]
 8004e7e:	4611      	mov	r1, r2
 8004e80:	4618      	mov	r0, r3
 8004e82:	f004 fbf6 	bl	8009672 <USB_ReadChInterrupts>
 8004e86:	4603      	mov	r3, r0
 8004e88:	f003 0310 	and.w	r3, r3, #16
 8004e8c:	2b10      	cmp	r3, #16
 8004e8e:	f040 80a7 	bne.w	8004fe0 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004e92:	78fa      	ldrb	r2, [r7, #3]
 8004e94:	6879      	ldr	r1, [r7, #4]
 8004e96:	4613      	mov	r3, r2
 8004e98:	011b      	lsls	r3, r3, #4
 8004e9a:	1a9b      	subs	r3, r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	440b      	add	r3, r1
 8004ea0:	3326      	adds	r3, #38	@ 0x26
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	2b03      	cmp	r3, #3
 8004ea6:	d11b      	bne.n	8004ee0 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004ea8:	78fa      	ldrb	r2, [r7, #3]
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	4613      	mov	r3, r2
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	1a9b      	subs	r3, r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	3344      	adds	r3, #68	@ 0x44
 8004eb8:	2200      	movs	r2, #0
 8004eba:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004ebc:	78fa      	ldrb	r2, [r7, #3]
 8004ebe:	6879      	ldr	r1, [r7, #4]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	011b      	lsls	r3, r3, #4
 8004ec4:	1a9b      	subs	r3, r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	440b      	add	r3, r1
 8004eca:	334d      	adds	r3, #77	@ 0x4d
 8004ecc:	2204      	movs	r2, #4
 8004ece:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	78fa      	ldrb	r2, [r7, #3]
 8004ed6:	4611      	mov	r1, r2
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f004 fc47 	bl	800976c <USB_HC_Halt>
 8004ede:	e03f      	b.n	8004f60 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004ee0:	78fa      	ldrb	r2, [r7, #3]
 8004ee2:	6879      	ldr	r1, [r7, #4]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	011b      	lsls	r3, r3, #4
 8004ee8:	1a9b      	subs	r3, r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	440b      	add	r3, r1
 8004eee:	3326      	adds	r3, #38	@ 0x26
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00a      	beq.n	8004f0c <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004ef6:	78fa      	ldrb	r2, [r7, #3]
 8004ef8:	6879      	ldr	r1, [r7, #4]
 8004efa:	4613      	mov	r3, r2
 8004efc:	011b      	lsls	r3, r3, #4
 8004efe:	1a9b      	subs	r3, r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	440b      	add	r3, r1
 8004f04:	3326      	adds	r3, #38	@ 0x26
 8004f06:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d129      	bne.n	8004f60 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004f0c:	78fa      	ldrb	r2, [r7, #3]
 8004f0e:	6879      	ldr	r1, [r7, #4]
 8004f10:	4613      	mov	r3, r2
 8004f12:	011b      	lsls	r3, r3, #4
 8004f14:	1a9b      	subs	r3, r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	440b      	add	r3, r1
 8004f1a:	3344      	adds	r3, #68	@ 0x44
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	799b      	ldrb	r3, [r3, #6]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00a      	beq.n	8004f3e <HCD_HC_IN_IRQHandler+0xc2a>
 8004f28:	78fa      	ldrb	r2, [r7, #3]
 8004f2a:	6879      	ldr	r1, [r7, #4]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	011b      	lsls	r3, r3, #4
 8004f30:	1a9b      	subs	r3, r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	440b      	add	r3, r1
 8004f36:	331b      	adds	r3, #27
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d110      	bne.n	8004f60 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004f3e:	78fa      	ldrb	r2, [r7, #3]
 8004f40:	6879      	ldr	r1, [r7, #4]
 8004f42:	4613      	mov	r3, r2
 8004f44:	011b      	lsls	r3, r3, #4
 8004f46:	1a9b      	subs	r3, r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	440b      	add	r3, r1
 8004f4c:	334d      	adds	r3, #77	@ 0x4d
 8004f4e:	2204      	movs	r2, #4
 8004f50:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	78fa      	ldrb	r2, [r7, #3]
 8004f58:	4611      	mov	r1, r2
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f004 fc06 	bl	800976c <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004f60:	78fa      	ldrb	r2, [r7, #3]
 8004f62:	6879      	ldr	r1, [r7, #4]
 8004f64:	4613      	mov	r3, r2
 8004f66:	011b      	lsls	r3, r3, #4
 8004f68:	1a9b      	subs	r3, r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	440b      	add	r3, r1
 8004f6e:	331b      	adds	r3, #27
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d129      	bne.n	8004fca <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004f76:	78fa      	ldrb	r2, [r7, #3]
 8004f78:	6879      	ldr	r1, [r7, #4]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	011b      	lsls	r3, r3, #4
 8004f7e:	1a9b      	subs	r3, r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	440b      	add	r3, r1
 8004f84:	331b      	adds	r3, #27
 8004f86:	2200      	movs	r2, #0
 8004f88:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004f8a:	78fb      	ldrb	r3, [r7, #3]
 8004f8c:	015a      	lsls	r2, r3, #5
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	78fa      	ldrb	r2, [r7, #3]
 8004f9a:	0151      	lsls	r1, r2, #5
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	440a      	add	r2, r1
 8004fa0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004fa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fa8:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004faa:	78fb      	ldrb	r3, [r7, #3]
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	78fa      	ldrb	r2, [r7, #3]
 8004fba:	0151      	lsls	r1, r2, #5
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	440a      	add	r2, r1
 8004fc0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004fc4:	f043 0320 	orr.w	r3, r3, #32
 8004fc8:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004fca:	78fb      	ldrb	r3, [r7, #3]
 8004fcc:	015a      	lsls	r2, r3, #5
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	2310      	movs	r3, #16
 8004fda:	6093      	str	r3, [r2, #8]
 8004fdc:	e000      	b.n	8004fe0 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004fde:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b086      	sub	sp, #24
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
 8004fee:	460b      	mov	r3, r1
 8004ff0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	78fa      	ldrb	r2, [r7, #3]
 8005002:	4611      	mov	r1, r2
 8005004:	4618      	mov	r0, r3
 8005006:	f004 fb34 	bl	8009672 <USB_ReadChInterrupts>
 800500a:	4603      	mov	r3, r0
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b04      	cmp	r3, #4
 8005012:	d11b      	bne.n	800504c <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005014:	78fb      	ldrb	r3, [r7, #3]
 8005016:	015a      	lsls	r2, r3, #5
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	4413      	add	r3, r2
 800501c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005020:	461a      	mov	r2, r3
 8005022:	2304      	movs	r3, #4
 8005024:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005026:	78fa      	ldrb	r2, [r7, #3]
 8005028:	6879      	ldr	r1, [r7, #4]
 800502a:	4613      	mov	r3, r2
 800502c:	011b      	lsls	r3, r3, #4
 800502e:	1a9b      	subs	r3, r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	440b      	add	r3, r1
 8005034:	334d      	adds	r3, #77	@ 0x4d
 8005036:	2207      	movs	r2, #7
 8005038:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	78fa      	ldrb	r2, [r7, #3]
 8005040:	4611      	mov	r1, r2
 8005042:	4618      	mov	r0, r3
 8005044:	f004 fb92 	bl	800976c <USB_HC_Halt>
 8005048:	f000 bc89 	b.w	800595e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	78fa      	ldrb	r2, [r7, #3]
 8005052:	4611      	mov	r1, r2
 8005054:	4618      	mov	r0, r3
 8005056:	f004 fb0c 	bl	8009672 <USB_ReadChInterrupts>
 800505a:	4603      	mov	r3, r0
 800505c:	f003 0320 	and.w	r3, r3, #32
 8005060:	2b20      	cmp	r3, #32
 8005062:	f040 8082 	bne.w	800516a <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005066:	78fb      	ldrb	r3, [r7, #3]
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	4413      	add	r3, r2
 800506e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005072:	461a      	mov	r2, r3
 8005074:	2320      	movs	r3, #32
 8005076:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8005078:	78fa      	ldrb	r2, [r7, #3]
 800507a:	6879      	ldr	r1, [r7, #4]
 800507c:	4613      	mov	r3, r2
 800507e:	011b      	lsls	r3, r3, #4
 8005080:	1a9b      	subs	r3, r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	440b      	add	r3, r1
 8005086:	3319      	adds	r3, #25
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d124      	bne.n	80050d8 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800508e:	78fa      	ldrb	r2, [r7, #3]
 8005090:	6879      	ldr	r1, [r7, #4]
 8005092:	4613      	mov	r3, r2
 8005094:	011b      	lsls	r3, r3, #4
 8005096:	1a9b      	subs	r3, r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	440b      	add	r3, r1
 800509c:	3319      	adds	r3, #25
 800509e:	2200      	movs	r2, #0
 80050a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80050a2:	78fa      	ldrb	r2, [r7, #3]
 80050a4:	6879      	ldr	r1, [r7, #4]
 80050a6:	4613      	mov	r3, r2
 80050a8:	011b      	lsls	r3, r3, #4
 80050aa:	1a9b      	subs	r3, r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	440b      	add	r3, r1
 80050b0:	334c      	adds	r3, #76	@ 0x4c
 80050b2:	2202      	movs	r2, #2
 80050b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80050b6:	78fa      	ldrb	r2, [r7, #3]
 80050b8:	6879      	ldr	r1, [r7, #4]
 80050ba:	4613      	mov	r3, r2
 80050bc:	011b      	lsls	r3, r3, #4
 80050be:	1a9b      	subs	r3, r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	440b      	add	r3, r1
 80050c4:	334d      	adds	r3, #77	@ 0x4d
 80050c6:	2203      	movs	r2, #3
 80050c8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	78fa      	ldrb	r2, [r7, #3]
 80050d0:	4611      	mov	r1, r2
 80050d2:	4618      	mov	r0, r3
 80050d4:	f004 fb4a 	bl	800976c <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80050d8:	78fa      	ldrb	r2, [r7, #3]
 80050da:	6879      	ldr	r1, [r7, #4]
 80050dc:	4613      	mov	r3, r2
 80050de:	011b      	lsls	r3, r3, #4
 80050e0:	1a9b      	subs	r3, r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	440b      	add	r3, r1
 80050e6:	331a      	adds	r3, #26
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	f040 8437 	bne.w	800595e <HCD_HC_OUT_IRQHandler+0x978>
 80050f0:	78fa      	ldrb	r2, [r7, #3]
 80050f2:	6879      	ldr	r1, [r7, #4]
 80050f4:	4613      	mov	r3, r2
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	1a9b      	subs	r3, r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	440b      	add	r3, r1
 80050fe:	331b      	adds	r3, #27
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	f040 842b 	bne.w	800595e <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8005108:	78fa      	ldrb	r2, [r7, #3]
 800510a:	6879      	ldr	r1, [r7, #4]
 800510c:	4613      	mov	r3, r2
 800510e:	011b      	lsls	r3, r3, #4
 8005110:	1a9b      	subs	r3, r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	440b      	add	r3, r1
 8005116:	3326      	adds	r3, #38	@ 0x26
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d009      	beq.n	8005132 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800511e:	78fa      	ldrb	r2, [r7, #3]
 8005120:	6879      	ldr	r1, [r7, #4]
 8005122:	4613      	mov	r3, r2
 8005124:	011b      	lsls	r3, r3, #4
 8005126:	1a9b      	subs	r3, r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	440b      	add	r3, r1
 800512c:	331b      	adds	r3, #27
 800512e:	2201      	movs	r2, #1
 8005130:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8005132:	78fa      	ldrb	r2, [r7, #3]
 8005134:	6879      	ldr	r1, [r7, #4]
 8005136:	4613      	mov	r3, r2
 8005138:	011b      	lsls	r3, r3, #4
 800513a:	1a9b      	subs	r3, r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	440b      	add	r3, r1
 8005140:	334d      	adds	r3, #77	@ 0x4d
 8005142:	2203      	movs	r2, #3
 8005144:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	78fa      	ldrb	r2, [r7, #3]
 800514c:	4611      	mov	r1, r2
 800514e:	4618      	mov	r0, r3
 8005150:	f004 fb0c 	bl	800976c <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8005154:	78fa      	ldrb	r2, [r7, #3]
 8005156:	6879      	ldr	r1, [r7, #4]
 8005158:	4613      	mov	r3, r2
 800515a:	011b      	lsls	r3, r3, #4
 800515c:	1a9b      	subs	r3, r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	440b      	add	r3, r1
 8005162:	3344      	adds	r3, #68	@ 0x44
 8005164:	2200      	movs	r2, #0
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	e3f9      	b.n	800595e <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	78fa      	ldrb	r2, [r7, #3]
 8005170:	4611      	mov	r1, r2
 8005172:	4618      	mov	r0, r3
 8005174:	f004 fa7d 	bl	8009672 <USB_ReadChInterrupts>
 8005178:	4603      	mov	r3, r0
 800517a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800517e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005182:	d111      	bne.n	80051a8 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005184:	78fb      	ldrb	r3, [r7, #3]
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	4413      	add	r3, r2
 800518c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005190:	461a      	mov	r2, r3
 8005192:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005196:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	78fa      	ldrb	r2, [r7, #3]
 800519e:	4611      	mov	r1, r2
 80051a0:	4618      	mov	r0, r3
 80051a2:	f004 fae3 	bl	800976c <USB_HC_Halt>
 80051a6:	e3da      	b.n	800595e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	78fa      	ldrb	r2, [r7, #3]
 80051ae:	4611      	mov	r1, r2
 80051b0:	4618      	mov	r0, r3
 80051b2:	f004 fa5e 	bl	8009672 <USB_ReadChInterrupts>
 80051b6:	4603      	mov	r3, r0
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d168      	bne.n	8005292 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80051c0:	78fa      	ldrb	r2, [r7, #3]
 80051c2:	6879      	ldr	r1, [r7, #4]
 80051c4:	4613      	mov	r3, r2
 80051c6:	011b      	lsls	r3, r3, #4
 80051c8:	1a9b      	subs	r3, r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	440b      	add	r3, r1
 80051ce:	3344      	adds	r3, #68	@ 0x44
 80051d0:	2200      	movs	r2, #0
 80051d2:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	78fa      	ldrb	r2, [r7, #3]
 80051da:	4611      	mov	r1, r2
 80051dc:	4618      	mov	r0, r3
 80051de:	f004 fa48 	bl	8009672 <USB_ReadChInterrupts>
 80051e2:	4603      	mov	r3, r0
 80051e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e8:	2b40      	cmp	r3, #64	@ 0x40
 80051ea:	d112      	bne.n	8005212 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80051ec:	78fa      	ldrb	r2, [r7, #3]
 80051ee:	6879      	ldr	r1, [r7, #4]
 80051f0:	4613      	mov	r3, r2
 80051f2:	011b      	lsls	r3, r3, #4
 80051f4:	1a9b      	subs	r3, r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	440b      	add	r3, r1
 80051fa:	3319      	adds	r3, #25
 80051fc:	2201      	movs	r2, #1
 80051fe:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005200:	78fb      	ldrb	r3, [r7, #3]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	4413      	add	r3, r2
 8005208:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800520c:	461a      	mov	r2, r3
 800520e:	2340      	movs	r3, #64	@ 0x40
 8005210:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8005212:	78fa      	ldrb	r2, [r7, #3]
 8005214:	6879      	ldr	r1, [r7, #4]
 8005216:	4613      	mov	r3, r2
 8005218:	011b      	lsls	r3, r3, #4
 800521a:	1a9b      	subs	r3, r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	440b      	add	r3, r1
 8005220:	331b      	adds	r3, #27
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d019      	beq.n	800525c <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005228:	78fa      	ldrb	r2, [r7, #3]
 800522a:	6879      	ldr	r1, [r7, #4]
 800522c:	4613      	mov	r3, r2
 800522e:	011b      	lsls	r3, r3, #4
 8005230:	1a9b      	subs	r3, r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	440b      	add	r3, r1
 8005236:	331b      	adds	r3, #27
 8005238:	2200      	movs	r2, #0
 800523a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800523c:	78fb      	ldrb	r3, [r7, #3]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	4413      	add	r3, r2
 8005244:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	78fa      	ldrb	r2, [r7, #3]
 800524c:	0151      	lsls	r1, r2, #5
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	440a      	add	r2, r1
 8005252:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005256:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800525a:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800525c:	78fb      	ldrb	r3, [r7, #3]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	4413      	add	r3, r2
 8005264:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005268:	461a      	mov	r2, r3
 800526a:	2301      	movs	r3, #1
 800526c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800526e:	78fa      	ldrb	r2, [r7, #3]
 8005270:	6879      	ldr	r1, [r7, #4]
 8005272:	4613      	mov	r3, r2
 8005274:	011b      	lsls	r3, r3, #4
 8005276:	1a9b      	subs	r3, r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	440b      	add	r3, r1
 800527c:	334d      	adds	r3, #77	@ 0x4d
 800527e:	2201      	movs	r2, #1
 8005280:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	78fa      	ldrb	r2, [r7, #3]
 8005288:	4611      	mov	r1, r2
 800528a:	4618      	mov	r0, r3
 800528c:	f004 fa6e 	bl	800976c <USB_HC_Halt>
 8005290:	e365      	b.n	800595e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	78fa      	ldrb	r2, [r7, #3]
 8005298:	4611      	mov	r1, r2
 800529a:	4618      	mov	r0, r3
 800529c:	f004 f9e9 	bl	8009672 <USB_ReadChInterrupts>
 80052a0:	4603      	mov	r3, r0
 80052a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a6:	2b40      	cmp	r3, #64	@ 0x40
 80052a8:	d139      	bne.n	800531e <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80052aa:	78fa      	ldrb	r2, [r7, #3]
 80052ac:	6879      	ldr	r1, [r7, #4]
 80052ae:	4613      	mov	r3, r2
 80052b0:	011b      	lsls	r3, r3, #4
 80052b2:	1a9b      	subs	r3, r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	440b      	add	r3, r1
 80052b8:	334d      	adds	r3, #77	@ 0x4d
 80052ba:	2205      	movs	r2, #5
 80052bc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80052be:	78fa      	ldrb	r2, [r7, #3]
 80052c0:	6879      	ldr	r1, [r7, #4]
 80052c2:	4613      	mov	r3, r2
 80052c4:	011b      	lsls	r3, r3, #4
 80052c6:	1a9b      	subs	r3, r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	440b      	add	r3, r1
 80052cc:	331a      	adds	r3, #26
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d109      	bne.n	80052e8 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80052d4:	78fa      	ldrb	r2, [r7, #3]
 80052d6:	6879      	ldr	r1, [r7, #4]
 80052d8:	4613      	mov	r3, r2
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	1a9b      	subs	r3, r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	440b      	add	r3, r1
 80052e2:	3319      	adds	r3, #25
 80052e4:	2201      	movs	r2, #1
 80052e6:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80052e8:	78fa      	ldrb	r2, [r7, #3]
 80052ea:	6879      	ldr	r1, [r7, #4]
 80052ec:	4613      	mov	r3, r2
 80052ee:	011b      	lsls	r3, r3, #4
 80052f0:	1a9b      	subs	r3, r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	440b      	add	r3, r1
 80052f6:	3344      	adds	r3, #68	@ 0x44
 80052f8:	2200      	movs	r2, #0
 80052fa:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	78fa      	ldrb	r2, [r7, #3]
 8005302:	4611      	mov	r1, r2
 8005304:	4618      	mov	r0, r3
 8005306:	f004 fa31 	bl	800976c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800530a:	78fb      	ldrb	r3, [r7, #3]
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	4413      	add	r3, r2
 8005312:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005316:	461a      	mov	r2, r3
 8005318:	2340      	movs	r3, #64	@ 0x40
 800531a:	6093      	str	r3, [r2, #8]
 800531c:	e31f      	b.n	800595e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	78fa      	ldrb	r2, [r7, #3]
 8005324:	4611      	mov	r1, r2
 8005326:	4618      	mov	r0, r3
 8005328:	f004 f9a3 	bl	8009672 <USB_ReadChInterrupts>
 800532c:	4603      	mov	r3, r0
 800532e:	f003 0308 	and.w	r3, r3, #8
 8005332:	2b08      	cmp	r3, #8
 8005334:	d11a      	bne.n	800536c <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005336:	78fb      	ldrb	r3, [r7, #3]
 8005338:	015a      	lsls	r2, r3, #5
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	4413      	add	r3, r2
 800533e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005342:	461a      	mov	r2, r3
 8005344:	2308      	movs	r3, #8
 8005346:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005348:	78fa      	ldrb	r2, [r7, #3]
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	4613      	mov	r3, r2
 800534e:	011b      	lsls	r3, r3, #4
 8005350:	1a9b      	subs	r3, r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	440b      	add	r3, r1
 8005356:	334d      	adds	r3, #77	@ 0x4d
 8005358:	2206      	movs	r2, #6
 800535a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	78fa      	ldrb	r2, [r7, #3]
 8005362:	4611      	mov	r1, r2
 8005364:	4618      	mov	r0, r3
 8005366:	f004 fa01 	bl	800976c <USB_HC_Halt>
 800536a:	e2f8      	b.n	800595e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	78fa      	ldrb	r2, [r7, #3]
 8005372:	4611      	mov	r1, r2
 8005374:	4618      	mov	r0, r3
 8005376:	f004 f97c 	bl	8009672 <USB_ReadChInterrupts>
 800537a:	4603      	mov	r3, r0
 800537c:	f003 0310 	and.w	r3, r3, #16
 8005380:	2b10      	cmp	r3, #16
 8005382:	d144      	bne.n	800540e <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005384:	78fa      	ldrb	r2, [r7, #3]
 8005386:	6879      	ldr	r1, [r7, #4]
 8005388:	4613      	mov	r3, r2
 800538a:	011b      	lsls	r3, r3, #4
 800538c:	1a9b      	subs	r3, r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	440b      	add	r3, r1
 8005392:	3344      	adds	r3, #68	@ 0x44
 8005394:	2200      	movs	r2, #0
 8005396:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8005398:	78fa      	ldrb	r2, [r7, #3]
 800539a:	6879      	ldr	r1, [r7, #4]
 800539c:	4613      	mov	r3, r2
 800539e:	011b      	lsls	r3, r3, #4
 80053a0:	1a9b      	subs	r3, r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	440b      	add	r3, r1
 80053a6:	334d      	adds	r3, #77	@ 0x4d
 80053a8:	2204      	movs	r2, #4
 80053aa:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80053ac:	78fa      	ldrb	r2, [r7, #3]
 80053ae:	6879      	ldr	r1, [r7, #4]
 80053b0:	4613      	mov	r3, r2
 80053b2:	011b      	lsls	r3, r3, #4
 80053b4:	1a9b      	subs	r3, r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	440b      	add	r3, r1
 80053ba:	3319      	adds	r3, #25
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d114      	bne.n	80053ec <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80053c2:	78fa      	ldrb	r2, [r7, #3]
 80053c4:	6879      	ldr	r1, [r7, #4]
 80053c6:	4613      	mov	r3, r2
 80053c8:	011b      	lsls	r3, r3, #4
 80053ca:	1a9b      	subs	r3, r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	440b      	add	r3, r1
 80053d0:	3318      	adds	r3, #24
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d109      	bne.n	80053ec <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80053d8:	78fa      	ldrb	r2, [r7, #3]
 80053da:	6879      	ldr	r1, [r7, #4]
 80053dc:	4613      	mov	r3, r2
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	1a9b      	subs	r3, r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	3319      	adds	r3, #25
 80053e8:	2201      	movs	r2, #1
 80053ea:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	78fa      	ldrb	r2, [r7, #3]
 80053f2:	4611      	mov	r1, r2
 80053f4:	4618      	mov	r0, r3
 80053f6:	f004 f9b9 	bl	800976c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80053fa:	78fb      	ldrb	r3, [r7, #3]
 80053fc:	015a      	lsls	r2, r3, #5
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	4413      	add	r3, r2
 8005402:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005406:	461a      	mov	r2, r3
 8005408:	2310      	movs	r3, #16
 800540a:	6093      	str	r3, [r2, #8]
 800540c:	e2a7      	b.n	800595e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	78fa      	ldrb	r2, [r7, #3]
 8005414:	4611      	mov	r1, r2
 8005416:	4618      	mov	r0, r3
 8005418:	f004 f92b 	bl	8009672 <USB_ReadChInterrupts>
 800541c:	4603      	mov	r3, r0
 800541e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005422:	2b80      	cmp	r3, #128	@ 0x80
 8005424:	f040 8083 	bne.w	800552e <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	799b      	ldrb	r3, [r3, #6]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d111      	bne.n	8005454 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005430:	78fa      	ldrb	r2, [r7, #3]
 8005432:	6879      	ldr	r1, [r7, #4]
 8005434:	4613      	mov	r3, r2
 8005436:	011b      	lsls	r3, r3, #4
 8005438:	1a9b      	subs	r3, r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	440b      	add	r3, r1
 800543e:	334d      	adds	r3, #77	@ 0x4d
 8005440:	2207      	movs	r2, #7
 8005442:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	78fa      	ldrb	r2, [r7, #3]
 800544a:	4611      	mov	r1, r2
 800544c:	4618      	mov	r0, r3
 800544e:	f004 f98d 	bl	800976c <USB_HC_Halt>
 8005452:	e062      	b.n	800551a <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005454:	78fa      	ldrb	r2, [r7, #3]
 8005456:	6879      	ldr	r1, [r7, #4]
 8005458:	4613      	mov	r3, r2
 800545a:	011b      	lsls	r3, r3, #4
 800545c:	1a9b      	subs	r3, r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	440b      	add	r3, r1
 8005462:	3344      	adds	r3, #68	@ 0x44
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	1c59      	adds	r1, r3, #1
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	4613      	mov	r3, r2
 800546c:	011b      	lsls	r3, r3, #4
 800546e:	1a9b      	subs	r3, r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4403      	add	r3, r0
 8005474:	3344      	adds	r3, #68	@ 0x44
 8005476:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005478:	78fa      	ldrb	r2, [r7, #3]
 800547a:	6879      	ldr	r1, [r7, #4]
 800547c:	4613      	mov	r3, r2
 800547e:	011b      	lsls	r3, r3, #4
 8005480:	1a9b      	subs	r3, r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	440b      	add	r3, r1
 8005486:	3344      	adds	r3, #68	@ 0x44
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2b02      	cmp	r3, #2
 800548c:	d922      	bls.n	80054d4 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800548e:	78fa      	ldrb	r2, [r7, #3]
 8005490:	6879      	ldr	r1, [r7, #4]
 8005492:	4613      	mov	r3, r2
 8005494:	011b      	lsls	r3, r3, #4
 8005496:	1a9b      	subs	r3, r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	440b      	add	r3, r1
 800549c:	3344      	adds	r3, #68	@ 0x44
 800549e:	2200      	movs	r2, #0
 80054a0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80054a2:	78fa      	ldrb	r2, [r7, #3]
 80054a4:	6879      	ldr	r1, [r7, #4]
 80054a6:	4613      	mov	r3, r2
 80054a8:	011b      	lsls	r3, r3, #4
 80054aa:	1a9b      	subs	r3, r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	440b      	add	r3, r1
 80054b0:	334c      	adds	r3, #76	@ 0x4c
 80054b2:	2204      	movs	r2, #4
 80054b4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80054b6:	78fa      	ldrb	r2, [r7, #3]
 80054b8:	6879      	ldr	r1, [r7, #4]
 80054ba:	4613      	mov	r3, r2
 80054bc:	011b      	lsls	r3, r3, #4
 80054be:	1a9b      	subs	r3, r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	440b      	add	r3, r1
 80054c4:	334c      	adds	r3, #76	@ 0x4c
 80054c6:	781a      	ldrb	r2, [r3, #0]
 80054c8:	78fb      	ldrb	r3, [r7, #3]
 80054ca:	4619      	mov	r1, r3
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f005 fc59 	bl	800ad84 <HAL_HCD_HC_NotifyURBChange_Callback>
 80054d2:	e022      	b.n	800551a <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80054d4:	78fa      	ldrb	r2, [r7, #3]
 80054d6:	6879      	ldr	r1, [r7, #4]
 80054d8:	4613      	mov	r3, r2
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	1a9b      	subs	r3, r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	440b      	add	r3, r1
 80054e2:	334c      	adds	r3, #76	@ 0x4c
 80054e4:	2202      	movs	r2, #2
 80054e6:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80054e8:	78fb      	ldrb	r3, [r7, #3]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80054fe:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005506:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005508:	78fb      	ldrb	r3, [r7, #3]
 800550a:	015a      	lsls	r2, r3, #5
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	4413      	add	r3, r2
 8005510:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005514:	461a      	mov	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800551a:	78fb      	ldrb	r3, [r7, #3]
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	4413      	add	r3, r2
 8005522:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005526:	461a      	mov	r2, r3
 8005528:	2380      	movs	r3, #128	@ 0x80
 800552a:	6093      	str	r3, [r2, #8]
 800552c:	e217      	b.n	800595e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	78fa      	ldrb	r2, [r7, #3]
 8005534:	4611      	mov	r1, r2
 8005536:	4618      	mov	r0, r3
 8005538:	f004 f89b 	bl	8009672 <USB_ReadChInterrupts>
 800553c:	4603      	mov	r3, r0
 800553e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005542:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005546:	d11b      	bne.n	8005580 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005548:	78fa      	ldrb	r2, [r7, #3]
 800554a:	6879      	ldr	r1, [r7, #4]
 800554c:	4613      	mov	r3, r2
 800554e:	011b      	lsls	r3, r3, #4
 8005550:	1a9b      	subs	r3, r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	440b      	add	r3, r1
 8005556:	334d      	adds	r3, #77	@ 0x4d
 8005558:	2209      	movs	r2, #9
 800555a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	78fa      	ldrb	r2, [r7, #3]
 8005562:	4611      	mov	r1, r2
 8005564:	4618      	mov	r0, r3
 8005566:	f004 f901 	bl	800976c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800556a:	78fb      	ldrb	r3, [r7, #3]
 800556c:	015a      	lsls	r2, r3, #5
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	4413      	add	r3, r2
 8005572:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005576:	461a      	mov	r2, r3
 8005578:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800557c:	6093      	str	r3, [r2, #8]
 800557e:	e1ee      	b.n	800595e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	78fa      	ldrb	r2, [r7, #3]
 8005586:	4611      	mov	r1, r2
 8005588:	4618      	mov	r0, r3
 800558a:	f004 f872 	bl	8009672 <USB_ReadChInterrupts>
 800558e:	4603      	mov	r3, r0
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b02      	cmp	r3, #2
 8005596:	f040 81df 	bne.w	8005958 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800559a:	78fb      	ldrb	r3, [r7, #3]
 800559c:	015a      	lsls	r2, r3, #5
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055a6:	461a      	mov	r2, r3
 80055a8:	2302      	movs	r3, #2
 80055aa:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80055ac:	78fa      	ldrb	r2, [r7, #3]
 80055ae:	6879      	ldr	r1, [r7, #4]
 80055b0:	4613      	mov	r3, r2
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	1a9b      	subs	r3, r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	440b      	add	r3, r1
 80055ba:	334d      	adds	r3, #77	@ 0x4d
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	f040 8093 	bne.w	80056ea <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80055c4:	78fa      	ldrb	r2, [r7, #3]
 80055c6:	6879      	ldr	r1, [r7, #4]
 80055c8:	4613      	mov	r3, r2
 80055ca:	011b      	lsls	r3, r3, #4
 80055cc:	1a9b      	subs	r3, r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	440b      	add	r3, r1
 80055d2:	334d      	adds	r3, #77	@ 0x4d
 80055d4:	2202      	movs	r2, #2
 80055d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80055d8:	78fa      	ldrb	r2, [r7, #3]
 80055da:	6879      	ldr	r1, [r7, #4]
 80055dc:	4613      	mov	r3, r2
 80055de:	011b      	lsls	r3, r3, #4
 80055e0:	1a9b      	subs	r3, r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	440b      	add	r3, r1
 80055e6:	334c      	adds	r3, #76	@ 0x4c
 80055e8:	2201      	movs	r2, #1
 80055ea:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80055ec:	78fa      	ldrb	r2, [r7, #3]
 80055ee:	6879      	ldr	r1, [r7, #4]
 80055f0:	4613      	mov	r3, r2
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	1a9b      	subs	r3, r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	440b      	add	r3, r1
 80055fa:	3326      	adds	r3, #38	@ 0x26
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d00b      	beq.n	800561a <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005602:	78fa      	ldrb	r2, [r7, #3]
 8005604:	6879      	ldr	r1, [r7, #4]
 8005606:	4613      	mov	r3, r2
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	1a9b      	subs	r3, r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	440b      	add	r3, r1
 8005610:	3326      	adds	r3, #38	@ 0x26
 8005612:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005614:	2b03      	cmp	r3, #3
 8005616:	f040 8190 	bne.w	800593a <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	799b      	ldrb	r3, [r3, #6]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d115      	bne.n	800564e <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005622:	78fa      	ldrb	r2, [r7, #3]
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	4613      	mov	r3, r2
 8005628:	011b      	lsls	r3, r3, #4
 800562a:	1a9b      	subs	r3, r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	440b      	add	r3, r1
 8005630:	333d      	adds	r3, #61	@ 0x3d
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	78fa      	ldrb	r2, [r7, #3]
 8005636:	f083 0301 	eor.w	r3, r3, #1
 800563a:	b2d8      	uxtb	r0, r3
 800563c:	6879      	ldr	r1, [r7, #4]
 800563e:	4613      	mov	r3, r2
 8005640:	011b      	lsls	r3, r3, #4
 8005642:	1a9b      	subs	r3, r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	440b      	add	r3, r1
 8005648:	333d      	adds	r3, #61	@ 0x3d
 800564a:	4602      	mov	r2, r0
 800564c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	799b      	ldrb	r3, [r3, #6]
 8005652:	2b01      	cmp	r3, #1
 8005654:	f040 8171 	bne.w	800593a <HCD_HC_OUT_IRQHandler+0x954>
 8005658:	78fa      	ldrb	r2, [r7, #3]
 800565a:	6879      	ldr	r1, [r7, #4]
 800565c:	4613      	mov	r3, r2
 800565e:	011b      	lsls	r3, r3, #4
 8005660:	1a9b      	subs	r3, r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	440b      	add	r3, r1
 8005666:	3334      	adds	r3, #52	@ 0x34
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 8165 	beq.w	800593a <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005670:	78fa      	ldrb	r2, [r7, #3]
 8005672:	6879      	ldr	r1, [r7, #4]
 8005674:	4613      	mov	r3, r2
 8005676:	011b      	lsls	r3, r3, #4
 8005678:	1a9b      	subs	r3, r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	440b      	add	r3, r1
 800567e:	3334      	adds	r3, #52	@ 0x34
 8005680:	6819      	ldr	r1, [r3, #0]
 8005682:	78fa      	ldrb	r2, [r7, #3]
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	4613      	mov	r3, r2
 8005688:	011b      	lsls	r3, r3, #4
 800568a:	1a9b      	subs	r3, r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4403      	add	r3, r0
 8005690:	3328      	adds	r3, #40	@ 0x28
 8005692:	881b      	ldrh	r3, [r3, #0]
 8005694:	440b      	add	r3, r1
 8005696:	1e59      	subs	r1, r3, #1
 8005698:	78fa      	ldrb	r2, [r7, #3]
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	4613      	mov	r3, r2
 800569e:	011b      	lsls	r3, r3, #4
 80056a0:	1a9b      	subs	r3, r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4403      	add	r3, r0
 80056a6:	3328      	adds	r3, #40	@ 0x28
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80056ae:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f000 813f 	beq.w	800593a <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80056bc:	78fa      	ldrb	r2, [r7, #3]
 80056be:	6879      	ldr	r1, [r7, #4]
 80056c0:	4613      	mov	r3, r2
 80056c2:	011b      	lsls	r3, r3, #4
 80056c4:	1a9b      	subs	r3, r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	440b      	add	r3, r1
 80056ca:	333d      	adds	r3, #61	@ 0x3d
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	78fa      	ldrb	r2, [r7, #3]
 80056d0:	f083 0301 	eor.w	r3, r3, #1
 80056d4:	b2d8      	uxtb	r0, r3
 80056d6:	6879      	ldr	r1, [r7, #4]
 80056d8:	4613      	mov	r3, r2
 80056da:	011b      	lsls	r3, r3, #4
 80056dc:	1a9b      	subs	r3, r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	440b      	add	r3, r1
 80056e2:	333d      	adds	r3, #61	@ 0x3d
 80056e4:	4602      	mov	r2, r0
 80056e6:	701a      	strb	r2, [r3, #0]
 80056e8:	e127      	b.n	800593a <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80056ea:	78fa      	ldrb	r2, [r7, #3]
 80056ec:	6879      	ldr	r1, [r7, #4]
 80056ee:	4613      	mov	r3, r2
 80056f0:	011b      	lsls	r3, r3, #4
 80056f2:	1a9b      	subs	r3, r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	440b      	add	r3, r1
 80056f8:	334d      	adds	r3, #77	@ 0x4d
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	2b03      	cmp	r3, #3
 80056fe:	d120      	bne.n	8005742 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005700:	78fa      	ldrb	r2, [r7, #3]
 8005702:	6879      	ldr	r1, [r7, #4]
 8005704:	4613      	mov	r3, r2
 8005706:	011b      	lsls	r3, r3, #4
 8005708:	1a9b      	subs	r3, r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	440b      	add	r3, r1
 800570e:	334d      	adds	r3, #77	@ 0x4d
 8005710:	2202      	movs	r2, #2
 8005712:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005714:	78fa      	ldrb	r2, [r7, #3]
 8005716:	6879      	ldr	r1, [r7, #4]
 8005718:	4613      	mov	r3, r2
 800571a:	011b      	lsls	r3, r3, #4
 800571c:	1a9b      	subs	r3, r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	440b      	add	r3, r1
 8005722:	331b      	adds	r3, #27
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	2b01      	cmp	r3, #1
 8005728:	f040 8107 	bne.w	800593a <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800572c:	78fa      	ldrb	r2, [r7, #3]
 800572e:	6879      	ldr	r1, [r7, #4]
 8005730:	4613      	mov	r3, r2
 8005732:	011b      	lsls	r3, r3, #4
 8005734:	1a9b      	subs	r3, r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	440b      	add	r3, r1
 800573a:	334c      	adds	r3, #76	@ 0x4c
 800573c:	2202      	movs	r2, #2
 800573e:	701a      	strb	r2, [r3, #0]
 8005740:	e0fb      	b.n	800593a <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005742:	78fa      	ldrb	r2, [r7, #3]
 8005744:	6879      	ldr	r1, [r7, #4]
 8005746:	4613      	mov	r3, r2
 8005748:	011b      	lsls	r3, r3, #4
 800574a:	1a9b      	subs	r3, r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	440b      	add	r3, r1
 8005750:	334d      	adds	r3, #77	@ 0x4d
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	2b04      	cmp	r3, #4
 8005756:	d13a      	bne.n	80057ce <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005758:	78fa      	ldrb	r2, [r7, #3]
 800575a:	6879      	ldr	r1, [r7, #4]
 800575c:	4613      	mov	r3, r2
 800575e:	011b      	lsls	r3, r3, #4
 8005760:	1a9b      	subs	r3, r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	440b      	add	r3, r1
 8005766:	334d      	adds	r3, #77	@ 0x4d
 8005768:	2202      	movs	r2, #2
 800576a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800576c:	78fa      	ldrb	r2, [r7, #3]
 800576e:	6879      	ldr	r1, [r7, #4]
 8005770:	4613      	mov	r3, r2
 8005772:	011b      	lsls	r3, r3, #4
 8005774:	1a9b      	subs	r3, r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	440b      	add	r3, r1
 800577a:	334c      	adds	r3, #76	@ 0x4c
 800577c:	2202      	movs	r2, #2
 800577e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005780:	78fa      	ldrb	r2, [r7, #3]
 8005782:	6879      	ldr	r1, [r7, #4]
 8005784:	4613      	mov	r3, r2
 8005786:	011b      	lsls	r3, r3, #4
 8005788:	1a9b      	subs	r3, r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	440b      	add	r3, r1
 800578e:	331b      	adds	r3, #27
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	2b01      	cmp	r3, #1
 8005794:	f040 80d1 	bne.w	800593a <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005798:	78fa      	ldrb	r2, [r7, #3]
 800579a:	6879      	ldr	r1, [r7, #4]
 800579c:	4613      	mov	r3, r2
 800579e:	011b      	lsls	r3, r3, #4
 80057a0:	1a9b      	subs	r3, r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	440b      	add	r3, r1
 80057a6:	331b      	adds	r3, #27
 80057a8:	2200      	movs	r2, #0
 80057aa:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80057ac:	78fb      	ldrb	r3, [r7, #3]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	78fa      	ldrb	r2, [r7, #3]
 80057bc:	0151      	lsls	r1, r2, #5
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	440a      	add	r2, r1
 80057c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057ca:	6053      	str	r3, [r2, #4]
 80057cc:	e0b5      	b.n	800593a <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80057ce:	78fa      	ldrb	r2, [r7, #3]
 80057d0:	6879      	ldr	r1, [r7, #4]
 80057d2:	4613      	mov	r3, r2
 80057d4:	011b      	lsls	r3, r3, #4
 80057d6:	1a9b      	subs	r3, r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	440b      	add	r3, r1
 80057dc:	334d      	adds	r3, #77	@ 0x4d
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	2b05      	cmp	r3, #5
 80057e2:	d114      	bne.n	800580e <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80057e4:	78fa      	ldrb	r2, [r7, #3]
 80057e6:	6879      	ldr	r1, [r7, #4]
 80057e8:	4613      	mov	r3, r2
 80057ea:	011b      	lsls	r3, r3, #4
 80057ec:	1a9b      	subs	r3, r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	440b      	add	r3, r1
 80057f2:	334d      	adds	r3, #77	@ 0x4d
 80057f4:	2202      	movs	r2, #2
 80057f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80057f8:	78fa      	ldrb	r2, [r7, #3]
 80057fa:	6879      	ldr	r1, [r7, #4]
 80057fc:	4613      	mov	r3, r2
 80057fe:	011b      	lsls	r3, r3, #4
 8005800:	1a9b      	subs	r3, r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	440b      	add	r3, r1
 8005806:	334c      	adds	r3, #76	@ 0x4c
 8005808:	2202      	movs	r2, #2
 800580a:	701a      	strb	r2, [r3, #0]
 800580c:	e095      	b.n	800593a <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800580e:	78fa      	ldrb	r2, [r7, #3]
 8005810:	6879      	ldr	r1, [r7, #4]
 8005812:	4613      	mov	r3, r2
 8005814:	011b      	lsls	r3, r3, #4
 8005816:	1a9b      	subs	r3, r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	440b      	add	r3, r1
 800581c:	334d      	adds	r3, #77	@ 0x4d
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	2b06      	cmp	r3, #6
 8005822:	d114      	bne.n	800584e <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005824:	78fa      	ldrb	r2, [r7, #3]
 8005826:	6879      	ldr	r1, [r7, #4]
 8005828:	4613      	mov	r3, r2
 800582a:	011b      	lsls	r3, r3, #4
 800582c:	1a9b      	subs	r3, r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	440b      	add	r3, r1
 8005832:	334d      	adds	r3, #77	@ 0x4d
 8005834:	2202      	movs	r2, #2
 8005836:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8005838:	78fa      	ldrb	r2, [r7, #3]
 800583a:	6879      	ldr	r1, [r7, #4]
 800583c:	4613      	mov	r3, r2
 800583e:	011b      	lsls	r3, r3, #4
 8005840:	1a9b      	subs	r3, r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	440b      	add	r3, r1
 8005846:	334c      	adds	r3, #76	@ 0x4c
 8005848:	2205      	movs	r2, #5
 800584a:	701a      	strb	r2, [r3, #0]
 800584c:	e075      	b.n	800593a <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800584e:	78fa      	ldrb	r2, [r7, #3]
 8005850:	6879      	ldr	r1, [r7, #4]
 8005852:	4613      	mov	r3, r2
 8005854:	011b      	lsls	r3, r3, #4
 8005856:	1a9b      	subs	r3, r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	440b      	add	r3, r1
 800585c:	334d      	adds	r3, #77	@ 0x4d
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b07      	cmp	r3, #7
 8005862:	d00a      	beq.n	800587a <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005864:	78fa      	ldrb	r2, [r7, #3]
 8005866:	6879      	ldr	r1, [r7, #4]
 8005868:	4613      	mov	r3, r2
 800586a:	011b      	lsls	r3, r3, #4
 800586c:	1a9b      	subs	r3, r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	440b      	add	r3, r1
 8005872:	334d      	adds	r3, #77	@ 0x4d
 8005874:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005876:	2b09      	cmp	r3, #9
 8005878:	d170      	bne.n	800595c <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800587a:	78fa      	ldrb	r2, [r7, #3]
 800587c:	6879      	ldr	r1, [r7, #4]
 800587e:	4613      	mov	r3, r2
 8005880:	011b      	lsls	r3, r3, #4
 8005882:	1a9b      	subs	r3, r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	440b      	add	r3, r1
 8005888:	334d      	adds	r3, #77	@ 0x4d
 800588a:	2202      	movs	r2, #2
 800588c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800588e:	78fa      	ldrb	r2, [r7, #3]
 8005890:	6879      	ldr	r1, [r7, #4]
 8005892:	4613      	mov	r3, r2
 8005894:	011b      	lsls	r3, r3, #4
 8005896:	1a9b      	subs	r3, r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	440b      	add	r3, r1
 800589c:	3344      	adds	r3, #68	@ 0x44
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	1c59      	adds	r1, r3, #1
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	4613      	mov	r3, r2
 80058a6:	011b      	lsls	r3, r3, #4
 80058a8:	1a9b      	subs	r3, r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4403      	add	r3, r0
 80058ae:	3344      	adds	r3, #68	@ 0x44
 80058b0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80058b2:	78fa      	ldrb	r2, [r7, #3]
 80058b4:	6879      	ldr	r1, [r7, #4]
 80058b6:	4613      	mov	r3, r2
 80058b8:	011b      	lsls	r3, r3, #4
 80058ba:	1a9b      	subs	r3, r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	440b      	add	r3, r1
 80058c0:	3344      	adds	r3, #68	@ 0x44
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d914      	bls.n	80058f2 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80058c8:	78fa      	ldrb	r2, [r7, #3]
 80058ca:	6879      	ldr	r1, [r7, #4]
 80058cc:	4613      	mov	r3, r2
 80058ce:	011b      	lsls	r3, r3, #4
 80058d0:	1a9b      	subs	r3, r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	440b      	add	r3, r1
 80058d6:	3344      	adds	r3, #68	@ 0x44
 80058d8:	2200      	movs	r2, #0
 80058da:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80058dc:	78fa      	ldrb	r2, [r7, #3]
 80058de:	6879      	ldr	r1, [r7, #4]
 80058e0:	4613      	mov	r3, r2
 80058e2:	011b      	lsls	r3, r3, #4
 80058e4:	1a9b      	subs	r3, r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	440b      	add	r3, r1
 80058ea:	334c      	adds	r3, #76	@ 0x4c
 80058ec:	2204      	movs	r2, #4
 80058ee:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80058f0:	e022      	b.n	8005938 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80058f2:	78fa      	ldrb	r2, [r7, #3]
 80058f4:	6879      	ldr	r1, [r7, #4]
 80058f6:	4613      	mov	r3, r2
 80058f8:	011b      	lsls	r3, r3, #4
 80058fa:	1a9b      	subs	r3, r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	440b      	add	r3, r1
 8005900:	334c      	adds	r3, #76	@ 0x4c
 8005902:	2202      	movs	r2, #2
 8005904:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005906:	78fb      	ldrb	r3, [r7, #3]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	4413      	add	r3, r2
 800590e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800591c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005924:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005926:	78fb      	ldrb	r3, [r7, #3]
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	4413      	add	r3, r2
 800592e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005932:	461a      	mov	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005938:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800593a:	78fa      	ldrb	r2, [r7, #3]
 800593c:	6879      	ldr	r1, [r7, #4]
 800593e:	4613      	mov	r3, r2
 8005940:	011b      	lsls	r3, r3, #4
 8005942:	1a9b      	subs	r3, r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	440b      	add	r3, r1
 8005948:	334c      	adds	r3, #76	@ 0x4c
 800594a:	781a      	ldrb	r2, [r3, #0]
 800594c:	78fb      	ldrb	r3, [r7, #3]
 800594e:	4619      	mov	r1, r3
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f005 fa17 	bl	800ad84 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005956:	e002      	b.n	800595e <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005958:	bf00      	nop
 800595a:	e000      	b.n	800595e <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800595c:	bf00      	nop
  }
}
 800595e:	3718      	adds	r7, #24
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b08a      	sub	sp, #40	@ 0x28
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005974:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6a1b      	ldr	r3, [r3, #32]
 800597c:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	f003 030f 	and.w	r3, r3, #15
 8005984:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	0c5b      	lsrs	r3, r3, #17
 800598a:	f003 030f 	and.w	r3, r3, #15
 800598e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	091b      	lsrs	r3, r3, #4
 8005994:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005998:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	2b02      	cmp	r3, #2
 800599e:	d004      	beq.n	80059aa <HCD_RXQLVL_IRQHandler+0x46>
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	2b05      	cmp	r3, #5
 80059a4:	f000 80b6 	beq.w	8005b14 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80059a8:	e0b7      	b.n	8005b1a <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f000 80b3 	beq.w	8005b18 <HCD_RXQLVL_IRQHandler+0x1b4>
 80059b2:	6879      	ldr	r1, [r7, #4]
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	4613      	mov	r3, r2
 80059b8:	011b      	lsls	r3, r3, #4
 80059ba:	1a9b      	subs	r3, r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	440b      	add	r3, r1
 80059c0:	332c      	adds	r3, #44	@ 0x2c
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 80a7 	beq.w	8005b18 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80059ca:	6879      	ldr	r1, [r7, #4]
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	4613      	mov	r3, r2
 80059d0:	011b      	lsls	r3, r3, #4
 80059d2:	1a9b      	subs	r3, r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	440b      	add	r3, r1
 80059d8:	3338      	adds	r3, #56	@ 0x38
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	18d1      	adds	r1, r2, r3
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	69ba      	ldr	r2, [r7, #24]
 80059e4:	4613      	mov	r3, r2
 80059e6:	011b      	lsls	r3, r3, #4
 80059e8:	1a9b      	subs	r3, r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	4403      	add	r3, r0
 80059ee:	3334      	adds	r3, #52	@ 0x34
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4299      	cmp	r1, r3
 80059f4:	f200 8083 	bhi.w	8005afe <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6818      	ldr	r0, [r3, #0]
 80059fc:	6879      	ldr	r1, [r7, #4]
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	4613      	mov	r3, r2
 8005a02:	011b      	lsls	r3, r3, #4
 8005a04:	1a9b      	subs	r3, r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	440b      	add	r3, r1
 8005a0a:	332c      	adds	r3, #44	@ 0x2c
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	b292      	uxth	r2, r2
 8005a12:	4619      	mov	r1, r3
 8005a14:	f003 fdc2 	bl	800959c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8005a18:	6879      	ldr	r1, [r7, #4]
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	011b      	lsls	r3, r3, #4
 8005a20:	1a9b      	subs	r3, r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	440b      	add	r3, r1
 8005a26:	332c      	adds	r3, #44	@ 0x2c
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	18d1      	adds	r1, r2, r3
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	4613      	mov	r3, r2
 8005a34:	011b      	lsls	r3, r3, #4
 8005a36:	1a9b      	subs	r3, r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4403      	add	r3, r0
 8005a3c:	332c      	adds	r3, #44	@ 0x2c
 8005a3e:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005a40:	6879      	ldr	r1, [r7, #4]
 8005a42:	69ba      	ldr	r2, [r7, #24]
 8005a44:	4613      	mov	r3, r2
 8005a46:	011b      	lsls	r3, r3, #4
 8005a48:	1a9b      	subs	r3, r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	440b      	add	r3, r1
 8005a4e:	3338      	adds	r3, #56	@ 0x38
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	18d1      	adds	r1, r2, r3
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	011b      	lsls	r3, r3, #4
 8005a5e:	1a9b      	subs	r3, r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4403      	add	r3, r0
 8005a64:	3338      	adds	r3, #56	@ 0x38
 8005a66:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	015a      	lsls	r2, r3, #5
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	4413      	add	r3, r2
 8005a70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	0cdb      	lsrs	r3, r3, #19
 8005a78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a7c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005a7e:	6879      	ldr	r1, [r7, #4]
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	4613      	mov	r3, r2
 8005a84:	011b      	lsls	r3, r3, #4
 8005a86:	1a9b      	subs	r3, r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	440b      	add	r3, r1
 8005a8c:	3328      	adds	r3, #40	@ 0x28
 8005a8e:	881b      	ldrh	r3, [r3, #0]
 8005a90:	461a      	mov	r2, r3
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d13f      	bne.n	8005b18 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d03c      	beq.n	8005b18 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	015a      	lsls	r2, r3, #5
 8005aa2:	6a3b      	ldr	r3, [r7, #32]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005ab4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005abc:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aca:	461a      	mov	r2, r3
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005ad0:	6879      	ldr	r1, [r7, #4]
 8005ad2:	69ba      	ldr	r2, [r7, #24]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	011b      	lsls	r3, r3, #4
 8005ad8:	1a9b      	subs	r3, r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	440b      	add	r3, r1
 8005ade:	333c      	adds	r3, #60	@ 0x3c
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	f083 0301 	eor.w	r3, r3, #1
 8005ae6:	b2d8      	uxtb	r0, r3
 8005ae8:	6879      	ldr	r1, [r7, #4]
 8005aea:	69ba      	ldr	r2, [r7, #24]
 8005aec:	4613      	mov	r3, r2
 8005aee:	011b      	lsls	r3, r3, #4
 8005af0:	1a9b      	subs	r3, r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	440b      	add	r3, r1
 8005af6:	333c      	adds	r3, #60	@ 0x3c
 8005af8:	4602      	mov	r2, r0
 8005afa:	701a      	strb	r2, [r3, #0]
      break;
 8005afc:	e00c      	b.n	8005b18 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005afe:	6879      	ldr	r1, [r7, #4]
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	4613      	mov	r3, r2
 8005b04:	011b      	lsls	r3, r3, #4
 8005b06:	1a9b      	subs	r3, r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	440b      	add	r3, r1
 8005b0c:	334c      	adds	r3, #76	@ 0x4c
 8005b0e:	2204      	movs	r2, #4
 8005b10:	701a      	strb	r2, [r3, #0]
      break;
 8005b12:	e001      	b.n	8005b18 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8005b14:	bf00      	nop
 8005b16:	e000      	b.n	8005b1a <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005b18:	bf00      	nop
  }
}
 8005b1a:	bf00      	nop
 8005b1c:	3728      	adds	r7, #40	@ 0x28
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b086      	sub	sp, #24
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005b4e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f003 0302 	and.w	r3, r3, #2
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d10b      	bne.n	8005b72 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f003 0301 	and.w	r3, r3, #1
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d102      	bne.n	8005b6a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f005 f8f1 	bl	800ad4c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	f043 0302 	orr.w	r3, r3, #2
 8005b70:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f003 0308 	and.w	r3, r3, #8
 8005b78:	2b08      	cmp	r3, #8
 8005b7a:	d132      	bne.n	8005be2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f043 0308 	orr.w	r3, r3, #8
 8005b82:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f003 0304 	and.w	r3, r3, #4
 8005b8a:	2b04      	cmp	r3, #4
 8005b8c:	d126      	bne.n	8005bdc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	7a5b      	ldrb	r3, [r3, #9]
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d113      	bne.n	8005bbe <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005b9c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005ba0:	d106      	bne.n	8005bb0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2102      	movs	r1, #2
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f003 fd91 	bl	80096d0 <USB_InitFSLSPClkSel>
 8005bae:	e011      	b.n	8005bd4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2101      	movs	r1, #1
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f003 fd8a 	bl	80096d0 <USB_InitFSLSPClkSel>
 8005bbc:	e00a      	b.n	8005bd4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	79db      	ldrb	r3, [r3, #7]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d106      	bne.n	8005bd4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bcc:	461a      	mov	r2, r3
 8005bce:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005bd2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f005 f8e7 	bl	800ada8 <HAL_HCD_PortEnabled_Callback>
 8005bda:	e002      	b.n	8005be2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f005 f8f1 	bl	800adc4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f003 0320 	and.w	r3, r3, #32
 8005be8:	2b20      	cmp	r3, #32
 8005bea:	d103      	bne.n	8005bf4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	f043 0320 	orr.w	r3, r3, #32
 8005bf2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	6013      	str	r3, [r2, #0]
}
 8005c00:	bf00      	nop
 8005c02:	3718      	adds	r7, #24
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e12b      	b.n	8005e72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d106      	bne.n	8005c34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7fb ff3c 	bl	8001aac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2224      	movs	r2, #36	@ 0x24
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 0201 	bic.w	r2, r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c6c:	f001 f964 	bl	8006f38 <HAL_RCC_GetPCLK1Freq>
 8005c70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	4a81      	ldr	r2, [pc, #516]	@ (8005e7c <HAL_I2C_Init+0x274>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d807      	bhi.n	8005c8c <HAL_I2C_Init+0x84>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	4a80      	ldr	r2, [pc, #512]	@ (8005e80 <HAL_I2C_Init+0x278>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	bf94      	ite	ls
 8005c84:	2301      	movls	r3, #1
 8005c86:	2300      	movhi	r3, #0
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	e006      	b.n	8005c9a <HAL_I2C_Init+0x92>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4a7d      	ldr	r2, [pc, #500]	@ (8005e84 <HAL_I2C_Init+0x27c>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	bf94      	ite	ls
 8005c94:	2301      	movls	r3, #1
 8005c96:	2300      	movhi	r3, #0
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e0e7      	b.n	8005e72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	4a78      	ldr	r2, [pc, #480]	@ (8005e88 <HAL_I2C_Init+0x280>)
 8005ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8005caa:	0c9b      	lsrs	r3, r3, #18
 8005cac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
 8005cc8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	4a6a      	ldr	r2, [pc, #424]	@ (8005e7c <HAL_I2C_Init+0x274>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d802      	bhi.n	8005cdc <HAL_I2C_Init+0xd4>
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	e009      	b.n	8005cf0 <HAL_I2C_Init+0xe8>
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005ce2:	fb02 f303 	mul.w	r3, r2, r3
 8005ce6:	4a69      	ldr	r2, [pc, #420]	@ (8005e8c <HAL_I2C_Init+0x284>)
 8005ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cec:	099b      	lsrs	r3, r3, #6
 8005cee:	3301      	adds	r3, #1
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	6812      	ldr	r2, [r2, #0]
 8005cf4:	430b      	orrs	r3, r1
 8005cf6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005d02:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	495c      	ldr	r1, [pc, #368]	@ (8005e7c <HAL_I2C_Init+0x274>)
 8005d0c:	428b      	cmp	r3, r1
 8005d0e:	d819      	bhi.n	8005d44 <HAL_I2C_Init+0x13c>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	1e59      	subs	r1, r3, #1
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	005b      	lsls	r3, r3, #1
 8005d1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d1e:	1c59      	adds	r1, r3, #1
 8005d20:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005d24:	400b      	ands	r3, r1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00a      	beq.n	8005d40 <HAL_I2C_Init+0x138>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	1e59      	subs	r1, r3, #1
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d38:	3301      	adds	r3, #1
 8005d3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d3e:	e051      	b.n	8005de4 <HAL_I2C_Init+0x1dc>
 8005d40:	2304      	movs	r3, #4
 8005d42:	e04f      	b.n	8005de4 <HAL_I2C_Init+0x1dc>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d111      	bne.n	8005d70 <HAL_I2C_Init+0x168>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	1e58      	subs	r0, r3, #1
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6859      	ldr	r1, [r3, #4]
 8005d54:	460b      	mov	r3, r1
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	440b      	add	r3, r1
 8005d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d5e:	3301      	adds	r3, #1
 8005d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	bf0c      	ite	eq
 8005d68:	2301      	moveq	r3, #1
 8005d6a:	2300      	movne	r3, #0
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	e012      	b.n	8005d96 <HAL_I2C_Init+0x18e>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	1e58      	subs	r0, r3, #1
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6859      	ldr	r1, [r3, #4]
 8005d78:	460b      	mov	r3, r1
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	440b      	add	r3, r1
 8005d7e:	0099      	lsls	r1, r3, #2
 8005d80:	440b      	add	r3, r1
 8005d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d86:	3301      	adds	r3, #1
 8005d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	bf0c      	ite	eq
 8005d90:	2301      	moveq	r3, #1
 8005d92:	2300      	movne	r3, #0
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d001      	beq.n	8005d9e <HAL_I2C_Init+0x196>
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e022      	b.n	8005de4 <HAL_I2C_Init+0x1dc>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10e      	bne.n	8005dc4 <HAL_I2C_Init+0x1bc>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	1e58      	subs	r0, r3, #1
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6859      	ldr	r1, [r3, #4]
 8005dae:	460b      	mov	r3, r1
 8005db0:	005b      	lsls	r3, r3, #1
 8005db2:	440b      	add	r3, r1
 8005db4:	fbb0 f3f3 	udiv	r3, r0, r3
 8005db8:	3301      	adds	r3, #1
 8005dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dc2:	e00f      	b.n	8005de4 <HAL_I2C_Init+0x1dc>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	1e58      	subs	r0, r3, #1
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6859      	ldr	r1, [r3, #4]
 8005dcc:	460b      	mov	r3, r1
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	440b      	add	r3, r1
 8005dd2:	0099      	lsls	r1, r3, #2
 8005dd4:	440b      	add	r3, r1
 8005dd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dda:	3301      	adds	r3, #1
 8005ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005de0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005de4:	6879      	ldr	r1, [r7, #4]
 8005de6:	6809      	ldr	r1, [r1, #0]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	69da      	ldr	r2, [r3, #28]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	430a      	orrs	r2, r1
 8005e06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005e12:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	6911      	ldr	r1, [r2, #16]
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	68d2      	ldr	r2, [r2, #12]
 8005e1e:	4311      	orrs	r1, r2
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	6812      	ldr	r2, [r2, #0]
 8005e24:	430b      	orrs	r3, r1
 8005e26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	695a      	ldr	r2, [r3, #20]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	431a      	orrs	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	430a      	orrs	r2, r1
 8005e42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f042 0201 	orr.w	r2, r2, #1
 8005e52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	000186a0 	.word	0x000186a0
 8005e80:	001e847f 	.word	0x001e847f
 8005e84:	003d08ff 	.word	0x003d08ff
 8005e88:	431bde83 	.word	0x431bde83
 8005e8c:	10624dd3 	.word	0x10624dd3

08005e90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b20      	cmp	r3, #32
 8005ea4:	d129      	bne.n	8005efa <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2224      	movs	r2, #36	@ 0x24
 8005eaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 0201 	bic.w	r2, r2, #1
 8005ebc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f022 0210 	bic.w	r2, r2, #16
 8005ecc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f042 0201 	orr.w	r2, r2, #1
 8005eec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	e000      	b.n	8005efc <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005efa:	2302      	movs	r3, #2
  }
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005f12:	2300      	movs	r3, #0
 8005f14:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b20      	cmp	r3, #32
 8005f20:	d12a      	bne.n	8005f78 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2224      	movs	r2, #36	@ 0x24
 8005f26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 0201 	bic.w	r2, r2, #1
 8005f38:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f40:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005f42:	89fb      	ldrh	r3, [r7, #14]
 8005f44:	f023 030f 	bic.w	r3, r3, #15
 8005f48:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	89fb      	ldrh	r3, [r7, #14]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	89fa      	ldrh	r2, [r7, #14]
 8005f5a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f042 0201 	orr.w	r2, r2, #1
 8005f6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005f74:	2300      	movs	r3, #0
 8005f76:	e000      	b.n	8005f7a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005f78:	2302      	movs	r3, #2
  }
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
	...

08005f88 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e0bf      	b.n	800611a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d106      	bne.n	8005fb4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f7fc f9d8 	bl	8002364 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	699a      	ldr	r2, [r3, #24]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005fca:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6999      	ldr	r1, [r3, #24]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005fe0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	430a      	orrs	r2, r1
 8005fee:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6899      	ldr	r1, [r3, #8]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	4b4a      	ldr	r3, [pc, #296]	@ (8006124 <HAL_LTDC_Init+0x19c>)
 8005ffc:	400b      	ands	r3, r1
 8005ffe:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	695b      	ldr	r3, [r3, #20]
 8006004:	041b      	lsls	r3, r3, #16
 8006006:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6899      	ldr	r1, [r3, #8]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	699a      	ldr	r2, [r3, #24]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	431a      	orrs	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	430a      	orrs	r2, r1
 800601c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68d9      	ldr	r1, [r3, #12]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	4b3e      	ldr	r3, [pc, #248]	@ (8006124 <HAL_LTDC_Init+0x19c>)
 800602a:	400b      	ands	r3, r1
 800602c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	041b      	lsls	r3, r3, #16
 8006034:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68d9      	ldr	r1, [r3, #12]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a1a      	ldr	r2, [r3, #32]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	431a      	orrs	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	430a      	orrs	r2, r1
 800604a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6919      	ldr	r1, [r3, #16]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	4b33      	ldr	r3, [pc, #204]	@ (8006124 <HAL_LTDC_Init+0x19c>)
 8006058:	400b      	ands	r3, r1
 800605a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006060:	041b      	lsls	r3, r3, #16
 8006062:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6919      	ldr	r1, [r3, #16]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	431a      	orrs	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	430a      	orrs	r2, r1
 8006078:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6959      	ldr	r1, [r3, #20]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	4b27      	ldr	r3, [pc, #156]	@ (8006124 <HAL_LTDC_Init+0x19c>)
 8006086:	400b      	ands	r3, r1
 8006088:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800608e:	041b      	lsls	r3, r3, #16
 8006090:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6959      	ldr	r1, [r3, #20]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	431a      	orrs	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	430a      	orrs	r2, r1
 80060a6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80060ae:	021b      	lsls	r3, r3, #8
 80060b0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80060b8:	041b      	lsls	r3, r3, #16
 80060ba:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80060ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80060de:	431a      	orrs	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	430a      	orrs	r2, r1
 80060e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f042 0206 	orr.w	r2, r2, #6
 80060f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	699a      	ldr	r2, [r3, #24]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f042 0201 	orr.w	r2, r2, #1
 8006106:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	f000f800 	.word	0xf000f800

08006128 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006136:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800613e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f003 0304 	and.w	r3, r3, #4
 8006146:	2b00      	cmp	r3, #0
 8006148:	d023      	beq.n	8006192 <HAL_LTDC_IRQHandler+0x6a>
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	f003 0304 	and.w	r3, r3, #4
 8006150:	2b00      	cmp	r3, #0
 8006152:	d01e      	beq.n	8006192 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f022 0204 	bic.w	r2, r2, #4
 8006162:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2204      	movs	r2, #4
 800616a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006172:	f043 0201 	orr.w	r2, r3, #1
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2204      	movs	r2, #4
 8006180:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 f86f 	bl	8006270 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f003 0302 	and.w	r3, r3, #2
 8006198:	2b00      	cmp	r3, #0
 800619a:	d023      	beq.n	80061e4 <HAL_LTDC_IRQHandler+0xbc>
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d01e      	beq.n	80061e4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 0202 	bic.w	r2, r2, #2
 80061b4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2202      	movs	r2, #2
 80061bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80061c4:	f043 0202 	orr.w	r2, r3, #2
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2204      	movs	r2, #4
 80061d2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f846 	bl	8006270 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d01b      	beq.n	8006226 <HAL_LTDC_IRQHandler+0xfe>
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	f003 0301 	and.w	r3, r3, #1
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d016      	beq.n	8006226 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f022 0201 	bic.w	r2, r2, #1
 8006206:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2201      	movs	r2, #1
 800620e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f82f 	bl	8006284 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f003 0308 	and.w	r3, r3, #8
 800622c:	2b00      	cmp	r3, #0
 800622e:	d01b      	beq.n	8006268 <HAL_LTDC_IRQHandler+0x140>
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	f003 0308 	and.w	r3, r3, #8
 8006236:	2b00      	cmp	r3, #0
 8006238:	d016      	beq.n	8006268 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f022 0208 	bic.w	r2, r2, #8
 8006248:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2208      	movs	r2, #8
 8006250:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f818 	bl	8006298 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006268:	bf00      	nop
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80062ac:	b5b0      	push	{r4, r5, r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d101      	bne.n	80062c6 <HAL_LTDC_ConfigLayer+0x1a>
 80062c2:	2302      	movs	r3, #2
 80062c4:	e02c      	b.n	8006320 <HAL_LTDC_ConfigLayer+0x74>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2202      	movs	r2, #2
 80062d2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2134      	movs	r1, #52	@ 0x34
 80062dc:	fb01 f303 	mul.w	r3, r1, r3
 80062e0:	4413      	add	r3, r2
 80062e2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	4614      	mov	r4, r2
 80062ea:	461d      	mov	r5, r3
 80062ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062f8:	682b      	ldr	r3, [r5, #0]
 80062fa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	68b9      	ldr	r1, [r7, #8]
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 f811 	bl	8006328 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2201      	movs	r2, #1
 800630c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bdb0      	pop	{r4, r5, r7, pc}

08006328 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006328:	b480      	push	{r7}
 800632a:	b089      	sub	sp, #36	@ 0x24
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	0c1b      	lsrs	r3, r3, #16
 8006340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006344:	4413      	add	r3, r2
 8006346:	041b      	lsls	r3, r3, #16
 8006348:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	461a      	mov	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	01db      	lsls	r3, r3, #7
 8006354:	4413      	add	r3, r2
 8006356:	3384      	adds	r3, #132	@ 0x84
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	6812      	ldr	r2, [r2, #0]
 800635e:	4611      	mov	r1, r2
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	01d2      	lsls	r2, r2, #7
 8006364:	440a      	add	r2, r1
 8006366:	3284      	adds	r2, #132	@ 0x84
 8006368:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800636c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	0c1b      	lsrs	r3, r3, #16
 800637a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800637e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006380:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4619      	mov	r1, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	01db      	lsls	r3, r3, #7
 800638c:	440b      	add	r3, r1
 800638e:	3384      	adds	r3, #132	@ 0x84
 8006390:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006396:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	68da      	ldr	r2, [r3, #12]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063a6:	4413      	add	r3, r2
 80063a8:	041b      	lsls	r3, r3, #16
 80063aa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	461a      	mov	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	01db      	lsls	r3, r3, #7
 80063b6:	4413      	add	r3, r2
 80063b8:	3384      	adds	r3, #132	@ 0x84
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	6812      	ldr	r2, [r2, #0]
 80063c0:	4611      	mov	r1, r2
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	01d2      	lsls	r2, r2, #7
 80063c6:	440a      	add	r2, r1
 80063c8:	3284      	adds	r2, #132	@ 0x84
 80063ca:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80063ce:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	689a      	ldr	r2, [r3, #8]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063de:	4413      	add	r3, r2
 80063e0:	1c5a      	adds	r2, r3, #1
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4619      	mov	r1, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	01db      	lsls	r3, r3, #7
 80063ec:	440b      	add	r3, r1
 80063ee:	3384      	adds	r3, #132	@ 0x84
 80063f0:	4619      	mov	r1, r3
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	461a      	mov	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	01db      	lsls	r3, r3, #7
 8006402:	4413      	add	r3, r2
 8006404:	3384      	adds	r3, #132	@ 0x84
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	6812      	ldr	r2, [r2, #0]
 800640c:	4611      	mov	r1, r2
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	01d2      	lsls	r2, r2, #7
 8006412:	440a      	add	r2, r1
 8006414:	3284      	adds	r2, #132	@ 0x84
 8006416:	f023 0307 	bic.w	r3, r3, #7
 800641a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	461a      	mov	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	01db      	lsls	r3, r3, #7
 8006426:	4413      	add	r3, r2
 8006428:	3384      	adds	r3, #132	@ 0x84
 800642a:	461a      	mov	r2, r3
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006438:	021b      	lsls	r3, r3, #8
 800643a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006442:	041b      	lsls	r3, r3, #16
 8006444:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	061b      	lsls	r3, r3, #24
 800644c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	461a      	mov	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	01db      	lsls	r3, r3, #7
 8006458:	4413      	add	r3, r2
 800645a:	3384      	adds	r3, #132	@ 0x84
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	461a      	mov	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	01db      	lsls	r3, r3, #7
 8006468:	4413      	add	r3, r2
 800646a:	3384      	adds	r3, #132	@ 0x84
 800646c:	461a      	mov	r2, r3
 800646e:	2300      	movs	r3, #0
 8006470:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006478:	461a      	mov	r2, r3
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	431a      	orrs	r2, r3
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	431a      	orrs	r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4619      	mov	r1, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	01db      	lsls	r3, r3, #7
 800648c:	440b      	add	r3, r1
 800648e:	3384      	adds	r3, #132	@ 0x84
 8006490:	4619      	mov	r1, r3
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	4313      	orrs	r3, r2
 8006496:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	461a      	mov	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	01db      	lsls	r3, r3, #7
 80064a2:	4413      	add	r3, r2
 80064a4:	3384      	adds	r3, #132	@ 0x84
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	6812      	ldr	r2, [r2, #0]
 80064ac:	4611      	mov	r1, r2
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	01d2      	lsls	r2, r2, #7
 80064b2:	440a      	add	r2, r1
 80064b4:	3284      	adds	r2, #132	@ 0x84
 80064b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80064ba:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	461a      	mov	r2, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	01db      	lsls	r3, r3, #7
 80064c6:	4413      	add	r3, r2
 80064c8:	3384      	adds	r3, #132	@ 0x84
 80064ca:	461a      	mov	r2, r3
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	461a      	mov	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	01db      	lsls	r3, r3, #7
 80064dc:	4413      	add	r3, r2
 80064de:	3384      	adds	r3, #132	@ 0x84
 80064e0:	69db      	ldr	r3, [r3, #28]
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	6812      	ldr	r2, [r2, #0]
 80064e6:	4611      	mov	r1, r2
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	01d2      	lsls	r2, r2, #7
 80064ec:	440a      	add	r2, r1
 80064ee:	3284      	adds	r2, #132	@ 0x84
 80064f0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80064f4:	f023 0307 	bic.w	r3, r3, #7
 80064f8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	69da      	ldr	r2, [r3, #28]
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	68f9      	ldr	r1, [r7, #12]
 8006504:	6809      	ldr	r1, [r1, #0]
 8006506:	4608      	mov	r0, r1
 8006508:	6879      	ldr	r1, [r7, #4]
 800650a:	01c9      	lsls	r1, r1, #7
 800650c:	4401      	add	r1, r0
 800650e:	3184      	adds	r1, #132	@ 0x84
 8006510:	4313      	orrs	r3, r2
 8006512:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	461a      	mov	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	01db      	lsls	r3, r3, #7
 800651e:	4413      	add	r3, r2
 8006520:	3384      	adds	r3, #132	@ 0x84
 8006522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	461a      	mov	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	01db      	lsls	r3, r3, #7
 800652e:	4413      	add	r3, r2
 8006530:	3384      	adds	r3, #132	@ 0x84
 8006532:	461a      	mov	r2, r3
 8006534:	2300      	movs	r3, #0
 8006536:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	461a      	mov	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	01db      	lsls	r3, r3, #7
 8006542:	4413      	add	r3, r2
 8006544:	3384      	adds	r3, #132	@ 0x84
 8006546:	461a      	mov	r2, r3
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800654c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d102      	bne.n	800655c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006556:	2304      	movs	r3, #4
 8006558:	61fb      	str	r3, [r7, #28]
 800655a:	e01b      	b.n	8006594 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d102      	bne.n	800656a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006564:	2303      	movs	r3, #3
 8006566:	61fb      	str	r3, [r7, #28]
 8006568:	e014      	b.n	8006594 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	2b04      	cmp	r3, #4
 8006570:	d00b      	beq.n	800658a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006576:	2b02      	cmp	r3, #2
 8006578:	d007      	beq.n	800658a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800657e:	2b03      	cmp	r3, #3
 8006580:	d003      	beq.n	800658a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006586:	2b07      	cmp	r3, #7
 8006588:	d102      	bne.n	8006590 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800658a:	2302      	movs	r3, #2
 800658c:	61fb      	str	r3, [r7, #28]
 800658e:	e001      	b.n	8006594 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006590:	2301      	movs	r3, #1
 8006592:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	461a      	mov	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	01db      	lsls	r3, r3, #7
 800659e:	4413      	add	r3, r2
 80065a0:	3384      	adds	r3, #132	@ 0x84
 80065a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	6812      	ldr	r2, [r2, #0]
 80065a8:	4611      	mov	r1, r2
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	01d2      	lsls	r2, r2, #7
 80065ae:	440a      	add	r2, r1
 80065b0:	3284      	adds	r2, #132	@ 0x84
 80065b2:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80065b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065bc:	69fa      	ldr	r2, [r7, #28]
 80065be:	fb02 f303 	mul.w	r3, r2, r3
 80065c2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	6859      	ldr	r1, [r3, #4]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	1acb      	subs	r3, r1, r3
 80065ce:	69f9      	ldr	r1, [r7, #28]
 80065d0:	fb01 f303 	mul.w	r3, r1, r3
 80065d4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80065d6:	68f9      	ldr	r1, [r7, #12]
 80065d8:	6809      	ldr	r1, [r1, #0]
 80065da:	4608      	mov	r0, r1
 80065dc:	6879      	ldr	r1, [r7, #4]
 80065de:	01c9      	lsls	r1, r1, #7
 80065e0:	4401      	add	r1, r0
 80065e2:	3184      	adds	r1, #132	@ 0x84
 80065e4:	4313      	orrs	r3, r2
 80065e6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	461a      	mov	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	01db      	lsls	r3, r3, #7
 80065f2:	4413      	add	r3, r2
 80065f4:	3384      	adds	r3, #132	@ 0x84
 80065f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	6812      	ldr	r2, [r2, #0]
 80065fc:	4611      	mov	r1, r2
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	01d2      	lsls	r2, r2, #7
 8006602:	440a      	add	r2, r1
 8006604:	3284      	adds	r2, #132	@ 0x84
 8006606:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800660a:	f023 0307 	bic.w	r3, r3, #7
 800660e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	461a      	mov	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	01db      	lsls	r3, r3, #7
 800661a:	4413      	add	r3, r2
 800661c:	3384      	adds	r3, #132	@ 0x84
 800661e:	461a      	mov	r2, r3
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006624:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	461a      	mov	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	01db      	lsls	r3, r3, #7
 8006630:	4413      	add	r3, r2
 8006632:	3384      	adds	r3, #132	@ 0x84
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	6812      	ldr	r2, [r2, #0]
 800663a:	4611      	mov	r1, r2
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	01d2      	lsls	r2, r2, #7
 8006640:	440a      	add	r2, r1
 8006642:	3284      	adds	r2, #132	@ 0x84
 8006644:	f043 0301 	orr.w	r3, r3, #1
 8006648:	6013      	str	r3, [r2, #0]
}
 800664a:	bf00      	nop
 800664c:	3724      	adds	r7, #36	@ 0x24
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
	...

08006658 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b086      	sub	sp, #24
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d101      	bne.n	800666a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e267      	b.n	8006b3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	2b00      	cmp	r3, #0
 8006674:	d075      	beq.n	8006762 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006676:	4b88      	ldr	r3, [pc, #544]	@ (8006898 <HAL_RCC_OscConfig+0x240>)
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	f003 030c 	and.w	r3, r3, #12
 800667e:	2b04      	cmp	r3, #4
 8006680:	d00c      	beq.n	800669c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006682:	4b85      	ldr	r3, [pc, #532]	@ (8006898 <HAL_RCC_OscConfig+0x240>)
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800668a:	2b08      	cmp	r3, #8
 800668c:	d112      	bne.n	80066b4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800668e:	4b82      	ldr	r3, [pc, #520]	@ (8006898 <HAL_RCC_OscConfig+0x240>)
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006696:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800669a:	d10b      	bne.n	80066b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800669c:	4b7e      	ldr	r3, [pc, #504]	@ (8006898 <HAL_RCC_OscConfig+0x240>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d05b      	beq.n	8006760 <HAL_RCC_OscConfig+0x108>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d157      	bne.n	8006760 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e242      	b.n	8006b3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066bc:	d106      	bne.n	80066cc <HAL_RCC_OscConfig+0x74>
 80066be:	4b76      	ldr	r3, [pc, #472]	@ (8006898 <HAL_RCC_OscConfig+0x240>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a75      	ldr	r2, [pc, #468]	@ (8006898 <HAL_RCC_OscConfig+0x240>)
 80066c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066c8:	6013      	str	r3, [r2, #0]
 80066ca:	e01d      	b.n	8006708 <HAL_RCC_OscConfig+0xb0>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066d4:	d10c      	bne.n	80066f0 <HAL_RCC_OscConfig+0x98>
 80066d6:	4b70      	ldr	r3, [pc, #448]	@ (8006898 <HAL_RCC_OscConfig+0x240>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a6f      	ldr	r2, [pc, #444]	@ (8006898 <HAL_RCC_OscConfig+0x240>)
 80066dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066e0:	6013      	str	r3, [r2, #0]
 80066e2:	4b6d      	ldr	r3, [pc, #436]	@ (8006898 <HAL_RCC_OscConfig+0x240>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a6c      	ldr	r2, [pc, #432]	@ (8006898 <HAL_RCC_OscConfig+0x240>)
 80066e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066ec:	6013      	str	r3, [r2, #0]
 80066ee:	e00b      	b.n	8006708 <HAL_RCC_OscConfig+0xb0>
 80066f0:	4b69      	ldr	r3, [pc, #420]	@ (8006898 <HAL_RCC_OscConfig+0x240>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a68      	ldr	r2, [pc, #416]	@ (8006898 <HAL_RCC_OscConfig+0x240>)
 80066f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066fa:	6013      	str	r3, [r2, #0]
 80066fc:	4b66      	ldr	r3, [pc, #408]	@ (8006898 <HAL_RCC_OscConfig+0x240>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a65      	ldr	r2, [pc, #404]	@ (8006898 <HAL_RCC_OscConfig+0x240>)
 8006702:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d013      	beq.n	8006738 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006710:	f7fc fc84 	bl	800301c <HAL_GetTick>
 8006714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006716:	e008      	b.n	800672a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006718:	f7fc fc80 	bl	800301c <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	2b64      	cmp	r3, #100	@ 0x64
 8006724:	d901      	bls.n	800672a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e207      	b.n	8006b3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800672a:	4b5b      	ldr	r3, [pc, #364]	@ (8006898 <HAL_RCC_OscConfig+0x240>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d0f0      	beq.n	8006718 <HAL_RCC_OscConfig+0xc0>
 8006736:	e014      	b.n	8006762 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006738:	f7fc fc70 	bl	800301c <HAL_GetTick>
 800673c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800673e:	e008      	b.n	8006752 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006740:	f7fc fc6c 	bl	800301c <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	2b64      	cmp	r3, #100	@ 0x64
 800674c:	d901      	bls.n	8006752 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e1f3      	b.n	8006b3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006752:	4b51      	ldr	r3, [pc, #324]	@ (8006898 <HAL_RCC_OscConfig+0x240>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1f0      	bne.n	8006740 <HAL_RCC_OscConfig+0xe8>
 800675e:	e000      	b.n	8006762 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0302 	and.w	r3, r3, #2
 800676a:	2b00      	cmp	r3, #0
 800676c:	d063      	beq.n	8006836 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800676e:	4b4a      	ldr	r3, [pc, #296]	@ (8006898 <HAL_RCC_OscConfig+0x240>)
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f003 030c 	and.w	r3, r3, #12
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00b      	beq.n	8006792 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800677a:	4b47      	ldr	r3, [pc, #284]	@ (8006898 <HAL_RCC_OscConfig+0x240>)
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006782:	2b08      	cmp	r3, #8
 8006784:	d11c      	bne.n	80067c0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006786:	4b44      	ldr	r3, [pc, #272]	@ (8006898 <HAL_RCC_OscConfig+0x240>)
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d116      	bne.n	80067c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006792:	4b41      	ldr	r3, [pc, #260]	@ (8006898 <HAL_RCC_OscConfig+0x240>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0302 	and.w	r3, r3, #2
 800679a:	2b00      	cmp	r3, #0
 800679c:	d005      	beq.n	80067aa <HAL_RCC_OscConfig+0x152>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d001      	beq.n	80067aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e1c7      	b.n	8006b3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067aa:	4b3b      	ldr	r3, [pc, #236]	@ (8006898 <HAL_RCC_OscConfig+0x240>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	00db      	lsls	r3, r3, #3
 80067b8:	4937      	ldr	r1, [pc, #220]	@ (8006898 <HAL_RCC_OscConfig+0x240>)
 80067ba:	4313      	orrs	r3, r2
 80067bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067be:	e03a      	b.n	8006836 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d020      	beq.n	800680a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067c8:	4b34      	ldr	r3, [pc, #208]	@ (800689c <HAL_RCC_OscConfig+0x244>)
 80067ca:	2201      	movs	r2, #1
 80067cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ce:	f7fc fc25 	bl	800301c <HAL_GetTick>
 80067d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067d4:	e008      	b.n	80067e8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067d6:	f7fc fc21 	bl	800301c <HAL_GetTick>
 80067da:	4602      	mov	r2, r0
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d901      	bls.n	80067e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e1a8      	b.n	8006b3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067e8:	4b2b      	ldr	r3, [pc, #172]	@ (8006898 <HAL_RCC_OscConfig+0x240>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0302 	and.w	r3, r3, #2
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d0f0      	beq.n	80067d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067f4:	4b28      	ldr	r3, [pc, #160]	@ (8006898 <HAL_RCC_OscConfig+0x240>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	00db      	lsls	r3, r3, #3
 8006802:	4925      	ldr	r1, [pc, #148]	@ (8006898 <HAL_RCC_OscConfig+0x240>)
 8006804:	4313      	orrs	r3, r2
 8006806:	600b      	str	r3, [r1, #0]
 8006808:	e015      	b.n	8006836 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800680a:	4b24      	ldr	r3, [pc, #144]	@ (800689c <HAL_RCC_OscConfig+0x244>)
 800680c:	2200      	movs	r2, #0
 800680e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006810:	f7fc fc04 	bl	800301c <HAL_GetTick>
 8006814:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006816:	e008      	b.n	800682a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006818:	f7fc fc00 	bl	800301c <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	2b02      	cmp	r3, #2
 8006824:	d901      	bls.n	800682a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e187      	b.n	8006b3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800682a:	4b1b      	ldr	r3, [pc, #108]	@ (8006898 <HAL_RCC_OscConfig+0x240>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0302 	and.w	r3, r3, #2
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1f0      	bne.n	8006818 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 0308 	and.w	r3, r3, #8
 800683e:	2b00      	cmp	r3, #0
 8006840:	d036      	beq.n	80068b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d016      	beq.n	8006878 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800684a:	4b15      	ldr	r3, [pc, #84]	@ (80068a0 <HAL_RCC_OscConfig+0x248>)
 800684c:	2201      	movs	r2, #1
 800684e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006850:	f7fc fbe4 	bl	800301c <HAL_GetTick>
 8006854:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006856:	e008      	b.n	800686a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006858:	f7fc fbe0 	bl	800301c <HAL_GetTick>
 800685c:	4602      	mov	r2, r0
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	2b02      	cmp	r3, #2
 8006864:	d901      	bls.n	800686a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	e167      	b.n	8006b3a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800686a:	4b0b      	ldr	r3, [pc, #44]	@ (8006898 <HAL_RCC_OscConfig+0x240>)
 800686c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	2b00      	cmp	r3, #0
 8006874:	d0f0      	beq.n	8006858 <HAL_RCC_OscConfig+0x200>
 8006876:	e01b      	b.n	80068b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006878:	4b09      	ldr	r3, [pc, #36]	@ (80068a0 <HAL_RCC_OscConfig+0x248>)
 800687a:	2200      	movs	r2, #0
 800687c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800687e:	f7fc fbcd 	bl	800301c <HAL_GetTick>
 8006882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006884:	e00e      	b.n	80068a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006886:	f7fc fbc9 	bl	800301c <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	2b02      	cmp	r3, #2
 8006892:	d907      	bls.n	80068a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e150      	b.n	8006b3a <HAL_RCC_OscConfig+0x4e2>
 8006898:	40023800 	.word	0x40023800
 800689c:	42470000 	.word	0x42470000
 80068a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068a4:	4b88      	ldr	r3, [pc, #544]	@ (8006ac8 <HAL_RCC_OscConfig+0x470>)
 80068a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068a8:	f003 0302 	and.w	r3, r3, #2
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d1ea      	bne.n	8006886 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0304 	and.w	r3, r3, #4
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f000 8097 	beq.w	80069ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068be:	2300      	movs	r3, #0
 80068c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068c2:	4b81      	ldr	r3, [pc, #516]	@ (8006ac8 <HAL_RCC_OscConfig+0x470>)
 80068c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10f      	bne.n	80068ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068ce:	2300      	movs	r3, #0
 80068d0:	60bb      	str	r3, [r7, #8]
 80068d2:	4b7d      	ldr	r3, [pc, #500]	@ (8006ac8 <HAL_RCC_OscConfig+0x470>)
 80068d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d6:	4a7c      	ldr	r2, [pc, #496]	@ (8006ac8 <HAL_RCC_OscConfig+0x470>)
 80068d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80068de:	4b7a      	ldr	r3, [pc, #488]	@ (8006ac8 <HAL_RCC_OscConfig+0x470>)
 80068e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068e6:	60bb      	str	r3, [r7, #8]
 80068e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068ea:	2301      	movs	r3, #1
 80068ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068ee:	4b77      	ldr	r3, [pc, #476]	@ (8006acc <HAL_RCC_OscConfig+0x474>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d118      	bne.n	800692c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068fa:	4b74      	ldr	r3, [pc, #464]	@ (8006acc <HAL_RCC_OscConfig+0x474>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a73      	ldr	r2, [pc, #460]	@ (8006acc <HAL_RCC_OscConfig+0x474>)
 8006900:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006904:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006906:	f7fc fb89 	bl	800301c <HAL_GetTick>
 800690a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800690c:	e008      	b.n	8006920 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800690e:	f7fc fb85 	bl	800301c <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	2b02      	cmp	r3, #2
 800691a:	d901      	bls.n	8006920 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e10c      	b.n	8006b3a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006920:	4b6a      	ldr	r3, [pc, #424]	@ (8006acc <HAL_RCC_OscConfig+0x474>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006928:	2b00      	cmp	r3, #0
 800692a:	d0f0      	beq.n	800690e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d106      	bne.n	8006942 <HAL_RCC_OscConfig+0x2ea>
 8006934:	4b64      	ldr	r3, [pc, #400]	@ (8006ac8 <HAL_RCC_OscConfig+0x470>)
 8006936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006938:	4a63      	ldr	r2, [pc, #396]	@ (8006ac8 <HAL_RCC_OscConfig+0x470>)
 800693a:	f043 0301 	orr.w	r3, r3, #1
 800693e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006940:	e01c      	b.n	800697c <HAL_RCC_OscConfig+0x324>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	2b05      	cmp	r3, #5
 8006948:	d10c      	bne.n	8006964 <HAL_RCC_OscConfig+0x30c>
 800694a:	4b5f      	ldr	r3, [pc, #380]	@ (8006ac8 <HAL_RCC_OscConfig+0x470>)
 800694c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800694e:	4a5e      	ldr	r2, [pc, #376]	@ (8006ac8 <HAL_RCC_OscConfig+0x470>)
 8006950:	f043 0304 	orr.w	r3, r3, #4
 8006954:	6713      	str	r3, [r2, #112]	@ 0x70
 8006956:	4b5c      	ldr	r3, [pc, #368]	@ (8006ac8 <HAL_RCC_OscConfig+0x470>)
 8006958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800695a:	4a5b      	ldr	r2, [pc, #364]	@ (8006ac8 <HAL_RCC_OscConfig+0x470>)
 800695c:	f043 0301 	orr.w	r3, r3, #1
 8006960:	6713      	str	r3, [r2, #112]	@ 0x70
 8006962:	e00b      	b.n	800697c <HAL_RCC_OscConfig+0x324>
 8006964:	4b58      	ldr	r3, [pc, #352]	@ (8006ac8 <HAL_RCC_OscConfig+0x470>)
 8006966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006968:	4a57      	ldr	r2, [pc, #348]	@ (8006ac8 <HAL_RCC_OscConfig+0x470>)
 800696a:	f023 0301 	bic.w	r3, r3, #1
 800696e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006970:	4b55      	ldr	r3, [pc, #340]	@ (8006ac8 <HAL_RCC_OscConfig+0x470>)
 8006972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006974:	4a54      	ldr	r2, [pc, #336]	@ (8006ac8 <HAL_RCC_OscConfig+0x470>)
 8006976:	f023 0304 	bic.w	r3, r3, #4
 800697a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d015      	beq.n	80069b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006984:	f7fc fb4a 	bl	800301c <HAL_GetTick>
 8006988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800698a:	e00a      	b.n	80069a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800698c:	f7fc fb46 	bl	800301c <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800699a:	4293      	cmp	r3, r2
 800699c:	d901      	bls.n	80069a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e0cb      	b.n	8006b3a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069a2:	4b49      	ldr	r3, [pc, #292]	@ (8006ac8 <HAL_RCC_OscConfig+0x470>)
 80069a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069a6:	f003 0302 	and.w	r3, r3, #2
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d0ee      	beq.n	800698c <HAL_RCC_OscConfig+0x334>
 80069ae:	e014      	b.n	80069da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069b0:	f7fc fb34 	bl	800301c <HAL_GetTick>
 80069b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069b6:	e00a      	b.n	80069ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069b8:	f7fc fb30 	bl	800301c <HAL_GetTick>
 80069bc:	4602      	mov	r2, r0
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d901      	bls.n	80069ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e0b5      	b.n	8006b3a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069ce:	4b3e      	ldr	r3, [pc, #248]	@ (8006ac8 <HAL_RCC_OscConfig+0x470>)
 80069d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069d2:	f003 0302 	and.w	r3, r3, #2
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1ee      	bne.n	80069b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80069da:	7dfb      	ldrb	r3, [r7, #23]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d105      	bne.n	80069ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069e0:	4b39      	ldr	r3, [pc, #228]	@ (8006ac8 <HAL_RCC_OscConfig+0x470>)
 80069e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e4:	4a38      	ldr	r2, [pc, #224]	@ (8006ac8 <HAL_RCC_OscConfig+0x470>)
 80069e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 80a1 	beq.w	8006b38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80069f6:	4b34      	ldr	r3, [pc, #208]	@ (8006ac8 <HAL_RCC_OscConfig+0x470>)
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f003 030c 	and.w	r3, r3, #12
 80069fe:	2b08      	cmp	r3, #8
 8006a00:	d05c      	beq.n	8006abc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d141      	bne.n	8006a8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a0a:	4b31      	ldr	r3, [pc, #196]	@ (8006ad0 <HAL_RCC_OscConfig+0x478>)
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a10:	f7fc fb04 	bl	800301c <HAL_GetTick>
 8006a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a16:	e008      	b.n	8006a2a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a18:	f7fc fb00 	bl	800301c <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d901      	bls.n	8006a2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e087      	b.n	8006b3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a2a:	4b27      	ldr	r3, [pc, #156]	@ (8006ac8 <HAL_RCC_OscConfig+0x470>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1f0      	bne.n	8006a18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	69da      	ldr	r2, [r3, #28]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a44:	019b      	lsls	r3, r3, #6
 8006a46:	431a      	orrs	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a4c:	085b      	lsrs	r3, r3, #1
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	041b      	lsls	r3, r3, #16
 8006a52:	431a      	orrs	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a58:	061b      	lsls	r3, r3, #24
 8006a5a:	491b      	ldr	r1, [pc, #108]	@ (8006ac8 <HAL_RCC_OscConfig+0x470>)
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a60:	4b1b      	ldr	r3, [pc, #108]	@ (8006ad0 <HAL_RCC_OscConfig+0x478>)
 8006a62:	2201      	movs	r2, #1
 8006a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a66:	f7fc fad9 	bl	800301c <HAL_GetTick>
 8006a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a6c:	e008      	b.n	8006a80 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a6e:	f7fc fad5 	bl	800301c <HAL_GetTick>
 8006a72:	4602      	mov	r2, r0
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d901      	bls.n	8006a80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e05c      	b.n	8006b3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a80:	4b11      	ldr	r3, [pc, #68]	@ (8006ac8 <HAL_RCC_OscConfig+0x470>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d0f0      	beq.n	8006a6e <HAL_RCC_OscConfig+0x416>
 8006a8c:	e054      	b.n	8006b38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a8e:	4b10      	ldr	r3, [pc, #64]	@ (8006ad0 <HAL_RCC_OscConfig+0x478>)
 8006a90:	2200      	movs	r2, #0
 8006a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a94:	f7fc fac2 	bl	800301c <HAL_GetTick>
 8006a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a9a:	e008      	b.n	8006aae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a9c:	f7fc fabe 	bl	800301c <HAL_GetTick>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d901      	bls.n	8006aae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e045      	b.n	8006b3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aae:	4b06      	ldr	r3, [pc, #24]	@ (8006ac8 <HAL_RCC_OscConfig+0x470>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1f0      	bne.n	8006a9c <HAL_RCC_OscConfig+0x444>
 8006aba:	e03d      	b.n	8006b38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d107      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e038      	b.n	8006b3a <HAL_RCC_OscConfig+0x4e2>
 8006ac8:	40023800 	.word	0x40023800
 8006acc:	40007000 	.word	0x40007000
 8006ad0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8006b44 <HAL_RCC_OscConfig+0x4ec>)
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d028      	beq.n	8006b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d121      	bne.n	8006b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d11a      	bne.n	8006b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006b04:	4013      	ands	r3, r2
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006b0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d111      	bne.n	8006b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b1a:	085b      	lsrs	r3, r3, #1
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d107      	bne.n	8006b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d001      	beq.n	8006b38 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e000      	b.n	8006b3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3718      	adds	r7, #24
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	40023800 	.word	0x40023800

08006b48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d101      	bne.n	8006b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e0cc      	b.n	8006cf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b5c:	4b68      	ldr	r3, [pc, #416]	@ (8006d00 <HAL_RCC_ClockConfig+0x1b8>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 030f 	and.w	r3, r3, #15
 8006b64:	683a      	ldr	r2, [r7, #0]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d90c      	bls.n	8006b84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b6a:	4b65      	ldr	r3, [pc, #404]	@ (8006d00 <HAL_RCC_ClockConfig+0x1b8>)
 8006b6c:	683a      	ldr	r2, [r7, #0]
 8006b6e:	b2d2      	uxtb	r2, r2
 8006b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b72:	4b63      	ldr	r3, [pc, #396]	@ (8006d00 <HAL_RCC_ClockConfig+0x1b8>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 030f 	and.w	r3, r3, #15
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d001      	beq.n	8006b84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e0b8      	b.n	8006cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0302 	and.w	r3, r3, #2
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d020      	beq.n	8006bd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0304 	and.w	r3, r3, #4
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d005      	beq.n	8006ba8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b9c:	4b59      	ldr	r3, [pc, #356]	@ (8006d04 <HAL_RCC_ClockConfig+0x1bc>)
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	4a58      	ldr	r2, [pc, #352]	@ (8006d04 <HAL_RCC_ClockConfig+0x1bc>)
 8006ba2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006ba6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0308 	and.w	r3, r3, #8
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d005      	beq.n	8006bc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bb4:	4b53      	ldr	r3, [pc, #332]	@ (8006d04 <HAL_RCC_ClockConfig+0x1bc>)
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	4a52      	ldr	r2, [pc, #328]	@ (8006d04 <HAL_RCC_ClockConfig+0x1bc>)
 8006bba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006bbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bc0:	4b50      	ldr	r3, [pc, #320]	@ (8006d04 <HAL_RCC_ClockConfig+0x1bc>)
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	494d      	ldr	r1, [pc, #308]	@ (8006d04 <HAL_RCC_ClockConfig+0x1bc>)
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d044      	beq.n	8006c68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d107      	bne.n	8006bf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006be6:	4b47      	ldr	r3, [pc, #284]	@ (8006d04 <HAL_RCC_ClockConfig+0x1bc>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d119      	bne.n	8006c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e07f      	b.n	8006cf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d003      	beq.n	8006c06 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c02:	2b03      	cmp	r3, #3
 8006c04:	d107      	bne.n	8006c16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c06:	4b3f      	ldr	r3, [pc, #252]	@ (8006d04 <HAL_RCC_ClockConfig+0x1bc>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d109      	bne.n	8006c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e06f      	b.n	8006cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c16:	4b3b      	ldr	r3, [pc, #236]	@ (8006d04 <HAL_RCC_ClockConfig+0x1bc>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 0302 	and.w	r3, r3, #2
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d101      	bne.n	8006c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e067      	b.n	8006cf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c26:	4b37      	ldr	r3, [pc, #220]	@ (8006d04 <HAL_RCC_ClockConfig+0x1bc>)
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f023 0203 	bic.w	r2, r3, #3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	4934      	ldr	r1, [pc, #208]	@ (8006d04 <HAL_RCC_ClockConfig+0x1bc>)
 8006c34:	4313      	orrs	r3, r2
 8006c36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c38:	f7fc f9f0 	bl	800301c <HAL_GetTick>
 8006c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c3e:	e00a      	b.n	8006c56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c40:	f7fc f9ec 	bl	800301c <HAL_GetTick>
 8006c44:	4602      	mov	r2, r0
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d901      	bls.n	8006c56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e04f      	b.n	8006cf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c56:	4b2b      	ldr	r3, [pc, #172]	@ (8006d04 <HAL_RCC_ClockConfig+0x1bc>)
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	f003 020c 	and.w	r2, r3, #12
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d1eb      	bne.n	8006c40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c68:	4b25      	ldr	r3, [pc, #148]	@ (8006d00 <HAL_RCC_ClockConfig+0x1b8>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 030f 	and.w	r3, r3, #15
 8006c70:	683a      	ldr	r2, [r7, #0]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d20c      	bcs.n	8006c90 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c76:	4b22      	ldr	r3, [pc, #136]	@ (8006d00 <HAL_RCC_ClockConfig+0x1b8>)
 8006c78:	683a      	ldr	r2, [r7, #0]
 8006c7a:	b2d2      	uxtb	r2, r2
 8006c7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c7e:	4b20      	ldr	r3, [pc, #128]	@ (8006d00 <HAL_RCC_ClockConfig+0x1b8>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 030f 	and.w	r3, r3, #15
 8006c86:	683a      	ldr	r2, [r7, #0]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d001      	beq.n	8006c90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e032      	b.n	8006cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0304 	and.w	r3, r3, #4
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d008      	beq.n	8006cae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c9c:	4b19      	ldr	r3, [pc, #100]	@ (8006d04 <HAL_RCC_ClockConfig+0x1bc>)
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	4916      	ldr	r1, [pc, #88]	@ (8006d04 <HAL_RCC_ClockConfig+0x1bc>)
 8006caa:	4313      	orrs	r3, r2
 8006cac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0308 	and.w	r3, r3, #8
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d009      	beq.n	8006cce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cba:	4b12      	ldr	r3, [pc, #72]	@ (8006d04 <HAL_RCC_ClockConfig+0x1bc>)
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	00db      	lsls	r3, r3, #3
 8006cc8:	490e      	ldr	r1, [pc, #56]	@ (8006d04 <HAL_RCC_ClockConfig+0x1bc>)
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006cce:	f000 f821 	bl	8006d14 <HAL_RCC_GetSysClockFreq>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8006d04 <HAL_RCC_ClockConfig+0x1bc>)
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	091b      	lsrs	r3, r3, #4
 8006cda:	f003 030f 	and.w	r3, r3, #15
 8006cde:	490a      	ldr	r1, [pc, #40]	@ (8006d08 <HAL_RCC_ClockConfig+0x1c0>)
 8006ce0:	5ccb      	ldrb	r3, [r1, r3]
 8006ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ce6:	4a09      	ldr	r2, [pc, #36]	@ (8006d0c <HAL_RCC_ClockConfig+0x1c4>)
 8006ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006cea:	4b09      	ldr	r3, [pc, #36]	@ (8006d10 <HAL_RCC_ClockConfig+0x1c8>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7fb feca 	bl	8002a88 <HAL_InitTick>

  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	40023c00 	.word	0x40023c00
 8006d04:	40023800 	.word	0x40023800
 8006d08:	0800d9b8 	.word	0x0800d9b8
 8006d0c:	20000004 	.word	0x20000004
 8006d10:	20000008 	.word	0x20000008

08006d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d18:	b094      	sub	sp, #80	@ 0x50
 8006d1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006d20:	2300      	movs	r3, #0
 8006d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d2c:	4b79      	ldr	r3, [pc, #484]	@ (8006f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	f003 030c 	and.w	r3, r3, #12
 8006d34:	2b08      	cmp	r3, #8
 8006d36:	d00d      	beq.n	8006d54 <HAL_RCC_GetSysClockFreq+0x40>
 8006d38:	2b08      	cmp	r3, #8
 8006d3a:	f200 80e1 	bhi.w	8006f00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d002      	beq.n	8006d48 <HAL_RCC_GetSysClockFreq+0x34>
 8006d42:	2b04      	cmp	r3, #4
 8006d44:	d003      	beq.n	8006d4e <HAL_RCC_GetSysClockFreq+0x3a>
 8006d46:	e0db      	b.n	8006f00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d48:	4b73      	ldr	r3, [pc, #460]	@ (8006f18 <HAL_RCC_GetSysClockFreq+0x204>)
 8006d4a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d4c:	e0db      	b.n	8006f06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d4e:	4b73      	ldr	r3, [pc, #460]	@ (8006f1c <HAL_RCC_GetSysClockFreq+0x208>)
 8006d50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d52:	e0d8      	b.n	8006f06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d54:	4b6f      	ldr	r3, [pc, #444]	@ (8006f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d5c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d5e:	4b6d      	ldr	r3, [pc, #436]	@ (8006f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d063      	beq.n	8006e32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d6a:	4b6a      	ldr	r3, [pc, #424]	@ (8006f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	099b      	lsrs	r3, r3, #6
 8006d70:	2200      	movs	r2, #0
 8006d72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d74:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d7e:	2300      	movs	r3, #0
 8006d80:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006d86:	4622      	mov	r2, r4
 8006d88:	462b      	mov	r3, r5
 8006d8a:	f04f 0000 	mov.w	r0, #0
 8006d8e:	f04f 0100 	mov.w	r1, #0
 8006d92:	0159      	lsls	r1, r3, #5
 8006d94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d98:	0150      	lsls	r0, r2, #5
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	4621      	mov	r1, r4
 8006da0:	1a51      	subs	r1, r2, r1
 8006da2:	6139      	str	r1, [r7, #16]
 8006da4:	4629      	mov	r1, r5
 8006da6:	eb63 0301 	sbc.w	r3, r3, r1
 8006daa:	617b      	str	r3, [r7, #20]
 8006dac:	f04f 0200 	mov.w	r2, #0
 8006db0:	f04f 0300 	mov.w	r3, #0
 8006db4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006db8:	4659      	mov	r1, fp
 8006dba:	018b      	lsls	r3, r1, #6
 8006dbc:	4651      	mov	r1, sl
 8006dbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006dc2:	4651      	mov	r1, sl
 8006dc4:	018a      	lsls	r2, r1, #6
 8006dc6:	4651      	mov	r1, sl
 8006dc8:	ebb2 0801 	subs.w	r8, r2, r1
 8006dcc:	4659      	mov	r1, fp
 8006dce:	eb63 0901 	sbc.w	r9, r3, r1
 8006dd2:	f04f 0200 	mov.w	r2, #0
 8006dd6:	f04f 0300 	mov.w	r3, #0
 8006dda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006dde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006de2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006de6:	4690      	mov	r8, r2
 8006de8:	4699      	mov	r9, r3
 8006dea:	4623      	mov	r3, r4
 8006dec:	eb18 0303 	adds.w	r3, r8, r3
 8006df0:	60bb      	str	r3, [r7, #8]
 8006df2:	462b      	mov	r3, r5
 8006df4:	eb49 0303 	adc.w	r3, r9, r3
 8006df8:	60fb      	str	r3, [r7, #12]
 8006dfa:	f04f 0200 	mov.w	r2, #0
 8006dfe:	f04f 0300 	mov.w	r3, #0
 8006e02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006e06:	4629      	mov	r1, r5
 8006e08:	024b      	lsls	r3, r1, #9
 8006e0a:	4621      	mov	r1, r4
 8006e0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006e10:	4621      	mov	r1, r4
 8006e12:	024a      	lsls	r2, r1, #9
 8006e14:	4610      	mov	r0, r2
 8006e16:	4619      	mov	r1, r3
 8006e18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006e24:	f7f9 fed0 	bl	8000bc8 <__aeabi_uldivmod>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e30:	e058      	b.n	8006ee4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e32:	4b38      	ldr	r3, [pc, #224]	@ (8006f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	099b      	lsrs	r3, r3, #6
 8006e38:	2200      	movs	r2, #0
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	4611      	mov	r1, r2
 8006e3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006e42:	623b      	str	r3, [r7, #32]
 8006e44:	2300      	movs	r3, #0
 8006e46:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006e4c:	4642      	mov	r2, r8
 8006e4e:	464b      	mov	r3, r9
 8006e50:	f04f 0000 	mov.w	r0, #0
 8006e54:	f04f 0100 	mov.w	r1, #0
 8006e58:	0159      	lsls	r1, r3, #5
 8006e5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e5e:	0150      	lsls	r0, r2, #5
 8006e60:	4602      	mov	r2, r0
 8006e62:	460b      	mov	r3, r1
 8006e64:	4641      	mov	r1, r8
 8006e66:	ebb2 0a01 	subs.w	sl, r2, r1
 8006e6a:	4649      	mov	r1, r9
 8006e6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006e70:	f04f 0200 	mov.w	r2, #0
 8006e74:	f04f 0300 	mov.w	r3, #0
 8006e78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006e7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006e80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006e84:	ebb2 040a 	subs.w	r4, r2, sl
 8006e88:	eb63 050b 	sbc.w	r5, r3, fp
 8006e8c:	f04f 0200 	mov.w	r2, #0
 8006e90:	f04f 0300 	mov.w	r3, #0
 8006e94:	00eb      	lsls	r3, r5, #3
 8006e96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e9a:	00e2      	lsls	r2, r4, #3
 8006e9c:	4614      	mov	r4, r2
 8006e9e:	461d      	mov	r5, r3
 8006ea0:	4643      	mov	r3, r8
 8006ea2:	18e3      	adds	r3, r4, r3
 8006ea4:	603b      	str	r3, [r7, #0]
 8006ea6:	464b      	mov	r3, r9
 8006ea8:	eb45 0303 	adc.w	r3, r5, r3
 8006eac:	607b      	str	r3, [r7, #4]
 8006eae:	f04f 0200 	mov.w	r2, #0
 8006eb2:	f04f 0300 	mov.w	r3, #0
 8006eb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006eba:	4629      	mov	r1, r5
 8006ebc:	028b      	lsls	r3, r1, #10
 8006ebe:	4621      	mov	r1, r4
 8006ec0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ec4:	4621      	mov	r1, r4
 8006ec6:	028a      	lsls	r2, r1, #10
 8006ec8:	4610      	mov	r0, r2
 8006eca:	4619      	mov	r1, r3
 8006ecc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ece:	2200      	movs	r2, #0
 8006ed0:	61bb      	str	r3, [r7, #24]
 8006ed2:	61fa      	str	r2, [r7, #28]
 8006ed4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ed8:	f7f9 fe76 	bl	8000bc8 <__aeabi_uldivmod>
 8006edc:	4602      	mov	r2, r0
 8006ede:	460b      	mov	r3, r1
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8006f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	0c1b      	lsrs	r3, r3, #16
 8006eea:	f003 0303 	and.w	r3, r3, #3
 8006eee:	3301      	adds	r3, #1
 8006ef0:	005b      	lsls	r3, r3, #1
 8006ef2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006ef4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ef6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006efc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006efe:	e002      	b.n	8006f06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f00:	4b05      	ldr	r3, [pc, #20]	@ (8006f18 <HAL_RCC_GetSysClockFreq+0x204>)
 8006f02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006f04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3750      	adds	r7, #80	@ 0x50
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f12:	bf00      	nop
 8006f14:	40023800 	.word	0x40023800
 8006f18:	00f42400 	.word	0x00f42400
 8006f1c:	007a1200 	.word	0x007a1200

08006f20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f20:	b480      	push	{r7}
 8006f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f24:	4b03      	ldr	r3, [pc, #12]	@ (8006f34 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f26:	681b      	ldr	r3, [r3, #0]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	20000004 	.word	0x20000004

08006f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f3c:	f7ff fff0 	bl	8006f20 <HAL_RCC_GetHCLKFreq>
 8006f40:	4602      	mov	r2, r0
 8006f42:	4b05      	ldr	r3, [pc, #20]	@ (8006f58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	0a9b      	lsrs	r3, r3, #10
 8006f48:	f003 0307 	and.w	r3, r3, #7
 8006f4c:	4903      	ldr	r1, [pc, #12]	@ (8006f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f4e:	5ccb      	ldrb	r3, [r1, r3]
 8006f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	40023800 	.word	0x40023800
 8006f5c:	0800d9c8 	.word	0x0800d9c8

08006f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f64:	f7ff ffdc 	bl	8006f20 <HAL_RCC_GetHCLKFreq>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	4b05      	ldr	r3, [pc, #20]	@ (8006f80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	0b5b      	lsrs	r3, r3, #13
 8006f70:	f003 0307 	and.w	r3, r3, #7
 8006f74:	4903      	ldr	r1, [pc, #12]	@ (8006f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f76:	5ccb      	ldrb	r3, [r1, r3]
 8006f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	40023800 	.word	0x40023800
 8006f84:	0800d9c8 	.word	0x0800d9c8

08006f88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	220f      	movs	r2, #15
 8006f96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f98:	4b12      	ldr	r3, [pc, #72]	@ (8006fe4 <HAL_RCC_GetClockConfig+0x5c>)
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	f003 0203 	and.w	r2, r3, #3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8006fe4 <HAL_RCC_GetClockConfig+0x5c>)
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8006fe4 <HAL_RCC_GetClockConfig+0x5c>)
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006fbc:	4b09      	ldr	r3, [pc, #36]	@ (8006fe4 <HAL_RCC_GetClockConfig+0x5c>)
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	08db      	lsrs	r3, r3, #3
 8006fc2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006fca:	4b07      	ldr	r3, [pc, #28]	@ (8006fe8 <HAL_RCC_GetClockConfig+0x60>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 020f 	and.w	r2, r3, #15
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	601a      	str	r2, [r3, #0]
}
 8006fd6:	bf00      	nop
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	40023800 	.word	0x40023800
 8006fe8:	40023c00 	.word	0x40023c00

08006fec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0301 	and.w	r3, r3, #1
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10b      	bne.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007010:	2b00      	cmp	r3, #0
 8007012:	d105      	bne.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800701c:	2b00      	cmp	r3, #0
 800701e:	d075      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007020:	4b91      	ldr	r3, [pc, #580]	@ (8007268 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007022:	2200      	movs	r2, #0
 8007024:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007026:	f7fb fff9 	bl	800301c <HAL_GetTick>
 800702a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800702c:	e008      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800702e:	f7fb fff5 	bl	800301c <HAL_GetTick>
 8007032:	4602      	mov	r2, r0
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	2b02      	cmp	r3, #2
 800703a:	d901      	bls.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e189      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007040:	4b8a      	ldr	r3, [pc, #552]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1f0      	bne.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0301 	and.w	r3, r3, #1
 8007054:	2b00      	cmp	r3, #0
 8007056:	d009      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	019a      	lsls	r2, r3, #6
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	071b      	lsls	r3, r3, #28
 8007064:	4981      	ldr	r1, [pc, #516]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007066:	4313      	orrs	r3, r2
 8007068:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0302 	and.w	r3, r3, #2
 8007074:	2b00      	cmp	r3, #0
 8007076:	d01f      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007078:	4b7c      	ldr	r3, [pc, #496]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800707a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800707e:	0f1b      	lsrs	r3, r3, #28
 8007080:	f003 0307 	and.w	r3, r3, #7
 8007084:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	019a      	lsls	r2, r3, #6
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	061b      	lsls	r3, r3, #24
 8007092:	431a      	orrs	r2, r3
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	071b      	lsls	r3, r3, #28
 8007098:	4974      	ldr	r1, [pc, #464]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800709a:	4313      	orrs	r3, r2
 800709c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80070a0:	4b72      	ldr	r3, [pc, #456]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070a6:	f023 021f 	bic.w	r2, r3, #31
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	69db      	ldr	r3, [r3, #28]
 80070ae:	3b01      	subs	r3, #1
 80070b0:	496e      	ldr	r1, [pc, #440]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00d      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	019a      	lsls	r2, r3, #6
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	061b      	lsls	r3, r3, #24
 80070d0:	431a      	orrs	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	071b      	lsls	r3, r3, #28
 80070d8:	4964      	ldr	r1, [pc, #400]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070da:	4313      	orrs	r3, r2
 80070dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80070e0:	4b61      	ldr	r3, [pc, #388]	@ (8007268 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80070e2:	2201      	movs	r2, #1
 80070e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80070e6:	f7fb ff99 	bl	800301c <HAL_GetTick>
 80070ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80070ec:	e008      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80070ee:	f7fb ff95 	bl	800301c <HAL_GetTick>
 80070f2:	4602      	mov	r2, r0
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d901      	bls.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	e129      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007100:	4b5a      	ldr	r3, [pc, #360]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d0f0      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0304 	and.w	r3, r3, #4
 8007114:	2b00      	cmp	r3, #0
 8007116:	d105      	bne.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007120:	2b00      	cmp	r3, #0
 8007122:	d079      	beq.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007124:	4b52      	ldr	r3, [pc, #328]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007126:	2200      	movs	r2, #0
 8007128:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800712a:	f7fb ff77 	bl	800301c <HAL_GetTick>
 800712e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007130:	e008      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007132:	f7fb ff73 	bl	800301c <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	2b02      	cmp	r3, #2
 800713e:	d901      	bls.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007140:	2303      	movs	r3, #3
 8007142:	e107      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007144:	4b49      	ldr	r3, [pc, #292]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800714c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007150:	d0ef      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 0304 	and.w	r3, r3, #4
 800715a:	2b00      	cmp	r3, #0
 800715c:	d020      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800715e:	4b43      	ldr	r3, [pc, #268]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007164:	0f1b      	lsrs	r3, r3, #28
 8007166:	f003 0307 	and.w	r3, r3, #7
 800716a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	019a      	lsls	r2, r3, #6
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	061b      	lsls	r3, r3, #24
 8007178:	431a      	orrs	r2, r3
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	071b      	lsls	r3, r3, #28
 800717e:	493b      	ldr	r1, [pc, #236]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007180:	4313      	orrs	r3, r2
 8007182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007186:	4b39      	ldr	r3, [pc, #228]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007188:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800718c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a1b      	ldr	r3, [r3, #32]
 8007194:	3b01      	subs	r3, #1
 8007196:	021b      	lsls	r3, r3, #8
 8007198:	4934      	ldr	r1, [pc, #208]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800719a:	4313      	orrs	r3, r2
 800719c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0308 	and.w	r3, r3, #8
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d01e      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80071ac:	4b2f      	ldr	r3, [pc, #188]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071b2:	0e1b      	lsrs	r3, r3, #24
 80071b4:	f003 030f 	and.w	r3, r3, #15
 80071b8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	019a      	lsls	r2, r3, #6
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	061b      	lsls	r3, r3, #24
 80071c4:	431a      	orrs	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	071b      	lsls	r3, r3, #28
 80071cc:	4927      	ldr	r1, [pc, #156]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071ce:	4313      	orrs	r3, r2
 80071d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80071d4:	4b25      	ldr	r3, [pc, #148]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071da:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071e2:	4922      	ldr	r1, [pc, #136]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071e4:	4313      	orrs	r3, r2
 80071e6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80071ea:	4b21      	ldr	r3, [pc, #132]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80071ec:	2201      	movs	r2, #1
 80071ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80071f0:	f7fb ff14 	bl	800301c <HAL_GetTick>
 80071f4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80071f6:	e008      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80071f8:	f7fb ff10 	bl	800301c <HAL_GetTick>
 80071fc:	4602      	mov	r2, r0
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	2b02      	cmp	r3, #2
 8007204:	d901      	bls.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e0a4      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800720a:	4b18      	ldr	r3, [pc, #96]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007212:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007216:	d1ef      	bne.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 0320 	and.w	r3, r3, #32
 8007220:	2b00      	cmp	r3, #0
 8007222:	f000 808b 	beq.w	800733c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007226:	2300      	movs	r3, #0
 8007228:	60fb      	str	r3, [r7, #12]
 800722a:	4b10      	ldr	r3, [pc, #64]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800722c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800722e:	4a0f      	ldr	r2, [pc, #60]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007230:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007234:	6413      	str	r3, [r2, #64]	@ 0x40
 8007236:	4b0d      	ldr	r3, [pc, #52]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800723a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800723e:	60fb      	str	r3, [r7, #12]
 8007240:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007242:	4b0c      	ldr	r3, [pc, #48]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a0b      	ldr	r2, [pc, #44]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007248:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800724c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800724e:	f7fb fee5 	bl	800301c <HAL_GetTick>
 8007252:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007254:	e010      	b.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007256:	f7fb fee1 	bl	800301c <HAL_GetTick>
 800725a:	4602      	mov	r2, r0
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	2b02      	cmp	r3, #2
 8007262:	d909      	bls.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e075      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007268:	42470068 	.word	0x42470068
 800726c:	40023800 	.word	0x40023800
 8007270:	42470070 	.word	0x42470070
 8007274:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007278:	4b38      	ldr	r3, [pc, #224]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007280:	2b00      	cmp	r3, #0
 8007282:	d0e8      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007284:	4b36      	ldr	r3, [pc, #216]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007288:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800728c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d02f      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007298:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d028      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072a2:	4b2f      	ldr	r3, [pc, #188]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072aa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80072ac:	4b2d      	ldr	r3, [pc, #180]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80072ae:	2201      	movs	r2, #1
 80072b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80072b2:	4b2c      	ldr	r3, [pc, #176]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80072b4:	2200      	movs	r2, #0
 80072b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80072b8:	4a29      	ldr	r2, [pc, #164]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80072be:	4b28      	ldr	r3, [pc, #160]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072c2:	f003 0301 	and.w	r3, r3, #1
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d114      	bne.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80072ca:	f7fb fea7 	bl	800301c <HAL_GetTick>
 80072ce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072d0:	e00a      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072d2:	f7fb fea3 	bl	800301c <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d901      	bls.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e035      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072e8:	4b1d      	ldr	r3, [pc, #116]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072ec:	f003 0302 	and.w	r3, r3, #2
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d0ee      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007300:	d10d      	bne.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007302:	4b17      	ldr	r3, [pc, #92]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800730e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007312:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007316:	4912      	ldr	r1, [pc, #72]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007318:	4313      	orrs	r3, r2
 800731a:	608b      	str	r3, [r1, #8]
 800731c:	e005      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800731e:	4b10      	ldr	r3, [pc, #64]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	4a0f      	ldr	r2, [pc, #60]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007324:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007328:	6093      	str	r3, [r2, #8]
 800732a:	4b0d      	ldr	r3, [pc, #52]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800732c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007336:	490a      	ldr	r1, [pc, #40]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007338:	4313      	orrs	r3, r2
 800733a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0310 	and.w	r3, r3, #16
 8007344:	2b00      	cmp	r3, #0
 8007346:	d004      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800734e:	4b06      	ldr	r3, [pc, #24]	@ (8007368 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007350:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3718      	adds	r7, #24
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}
 800735c:	40007000 	.word	0x40007000
 8007360:	40023800 	.word	0x40023800
 8007364:	42470e40 	.word	0x42470e40
 8007368:	424711e0 	.word	0x424711e0

0800736c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d101      	bne.n	8007380 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e025      	b.n	80073cc <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007386:	b2db      	uxtb	r3, r3
 8007388:	2b00      	cmp	r3, #0
 800738a:	d106      	bne.n	800739a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f7f9 ff3f 	bl	8001218 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2202      	movs	r2, #2
 800739e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	3304      	adds	r3, #4
 80073aa:	4619      	mov	r1, r3
 80073ac:	4610      	mov	r0, r2
 80073ae:	f001 ffad 	bl	800930c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6818      	ldr	r0, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	461a      	mov	r2, r3
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	f002 f802 	bl	80093c6 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d101      	bne.n	80073e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e07b      	b.n	80074de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d108      	bne.n	8007400 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073f6:	d009      	beq.n	800740c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	61da      	str	r2, [r3, #28]
 80073fe:	e005      	b.n	800740c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b00      	cmp	r3, #0
 800741c:	d106      	bne.n	800742c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7fb fa88 	bl	800293c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2202      	movs	r2, #2
 8007430:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007442:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007454:	431a      	orrs	r2, r3
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800745e:	431a      	orrs	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	f003 0302 	and.w	r3, r3, #2
 8007468:	431a      	orrs	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	f003 0301 	and.w	r3, r3, #1
 8007472:	431a      	orrs	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	699b      	ldr	r3, [r3, #24]
 8007478:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800747c:	431a      	orrs	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007486:	431a      	orrs	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a1b      	ldr	r3, [r3, #32]
 800748c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007490:	ea42 0103 	orr.w	r1, r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007498:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	430a      	orrs	r2, r1
 80074a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	0c1b      	lsrs	r3, r3, #16
 80074aa:	f003 0104 	and.w	r1, r3, #4
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b2:	f003 0210 	and.w	r2, r3, #16
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	430a      	orrs	r2, r1
 80074bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	69da      	ldr	r2, [r3, #28]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80074cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3708      	adds	r7, #8
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b088      	sub	sp, #32
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	60f8      	str	r0, [r7, #12]
 80074ee:	60b9      	str	r1, [r7, #8]
 80074f0:	603b      	str	r3, [r7, #0]
 80074f2:	4613      	mov	r3, r2
 80074f4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074f6:	f7fb fd91 	bl	800301c <HAL_GetTick>
 80074fa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80074fc:	88fb      	ldrh	r3, [r7, #6]
 80074fe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007506:	b2db      	uxtb	r3, r3
 8007508:	2b01      	cmp	r3, #1
 800750a:	d001      	beq.n	8007510 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800750c:	2302      	movs	r3, #2
 800750e:	e12a      	b.n	8007766 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d002      	beq.n	800751c <HAL_SPI_Transmit+0x36>
 8007516:	88fb      	ldrh	r3, [r7, #6]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d101      	bne.n	8007520 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	e122      	b.n	8007766 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007526:	2b01      	cmp	r3, #1
 8007528:	d101      	bne.n	800752e <HAL_SPI_Transmit+0x48>
 800752a:	2302      	movs	r3, #2
 800752c:	e11b      	b.n	8007766 <HAL_SPI_Transmit+0x280>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2203      	movs	r2, #3
 800753a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	68ba      	ldr	r2, [r7, #8]
 8007548:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	88fa      	ldrh	r2, [r7, #6]
 800754e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	88fa      	ldrh	r2, [r7, #6]
 8007554:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2200      	movs	r2, #0
 8007566:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800757c:	d10f      	bne.n	800759e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800758c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800759c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075a8:	2b40      	cmp	r3, #64	@ 0x40
 80075aa:	d007      	beq.n	80075bc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075c4:	d152      	bne.n	800766c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d002      	beq.n	80075d4 <HAL_SPI_Transmit+0xee>
 80075ce:	8b7b      	ldrh	r3, [r7, #26]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d145      	bne.n	8007660 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075d8:	881a      	ldrh	r2, [r3, #0]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075e4:	1c9a      	adds	r2, r3, #2
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	3b01      	subs	r3, #1
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80075f8:	e032      	b.n	8007660 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f003 0302 	and.w	r3, r3, #2
 8007604:	2b02      	cmp	r3, #2
 8007606:	d112      	bne.n	800762e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800760c:	881a      	ldrh	r2, [r3, #0]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007618:	1c9a      	adds	r2, r3, #2
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007622:	b29b      	uxth	r3, r3
 8007624:	3b01      	subs	r3, #1
 8007626:	b29a      	uxth	r2, r3
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800762c:	e018      	b.n	8007660 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800762e:	f7fb fcf5 	bl	800301c <HAL_GetTick>
 8007632:	4602      	mov	r2, r0
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	683a      	ldr	r2, [r7, #0]
 800763a:	429a      	cmp	r2, r3
 800763c:	d803      	bhi.n	8007646 <HAL_SPI_Transmit+0x160>
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007644:	d102      	bne.n	800764c <HAL_SPI_Transmit+0x166>
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d109      	bne.n	8007660 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800765c:	2303      	movs	r3, #3
 800765e:	e082      	b.n	8007766 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007664:	b29b      	uxth	r3, r3
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1c7      	bne.n	80075fa <HAL_SPI_Transmit+0x114>
 800766a:	e053      	b.n	8007714 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d002      	beq.n	800767a <HAL_SPI_Transmit+0x194>
 8007674:	8b7b      	ldrh	r3, [r7, #26]
 8007676:	2b01      	cmp	r3, #1
 8007678:	d147      	bne.n	800770a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	330c      	adds	r3, #12
 8007684:	7812      	ldrb	r2, [r2, #0]
 8007686:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800768c:	1c5a      	adds	r2, r3, #1
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007696:	b29b      	uxth	r3, r3
 8007698:	3b01      	subs	r3, #1
 800769a:	b29a      	uxth	r2, r3
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80076a0:	e033      	b.n	800770a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	f003 0302 	and.w	r3, r3, #2
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d113      	bne.n	80076d8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	330c      	adds	r3, #12
 80076ba:	7812      	ldrb	r2, [r2, #0]
 80076bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076c2:	1c5a      	adds	r2, r3, #1
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	3b01      	subs	r3, #1
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80076d6:	e018      	b.n	800770a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076d8:	f7fb fca0 	bl	800301c <HAL_GetTick>
 80076dc:	4602      	mov	r2, r0
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	683a      	ldr	r2, [r7, #0]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d803      	bhi.n	80076f0 <HAL_SPI_Transmit+0x20a>
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076ee:	d102      	bne.n	80076f6 <HAL_SPI_Transmit+0x210>
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d109      	bne.n	800770a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007706:	2303      	movs	r3, #3
 8007708:	e02d      	b.n	8007766 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800770e:	b29b      	uxth	r3, r3
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1c6      	bne.n	80076a2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007714:	69fa      	ldr	r2, [r7, #28]
 8007716:	6839      	ldr	r1, [r7, #0]
 8007718:	68f8      	ldr	r0, [r7, #12]
 800771a:	f000 fd21 	bl	8008160 <SPI_EndRxTxTransaction>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d002      	beq.n	800772a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2220      	movs	r2, #32
 8007728:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10a      	bne.n	8007748 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007732:	2300      	movs	r3, #0
 8007734:	617b      	str	r3, [r7, #20]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	617b      	str	r3, [r7, #20]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	617b      	str	r3, [r7, #20]
 8007746:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2200      	movs	r2, #0
 8007754:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800775c:	2b00      	cmp	r3, #0
 800775e:	d001      	beq.n	8007764 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e000      	b.n	8007766 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007764:	2300      	movs	r3, #0
  }
}
 8007766:	4618      	mov	r0, r3
 8007768:	3720      	adds	r7, #32
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b088      	sub	sp, #32
 8007772:	af02      	add	r7, sp, #8
 8007774:	60f8      	str	r0, [r7, #12]
 8007776:	60b9      	str	r1, [r7, #8]
 8007778:	603b      	str	r3, [r7, #0]
 800777a:	4613      	mov	r3, r2
 800777c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b01      	cmp	r3, #1
 8007788:	d001      	beq.n	800778e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800778a:	2302      	movs	r3, #2
 800778c:	e104      	b.n	8007998 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007796:	d112      	bne.n	80077be <HAL_SPI_Receive+0x50>
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10e      	bne.n	80077be <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2204      	movs	r2, #4
 80077a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80077a8:	88fa      	ldrh	r2, [r7, #6]
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	9300      	str	r3, [sp, #0]
 80077ae:	4613      	mov	r3, r2
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	68b9      	ldr	r1, [r7, #8]
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f000 f8f3 	bl	80079a0 <HAL_SPI_TransmitReceive>
 80077ba:	4603      	mov	r3, r0
 80077bc:	e0ec      	b.n	8007998 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077be:	f7fb fc2d 	bl	800301c <HAL_GetTick>
 80077c2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d002      	beq.n	80077d0 <HAL_SPI_Receive+0x62>
 80077ca:	88fb      	ldrh	r3, [r7, #6]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d101      	bne.n	80077d4 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e0e1      	b.n	8007998 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d101      	bne.n	80077e2 <HAL_SPI_Receive+0x74>
 80077de:	2302      	movs	r3, #2
 80077e0:	e0da      	b.n	8007998 <HAL_SPI_Receive+0x22a>
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2204      	movs	r2, #4
 80077ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	88fa      	ldrh	r2, [r7, #6]
 8007802:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	88fa      	ldrh	r2, [r7, #6]
 8007808:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2200      	movs	r2, #0
 800780e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2200      	movs	r2, #0
 8007826:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007830:	d10f      	bne.n	8007852 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007840:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007850:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800785c:	2b40      	cmp	r3, #64	@ 0x40
 800785e:	d007      	beq.n	8007870 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800786e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d170      	bne.n	800795a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007878:	e035      	b.n	80078e6 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	f003 0301 	and.w	r3, r3, #1
 8007884:	2b01      	cmp	r3, #1
 8007886:	d115      	bne.n	80078b4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f103 020c 	add.w	r2, r3, #12
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007894:	7812      	ldrb	r2, [r2, #0]
 8007896:	b2d2      	uxtb	r2, r2
 8007898:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800789e:	1c5a      	adds	r2, r3, #1
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	3b01      	subs	r3, #1
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80078b2:	e018      	b.n	80078e6 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078b4:	f7fb fbb2 	bl	800301c <HAL_GetTick>
 80078b8:	4602      	mov	r2, r0
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	1ad3      	subs	r3, r2, r3
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d803      	bhi.n	80078cc <HAL_SPI_Receive+0x15e>
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80078ca:	d102      	bne.n	80078d2 <HAL_SPI_Receive+0x164>
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d109      	bne.n	80078e6 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e058      	b.n	8007998 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1c4      	bne.n	800787a <HAL_SPI_Receive+0x10c>
 80078f0:	e038      	b.n	8007964 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	f003 0301 	and.w	r3, r3, #1
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d113      	bne.n	8007928 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68da      	ldr	r2, [r3, #12]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800790a:	b292      	uxth	r2, r2
 800790c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007912:	1c9a      	adds	r2, r3, #2
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800791c:	b29b      	uxth	r3, r3
 800791e:	3b01      	subs	r3, #1
 8007920:	b29a      	uxth	r2, r3
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007926:	e018      	b.n	800795a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007928:	f7fb fb78 	bl	800301c <HAL_GetTick>
 800792c:	4602      	mov	r2, r0
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	683a      	ldr	r2, [r7, #0]
 8007934:	429a      	cmp	r2, r3
 8007936:	d803      	bhi.n	8007940 <HAL_SPI_Receive+0x1d2>
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800793e:	d102      	bne.n	8007946 <HAL_SPI_Receive+0x1d8>
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d109      	bne.n	800795a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007956:	2303      	movs	r3, #3
 8007958:	e01e      	b.n	8007998 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800795e:	b29b      	uxth	r3, r3
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1c6      	bne.n	80078f2 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007964:	697a      	ldr	r2, [r7, #20]
 8007966:	6839      	ldr	r1, [r7, #0]
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f000 fb93 	bl	8008094 <SPI_EndRxTransaction>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d002      	beq.n	800797a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2220      	movs	r2, #32
 8007978:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800798e:	2b00      	cmp	r3, #0
 8007990:	d001      	beq.n	8007996 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	e000      	b.n	8007998 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8007996:	2300      	movs	r3, #0
  }
}
 8007998:	4618      	mov	r0, r3
 800799a:	3718      	adds	r7, #24
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b08a      	sub	sp, #40	@ 0x28
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
 80079ac:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80079ae:	2301      	movs	r3, #1
 80079b0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079b2:	f7fb fb33 	bl	800301c <HAL_GetTick>
 80079b6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80079be:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80079c6:	887b      	ldrh	r3, [r7, #2]
 80079c8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80079ca:	7ffb      	ldrb	r3, [r7, #31]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d00c      	beq.n	80079ea <HAL_SPI_TransmitReceive+0x4a>
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80079d6:	d106      	bne.n	80079e6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d102      	bne.n	80079e6 <HAL_SPI_TransmitReceive+0x46>
 80079e0:	7ffb      	ldrb	r3, [r7, #31]
 80079e2:	2b04      	cmp	r3, #4
 80079e4:	d001      	beq.n	80079ea <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80079e6:	2302      	movs	r3, #2
 80079e8:	e17f      	b.n	8007cea <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d005      	beq.n	80079fc <HAL_SPI_TransmitReceive+0x5c>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d002      	beq.n	80079fc <HAL_SPI_TransmitReceive+0x5c>
 80079f6:	887b      	ldrh	r3, [r7, #2]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d101      	bne.n	8007a00 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	e174      	b.n	8007cea <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d101      	bne.n	8007a0e <HAL_SPI_TransmitReceive+0x6e>
 8007a0a:	2302      	movs	r3, #2
 8007a0c:	e16d      	b.n	8007cea <HAL_SPI_TransmitReceive+0x34a>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2201      	movs	r2, #1
 8007a12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	2b04      	cmp	r3, #4
 8007a20:	d003      	beq.n	8007a2a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2205      	movs	r2, #5
 8007a26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	887a      	ldrh	r2, [r7, #2]
 8007a3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	887a      	ldrh	r2, [r7, #2]
 8007a40:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	68ba      	ldr	r2, [r7, #8]
 8007a46:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	887a      	ldrh	r2, [r7, #2]
 8007a4c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	887a      	ldrh	r2, [r7, #2]
 8007a52:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a6a:	2b40      	cmp	r3, #64	@ 0x40
 8007a6c:	d007      	beq.n	8007a7e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a86:	d17e      	bne.n	8007b86 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d002      	beq.n	8007a96 <HAL_SPI_TransmitReceive+0xf6>
 8007a90:	8afb      	ldrh	r3, [r7, #22]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d16c      	bne.n	8007b70 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a9a:	881a      	ldrh	r2, [r3, #0]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aa6:	1c9a      	adds	r2, r3, #2
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007aba:	e059      	b.n	8007b70 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	f003 0302 	and.w	r3, r3, #2
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	d11b      	bne.n	8007b02 <HAL_SPI_TransmitReceive+0x162>
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d016      	beq.n	8007b02 <HAL_SPI_TransmitReceive+0x162>
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d113      	bne.n	8007b02 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ade:	881a      	ldrh	r2, [r3, #0]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aea:	1c9a      	adds	r2, r3, #2
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	3b01      	subs	r3, #1
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007afe:	2300      	movs	r3, #0
 8007b00:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	f003 0301 	and.w	r3, r3, #1
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d119      	bne.n	8007b44 <HAL_SPI_TransmitReceive+0x1a4>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d014      	beq.n	8007b44 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68da      	ldr	r2, [r3, #12]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b24:	b292      	uxth	r2, r2
 8007b26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b2c:	1c9a      	adds	r2, r3, #2
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b40:	2301      	movs	r3, #1
 8007b42:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007b44:	f7fb fa6a 	bl	800301c <HAL_GetTick>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	6a3b      	ldr	r3, [r7, #32]
 8007b4c:	1ad3      	subs	r3, r2, r3
 8007b4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d80d      	bhi.n	8007b70 <HAL_SPI_TransmitReceive+0x1d0>
 8007b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b5a:	d009      	beq.n	8007b70 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	e0bc      	b.n	8007cea <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1a0      	bne.n	8007abc <HAL_SPI_TransmitReceive+0x11c>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d19b      	bne.n	8007abc <HAL_SPI_TransmitReceive+0x11c>
 8007b84:	e082      	b.n	8007c8c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d002      	beq.n	8007b94 <HAL_SPI_TransmitReceive+0x1f4>
 8007b8e:	8afb      	ldrh	r3, [r7, #22]
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d171      	bne.n	8007c78 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	330c      	adds	r3, #12
 8007b9e:	7812      	ldrb	r2, [r2, #0]
 8007ba0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ba6:	1c5a      	adds	r2, r3, #1
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bba:	e05d      	b.n	8007c78 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	f003 0302 	and.w	r3, r3, #2
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	d11c      	bne.n	8007c04 <HAL_SPI_TransmitReceive+0x264>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d017      	beq.n	8007c04 <HAL_SPI_TransmitReceive+0x264>
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d114      	bne.n	8007c04 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	330c      	adds	r3, #12
 8007be4:	7812      	ldrb	r2, [r2, #0]
 8007be6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bec:	1c5a      	adds	r2, r3, #1
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c00:	2300      	movs	r3, #0
 8007c02:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	f003 0301 	and.w	r3, r3, #1
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d119      	bne.n	8007c46 <HAL_SPI_TransmitReceive+0x2a6>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d014      	beq.n	8007c46 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68da      	ldr	r2, [r3, #12]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c26:	b2d2      	uxtb	r2, r2
 8007c28:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c2e:	1c5a      	adds	r2, r3, #1
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c42:	2301      	movs	r3, #1
 8007c44:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007c46:	f7fb f9e9 	bl	800301c <HAL_GetTick>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	6a3b      	ldr	r3, [r7, #32]
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d803      	bhi.n	8007c5e <HAL_SPI_TransmitReceive+0x2be>
 8007c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c5c:	d102      	bne.n	8007c64 <HAL_SPI_TransmitReceive+0x2c4>
 8007c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d109      	bne.n	8007c78 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007c74:	2303      	movs	r3, #3
 8007c76:	e038      	b.n	8007cea <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d19c      	bne.n	8007bbc <HAL_SPI_TransmitReceive+0x21c>
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d197      	bne.n	8007bbc <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c8c:	6a3a      	ldr	r2, [r7, #32]
 8007c8e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f000 fa65 	bl	8008160 <SPI_EndRxTxTransaction>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d008      	beq.n	8007cae <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2220      	movs	r2, #32
 8007ca0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e01d      	b.n	8007cea <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10a      	bne.n	8007ccc <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	613b      	str	r3, [r7, #16]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	613b      	str	r3, [r7, #16]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	613b      	str	r3, [r7, #16]
 8007cca:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d001      	beq.n	8007ce8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e000      	b.n	8007cea <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007ce8:	2300      	movs	r3, #0
  }
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3728      	adds	r7, #40	@ 0x28
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
	...

08007cf4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d001      	beq.n	8007d12 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8007d0e:	2302      	movs	r3, #2
 8007d10:	e097      	b.n	8007e42 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d002      	beq.n	8007d1e <HAL_SPI_Transmit_DMA+0x2a>
 8007d18:	88fb      	ldrh	r3, [r7, #6]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d101      	bne.n	8007d22 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e08f      	b.n	8007e42 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d101      	bne.n	8007d30 <HAL_SPI_Transmit_DMA+0x3c>
 8007d2c:	2302      	movs	r3, #2
 8007d2e:	e088      	b.n	8007e42 <HAL_SPI_Transmit_DMA+0x14e>
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2203      	movs	r2, #3
 8007d3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	88fa      	ldrh	r2, [r7, #6]
 8007d50:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	88fa      	ldrh	r2, [r7, #6]
 8007d56:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2200      	movs	r2, #0
 8007d74:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d7e:	d10f      	bne.n	8007da0 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d8e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007d9e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007da4:	4a29      	ldr	r2, [pc, #164]	@ (8007e4c <HAL_SPI_Transmit_DMA+0x158>)
 8007da6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dac:	4a28      	ldr	r2, [pc, #160]	@ (8007e50 <HAL_SPI_Transmit_DMA+0x15c>)
 8007dae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007db4:	4a27      	ldr	r2, [pc, #156]	@ (8007e54 <HAL_SPI_Transmit_DMA+0x160>)
 8007db6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dc8:	4619      	mov	r1, r3
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	330c      	adds	r3, #12
 8007dd0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007dd6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007dd8:	f7fb fafc 	bl	80033d4 <HAL_DMA_Start_IT>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00b      	beq.n	8007dfa <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007de6:	f043 0210 	orr.w	r2, r3, #16
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e023      	b.n	8007e42 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e04:	2b40      	cmp	r3, #64	@ 0x40
 8007e06:	d007      	beq.n	8007e18 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e16:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	685a      	ldr	r2, [r3, #4]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f042 0220 	orr.w	r2, r2, #32
 8007e2e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	685a      	ldr	r2, [r3, #4]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f042 0202 	orr.w	r2, r2, #2
 8007e3e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3710      	adds	r7, #16
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	08007f29 	.word	0x08007f29
 8007e50:	08007e81 	.word	0x08007e81
 8007e54:	08007f45 	.word	0x08007f45

08007e58 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007e60:	bf00      	nop
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007e74:	bf00      	nop
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b086      	sub	sp, #24
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e8c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e8e:	f7fb f8c5 	bl	800301c <HAL_GetTick>
 8007e92:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ea2:	d03b      	beq.n	8007f1c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	685a      	ldr	r2, [r3, #4]
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f022 0220 	bic.w	r2, r2, #32
 8007eb2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	685a      	ldr	r2, [r3, #4]
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f022 0202 	bic.w	r2, r2, #2
 8007ec2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007ec4:	693a      	ldr	r2, [r7, #16]
 8007ec6:	2164      	movs	r1, #100	@ 0x64
 8007ec8:	6978      	ldr	r0, [r7, #20]
 8007eca:	f000 f949 	bl	8008160 <SPI_EndRxTxTransaction>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d005      	beq.n	8007ee0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ed8:	f043 0220 	orr.w	r2, r3, #32
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d10a      	bne.n	8007efe <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ee8:	2300      	movs	r3, #0
 8007eea:	60fb      	str	r3, [r7, #12]
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	60fb      	str	r3, [r7, #12]
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	60fb      	str	r3, [r7, #12]
 8007efc:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	2200      	movs	r2, #0
 8007f02:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d003      	beq.n	8007f1c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007f14:	6978      	ldr	r0, [r7, #20]
 8007f16:	f7ff ffa9 	bl	8007e6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007f1a:	e002      	b.n	8007f22 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007f1c:	6978      	ldr	r0, [r7, #20]
 8007f1e:	f7fa fba5 	bl	800266c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007f22:	3718      	adds	r7, #24
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f34:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	f7ff ff8e 	bl	8007e58 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007f3c:	bf00      	nop
 8007f3e:	3710      	adds	r7, #16
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f50:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	685a      	ldr	r2, [r3, #4]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f022 0203 	bic.w	r2, r2, #3
 8007f60:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f66:	f043 0210 	orr.w	r2, r3, #16
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2201      	movs	r2, #1
 8007f72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	f7ff ff78 	bl	8007e6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007f7c:	bf00      	nop
 8007f7e:	3710      	adds	r7, #16
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b088      	sub	sp, #32
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	603b      	str	r3, [r7, #0]
 8007f90:	4613      	mov	r3, r2
 8007f92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007f94:	f7fb f842 	bl	800301c <HAL_GetTick>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f9c:	1a9b      	subs	r3, r3, r2
 8007f9e:	683a      	ldr	r2, [r7, #0]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007fa4:	f7fb f83a 	bl	800301c <HAL_GetTick>
 8007fa8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007faa:	4b39      	ldr	r3, [pc, #228]	@ (8008090 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	015b      	lsls	r3, r3, #5
 8007fb0:	0d1b      	lsrs	r3, r3, #20
 8007fb2:	69fa      	ldr	r2, [r7, #28]
 8007fb4:	fb02 f303 	mul.w	r3, r2, r3
 8007fb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007fba:	e054      	b.n	8008066 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007fc2:	d050      	beq.n	8008066 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007fc4:	f7fb f82a 	bl	800301c <HAL_GetTick>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	1ad3      	subs	r3, r2, r3
 8007fce:	69fa      	ldr	r2, [r7, #28]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d902      	bls.n	8007fda <SPI_WaitFlagStateUntilTimeout+0x56>
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d13d      	bne.n	8008056 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	685a      	ldr	r2, [r3, #4]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007fe8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ff2:	d111      	bne.n	8008018 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ffc:	d004      	beq.n	8008008 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008006:	d107      	bne.n	8008018 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008016:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800801c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008020:	d10f      	bne.n	8008042 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008030:	601a      	str	r2, [r3, #0]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008040:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2201      	movs	r2, #1
 8008046:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008052:	2303      	movs	r3, #3
 8008054:	e017      	b.n	8008086 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d101      	bne.n	8008060 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800805c:	2300      	movs	r3, #0
 800805e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	3b01      	subs	r3, #1
 8008064:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	689a      	ldr	r2, [r3, #8]
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	4013      	ands	r3, r2
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	429a      	cmp	r2, r3
 8008074:	bf0c      	ite	eq
 8008076:	2301      	moveq	r3, #1
 8008078:	2300      	movne	r3, #0
 800807a:	b2db      	uxtb	r3, r3
 800807c:	461a      	mov	r2, r3
 800807e:	79fb      	ldrb	r3, [r7, #7]
 8008080:	429a      	cmp	r2, r3
 8008082:	d19b      	bne.n	8007fbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3720      	adds	r7, #32
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	20000004 	.word	0x20000004

08008094 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af02      	add	r7, sp, #8
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80080a8:	d111      	bne.n	80080ce <SPI_EndRxTransaction+0x3a>
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080b2:	d004      	beq.n	80080be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080bc:	d107      	bne.n	80080ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80080cc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80080d6:	d12a      	bne.n	800812e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080e0:	d012      	beq.n	8008108 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	9300      	str	r3, [sp, #0]
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	2200      	movs	r2, #0
 80080ea:	2180      	movs	r1, #128	@ 0x80
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f7ff ff49 	bl	8007f84 <SPI_WaitFlagStateUntilTimeout>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d02d      	beq.n	8008154 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080fc:	f043 0220 	orr.w	r2, r3, #32
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008104:	2303      	movs	r3, #3
 8008106:	e026      	b.n	8008156 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	9300      	str	r3, [sp, #0]
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	2200      	movs	r2, #0
 8008110:	2101      	movs	r1, #1
 8008112:	68f8      	ldr	r0, [r7, #12]
 8008114:	f7ff ff36 	bl	8007f84 <SPI_WaitFlagStateUntilTimeout>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d01a      	beq.n	8008154 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008122:	f043 0220 	orr.w	r2, r3, #32
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800812a:	2303      	movs	r3, #3
 800812c:	e013      	b.n	8008156 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	9300      	str	r3, [sp, #0]
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	2200      	movs	r2, #0
 8008136:	2101      	movs	r1, #1
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f7ff ff23 	bl	8007f84 <SPI_WaitFlagStateUntilTimeout>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d007      	beq.n	8008154 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008148:	f043 0220 	orr.w	r2, r3, #32
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008150:	2303      	movs	r3, #3
 8008152:	e000      	b.n	8008156 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
	...

08008160 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b088      	sub	sp, #32
 8008164:	af02      	add	r7, sp, #8
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	9300      	str	r3, [sp, #0]
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	2201      	movs	r2, #1
 8008174:	2102      	movs	r1, #2
 8008176:	68f8      	ldr	r0, [r7, #12]
 8008178:	f7ff ff04 	bl	8007f84 <SPI_WaitFlagStateUntilTimeout>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d007      	beq.n	8008192 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008186:	f043 0220 	orr.w	r2, r3, #32
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800818e:	2303      	movs	r3, #3
 8008190:	e032      	b.n	80081f8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008192:	4b1b      	ldr	r3, [pc, #108]	@ (8008200 <SPI_EndRxTxTransaction+0xa0>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a1b      	ldr	r2, [pc, #108]	@ (8008204 <SPI_EndRxTxTransaction+0xa4>)
 8008198:	fba2 2303 	umull	r2, r3, r2, r3
 800819c:	0d5b      	lsrs	r3, r3, #21
 800819e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80081a2:	fb02 f303 	mul.w	r3, r2, r3
 80081a6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081b0:	d112      	bne.n	80081d8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	9300      	str	r3, [sp, #0]
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	2200      	movs	r2, #0
 80081ba:	2180      	movs	r1, #128	@ 0x80
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	f7ff fee1 	bl	8007f84 <SPI_WaitFlagStateUntilTimeout>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d016      	beq.n	80081f6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081cc:	f043 0220 	orr.w	r2, r3, #32
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80081d4:	2303      	movs	r3, #3
 80081d6:	e00f      	b.n	80081f8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00a      	beq.n	80081f4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	3b01      	subs	r3, #1
 80081e2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081ee:	2b80      	cmp	r3, #128	@ 0x80
 80081f0:	d0f2      	beq.n	80081d8 <SPI_EndRxTxTransaction+0x78>
 80081f2:	e000      	b.n	80081f6 <SPI_EndRxTxTransaction+0x96>
        break;
 80081f4:	bf00      	nop
  }

  return HAL_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3718      	adds	r7, #24
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	20000004 	.word	0x20000004
 8008204:	165e9f81 	.word	0x165e9f81

08008208 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d101      	bne.n	800821a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e041      	b.n	800829e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008220:	b2db      	uxtb	r3, r3
 8008222:	2b00      	cmp	r3, #0
 8008224:	d106      	bne.n	8008234 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f7fa fe00 	bl	8002e34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2202      	movs	r2, #2
 8008238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	3304      	adds	r3, #4
 8008244:	4619      	mov	r1, r3
 8008246:	4610      	mov	r0, r2
 8008248:	f000 fa7e 	bl	8008748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3708      	adds	r7, #8
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
	...

080082a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b085      	sub	sp, #20
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d001      	beq.n	80082c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	e04e      	b.n	800835e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2202      	movs	r2, #2
 80082c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68da      	ldr	r2, [r3, #12]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f042 0201 	orr.w	r2, r2, #1
 80082d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a23      	ldr	r2, [pc, #140]	@ (800836c <HAL_TIM_Base_Start_IT+0xc4>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d022      	beq.n	8008328 <HAL_TIM_Base_Start_IT+0x80>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082ea:	d01d      	beq.n	8008328 <HAL_TIM_Base_Start_IT+0x80>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a1f      	ldr	r2, [pc, #124]	@ (8008370 <HAL_TIM_Base_Start_IT+0xc8>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d018      	beq.n	8008328 <HAL_TIM_Base_Start_IT+0x80>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a1e      	ldr	r2, [pc, #120]	@ (8008374 <HAL_TIM_Base_Start_IT+0xcc>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d013      	beq.n	8008328 <HAL_TIM_Base_Start_IT+0x80>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a1c      	ldr	r2, [pc, #112]	@ (8008378 <HAL_TIM_Base_Start_IT+0xd0>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d00e      	beq.n	8008328 <HAL_TIM_Base_Start_IT+0x80>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a1b      	ldr	r2, [pc, #108]	@ (800837c <HAL_TIM_Base_Start_IT+0xd4>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d009      	beq.n	8008328 <HAL_TIM_Base_Start_IT+0x80>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a19      	ldr	r2, [pc, #100]	@ (8008380 <HAL_TIM_Base_Start_IT+0xd8>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d004      	beq.n	8008328 <HAL_TIM_Base_Start_IT+0x80>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a18      	ldr	r2, [pc, #96]	@ (8008384 <HAL_TIM_Base_Start_IT+0xdc>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d111      	bne.n	800834c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	f003 0307 	and.w	r3, r3, #7
 8008332:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2b06      	cmp	r3, #6
 8008338:	d010      	beq.n	800835c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f042 0201 	orr.w	r2, r2, #1
 8008348:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800834a:	e007      	b.n	800835c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f042 0201 	orr.w	r2, r2, #1
 800835a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3714      	adds	r7, #20
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr
 800836a:	bf00      	nop
 800836c:	40010000 	.word	0x40010000
 8008370:	40000400 	.word	0x40000400
 8008374:	40000800 	.word	0x40000800
 8008378:	40000c00 	.word	0x40000c00
 800837c:	40010400 	.word	0x40010400
 8008380:	40014000 	.word	0x40014000
 8008384:	40001800 	.word	0x40001800

08008388 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	f003 0302 	and.w	r3, r3, #2
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d020      	beq.n	80083ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f003 0302 	and.w	r3, r3, #2
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d01b      	beq.n	80083ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f06f 0202 	mvn.w	r2, #2
 80083bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2201      	movs	r2, #1
 80083c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	699b      	ldr	r3, [r3, #24]
 80083ca:	f003 0303 	and.w	r3, r3, #3
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d003      	beq.n	80083da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 f999 	bl	800870a <HAL_TIM_IC_CaptureCallback>
 80083d8:	e005      	b.n	80083e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 f98b 	bl	80086f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 f99c 	bl	800871e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	f003 0304 	and.w	r3, r3, #4
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d020      	beq.n	8008438 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f003 0304 	and.w	r3, r3, #4
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d01b      	beq.n	8008438 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f06f 0204 	mvn.w	r2, #4
 8008408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2202      	movs	r2, #2
 800840e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800841a:	2b00      	cmp	r3, #0
 800841c:	d003      	beq.n	8008426 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 f973 	bl	800870a <HAL_TIM_IC_CaptureCallback>
 8008424:	e005      	b.n	8008432 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f965 	bl	80086f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 f976 	bl	800871e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	f003 0308 	and.w	r3, r3, #8
 800843e:	2b00      	cmp	r3, #0
 8008440:	d020      	beq.n	8008484 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f003 0308 	and.w	r3, r3, #8
 8008448:	2b00      	cmp	r3, #0
 800844a:	d01b      	beq.n	8008484 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f06f 0208 	mvn.w	r2, #8
 8008454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2204      	movs	r2, #4
 800845a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	69db      	ldr	r3, [r3, #28]
 8008462:	f003 0303 	and.w	r3, r3, #3
 8008466:	2b00      	cmp	r3, #0
 8008468:	d003      	beq.n	8008472 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 f94d 	bl	800870a <HAL_TIM_IC_CaptureCallback>
 8008470:	e005      	b.n	800847e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 f93f 	bl	80086f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 f950 	bl	800871e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	f003 0310 	and.w	r3, r3, #16
 800848a:	2b00      	cmp	r3, #0
 800848c:	d020      	beq.n	80084d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f003 0310 	and.w	r3, r3, #16
 8008494:	2b00      	cmp	r3, #0
 8008496:	d01b      	beq.n	80084d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f06f 0210 	mvn.w	r2, #16
 80084a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2208      	movs	r2, #8
 80084a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	69db      	ldr	r3, [r3, #28]
 80084ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d003      	beq.n	80084be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 f927 	bl	800870a <HAL_TIM_IC_CaptureCallback>
 80084bc:	e005      	b.n	80084ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f919 	bl	80086f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 f92a 	bl	800871e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	f003 0301 	and.w	r3, r3, #1
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00c      	beq.n	80084f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f003 0301 	and.w	r3, r3, #1
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d007      	beq.n	80084f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f06f 0201 	mvn.w	r2, #1
 80084ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f7fa f9b6 	bl	8002860 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00c      	beq.n	8008518 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008504:	2b00      	cmp	r3, #0
 8008506:	d007      	beq.n	8008518 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 fae4 	bl	8008ae0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00c      	beq.n	800853c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008528:	2b00      	cmp	r3, #0
 800852a:	d007      	beq.n	800853c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f8fb 	bl	8008732 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	f003 0320 	and.w	r3, r3, #32
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00c      	beq.n	8008560 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f003 0320 	and.w	r3, r3, #32
 800854c:	2b00      	cmp	r3, #0
 800854e:	d007      	beq.n	8008560 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f06f 0220 	mvn.w	r2, #32
 8008558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fab6 	bl	8008acc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008560:	bf00      	nop
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008572:	2300      	movs	r3, #0
 8008574:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800857c:	2b01      	cmp	r3, #1
 800857e:	d101      	bne.n	8008584 <HAL_TIM_ConfigClockSource+0x1c>
 8008580:	2302      	movs	r3, #2
 8008582:	e0b4      	b.n	80086ee <HAL_TIM_ConfigClockSource+0x186>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2202      	movs	r2, #2
 8008590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80085a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80085aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	68ba      	ldr	r2, [r7, #8]
 80085b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085bc:	d03e      	beq.n	800863c <HAL_TIM_ConfigClockSource+0xd4>
 80085be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085c2:	f200 8087 	bhi.w	80086d4 <HAL_TIM_ConfigClockSource+0x16c>
 80085c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085ca:	f000 8086 	beq.w	80086da <HAL_TIM_ConfigClockSource+0x172>
 80085ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085d2:	d87f      	bhi.n	80086d4 <HAL_TIM_ConfigClockSource+0x16c>
 80085d4:	2b70      	cmp	r3, #112	@ 0x70
 80085d6:	d01a      	beq.n	800860e <HAL_TIM_ConfigClockSource+0xa6>
 80085d8:	2b70      	cmp	r3, #112	@ 0x70
 80085da:	d87b      	bhi.n	80086d4 <HAL_TIM_ConfigClockSource+0x16c>
 80085dc:	2b60      	cmp	r3, #96	@ 0x60
 80085de:	d050      	beq.n	8008682 <HAL_TIM_ConfigClockSource+0x11a>
 80085e0:	2b60      	cmp	r3, #96	@ 0x60
 80085e2:	d877      	bhi.n	80086d4 <HAL_TIM_ConfigClockSource+0x16c>
 80085e4:	2b50      	cmp	r3, #80	@ 0x50
 80085e6:	d03c      	beq.n	8008662 <HAL_TIM_ConfigClockSource+0xfa>
 80085e8:	2b50      	cmp	r3, #80	@ 0x50
 80085ea:	d873      	bhi.n	80086d4 <HAL_TIM_ConfigClockSource+0x16c>
 80085ec:	2b40      	cmp	r3, #64	@ 0x40
 80085ee:	d058      	beq.n	80086a2 <HAL_TIM_ConfigClockSource+0x13a>
 80085f0:	2b40      	cmp	r3, #64	@ 0x40
 80085f2:	d86f      	bhi.n	80086d4 <HAL_TIM_ConfigClockSource+0x16c>
 80085f4:	2b30      	cmp	r3, #48	@ 0x30
 80085f6:	d064      	beq.n	80086c2 <HAL_TIM_ConfigClockSource+0x15a>
 80085f8:	2b30      	cmp	r3, #48	@ 0x30
 80085fa:	d86b      	bhi.n	80086d4 <HAL_TIM_ConfigClockSource+0x16c>
 80085fc:	2b20      	cmp	r3, #32
 80085fe:	d060      	beq.n	80086c2 <HAL_TIM_ConfigClockSource+0x15a>
 8008600:	2b20      	cmp	r3, #32
 8008602:	d867      	bhi.n	80086d4 <HAL_TIM_ConfigClockSource+0x16c>
 8008604:	2b00      	cmp	r3, #0
 8008606:	d05c      	beq.n	80086c2 <HAL_TIM_ConfigClockSource+0x15a>
 8008608:	2b10      	cmp	r3, #16
 800860a:	d05a      	beq.n	80086c2 <HAL_TIM_ConfigClockSource+0x15a>
 800860c:	e062      	b.n	80086d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800861e:	f000 f9b9 	bl	8008994 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008630:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	68ba      	ldr	r2, [r7, #8]
 8008638:	609a      	str	r2, [r3, #8]
      break;
 800863a:	e04f      	b.n	80086dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800864c:	f000 f9a2 	bl	8008994 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	689a      	ldr	r2, [r3, #8]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800865e:	609a      	str	r2, [r3, #8]
      break;
 8008660:	e03c      	b.n	80086dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800866e:	461a      	mov	r2, r3
 8008670:	f000 f916 	bl	80088a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2150      	movs	r1, #80	@ 0x50
 800867a:	4618      	mov	r0, r3
 800867c:	f000 f96f 	bl	800895e <TIM_ITRx_SetConfig>
      break;
 8008680:	e02c      	b.n	80086dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800868e:	461a      	mov	r2, r3
 8008690:	f000 f935 	bl	80088fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2160      	movs	r1, #96	@ 0x60
 800869a:	4618      	mov	r0, r3
 800869c:	f000 f95f 	bl	800895e <TIM_ITRx_SetConfig>
      break;
 80086a0:	e01c      	b.n	80086dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086ae:	461a      	mov	r2, r3
 80086b0:	f000 f8f6 	bl	80088a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2140      	movs	r1, #64	@ 0x40
 80086ba:	4618      	mov	r0, r3
 80086bc:	f000 f94f 	bl	800895e <TIM_ITRx_SetConfig>
      break;
 80086c0:	e00c      	b.n	80086dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4619      	mov	r1, r3
 80086cc:	4610      	mov	r0, r2
 80086ce:	f000 f946 	bl	800895e <TIM_ITRx_SetConfig>
      break;
 80086d2:	e003      	b.n	80086dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	73fb      	strb	r3, [r7, #15]
      break;
 80086d8:	e000      	b.n	80086dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80086da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80086ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3710      	adds	r7, #16
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}

080086f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086f6:	b480      	push	{r7}
 80086f8:	b083      	sub	sp, #12
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086fe:	bf00      	nop
 8008700:	370c      	adds	r7, #12
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr

0800870a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800870a:	b480      	push	{r7}
 800870c:	b083      	sub	sp, #12
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008712:	bf00      	nop
 8008714:	370c      	adds	r7, #12
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr

0800871e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800871e:	b480      	push	{r7}
 8008720:	b083      	sub	sp, #12
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008726:	bf00      	nop
 8008728:	370c      	adds	r7, #12
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr

08008732 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008732:	b480      	push	{r7}
 8008734:	b083      	sub	sp, #12
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800873a:	bf00      	nop
 800873c:	370c      	adds	r7, #12
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr
	...

08008748 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008748:	b480      	push	{r7}
 800874a:	b085      	sub	sp, #20
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a46      	ldr	r2, [pc, #280]	@ (8008874 <TIM_Base_SetConfig+0x12c>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d013      	beq.n	8008788 <TIM_Base_SetConfig+0x40>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008766:	d00f      	beq.n	8008788 <TIM_Base_SetConfig+0x40>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a43      	ldr	r2, [pc, #268]	@ (8008878 <TIM_Base_SetConfig+0x130>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d00b      	beq.n	8008788 <TIM_Base_SetConfig+0x40>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a42      	ldr	r2, [pc, #264]	@ (800887c <TIM_Base_SetConfig+0x134>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d007      	beq.n	8008788 <TIM_Base_SetConfig+0x40>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a41      	ldr	r2, [pc, #260]	@ (8008880 <TIM_Base_SetConfig+0x138>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d003      	beq.n	8008788 <TIM_Base_SetConfig+0x40>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a40      	ldr	r2, [pc, #256]	@ (8008884 <TIM_Base_SetConfig+0x13c>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d108      	bne.n	800879a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800878e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	4313      	orrs	r3, r2
 8008798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a35      	ldr	r2, [pc, #212]	@ (8008874 <TIM_Base_SetConfig+0x12c>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d02b      	beq.n	80087fa <TIM_Base_SetConfig+0xb2>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087a8:	d027      	beq.n	80087fa <TIM_Base_SetConfig+0xb2>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a32      	ldr	r2, [pc, #200]	@ (8008878 <TIM_Base_SetConfig+0x130>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d023      	beq.n	80087fa <TIM_Base_SetConfig+0xb2>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a31      	ldr	r2, [pc, #196]	@ (800887c <TIM_Base_SetConfig+0x134>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d01f      	beq.n	80087fa <TIM_Base_SetConfig+0xb2>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a30      	ldr	r2, [pc, #192]	@ (8008880 <TIM_Base_SetConfig+0x138>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d01b      	beq.n	80087fa <TIM_Base_SetConfig+0xb2>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a2f      	ldr	r2, [pc, #188]	@ (8008884 <TIM_Base_SetConfig+0x13c>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d017      	beq.n	80087fa <TIM_Base_SetConfig+0xb2>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a2e      	ldr	r2, [pc, #184]	@ (8008888 <TIM_Base_SetConfig+0x140>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d013      	beq.n	80087fa <TIM_Base_SetConfig+0xb2>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a2d      	ldr	r2, [pc, #180]	@ (800888c <TIM_Base_SetConfig+0x144>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d00f      	beq.n	80087fa <TIM_Base_SetConfig+0xb2>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a2c      	ldr	r2, [pc, #176]	@ (8008890 <TIM_Base_SetConfig+0x148>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d00b      	beq.n	80087fa <TIM_Base_SetConfig+0xb2>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4a2b      	ldr	r2, [pc, #172]	@ (8008894 <TIM_Base_SetConfig+0x14c>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d007      	beq.n	80087fa <TIM_Base_SetConfig+0xb2>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a2a      	ldr	r2, [pc, #168]	@ (8008898 <TIM_Base_SetConfig+0x150>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d003      	beq.n	80087fa <TIM_Base_SetConfig+0xb2>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a29      	ldr	r2, [pc, #164]	@ (800889c <TIM_Base_SetConfig+0x154>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d108      	bne.n	800880c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	68fa      	ldr	r2, [r7, #12]
 8008808:	4313      	orrs	r3, r2
 800880a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	695b      	ldr	r3, [r3, #20]
 8008816:	4313      	orrs	r3, r2
 8008818:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	689a      	ldr	r2, [r3, #8]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a10      	ldr	r2, [pc, #64]	@ (8008874 <TIM_Base_SetConfig+0x12c>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d003      	beq.n	8008840 <TIM_Base_SetConfig+0xf8>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a12      	ldr	r2, [pc, #72]	@ (8008884 <TIM_Base_SetConfig+0x13c>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d103      	bne.n	8008848 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	691a      	ldr	r2, [r3, #16]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	f003 0301 	and.w	r3, r3, #1
 8008856:	2b01      	cmp	r3, #1
 8008858:	d105      	bne.n	8008866 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	691b      	ldr	r3, [r3, #16]
 800885e:	f023 0201 	bic.w	r2, r3, #1
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	611a      	str	r2, [r3, #16]
  }
}
 8008866:	bf00      	nop
 8008868:	3714      	adds	r7, #20
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	40010000 	.word	0x40010000
 8008878:	40000400 	.word	0x40000400
 800887c:	40000800 	.word	0x40000800
 8008880:	40000c00 	.word	0x40000c00
 8008884:	40010400 	.word	0x40010400
 8008888:	40014000 	.word	0x40014000
 800888c:	40014400 	.word	0x40014400
 8008890:	40014800 	.word	0x40014800
 8008894:	40001800 	.word	0x40001800
 8008898:	40001c00 	.word	0x40001c00
 800889c:	40002000 	.word	0x40002000

080088a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b087      	sub	sp, #28
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6a1b      	ldr	r3, [r3, #32]
 80088b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6a1b      	ldr	r3, [r3, #32]
 80088b6:	f023 0201 	bic.w	r2, r3, #1
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	699b      	ldr	r3, [r3, #24]
 80088c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80088ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	011b      	lsls	r3, r3, #4
 80088d0:	693a      	ldr	r2, [r7, #16]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	f023 030a 	bic.w	r3, r3, #10
 80088dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80088de:	697a      	ldr	r2, [r7, #20]
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	4313      	orrs	r3, r2
 80088e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	693a      	ldr	r2, [r7, #16]
 80088ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	621a      	str	r2, [r3, #32]
}
 80088f2:	bf00      	nop
 80088f4:	371c      	adds	r7, #28
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr

080088fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088fe:	b480      	push	{r7}
 8008900:	b087      	sub	sp, #28
 8008902:	af00      	add	r7, sp, #0
 8008904:	60f8      	str	r0, [r7, #12]
 8008906:	60b9      	str	r1, [r7, #8]
 8008908:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6a1b      	ldr	r3, [r3, #32]
 800890e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6a1b      	ldr	r3, [r3, #32]
 8008914:	f023 0210 	bic.w	r2, r3, #16
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	699b      	ldr	r3, [r3, #24]
 8008920:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008928:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	031b      	lsls	r3, r3, #12
 800892e:	693a      	ldr	r2, [r7, #16]
 8008930:	4313      	orrs	r3, r2
 8008932:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800893a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	011b      	lsls	r3, r3, #4
 8008940:	697a      	ldr	r2, [r7, #20]
 8008942:	4313      	orrs	r3, r2
 8008944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	693a      	ldr	r2, [r7, #16]
 800894a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	697a      	ldr	r2, [r7, #20]
 8008950:	621a      	str	r2, [r3, #32]
}
 8008952:	bf00      	nop
 8008954:	371c      	adds	r7, #28
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr

0800895e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800895e:	b480      	push	{r7}
 8008960:	b085      	sub	sp, #20
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
 8008966:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008974:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008976:	683a      	ldr	r2, [r7, #0]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	4313      	orrs	r3, r2
 800897c:	f043 0307 	orr.w	r3, r3, #7
 8008980:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	68fa      	ldr	r2, [r7, #12]
 8008986:	609a      	str	r2, [r3, #8]
}
 8008988:	bf00      	nop
 800898a:	3714      	adds	r7, #20
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008994:	b480      	push	{r7}
 8008996:	b087      	sub	sp, #28
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	607a      	str	r2, [r7, #4]
 80089a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80089ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	021a      	lsls	r2, r3, #8
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	431a      	orrs	r2, r3
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	697a      	ldr	r2, [r7, #20]
 80089be:	4313      	orrs	r3, r2
 80089c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	697a      	ldr	r2, [r7, #20]
 80089c6:	609a      	str	r2, [r3, #8]
}
 80089c8:	bf00      	nop
 80089ca:	371c      	adds	r7, #28
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d101      	bne.n	80089ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80089e8:	2302      	movs	r3, #2
 80089ea:	e05a      	b.n	8008aa2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2202      	movs	r2, #2
 80089f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a21      	ldr	r2, [pc, #132]	@ (8008ab0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d022      	beq.n	8008a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a38:	d01d      	beq.n	8008a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a1d      	ldr	r2, [pc, #116]	@ (8008ab4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d018      	beq.n	8008a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a1b      	ldr	r2, [pc, #108]	@ (8008ab8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d013      	beq.n	8008a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a1a      	ldr	r2, [pc, #104]	@ (8008abc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d00e      	beq.n	8008a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a18      	ldr	r2, [pc, #96]	@ (8008ac0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d009      	beq.n	8008a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a17      	ldr	r2, [pc, #92]	@ (8008ac4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d004      	beq.n	8008a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a15      	ldr	r2, [pc, #84]	@ (8008ac8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d10c      	bne.n	8008a90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	68ba      	ldr	r2, [r7, #8]
 8008a84:	4313      	orrs	r3, r2
 8008a86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	68ba      	ldr	r2, [r7, #8]
 8008a8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2201      	movs	r2, #1
 8008a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008aa0:	2300      	movs	r3, #0
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3714      	adds	r7, #20
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	40010000 	.word	0x40010000
 8008ab4:	40000400 	.word	0x40000400
 8008ab8:	40000800 	.word	0x40000800
 8008abc:	40000c00 	.word	0x40000c00
 8008ac0:	40010400 	.word	0x40010400
 8008ac4:	40014000 	.word	0x40014000
 8008ac8:	40001800 	.word	0x40001800

08008acc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ad4:	bf00      	nop
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ae8:	bf00      	nop
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d101      	bne.n	8008b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	e042      	b.n	8008b8c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d106      	bne.n	8008b20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f7fa f9d6 	bl	8002ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2224      	movs	r2, #36	@ 0x24
 8008b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	68da      	ldr	r2, [r3, #12]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008b36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 f973 	bl	8008e24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	691a      	ldr	r2, [r3, #16]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008b4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	695a      	ldr	r2, [r3, #20]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008b5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68da      	ldr	r2, [r3, #12]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008b6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2220      	movs	r2, #32
 8008b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2220      	movs	r2, #32
 8008b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3708      	adds	r7, #8
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b08a      	sub	sp, #40	@ 0x28
 8008b98:	af02      	add	r7, sp, #8
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	603b      	str	r3, [r7, #0]
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	2b20      	cmp	r3, #32
 8008bb2:	d175      	bne.n	8008ca0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d002      	beq.n	8008bc0 <HAL_UART_Transmit+0x2c>
 8008bba:	88fb      	ldrh	r3, [r7, #6]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d101      	bne.n	8008bc4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e06e      	b.n	8008ca2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2221      	movs	r2, #33	@ 0x21
 8008bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008bd2:	f7fa fa23 	bl	800301c <HAL_GetTick>
 8008bd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	88fa      	ldrh	r2, [r7, #6]
 8008bdc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	88fa      	ldrh	r2, [r7, #6]
 8008be2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bec:	d108      	bne.n	8008c00 <HAL_UART_Transmit+0x6c>
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	691b      	ldr	r3, [r3, #16]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d104      	bne.n	8008c00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	61bb      	str	r3, [r7, #24]
 8008bfe:	e003      	b.n	8008c08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c04:	2300      	movs	r3, #0
 8008c06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008c08:	e02e      	b.n	8008c68 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	9300      	str	r3, [sp, #0]
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	2200      	movs	r2, #0
 8008c12:	2180      	movs	r1, #128	@ 0x80
 8008c14:	68f8      	ldr	r0, [r7, #12]
 8008c16:	f000 f848 	bl	8008caa <UART_WaitOnFlagUntilTimeout>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d005      	beq.n	8008c2c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2220      	movs	r2, #32
 8008c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008c28:	2303      	movs	r3, #3
 8008c2a:	e03a      	b.n	8008ca2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d10b      	bne.n	8008c4a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	881b      	ldrh	r3, [r3, #0]
 8008c36:	461a      	mov	r2, r3
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	3302      	adds	r3, #2
 8008c46:	61bb      	str	r3, [r7, #24]
 8008c48:	e007      	b.n	8008c5a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	781a      	ldrb	r2, [r3, #0]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	3301      	adds	r3, #1
 8008c58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	3b01      	subs	r3, #1
 8008c62:	b29a      	uxth	r2, r3
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1cb      	bne.n	8008c0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	9300      	str	r3, [sp, #0]
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	2140      	movs	r1, #64	@ 0x40
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	f000 f814 	bl	8008caa <UART_WaitOnFlagUntilTimeout>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d005      	beq.n	8008c94 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2220      	movs	r2, #32
 8008c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008c90:	2303      	movs	r3, #3
 8008c92:	e006      	b.n	8008ca2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2220      	movs	r2, #32
 8008c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	e000      	b.n	8008ca2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008ca0:	2302      	movs	r3, #2
  }
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3720      	adds	r7, #32
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b086      	sub	sp, #24
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	60f8      	str	r0, [r7, #12]
 8008cb2:	60b9      	str	r1, [r7, #8]
 8008cb4:	603b      	str	r3, [r7, #0]
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cba:	e03b      	b.n	8008d34 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cbc:	6a3b      	ldr	r3, [r7, #32]
 8008cbe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008cc2:	d037      	beq.n	8008d34 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cc4:	f7fa f9aa 	bl	800301c <HAL_GetTick>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	1ad3      	subs	r3, r2, r3
 8008cce:	6a3a      	ldr	r2, [r7, #32]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d302      	bcc.n	8008cda <UART_WaitOnFlagUntilTimeout+0x30>
 8008cd4:	6a3b      	ldr	r3, [r7, #32]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d101      	bne.n	8008cde <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008cda:	2303      	movs	r3, #3
 8008cdc:	e03a      	b.n	8008d54 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	f003 0304 	and.w	r3, r3, #4
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d023      	beq.n	8008d34 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	2b80      	cmp	r3, #128	@ 0x80
 8008cf0:	d020      	beq.n	8008d34 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	2b40      	cmp	r3, #64	@ 0x40
 8008cf6:	d01d      	beq.n	8008d34 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 0308 	and.w	r3, r3, #8
 8008d02:	2b08      	cmp	r3, #8
 8008d04:	d116      	bne.n	8008d34 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008d06:	2300      	movs	r3, #0
 8008d08:	617b      	str	r3, [r7, #20]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	617b      	str	r3, [r7, #20]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	617b      	str	r3, [r7, #20]
 8008d1a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	f000 f81d 	bl	8008d5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2208      	movs	r2, #8
 8008d26:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	e00f      	b.n	8008d54 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	4013      	ands	r3, r2
 8008d3e:	68ba      	ldr	r2, [r7, #8]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	bf0c      	ite	eq
 8008d44:	2301      	moveq	r3, #1
 8008d46:	2300      	movne	r3, #0
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	79fb      	ldrb	r3, [r7, #7]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d0b4      	beq.n	8008cbc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3718      	adds	r7, #24
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b095      	sub	sp, #84	@ 0x54
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	330c      	adds	r3, #12
 8008d6a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d6e:	e853 3f00 	ldrex	r3, [r3]
 8008d72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	330c      	adds	r3, #12
 8008d82:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008d84:	643a      	str	r2, [r7, #64]	@ 0x40
 8008d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d8c:	e841 2300 	strex	r3, r2, [r1]
 8008d90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d1e5      	bne.n	8008d64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	3314      	adds	r3, #20
 8008d9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da0:	6a3b      	ldr	r3, [r7, #32]
 8008da2:	e853 3f00 	ldrex	r3, [r3]
 8008da6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	f023 0301 	bic.w	r3, r3, #1
 8008dae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	3314      	adds	r3, #20
 8008db6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008db8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008dba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008dbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008dc0:	e841 2300 	strex	r3, r2, [r1]
 8008dc4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d1e5      	bne.n	8008d98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d119      	bne.n	8008e08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	330c      	adds	r3, #12
 8008dda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	e853 3f00 	ldrex	r3, [r3]
 8008de2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	f023 0310 	bic.w	r3, r3, #16
 8008dea:	647b      	str	r3, [r7, #68]	@ 0x44
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	330c      	adds	r3, #12
 8008df2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008df4:	61ba      	str	r2, [r7, #24]
 8008df6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df8:	6979      	ldr	r1, [r7, #20]
 8008dfa:	69ba      	ldr	r2, [r7, #24]
 8008dfc:	e841 2300 	strex	r3, r2, [r1]
 8008e00:	613b      	str	r3, [r7, #16]
   return(result);
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d1e5      	bne.n	8008dd4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2220      	movs	r2, #32
 8008e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008e16:	bf00      	nop
 8008e18:	3754      	adds	r7, #84	@ 0x54
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr
	...

08008e24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e28:	b0c0      	sub	sp, #256	@ 0x100
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	691b      	ldr	r3, [r3, #16]
 8008e38:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e40:	68d9      	ldr	r1, [r3, #12]
 8008e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	ea40 0301 	orr.w	r3, r0, r1
 8008e4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e52:	689a      	ldr	r2, [r3, #8]
 8008e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e58:	691b      	ldr	r3, [r3, #16]
 8008e5a:	431a      	orrs	r2, r3
 8008e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e60:	695b      	ldr	r3, [r3, #20]
 8008e62:	431a      	orrs	r2, r3
 8008e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e68:	69db      	ldr	r3, [r3, #28]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008e7c:	f021 010c 	bic.w	r1, r1, #12
 8008e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008e8a:	430b      	orrs	r3, r1
 8008e8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	695b      	ldr	r3, [r3, #20]
 8008e96:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e9e:	6999      	ldr	r1, [r3, #24]
 8008ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	ea40 0301 	orr.w	r3, r0, r1
 8008eaa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	4b8f      	ldr	r3, [pc, #572]	@ (80090f0 <UART_SetConfig+0x2cc>)
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d005      	beq.n	8008ec4 <UART_SetConfig+0xa0>
 8008eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	4b8d      	ldr	r3, [pc, #564]	@ (80090f4 <UART_SetConfig+0x2d0>)
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d104      	bne.n	8008ece <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ec4:	f7fe f84c 	bl	8006f60 <HAL_RCC_GetPCLK2Freq>
 8008ec8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008ecc:	e003      	b.n	8008ed6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ece:	f7fe f833 	bl	8006f38 <HAL_RCC_GetPCLK1Freq>
 8008ed2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008eda:	69db      	ldr	r3, [r3, #28]
 8008edc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ee0:	f040 810c 	bne.w	80090fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008ee4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008eee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008ef2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008ef6:	4622      	mov	r2, r4
 8008ef8:	462b      	mov	r3, r5
 8008efa:	1891      	adds	r1, r2, r2
 8008efc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008efe:	415b      	adcs	r3, r3
 8008f00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008f06:	4621      	mov	r1, r4
 8008f08:	eb12 0801 	adds.w	r8, r2, r1
 8008f0c:	4629      	mov	r1, r5
 8008f0e:	eb43 0901 	adc.w	r9, r3, r1
 8008f12:	f04f 0200 	mov.w	r2, #0
 8008f16:	f04f 0300 	mov.w	r3, #0
 8008f1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008f1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008f22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008f26:	4690      	mov	r8, r2
 8008f28:	4699      	mov	r9, r3
 8008f2a:	4623      	mov	r3, r4
 8008f2c:	eb18 0303 	adds.w	r3, r8, r3
 8008f30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008f34:	462b      	mov	r3, r5
 8008f36:	eb49 0303 	adc.w	r3, r9, r3
 8008f3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008f4a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008f4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008f52:	460b      	mov	r3, r1
 8008f54:	18db      	adds	r3, r3, r3
 8008f56:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f58:	4613      	mov	r3, r2
 8008f5a:	eb42 0303 	adc.w	r3, r2, r3
 8008f5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008f60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008f64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008f68:	f7f7 fe2e 	bl	8000bc8 <__aeabi_uldivmod>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	460b      	mov	r3, r1
 8008f70:	4b61      	ldr	r3, [pc, #388]	@ (80090f8 <UART_SetConfig+0x2d4>)
 8008f72:	fba3 2302 	umull	r2, r3, r3, r2
 8008f76:	095b      	lsrs	r3, r3, #5
 8008f78:	011c      	lsls	r4, r3, #4
 8008f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008f84:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008f88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008f8c:	4642      	mov	r2, r8
 8008f8e:	464b      	mov	r3, r9
 8008f90:	1891      	adds	r1, r2, r2
 8008f92:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008f94:	415b      	adcs	r3, r3
 8008f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008f9c:	4641      	mov	r1, r8
 8008f9e:	eb12 0a01 	adds.w	sl, r2, r1
 8008fa2:	4649      	mov	r1, r9
 8008fa4:	eb43 0b01 	adc.w	fp, r3, r1
 8008fa8:	f04f 0200 	mov.w	r2, #0
 8008fac:	f04f 0300 	mov.w	r3, #0
 8008fb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008fb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008fb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008fbc:	4692      	mov	sl, r2
 8008fbe:	469b      	mov	fp, r3
 8008fc0:	4643      	mov	r3, r8
 8008fc2:	eb1a 0303 	adds.w	r3, sl, r3
 8008fc6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008fca:	464b      	mov	r3, r9
 8008fcc:	eb4b 0303 	adc.w	r3, fp, r3
 8008fd0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008fe0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008fe4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008fe8:	460b      	mov	r3, r1
 8008fea:	18db      	adds	r3, r3, r3
 8008fec:	643b      	str	r3, [r7, #64]	@ 0x40
 8008fee:	4613      	mov	r3, r2
 8008ff0:	eb42 0303 	adc.w	r3, r2, r3
 8008ff4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ff6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008ffa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008ffe:	f7f7 fde3 	bl	8000bc8 <__aeabi_uldivmod>
 8009002:	4602      	mov	r2, r0
 8009004:	460b      	mov	r3, r1
 8009006:	4611      	mov	r1, r2
 8009008:	4b3b      	ldr	r3, [pc, #236]	@ (80090f8 <UART_SetConfig+0x2d4>)
 800900a:	fba3 2301 	umull	r2, r3, r3, r1
 800900e:	095b      	lsrs	r3, r3, #5
 8009010:	2264      	movs	r2, #100	@ 0x64
 8009012:	fb02 f303 	mul.w	r3, r2, r3
 8009016:	1acb      	subs	r3, r1, r3
 8009018:	00db      	lsls	r3, r3, #3
 800901a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800901e:	4b36      	ldr	r3, [pc, #216]	@ (80090f8 <UART_SetConfig+0x2d4>)
 8009020:	fba3 2302 	umull	r2, r3, r3, r2
 8009024:	095b      	lsrs	r3, r3, #5
 8009026:	005b      	lsls	r3, r3, #1
 8009028:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800902c:	441c      	add	r4, r3
 800902e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009032:	2200      	movs	r2, #0
 8009034:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009038:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800903c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009040:	4642      	mov	r2, r8
 8009042:	464b      	mov	r3, r9
 8009044:	1891      	adds	r1, r2, r2
 8009046:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009048:	415b      	adcs	r3, r3
 800904a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800904c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009050:	4641      	mov	r1, r8
 8009052:	1851      	adds	r1, r2, r1
 8009054:	6339      	str	r1, [r7, #48]	@ 0x30
 8009056:	4649      	mov	r1, r9
 8009058:	414b      	adcs	r3, r1
 800905a:	637b      	str	r3, [r7, #52]	@ 0x34
 800905c:	f04f 0200 	mov.w	r2, #0
 8009060:	f04f 0300 	mov.w	r3, #0
 8009064:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009068:	4659      	mov	r1, fp
 800906a:	00cb      	lsls	r3, r1, #3
 800906c:	4651      	mov	r1, sl
 800906e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009072:	4651      	mov	r1, sl
 8009074:	00ca      	lsls	r2, r1, #3
 8009076:	4610      	mov	r0, r2
 8009078:	4619      	mov	r1, r3
 800907a:	4603      	mov	r3, r0
 800907c:	4642      	mov	r2, r8
 800907e:	189b      	adds	r3, r3, r2
 8009080:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009084:	464b      	mov	r3, r9
 8009086:	460a      	mov	r2, r1
 8009088:	eb42 0303 	adc.w	r3, r2, r3
 800908c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800909c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80090a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80090a4:	460b      	mov	r3, r1
 80090a6:	18db      	adds	r3, r3, r3
 80090a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80090aa:	4613      	mov	r3, r2
 80090ac:	eb42 0303 	adc.w	r3, r2, r3
 80090b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80090b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80090b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80090ba:	f7f7 fd85 	bl	8000bc8 <__aeabi_uldivmod>
 80090be:	4602      	mov	r2, r0
 80090c0:	460b      	mov	r3, r1
 80090c2:	4b0d      	ldr	r3, [pc, #52]	@ (80090f8 <UART_SetConfig+0x2d4>)
 80090c4:	fba3 1302 	umull	r1, r3, r3, r2
 80090c8:	095b      	lsrs	r3, r3, #5
 80090ca:	2164      	movs	r1, #100	@ 0x64
 80090cc:	fb01 f303 	mul.w	r3, r1, r3
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	00db      	lsls	r3, r3, #3
 80090d4:	3332      	adds	r3, #50	@ 0x32
 80090d6:	4a08      	ldr	r2, [pc, #32]	@ (80090f8 <UART_SetConfig+0x2d4>)
 80090d8:	fba2 2303 	umull	r2, r3, r2, r3
 80090dc:	095b      	lsrs	r3, r3, #5
 80090de:	f003 0207 	and.w	r2, r3, #7
 80090e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4422      	add	r2, r4
 80090ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80090ec:	e106      	b.n	80092fc <UART_SetConfig+0x4d8>
 80090ee:	bf00      	nop
 80090f0:	40011000 	.word	0x40011000
 80090f4:	40011400 	.word	0x40011400
 80090f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80090fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009100:	2200      	movs	r2, #0
 8009102:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009106:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800910a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800910e:	4642      	mov	r2, r8
 8009110:	464b      	mov	r3, r9
 8009112:	1891      	adds	r1, r2, r2
 8009114:	6239      	str	r1, [r7, #32]
 8009116:	415b      	adcs	r3, r3
 8009118:	627b      	str	r3, [r7, #36]	@ 0x24
 800911a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800911e:	4641      	mov	r1, r8
 8009120:	1854      	adds	r4, r2, r1
 8009122:	4649      	mov	r1, r9
 8009124:	eb43 0501 	adc.w	r5, r3, r1
 8009128:	f04f 0200 	mov.w	r2, #0
 800912c:	f04f 0300 	mov.w	r3, #0
 8009130:	00eb      	lsls	r3, r5, #3
 8009132:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009136:	00e2      	lsls	r2, r4, #3
 8009138:	4614      	mov	r4, r2
 800913a:	461d      	mov	r5, r3
 800913c:	4643      	mov	r3, r8
 800913e:	18e3      	adds	r3, r4, r3
 8009140:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009144:	464b      	mov	r3, r9
 8009146:	eb45 0303 	adc.w	r3, r5, r3
 800914a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800914e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800915a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800915e:	f04f 0200 	mov.w	r2, #0
 8009162:	f04f 0300 	mov.w	r3, #0
 8009166:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800916a:	4629      	mov	r1, r5
 800916c:	008b      	lsls	r3, r1, #2
 800916e:	4621      	mov	r1, r4
 8009170:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009174:	4621      	mov	r1, r4
 8009176:	008a      	lsls	r2, r1, #2
 8009178:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800917c:	f7f7 fd24 	bl	8000bc8 <__aeabi_uldivmod>
 8009180:	4602      	mov	r2, r0
 8009182:	460b      	mov	r3, r1
 8009184:	4b60      	ldr	r3, [pc, #384]	@ (8009308 <UART_SetConfig+0x4e4>)
 8009186:	fba3 2302 	umull	r2, r3, r3, r2
 800918a:	095b      	lsrs	r3, r3, #5
 800918c:	011c      	lsls	r4, r3, #4
 800918e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009192:	2200      	movs	r2, #0
 8009194:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009198:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800919c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80091a0:	4642      	mov	r2, r8
 80091a2:	464b      	mov	r3, r9
 80091a4:	1891      	adds	r1, r2, r2
 80091a6:	61b9      	str	r1, [r7, #24]
 80091a8:	415b      	adcs	r3, r3
 80091aa:	61fb      	str	r3, [r7, #28]
 80091ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80091b0:	4641      	mov	r1, r8
 80091b2:	1851      	adds	r1, r2, r1
 80091b4:	6139      	str	r1, [r7, #16]
 80091b6:	4649      	mov	r1, r9
 80091b8:	414b      	adcs	r3, r1
 80091ba:	617b      	str	r3, [r7, #20]
 80091bc:	f04f 0200 	mov.w	r2, #0
 80091c0:	f04f 0300 	mov.w	r3, #0
 80091c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80091c8:	4659      	mov	r1, fp
 80091ca:	00cb      	lsls	r3, r1, #3
 80091cc:	4651      	mov	r1, sl
 80091ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091d2:	4651      	mov	r1, sl
 80091d4:	00ca      	lsls	r2, r1, #3
 80091d6:	4610      	mov	r0, r2
 80091d8:	4619      	mov	r1, r3
 80091da:	4603      	mov	r3, r0
 80091dc:	4642      	mov	r2, r8
 80091de:	189b      	adds	r3, r3, r2
 80091e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80091e4:	464b      	mov	r3, r9
 80091e6:	460a      	mov	r2, r1
 80091e8:	eb42 0303 	adc.w	r3, r2, r3
 80091ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80091f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80091fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80091fc:	f04f 0200 	mov.w	r2, #0
 8009200:	f04f 0300 	mov.w	r3, #0
 8009204:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009208:	4649      	mov	r1, r9
 800920a:	008b      	lsls	r3, r1, #2
 800920c:	4641      	mov	r1, r8
 800920e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009212:	4641      	mov	r1, r8
 8009214:	008a      	lsls	r2, r1, #2
 8009216:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800921a:	f7f7 fcd5 	bl	8000bc8 <__aeabi_uldivmod>
 800921e:	4602      	mov	r2, r0
 8009220:	460b      	mov	r3, r1
 8009222:	4611      	mov	r1, r2
 8009224:	4b38      	ldr	r3, [pc, #224]	@ (8009308 <UART_SetConfig+0x4e4>)
 8009226:	fba3 2301 	umull	r2, r3, r3, r1
 800922a:	095b      	lsrs	r3, r3, #5
 800922c:	2264      	movs	r2, #100	@ 0x64
 800922e:	fb02 f303 	mul.w	r3, r2, r3
 8009232:	1acb      	subs	r3, r1, r3
 8009234:	011b      	lsls	r3, r3, #4
 8009236:	3332      	adds	r3, #50	@ 0x32
 8009238:	4a33      	ldr	r2, [pc, #204]	@ (8009308 <UART_SetConfig+0x4e4>)
 800923a:	fba2 2303 	umull	r2, r3, r2, r3
 800923e:	095b      	lsrs	r3, r3, #5
 8009240:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009244:	441c      	add	r4, r3
 8009246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800924a:	2200      	movs	r2, #0
 800924c:	673b      	str	r3, [r7, #112]	@ 0x70
 800924e:	677a      	str	r2, [r7, #116]	@ 0x74
 8009250:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009254:	4642      	mov	r2, r8
 8009256:	464b      	mov	r3, r9
 8009258:	1891      	adds	r1, r2, r2
 800925a:	60b9      	str	r1, [r7, #8]
 800925c:	415b      	adcs	r3, r3
 800925e:	60fb      	str	r3, [r7, #12]
 8009260:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009264:	4641      	mov	r1, r8
 8009266:	1851      	adds	r1, r2, r1
 8009268:	6039      	str	r1, [r7, #0]
 800926a:	4649      	mov	r1, r9
 800926c:	414b      	adcs	r3, r1
 800926e:	607b      	str	r3, [r7, #4]
 8009270:	f04f 0200 	mov.w	r2, #0
 8009274:	f04f 0300 	mov.w	r3, #0
 8009278:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800927c:	4659      	mov	r1, fp
 800927e:	00cb      	lsls	r3, r1, #3
 8009280:	4651      	mov	r1, sl
 8009282:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009286:	4651      	mov	r1, sl
 8009288:	00ca      	lsls	r2, r1, #3
 800928a:	4610      	mov	r0, r2
 800928c:	4619      	mov	r1, r3
 800928e:	4603      	mov	r3, r0
 8009290:	4642      	mov	r2, r8
 8009292:	189b      	adds	r3, r3, r2
 8009294:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009296:	464b      	mov	r3, r9
 8009298:	460a      	mov	r2, r1
 800929a:	eb42 0303 	adc.w	r3, r2, r3
 800929e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80092a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80092aa:	667a      	str	r2, [r7, #100]	@ 0x64
 80092ac:	f04f 0200 	mov.w	r2, #0
 80092b0:	f04f 0300 	mov.w	r3, #0
 80092b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80092b8:	4649      	mov	r1, r9
 80092ba:	008b      	lsls	r3, r1, #2
 80092bc:	4641      	mov	r1, r8
 80092be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80092c2:	4641      	mov	r1, r8
 80092c4:	008a      	lsls	r2, r1, #2
 80092c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80092ca:	f7f7 fc7d 	bl	8000bc8 <__aeabi_uldivmod>
 80092ce:	4602      	mov	r2, r0
 80092d0:	460b      	mov	r3, r1
 80092d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009308 <UART_SetConfig+0x4e4>)
 80092d4:	fba3 1302 	umull	r1, r3, r3, r2
 80092d8:	095b      	lsrs	r3, r3, #5
 80092da:	2164      	movs	r1, #100	@ 0x64
 80092dc:	fb01 f303 	mul.w	r3, r1, r3
 80092e0:	1ad3      	subs	r3, r2, r3
 80092e2:	011b      	lsls	r3, r3, #4
 80092e4:	3332      	adds	r3, #50	@ 0x32
 80092e6:	4a08      	ldr	r2, [pc, #32]	@ (8009308 <UART_SetConfig+0x4e4>)
 80092e8:	fba2 2303 	umull	r2, r3, r2, r3
 80092ec:	095b      	lsrs	r3, r3, #5
 80092ee:	f003 020f 	and.w	r2, r3, #15
 80092f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4422      	add	r2, r4
 80092fa:	609a      	str	r2, [r3, #8]
}
 80092fc:	bf00      	nop
 80092fe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009302:	46bd      	mov	sp, r7
 8009304:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009308:	51eb851f 	.word	0x51eb851f

0800930c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d123      	bne.n	8009366 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8009326:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800932a:	683a      	ldr	r2, [r7, #0]
 800932c:	6851      	ldr	r1, [r2, #4]
 800932e:	683a      	ldr	r2, [r7, #0]
 8009330:	6892      	ldr	r2, [r2, #8]
 8009332:	4311      	orrs	r1, r2
 8009334:	683a      	ldr	r2, [r7, #0]
 8009336:	68d2      	ldr	r2, [r2, #12]
 8009338:	4311      	orrs	r1, r2
 800933a:	683a      	ldr	r2, [r7, #0]
 800933c:	6912      	ldr	r2, [r2, #16]
 800933e:	4311      	orrs	r1, r2
 8009340:	683a      	ldr	r2, [r7, #0]
 8009342:	6952      	ldr	r2, [r2, #20]
 8009344:	4311      	orrs	r1, r2
 8009346:	683a      	ldr	r2, [r7, #0]
 8009348:	6992      	ldr	r2, [r2, #24]
 800934a:	4311      	orrs	r1, r2
 800934c:	683a      	ldr	r2, [r7, #0]
 800934e:	69d2      	ldr	r2, [r2, #28]
 8009350:	4311      	orrs	r1, r2
 8009352:	683a      	ldr	r2, [r7, #0]
 8009354:	6a12      	ldr	r2, [r2, #32]
 8009356:	4311      	orrs	r1, r2
 8009358:	683a      	ldr	r2, [r7, #0]
 800935a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800935c:	430a      	orrs	r2, r1
 800935e:	431a      	orrs	r2, r3
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	601a      	str	r2, [r3, #0]
 8009364:	e028      	b.n	80093b8 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	69d9      	ldr	r1, [r3, #28]
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	6a1b      	ldr	r3, [r3, #32]
 8009376:	4319      	orrs	r1, r3
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800937c:	430b      	orrs	r3, r1
 800937e:	431a      	orrs	r2, r3
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800938c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009390:	683a      	ldr	r2, [r7, #0]
 8009392:	6851      	ldr	r1, [r2, #4]
 8009394:	683a      	ldr	r2, [r7, #0]
 8009396:	6892      	ldr	r2, [r2, #8]
 8009398:	4311      	orrs	r1, r2
 800939a:	683a      	ldr	r2, [r7, #0]
 800939c:	68d2      	ldr	r2, [r2, #12]
 800939e:	4311      	orrs	r1, r2
 80093a0:	683a      	ldr	r2, [r7, #0]
 80093a2:	6912      	ldr	r2, [r2, #16]
 80093a4:	4311      	orrs	r1, r2
 80093a6:	683a      	ldr	r2, [r7, #0]
 80093a8:	6952      	ldr	r2, [r2, #20]
 80093aa:	4311      	orrs	r1, r2
 80093ac:	683a      	ldr	r2, [r7, #0]
 80093ae:	6992      	ldr	r2, [r2, #24]
 80093b0:	430a      	orrs	r2, r1
 80093b2:	431a      	orrs	r2, r3
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	370c      	adds	r7, #12
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr

080093c6 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80093c6:	b480      	push	{r7}
 80093c8:	b085      	sub	sp, #20
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	60f8      	str	r0, [r7, #12]
 80093ce:	60b9      	str	r1, [r7, #8]
 80093d0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d128      	bne.n	800942a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	1e59      	subs	r1, r3, #1
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	3b01      	subs	r3, #1
 80093ec:	011b      	lsls	r3, r3, #4
 80093ee:	4319      	orrs	r1, r3
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	3b01      	subs	r3, #1
 80093f6:	021b      	lsls	r3, r3, #8
 80093f8:	4319      	orrs	r1, r3
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	68db      	ldr	r3, [r3, #12]
 80093fe:	3b01      	subs	r3, #1
 8009400:	031b      	lsls	r3, r3, #12
 8009402:	4319      	orrs	r1, r3
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	3b01      	subs	r3, #1
 800940a:	041b      	lsls	r3, r3, #16
 800940c:	4319      	orrs	r1, r3
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	695b      	ldr	r3, [r3, #20]
 8009412:	3b01      	subs	r3, #1
 8009414:	051b      	lsls	r3, r3, #20
 8009416:	4319      	orrs	r1, r3
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	699b      	ldr	r3, [r3, #24]
 800941c:	3b01      	subs	r3, #1
 800941e:	061b      	lsls	r3, r3, #24
 8009420:	430b      	orrs	r3, r1
 8009422:	431a      	orrs	r2, r3
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	609a      	str	r2, [r3, #8]
 8009428:	e02f      	b.n	800948a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009432:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009436:	68ba      	ldr	r2, [r7, #8]
 8009438:	68d2      	ldr	r2, [r2, #12]
 800943a:	3a01      	subs	r2, #1
 800943c:	0311      	lsls	r1, r2, #12
 800943e:	68ba      	ldr	r2, [r7, #8]
 8009440:	6952      	ldr	r2, [r2, #20]
 8009442:	3a01      	subs	r2, #1
 8009444:	0512      	lsls	r2, r2, #20
 8009446:	430a      	orrs	r2, r1
 8009448:	431a      	orrs	r2, r3
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	1e59      	subs	r1, r3, #1
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	3b01      	subs	r3, #1
 8009462:	011b      	lsls	r3, r3, #4
 8009464:	4319      	orrs	r1, r3
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	3b01      	subs	r3, #1
 800946c:	021b      	lsls	r3, r3, #8
 800946e:	4319      	orrs	r1, r3
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	691b      	ldr	r3, [r3, #16]
 8009474:	3b01      	subs	r3, #1
 8009476:	041b      	lsls	r3, r3, #16
 8009478:	4319      	orrs	r1, r3
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	699b      	ldr	r3, [r3, #24]
 800947e:	3b01      	subs	r3, #1
 8009480:	061b      	lsls	r3, r3, #24
 8009482:	430b      	orrs	r3, r1
 8009484:	431a      	orrs	r2, r3
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3714      	adds	r7, #20
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	f043 0201 	orr.w	r2, r3, #1
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	370c      	adds	r7, #12
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr

080094ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80094ba:	b480      	push	{r7}
 80094bc:	b083      	sub	sp, #12
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	f023 0201 	bic.w	r2, r3, #1
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80094dc:	b480      	push	{r7}
 80094de:	b085      	sub	sp, #20
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80094e6:	2300      	movs	r3, #0
 80094e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	3301      	adds	r3, #1
 80094ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80094f6:	d901      	bls.n	80094fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80094f8:	2303      	movs	r3, #3
 80094fa:	e01b      	b.n	8009534 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	691b      	ldr	r3, [r3, #16]
 8009500:	2b00      	cmp	r3, #0
 8009502:	daf2      	bge.n	80094ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009504:	2300      	movs	r3, #0
 8009506:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	019b      	lsls	r3, r3, #6
 800950c:	f043 0220 	orr.w	r2, r3, #32
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	3301      	adds	r3, #1
 8009518:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009520:	d901      	bls.n	8009526 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009522:	2303      	movs	r3, #3
 8009524:	e006      	b.n	8009534 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	f003 0320 	and.w	r3, r3, #32
 800952e:	2b20      	cmp	r3, #32
 8009530:	d0f0      	beq.n	8009514 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3714      	adds	r7, #20
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009540:	b480      	push	{r7}
 8009542:	b085      	sub	sp, #20
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009548:	2300      	movs	r3, #0
 800954a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	3301      	adds	r3, #1
 8009550:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009558:	d901      	bls.n	800955e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800955a:	2303      	movs	r3, #3
 800955c:	e018      	b.n	8009590 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	691b      	ldr	r3, [r3, #16]
 8009562:	2b00      	cmp	r3, #0
 8009564:	daf2      	bge.n	800954c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009566:	2300      	movs	r3, #0
 8009568:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2210      	movs	r2, #16
 800956e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	3301      	adds	r3, #1
 8009574:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800957c:	d901      	bls.n	8009582 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800957e:	2303      	movs	r3, #3
 8009580:	e006      	b.n	8009590 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	f003 0310 	and.w	r3, r3, #16
 800958a:	2b10      	cmp	r3, #16
 800958c:	d0f0      	beq.n	8009570 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3714      	adds	r7, #20
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800959c:	b480      	push	{r7}
 800959e:	b08b      	sub	sp, #44	@ 0x2c
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	60f8      	str	r0, [r7, #12]
 80095a4:	60b9      	str	r1, [r7, #8]
 80095a6:	4613      	mov	r3, r2
 80095a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80095b2:	88fb      	ldrh	r3, [r7, #6]
 80095b4:	089b      	lsrs	r3, r3, #2
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80095ba:	88fb      	ldrh	r3, [r7, #6]
 80095bc:	f003 0303 	and.w	r3, r3, #3
 80095c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80095c2:	2300      	movs	r3, #0
 80095c4:	623b      	str	r3, [r7, #32]
 80095c6:	e014      	b.n	80095f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80095c8:	69bb      	ldr	r3, [r7, #24]
 80095ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80095d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d6:	3301      	adds	r3, #1
 80095d8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80095da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095dc:	3301      	adds	r3, #1
 80095de:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80095e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e2:	3301      	adds	r3, #1
 80095e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80095e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e8:	3301      	adds	r3, #1
 80095ea:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80095ec:	6a3b      	ldr	r3, [r7, #32]
 80095ee:	3301      	adds	r3, #1
 80095f0:	623b      	str	r3, [r7, #32]
 80095f2:	6a3a      	ldr	r2, [r7, #32]
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d3e6      	bcc.n	80095c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80095fa:	8bfb      	ldrh	r3, [r7, #30]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d01e      	beq.n	800963e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009600:	2300      	movs	r3, #0
 8009602:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009604:	69bb      	ldr	r3, [r7, #24]
 8009606:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800960a:	461a      	mov	r2, r3
 800960c:	f107 0310 	add.w	r3, r7, #16
 8009610:	6812      	ldr	r2, [r2, #0]
 8009612:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009614:	693a      	ldr	r2, [r7, #16]
 8009616:	6a3b      	ldr	r3, [r7, #32]
 8009618:	b2db      	uxtb	r3, r3
 800961a:	00db      	lsls	r3, r3, #3
 800961c:	fa22 f303 	lsr.w	r3, r2, r3
 8009620:	b2da      	uxtb	r2, r3
 8009622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009624:	701a      	strb	r2, [r3, #0]
      i++;
 8009626:	6a3b      	ldr	r3, [r7, #32]
 8009628:	3301      	adds	r3, #1
 800962a:	623b      	str	r3, [r7, #32]
      pDest++;
 800962c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800962e:	3301      	adds	r3, #1
 8009630:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009632:	8bfb      	ldrh	r3, [r7, #30]
 8009634:	3b01      	subs	r3, #1
 8009636:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009638:	8bfb      	ldrh	r3, [r7, #30]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d1ea      	bne.n	8009614 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800963e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009640:	4618      	mov	r0, r3
 8009642:	372c      	adds	r7, #44	@ 0x2c
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800964c:	b480      	push	{r7}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	695b      	ldr	r3, [r3, #20]
 8009658:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	699b      	ldr	r3, [r3, #24]
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	4013      	ands	r3, r2
 8009662:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009664:	68fb      	ldr	r3, [r7, #12]
}
 8009666:	4618      	mov	r0, r3
 8009668:	3714      	adds	r7, #20
 800966a:	46bd      	mov	sp, r7
 800966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009670:	4770      	bx	lr

08009672 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8009672:	b480      	push	{r7}
 8009674:	b085      	sub	sp, #20
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
 800967a:	460b      	mov	r3, r1
 800967c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8009682:	78fb      	ldrb	r3, [r7, #3]
 8009684:	015a      	lsls	r2, r3, #5
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	4413      	add	r3, r2
 800968a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8009692:	78fb      	ldrb	r3, [r7, #3]
 8009694:	015a      	lsls	r2, r3, #5
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	4413      	add	r3, r2
 800969a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	68ba      	ldr	r2, [r7, #8]
 80096a2:	4013      	ands	r3, r2
 80096a4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80096a6:	68bb      	ldr	r3, [r7, #8]
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3714      	adds	r7, #20
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr

080096b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	695b      	ldr	r3, [r3, #20]
 80096c0:	f003 0301 	and.w	r3, r3, #1
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b085      	sub	sp, #20
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	460b      	mov	r3, r1
 80096da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80096ee:	f023 0303 	bic.w	r3, r3, #3
 80096f2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	78fb      	ldrb	r3, [r7, #3]
 80096fe:	f003 0303 	and.w	r3, r3, #3
 8009702:	68f9      	ldr	r1, [r7, #12]
 8009704:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009708:	4313      	orrs	r3, r2
 800970a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800970c:	78fb      	ldrb	r3, [r7, #3]
 800970e:	2b01      	cmp	r3, #1
 8009710:	d107      	bne.n	8009722 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009718:	461a      	mov	r2, r3
 800971a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800971e:	6053      	str	r3, [r2, #4]
 8009720:	e00c      	b.n	800973c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8009722:	78fb      	ldrb	r3, [r7, #3]
 8009724:	2b02      	cmp	r3, #2
 8009726:	d107      	bne.n	8009738 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800972e:	461a      	mov	r2, r3
 8009730:	f241 7370 	movw	r3, #6000	@ 0x1770
 8009734:	6053      	str	r3, [r2, #4]
 8009736:	e001      	b.n	800973c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8009738:	2301      	movs	r3, #1
 800973a:	e000      	b.n	800973e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800973c:	2300      	movs	r3, #0
}
 800973e:	4618      	mov	r0, r3
 8009740:	3714      	adds	r7, #20
 8009742:	46bd      	mov	sp, r7
 8009744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009748:	4770      	bx	lr

0800974a <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800974a:	b480      	push	{r7}
 800974c:	b085      	sub	sp, #20
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800975c:	695b      	ldr	r3, [r3, #20]
 800975e:	b29b      	uxth	r3, r3
}
 8009760:	4618      	mov	r0, r3
 8009762:	3714      	adds	r7, #20
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800976c:	b480      	push	{r7}
 800976e:	b089      	sub	sp, #36	@ 0x24
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	460b      	mov	r3, r1
 8009776:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800977c:	78fb      	ldrb	r3, [r7, #3]
 800977e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009780:	2300      	movs	r3, #0
 8009782:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	015a      	lsls	r2, r3, #5
 8009788:	69fb      	ldr	r3, [r7, #28]
 800978a:	4413      	add	r3, r2
 800978c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	0c9b      	lsrs	r3, r3, #18
 8009794:	f003 0303 	and.w	r3, r3, #3
 8009798:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800979a:	69bb      	ldr	r3, [r7, #24]
 800979c:	015a      	lsls	r2, r3, #5
 800979e:	69fb      	ldr	r3, [r7, #28]
 80097a0:	4413      	add	r3, r2
 80097a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	0fdb      	lsrs	r3, r3, #31
 80097aa:	f003 0301 	and.w	r3, r3, #1
 80097ae:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80097b0:	69bb      	ldr	r3, [r7, #24]
 80097b2:	015a      	lsls	r2, r3, #5
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	4413      	add	r3, r2
 80097b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	0fdb      	lsrs	r3, r3, #31
 80097c0:	f003 0301 	and.w	r3, r3, #1
 80097c4:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	f003 0320 	and.w	r3, r3, #32
 80097ce:	2b20      	cmp	r3, #32
 80097d0:	d10d      	bne.n	80097ee <USB_HC_Halt+0x82>
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d10a      	bne.n	80097ee <USB_HC_Halt+0x82>
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d005      	beq.n	80097ea <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d002      	beq.n	80097ea <USB_HC_Halt+0x7e>
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	2b03      	cmp	r3, #3
 80097e8:	d101      	bne.n	80097ee <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80097ea:	2300      	movs	r3, #0
 80097ec:	e0d8      	b.n	80099a0 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d002      	beq.n	80097fa <USB_HC_Halt+0x8e>
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	2b02      	cmp	r3, #2
 80097f8:	d173      	bne.n	80098e2 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	015a      	lsls	r2, r3, #5
 80097fe:	69fb      	ldr	r3, [r7, #28]
 8009800:	4413      	add	r3, r2
 8009802:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	69ba      	ldr	r2, [r7, #24]
 800980a:	0151      	lsls	r1, r2, #5
 800980c:	69fa      	ldr	r2, [r7, #28]
 800980e:	440a      	add	r2, r1
 8009810:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009814:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009818:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	f003 0320 	and.w	r3, r3, #32
 8009822:	2b00      	cmp	r3, #0
 8009824:	d14a      	bne.n	80098bc <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800982a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800982e:	2b00      	cmp	r3, #0
 8009830:	d133      	bne.n	800989a <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	015a      	lsls	r2, r3, #5
 8009836:	69fb      	ldr	r3, [r7, #28]
 8009838:	4413      	add	r3, r2
 800983a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	69ba      	ldr	r2, [r7, #24]
 8009842:	0151      	lsls	r1, r2, #5
 8009844:	69fa      	ldr	r2, [r7, #28]
 8009846:	440a      	add	r2, r1
 8009848:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800984c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009850:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009852:	69bb      	ldr	r3, [r7, #24]
 8009854:	015a      	lsls	r2, r3, #5
 8009856:	69fb      	ldr	r3, [r7, #28]
 8009858:	4413      	add	r3, r2
 800985a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	69ba      	ldr	r2, [r7, #24]
 8009862:	0151      	lsls	r1, r2, #5
 8009864:	69fa      	ldr	r2, [r7, #28]
 8009866:	440a      	add	r2, r1
 8009868:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800986c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009870:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	3301      	adds	r3, #1
 8009876:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800987e:	d82e      	bhi.n	80098de <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	015a      	lsls	r2, r3, #5
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	4413      	add	r3, r2
 8009888:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009892:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009896:	d0ec      	beq.n	8009872 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009898:	e081      	b.n	800999e <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	015a      	lsls	r2, r3, #5
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	4413      	add	r3, r2
 80098a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	69ba      	ldr	r2, [r7, #24]
 80098aa:	0151      	lsls	r1, r2, #5
 80098ac:	69fa      	ldr	r2, [r7, #28]
 80098ae:	440a      	add	r2, r1
 80098b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80098b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80098b8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80098ba:	e070      	b.n	800999e <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80098bc:	69bb      	ldr	r3, [r7, #24]
 80098be:	015a      	lsls	r2, r3, #5
 80098c0:	69fb      	ldr	r3, [r7, #28]
 80098c2:	4413      	add	r3, r2
 80098c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	69ba      	ldr	r2, [r7, #24]
 80098cc:	0151      	lsls	r1, r2, #5
 80098ce:	69fa      	ldr	r2, [r7, #28]
 80098d0:	440a      	add	r2, r1
 80098d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80098d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80098da:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80098dc:	e05f      	b.n	800999e <USB_HC_Halt+0x232>
            break;
 80098de:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80098e0:	e05d      	b.n	800999e <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80098e2:	69bb      	ldr	r3, [r7, #24]
 80098e4:	015a      	lsls	r2, r3, #5
 80098e6:	69fb      	ldr	r3, [r7, #28]
 80098e8:	4413      	add	r3, r2
 80098ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	69ba      	ldr	r2, [r7, #24]
 80098f2:	0151      	lsls	r1, r2, #5
 80098f4:	69fa      	ldr	r2, [r7, #28]
 80098f6:	440a      	add	r2, r1
 80098f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80098fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009900:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009902:	69fb      	ldr	r3, [r7, #28]
 8009904:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009908:	691b      	ldr	r3, [r3, #16]
 800990a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800990e:	2b00      	cmp	r3, #0
 8009910:	d133      	bne.n	800997a <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009912:	69bb      	ldr	r3, [r7, #24]
 8009914:	015a      	lsls	r2, r3, #5
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	4413      	add	r3, r2
 800991a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	69ba      	ldr	r2, [r7, #24]
 8009922:	0151      	lsls	r1, r2, #5
 8009924:	69fa      	ldr	r2, [r7, #28]
 8009926:	440a      	add	r2, r1
 8009928:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800992c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009930:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	015a      	lsls	r2, r3, #5
 8009936:	69fb      	ldr	r3, [r7, #28]
 8009938:	4413      	add	r3, r2
 800993a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	69ba      	ldr	r2, [r7, #24]
 8009942:	0151      	lsls	r1, r2, #5
 8009944:	69fa      	ldr	r2, [r7, #28]
 8009946:	440a      	add	r2, r1
 8009948:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800994c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009950:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	3301      	adds	r3, #1
 8009956:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800995e:	d81d      	bhi.n	800999c <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009960:	69bb      	ldr	r3, [r7, #24]
 8009962:	015a      	lsls	r2, r3, #5
 8009964:	69fb      	ldr	r3, [r7, #28]
 8009966:	4413      	add	r3, r2
 8009968:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009972:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009976:	d0ec      	beq.n	8009952 <USB_HC_Halt+0x1e6>
 8009978:	e011      	b.n	800999e <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	015a      	lsls	r2, r3, #5
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	4413      	add	r3, r2
 8009982:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	69ba      	ldr	r2, [r7, #24]
 800998a:	0151      	lsls	r1, r2, #5
 800998c:	69fa      	ldr	r2, [r7, #28]
 800998e:	440a      	add	r2, r1
 8009990:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009994:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009998:	6013      	str	r3, [r2, #0]
 800999a:	e000      	b.n	800999e <USB_HC_Halt+0x232>
          break;
 800999c:	bf00      	nop
    }
  }

  return HAL_OK;
 800999e:	2300      	movs	r3, #0
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3724      	adds	r7, #36	@ 0x24
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b088      	sub	sp, #32
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80099b4:	2300      	movs	r3, #0
 80099b6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80099bc:	2300      	movs	r3, #0
 80099be:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f7ff fd7a 	bl	80094ba <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80099c6:	2110      	movs	r1, #16
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f7ff fd87 	bl	80094dc <USB_FlushTxFifo>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d001      	beq.n	80099d8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80099d4:	2301      	movs	r3, #1
 80099d6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f7ff fdb1 	bl	8009540 <USB_FlushRxFifo>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d001      	beq.n	80099e8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80099e8:	2300      	movs	r3, #0
 80099ea:	61bb      	str	r3, [r7, #24]
 80099ec:	e01f      	b.n	8009a2e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80099ee:	69bb      	ldr	r3, [r7, #24]
 80099f0:	015a      	lsls	r2, r3, #5
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	4413      	add	r3, r2
 80099f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009a04:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009a0c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009a14:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009a16:	69bb      	ldr	r3, [r7, #24]
 8009a18:	015a      	lsls	r2, r3, #5
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	4413      	add	r3, r2
 8009a1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a22:	461a      	mov	r2, r3
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009a28:	69bb      	ldr	r3, [r7, #24]
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	61bb      	str	r3, [r7, #24]
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	2b0f      	cmp	r3, #15
 8009a32:	d9dc      	bls.n	80099ee <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009a34:	2300      	movs	r3, #0
 8009a36:	61bb      	str	r3, [r7, #24]
 8009a38:	e034      	b.n	8009aa4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8009a3a:	69bb      	ldr	r3, [r7, #24]
 8009a3c:	015a      	lsls	r2, r3, #5
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	4413      	add	r3, r2
 8009a42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009a50:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009a58:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009a60:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	015a      	lsls	r2, r3, #5
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	4413      	add	r3, r2
 8009a6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a6e:	461a      	mov	r2, r3
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	3301      	adds	r3, #1
 8009a78:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009a80:	d80c      	bhi.n	8009a9c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	015a      	lsls	r2, r3, #5
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	4413      	add	r3, r2
 8009a8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a98:	d0ec      	beq.n	8009a74 <USB_StopHost+0xc8>
 8009a9a:	e000      	b.n	8009a9e <USB_StopHost+0xf2>
        break;
 8009a9c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009a9e:	69bb      	ldr	r3, [r7, #24]
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	61bb      	str	r3, [r7, #24]
 8009aa4:	69bb      	ldr	r3, [r7, #24]
 8009aa6:	2b0f      	cmp	r3, #15
 8009aa8:	d9c7      	bls.n	8009a3a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009ab6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009abe:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f7ff fce9 	bl	8009498 <USB_EnableGlobalInt>

  return ret;
 8009ac6:	7ffb      	ldrb	r3, [r7, #31]
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3720      	adds	r7, #32
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b082      	sub	sp, #8
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009ade:	1c5a      	adds	r2, r3, #1
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 f804 	bl	8009af4 <USBH_HandleSof>
}
 8009aec:	bf00      	nop
 8009aee:	3708      	adds	r7, #8
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	2b0b      	cmp	r3, #11
 8009b04:	d10a      	bne.n	8009b1c <USBH_HandleSof+0x28>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d005      	beq.n	8009b1c <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b16:	699b      	ldr	r3, [r3, #24]
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	4798      	blx	r3
  }
}
 8009b1c:	bf00      	nop
 8009b1e:	3708      	adds	r7, #8
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009b48:	2200      	movs	r2, #0
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	f000 f8ae 	bl	8009cac <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009b50:	bf00      	nop
}
 8009b52:	3708      	adds	r7, #8
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8009b68:	bf00      	nop
}
 8009b6a:	370c      	adds	r7, #12
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr

08009b74 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2201      	movs	r2, #1
 8009b98:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009ba8:	2200      	movs	r2, #0
 8009baa:	4619      	mov	r1, r3
 8009bac:	f000 f87e 	bl	8009cac <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009bb0:	2300      	movs	r3, #0
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3708      	adds	r7, #8
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}

08009bba <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009bba:	b580      	push	{r7, lr}
 8009bbc:	b082      	sub	sp, #8
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f001 f900 	bl	800ade0 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	791b      	ldrb	r3, [r3, #4]
 8009be4:	4619      	mov	r1, r3
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 f830 	bl	8009c4c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	795b      	ldrb	r3, [r3, #5]
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 f82a 	bl	8009c4c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	4619      	mov	r1, r3
 8009c10:	f000 f84c 	bl	8009cac <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009c14:	2300      	movs	r3, #0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3708      	adds	r7, #8
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8009c1e:	b580      	push	{r7, lr}
 8009c20:	b082      	sub	sp, #8
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2201      	movs	r2, #1
 8009c2a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	f000 f835 	bl	8009cac <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8009c42:	2300      	movs	r3, #0
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3708      	adds	r7, #8
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	460b      	mov	r3, r1
 8009c56:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009c58:	78fb      	ldrb	r3, [r7, #3]
 8009c5a:	2b0f      	cmp	r3, #15
 8009c5c:	d80d      	bhi.n	8009c7a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009c5e:	78fb      	ldrb	r3, [r7, #3]
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	33e0      	adds	r3, #224	@ 0xe0
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	4413      	add	r3, r2
 8009c68:	685a      	ldr	r2, [r3, #4]
 8009c6a:	78fb      	ldrb	r3, [r7, #3]
 8009c6c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009c70:	6879      	ldr	r1, [r7, #4]
 8009c72:	33e0      	adds	r3, #224	@ 0xe0
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	440b      	add	r3, r1
 8009c78:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	370c      	adds	r7, #12
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr

08009c88 <inHandlerMode>:
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	f3ef 8305 	mrs	r3, IPSR
 8009c92:	607b      	str	r3, [r7, #4]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	bf14      	ite	ne
 8009c9a:	2301      	movne	r3, #1
 8009c9c:	2300      	moveq	r3, #0
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	370c      	adds	r7, #12
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr

08009cac <osMessagePut>:
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b086      	sub	sp, #24
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	607a      	str	r2, [r7, #4]
 8009cb8:	2300      	movs	r3, #0
 8009cba:	613b      	str	r3, [r7, #16]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	617b      	str	r3, [r7, #20]
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d101      	bne.n	8009cca <osMessagePut+0x1e>
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	617b      	str	r3, [r7, #20]
 8009cca:	f7ff ffdd 	bl	8009c88 <inHandlerMode>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d018      	beq.n	8009d06 <osMessagePut+0x5a>
 8009cd4:	f107 0210 	add.w	r2, r7, #16
 8009cd8:	f107 0108 	add.w	r1, r7, #8
 8009cdc:	2300      	movs	r3, #0
 8009cde:	68f8      	ldr	r0, [r7, #12]
 8009ce0:	f000 f9ae 	bl	800a040 <xQueueGenericSendFromISR>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	d001      	beq.n	8009cee <osMessagePut+0x42>
 8009cea:	23ff      	movs	r3, #255	@ 0xff
 8009cec:	e018      	b.n	8009d20 <osMessagePut+0x74>
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d014      	beq.n	8009d1e <osMessagePut+0x72>
 8009cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8009d28 <osMessagePut+0x7c>)
 8009cf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cfa:	601a      	str	r2, [r3, #0]
 8009cfc:	f3bf 8f4f 	dsb	sy
 8009d00:	f3bf 8f6f 	isb	sy
 8009d04:	e00b      	b.n	8009d1e <osMessagePut+0x72>
 8009d06:	f107 0108 	add.w	r1, r7, #8
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	697a      	ldr	r2, [r7, #20]
 8009d0e:	68f8      	ldr	r0, [r7, #12]
 8009d10:	f000 f894 	bl	8009e3c <xQueueGenericSend>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d001      	beq.n	8009d1e <osMessagePut+0x72>
 8009d1a:	23ff      	movs	r3, #255	@ 0xff
 8009d1c:	e000      	b.n	8009d20 <osMessagePut+0x74>
 8009d1e:	2300      	movs	r3, #0
 8009d20:	4618      	mov	r0, r3
 8009d22:	3718      	adds	r7, #24
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	e000ed04 	.word	0xe000ed04

08009d2c <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b085      	sub	sp, #20
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	68fa      	ldr	r2, [r7, #12]
 8009d40:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	689a      	ldr	r2, [r3, #8]
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	689b      	ldr	r3, [r3, #8]
 8009d4e:	683a      	ldr	r2, [r7, #0]
 8009d50:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	683a      	ldr	r2, [r7, #0]
 8009d56:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	1c5a      	adds	r2, r3, #1
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	601a      	str	r2, [r3, #0]
}
 8009d68:	bf00      	nop
 8009d6a:	3714      	adds	r7, #20
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr

08009d74 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d74:	b480      	push	{r7}
 8009d76:	b085      	sub	sp, #20
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009d8a:	d103      	bne.n	8009d94 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	691b      	ldr	r3, [r3, #16]
 8009d90:	60fb      	str	r3, [r7, #12]
 8009d92:	e00c      	b.n	8009dae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	3308      	adds	r3, #8
 8009d98:	60fb      	str	r3, [r7, #12]
 8009d9a:	e002      	b.n	8009da2 <vListInsert+0x2e>
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	60fb      	str	r3, [r7, #12]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	68ba      	ldr	r2, [r7, #8]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d2f6      	bcs.n	8009d9c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	685a      	ldr	r2, [r3, #4]
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	683a      	ldr	r2, [r7, #0]
 8009dbc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	68fa      	ldr	r2, [r7, #12]
 8009dc2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	683a      	ldr	r2, [r7, #0]
 8009dc8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	1c5a      	adds	r2, r3, #1
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	601a      	str	r2, [r3, #0]
}
 8009dda:	bf00      	nop
 8009ddc:	3714      	adds	r7, #20
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr

08009de6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009de6:	b480      	push	{r7}
 8009de8:	b085      	sub	sp, #20
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	691b      	ldr	r3, [r3, #16]
 8009df2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	6892      	ldr	r2, [r2, #8]
 8009dfc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	689b      	ldr	r3, [r3, #8]
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	6852      	ldr	r2, [r2, #4]
 8009e06:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d103      	bne.n	8009e1a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	689a      	ldr	r2, [r3, #8]
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	1e5a      	subs	r2, r3, #1
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3714      	adds	r7, #20
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr
	...

08009e3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b08e      	sub	sp, #56	@ 0x38
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	607a      	str	r2, [r7, #4]
 8009e48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d10b      	bne.n	8009e70 <xQueueGenericSend+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e5c:	f383 8811 	msr	BASEPRI, r3
 8009e60:	f3bf 8f6f 	isb	sy
 8009e64:	f3bf 8f4f 	dsb	sy
 8009e68:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009e6a:	bf00      	nop
 8009e6c:	bf00      	nop
 8009e6e:	e7fd      	b.n	8009e6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d103      	bne.n	8009e7e <xQueueGenericSend+0x42>
 8009e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d101      	bne.n	8009e82 <xQueueGenericSend+0x46>
 8009e7e:	2301      	movs	r3, #1
 8009e80:	e000      	b.n	8009e84 <xQueueGenericSend+0x48>
 8009e82:	2300      	movs	r3, #0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d10b      	bne.n	8009ea0 <xQueueGenericSend+0x64>
	__asm volatile
 8009e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e8c:	f383 8811 	msr	BASEPRI, r3
 8009e90:	f3bf 8f6f 	isb	sy
 8009e94:	f3bf 8f4f 	dsb	sy
 8009e98:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009e9a:	bf00      	nop
 8009e9c:	bf00      	nop
 8009e9e:	e7fd      	b.n	8009e9c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	2b02      	cmp	r3, #2
 8009ea4:	d103      	bne.n	8009eae <xQueueGenericSend+0x72>
 8009ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d101      	bne.n	8009eb2 <xQueueGenericSend+0x76>
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e000      	b.n	8009eb4 <xQueueGenericSend+0x78>
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d10b      	bne.n	8009ed0 <xQueueGenericSend+0x94>
	__asm volatile
 8009eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ebc:	f383 8811 	msr	BASEPRI, r3
 8009ec0:	f3bf 8f6f 	isb	sy
 8009ec4:	f3bf 8f4f 	dsb	sy
 8009ec8:	623b      	str	r3, [r7, #32]
}
 8009eca:	bf00      	nop
 8009ecc:	bf00      	nop
 8009ece:	e7fd      	b.n	8009ecc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ed0:	f000 fd1a 	bl	800a908 <xTaskGetSchedulerState>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d102      	bne.n	8009ee0 <xQueueGenericSend+0xa4>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d101      	bne.n	8009ee4 <xQueueGenericSend+0xa8>
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	e000      	b.n	8009ee6 <xQueueGenericSend+0xaa>
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d10b      	bne.n	8009f02 <xQueueGenericSend+0xc6>
	__asm volatile
 8009eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eee:	f383 8811 	msr	BASEPRI, r3
 8009ef2:	f3bf 8f6f 	isb	sy
 8009ef6:	f3bf 8f4f 	dsb	sy
 8009efa:	61fb      	str	r3, [r7, #28]
}
 8009efc:	bf00      	nop
 8009efe:	bf00      	nop
 8009f00:	e7fd      	b.n	8009efe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f02:	f000 fe21 	bl	800ab48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d302      	bcc.n	8009f18 <xQueueGenericSend+0xdc>
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	2b02      	cmp	r3, #2
 8009f16:	d129      	bne.n	8009f6c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f18:	683a      	ldr	r2, [r7, #0]
 8009f1a:	68b9      	ldr	r1, [r7, #8]
 8009f1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f1e:	f000 f92d 	bl	800a17c <prvCopyDataToQueue>
 8009f22:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d010      	beq.n	8009f4e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f2e:	3324      	adds	r3, #36	@ 0x24
 8009f30:	4618      	mov	r0, r3
 8009f32:	f000 fbdf 	bl	800a6f4 <xTaskRemoveFromEventList>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d013      	beq.n	8009f64 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009f3c:	4b3f      	ldr	r3, [pc, #252]	@ (800a03c <xQueueGenericSend+0x200>)
 8009f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f42:	601a      	str	r2, [r3, #0]
 8009f44:	f3bf 8f4f 	dsb	sy
 8009f48:	f3bf 8f6f 	isb	sy
 8009f4c:	e00a      	b.n	8009f64 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d007      	beq.n	8009f64 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009f54:	4b39      	ldr	r3, [pc, #228]	@ (800a03c <xQueueGenericSend+0x200>)
 8009f56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f5a:	601a      	str	r2, [r3, #0]
 8009f5c:	f3bf 8f4f 	dsb	sy
 8009f60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009f64:	f000 fe22 	bl	800abac <vPortExitCritical>
				return pdPASS;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	e063      	b.n	800a034 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d103      	bne.n	8009f7a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f72:	f000 fe1b 	bl	800abac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009f76:	2300      	movs	r3, #0
 8009f78:	e05c      	b.n	800a034 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d106      	bne.n	8009f8e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f80:	f107 0314 	add.w	r3, r7, #20
 8009f84:	4618      	mov	r0, r3
 8009f86:	f000 fc19 	bl	800a7bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f8e:	f000 fe0d 	bl	800abac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f92:	f000 f9c7 	bl	800a324 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f96:	f000 fdd7 	bl	800ab48 <vPortEnterCritical>
 8009f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009fa0:	b25b      	sxtb	r3, r3
 8009fa2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009fa6:	d103      	bne.n	8009fb0 <xQueueGenericSend+0x174>
 8009fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009faa:	2200      	movs	r2, #0
 8009fac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009fb6:	b25b      	sxtb	r3, r3
 8009fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009fbc:	d103      	bne.n	8009fc6 <xQueueGenericSend+0x18a>
 8009fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009fc6:	f000 fdf1 	bl	800abac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009fca:	1d3a      	adds	r2, r7, #4
 8009fcc:	f107 0314 	add.w	r3, r7, #20
 8009fd0:	4611      	mov	r1, r2
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f000 fc08 	bl	800a7e8 <xTaskCheckForTimeOut>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d124      	bne.n	800a028 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009fde:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009fe0:	f000 f988 	bl	800a2f4 <prvIsQueueFull>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d018      	beq.n	800a01c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fec:	3310      	adds	r3, #16
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	4611      	mov	r1, r2
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f000 fb58 	bl	800a6a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009ff8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009ffa:	f000 f929 	bl	800a250 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009ffe:	f000 f99f 	bl	800a340 <xTaskResumeAll>
 800a002:	4603      	mov	r3, r0
 800a004:	2b00      	cmp	r3, #0
 800a006:	f47f af7c 	bne.w	8009f02 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a00a:	4b0c      	ldr	r3, [pc, #48]	@ (800a03c <xQueueGenericSend+0x200>)
 800a00c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a010:	601a      	str	r2, [r3, #0]
 800a012:	f3bf 8f4f 	dsb	sy
 800a016:	f3bf 8f6f 	isb	sy
 800a01a:	e772      	b.n	8009f02 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a01c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a01e:	f000 f917 	bl	800a250 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a022:	f000 f98d 	bl	800a340 <xTaskResumeAll>
 800a026:	e76c      	b.n	8009f02 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a028:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a02a:	f000 f911 	bl	800a250 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a02e:	f000 f987 	bl	800a340 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a032:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a034:	4618      	mov	r0, r3
 800a036:	3738      	adds	r7, #56	@ 0x38
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	e000ed04 	.word	0xe000ed04

0800a040 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b090      	sub	sp, #64	@ 0x40
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	607a      	str	r2, [r7, #4]
 800a04c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a054:	2b00      	cmp	r3, #0
 800a056:	d10b      	bne.n	800a070 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a05c:	f383 8811 	msr	BASEPRI, r3
 800a060:	f3bf 8f6f 	isb	sy
 800a064:	f3bf 8f4f 	dsb	sy
 800a068:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a06a:	bf00      	nop
 800a06c:	bf00      	nop
 800a06e:	e7fd      	b.n	800a06c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d103      	bne.n	800a07e <xQueueGenericSendFromISR+0x3e>
 800a076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d101      	bne.n	800a082 <xQueueGenericSendFromISR+0x42>
 800a07e:	2301      	movs	r3, #1
 800a080:	e000      	b.n	800a084 <xQueueGenericSendFromISR+0x44>
 800a082:	2300      	movs	r3, #0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d10b      	bne.n	800a0a0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a08c:	f383 8811 	msr	BASEPRI, r3
 800a090:	f3bf 8f6f 	isb	sy
 800a094:	f3bf 8f4f 	dsb	sy
 800a098:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a09a:	bf00      	nop
 800a09c:	bf00      	nop
 800a09e:	e7fd      	b.n	800a09c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	2b02      	cmp	r3, #2
 800a0a4:	d103      	bne.n	800a0ae <xQueueGenericSendFromISR+0x6e>
 800a0a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d101      	bne.n	800a0b2 <xQueueGenericSendFromISR+0x72>
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e000      	b.n	800a0b4 <xQueueGenericSendFromISR+0x74>
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d10b      	bne.n	800a0d0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a0b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0bc:	f383 8811 	msr	BASEPRI, r3
 800a0c0:	f3bf 8f6f 	isb	sy
 800a0c4:	f3bf 8f4f 	dsb	sy
 800a0c8:	623b      	str	r3, [r7, #32]
}
 800a0ca:	bf00      	nop
 800a0cc:	bf00      	nop
 800a0ce:	e7fd      	b.n	800a0cc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a0d0:	f000 fdec 	bl	800acac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a0d4:	f3ef 8211 	mrs	r2, BASEPRI
 800a0d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0dc:	f383 8811 	msr	BASEPRI, r3
 800a0e0:	f3bf 8f6f 	isb	sy
 800a0e4:	f3bf 8f4f 	dsb	sy
 800a0e8:	61fa      	str	r2, [r7, #28]
 800a0ea:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a0ec:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a0ee:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a0f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d302      	bcc.n	800a102 <xQueueGenericSendFromISR+0xc2>
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	2b02      	cmp	r3, #2
 800a100:	d12f      	bne.n	800a162 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a104:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a108:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a10e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a110:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a112:	683a      	ldr	r2, [r7, #0]
 800a114:	68b9      	ldr	r1, [r7, #8]
 800a116:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a118:	f000 f830 	bl	800a17c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a11c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a120:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a124:	d112      	bne.n	800a14c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d016      	beq.n	800a15c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a12e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a130:	3324      	adds	r3, #36	@ 0x24
 800a132:	4618      	mov	r0, r3
 800a134:	f000 fade 	bl	800a6f4 <xTaskRemoveFromEventList>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d00e      	beq.n	800a15c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d00b      	beq.n	800a15c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2201      	movs	r2, #1
 800a148:	601a      	str	r2, [r3, #0]
 800a14a:	e007      	b.n	800a15c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a14c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a150:	3301      	adds	r3, #1
 800a152:	b2db      	uxtb	r3, r3
 800a154:	b25a      	sxtb	r2, r3
 800a156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a158:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a15c:	2301      	movs	r3, #1
 800a15e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a160:	e001      	b.n	800a166 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a162:	2300      	movs	r3, #0
 800a164:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a168:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a170:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a174:	4618      	mov	r0, r3
 800a176:	3740      	adds	r7, #64	@ 0x40
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b086      	sub	sp, #24
 800a180:	af00      	add	r7, sp, #0
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	60b9      	str	r1, [r7, #8]
 800a186:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a188:	2300      	movs	r3, #0
 800a18a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a190:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a196:	2b00      	cmp	r3, #0
 800a198:	d10d      	bne.n	800a1b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d14d      	bne.n	800a23e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f000 fbcc 	bl	800a944 <xTaskPriorityDisinherit>
 800a1ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	609a      	str	r2, [r3, #8]
 800a1b4:	e043      	b.n	800a23e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d119      	bne.n	800a1f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	6858      	ldr	r0, [r3, #4]
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	68b9      	ldr	r1, [r7, #8]
 800a1c8:	f001 fdf7 	bl	800bdba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	685a      	ldr	r2, [r3, #4]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1d4:	441a      	add	r2, r3
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	685a      	ldr	r2, [r3, #4]
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	689b      	ldr	r3, [r3, #8]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d32b      	bcc.n	800a23e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	605a      	str	r2, [r3, #4]
 800a1ee:	e026      	b.n	800a23e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	68d8      	ldr	r0, [r3, #12]
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	68b9      	ldr	r1, [r7, #8]
 800a1fc:	f001 fddd 	bl	800bdba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	68da      	ldr	r2, [r3, #12]
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a208:	425b      	negs	r3, r3
 800a20a:	441a      	add	r2, r3
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	68da      	ldr	r2, [r3, #12]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	429a      	cmp	r2, r3
 800a21a:	d207      	bcs.n	800a22c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	689a      	ldr	r2, [r3, #8]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a224:	425b      	negs	r3, r3
 800a226:	441a      	add	r2, r3
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2b02      	cmp	r3, #2
 800a230:	d105      	bne.n	800a23e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d002      	beq.n	800a23e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	3b01      	subs	r3, #1
 800a23c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	1c5a      	adds	r2, r3, #1
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a246:	697b      	ldr	r3, [r7, #20]
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3718      	adds	r7, #24
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b084      	sub	sp, #16
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a258:	f000 fc76 	bl	800ab48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a262:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a264:	e011      	b.n	800a28a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d012      	beq.n	800a294 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	3324      	adds	r3, #36	@ 0x24
 800a272:	4618      	mov	r0, r3
 800a274:	f000 fa3e 	bl	800a6f4 <xTaskRemoveFromEventList>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d001      	beq.n	800a282 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a27e:	f000 fb17 	bl	800a8b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a282:	7bfb      	ldrb	r3, [r7, #15]
 800a284:	3b01      	subs	r3, #1
 800a286:	b2db      	uxtb	r3, r3
 800a288:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a28a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	dce9      	bgt.n	800a266 <prvUnlockQueue+0x16>
 800a292:	e000      	b.n	800a296 <prvUnlockQueue+0x46>
					break;
 800a294:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	22ff      	movs	r2, #255	@ 0xff
 800a29a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a29e:	f000 fc85 	bl	800abac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a2a2:	f000 fc51 	bl	800ab48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a2ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a2ae:	e011      	b.n	800a2d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	691b      	ldr	r3, [r3, #16]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d012      	beq.n	800a2de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	3310      	adds	r3, #16
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f000 fa19 	bl	800a6f4 <xTaskRemoveFromEventList>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d001      	beq.n	800a2cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a2c8:	f000 faf2 	bl	800a8b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a2cc:	7bbb      	ldrb	r3, [r7, #14]
 800a2ce:	3b01      	subs	r3, #1
 800a2d0:	b2db      	uxtb	r3, r3
 800a2d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a2d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	dce9      	bgt.n	800a2b0 <prvUnlockQueue+0x60>
 800a2dc:	e000      	b.n	800a2e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a2de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	22ff      	movs	r2, #255	@ 0xff
 800a2e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a2e8:	f000 fc60 	bl	800abac <vPortExitCritical>
}
 800a2ec:	bf00      	nop
 800a2ee:	3710      	adds	r7, #16
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a2fc:	f000 fc24 	bl	800ab48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a308:	429a      	cmp	r2, r3
 800a30a:	d102      	bne.n	800a312 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a30c:	2301      	movs	r3, #1
 800a30e:	60fb      	str	r3, [r7, #12]
 800a310:	e001      	b.n	800a316 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a312:	2300      	movs	r3, #0
 800a314:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a316:	f000 fc49 	bl	800abac <vPortExitCritical>

	return xReturn;
 800a31a:	68fb      	ldr	r3, [r7, #12]
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3710      	adds	r7, #16
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <vTaskSuspendAll>:
 800a324:	b480      	push	{r7}
 800a326:	af00      	add	r7, sp, #0
 800a328:	4b04      	ldr	r3, [pc, #16]	@ (800a33c <vTaskSuspendAll+0x18>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	3301      	adds	r3, #1
 800a32e:	4a03      	ldr	r2, [pc, #12]	@ (800a33c <vTaskSuspendAll+0x18>)
 800a330:	6013      	str	r3, [r2, #0]
 800a332:	bf00      	nop
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr
 800a33c:	20025f28 	.word	0x20025f28

0800a340 <xTaskResumeAll>:
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	2300      	movs	r3, #0
 800a348:	60fb      	str	r3, [r7, #12]
 800a34a:	2300      	movs	r3, #0
 800a34c:	60bb      	str	r3, [r7, #8]
 800a34e:	4b42      	ldr	r3, [pc, #264]	@ (800a458 <xTaskResumeAll+0x118>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d10b      	bne.n	800a36e <xTaskResumeAll+0x2e>
 800a356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a35a:	f383 8811 	msr	BASEPRI, r3
 800a35e:	f3bf 8f6f 	isb	sy
 800a362:	f3bf 8f4f 	dsb	sy
 800a366:	603b      	str	r3, [r7, #0]
 800a368:	bf00      	nop
 800a36a:	bf00      	nop
 800a36c:	e7fd      	b.n	800a36a <xTaskResumeAll+0x2a>
 800a36e:	f000 fbeb 	bl	800ab48 <vPortEnterCritical>
 800a372:	4b39      	ldr	r3, [pc, #228]	@ (800a458 <xTaskResumeAll+0x118>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	3b01      	subs	r3, #1
 800a378:	4a37      	ldr	r2, [pc, #220]	@ (800a458 <xTaskResumeAll+0x118>)
 800a37a:	6013      	str	r3, [r2, #0]
 800a37c:	4b36      	ldr	r3, [pc, #216]	@ (800a458 <xTaskResumeAll+0x118>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d161      	bne.n	800a448 <xTaskResumeAll+0x108>
 800a384:	4b35      	ldr	r3, [pc, #212]	@ (800a45c <xTaskResumeAll+0x11c>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d05d      	beq.n	800a448 <xTaskResumeAll+0x108>
 800a38c:	e02e      	b.n	800a3ec <xTaskResumeAll+0xac>
 800a38e:	4b34      	ldr	r3, [pc, #208]	@ (800a460 <xTaskResumeAll+0x120>)
 800a390:	68db      	ldr	r3, [r3, #12]
 800a392:	68db      	ldr	r3, [r3, #12]
 800a394:	60fb      	str	r3, [r7, #12]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	3318      	adds	r3, #24
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7ff fd23 	bl	8009de6 <uxListRemove>
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	3304      	adds	r3, #4
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7ff fd1e 	bl	8009de6 <uxListRemove>
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	409a      	lsls	r2, r3
 800a3b2:	4b2c      	ldr	r3, [pc, #176]	@ (800a464 <xTaskResumeAll+0x124>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	4a2a      	ldr	r2, [pc, #168]	@ (800a464 <xTaskResumeAll+0x124>)
 800a3ba:	6013      	str	r3, [r2, #0]
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3c0:	4613      	mov	r3, r2
 800a3c2:	009b      	lsls	r3, r3, #2
 800a3c4:	4413      	add	r3, r2
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	4a27      	ldr	r2, [pc, #156]	@ (800a468 <xTaskResumeAll+0x128>)
 800a3ca:	441a      	add	r2, r3
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	3304      	adds	r3, #4
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	4610      	mov	r0, r2
 800a3d4:	f7ff fcaa 	bl	8009d2c <vListInsertEnd>
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3dc:	4b23      	ldr	r3, [pc, #140]	@ (800a46c <xTaskResumeAll+0x12c>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d302      	bcc.n	800a3ec <xTaskResumeAll+0xac>
 800a3e6:	4b22      	ldr	r3, [pc, #136]	@ (800a470 <xTaskResumeAll+0x130>)
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	601a      	str	r2, [r3, #0]
 800a3ec:	4b1c      	ldr	r3, [pc, #112]	@ (800a460 <xTaskResumeAll+0x120>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d1cc      	bne.n	800a38e <xTaskResumeAll+0x4e>
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d001      	beq.n	800a3fe <xTaskResumeAll+0xbe>
 800a3fa:	f000 fa65 	bl	800a8c8 <prvResetNextTaskUnblockTime>
 800a3fe:	4b1d      	ldr	r3, [pc, #116]	@ (800a474 <xTaskResumeAll+0x134>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	607b      	str	r3, [r7, #4]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d010      	beq.n	800a42c <xTaskResumeAll+0xec>
 800a40a:	f000 f837 	bl	800a47c <xTaskIncrementTick>
 800a40e:	4603      	mov	r3, r0
 800a410:	2b00      	cmp	r3, #0
 800a412:	d002      	beq.n	800a41a <xTaskResumeAll+0xda>
 800a414:	4b16      	ldr	r3, [pc, #88]	@ (800a470 <xTaskResumeAll+0x130>)
 800a416:	2201      	movs	r2, #1
 800a418:	601a      	str	r2, [r3, #0]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	3b01      	subs	r3, #1
 800a41e:	607b      	str	r3, [r7, #4]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d1f1      	bne.n	800a40a <xTaskResumeAll+0xca>
 800a426:	4b13      	ldr	r3, [pc, #76]	@ (800a474 <xTaskResumeAll+0x134>)
 800a428:	2200      	movs	r2, #0
 800a42a:	601a      	str	r2, [r3, #0]
 800a42c:	4b10      	ldr	r3, [pc, #64]	@ (800a470 <xTaskResumeAll+0x130>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d009      	beq.n	800a448 <xTaskResumeAll+0x108>
 800a434:	2301      	movs	r3, #1
 800a436:	60bb      	str	r3, [r7, #8]
 800a438:	4b0f      	ldr	r3, [pc, #60]	@ (800a478 <xTaskResumeAll+0x138>)
 800a43a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a43e:	601a      	str	r2, [r3, #0]
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	f3bf 8f6f 	isb	sy
 800a448:	f000 fbb0 	bl	800abac <vPortExitCritical>
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	4618      	mov	r0, r3
 800a450:	3710      	adds	r7, #16
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	20025f28 	.word	0x20025f28
 800a45c:	20025f08 	.word	0x20025f08
 800a460:	20025ee0 	.word	0x20025ee0
 800a464:	20025f10 	.word	0x20025f10
 800a468:	20025e4c 	.word	0x20025e4c
 800a46c:	20025e48 	.word	0x20025e48
 800a470:	20025f1c 	.word	0x20025f1c
 800a474:	20025f18 	.word	0x20025f18
 800a478:	e000ed04 	.word	0xe000ed04

0800a47c <xTaskIncrementTick>:
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b086      	sub	sp, #24
 800a480:	af00      	add	r7, sp, #0
 800a482:	2300      	movs	r3, #0
 800a484:	617b      	str	r3, [r7, #20]
 800a486:	4b4f      	ldr	r3, [pc, #316]	@ (800a5c4 <xTaskIncrementTick+0x148>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	f040 808f 	bne.w	800a5ae <xTaskIncrementTick+0x132>
 800a490:	4b4d      	ldr	r3, [pc, #308]	@ (800a5c8 <xTaskIncrementTick+0x14c>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	3301      	adds	r3, #1
 800a496:	613b      	str	r3, [r7, #16]
 800a498:	4a4b      	ldr	r2, [pc, #300]	@ (800a5c8 <xTaskIncrementTick+0x14c>)
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	6013      	str	r3, [r2, #0]
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d121      	bne.n	800a4e8 <xTaskIncrementTick+0x6c>
 800a4a4:	4b49      	ldr	r3, [pc, #292]	@ (800a5cc <xTaskIncrementTick+0x150>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d00b      	beq.n	800a4c6 <xTaskIncrementTick+0x4a>
 800a4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4b2:	f383 8811 	msr	BASEPRI, r3
 800a4b6:	f3bf 8f6f 	isb	sy
 800a4ba:	f3bf 8f4f 	dsb	sy
 800a4be:	603b      	str	r3, [r7, #0]
 800a4c0:	bf00      	nop
 800a4c2:	bf00      	nop
 800a4c4:	e7fd      	b.n	800a4c2 <xTaskIncrementTick+0x46>
 800a4c6:	4b41      	ldr	r3, [pc, #260]	@ (800a5cc <xTaskIncrementTick+0x150>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	60fb      	str	r3, [r7, #12]
 800a4cc:	4b40      	ldr	r3, [pc, #256]	@ (800a5d0 <xTaskIncrementTick+0x154>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4a3e      	ldr	r2, [pc, #248]	@ (800a5cc <xTaskIncrementTick+0x150>)
 800a4d2:	6013      	str	r3, [r2, #0]
 800a4d4:	4a3e      	ldr	r2, [pc, #248]	@ (800a5d0 <xTaskIncrementTick+0x154>)
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	6013      	str	r3, [r2, #0]
 800a4da:	4b3e      	ldr	r3, [pc, #248]	@ (800a5d4 <xTaskIncrementTick+0x158>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	3301      	adds	r3, #1
 800a4e0:	4a3c      	ldr	r2, [pc, #240]	@ (800a5d4 <xTaskIncrementTick+0x158>)
 800a4e2:	6013      	str	r3, [r2, #0]
 800a4e4:	f000 f9f0 	bl	800a8c8 <prvResetNextTaskUnblockTime>
 800a4e8:	4b3b      	ldr	r3, [pc, #236]	@ (800a5d8 <xTaskIncrementTick+0x15c>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	693a      	ldr	r2, [r7, #16]
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d348      	bcc.n	800a584 <xTaskIncrementTick+0x108>
 800a4f2:	4b36      	ldr	r3, [pc, #216]	@ (800a5cc <xTaskIncrementTick+0x150>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d104      	bne.n	800a506 <xTaskIncrementTick+0x8a>
 800a4fc:	4b36      	ldr	r3, [pc, #216]	@ (800a5d8 <xTaskIncrementTick+0x15c>)
 800a4fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a502:	601a      	str	r2, [r3, #0]
 800a504:	e03e      	b.n	800a584 <xTaskIncrementTick+0x108>
 800a506:	4b31      	ldr	r3, [pc, #196]	@ (800a5cc <xTaskIncrementTick+0x150>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	68db      	ldr	r3, [r3, #12]
 800a50c:	68db      	ldr	r3, [r3, #12]
 800a50e:	60bb      	str	r3, [r7, #8]
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	607b      	str	r3, [r7, #4]
 800a516:	693a      	ldr	r2, [r7, #16]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d203      	bcs.n	800a526 <xTaskIncrementTick+0xaa>
 800a51e:	4a2e      	ldr	r2, [pc, #184]	@ (800a5d8 <xTaskIncrementTick+0x15c>)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6013      	str	r3, [r2, #0]
 800a524:	e02e      	b.n	800a584 <xTaskIncrementTick+0x108>
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	3304      	adds	r3, #4
 800a52a:	4618      	mov	r0, r3
 800a52c:	f7ff fc5b 	bl	8009de6 <uxListRemove>
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a534:	2b00      	cmp	r3, #0
 800a536:	d004      	beq.n	800a542 <xTaskIncrementTick+0xc6>
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	3318      	adds	r3, #24
 800a53c:	4618      	mov	r0, r3
 800a53e:	f7ff fc52 	bl	8009de6 <uxListRemove>
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a546:	2201      	movs	r2, #1
 800a548:	409a      	lsls	r2, r3
 800a54a:	4b24      	ldr	r3, [pc, #144]	@ (800a5dc <xTaskIncrementTick+0x160>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4313      	orrs	r3, r2
 800a550:	4a22      	ldr	r2, [pc, #136]	@ (800a5dc <xTaskIncrementTick+0x160>)
 800a552:	6013      	str	r3, [r2, #0]
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a558:	4613      	mov	r3, r2
 800a55a:	009b      	lsls	r3, r3, #2
 800a55c:	4413      	add	r3, r2
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	4a1f      	ldr	r2, [pc, #124]	@ (800a5e0 <xTaskIncrementTick+0x164>)
 800a562:	441a      	add	r2, r3
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	3304      	adds	r3, #4
 800a568:	4619      	mov	r1, r3
 800a56a:	4610      	mov	r0, r2
 800a56c:	f7ff fbde 	bl	8009d2c <vListInsertEnd>
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a574:	4b1b      	ldr	r3, [pc, #108]	@ (800a5e4 <xTaskIncrementTick+0x168>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d3b9      	bcc.n	800a4f2 <xTaskIncrementTick+0x76>
 800a57e:	2301      	movs	r3, #1
 800a580:	617b      	str	r3, [r7, #20]
 800a582:	e7b6      	b.n	800a4f2 <xTaskIncrementTick+0x76>
 800a584:	4b17      	ldr	r3, [pc, #92]	@ (800a5e4 <xTaskIncrementTick+0x168>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a58a:	4915      	ldr	r1, [pc, #84]	@ (800a5e0 <xTaskIncrementTick+0x164>)
 800a58c:	4613      	mov	r3, r2
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	4413      	add	r3, r2
 800a592:	009b      	lsls	r3, r3, #2
 800a594:	440b      	add	r3, r1
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d901      	bls.n	800a5a0 <xTaskIncrementTick+0x124>
 800a59c:	2301      	movs	r3, #1
 800a59e:	617b      	str	r3, [r7, #20]
 800a5a0:	4b11      	ldr	r3, [pc, #68]	@ (800a5e8 <xTaskIncrementTick+0x16c>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d007      	beq.n	800a5b8 <xTaskIncrementTick+0x13c>
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	617b      	str	r3, [r7, #20]
 800a5ac:	e004      	b.n	800a5b8 <xTaskIncrementTick+0x13c>
 800a5ae:	4b0f      	ldr	r3, [pc, #60]	@ (800a5ec <xTaskIncrementTick+0x170>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	4a0d      	ldr	r2, [pc, #52]	@ (800a5ec <xTaskIncrementTick+0x170>)
 800a5b6:	6013      	str	r3, [r2, #0]
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3718      	adds	r7, #24
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop
 800a5c4:	20025f28 	.word	0x20025f28
 800a5c8:	20025f0c 	.word	0x20025f0c
 800a5cc:	20025ed8 	.word	0x20025ed8
 800a5d0:	20025edc 	.word	0x20025edc
 800a5d4:	20025f20 	.word	0x20025f20
 800a5d8:	20025f24 	.word	0x20025f24
 800a5dc:	20025f10 	.word	0x20025f10
 800a5e0:	20025e4c 	.word	0x20025e4c
 800a5e4:	20025e48 	.word	0x20025e48
 800a5e8:	20025f1c 	.word	0x20025f1c
 800a5ec:	20025f18 	.word	0x20025f18

0800a5f0 <vTaskSwitchContext>:
 800a5f0:	b480      	push	{r7}
 800a5f2:	b087      	sub	sp, #28
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	4b27      	ldr	r3, [pc, #156]	@ (800a694 <vTaskSwitchContext+0xa4>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d003      	beq.n	800a606 <vTaskSwitchContext+0x16>
 800a5fe:	4b26      	ldr	r3, [pc, #152]	@ (800a698 <vTaskSwitchContext+0xa8>)
 800a600:	2201      	movs	r2, #1
 800a602:	601a      	str	r2, [r3, #0]
 800a604:	e040      	b.n	800a688 <vTaskSwitchContext+0x98>
 800a606:	4b24      	ldr	r3, [pc, #144]	@ (800a698 <vTaskSwitchContext+0xa8>)
 800a608:	2200      	movs	r2, #0
 800a60a:	601a      	str	r2, [r3, #0]
 800a60c:	4b23      	ldr	r3, [pc, #140]	@ (800a69c <vTaskSwitchContext+0xac>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	60fb      	str	r3, [r7, #12]
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	fab3 f383 	clz	r3, r3
 800a618:	72fb      	strb	r3, [r7, #11]
 800a61a:	7afb      	ldrb	r3, [r7, #11]
 800a61c:	f1c3 031f 	rsb	r3, r3, #31
 800a620:	617b      	str	r3, [r7, #20]
 800a622:	491f      	ldr	r1, [pc, #124]	@ (800a6a0 <vTaskSwitchContext+0xb0>)
 800a624:	697a      	ldr	r2, [r7, #20]
 800a626:	4613      	mov	r3, r2
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	4413      	add	r3, r2
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	440b      	add	r3, r1
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d10b      	bne.n	800a64e <vTaskSwitchContext+0x5e>
 800a636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a63a:	f383 8811 	msr	BASEPRI, r3
 800a63e:	f3bf 8f6f 	isb	sy
 800a642:	f3bf 8f4f 	dsb	sy
 800a646:	607b      	str	r3, [r7, #4]
 800a648:	bf00      	nop
 800a64a:	bf00      	nop
 800a64c:	e7fd      	b.n	800a64a <vTaskSwitchContext+0x5a>
 800a64e:	697a      	ldr	r2, [r7, #20]
 800a650:	4613      	mov	r3, r2
 800a652:	009b      	lsls	r3, r3, #2
 800a654:	4413      	add	r3, r2
 800a656:	009b      	lsls	r3, r3, #2
 800a658:	4a11      	ldr	r2, [pc, #68]	@ (800a6a0 <vTaskSwitchContext+0xb0>)
 800a65a:	4413      	add	r3, r2
 800a65c:	613b      	str	r3, [r7, #16]
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	685a      	ldr	r2, [r3, #4]
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	605a      	str	r2, [r3, #4]
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	685a      	ldr	r2, [r3, #4]
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	3308      	adds	r3, #8
 800a670:	429a      	cmp	r2, r3
 800a672:	d104      	bne.n	800a67e <vTaskSwitchContext+0x8e>
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	685a      	ldr	r2, [r3, #4]
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	605a      	str	r2, [r3, #4]
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	68db      	ldr	r3, [r3, #12]
 800a684:	4a07      	ldr	r2, [pc, #28]	@ (800a6a4 <vTaskSwitchContext+0xb4>)
 800a686:	6013      	str	r3, [r2, #0]
 800a688:	bf00      	nop
 800a68a:	371c      	adds	r7, #28
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr
 800a694:	20025f28 	.word	0x20025f28
 800a698:	20025f1c 	.word	0x20025f1c
 800a69c:	20025f10 	.word	0x20025f10
 800a6a0:	20025e4c 	.word	0x20025e4c
 800a6a4:	20025e48 	.word	0x20025e48

0800a6a8 <vTaskPlaceOnEventList>:
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d10b      	bne.n	800a6d0 <vTaskPlaceOnEventList+0x28>
 800a6b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6bc:	f383 8811 	msr	BASEPRI, r3
 800a6c0:	f3bf 8f6f 	isb	sy
 800a6c4:	f3bf 8f4f 	dsb	sy
 800a6c8:	60fb      	str	r3, [r7, #12]
 800a6ca:	bf00      	nop
 800a6cc:	bf00      	nop
 800a6ce:	e7fd      	b.n	800a6cc <vTaskPlaceOnEventList+0x24>
 800a6d0:	4b07      	ldr	r3, [pc, #28]	@ (800a6f0 <vTaskPlaceOnEventList+0x48>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	3318      	adds	r3, #24
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f7ff fb4b 	bl	8009d74 <vListInsert>
 800a6de:	2101      	movs	r1, #1
 800a6e0:	6838      	ldr	r0, [r7, #0]
 800a6e2:	f000 f9b7 	bl	800aa54 <prvAddCurrentTaskToDelayedList>
 800a6e6:	bf00      	nop
 800a6e8:	3710      	adds	r7, #16
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	20025e48 	.word	0x20025e48

0800a6f4 <xTaskRemoveFromEventList>:
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b086      	sub	sp, #24
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	68db      	ldr	r3, [r3, #12]
 800a700:	68db      	ldr	r3, [r3, #12]
 800a702:	613b      	str	r3, [r7, #16]
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d10b      	bne.n	800a722 <xTaskRemoveFromEventList+0x2e>
 800a70a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a70e:	f383 8811 	msr	BASEPRI, r3
 800a712:	f3bf 8f6f 	isb	sy
 800a716:	f3bf 8f4f 	dsb	sy
 800a71a:	60fb      	str	r3, [r7, #12]
 800a71c:	bf00      	nop
 800a71e:	bf00      	nop
 800a720:	e7fd      	b.n	800a71e <xTaskRemoveFromEventList+0x2a>
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	3318      	adds	r3, #24
 800a726:	4618      	mov	r0, r3
 800a728:	f7ff fb5d 	bl	8009de6 <uxListRemove>
 800a72c:	4b1d      	ldr	r3, [pc, #116]	@ (800a7a4 <xTaskRemoveFromEventList+0xb0>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d11c      	bne.n	800a76e <xTaskRemoveFromEventList+0x7a>
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	3304      	adds	r3, #4
 800a738:	4618      	mov	r0, r3
 800a73a:	f7ff fb54 	bl	8009de6 <uxListRemove>
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a742:	2201      	movs	r2, #1
 800a744:	409a      	lsls	r2, r3
 800a746:	4b18      	ldr	r3, [pc, #96]	@ (800a7a8 <xTaskRemoveFromEventList+0xb4>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4313      	orrs	r3, r2
 800a74c:	4a16      	ldr	r2, [pc, #88]	@ (800a7a8 <xTaskRemoveFromEventList+0xb4>)
 800a74e:	6013      	str	r3, [r2, #0]
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a754:	4613      	mov	r3, r2
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	4413      	add	r3, r2
 800a75a:	009b      	lsls	r3, r3, #2
 800a75c:	4a13      	ldr	r2, [pc, #76]	@ (800a7ac <xTaskRemoveFromEventList+0xb8>)
 800a75e:	441a      	add	r2, r3
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	3304      	adds	r3, #4
 800a764:	4619      	mov	r1, r3
 800a766:	4610      	mov	r0, r2
 800a768:	f7ff fae0 	bl	8009d2c <vListInsertEnd>
 800a76c:	e005      	b.n	800a77a <xTaskRemoveFromEventList+0x86>
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	3318      	adds	r3, #24
 800a772:	4619      	mov	r1, r3
 800a774:	480e      	ldr	r0, [pc, #56]	@ (800a7b0 <xTaskRemoveFromEventList+0xbc>)
 800a776:	f7ff fad9 	bl	8009d2c <vListInsertEnd>
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a77e:	4b0d      	ldr	r3, [pc, #52]	@ (800a7b4 <xTaskRemoveFromEventList+0xc0>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a784:	429a      	cmp	r2, r3
 800a786:	d905      	bls.n	800a794 <xTaskRemoveFromEventList+0xa0>
 800a788:	2301      	movs	r3, #1
 800a78a:	617b      	str	r3, [r7, #20]
 800a78c:	4b0a      	ldr	r3, [pc, #40]	@ (800a7b8 <xTaskRemoveFromEventList+0xc4>)
 800a78e:	2201      	movs	r2, #1
 800a790:	601a      	str	r2, [r3, #0]
 800a792:	e001      	b.n	800a798 <xTaskRemoveFromEventList+0xa4>
 800a794:	2300      	movs	r3, #0
 800a796:	617b      	str	r3, [r7, #20]
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	4618      	mov	r0, r3
 800a79c:	3718      	adds	r7, #24
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	20025f28 	.word	0x20025f28
 800a7a8:	20025f10 	.word	0x20025f10
 800a7ac:	20025e4c 	.word	0x20025e4c
 800a7b0:	20025ee0 	.word	0x20025ee0
 800a7b4:	20025e48 	.word	0x20025e48
 800a7b8:	20025f1c 	.word	0x20025f1c

0800a7bc <vTaskInternalSetTimeOutState>:
 800a7bc:	b480      	push	{r7}
 800a7be:	b083      	sub	sp, #12
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	4b06      	ldr	r3, [pc, #24]	@ (800a7e0 <vTaskInternalSetTimeOutState+0x24>)
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	601a      	str	r2, [r3, #0]
 800a7cc:	4b05      	ldr	r3, [pc, #20]	@ (800a7e4 <vTaskInternalSetTimeOutState+0x28>)
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	605a      	str	r2, [r3, #4]
 800a7d4:	bf00      	nop
 800a7d6:	370c      	adds	r7, #12
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr
 800a7e0:	20025f20 	.word	0x20025f20
 800a7e4:	20025f0c 	.word	0x20025f0c

0800a7e8 <xTaskCheckForTimeOut>:
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b088      	sub	sp, #32
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	6039      	str	r1, [r7, #0]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d10b      	bne.n	800a810 <xTaskCheckForTimeOut+0x28>
 800a7f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7fc:	f383 8811 	msr	BASEPRI, r3
 800a800:	f3bf 8f6f 	isb	sy
 800a804:	f3bf 8f4f 	dsb	sy
 800a808:	613b      	str	r3, [r7, #16]
 800a80a:	bf00      	nop
 800a80c:	bf00      	nop
 800a80e:	e7fd      	b.n	800a80c <xTaskCheckForTimeOut+0x24>
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d10b      	bne.n	800a82e <xTaskCheckForTimeOut+0x46>
 800a816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a81a:	f383 8811 	msr	BASEPRI, r3
 800a81e:	f3bf 8f6f 	isb	sy
 800a822:	f3bf 8f4f 	dsb	sy
 800a826:	60fb      	str	r3, [r7, #12]
 800a828:	bf00      	nop
 800a82a:	bf00      	nop
 800a82c:	e7fd      	b.n	800a82a <xTaskCheckForTimeOut+0x42>
 800a82e:	f000 f98b 	bl	800ab48 <vPortEnterCritical>
 800a832:	4b1d      	ldr	r3, [pc, #116]	@ (800a8a8 <xTaskCheckForTimeOut+0xc0>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	61bb      	str	r3, [r7, #24]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	69ba      	ldr	r2, [r7, #24]
 800a83e:	1ad3      	subs	r3, r2, r3
 800a840:	617b      	str	r3, [r7, #20]
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a84a:	d102      	bne.n	800a852 <xTaskCheckForTimeOut+0x6a>
 800a84c:	2300      	movs	r3, #0
 800a84e:	61fb      	str	r3, [r7, #28]
 800a850:	e023      	b.n	800a89a <xTaskCheckForTimeOut+0xb2>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	4b15      	ldr	r3, [pc, #84]	@ (800a8ac <xTaskCheckForTimeOut+0xc4>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d007      	beq.n	800a86e <xTaskCheckForTimeOut+0x86>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	69ba      	ldr	r2, [r7, #24]
 800a864:	429a      	cmp	r2, r3
 800a866:	d302      	bcc.n	800a86e <xTaskCheckForTimeOut+0x86>
 800a868:	2301      	movs	r3, #1
 800a86a:	61fb      	str	r3, [r7, #28]
 800a86c:	e015      	b.n	800a89a <xTaskCheckForTimeOut+0xb2>
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	697a      	ldr	r2, [r7, #20]
 800a874:	429a      	cmp	r2, r3
 800a876:	d20b      	bcs.n	800a890 <xTaskCheckForTimeOut+0xa8>
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	1ad2      	subs	r2, r2, r3
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	601a      	str	r2, [r3, #0]
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f7ff ff99 	bl	800a7bc <vTaskInternalSetTimeOutState>
 800a88a:	2300      	movs	r3, #0
 800a88c:	61fb      	str	r3, [r7, #28]
 800a88e:	e004      	b.n	800a89a <xTaskCheckForTimeOut+0xb2>
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	2200      	movs	r2, #0
 800a894:	601a      	str	r2, [r3, #0]
 800a896:	2301      	movs	r3, #1
 800a898:	61fb      	str	r3, [r7, #28]
 800a89a:	f000 f987 	bl	800abac <vPortExitCritical>
 800a89e:	69fb      	ldr	r3, [r7, #28]
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3720      	adds	r7, #32
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	20025f0c 	.word	0x20025f0c
 800a8ac:	20025f20 	.word	0x20025f20

0800a8b0 <vTaskMissedYield>:
 800a8b0:	b480      	push	{r7}
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	4b03      	ldr	r3, [pc, #12]	@ (800a8c4 <vTaskMissedYield+0x14>)
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	601a      	str	r2, [r3, #0]
 800a8ba:	bf00      	nop
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr
 800a8c4:	20025f1c 	.word	0x20025f1c

0800a8c8 <prvResetNextTaskUnblockTime>:
 800a8c8:	b480      	push	{r7}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	4b0c      	ldr	r3, [pc, #48]	@ (800a900 <prvResetNextTaskUnblockTime+0x38>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d104      	bne.n	800a8e2 <prvResetNextTaskUnblockTime+0x1a>
 800a8d8:	4b0a      	ldr	r3, [pc, #40]	@ (800a904 <prvResetNextTaskUnblockTime+0x3c>)
 800a8da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a8de:	601a      	str	r2, [r3, #0]
 800a8e0:	e008      	b.n	800a8f4 <prvResetNextTaskUnblockTime+0x2c>
 800a8e2:	4b07      	ldr	r3, [pc, #28]	@ (800a900 <prvResetNextTaskUnblockTime+0x38>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	68db      	ldr	r3, [r3, #12]
 800a8e8:	68db      	ldr	r3, [r3, #12]
 800a8ea:	607b      	str	r3, [r7, #4]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	4a04      	ldr	r2, [pc, #16]	@ (800a904 <prvResetNextTaskUnblockTime+0x3c>)
 800a8f2:	6013      	str	r3, [r2, #0]
 800a8f4:	bf00      	nop
 800a8f6:	370c      	adds	r7, #12
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr
 800a900:	20025ed8 	.word	0x20025ed8
 800a904:	20025f24 	.word	0x20025f24

0800a908 <xTaskGetSchedulerState>:
 800a908:	b480      	push	{r7}
 800a90a:	b083      	sub	sp, #12
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	4b0b      	ldr	r3, [pc, #44]	@ (800a93c <xTaskGetSchedulerState+0x34>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d102      	bne.n	800a91c <xTaskGetSchedulerState+0x14>
 800a916:	2301      	movs	r3, #1
 800a918:	607b      	str	r3, [r7, #4]
 800a91a:	e008      	b.n	800a92e <xTaskGetSchedulerState+0x26>
 800a91c:	4b08      	ldr	r3, [pc, #32]	@ (800a940 <xTaskGetSchedulerState+0x38>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d102      	bne.n	800a92a <xTaskGetSchedulerState+0x22>
 800a924:	2302      	movs	r3, #2
 800a926:	607b      	str	r3, [r7, #4]
 800a928:	e001      	b.n	800a92e <xTaskGetSchedulerState+0x26>
 800a92a:	2300      	movs	r3, #0
 800a92c:	607b      	str	r3, [r7, #4]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4618      	mov	r0, r3
 800a932:	370c      	adds	r7, #12
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr
 800a93c:	20025f14 	.word	0x20025f14
 800a940:	20025f28 	.word	0x20025f28

0800a944 <xTaskPriorityDisinherit>:
 800a944:	b580      	push	{r7, lr}
 800a946:	b086      	sub	sp, #24
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	613b      	str	r3, [r7, #16]
 800a950:	2300      	movs	r3, #0
 800a952:	617b      	str	r3, [r7, #20]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d070      	beq.n	800aa3c <xTaskPriorityDisinherit+0xf8>
 800a95a:	4b3b      	ldr	r3, [pc, #236]	@ (800aa48 <xTaskPriorityDisinherit+0x104>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	693a      	ldr	r2, [r7, #16]
 800a960:	429a      	cmp	r2, r3
 800a962:	d00b      	beq.n	800a97c <xTaskPriorityDisinherit+0x38>
 800a964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a968:	f383 8811 	msr	BASEPRI, r3
 800a96c:	f3bf 8f6f 	isb	sy
 800a970:	f3bf 8f4f 	dsb	sy
 800a974:	60fb      	str	r3, [r7, #12]
 800a976:	bf00      	nop
 800a978:	bf00      	nop
 800a97a:	e7fd      	b.n	800a978 <xTaskPriorityDisinherit+0x34>
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a980:	2b00      	cmp	r3, #0
 800a982:	d10b      	bne.n	800a99c <xTaskPriorityDisinherit+0x58>
 800a984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a988:	f383 8811 	msr	BASEPRI, r3
 800a98c:	f3bf 8f6f 	isb	sy
 800a990:	f3bf 8f4f 	dsb	sy
 800a994:	60bb      	str	r3, [r7, #8]
 800a996:	bf00      	nop
 800a998:	bf00      	nop
 800a99a:	e7fd      	b.n	800a998 <xTaskPriorityDisinherit+0x54>
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a9a0:	1e5a      	subs	r2, r3, #1
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	649a      	str	r2, [r3, #72]	@ 0x48
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d044      	beq.n	800aa3c <xTaskPriorityDisinherit+0xf8>
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d140      	bne.n	800aa3c <xTaskPriorityDisinherit+0xf8>
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	3304      	adds	r3, #4
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7ff fa11 	bl	8009de6 <uxListRemove>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d115      	bne.n	800a9f6 <xTaskPriorityDisinherit+0xb2>
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9ce:	491f      	ldr	r1, [pc, #124]	@ (800aa4c <xTaskPriorityDisinherit+0x108>)
 800a9d0:	4613      	mov	r3, r2
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	4413      	add	r3, r2
 800a9d6:	009b      	lsls	r3, r3, #2
 800a9d8:	440b      	add	r3, r1
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d10a      	bne.n	800a9f6 <xTaskPriorityDisinherit+0xb2>
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ea:	43da      	mvns	r2, r3
 800a9ec:	4b18      	ldr	r3, [pc, #96]	@ (800aa50 <xTaskPriorityDisinherit+0x10c>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4013      	ands	r3, r2
 800a9f2:	4a17      	ldr	r2, [pc, #92]	@ (800aa50 <xTaskPriorityDisinherit+0x10c>)
 800a9f4:	6013      	str	r3, [r2, #0]
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa02:	f1c3 0207 	rsb	r2, r3, #7
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	619a      	str	r2, [r3, #24]
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa0e:	2201      	movs	r2, #1
 800aa10:	409a      	lsls	r2, r3
 800aa12:	4b0f      	ldr	r3, [pc, #60]	@ (800aa50 <xTaskPriorityDisinherit+0x10c>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4313      	orrs	r3, r2
 800aa18:	4a0d      	ldr	r2, [pc, #52]	@ (800aa50 <xTaskPriorityDisinherit+0x10c>)
 800aa1a:	6013      	str	r3, [r2, #0]
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa20:	4613      	mov	r3, r2
 800aa22:	009b      	lsls	r3, r3, #2
 800aa24:	4413      	add	r3, r2
 800aa26:	009b      	lsls	r3, r3, #2
 800aa28:	4a08      	ldr	r2, [pc, #32]	@ (800aa4c <xTaskPriorityDisinherit+0x108>)
 800aa2a:	441a      	add	r2, r3
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	3304      	adds	r3, #4
 800aa30:	4619      	mov	r1, r3
 800aa32:	4610      	mov	r0, r2
 800aa34:	f7ff f97a 	bl	8009d2c <vListInsertEnd>
 800aa38:	2301      	movs	r3, #1
 800aa3a:	617b      	str	r3, [r7, #20]
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3718      	adds	r7, #24
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	20025e48 	.word	0x20025e48
 800aa4c:	20025e4c 	.word	0x20025e4c
 800aa50:	20025f10 	.word	0x20025f10

0800aa54 <prvAddCurrentTaskToDelayedList>:
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b084      	sub	sp, #16
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	6039      	str	r1, [r7, #0]
 800aa5e:	4b29      	ldr	r3, [pc, #164]	@ (800ab04 <prvAddCurrentTaskToDelayedList+0xb0>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	60fb      	str	r3, [r7, #12]
 800aa64:	4b28      	ldr	r3, [pc, #160]	@ (800ab08 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	3304      	adds	r3, #4
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7ff f9bb 	bl	8009de6 <uxListRemove>
 800aa70:	4603      	mov	r3, r0
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d10b      	bne.n	800aa8e <prvAddCurrentTaskToDelayedList+0x3a>
 800aa76:	4b24      	ldr	r3, [pc, #144]	@ (800ab08 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa7c:	2201      	movs	r2, #1
 800aa7e:	fa02 f303 	lsl.w	r3, r2, r3
 800aa82:	43da      	mvns	r2, r3
 800aa84:	4b21      	ldr	r3, [pc, #132]	@ (800ab0c <prvAddCurrentTaskToDelayedList+0xb8>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4013      	ands	r3, r2
 800aa8a:	4a20      	ldr	r2, [pc, #128]	@ (800ab0c <prvAddCurrentTaskToDelayedList+0xb8>)
 800aa8c:	6013      	str	r3, [r2, #0]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa94:	d10a      	bne.n	800aaac <prvAddCurrentTaskToDelayedList+0x58>
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d007      	beq.n	800aaac <prvAddCurrentTaskToDelayedList+0x58>
 800aa9c:	4b1a      	ldr	r3, [pc, #104]	@ (800ab08 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	3304      	adds	r3, #4
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	481a      	ldr	r0, [pc, #104]	@ (800ab10 <prvAddCurrentTaskToDelayedList+0xbc>)
 800aaa6:	f7ff f941 	bl	8009d2c <vListInsertEnd>
 800aaaa:	e026      	b.n	800aafa <prvAddCurrentTaskToDelayedList+0xa6>
 800aaac:	68fa      	ldr	r2, [r7, #12]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	4413      	add	r3, r2
 800aab2:	60bb      	str	r3, [r7, #8]
 800aab4:	4b14      	ldr	r3, [pc, #80]	@ (800ab08 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	68ba      	ldr	r2, [r7, #8]
 800aaba:	605a      	str	r2, [r3, #4]
 800aabc:	68ba      	ldr	r2, [r7, #8]
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d209      	bcs.n	800aad8 <prvAddCurrentTaskToDelayedList+0x84>
 800aac4:	4b13      	ldr	r3, [pc, #76]	@ (800ab14 <prvAddCurrentTaskToDelayedList+0xc0>)
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	4b0f      	ldr	r3, [pc, #60]	@ (800ab08 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	3304      	adds	r3, #4
 800aace:	4619      	mov	r1, r3
 800aad0:	4610      	mov	r0, r2
 800aad2:	f7ff f94f 	bl	8009d74 <vListInsert>
 800aad6:	e010      	b.n	800aafa <prvAddCurrentTaskToDelayedList+0xa6>
 800aad8:	4b0f      	ldr	r3, [pc, #60]	@ (800ab18 <prvAddCurrentTaskToDelayedList+0xc4>)
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	4b0a      	ldr	r3, [pc, #40]	@ (800ab08 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	3304      	adds	r3, #4
 800aae2:	4619      	mov	r1, r3
 800aae4:	4610      	mov	r0, r2
 800aae6:	f7ff f945 	bl	8009d74 <vListInsert>
 800aaea:	4b0c      	ldr	r3, [pc, #48]	@ (800ab1c <prvAddCurrentTaskToDelayedList+0xc8>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	68ba      	ldr	r2, [r7, #8]
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d202      	bcs.n	800aafa <prvAddCurrentTaskToDelayedList+0xa6>
 800aaf4:	4a09      	ldr	r2, [pc, #36]	@ (800ab1c <prvAddCurrentTaskToDelayedList+0xc8>)
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	6013      	str	r3, [r2, #0]
 800aafa:	bf00      	nop
 800aafc:	3710      	adds	r7, #16
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	20025f0c 	.word	0x20025f0c
 800ab08:	20025e48 	.word	0x20025e48
 800ab0c:	20025f10 	.word	0x20025f10
 800ab10:	20025ef4 	.word	0x20025ef4
 800ab14:	20025edc 	.word	0x20025edc
 800ab18:	20025ed8 	.word	0x20025ed8
 800ab1c:	20025f24 	.word	0x20025f24

0800ab20 <SVC_Handler>:
 800ab20:	4b07      	ldr	r3, [pc, #28]	@ (800ab40 <pxCurrentTCBConst2>)
 800ab22:	6819      	ldr	r1, [r3, #0]
 800ab24:	6808      	ldr	r0, [r1, #0]
 800ab26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab2a:	f380 8809 	msr	PSP, r0
 800ab2e:	f3bf 8f6f 	isb	sy
 800ab32:	f04f 0000 	mov.w	r0, #0
 800ab36:	f380 8811 	msr	BASEPRI, r0
 800ab3a:	4770      	bx	lr
 800ab3c:	f3af 8000 	nop.w

0800ab40 <pxCurrentTCBConst2>:
 800ab40:	20025e48 	.word	0x20025e48
 800ab44:	bf00      	nop
 800ab46:	bf00      	nop

0800ab48 <vPortEnterCritical>:
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab52:	f383 8811 	msr	BASEPRI, r3
 800ab56:	f3bf 8f6f 	isb	sy
 800ab5a:	f3bf 8f4f 	dsb	sy
 800ab5e:	607b      	str	r3, [r7, #4]
 800ab60:	bf00      	nop
 800ab62:	4b10      	ldr	r3, [pc, #64]	@ (800aba4 <vPortEnterCritical+0x5c>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	3301      	adds	r3, #1
 800ab68:	4a0e      	ldr	r2, [pc, #56]	@ (800aba4 <vPortEnterCritical+0x5c>)
 800ab6a:	6013      	str	r3, [r2, #0]
 800ab6c:	4b0d      	ldr	r3, [pc, #52]	@ (800aba4 <vPortEnterCritical+0x5c>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	2b01      	cmp	r3, #1
 800ab72:	d110      	bne.n	800ab96 <vPortEnterCritical+0x4e>
 800ab74:	4b0c      	ldr	r3, [pc, #48]	@ (800aba8 <vPortEnterCritical+0x60>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d00b      	beq.n	800ab96 <vPortEnterCritical+0x4e>
 800ab7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab82:	f383 8811 	msr	BASEPRI, r3
 800ab86:	f3bf 8f6f 	isb	sy
 800ab8a:	f3bf 8f4f 	dsb	sy
 800ab8e:	603b      	str	r3, [r7, #0]
 800ab90:	bf00      	nop
 800ab92:	bf00      	nop
 800ab94:	e7fd      	b.n	800ab92 <vPortEnterCritical+0x4a>
 800ab96:	bf00      	nop
 800ab98:	370c      	adds	r7, #12
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr
 800aba2:	bf00      	nop
 800aba4:	20000010 	.word	0x20000010
 800aba8:	e000ed04 	.word	0xe000ed04

0800abac <vPortExitCritical>:
 800abac:	b480      	push	{r7}
 800abae:	b083      	sub	sp, #12
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	4b12      	ldr	r3, [pc, #72]	@ (800abfc <vPortExitCritical+0x50>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d10b      	bne.n	800abd2 <vPortExitCritical+0x26>
 800abba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abbe:	f383 8811 	msr	BASEPRI, r3
 800abc2:	f3bf 8f6f 	isb	sy
 800abc6:	f3bf 8f4f 	dsb	sy
 800abca:	607b      	str	r3, [r7, #4]
 800abcc:	bf00      	nop
 800abce:	bf00      	nop
 800abd0:	e7fd      	b.n	800abce <vPortExitCritical+0x22>
 800abd2:	4b0a      	ldr	r3, [pc, #40]	@ (800abfc <vPortExitCritical+0x50>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	3b01      	subs	r3, #1
 800abd8:	4a08      	ldr	r2, [pc, #32]	@ (800abfc <vPortExitCritical+0x50>)
 800abda:	6013      	str	r3, [r2, #0]
 800abdc:	4b07      	ldr	r3, [pc, #28]	@ (800abfc <vPortExitCritical+0x50>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d105      	bne.n	800abf0 <vPortExitCritical+0x44>
 800abe4:	2300      	movs	r3, #0
 800abe6:	603b      	str	r3, [r7, #0]
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	f383 8811 	msr	BASEPRI, r3
 800abee:	bf00      	nop
 800abf0:	bf00      	nop
 800abf2:	370c      	adds	r7, #12
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr
 800abfc:	20000010 	.word	0x20000010

0800ac00 <PendSV_Handler>:
 800ac00:	f3ef 8009 	mrs	r0, PSP
 800ac04:	f3bf 8f6f 	isb	sy
 800ac08:	4b15      	ldr	r3, [pc, #84]	@ (800ac60 <pxCurrentTCBConst>)
 800ac0a:	681a      	ldr	r2, [r3, #0]
 800ac0c:	f01e 0f10 	tst.w	lr, #16
 800ac10:	bf08      	it	eq
 800ac12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ac16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac1a:	6010      	str	r0, [r2, #0]
 800ac1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ac20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ac24:	f380 8811 	msr	BASEPRI, r0
 800ac28:	f3bf 8f4f 	dsb	sy
 800ac2c:	f3bf 8f6f 	isb	sy
 800ac30:	f7ff fcde 	bl	800a5f0 <vTaskSwitchContext>
 800ac34:	f04f 0000 	mov.w	r0, #0
 800ac38:	f380 8811 	msr	BASEPRI, r0
 800ac3c:	bc09      	pop	{r0, r3}
 800ac3e:	6819      	ldr	r1, [r3, #0]
 800ac40:	6808      	ldr	r0, [r1, #0]
 800ac42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac46:	f01e 0f10 	tst.w	lr, #16
 800ac4a:	bf08      	it	eq
 800ac4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ac50:	f380 8809 	msr	PSP, r0
 800ac54:	f3bf 8f6f 	isb	sy
 800ac58:	4770      	bx	lr
 800ac5a:	bf00      	nop
 800ac5c:	f3af 8000 	nop.w

0800ac60 <pxCurrentTCBConst>:
 800ac60:	20025e48 	.word	0x20025e48
 800ac64:	bf00      	nop
 800ac66:	bf00      	nop

0800ac68 <SysTick_Handler>:
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac72:	f383 8811 	msr	BASEPRI, r3
 800ac76:	f3bf 8f6f 	isb	sy
 800ac7a:	f3bf 8f4f 	dsb	sy
 800ac7e:	607b      	str	r3, [r7, #4]
 800ac80:	bf00      	nop
 800ac82:	f7ff fbfb 	bl	800a47c <xTaskIncrementTick>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d003      	beq.n	800ac94 <SysTick_Handler+0x2c>
 800ac8c:	4b06      	ldr	r3, [pc, #24]	@ (800aca8 <SysTick_Handler+0x40>)
 800ac8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac92:	601a      	str	r2, [r3, #0]
 800ac94:	2300      	movs	r3, #0
 800ac96:	603b      	str	r3, [r7, #0]
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	f383 8811 	msr	BASEPRI, r3
 800ac9e:	bf00      	nop
 800aca0:	bf00      	nop
 800aca2:	3708      	adds	r7, #8
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	e000ed04 	.word	0xe000ed04

0800acac <vPortValidateInterruptPriority>:
 800acac:	b480      	push	{r7}
 800acae:	b085      	sub	sp, #20
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	f3ef 8305 	mrs	r3, IPSR
 800acb6:	60fb      	str	r3, [r7, #12]
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2b0f      	cmp	r3, #15
 800acbc:	d915      	bls.n	800acea <vPortValidateInterruptPriority+0x3e>
 800acbe:	4a18      	ldr	r2, [pc, #96]	@ (800ad20 <vPortValidateInterruptPriority+0x74>)
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	4413      	add	r3, r2
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	72fb      	strb	r3, [r7, #11]
 800acc8:	4b16      	ldr	r3, [pc, #88]	@ (800ad24 <vPortValidateInterruptPriority+0x78>)
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	7afa      	ldrb	r2, [r7, #11]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d20b      	bcs.n	800acea <vPortValidateInterruptPriority+0x3e>
 800acd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acd6:	f383 8811 	msr	BASEPRI, r3
 800acda:	f3bf 8f6f 	isb	sy
 800acde:	f3bf 8f4f 	dsb	sy
 800ace2:	607b      	str	r3, [r7, #4]
 800ace4:	bf00      	nop
 800ace6:	bf00      	nop
 800ace8:	e7fd      	b.n	800ace6 <vPortValidateInterruptPriority+0x3a>
 800acea:	4b0f      	ldr	r3, [pc, #60]	@ (800ad28 <vPortValidateInterruptPriority+0x7c>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800acf2:	4b0e      	ldr	r3, [pc, #56]	@ (800ad2c <vPortValidateInterruptPriority+0x80>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d90b      	bls.n	800ad12 <vPortValidateInterruptPriority+0x66>
 800acfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acfe:	f383 8811 	msr	BASEPRI, r3
 800ad02:	f3bf 8f6f 	isb	sy
 800ad06:	f3bf 8f4f 	dsb	sy
 800ad0a:	603b      	str	r3, [r7, #0]
 800ad0c:	bf00      	nop
 800ad0e:	bf00      	nop
 800ad10:	e7fd      	b.n	800ad0e <vPortValidateInterruptPriority+0x62>
 800ad12:	bf00      	nop
 800ad14:	3714      	adds	r7, #20
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr
 800ad1e:	bf00      	nop
 800ad20:	e000e3f0 	.word	0xe000e3f0
 800ad24:	20025f2c 	.word	0x20025f2c
 800ad28:	e000ed0c 	.word	0xe000ed0c
 800ad2c:	20025f30 	.word	0x20025f30

0800ad30 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7fe fec6 	bl	8009ad0 <USBH_LL_IncTimer>
}
 800ad44:	bf00      	nop
 800ad46:	3708      	adds	r7, #8
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b082      	sub	sp, #8
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f7fe ff0a 	bl	8009b74 <USBH_LL_Connect>
}
 800ad60:	bf00      	nop
 800ad62:	3708      	adds	r7, #8
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ad76:	4618      	mov	r0, r3
 800ad78:	f7fe ff1f 	bl	8009bba <USBH_LL_Disconnect>
}
 800ad7c:	bf00      	nop
 800ad7e:	3708      	adds	r7, #8
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b082      	sub	sp, #8
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	460b      	mov	r3, r1
 800ad8e:	70fb      	strb	r3, [r7, #3]
 800ad90:	4613      	mov	r3, r2
 800ad92:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f7fe ff3f 	bl	8009c1e <USBH_LL_NotifyURBChange>
#endif
}
 800ada0:	bf00      	nop
 800ada2:	3708      	adds	r7, #8
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7fe feb4 	bl	8009b24 <USBH_LL_PortEnabled>
}
 800adbc:	bf00      	nop
 800adbe:	3708      	adds	r7, #8
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}

0800adc4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b082      	sub	sp, #8
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800add2:	4618      	mov	r0, r3
 800add4:	f7fe fec0 	bl	8009b58 <USBH_LL_PortDisabled>
}
 800add8:	bf00      	nop
 800adda:	3708      	adds	r7, #8
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}

0800ade0 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b084      	sub	sp, #16
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ade8:	2300      	movs	r3, #0
 800adea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800adec:	2300      	movs	r3, #0
 800adee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7f9 fa6f 	bl	80042da <HAL_HCD_Stop>
 800adfc:	4603      	mov	r3, r0
 800adfe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ae00:	7bfb      	ldrb	r3, [r7, #15]
 800ae02:	4618      	mov	r0, r3
 800ae04:	f000 f808 	bl	800ae18 <USBH_Get_USB_Status>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3710      	adds	r7, #16
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
	...

0800ae18 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b085      	sub	sp, #20
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	4603      	mov	r3, r0
 800ae20:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae22:	2300      	movs	r3, #0
 800ae24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ae26:	79fb      	ldrb	r3, [r7, #7]
 800ae28:	2b03      	cmp	r3, #3
 800ae2a:	d817      	bhi.n	800ae5c <USBH_Get_USB_Status+0x44>
 800ae2c:	a201      	add	r2, pc, #4	@ (adr r2, 800ae34 <USBH_Get_USB_Status+0x1c>)
 800ae2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae32:	bf00      	nop
 800ae34:	0800ae45 	.word	0x0800ae45
 800ae38:	0800ae4b 	.word	0x0800ae4b
 800ae3c:	0800ae51 	.word	0x0800ae51
 800ae40:	0800ae57 	.word	0x0800ae57
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ae44:	2300      	movs	r3, #0
 800ae46:	73fb      	strb	r3, [r7, #15]
    break;
 800ae48:	e00b      	b.n	800ae62 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ae4a:	2302      	movs	r3, #2
 800ae4c:	73fb      	strb	r3, [r7, #15]
    break;
 800ae4e:	e008      	b.n	800ae62 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ae50:	2301      	movs	r3, #1
 800ae52:	73fb      	strb	r3, [r7, #15]
    break;
 800ae54:	e005      	b.n	800ae62 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ae56:	2302      	movs	r3, #2
 800ae58:	73fb      	strb	r3, [r7, #15]
    break;
 800ae5a:	e002      	b.n	800ae62 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ae5c:	2302      	movs	r3, #2
 800ae5e:	73fb      	strb	r3, [r7, #15]
    break;
 800ae60:	bf00      	nop
  }
  return usb_status;
 800ae62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3714      	adds	r7, #20
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <malloc>:
 800ae70:	4b02      	ldr	r3, [pc, #8]	@ (800ae7c <malloc+0xc>)
 800ae72:	4601      	mov	r1, r0
 800ae74:	6818      	ldr	r0, [r3, #0]
 800ae76:	f000 b825 	b.w	800aec4 <_malloc_r>
 800ae7a:	bf00      	nop
 800ae7c:	20000020 	.word	0x20000020

0800ae80 <sbrk_aligned>:
 800ae80:	b570      	push	{r4, r5, r6, lr}
 800ae82:	4e0f      	ldr	r6, [pc, #60]	@ (800aec0 <sbrk_aligned+0x40>)
 800ae84:	460c      	mov	r4, r1
 800ae86:	6831      	ldr	r1, [r6, #0]
 800ae88:	4605      	mov	r5, r0
 800ae8a:	b911      	cbnz	r1, 800ae92 <sbrk_aligned+0x12>
 800ae8c:	f000 ff46 	bl	800bd1c <_sbrk_r>
 800ae90:	6030      	str	r0, [r6, #0]
 800ae92:	4621      	mov	r1, r4
 800ae94:	4628      	mov	r0, r5
 800ae96:	f000 ff41 	bl	800bd1c <_sbrk_r>
 800ae9a:	1c43      	adds	r3, r0, #1
 800ae9c:	d103      	bne.n	800aea6 <sbrk_aligned+0x26>
 800ae9e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800aea2:	4620      	mov	r0, r4
 800aea4:	bd70      	pop	{r4, r5, r6, pc}
 800aea6:	1cc4      	adds	r4, r0, #3
 800aea8:	f024 0403 	bic.w	r4, r4, #3
 800aeac:	42a0      	cmp	r0, r4
 800aeae:	d0f8      	beq.n	800aea2 <sbrk_aligned+0x22>
 800aeb0:	1a21      	subs	r1, r4, r0
 800aeb2:	4628      	mov	r0, r5
 800aeb4:	f000 ff32 	bl	800bd1c <_sbrk_r>
 800aeb8:	3001      	adds	r0, #1
 800aeba:	d1f2      	bne.n	800aea2 <sbrk_aligned+0x22>
 800aebc:	e7ef      	b.n	800ae9e <sbrk_aligned+0x1e>
 800aebe:	bf00      	nop
 800aec0:	20026314 	.word	0x20026314

0800aec4 <_malloc_r>:
 800aec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aec8:	1ccd      	adds	r5, r1, #3
 800aeca:	f025 0503 	bic.w	r5, r5, #3
 800aece:	3508      	adds	r5, #8
 800aed0:	2d0c      	cmp	r5, #12
 800aed2:	bf38      	it	cc
 800aed4:	250c      	movcc	r5, #12
 800aed6:	2d00      	cmp	r5, #0
 800aed8:	4606      	mov	r6, r0
 800aeda:	db01      	blt.n	800aee0 <_malloc_r+0x1c>
 800aedc:	42a9      	cmp	r1, r5
 800aede:	d904      	bls.n	800aeea <_malloc_r+0x26>
 800aee0:	230c      	movs	r3, #12
 800aee2:	6033      	str	r3, [r6, #0]
 800aee4:	2000      	movs	r0, #0
 800aee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800afc0 <_malloc_r+0xfc>
 800aeee:	f000 f869 	bl	800afc4 <__malloc_lock>
 800aef2:	f8d8 3000 	ldr.w	r3, [r8]
 800aef6:	461c      	mov	r4, r3
 800aef8:	bb44      	cbnz	r4, 800af4c <_malloc_r+0x88>
 800aefa:	4629      	mov	r1, r5
 800aefc:	4630      	mov	r0, r6
 800aefe:	f7ff ffbf 	bl	800ae80 <sbrk_aligned>
 800af02:	1c43      	adds	r3, r0, #1
 800af04:	4604      	mov	r4, r0
 800af06:	d158      	bne.n	800afba <_malloc_r+0xf6>
 800af08:	f8d8 4000 	ldr.w	r4, [r8]
 800af0c:	4627      	mov	r7, r4
 800af0e:	2f00      	cmp	r7, #0
 800af10:	d143      	bne.n	800af9a <_malloc_r+0xd6>
 800af12:	2c00      	cmp	r4, #0
 800af14:	d04b      	beq.n	800afae <_malloc_r+0xea>
 800af16:	6823      	ldr	r3, [r4, #0]
 800af18:	4639      	mov	r1, r7
 800af1a:	4630      	mov	r0, r6
 800af1c:	eb04 0903 	add.w	r9, r4, r3
 800af20:	f000 fefc 	bl	800bd1c <_sbrk_r>
 800af24:	4581      	cmp	r9, r0
 800af26:	d142      	bne.n	800afae <_malloc_r+0xea>
 800af28:	6821      	ldr	r1, [r4, #0]
 800af2a:	1a6d      	subs	r5, r5, r1
 800af2c:	4629      	mov	r1, r5
 800af2e:	4630      	mov	r0, r6
 800af30:	f7ff ffa6 	bl	800ae80 <sbrk_aligned>
 800af34:	3001      	adds	r0, #1
 800af36:	d03a      	beq.n	800afae <_malloc_r+0xea>
 800af38:	6823      	ldr	r3, [r4, #0]
 800af3a:	442b      	add	r3, r5
 800af3c:	6023      	str	r3, [r4, #0]
 800af3e:	f8d8 3000 	ldr.w	r3, [r8]
 800af42:	685a      	ldr	r2, [r3, #4]
 800af44:	bb62      	cbnz	r2, 800afa0 <_malloc_r+0xdc>
 800af46:	f8c8 7000 	str.w	r7, [r8]
 800af4a:	e00f      	b.n	800af6c <_malloc_r+0xa8>
 800af4c:	6822      	ldr	r2, [r4, #0]
 800af4e:	1b52      	subs	r2, r2, r5
 800af50:	d420      	bmi.n	800af94 <_malloc_r+0xd0>
 800af52:	2a0b      	cmp	r2, #11
 800af54:	d917      	bls.n	800af86 <_malloc_r+0xc2>
 800af56:	1961      	adds	r1, r4, r5
 800af58:	42a3      	cmp	r3, r4
 800af5a:	6025      	str	r5, [r4, #0]
 800af5c:	bf18      	it	ne
 800af5e:	6059      	strne	r1, [r3, #4]
 800af60:	6863      	ldr	r3, [r4, #4]
 800af62:	bf08      	it	eq
 800af64:	f8c8 1000 	streq.w	r1, [r8]
 800af68:	5162      	str	r2, [r4, r5]
 800af6a:	604b      	str	r3, [r1, #4]
 800af6c:	4630      	mov	r0, r6
 800af6e:	f000 f82f 	bl	800afd0 <__malloc_unlock>
 800af72:	f104 000b 	add.w	r0, r4, #11
 800af76:	1d23      	adds	r3, r4, #4
 800af78:	f020 0007 	bic.w	r0, r0, #7
 800af7c:	1ac2      	subs	r2, r0, r3
 800af7e:	bf1c      	itt	ne
 800af80:	1a1b      	subne	r3, r3, r0
 800af82:	50a3      	strne	r3, [r4, r2]
 800af84:	e7af      	b.n	800aee6 <_malloc_r+0x22>
 800af86:	6862      	ldr	r2, [r4, #4]
 800af88:	42a3      	cmp	r3, r4
 800af8a:	bf0c      	ite	eq
 800af8c:	f8c8 2000 	streq.w	r2, [r8]
 800af90:	605a      	strne	r2, [r3, #4]
 800af92:	e7eb      	b.n	800af6c <_malloc_r+0xa8>
 800af94:	4623      	mov	r3, r4
 800af96:	6864      	ldr	r4, [r4, #4]
 800af98:	e7ae      	b.n	800aef8 <_malloc_r+0x34>
 800af9a:	463c      	mov	r4, r7
 800af9c:	687f      	ldr	r7, [r7, #4]
 800af9e:	e7b6      	b.n	800af0e <_malloc_r+0x4a>
 800afa0:	461a      	mov	r2, r3
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	42a3      	cmp	r3, r4
 800afa6:	d1fb      	bne.n	800afa0 <_malloc_r+0xdc>
 800afa8:	2300      	movs	r3, #0
 800afaa:	6053      	str	r3, [r2, #4]
 800afac:	e7de      	b.n	800af6c <_malloc_r+0xa8>
 800afae:	230c      	movs	r3, #12
 800afb0:	6033      	str	r3, [r6, #0]
 800afb2:	4630      	mov	r0, r6
 800afb4:	f000 f80c 	bl	800afd0 <__malloc_unlock>
 800afb8:	e794      	b.n	800aee4 <_malloc_r+0x20>
 800afba:	6005      	str	r5, [r0, #0]
 800afbc:	e7d6      	b.n	800af6c <_malloc_r+0xa8>
 800afbe:	bf00      	nop
 800afc0:	20026318 	.word	0x20026318

0800afc4 <__malloc_lock>:
 800afc4:	4801      	ldr	r0, [pc, #4]	@ (800afcc <__malloc_lock+0x8>)
 800afc6:	f000 bef6 	b.w	800bdb6 <__retarget_lock_acquire_recursive>
 800afca:	bf00      	nop
 800afcc:	2002645c 	.word	0x2002645c

0800afd0 <__malloc_unlock>:
 800afd0:	4801      	ldr	r0, [pc, #4]	@ (800afd8 <__malloc_unlock+0x8>)
 800afd2:	f000 bef1 	b.w	800bdb8 <__retarget_lock_release_recursive>
 800afd6:	bf00      	nop
 800afd8:	2002645c 	.word	0x2002645c

0800afdc <__cvt>:
 800afdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800afe0:	ec57 6b10 	vmov	r6, r7, d0
 800afe4:	2f00      	cmp	r7, #0
 800afe6:	460c      	mov	r4, r1
 800afe8:	4619      	mov	r1, r3
 800afea:	463b      	mov	r3, r7
 800afec:	bfbb      	ittet	lt
 800afee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800aff2:	461f      	movlt	r7, r3
 800aff4:	2300      	movge	r3, #0
 800aff6:	232d      	movlt	r3, #45	@ 0x2d
 800aff8:	700b      	strb	r3, [r1, #0]
 800affa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800affc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b000:	4691      	mov	r9, r2
 800b002:	f023 0820 	bic.w	r8, r3, #32
 800b006:	bfbc      	itt	lt
 800b008:	4632      	movlt	r2, r6
 800b00a:	4616      	movlt	r6, r2
 800b00c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b010:	d005      	beq.n	800b01e <__cvt+0x42>
 800b012:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b016:	d100      	bne.n	800b01a <__cvt+0x3e>
 800b018:	3401      	adds	r4, #1
 800b01a:	2102      	movs	r1, #2
 800b01c:	e000      	b.n	800b020 <__cvt+0x44>
 800b01e:	2103      	movs	r1, #3
 800b020:	ab03      	add	r3, sp, #12
 800b022:	9301      	str	r3, [sp, #4]
 800b024:	ab02      	add	r3, sp, #8
 800b026:	9300      	str	r3, [sp, #0]
 800b028:	ec47 6b10 	vmov	d0, r6, r7
 800b02c:	4653      	mov	r3, sl
 800b02e:	4622      	mov	r2, r4
 800b030:	f000 ff5a 	bl	800bee8 <_dtoa_r>
 800b034:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b038:	4605      	mov	r5, r0
 800b03a:	d119      	bne.n	800b070 <__cvt+0x94>
 800b03c:	f019 0f01 	tst.w	r9, #1
 800b040:	d00e      	beq.n	800b060 <__cvt+0x84>
 800b042:	eb00 0904 	add.w	r9, r0, r4
 800b046:	2200      	movs	r2, #0
 800b048:	2300      	movs	r3, #0
 800b04a:	4630      	mov	r0, r6
 800b04c:	4639      	mov	r1, r7
 800b04e:	f7f5 fd4b 	bl	8000ae8 <__aeabi_dcmpeq>
 800b052:	b108      	cbz	r0, 800b058 <__cvt+0x7c>
 800b054:	f8cd 900c 	str.w	r9, [sp, #12]
 800b058:	2230      	movs	r2, #48	@ 0x30
 800b05a:	9b03      	ldr	r3, [sp, #12]
 800b05c:	454b      	cmp	r3, r9
 800b05e:	d31e      	bcc.n	800b09e <__cvt+0xc2>
 800b060:	9b03      	ldr	r3, [sp, #12]
 800b062:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b064:	1b5b      	subs	r3, r3, r5
 800b066:	4628      	mov	r0, r5
 800b068:	6013      	str	r3, [r2, #0]
 800b06a:	b004      	add	sp, #16
 800b06c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b070:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b074:	eb00 0904 	add.w	r9, r0, r4
 800b078:	d1e5      	bne.n	800b046 <__cvt+0x6a>
 800b07a:	7803      	ldrb	r3, [r0, #0]
 800b07c:	2b30      	cmp	r3, #48	@ 0x30
 800b07e:	d10a      	bne.n	800b096 <__cvt+0xba>
 800b080:	2200      	movs	r2, #0
 800b082:	2300      	movs	r3, #0
 800b084:	4630      	mov	r0, r6
 800b086:	4639      	mov	r1, r7
 800b088:	f7f5 fd2e 	bl	8000ae8 <__aeabi_dcmpeq>
 800b08c:	b918      	cbnz	r0, 800b096 <__cvt+0xba>
 800b08e:	f1c4 0401 	rsb	r4, r4, #1
 800b092:	f8ca 4000 	str.w	r4, [sl]
 800b096:	f8da 3000 	ldr.w	r3, [sl]
 800b09a:	4499      	add	r9, r3
 800b09c:	e7d3      	b.n	800b046 <__cvt+0x6a>
 800b09e:	1c59      	adds	r1, r3, #1
 800b0a0:	9103      	str	r1, [sp, #12]
 800b0a2:	701a      	strb	r2, [r3, #0]
 800b0a4:	e7d9      	b.n	800b05a <__cvt+0x7e>

0800b0a6 <__exponent>:
 800b0a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0a8:	2900      	cmp	r1, #0
 800b0aa:	bfba      	itte	lt
 800b0ac:	4249      	neglt	r1, r1
 800b0ae:	232d      	movlt	r3, #45	@ 0x2d
 800b0b0:	232b      	movge	r3, #43	@ 0x2b
 800b0b2:	2909      	cmp	r1, #9
 800b0b4:	7002      	strb	r2, [r0, #0]
 800b0b6:	7043      	strb	r3, [r0, #1]
 800b0b8:	dd29      	ble.n	800b10e <__exponent+0x68>
 800b0ba:	f10d 0307 	add.w	r3, sp, #7
 800b0be:	461d      	mov	r5, r3
 800b0c0:	270a      	movs	r7, #10
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	fbb1 f6f7 	udiv	r6, r1, r7
 800b0c8:	fb07 1416 	mls	r4, r7, r6, r1
 800b0cc:	3430      	adds	r4, #48	@ 0x30
 800b0ce:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b0d2:	460c      	mov	r4, r1
 800b0d4:	2c63      	cmp	r4, #99	@ 0x63
 800b0d6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800b0da:	4631      	mov	r1, r6
 800b0dc:	dcf1      	bgt.n	800b0c2 <__exponent+0x1c>
 800b0de:	3130      	adds	r1, #48	@ 0x30
 800b0e0:	1e94      	subs	r4, r2, #2
 800b0e2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b0e6:	1c41      	adds	r1, r0, #1
 800b0e8:	4623      	mov	r3, r4
 800b0ea:	42ab      	cmp	r3, r5
 800b0ec:	d30a      	bcc.n	800b104 <__exponent+0x5e>
 800b0ee:	f10d 0309 	add.w	r3, sp, #9
 800b0f2:	1a9b      	subs	r3, r3, r2
 800b0f4:	42ac      	cmp	r4, r5
 800b0f6:	bf88      	it	hi
 800b0f8:	2300      	movhi	r3, #0
 800b0fa:	3302      	adds	r3, #2
 800b0fc:	4403      	add	r3, r0
 800b0fe:	1a18      	subs	r0, r3, r0
 800b100:	b003      	add	sp, #12
 800b102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b104:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b108:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b10c:	e7ed      	b.n	800b0ea <__exponent+0x44>
 800b10e:	2330      	movs	r3, #48	@ 0x30
 800b110:	3130      	adds	r1, #48	@ 0x30
 800b112:	7083      	strb	r3, [r0, #2]
 800b114:	70c1      	strb	r1, [r0, #3]
 800b116:	1d03      	adds	r3, r0, #4
 800b118:	e7f1      	b.n	800b0fe <__exponent+0x58>
	...

0800b11c <_printf_float>:
 800b11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b120:	b08d      	sub	sp, #52	@ 0x34
 800b122:	460c      	mov	r4, r1
 800b124:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b128:	4616      	mov	r6, r2
 800b12a:	461f      	mov	r7, r3
 800b12c:	4605      	mov	r5, r0
 800b12e:	f000 fdbd 	bl	800bcac <_localeconv_r>
 800b132:	6803      	ldr	r3, [r0, #0]
 800b134:	9304      	str	r3, [sp, #16]
 800b136:	4618      	mov	r0, r3
 800b138:	f7f5 f8aa 	bl	8000290 <strlen>
 800b13c:	2300      	movs	r3, #0
 800b13e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b140:	f8d8 3000 	ldr.w	r3, [r8]
 800b144:	9005      	str	r0, [sp, #20]
 800b146:	3307      	adds	r3, #7
 800b148:	f023 0307 	bic.w	r3, r3, #7
 800b14c:	f103 0208 	add.w	r2, r3, #8
 800b150:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b154:	f8d4 b000 	ldr.w	fp, [r4]
 800b158:	f8c8 2000 	str.w	r2, [r8]
 800b15c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b160:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b164:	9307      	str	r3, [sp, #28]
 800b166:	f8cd 8018 	str.w	r8, [sp, #24]
 800b16a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b16e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b172:	4b9c      	ldr	r3, [pc, #624]	@ (800b3e4 <_printf_float+0x2c8>)
 800b174:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b178:	f7f5 fce8 	bl	8000b4c <__aeabi_dcmpun>
 800b17c:	bb70      	cbnz	r0, 800b1dc <_printf_float+0xc0>
 800b17e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b182:	4b98      	ldr	r3, [pc, #608]	@ (800b3e4 <_printf_float+0x2c8>)
 800b184:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b188:	f7f5 fcc2 	bl	8000b10 <__aeabi_dcmple>
 800b18c:	bb30      	cbnz	r0, 800b1dc <_printf_float+0xc0>
 800b18e:	2200      	movs	r2, #0
 800b190:	2300      	movs	r3, #0
 800b192:	4640      	mov	r0, r8
 800b194:	4649      	mov	r1, r9
 800b196:	f7f5 fcb1 	bl	8000afc <__aeabi_dcmplt>
 800b19a:	b110      	cbz	r0, 800b1a2 <_printf_float+0x86>
 800b19c:	232d      	movs	r3, #45	@ 0x2d
 800b19e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b1a2:	4a91      	ldr	r2, [pc, #580]	@ (800b3e8 <_printf_float+0x2cc>)
 800b1a4:	4b91      	ldr	r3, [pc, #580]	@ (800b3ec <_printf_float+0x2d0>)
 800b1a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b1aa:	bf8c      	ite	hi
 800b1ac:	4690      	movhi	r8, r2
 800b1ae:	4698      	movls	r8, r3
 800b1b0:	2303      	movs	r3, #3
 800b1b2:	6123      	str	r3, [r4, #16]
 800b1b4:	f02b 0304 	bic.w	r3, fp, #4
 800b1b8:	6023      	str	r3, [r4, #0]
 800b1ba:	f04f 0900 	mov.w	r9, #0
 800b1be:	9700      	str	r7, [sp, #0]
 800b1c0:	4633      	mov	r3, r6
 800b1c2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b1c4:	4621      	mov	r1, r4
 800b1c6:	4628      	mov	r0, r5
 800b1c8:	f000 f9d2 	bl	800b570 <_printf_common>
 800b1cc:	3001      	adds	r0, #1
 800b1ce:	f040 808d 	bne.w	800b2ec <_printf_float+0x1d0>
 800b1d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b1d6:	b00d      	add	sp, #52	@ 0x34
 800b1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1dc:	4642      	mov	r2, r8
 800b1de:	464b      	mov	r3, r9
 800b1e0:	4640      	mov	r0, r8
 800b1e2:	4649      	mov	r1, r9
 800b1e4:	f7f5 fcb2 	bl	8000b4c <__aeabi_dcmpun>
 800b1e8:	b140      	cbz	r0, 800b1fc <_printf_float+0xe0>
 800b1ea:	464b      	mov	r3, r9
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	bfbc      	itt	lt
 800b1f0:	232d      	movlt	r3, #45	@ 0x2d
 800b1f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b1f6:	4a7e      	ldr	r2, [pc, #504]	@ (800b3f0 <_printf_float+0x2d4>)
 800b1f8:	4b7e      	ldr	r3, [pc, #504]	@ (800b3f4 <_printf_float+0x2d8>)
 800b1fa:	e7d4      	b.n	800b1a6 <_printf_float+0x8a>
 800b1fc:	6863      	ldr	r3, [r4, #4]
 800b1fe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b202:	9206      	str	r2, [sp, #24]
 800b204:	1c5a      	adds	r2, r3, #1
 800b206:	d13b      	bne.n	800b280 <_printf_float+0x164>
 800b208:	2306      	movs	r3, #6
 800b20a:	6063      	str	r3, [r4, #4]
 800b20c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b210:	2300      	movs	r3, #0
 800b212:	6022      	str	r2, [r4, #0]
 800b214:	9303      	str	r3, [sp, #12]
 800b216:	ab0a      	add	r3, sp, #40	@ 0x28
 800b218:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b21c:	ab09      	add	r3, sp, #36	@ 0x24
 800b21e:	9300      	str	r3, [sp, #0]
 800b220:	6861      	ldr	r1, [r4, #4]
 800b222:	ec49 8b10 	vmov	d0, r8, r9
 800b226:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b22a:	4628      	mov	r0, r5
 800b22c:	f7ff fed6 	bl	800afdc <__cvt>
 800b230:	9b06      	ldr	r3, [sp, #24]
 800b232:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b234:	2b47      	cmp	r3, #71	@ 0x47
 800b236:	4680      	mov	r8, r0
 800b238:	d129      	bne.n	800b28e <_printf_float+0x172>
 800b23a:	1cc8      	adds	r0, r1, #3
 800b23c:	db02      	blt.n	800b244 <_printf_float+0x128>
 800b23e:	6863      	ldr	r3, [r4, #4]
 800b240:	4299      	cmp	r1, r3
 800b242:	dd41      	ble.n	800b2c8 <_printf_float+0x1ac>
 800b244:	f1aa 0a02 	sub.w	sl, sl, #2
 800b248:	fa5f fa8a 	uxtb.w	sl, sl
 800b24c:	3901      	subs	r1, #1
 800b24e:	4652      	mov	r2, sl
 800b250:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b254:	9109      	str	r1, [sp, #36]	@ 0x24
 800b256:	f7ff ff26 	bl	800b0a6 <__exponent>
 800b25a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b25c:	1813      	adds	r3, r2, r0
 800b25e:	2a01      	cmp	r2, #1
 800b260:	4681      	mov	r9, r0
 800b262:	6123      	str	r3, [r4, #16]
 800b264:	dc02      	bgt.n	800b26c <_printf_float+0x150>
 800b266:	6822      	ldr	r2, [r4, #0]
 800b268:	07d2      	lsls	r2, r2, #31
 800b26a:	d501      	bpl.n	800b270 <_printf_float+0x154>
 800b26c:	3301      	adds	r3, #1
 800b26e:	6123      	str	r3, [r4, #16]
 800b270:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b274:	2b00      	cmp	r3, #0
 800b276:	d0a2      	beq.n	800b1be <_printf_float+0xa2>
 800b278:	232d      	movs	r3, #45	@ 0x2d
 800b27a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b27e:	e79e      	b.n	800b1be <_printf_float+0xa2>
 800b280:	9a06      	ldr	r2, [sp, #24]
 800b282:	2a47      	cmp	r2, #71	@ 0x47
 800b284:	d1c2      	bne.n	800b20c <_printf_float+0xf0>
 800b286:	2b00      	cmp	r3, #0
 800b288:	d1c0      	bne.n	800b20c <_printf_float+0xf0>
 800b28a:	2301      	movs	r3, #1
 800b28c:	e7bd      	b.n	800b20a <_printf_float+0xee>
 800b28e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b292:	d9db      	bls.n	800b24c <_printf_float+0x130>
 800b294:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b298:	d118      	bne.n	800b2cc <_printf_float+0x1b0>
 800b29a:	2900      	cmp	r1, #0
 800b29c:	6863      	ldr	r3, [r4, #4]
 800b29e:	dd0b      	ble.n	800b2b8 <_printf_float+0x19c>
 800b2a0:	6121      	str	r1, [r4, #16]
 800b2a2:	b913      	cbnz	r3, 800b2aa <_printf_float+0x18e>
 800b2a4:	6822      	ldr	r2, [r4, #0]
 800b2a6:	07d0      	lsls	r0, r2, #31
 800b2a8:	d502      	bpl.n	800b2b0 <_printf_float+0x194>
 800b2aa:	3301      	adds	r3, #1
 800b2ac:	440b      	add	r3, r1
 800b2ae:	6123      	str	r3, [r4, #16]
 800b2b0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b2b2:	f04f 0900 	mov.w	r9, #0
 800b2b6:	e7db      	b.n	800b270 <_printf_float+0x154>
 800b2b8:	b913      	cbnz	r3, 800b2c0 <_printf_float+0x1a4>
 800b2ba:	6822      	ldr	r2, [r4, #0]
 800b2bc:	07d2      	lsls	r2, r2, #31
 800b2be:	d501      	bpl.n	800b2c4 <_printf_float+0x1a8>
 800b2c0:	3302      	adds	r3, #2
 800b2c2:	e7f4      	b.n	800b2ae <_printf_float+0x192>
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	e7f2      	b.n	800b2ae <_printf_float+0x192>
 800b2c8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b2cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2ce:	4299      	cmp	r1, r3
 800b2d0:	db05      	blt.n	800b2de <_printf_float+0x1c2>
 800b2d2:	6823      	ldr	r3, [r4, #0]
 800b2d4:	6121      	str	r1, [r4, #16]
 800b2d6:	07d8      	lsls	r0, r3, #31
 800b2d8:	d5ea      	bpl.n	800b2b0 <_printf_float+0x194>
 800b2da:	1c4b      	adds	r3, r1, #1
 800b2dc:	e7e7      	b.n	800b2ae <_printf_float+0x192>
 800b2de:	2900      	cmp	r1, #0
 800b2e0:	bfd4      	ite	le
 800b2e2:	f1c1 0202 	rsble	r2, r1, #2
 800b2e6:	2201      	movgt	r2, #1
 800b2e8:	4413      	add	r3, r2
 800b2ea:	e7e0      	b.n	800b2ae <_printf_float+0x192>
 800b2ec:	6823      	ldr	r3, [r4, #0]
 800b2ee:	055a      	lsls	r2, r3, #21
 800b2f0:	d407      	bmi.n	800b302 <_printf_float+0x1e6>
 800b2f2:	6923      	ldr	r3, [r4, #16]
 800b2f4:	4642      	mov	r2, r8
 800b2f6:	4631      	mov	r1, r6
 800b2f8:	4628      	mov	r0, r5
 800b2fa:	47b8      	blx	r7
 800b2fc:	3001      	adds	r0, #1
 800b2fe:	d12b      	bne.n	800b358 <_printf_float+0x23c>
 800b300:	e767      	b.n	800b1d2 <_printf_float+0xb6>
 800b302:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b306:	f240 80dd 	bls.w	800b4c4 <_printf_float+0x3a8>
 800b30a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b30e:	2200      	movs	r2, #0
 800b310:	2300      	movs	r3, #0
 800b312:	f7f5 fbe9 	bl	8000ae8 <__aeabi_dcmpeq>
 800b316:	2800      	cmp	r0, #0
 800b318:	d033      	beq.n	800b382 <_printf_float+0x266>
 800b31a:	4a37      	ldr	r2, [pc, #220]	@ (800b3f8 <_printf_float+0x2dc>)
 800b31c:	2301      	movs	r3, #1
 800b31e:	4631      	mov	r1, r6
 800b320:	4628      	mov	r0, r5
 800b322:	47b8      	blx	r7
 800b324:	3001      	adds	r0, #1
 800b326:	f43f af54 	beq.w	800b1d2 <_printf_float+0xb6>
 800b32a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b32e:	4543      	cmp	r3, r8
 800b330:	db02      	blt.n	800b338 <_printf_float+0x21c>
 800b332:	6823      	ldr	r3, [r4, #0]
 800b334:	07d8      	lsls	r0, r3, #31
 800b336:	d50f      	bpl.n	800b358 <_printf_float+0x23c>
 800b338:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b33c:	4631      	mov	r1, r6
 800b33e:	4628      	mov	r0, r5
 800b340:	47b8      	blx	r7
 800b342:	3001      	adds	r0, #1
 800b344:	f43f af45 	beq.w	800b1d2 <_printf_float+0xb6>
 800b348:	f04f 0900 	mov.w	r9, #0
 800b34c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b350:	f104 0a1a 	add.w	sl, r4, #26
 800b354:	45c8      	cmp	r8, r9
 800b356:	dc09      	bgt.n	800b36c <_printf_float+0x250>
 800b358:	6823      	ldr	r3, [r4, #0]
 800b35a:	079b      	lsls	r3, r3, #30
 800b35c:	f100 8103 	bmi.w	800b566 <_printf_float+0x44a>
 800b360:	68e0      	ldr	r0, [r4, #12]
 800b362:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b364:	4298      	cmp	r0, r3
 800b366:	bfb8      	it	lt
 800b368:	4618      	movlt	r0, r3
 800b36a:	e734      	b.n	800b1d6 <_printf_float+0xba>
 800b36c:	2301      	movs	r3, #1
 800b36e:	4652      	mov	r2, sl
 800b370:	4631      	mov	r1, r6
 800b372:	4628      	mov	r0, r5
 800b374:	47b8      	blx	r7
 800b376:	3001      	adds	r0, #1
 800b378:	f43f af2b 	beq.w	800b1d2 <_printf_float+0xb6>
 800b37c:	f109 0901 	add.w	r9, r9, #1
 800b380:	e7e8      	b.n	800b354 <_printf_float+0x238>
 800b382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b384:	2b00      	cmp	r3, #0
 800b386:	dc39      	bgt.n	800b3fc <_printf_float+0x2e0>
 800b388:	4a1b      	ldr	r2, [pc, #108]	@ (800b3f8 <_printf_float+0x2dc>)
 800b38a:	2301      	movs	r3, #1
 800b38c:	4631      	mov	r1, r6
 800b38e:	4628      	mov	r0, r5
 800b390:	47b8      	blx	r7
 800b392:	3001      	adds	r0, #1
 800b394:	f43f af1d 	beq.w	800b1d2 <_printf_float+0xb6>
 800b398:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b39c:	ea59 0303 	orrs.w	r3, r9, r3
 800b3a0:	d102      	bne.n	800b3a8 <_printf_float+0x28c>
 800b3a2:	6823      	ldr	r3, [r4, #0]
 800b3a4:	07d9      	lsls	r1, r3, #31
 800b3a6:	d5d7      	bpl.n	800b358 <_printf_float+0x23c>
 800b3a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3ac:	4631      	mov	r1, r6
 800b3ae:	4628      	mov	r0, r5
 800b3b0:	47b8      	blx	r7
 800b3b2:	3001      	adds	r0, #1
 800b3b4:	f43f af0d 	beq.w	800b1d2 <_printf_float+0xb6>
 800b3b8:	f04f 0a00 	mov.w	sl, #0
 800b3bc:	f104 0b1a 	add.w	fp, r4, #26
 800b3c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3c2:	425b      	negs	r3, r3
 800b3c4:	4553      	cmp	r3, sl
 800b3c6:	dc01      	bgt.n	800b3cc <_printf_float+0x2b0>
 800b3c8:	464b      	mov	r3, r9
 800b3ca:	e793      	b.n	800b2f4 <_printf_float+0x1d8>
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	465a      	mov	r2, fp
 800b3d0:	4631      	mov	r1, r6
 800b3d2:	4628      	mov	r0, r5
 800b3d4:	47b8      	blx	r7
 800b3d6:	3001      	adds	r0, #1
 800b3d8:	f43f aefb 	beq.w	800b1d2 <_printf_float+0xb6>
 800b3dc:	f10a 0a01 	add.w	sl, sl, #1
 800b3e0:	e7ee      	b.n	800b3c0 <_printf_float+0x2a4>
 800b3e2:	bf00      	nop
 800b3e4:	7fefffff 	.word	0x7fefffff
 800b3e8:	0800d9dc 	.word	0x0800d9dc
 800b3ec:	0800d9d8 	.word	0x0800d9d8
 800b3f0:	0800d9e4 	.word	0x0800d9e4
 800b3f4:	0800d9e0 	.word	0x0800d9e0
 800b3f8:	0800d9e8 	.word	0x0800d9e8
 800b3fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b3fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b402:	4553      	cmp	r3, sl
 800b404:	bfa8      	it	ge
 800b406:	4653      	movge	r3, sl
 800b408:	2b00      	cmp	r3, #0
 800b40a:	4699      	mov	r9, r3
 800b40c:	dc36      	bgt.n	800b47c <_printf_float+0x360>
 800b40e:	f04f 0b00 	mov.w	fp, #0
 800b412:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b416:	f104 021a 	add.w	r2, r4, #26
 800b41a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b41c:	9306      	str	r3, [sp, #24]
 800b41e:	eba3 0309 	sub.w	r3, r3, r9
 800b422:	455b      	cmp	r3, fp
 800b424:	dc31      	bgt.n	800b48a <_printf_float+0x36e>
 800b426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b428:	459a      	cmp	sl, r3
 800b42a:	dc3a      	bgt.n	800b4a2 <_printf_float+0x386>
 800b42c:	6823      	ldr	r3, [r4, #0]
 800b42e:	07da      	lsls	r2, r3, #31
 800b430:	d437      	bmi.n	800b4a2 <_printf_float+0x386>
 800b432:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b434:	ebaa 0903 	sub.w	r9, sl, r3
 800b438:	9b06      	ldr	r3, [sp, #24]
 800b43a:	ebaa 0303 	sub.w	r3, sl, r3
 800b43e:	4599      	cmp	r9, r3
 800b440:	bfa8      	it	ge
 800b442:	4699      	movge	r9, r3
 800b444:	f1b9 0f00 	cmp.w	r9, #0
 800b448:	dc33      	bgt.n	800b4b2 <_printf_float+0x396>
 800b44a:	f04f 0800 	mov.w	r8, #0
 800b44e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b452:	f104 0b1a 	add.w	fp, r4, #26
 800b456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b458:	ebaa 0303 	sub.w	r3, sl, r3
 800b45c:	eba3 0309 	sub.w	r3, r3, r9
 800b460:	4543      	cmp	r3, r8
 800b462:	f77f af79 	ble.w	800b358 <_printf_float+0x23c>
 800b466:	2301      	movs	r3, #1
 800b468:	465a      	mov	r2, fp
 800b46a:	4631      	mov	r1, r6
 800b46c:	4628      	mov	r0, r5
 800b46e:	47b8      	blx	r7
 800b470:	3001      	adds	r0, #1
 800b472:	f43f aeae 	beq.w	800b1d2 <_printf_float+0xb6>
 800b476:	f108 0801 	add.w	r8, r8, #1
 800b47a:	e7ec      	b.n	800b456 <_printf_float+0x33a>
 800b47c:	4642      	mov	r2, r8
 800b47e:	4631      	mov	r1, r6
 800b480:	4628      	mov	r0, r5
 800b482:	47b8      	blx	r7
 800b484:	3001      	adds	r0, #1
 800b486:	d1c2      	bne.n	800b40e <_printf_float+0x2f2>
 800b488:	e6a3      	b.n	800b1d2 <_printf_float+0xb6>
 800b48a:	2301      	movs	r3, #1
 800b48c:	4631      	mov	r1, r6
 800b48e:	4628      	mov	r0, r5
 800b490:	9206      	str	r2, [sp, #24]
 800b492:	47b8      	blx	r7
 800b494:	3001      	adds	r0, #1
 800b496:	f43f ae9c 	beq.w	800b1d2 <_printf_float+0xb6>
 800b49a:	9a06      	ldr	r2, [sp, #24]
 800b49c:	f10b 0b01 	add.w	fp, fp, #1
 800b4a0:	e7bb      	b.n	800b41a <_printf_float+0x2fe>
 800b4a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4a6:	4631      	mov	r1, r6
 800b4a8:	4628      	mov	r0, r5
 800b4aa:	47b8      	blx	r7
 800b4ac:	3001      	adds	r0, #1
 800b4ae:	d1c0      	bne.n	800b432 <_printf_float+0x316>
 800b4b0:	e68f      	b.n	800b1d2 <_printf_float+0xb6>
 800b4b2:	9a06      	ldr	r2, [sp, #24]
 800b4b4:	464b      	mov	r3, r9
 800b4b6:	4442      	add	r2, r8
 800b4b8:	4631      	mov	r1, r6
 800b4ba:	4628      	mov	r0, r5
 800b4bc:	47b8      	blx	r7
 800b4be:	3001      	adds	r0, #1
 800b4c0:	d1c3      	bne.n	800b44a <_printf_float+0x32e>
 800b4c2:	e686      	b.n	800b1d2 <_printf_float+0xb6>
 800b4c4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b4c8:	f1ba 0f01 	cmp.w	sl, #1
 800b4cc:	dc01      	bgt.n	800b4d2 <_printf_float+0x3b6>
 800b4ce:	07db      	lsls	r3, r3, #31
 800b4d0:	d536      	bpl.n	800b540 <_printf_float+0x424>
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	4642      	mov	r2, r8
 800b4d6:	4631      	mov	r1, r6
 800b4d8:	4628      	mov	r0, r5
 800b4da:	47b8      	blx	r7
 800b4dc:	3001      	adds	r0, #1
 800b4de:	f43f ae78 	beq.w	800b1d2 <_printf_float+0xb6>
 800b4e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4e6:	4631      	mov	r1, r6
 800b4e8:	4628      	mov	r0, r5
 800b4ea:	47b8      	blx	r7
 800b4ec:	3001      	adds	r0, #1
 800b4ee:	f43f ae70 	beq.w	800b1d2 <_printf_float+0xb6>
 800b4f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b4fe:	f7f5 faf3 	bl	8000ae8 <__aeabi_dcmpeq>
 800b502:	b9c0      	cbnz	r0, 800b536 <_printf_float+0x41a>
 800b504:	4653      	mov	r3, sl
 800b506:	f108 0201 	add.w	r2, r8, #1
 800b50a:	4631      	mov	r1, r6
 800b50c:	4628      	mov	r0, r5
 800b50e:	47b8      	blx	r7
 800b510:	3001      	adds	r0, #1
 800b512:	d10c      	bne.n	800b52e <_printf_float+0x412>
 800b514:	e65d      	b.n	800b1d2 <_printf_float+0xb6>
 800b516:	2301      	movs	r3, #1
 800b518:	465a      	mov	r2, fp
 800b51a:	4631      	mov	r1, r6
 800b51c:	4628      	mov	r0, r5
 800b51e:	47b8      	blx	r7
 800b520:	3001      	adds	r0, #1
 800b522:	f43f ae56 	beq.w	800b1d2 <_printf_float+0xb6>
 800b526:	f108 0801 	add.w	r8, r8, #1
 800b52a:	45d0      	cmp	r8, sl
 800b52c:	dbf3      	blt.n	800b516 <_printf_float+0x3fa>
 800b52e:	464b      	mov	r3, r9
 800b530:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b534:	e6df      	b.n	800b2f6 <_printf_float+0x1da>
 800b536:	f04f 0800 	mov.w	r8, #0
 800b53a:	f104 0b1a 	add.w	fp, r4, #26
 800b53e:	e7f4      	b.n	800b52a <_printf_float+0x40e>
 800b540:	2301      	movs	r3, #1
 800b542:	4642      	mov	r2, r8
 800b544:	e7e1      	b.n	800b50a <_printf_float+0x3ee>
 800b546:	2301      	movs	r3, #1
 800b548:	464a      	mov	r2, r9
 800b54a:	4631      	mov	r1, r6
 800b54c:	4628      	mov	r0, r5
 800b54e:	47b8      	blx	r7
 800b550:	3001      	adds	r0, #1
 800b552:	f43f ae3e 	beq.w	800b1d2 <_printf_float+0xb6>
 800b556:	f108 0801 	add.w	r8, r8, #1
 800b55a:	68e3      	ldr	r3, [r4, #12]
 800b55c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b55e:	1a5b      	subs	r3, r3, r1
 800b560:	4543      	cmp	r3, r8
 800b562:	dcf0      	bgt.n	800b546 <_printf_float+0x42a>
 800b564:	e6fc      	b.n	800b360 <_printf_float+0x244>
 800b566:	f04f 0800 	mov.w	r8, #0
 800b56a:	f104 0919 	add.w	r9, r4, #25
 800b56e:	e7f4      	b.n	800b55a <_printf_float+0x43e>

0800b570 <_printf_common>:
 800b570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b574:	4616      	mov	r6, r2
 800b576:	4698      	mov	r8, r3
 800b578:	688a      	ldr	r2, [r1, #8]
 800b57a:	690b      	ldr	r3, [r1, #16]
 800b57c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b580:	4293      	cmp	r3, r2
 800b582:	bfb8      	it	lt
 800b584:	4613      	movlt	r3, r2
 800b586:	6033      	str	r3, [r6, #0]
 800b588:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b58c:	4607      	mov	r7, r0
 800b58e:	460c      	mov	r4, r1
 800b590:	b10a      	cbz	r2, 800b596 <_printf_common+0x26>
 800b592:	3301      	adds	r3, #1
 800b594:	6033      	str	r3, [r6, #0]
 800b596:	6823      	ldr	r3, [r4, #0]
 800b598:	0699      	lsls	r1, r3, #26
 800b59a:	bf42      	ittt	mi
 800b59c:	6833      	ldrmi	r3, [r6, #0]
 800b59e:	3302      	addmi	r3, #2
 800b5a0:	6033      	strmi	r3, [r6, #0]
 800b5a2:	6825      	ldr	r5, [r4, #0]
 800b5a4:	f015 0506 	ands.w	r5, r5, #6
 800b5a8:	d106      	bne.n	800b5b8 <_printf_common+0x48>
 800b5aa:	f104 0a19 	add.w	sl, r4, #25
 800b5ae:	68e3      	ldr	r3, [r4, #12]
 800b5b0:	6832      	ldr	r2, [r6, #0]
 800b5b2:	1a9b      	subs	r3, r3, r2
 800b5b4:	42ab      	cmp	r3, r5
 800b5b6:	dc26      	bgt.n	800b606 <_printf_common+0x96>
 800b5b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b5bc:	6822      	ldr	r2, [r4, #0]
 800b5be:	3b00      	subs	r3, #0
 800b5c0:	bf18      	it	ne
 800b5c2:	2301      	movne	r3, #1
 800b5c4:	0692      	lsls	r2, r2, #26
 800b5c6:	d42b      	bmi.n	800b620 <_printf_common+0xb0>
 800b5c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b5cc:	4641      	mov	r1, r8
 800b5ce:	4638      	mov	r0, r7
 800b5d0:	47c8      	blx	r9
 800b5d2:	3001      	adds	r0, #1
 800b5d4:	d01e      	beq.n	800b614 <_printf_common+0xa4>
 800b5d6:	6823      	ldr	r3, [r4, #0]
 800b5d8:	6922      	ldr	r2, [r4, #16]
 800b5da:	f003 0306 	and.w	r3, r3, #6
 800b5de:	2b04      	cmp	r3, #4
 800b5e0:	bf02      	ittt	eq
 800b5e2:	68e5      	ldreq	r5, [r4, #12]
 800b5e4:	6833      	ldreq	r3, [r6, #0]
 800b5e6:	1aed      	subeq	r5, r5, r3
 800b5e8:	68a3      	ldr	r3, [r4, #8]
 800b5ea:	bf0c      	ite	eq
 800b5ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b5f0:	2500      	movne	r5, #0
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	bfc4      	itt	gt
 800b5f6:	1a9b      	subgt	r3, r3, r2
 800b5f8:	18ed      	addgt	r5, r5, r3
 800b5fa:	2600      	movs	r6, #0
 800b5fc:	341a      	adds	r4, #26
 800b5fe:	42b5      	cmp	r5, r6
 800b600:	d11a      	bne.n	800b638 <_printf_common+0xc8>
 800b602:	2000      	movs	r0, #0
 800b604:	e008      	b.n	800b618 <_printf_common+0xa8>
 800b606:	2301      	movs	r3, #1
 800b608:	4652      	mov	r2, sl
 800b60a:	4641      	mov	r1, r8
 800b60c:	4638      	mov	r0, r7
 800b60e:	47c8      	blx	r9
 800b610:	3001      	adds	r0, #1
 800b612:	d103      	bne.n	800b61c <_printf_common+0xac>
 800b614:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b61c:	3501      	adds	r5, #1
 800b61e:	e7c6      	b.n	800b5ae <_printf_common+0x3e>
 800b620:	18e1      	adds	r1, r4, r3
 800b622:	1c5a      	adds	r2, r3, #1
 800b624:	2030      	movs	r0, #48	@ 0x30
 800b626:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b62a:	4422      	add	r2, r4
 800b62c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b630:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b634:	3302      	adds	r3, #2
 800b636:	e7c7      	b.n	800b5c8 <_printf_common+0x58>
 800b638:	2301      	movs	r3, #1
 800b63a:	4622      	mov	r2, r4
 800b63c:	4641      	mov	r1, r8
 800b63e:	4638      	mov	r0, r7
 800b640:	47c8      	blx	r9
 800b642:	3001      	adds	r0, #1
 800b644:	d0e6      	beq.n	800b614 <_printf_common+0xa4>
 800b646:	3601      	adds	r6, #1
 800b648:	e7d9      	b.n	800b5fe <_printf_common+0x8e>
	...

0800b64c <_printf_i>:
 800b64c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b650:	7e0f      	ldrb	r7, [r1, #24]
 800b652:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b654:	2f78      	cmp	r7, #120	@ 0x78
 800b656:	4691      	mov	r9, r2
 800b658:	4680      	mov	r8, r0
 800b65a:	460c      	mov	r4, r1
 800b65c:	469a      	mov	sl, r3
 800b65e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b662:	d807      	bhi.n	800b674 <_printf_i+0x28>
 800b664:	2f62      	cmp	r7, #98	@ 0x62
 800b666:	d80a      	bhi.n	800b67e <_printf_i+0x32>
 800b668:	2f00      	cmp	r7, #0
 800b66a:	f000 80d1 	beq.w	800b810 <_printf_i+0x1c4>
 800b66e:	2f58      	cmp	r7, #88	@ 0x58
 800b670:	f000 80b8 	beq.w	800b7e4 <_printf_i+0x198>
 800b674:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b678:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b67c:	e03a      	b.n	800b6f4 <_printf_i+0xa8>
 800b67e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b682:	2b15      	cmp	r3, #21
 800b684:	d8f6      	bhi.n	800b674 <_printf_i+0x28>
 800b686:	a101      	add	r1, pc, #4	@ (adr r1, 800b68c <_printf_i+0x40>)
 800b688:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b68c:	0800b6e5 	.word	0x0800b6e5
 800b690:	0800b6f9 	.word	0x0800b6f9
 800b694:	0800b675 	.word	0x0800b675
 800b698:	0800b675 	.word	0x0800b675
 800b69c:	0800b675 	.word	0x0800b675
 800b6a0:	0800b675 	.word	0x0800b675
 800b6a4:	0800b6f9 	.word	0x0800b6f9
 800b6a8:	0800b675 	.word	0x0800b675
 800b6ac:	0800b675 	.word	0x0800b675
 800b6b0:	0800b675 	.word	0x0800b675
 800b6b4:	0800b675 	.word	0x0800b675
 800b6b8:	0800b7f7 	.word	0x0800b7f7
 800b6bc:	0800b723 	.word	0x0800b723
 800b6c0:	0800b7b1 	.word	0x0800b7b1
 800b6c4:	0800b675 	.word	0x0800b675
 800b6c8:	0800b675 	.word	0x0800b675
 800b6cc:	0800b819 	.word	0x0800b819
 800b6d0:	0800b675 	.word	0x0800b675
 800b6d4:	0800b723 	.word	0x0800b723
 800b6d8:	0800b675 	.word	0x0800b675
 800b6dc:	0800b675 	.word	0x0800b675
 800b6e0:	0800b7b9 	.word	0x0800b7b9
 800b6e4:	6833      	ldr	r3, [r6, #0]
 800b6e6:	1d1a      	adds	r2, r3, #4
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	6032      	str	r2, [r6, #0]
 800b6ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b6f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	e09c      	b.n	800b832 <_printf_i+0x1e6>
 800b6f8:	6833      	ldr	r3, [r6, #0]
 800b6fa:	6820      	ldr	r0, [r4, #0]
 800b6fc:	1d19      	adds	r1, r3, #4
 800b6fe:	6031      	str	r1, [r6, #0]
 800b700:	0606      	lsls	r6, r0, #24
 800b702:	d501      	bpl.n	800b708 <_printf_i+0xbc>
 800b704:	681d      	ldr	r5, [r3, #0]
 800b706:	e003      	b.n	800b710 <_printf_i+0xc4>
 800b708:	0645      	lsls	r5, r0, #25
 800b70a:	d5fb      	bpl.n	800b704 <_printf_i+0xb8>
 800b70c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b710:	2d00      	cmp	r5, #0
 800b712:	da03      	bge.n	800b71c <_printf_i+0xd0>
 800b714:	232d      	movs	r3, #45	@ 0x2d
 800b716:	426d      	negs	r5, r5
 800b718:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b71c:	4858      	ldr	r0, [pc, #352]	@ (800b880 <_printf_i+0x234>)
 800b71e:	230a      	movs	r3, #10
 800b720:	e011      	b.n	800b746 <_printf_i+0xfa>
 800b722:	6821      	ldr	r1, [r4, #0]
 800b724:	6833      	ldr	r3, [r6, #0]
 800b726:	0608      	lsls	r0, r1, #24
 800b728:	f853 5b04 	ldr.w	r5, [r3], #4
 800b72c:	d402      	bmi.n	800b734 <_printf_i+0xe8>
 800b72e:	0649      	lsls	r1, r1, #25
 800b730:	bf48      	it	mi
 800b732:	b2ad      	uxthmi	r5, r5
 800b734:	2f6f      	cmp	r7, #111	@ 0x6f
 800b736:	4852      	ldr	r0, [pc, #328]	@ (800b880 <_printf_i+0x234>)
 800b738:	6033      	str	r3, [r6, #0]
 800b73a:	bf14      	ite	ne
 800b73c:	230a      	movne	r3, #10
 800b73e:	2308      	moveq	r3, #8
 800b740:	2100      	movs	r1, #0
 800b742:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b746:	6866      	ldr	r6, [r4, #4]
 800b748:	60a6      	str	r6, [r4, #8]
 800b74a:	2e00      	cmp	r6, #0
 800b74c:	db05      	blt.n	800b75a <_printf_i+0x10e>
 800b74e:	6821      	ldr	r1, [r4, #0]
 800b750:	432e      	orrs	r6, r5
 800b752:	f021 0104 	bic.w	r1, r1, #4
 800b756:	6021      	str	r1, [r4, #0]
 800b758:	d04b      	beq.n	800b7f2 <_printf_i+0x1a6>
 800b75a:	4616      	mov	r6, r2
 800b75c:	fbb5 f1f3 	udiv	r1, r5, r3
 800b760:	fb03 5711 	mls	r7, r3, r1, r5
 800b764:	5dc7      	ldrb	r7, [r0, r7]
 800b766:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b76a:	462f      	mov	r7, r5
 800b76c:	42bb      	cmp	r3, r7
 800b76e:	460d      	mov	r5, r1
 800b770:	d9f4      	bls.n	800b75c <_printf_i+0x110>
 800b772:	2b08      	cmp	r3, #8
 800b774:	d10b      	bne.n	800b78e <_printf_i+0x142>
 800b776:	6823      	ldr	r3, [r4, #0]
 800b778:	07df      	lsls	r7, r3, #31
 800b77a:	d508      	bpl.n	800b78e <_printf_i+0x142>
 800b77c:	6923      	ldr	r3, [r4, #16]
 800b77e:	6861      	ldr	r1, [r4, #4]
 800b780:	4299      	cmp	r1, r3
 800b782:	bfde      	ittt	le
 800b784:	2330      	movle	r3, #48	@ 0x30
 800b786:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b78a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b78e:	1b92      	subs	r2, r2, r6
 800b790:	6122      	str	r2, [r4, #16]
 800b792:	f8cd a000 	str.w	sl, [sp]
 800b796:	464b      	mov	r3, r9
 800b798:	aa03      	add	r2, sp, #12
 800b79a:	4621      	mov	r1, r4
 800b79c:	4640      	mov	r0, r8
 800b79e:	f7ff fee7 	bl	800b570 <_printf_common>
 800b7a2:	3001      	adds	r0, #1
 800b7a4:	d14a      	bne.n	800b83c <_printf_i+0x1f0>
 800b7a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b7aa:	b004      	add	sp, #16
 800b7ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7b0:	6823      	ldr	r3, [r4, #0]
 800b7b2:	f043 0320 	orr.w	r3, r3, #32
 800b7b6:	6023      	str	r3, [r4, #0]
 800b7b8:	4832      	ldr	r0, [pc, #200]	@ (800b884 <_printf_i+0x238>)
 800b7ba:	2778      	movs	r7, #120	@ 0x78
 800b7bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b7c0:	6823      	ldr	r3, [r4, #0]
 800b7c2:	6831      	ldr	r1, [r6, #0]
 800b7c4:	061f      	lsls	r7, r3, #24
 800b7c6:	f851 5b04 	ldr.w	r5, [r1], #4
 800b7ca:	d402      	bmi.n	800b7d2 <_printf_i+0x186>
 800b7cc:	065f      	lsls	r7, r3, #25
 800b7ce:	bf48      	it	mi
 800b7d0:	b2ad      	uxthmi	r5, r5
 800b7d2:	6031      	str	r1, [r6, #0]
 800b7d4:	07d9      	lsls	r1, r3, #31
 800b7d6:	bf44      	itt	mi
 800b7d8:	f043 0320 	orrmi.w	r3, r3, #32
 800b7dc:	6023      	strmi	r3, [r4, #0]
 800b7de:	b11d      	cbz	r5, 800b7e8 <_printf_i+0x19c>
 800b7e0:	2310      	movs	r3, #16
 800b7e2:	e7ad      	b.n	800b740 <_printf_i+0xf4>
 800b7e4:	4826      	ldr	r0, [pc, #152]	@ (800b880 <_printf_i+0x234>)
 800b7e6:	e7e9      	b.n	800b7bc <_printf_i+0x170>
 800b7e8:	6823      	ldr	r3, [r4, #0]
 800b7ea:	f023 0320 	bic.w	r3, r3, #32
 800b7ee:	6023      	str	r3, [r4, #0]
 800b7f0:	e7f6      	b.n	800b7e0 <_printf_i+0x194>
 800b7f2:	4616      	mov	r6, r2
 800b7f4:	e7bd      	b.n	800b772 <_printf_i+0x126>
 800b7f6:	6833      	ldr	r3, [r6, #0]
 800b7f8:	6825      	ldr	r5, [r4, #0]
 800b7fa:	6961      	ldr	r1, [r4, #20]
 800b7fc:	1d18      	adds	r0, r3, #4
 800b7fe:	6030      	str	r0, [r6, #0]
 800b800:	062e      	lsls	r6, r5, #24
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	d501      	bpl.n	800b80a <_printf_i+0x1be>
 800b806:	6019      	str	r1, [r3, #0]
 800b808:	e002      	b.n	800b810 <_printf_i+0x1c4>
 800b80a:	0668      	lsls	r0, r5, #25
 800b80c:	d5fb      	bpl.n	800b806 <_printf_i+0x1ba>
 800b80e:	8019      	strh	r1, [r3, #0]
 800b810:	2300      	movs	r3, #0
 800b812:	6123      	str	r3, [r4, #16]
 800b814:	4616      	mov	r6, r2
 800b816:	e7bc      	b.n	800b792 <_printf_i+0x146>
 800b818:	6833      	ldr	r3, [r6, #0]
 800b81a:	1d1a      	adds	r2, r3, #4
 800b81c:	6032      	str	r2, [r6, #0]
 800b81e:	681e      	ldr	r6, [r3, #0]
 800b820:	6862      	ldr	r2, [r4, #4]
 800b822:	2100      	movs	r1, #0
 800b824:	4630      	mov	r0, r6
 800b826:	f7f4 fce3 	bl	80001f0 <memchr>
 800b82a:	b108      	cbz	r0, 800b830 <_printf_i+0x1e4>
 800b82c:	1b80      	subs	r0, r0, r6
 800b82e:	6060      	str	r0, [r4, #4]
 800b830:	6863      	ldr	r3, [r4, #4]
 800b832:	6123      	str	r3, [r4, #16]
 800b834:	2300      	movs	r3, #0
 800b836:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b83a:	e7aa      	b.n	800b792 <_printf_i+0x146>
 800b83c:	6923      	ldr	r3, [r4, #16]
 800b83e:	4632      	mov	r2, r6
 800b840:	4649      	mov	r1, r9
 800b842:	4640      	mov	r0, r8
 800b844:	47d0      	blx	sl
 800b846:	3001      	adds	r0, #1
 800b848:	d0ad      	beq.n	800b7a6 <_printf_i+0x15a>
 800b84a:	6823      	ldr	r3, [r4, #0]
 800b84c:	079b      	lsls	r3, r3, #30
 800b84e:	d413      	bmi.n	800b878 <_printf_i+0x22c>
 800b850:	68e0      	ldr	r0, [r4, #12]
 800b852:	9b03      	ldr	r3, [sp, #12]
 800b854:	4298      	cmp	r0, r3
 800b856:	bfb8      	it	lt
 800b858:	4618      	movlt	r0, r3
 800b85a:	e7a6      	b.n	800b7aa <_printf_i+0x15e>
 800b85c:	2301      	movs	r3, #1
 800b85e:	4632      	mov	r2, r6
 800b860:	4649      	mov	r1, r9
 800b862:	4640      	mov	r0, r8
 800b864:	47d0      	blx	sl
 800b866:	3001      	adds	r0, #1
 800b868:	d09d      	beq.n	800b7a6 <_printf_i+0x15a>
 800b86a:	3501      	adds	r5, #1
 800b86c:	68e3      	ldr	r3, [r4, #12]
 800b86e:	9903      	ldr	r1, [sp, #12]
 800b870:	1a5b      	subs	r3, r3, r1
 800b872:	42ab      	cmp	r3, r5
 800b874:	dcf2      	bgt.n	800b85c <_printf_i+0x210>
 800b876:	e7eb      	b.n	800b850 <_printf_i+0x204>
 800b878:	2500      	movs	r5, #0
 800b87a:	f104 0619 	add.w	r6, r4, #25
 800b87e:	e7f5      	b.n	800b86c <_printf_i+0x220>
 800b880:	0800d9ea 	.word	0x0800d9ea
 800b884:	0800d9fb 	.word	0x0800d9fb

0800b888 <std>:
 800b888:	2300      	movs	r3, #0
 800b88a:	b510      	push	{r4, lr}
 800b88c:	4604      	mov	r4, r0
 800b88e:	e9c0 3300 	strd	r3, r3, [r0]
 800b892:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b896:	6083      	str	r3, [r0, #8]
 800b898:	8181      	strh	r1, [r0, #12]
 800b89a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b89c:	81c2      	strh	r2, [r0, #14]
 800b89e:	6183      	str	r3, [r0, #24]
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	2208      	movs	r2, #8
 800b8a4:	305c      	adds	r0, #92	@ 0x5c
 800b8a6:	f000 f9f9 	bl	800bc9c <memset>
 800b8aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b8e0 <std+0x58>)
 800b8ac:	6263      	str	r3, [r4, #36]	@ 0x24
 800b8ae:	4b0d      	ldr	r3, [pc, #52]	@ (800b8e4 <std+0x5c>)
 800b8b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b8b2:	4b0d      	ldr	r3, [pc, #52]	@ (800b8e8 <std+0x60>)
 800b8b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b8b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b8ec <std+0x64>)
 800b8b8:	6323      	str	r3, [r4, #48]	@ 0x30
 800b8ba:	4b0d      	ldr	r3, [pc, #52]	@ (800b8f0 <std+0x68>)
 800b8bc:	6224      	str	r4, [r4, #32]
 800b8be:	429c      	cmp	r4, r3
 800b8c0:	d006      	beq.n	800b8d0 <std+0x48>
 800b8c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b8c6:	4294      	cmp	r4, r2
 800b8c8:	d002      	beq.n	800b8d0 <std+0x48>
 800b8ca:	33d0      	adds	r3, #208	@ 0xd0
 800b8cc:	429c      	cmp	r4, r3
 800b8ce:	d105      	bne.n	800b8dc <std+0x54>
 800b8d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b8d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8d8:	f000 ba6c 	b.w	800bdb4 <__retarget_lock_init_recursive>
 800b8dc:	bd10      	pop	{r4, pc}
 800b8de:	bf00      	nop
 800b8e0:	0800baed 	.word	0x0800baed
 800b8e4:	0800bb0f 	.word	0x0800bb0f
 800b8e8:	0800bb47 	.word	0x0800bb47
 800b8ec:	0800bb6b 	.word	0x0800bb6b
 800b8f0:	2002631c 	.word	0x2002631c

0800b8f4 <stdio_exit_handler>:
 800b8f4:	4a02      	ldr	r2, [pc, #8]	@ (800b900 <stdio_exit_handler+0xc>)
 800b8f6:	4903      	ldr	r1, [pc, #12]	@ (800b904 <stdio_exit_handler+0x10>)
 800b8f8:	4803      	ldr	r0, [pc, #12]	@ (800b908 <stdio_exit_handler+0x14>)
 800b8fa:	f000 b869 	b.w	800b9d0 <_fwalk_sglue>
 800b8fe:	bf00      	nop
 800b900:	20000014 	.word	0x20000014
 800b904:	0800d59d 	.word	0x0800d59d
 800b908:	20000024 	.word	0x20000024

0800b90c <cleanup_stdio>:
 800b90c:	6841      	ldr	r1, [r0, #4]
 800b90e:	4b0c      	ldr	r3, [pc, #48]	@ (800b940 <cleanup_stdio+0x34>)
 800b910:	4299      	cmp	r1, r3
 800b912:	b510      	push	{r4, lr}
 800b914:	4604      	mov	r4, r0
 800b916:	d001      	beq.n	800b91c <cleanup_stdio+0x10>
 800b918:	f001 fe40 	bl	800d59c <_fflush_r>
 800b91c:	68a1      	ldr	r1, [r4, #8]
 800b91e:	4b09      	ldr	r3, [pc, #36]	@ (800b944 <cleanup_stdio+0x38>)
 800b920:	4299      	cmp	r1, r3
 800b922:	d002      	beq.n	800b92a <cleanup_stdio+0x1e>
 800b924:	4620      	mov	r0, r4
 800b926:	f001 fe39 	bl	800d59c <_fflush_r>
 800b92a:	68e1      	ldr	r1, [r4, #12]
 800b92c:	4b06      	ldr	r3, [pc, #24]	@ (800b948 <cleanup_stdio+0x3c>)
 800b92e:	4299      	cmp	r1, r3
 800b930:	d004      	beq.n	800b93c <cleanup_stdio+0x30>
 800b932:	4620      	mov	r0, r4
 800b934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b938:	f001 be30 	b.w	800d59c <_fflush_r>
 800b93c:	bd10      	pop	{r4, pc}
 800b93e:	bf00      	nop
 800b940:	2002631c 	.word	0x2002631c
 800b944:	20026384 	.word	0x20026384
 800b948:	200263ec 	.word	0x200263ec

0800b94c <global_stdio_init.part.0>:
 800b94c:	b510      	push	{r4, lr}
 800b94e:	4b0b      	ldr	r3, [pc, #44]	@ (800b97c <global_stdio_init.part.0+0x30>)
 800b950:	4c0b      	ldr	r4, [pc, #44]	@ (800b980 <global_stdio_init.part.0+0x34>)
 800b952:	4a0c      	ldr	r2, [pc, #48]	@ (800b984 <global_stdio_init.part.0+0x38>)
 800b954:	601a      	str	r2, [r3, #0]
 800b956:	4620      	mov	r0, r4
 800b958:	2200      	movs	r2, #0
 800b95a:	2104      	movs	r1, #4
 800b95c:	f7ff ff94 	bl	800b888 <std>
 800b960:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b964:	2201      	movs	r2, #1
 800b966:	2109      	movs	r1, #9
 800b968:	f7ff ff8e 	bl	800b888 <std>
 800b96c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b970:	2202      	movs	r2, #2
 800b972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b976:	2112      	movs	r1, #18
 800b978:	f7ff bf86 	b.w	800b888 <std>
 800b97c:	20026454 	.word	0x20026454
 800b980:	2002631c 	.word	0x2002631c
 800b984:	0800b8f5 	.word	0x0800b8f5

0800b988 <__sfp_lock_acquire>:
 800b988:	4801      	ldr	r0, [pc, #4]	@ (800b990 <__sfp_lock_acquire+0x8>)
 800b98a:	f000 ba14 	b.w	800bdb6 <__retarget_lock_acquire_recursive>
 800b98e:	bf00      	nop
 800b990:	2002645d 	.word	0x2002645d

0800b994 <__sfp_lock_release>:
 800b994:	4801      	ldr	r0, [pc, #4]	@ (800b99c <__sfp_lock_release+0x8>)
 800b996:	f000 ba0f 	b.w	800bdb8 <__retarget_lock_release_recursive>
 800b99a:	bf00      	nop
 800b99c:	2002645d 	.word	0x2002645d

0800b9a0 <__sinit>:
 800b9a0:	b510      	push	{r4, lr}
 800b9a2:	4604      	mov	r4, r0
 800b9a4:	f7ff fff0 	bl	800b988 <__sfp_lock_acquire>
 800b9a8:	6a23      	ldr	r3, [r4, #32]
 800b9aa:	b11b      	cbz	r3, 800b9b4 <__sinit+0x14>
 800b9ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9b0:	f7ff bff0 	b.w	800b994 <__sfp_lock_release>
 800b9b4:	4b04      	ldr	r3, [pc, #16]	@ (800b9c8 <__sinit+0x28>)
 800b9b6:	6223      	str	r3, [r4, #32]
 800b9b8:	4b04      	ldr	r3, [pc, #16]	@ (800b9cc <__sinit+0x2c>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d1f5      	bne.n	800b9ac <__sinit+0xc>
 800b9c0:	f7ff ffc4 	bl	800b94c <global_stdio_init.part.0>
 800b9c4:	e7f2      	b.n	800b9ac <__sinit+0xc>
 800b9c6:	bf00      	nop
 800b9c8:	0800b90d 	.word	0x0800b90d
 800b9cc:	20026454 	.word	0x20026454

0800b9d0 <_fwalk_sglue>:
 800b9d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9d4:	4607      	mov	r7, r0
 800b9d6:	4688      	mov	r8, r1
 800b9d8:	4614      	mov	r4, r2
 800b9da:	2600      	movs	r6, #0
 800b9dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b9e0:	f1b9 0901 	subs.w	r9, r9, #1
 800b9e4:	d505      	bpl.n	800b9f2 <_fwalk_sglue+0x22>
 800b9e6:	6824      	ldr	r4, [r4, #0]
 800b9e8:	2c00      	cmp	r4, #0
 800b9ea:	d1f7      	bne.n	800b9dc <_fwalk_sglue+0xc>
 800b9ec:	4630      	mov	r0, r6
 800b9ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9f2:	89ab      	ldrh	r3, [r5, #12]
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d907      	bls.n	800ba08 <_fwalk_sglue+0x38>
 800b9f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	d003      	beq.n	800ba08 <_fwalk_sglue+0x38>
 800ba00:	4629      	mov	r1, r5
 800ba02:	4638      	mov	r0, r7
 800ba04:	47c0      	blx	r8
 800ba06:	4306      	orrs	r6, r0
 800ba08:	3568      	adds	r5, #104	@ 0x68
 800ba0a:	e7e9      	b.n	800b9e0 <_fwalk_sglue+0x10>

0800ba0c <iprintf>:
 800ba0c:	b40f      	push	{r0, r1, r2, r3}
 800ba0e:	b507      	push	{r0, r1, r2, lr}
 800ba10:	4906      	ldr	r1, [pc, #24]	@ (800ba2c <iprintf+0x20>)
 800ba12:	ab04      	add	r3, sp, #16
 800ba14:	6808      	ldr	r0, [r1, #0]
 800ba16:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba1a:	6881      	ldr	r1, [r0, #8]
 800ba1c:	9301      	str	r3, [sp, #4]
 800ba1e:	f001 fc21 	bl	800d264 <_vfiprintf_r>
 800ba22:	b003      	add	sp, #12
 800ba24:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba28:	b004      	add	sp, #16
 800ba2a:	4770      	bx	lr
 800ba2c:	20000020 	.word	0x20000020

0800ba30 <_puts_r>:
 800ba30:	6a03      	ldr	r3, [r0, #32]
 800ba32:	b570      	push	{r4, r5, r6, lr}
 800ba34:	6884      	ldr	r4, [r0, #8]
 800ba36:	4605      	mov	r5, r0
 800ba38:	460e      	mov	r6, r1
 800ba3a:	b90b      	cbnz	r3, 800ba40 <_puts_r+0x10>
 800ba3c:	f7ff ffb0 	bl	800b9a0 <__sinit>
 800ba40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ba42:	07db      	lsls	r3, r3, #31
 800ba44:	d405      	bmi.n	800ba52 <_puts_r+0x22>
 800ba46:	89a3      	ldrh	r3, [r4, #12]
 800ba48:	0598      	lsls	r0, r3, #22
 800ba4a:	d402      	bmi.n	800ba52 <_puts_r+0x22>
 800ba4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba4e:	f000 f9b2 	bl	800bdb6 <__retarget_lock_acquire_recursive>
 800ba52:	89a3      	ldrh	r3, [r4, #12]
 800ba54:	0719      	lsls	r1, r3, #28
 800ba56:	d502      	bpl.n	800ba5e <_puts_r+0x2e>
 800ba58:	6923      	ldr	r3, [r4, #16]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d135      	bne.n	800baca <_puts_r+0x9a>
 800ba5e:	4621      	mov	r1, r4
 800ba60:	4628      	mov	r0, r5
 800ba62:	f000 f8c5 	bl	800bbf0 <__swsetup_r>
 800ba66:	b380      	cbz	r0, 800baca <_puts_r+0x9a>
 800ba68:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800ba6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ba6e:	07da      	lsls	r2, r3, #31
 800ba70:	d405      	bmi.n	800ba7e <_puts_r+0x4e>
 800ba72:	89a3      	ldrh	r3, [r4, #12]
 800ba74:	059b      	lsls	r3, r3, #22
 800ba76:	d402      	bmi.n	800ba7e <_puts_r+0x4e>
 800ba78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba7a:	f000 f99d 	bl	800bdb8 <__retarget_lock_release_recursive>
 800ba7e:	4628      	mov	r0, r5
 800ba80:	bd70      	pop	{r4, r5, r6, pc}
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	da04      	bge.n	800ba90 <_puts_r+0x60>
 800ba86:	69a2      	ldr	r2, [r4, #24]
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	dc17      	bgt.n	800babc <_puts_r+0x8c>
 800ba8c:	290a      	cmp	r1, #10
 800ba8e:	d015      	beq.n	800babc <_puts_r+0x8c>
 800ba90:	6823      	ldr	r3, [r4, #0]
 800ba92:	1c5a      	adds	r2, r3, #1
 800ba94:	6022      	str	r2, [r4, #0]
 800ba96:	7019      	strb	r1, [r3, #0]
 800ba98:	68a3      	ldr	r3, [r4, #8]
 800ba9a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ba9e:	3b01      	subs	r3, #1
 800baa0:	60a3      	str	r3, [r4, #8]
 800baa2:	2900      	cmp	r1, #0
 800baa4:	d1ed      	bne.n	800ba82 <_puts_r+0x52>
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	da11      	bge.n	800bace <_puts_r+0x9e>
 800baaa:	4622      	mov	r2, r4
 800baac:	210a      	movs	r1, #10
 800baae:	4628      	mov	r0, r5
 800bab0:	f000 f85f 	bl	800bb72 <__swbuf_r>
 800bab4:	3001      	adds	r0, #1
 800bab6:	d0d7      	beq.n	800ba68 <_puts_r+0x38>
 800bab8:	250a      	movs	r5, #10
 800baba:	e7d7      	b.n	800ba6c <_puts_r+0x3c>
 800babc:	4622      	mov	r2, r4
 800babe:	4628      	mov	r0, r5
 800bac0:	f000 f857 	bl	800bb72 <__swbuf_r>
 800bac4:	3001      	adds	r0, #1
 800bac6:	d1e7      	bne.n	800ba98 <_puts_r+0x68>
 800bac8:	e7ce      	b.n	800ba68 <_puts_r+0x38>
 800baca:	3e01      	subs	r6, #1
 800bacc:	e7e4      	b.n	800ba98 <_puts_r+0x68>
 800bace:	6823      	ldr	r3, [r4, #0]
 800bad0:	1c5a      	adds	r2, r3, #1
 800bad2:	6022      	str	r2, [r4, #0]
 800bad4:	220a      	movs	r2, #10
 800bad6:	701a      	strb	r2, [r3, #0]
 800bad8:	e7ee      	b.n	800bab8 <_puts_r+0x88>
	...

0800badc <puts>:
 800badc:	4b02      	ldr	r3, [pc, #8]	@ (800bae8 <puts+0xc>)
 800bade:	4601      	mov	r1, r0
 800bae0:	6818      	ldr	r0, [r3, #0]
 800bae2:	f7ff bfa5 	b.w	800ba30 <_puts_r>
 800bae6:	bf00      	nop
 800bae8:	20000020 	.word	0x20000020

0800baec <__sread>:
 800baec:	b510      	push	{r4, lr}
 800baee:	460c      	mov	r4, r1
 800baf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baf4:	f000 f900 	bl	800bcf8 <_read_r>
 800baf8:	2800      	cmp	r0, #0
 800bafa:	bfab      	itete	ge
 800bafc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bafe:	89a3      	ldrhlt	r3, [r4, #12]
 800bb00:	181b      	addge	r3, r3, r0
 800bb02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bb06:	bfac      	ite	ge
 800bb08:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bb0a:	81a3      	strhlt	r3, [r4, #12]
 800bb0c:	bd10      	pop	{r4, pc}

0800bb0e <__swrite>:
 800bb0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb12:	461f      	mov	r7, r3
 800bb14:	898b      	ldrh	r3, [r1, #12]
 800bb16:	05db      	lsls	r3, r3, #23
 800bb18:	4605      	mov	r5, r0
 800bb1a:	460c      	mov	r4, r1
 800bb1c:	4616      	mov	r6, r2
 800bb1e:	d505      	bpl.n	800bb2c <__swrite+0x1e>
 800bb20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb24:	2302      	movs	r3, #2
 800bb26:	2200      	movs	r2, #0
 800bb28:	f000 f8d4 	bl	800bcd4 <_lseek_r>
 800bb2c:	89a3      	ldrh	r3, [r4, #12]
 800bb2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bb36:	81a3      	strh	r3, [r4, #12]
 800bb38:	4632      	mov	r2, r6
 800bb3a:	463b      	mov	r3, r7
 800bb3c:	4628      	mov	r0, r5
 800bb3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb42:	f000 b8fb 	b.w	800bd3c <_write_r>

0800bb46 <__sseek>:
 800bb46:	b510      	push	{r4, lr}
 800bb48:	460c      	mov	r4, r1
 800bb4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb4e:	f000 f8c1 	bl	800bcd4 <_lseek_r>
 800bb52:	1c43      	adds	r3, r0, #1
 800bb54:	89a3      	ldrh	r3, [r4, #12]
 800bb56:	bf15      	itete	ne
 800bb58:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bb5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bb5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bb62:	81a3      	strheq	r3, [r4, #12]
 800bb64:	bf18      	it	ne
 800bb66:	81a3      	strhne	r3, [r4, #12]
 800bb68:	bd10      	pop	{r4, pc}

0800bb6a <__sclose>:
 800bb6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb6e:	f000 b8a1 	b.w	800bcb4 <_close_r>

0800bb72 <__swbuf_r>:
 800bb72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb74:	460e      	mov	r6, r1
 800bb76:	4614      	mov	r4, r2
 800bb78:	4605      	mov	r5, r0
 800bb7a:	b118      	cbz	r0, 800bb84 <__swbuf_r+0x12>
 800bb7c:	6a03      	ldr	r3, [r0, #32]
 800bb7e:	b90b      	cbnz	r3, 800bb84 <__swbuf_r+0x12>
 800bb80:	f7ff ff0e 	bl	800b9a0 <__sinit>
 800bb84:	69a3      	ldr	r3, [r4, #24]
 800bb86:	60a3      	str	r3, [r4, #8]
 800bb88:	89a3      	ldrh	r3, [r4, #12]
 800bb8a:	071a      	lsls	r2, r3, #28
 800bb8c:	d501      	bpl.n	800bb92 <__swbuf_r+0x20>
 800bb8e:	6923      	ldr	r3, [r4, #16]
 800bb90:	b943      	cbnz	r3, 800bba4 <__swbuf_r+0x32>
 800bb92:	4621      	mov	r1, r4
 800bb94:	4628      	mov	r0, r5
 800bb96:	f000 f82b 	bl	800bbf0 <__swsetup_r>
 800bb9a:	b118      	cbz	r0, 800bba4 <__swbuf_r+0x32>
 800bb9c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800bba0:	4638      	mov	r0, r7
 800bba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bba4:	6823      	ldr	r3, [r4, #0]
 800bba6:	6922      	ldr	r2, [r4, #16]
 800bba8:	1a98      	subs	r0, r3, r2
 800bbaa:	6963      	ldr	r3, [r4, #20]
 800bbac:	b2f6      	uxtb	r6, r6
 800bbae:	4283      	cmp	r3, r0
 800bbb0:	4637      	mov	r7, r6
 800bbb2:	dc05      	bgt.n	800bbc0 <__swbuf_r+0x4e>
 800bbb4:	4621      	mov	r1, r4
 800bbb6:	4628      	mov	r0, r5
 800bbb8:	f001 fcf0 	bl	800d59c <_fflush_r>
 800bbbc:	2800      	cmp	r0, #0
 800bbbe:	d1ed      	bne.n	800bb9c <__swbuf_r+0x2a>
 800bbc0:	68a3      	ldr	r3, [r4, #8]
 800bbc2:	3b01      	subs	r3, #1
 800bbc4:	60a3      	str	r3, [r4, #8]
 800bbc6:	6823      	ldr	r3, [r4, #0]
 800bbc8:	1c5a      	adds	r2, r3, #1
 800bbca:	6022      	str	r2, [r4, #0]
 800bbcc:	701e      	strb	r6, [r3, #0]
 800bbce:	6962      	ldr	r2, [r4, #20]
 800bbd0:	1c43      	adds	r3, r0, #1
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d004      	beq.n	800bbe0 <__swbuf_r+0x6e>
 800bbd6:	89a3      	ldrh	r3, [r4, #12]
 800bbd8:	07db      	lsls	r3, r3, #31
 800bbda:	d5e1      	bpl.n	800bba0 <__swbuf_r+0x2e>
 800bbdc:	2e0a      	cmp	r6, #10
 800bbde:	d1df      	bne.n	800bba0 <__swbuf_r+0x2e>
 800bbe0:	4621      	mov	r1, r4
 800bbe2:	4628      	mov	r0, r5
 800bbe4:	f001 fcda 	bl	800d59c <_fflush_r>
 800bbe8:	2800      	cmp	r0, #0
 800bbea:	d0d9      	beq.n	800bba0 <__swbuf_r+0x2e>
 800bbec:	e7d6      	b.n	800bb9c <__swbuf_r+0x2a>
	...

0800bbf0 <__swsetup_r>:
 800bbf0:	b538      	push	{r3, r4, r5, lr}
 800bbf2:	4b29      	ldr	r3, [pc, #164]	@ (800bc98 <__swsetup_r+0xa8>)
 800bbf4:	4605      	mov	r5, r0
 800bbf6:	6818      	ldr	r0, [r3, #0]
 800bbf8:	460c      	mov	r4, r1
 800bbfa:	b118      	cbz	r0, 800bc04 <__swsetup_r+0x14>
 800bbfc:	6a03      	ldr	r3, [r0, #32]
 800bbfe:	b90b      	cbnz	r3, 800bc04 <__swsetup_r+0x14>
 800bc00:	f7ff fece 	bl	800b9a0 <__sinit>
 800bc04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc08:	0719      	lsls	r1, r3, #28
 800bc0a:	d422      	bmi.n	800bc52 <__swsetup_r+0x62>
 800bc0c:	06da      	lsls	r2, r3, #27
 800bc0e:	d407      	bmi.n	800bc20 <__swsetup_r+0x30>
 800bc10:	2209      	movs	r2, #9
 800bc12:	602a      	str	r2, [r5, #0]
 800bc14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc18:	81a3      	strh	r3, [r4, #12]
 800bc1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bc1e:	e033      	b.n	800bc88 <__swsetup_r+0x98>
 800bc20:	0758      	lsls	r0, r3, #29
 800bc22:	d512      	bpl.n	800bc4a <__swsetup_r+0x5a>
 800bc24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bc26:	b141      	cbz	r1, 800bc3a <__swsetup_r+0x4a>
 800bc28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bc2c:	4299      	cmp	r1, r3
 800bc2e:	d002      	beq.n	800bc36 <__swsetup_r+0x46>
 800bc30:	4628      	mov	r0, r5
 800bc32:	f000 ff29 	bl	800ca88 <_free_r>
 800bc36:	2300      	movs	r3, #0
 800bc38:	6363      	str	r3, [r4, #52]	@ 0x34
 800bc3a:	89a3      	ldrh	r3, [r4, #12]
 800bc3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bc40:	81a3      	strh	r3, [r4, #12]
 800bc42:	2300      	movs	r3, #0
 800bc44:	6063      	str	r3, [r4, #4]
 800bc46:	6923      	ldr	r3, [r4, #16]
 800bc48:	6023      	str	r3, [r4, #0]
 800bc4a:	89a3      	ldrh	r3, [r4, #12]
 800bc4c:	f043 0308 	orr.w	r3, r3, #8
 800bc50:	81a3      	strh	r3, [r4, #12]
 800bc52:	6923      	ldr	r3, [r4, #16]
 800bc54:	b94b      	cbnz	r3, 800bc6a <__swsetup_r+0x7a>
 800bc56:	89a3      	ldrh	r3, [r4, #12]
 800bc58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bc5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc60:	d003      	beq.n	800bc6a <__swsetup_r+0x7a>
 800bc62:	4621      	mov	r1, r4
 800bc64:	4628      	mov	r0, r5
 800bc66:	f001 fce7 	bl	800d638 <__smakebuf_r>
 800bc6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc6e:	f013 0201 	ands.w	r2, r3, #1
 800bc72:	d00a      	beq.n	800bc8a <__swsetup_r+0x9a>
 800bc74:	2200      	movs	r2, #0
 800bc76:	60a2      	str	r2, [r4, #8]
 800bc78:	6962      	ldr	r2, [r4, #20]
 800bc7a:	4252      	negs	r2, r2
 800bc7c:	61a2      	str	r2, [r4, #24]
 800bc7e:	6922      	ldr	r2, [r4, #16]
 800bc80:	b942      	cbnz	r2, 800bc94 <__swsetup_r+0xa4>
 800bc82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bc86:	d1c5      	bne.n	800bc14 <__swsetup_r+0x24>
 800bc88:	bd38      	pop	{r3, r4, r5, pc}
 800bc8a:	0799      	lsls	r1, r3, #30
 800bc8c:	bf58      	it	pl
 800bc8e:	6962      	ldrpl	r2, [r4, #20]
 800bc90:	60a2      	str	r2, [r4, #8]
 800bc92:	e7f4      	b.n	800bc7e <__swsetup_r+0x8e>
 800bc94:	2000      	movs	r0, #0
 800bc96:	e7f7      	b.n	800bc88 <__swsetup_r+0x98>
 800bc98:	20000020 	.word	0x20000020

0800bc9c <memset>:
 800bc9c:	4402      	add	r2, r0
 800bc9e:	4603      	mov	r3, r0
 800bca0:	4293      	cmp	r3, r2
 800bca2:	d100      	bne.n	800bca6 <memset+0xa>
 800bca4:	4770      	bx	lr
 800bca6:	f803 1b01 	strb.w	r1, [r3], #1
 800bcaa:	e7f9      	b.n	800bca0 <memset+0x4>

0800bcac <_localeconv_r>:
 800bcac:	4800      	ldr	r0, [pc, #0]	@ (800bcb0 <_localeconv_r+0x4>)
 800bcae:	4770      	bx	lr
 800bcb0:	20000160 	.word	0x20000160

0800bcb4 <_close_r>:
 800bcb4:	b538      	push	{r3, r4, r5, lr}
 800bcb6:	4d06      	ldr	r5, [pc, #24]	@ (800bcd0 <_close_r+0x1c>)
 800bcb8:	2300      	movs	r3, #0
 800bcba:	4604      	mov	r4, r0
 800bcbc:	4608      	mov	r0, r1
 800bcbe:	602b      	str	r3, [r5, #0]
 800bcc0:	f7f6 ffec 	bl	8002c9c <_close>
 800bcc4:	1c43      	adds	r3, r0, #1
 800bcc6:	d102      	bne.n	800bcce <_close_r+0x1a>
 800bcc8:	682b      	ldr	r3, [r5, #0]
 800bcca:	b103      	cbz	r3, 800bcce <_close_r+0x1a>
 800bccc:	6023      	str	r3, [r4, #0]
 800bcce:	bd38      	pop	{r3, r4, r5, pc}
 800bcd0:	20026458 	.word	0x20026458

0800bcd4 <_lseek_r>:
 800bcd4:	b538      	push	{r3, r4, r5, lr}
 800bcd6:	4d07      	ldr	r5, [pc, #28]	@ (800bcf4 <_lseek_r+0x20>)
 800bcd8:	4604      	mov	r4, r0
 800bcda:	4608      	mov	r0, r1
 800bcdc:	4611      	mov	r1, r2
 800bcde:	2200      	movs	r2, #0
 800bce0:	602a      	str	r2, [r5, #0]
 800bce2:	461a      	mov	r2, r3
 800bce4:	f7f7 f801 	bl	8002cea <_lseek>
 800bce8:	1c43      	adds	r3, r0, #1
 800bcea:	d102      	bne.n	800bcf2 <_lseek_r+0x1e>
 800bcec:	682b      	ldr	r3, [r5, #0]
 800bcee:	b103      	cbz	r3, 800bcf2 <_lseek_r+0x1e>
 800bcf0:	6023      	str	r3, [r4, #0]
 800bcf2:	bd38      	pop	{r3, r4, r5, pc}
 800bcf4:	20026458 	.word	0x20026458

0800bcf8 <_read_r>:
 800bcf8:	b538      	push	{r3, r4, r5, lr}
 800bcfa:	4d07      	ldr	r5, [pc, #28]	@ (800bd18 <_read_r+0x20>)
 800bcfc:	4604      	mov	r4, r0
 800bcfe:	4608      	mov	r0, r1
 800bd00:	4611      	mov	r1, r2
 800bd02:	2200      	movs	r2, #0
 800bd04:	602a      	str	r2, [r5, #0]
 800bd06:	461a      	mov	r2, r3
 800bd08:	f7f6 ffab 	bl	8002c62 <_read>
 800bd0c:	1c43      	adds	r3, r0, #1
 800bd0e:	d102      	bne.n	800bd16 <_read_r+0x1e>
 800bd10:	682b      	ldr	r3, [r5, #0]
 800bd12:	b103      	cbz	r3, 800bd16 <_read_r+0x1e>
 800bd14:	6023      	str	r3, [r4, #0]
 800bd16:	bd38      	pop	{r3, r4, r5, pc}
 800bd18:	20026458 	.word	0x20026458

0800bd1c <_sbrk_r>:
 800bd1c:	b538      	push	{r3, r4, r5, lr}
 800bd1e:	4d06      	ldr	r5, [pc, #24]	@ (800bd38 <_sbrk_r+0x1c>)
 800bd20:	2300      	movs	r3, #0
 800bd22:	4604      	mov	r4, r0
 800bd24:	4608      	mov	r0, r1
 800bd26:	602b      	str	r3, [r5, #0]
 800bd28:	f7f6 ffec 	bl	8002d04 <_sbrk>
 800bd2c:	1c43      	adds	r3, r0, #1
 800bd2e:	d102      	bne.n	800bd36 <_sbrk_r+0x1a>
 800bd30:	682b      	ldr	r3, [r5, #0]
 800bd32:	b103      	cbz	r3, 800bd36 <_sbrk_r+0x1a>
 800bd34:	6023      	str	r3, [r4, #0]
 800bd36:	bd38      	pop	{r3, r4, r5, pc}
 800bd38:	20026458 	.word	0x20026458

0800bd3c <_write_r>:
 800bd3c:	b538      	push	{r3, r4, r5, lr}
 800bd3e:	4d07      	ldr	r5, [pc, #28]	@ (800bd5c <_write_r+0x20>)
 800bd40:	4604      	mov	r4, r0
 800bd42:	4608      	mov	r0, r1
 800bd44:	4611      	mov	r1, r2
 800bd46:	2200      	movs	r2, #0
 800bd48:	602a      	str	r2, [r5, #0]
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	f7f5 fb98 	bl	8001480 <_write>
 800bd50:	1c43      	adds	r3, r0, #1
 800bd52:	d102      	bne.n	800bd5a <_write_r+0x1e>
 800bd54:	682b      	ldr	r3, [r5, #0]
 800bd56:	b103      	cbz	r3, 800bd5a <_write_r+0x1e>
 800bd58:	6023      	str	r3, [r4, #0]
 800bd5a:	bd38      	pop	{r3, r4, r5, pc}
 800bd5c:	20026458 	.word	0x20026458

0800bd60 <__errno>:
 800bd60:	4b01      	ldr	r3, [pc, #4]	@ (800bd68 <__errno+0x8>)
 800bd62:	6818      	ldr	r0, [r3, #0]
 800bd64:	4770      	bx	lr
 800bd66:	bf00      	nop
 800bd68:	20000020 	.word	0x20000020

0800bd6c <__libc_init_array>:
 800bd6c:	b570      	push	{r4, r5, r6, lr}
 800bd6e:	4d0d      	ldr	r5, [pc, #52]	@ (800bda4 <__libc_init_array+0x38>)
 800bd70:	4c0d      	ldr	r4, [pc, #52]	@ (800bda8 <__libc_init_array+0x3c>)
 800bd72:	1b64      	subs	r4, r4, r5
 800bd74:	10a4      	asrs	r4, r4, #2
 800bd76:	2600      	movs	r6, #0
 800bd78:	42a6      	cmp	r6, r4
 800bd7a:	d109      	bne.n	800bd90 <__libc_init_array+0x24>
 800bd7c:	4d0b      	ldr	r5, [pc, #44]	@ (800bdac <__libc_init_array+0x40>)
 800bd7e:	4c0c      	ldr	r4, [pc, #48]	@ (800bdb0 <__libc_init_array+0x44>)
 800bd80:	f001 fd68 	bl	800d854 <_init>
 800bd84:	1b64      	subs	r4, r4, r5
 800bd86:	10a4      	asrs	r4, r4, #2
 800bd88:	2600      	movs	r6, #0
 800bd8a:	42a6      	cmp	r6, r4
 800bd8c:	d105      	bne.n	800bd9a <__libc_init_array+0x2e>
 800bd8e:	bd70      	pop	{r4, r5, r6, pc}
 800bd90:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd94:	4798      	blx	r3
 800bd96:	3601      	adds	r6, #1
 800bd98:	e7ee      	b.n	800bd78 <__libc_init_array+0xc>
 800bd9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd9e:	4798      	blx	r3
 800bda0:	3601      	adds	r6, #1
 800bda2:	e7f2      	b.n	800bd8a <__libc_init_array+0x1e>
 800bda4:	0800dd54 	.word	0x0800dd54
 800bda8:	0800dd54 	.word	0x0800dd54
 800bdac:	0800dd54 	.word	0x0800dd54
 800bdb0:	0800dd58 	.word	0x0800dd58

0800bdb4 <__retarget_lock_init_recursive>:
 800bdb4:	4770      	bx	lr

0800bdb6 <__retarget_lock_acquire_recursive>:
 800bdb6:	4770      	bx	lr

0800bdb8 <__retarget_lock_release_recursive>:
 800bdb8:	4770      	bx	lr

0800bdba <memcpy>:
 800bdba:	440a      	add	r2, r1
 800bdbc:	4291      	cmp	r1, r2
 800bdbe:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800bdc2:	d100      	bne.n	800bdc6 <memcpy+0xc>
 800bdc4:	4770      	bx	lr
 800bdc6:	b510      	push	{r4, lr}
 800bdc8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdcc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bdd0:	4291      	cmp	r1, r2
 800bdd2:	d1f9      	bne.n	800bdc8 <memcpy+0xe>
 800bdd4:	bd10      	pop	{r4, pc}

0800bdd6 <quorem>:
 800bdd6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdda:	6903      	ldr	r3, [r0, #16]
 800bddc:	690c      	ldr	r4, [r1, #16]
 800bdde:	42a3      	cmp	r3, r4
 800bde0:	4607      	mov	r7, r0
 800bde2:	db7e      	blt.n	800bee2 <quorem+0x10c>
 800bde4:	3c01      	subs	r4, #1
 800bde6:	f101 0814 	add.w	r8, r1, #20
 800bdea:	00a3      	lsls	r3, r4, #2
 800bdec:	f100 0514 	add.w	r5, r0, #20
 800bdf0:	9300      	str	r3, [sp, #0]
 800bdf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bdf6:	9301      	str	r3, [sp, #4]
 800bdf8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bdfc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be00:	3301      	adds	r3, #1
 800be02:	429a      	cmp	r2, r3
 800be04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800be08:	fbb2 f6f3 	udiv	r6, r2, r3
 800be0c:	d32e      	bcc.n	800be6c <quorem+0x96>
 800be0e:	f04f 0a00 	mov.w	sl, #0
 800be12:	46c4      	mov	ip, r8
 800be14:	46ae      	mov	lr, r5
 800be16:	46d3      	mov	fp, sl
 800be18:	f85c 3b04 	ldr.w	r3, [ip], #4
 800be1c:	b298      	uxth	r0, r3
 800be1e:	fb06 a000 	mla	r0, r6, r0, sl
 800be22:	0c02      	lsrs	r2, r0, #16
 800be24:	0c1b      	lsrs	r3, r3, #16
 800be26:	fb06 2303 	mla	r3, r6, r3, r2
 800be2a:	f8de 2000 	ldr.w	r2, [lr]
 800be2e:	b280      	uxth	r0, r0
 800be30:	b292      	uxth	r2, r2
 800be32:	1a12      	subs	r2, r2, r0
 800be34:	445a      	add	r2, fp
 800be36:	f8de 0000 	ldr.w	r0, [lr]
 800be3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800be3e:	b29b      	uxth	r3, r3
 800be40:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800be44:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800be48:	b292      	uxth	r2, r2
 800be4a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800be4e:	45e1      	cmp	r9, ip
 800be50:	f84e 2b04 	str.w	r2, [lr], #4
 800be54:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800be58:	d2de      	bcs.n	800be18 <quorem+0x42>
 800be5a:	9b00      	ldr	r3, [sp, #0]
 800be5c:	58eb      	ldr	r3, [r5, r3]
 800be5e:	b92b      	cbnz	r3, 800be6c <quorem+0x96>
 800be60:	9b01      	ldr	r3, [sp, #4]
 800be62:	3b04      	subs	r3, #4
 800be64:	429d      	cmp	r5, r3
 800be66:	461a      	mov	r2, r3
 800be68:	d32f      	bcc.n	800beca <quorem+0xf4>
 800be6a:	613c      	str	r4, [r7, #16]
 800be6c:	4638      	mov	r0, r7
 800be6e:	f001 f8c7 	bl	800d000 <__mcmp>
 800be72:	2800      	cmp	r0, #0
 800be74:	db25      	blt.n	800bec2 <quorem+0xec>
 800be76:	4629      	mov	r1, r5
 800be78:	2000      	movs	r0, #0
 800be7a:	f858 2b04 	ldr.w	r2, [r8], #4
 800be7e:	f8d1 c000 	ldr.w	ip, [r1]
 800be82:	fa1f fe82 	uxth.w	lr, r2
 800be86:	fa1f f38c 	uxth.w	r3, ip
 800be8a:	eba3 030e 	sub.w	r3, r3, lr
 800be8e:	4403      	add	r3, r0
 800be90:	0c12      	lsrs	r2, r2, #16
 800be92:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800be96:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800be9a:	b29b      	uxth	r3, r3
 800be9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bea0:	45c1      	cmp	r9, r8
 800bea2:	f841 3b04 	str.w	r3, [r1], #4
 800bea6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800beaa:	d2e6      	bcs.n	800be7a <quorem+0xa4>
 800beac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800beb0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800beb4:	b922      	cbnz	r2, 800bec0 <quorem+0xea>
 800beb6:	3b04      	subs	r3, #4
 800beb8:	429d      	cmp	r5, r3
 800beba:	461a      	mov	r2, r3
 800bebc:	d30b      	bcc.n	800bed6 <quorem+0x100>
 800bebe:	613c      	str	r4, [r7, #16]
 800bec0:	3601      	adds	r6, #1
 800bec2:	4630      	mov	r0, r6
 800bec4:	b003      	add	sp, #12
 800bec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beca:	6812      	ldr	r2, [r2, #0]
 800becc:	3b04      	subs	r3, #4
 800bece:	2a00      	cmp	r2, #0
 800bed0:	d1cb      	bne.n	800be6a <quorem+0x94>
 800bed2:	3c01      	subs	r4, #1
 800bed4:	e7c6      	b.n	800be64 <quorem+0x8e>
 800bed6:	6812      	ldr	r2, [r2, #0]
 800bed8:	3b04      	subs	r3, #4
 800beda:	2a00      	cmp	r2, #0
 800bedc:	d1ef      	bne.n	800bebe <quorem+0xe8>
 800bede:	3c01      	subs	r4, #1
 800bee0:	e7ea      	b.n	800beb8 <quorem+0xe2>
 800bee2:	2000      	movs	r0, #0
 800bee4:	e7ee      	b.n	800bec4 <quorem+0xee>
	...

0800bee8 <_dtoa_r>:
 800bee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beec:	69c7      	ldr	r7, [r0, #28]
 800beee:	b097      	sub	sp, #92	@ 0x5c
 800bef0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800bef4:	ec55 4b10 	vmov	r4, r5, d0
 800bef8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800befa:	9107      	str	r1, [sp, #28]
 800befc:	4681      	mov	r9, r0
 800befe:	920c      	str	r2, [sp, #48]	@ 0x30
 800bf00:	9311      	str	r3, [sp, #68]	@ 0x44
 800bf02:	b97f      	cbnz	r7, 800bf24 <_dtoa_r+0x3c>
 800bf04:	2010      	movs	r0, #16
 800bf06:	f7fe ffb3 	bl	800ae70 <malloc>
 800bf0a:	4602      	mov	r2, r0
 800bf0c:	f8c9 001c 	str.w	r0, [r9, #28]
 800bf10:	b920      	cbnz	r0, 800bf1c <_dtoa_r+0x34>
 800bf12:	4ba9      	ldr	r3, [pc, #676]	@ (800c1b8 <_dtoa_r+0x2d0>)
 800bf14:	21ef      	movs	r1, #239	@ 0xef
 800bf16:	48a9      	ldr	r0, [pc, #676]	@ (800c1bc <_dtoa_r+0x2d4>)
 800bf18:	f001 fbec 	bl	800d6f4 <__assert_func>
 800bf1c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bf20:	6007      	str	r7, [r0, #0]
 800bf22:	60c7      	str	r7, [r0, #12]
 800bf24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bf28:	6819      	ldr	r1, [r3, #0]
 800bf2a:	b159      	cbz	r1, 800bf44 <_dtoa_r+0x5c>
 800bf2c:	685a      	ldr	r2, [r3, #4]
 800bf2e:	604a      	str	r2, [r1, #4]
 800bf30:	2301      	movs	r3, #1
 800bf32:	4093      	lsls	r3, r2
 800bf34:	608b      	str	r3, [r1, #8]
 800bf36:	4648      	mov	r0, r9
 800bf38:	f000 fe30 	bl	800cb9c <_Bfree>
 800bf3c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bf40:	2200      	movs	r2, #0
 800bf42:	601a      	str	r2, [r3, #0]
 800bf44:	1e2b      	subs	r3, r5, #0
 800bf46:	bfb9      	ittee	lt
 800bf48:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bf4c:	9305      	strlt	r3, [sp, #20]
 800bf4e:	2300      	movge	r3, #0
 800bf50:	6033      	strge	r3, [r6, #0]
 800bf52:	9f05      	ldr	r7, [sp, #20]
 800bf54:	4b9a      	ldr	r3, [pc, #616]	@ (800c1c0 <_dtoa_r+0x2d8>)
 800bf56:	bfbc      	itt	lt
 800bf58:	2201      	movlt	r2, #1
 800bf5a:	6032      	strlt	r2, [r6, #0]
 800bf5c:	43bb      	bics	r3, r7
 800bf5e:	d112      	bne.n	800bf86 <_dtoa_r+0x9e>
 800bf60:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bf62:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bf66:	6013      	str	r3, [r2, #0]
 800bf68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bf6c:	4323      	orrs	r3, r4
 800bf6e:	f000 855a 	beq.w	800ca26 <_dtoa_r+0xb3e>
 800bf72:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bf74:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c1d4 <_dtoa_r+0x2ec>
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	f000 855c 	beq.w	800ca36 <_dtoa_r+0xb4e>
 800bf7e:	f10a 0303 	add.w	r3, sl, #3
 800bf82:	f000 bd56 	b.w	800ca32 <_dtoa_r+0xb4a>
 800bf86:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	ec51 0b17 	vmov	r0, r1, d7
 800bf90:	2300      	movs	r3, #0
 800bf92:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800bf96:	f7f4 fda7 	bl	8000ae8 <__aeabi_dcmpeq>
 800bf9a:	4680      	mov	r8, r0
 800bf9c:	b158      	cbz	r0, 800bfb6 <_dtoa_r+0xce>
 800bf9e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	6013      	str	r3, [r2, #0]
 800bfa4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bfa6:	b113      	cbz	r3, 800bfae <_dtoa_r+0xc6>
 800bfa8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bfaa:	4b86      	ldr	r3, [pc, #536]	@ (800c1c4 <_dtoa_r+0x2dc>)
 800bfac:	6013      	str	r3, [r2, #0]
 800bfae:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c1d8 <_dtoa_r+0x2f0>
 800bfb2:	f000 bd40 	b.w	800ca36 <_dtoa_r+0xb4e>
 800bfb6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800bfba:	aa14      	add	r2, sp, #80	@ 0x50
 800bfbc:	a915      	add	r1, sp, #84	@ 0x54
 800bfbe:	4648      	mov	r0, r9
 800bfc0:	f001 f8ce 	bl	800d160 <__d2b>
 800bfc4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bfc8:	9002      	str	r0, [sp, #8]
 800bfca:	2e00      	cmp	r6, #0
 800bfcc:	d078      	beq.n	800c0c0 <_dtoa_r+0x1d8>
 800bfce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfd0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800bfd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bfd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bfdc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bfe0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bfe4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bfe8:	4619      	mov	r1, r3
 800bfea:	2200      	movs	r2, #0
 800bfec:	4b76      	ldr	r3, [pc, #472]	@ (800c1c8 <_dtoa_r+0x2e0>)
 800bfee:	f7f4 f95b 	bl	80002a8 <__aeabi_dsub>
 800bff2:	a36b      	add	r3, pc, #428	@ (adr r3, 800c1a0 <_dtoa_r+0x2b8>)
 800bff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff8:	f7f4 fb0e 	bl	8000618 <__aeabi_dmul>
 800bffc:	a36a      	add	r3, pc, #424	@ (adr r3, 800c1a8 <_dtoa_r+0x2c0>)
 800bffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c002:	f7f4 f953 	bl	80002ac <__adddf3>
 800c006:	4604      	mov	r4, r0
 800c008:	4630      	mov	r0, r6
 800c00a:	460d      	mov	r5, r1
 800c00c:	f7f4 fa9a 	bl	8000544 <__aeabi_i2d>
 800c010:	a367      	add	r3, pc, #412	@ (adr r3, 800c1b0 <_dtoa_r+0x2c8>)
 800c012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c016:	f7f4 faff 	bl	8000618 <__aeabi_dmul>
 800c01a:	4602      	mov	r2, r0
 800c01c:	460b      	mov	r3, r1
 800c01e:	4620      	mov	r0, r4
 800c020:	4629      	mov	r1, r5
 800c022:	f7f4 f943 	bl	80002ac <__adddf3>
 800c026:	4604      	mov	r4, r0
 800c028:	460d      	mov	r5, r1
 800c02a:	f7f4 fda5 	bl	8000b78 <__aeabi_d2iz>
 800c02e:	2200      	movs	r2, #0
 800c030:	4607      	mov	r7, r0
 800c032:	2300      	movs	r3, #0
 800c034:	4620      	mov	r0, r4
 800c036:	4629      	mov	r1, r5
 800c038:	f7f4 fd60 	bl	8000afc <__aeabi_dcmplt>
 800c03c:	b140      	cbz	r0, 800c050 <_dtoa_r+0x168>
 800c03e:	4638      	mov	r0, r7
 800c040:	f7f4 fa80 	bl	8000544 <__aeabi_i2d>
 800c044:	4622      	mov	r2, r4
 800c046:	462b      	mov	r3, r5
 800c048:	f7f4 fd4e 	bl	8000ae8 <__aeabi_dcmpeq>
 800c04c:	b900      	cbnz	r0, 800c050 <_dtoa_r+0x168>
 800c04e:	3f01      	subs	r7, #1
 800c050:	2f16      	cmp	r7, #22
 800c052:	d852      	bhi.n	800c0fa <_dtoa_r+0x212>
 800c054:	4b5d      	ldr	r3, [pc, #372]	@ (800c1cc <_dtoa_r+0x2e4>)
 800c056:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c062:	f7f4 fd4b 	bl	8000afc <__aeabi_dcmplt>
 800c066:	2800      	cmp	r0, #0
 800c068:	d049      	beq.n	800c0fe <_dtoa_r+0x216>
 800c06a:	3f01      	subs	r7, #1
 800c06c:	2300      	movs	r3, #0
 800c06e:	9310      	str	r3, [sp, #64]	@ 0x40
 800c070:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c072:	1b9b      	subs	r3, r3, r6
 800c074:	1e5a      	subs	r2, r3, #1
 800c076:	bf45      	ittet	mi
 800c078:	f1c3 0301 	rsbmi	r3, r3, #1
 800c07c:	9300      	strmi	r3, [sp, #0]
 800c07e:	2300      	movpl	r3, #0
 800c080:	2300      	movmi	r3, #0
 800c082:	9206      	str	r2, [sp, #24]
 800c084:	bf54      	ite	pl
 800c086:	9300      	strpl	r3, [sp, #0]
 800c088:	9306      	strmi	r3, [sp, #24]
 800c08a:	2f00      	cmp	r7, #0
 800c08c:	db39      	blt.n	800c102 <_dtoa_r+0x21a>
 800c08e:	9b06      	ldr	r3, [sp, #24]
 800c090:	970d      	str	r7, [sp, #52]	@ 0x34
 800c092:	443b      	add	r3, r7
 800c094:	9306      	str	r3, [sp, #24]
 800c096:	2300      	movs	r3, #0
 800c098:	9308      	str	r3, [sp, #32]
 800c09a:	9b07      	ldr	r3, [sp, #28]
 800c09c:	2b09      	cmp	r3, #9
 800c09e:	d863      	bhi.n	800c168 <_dtoa_r+0x280>
 800c0a0:	2b05      	cmp	r3, #5
 800c0a2:	bfc4      	itt	gt
 800c0a4:	3b04      	subgt	r3, #4
 800c0a6:	9307      	strgt	r3, [sp, #28]
 800c0a8:	9b07      	ldr	r3, [sp, #28]
 800c0aa:	f1a3 0302 	sub.w	r3, r3, #2
 800c0ae:	bfcc      	ite	gt
 800c0b0:	2400      	movgt	r4, #0
 800c0b2:	2401      	movle	r4, #1
 800c0b4:	2b03      	cmp	r3, #3
 800c0b6:	d863      	bhi.n	800c180 <_dtoa_r+0x298>
 800c0b8:	e8df f003 	tbb	[pc, r3]
 800c0bc:	2b375452 	.word	0x2b375452
 800c0c0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c0c4:	441e      	add	r6, r3
 800c0c6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c0ca:	2b20      	cmp	r3, #32
 800c0cc:	bfc1      	itttt	gt
 800c0ce:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c0d2:	409f      	lslgt	r7, r3
 800c0d4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c0d8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c0dc:	bfd6      	itet	le
 800c0de:	f1c3 0320 	rsble	r3, r3, #32
 800c0e2:	ea47 0003 	orrgt.w	r0, r7, r3
 800c0e6:	fa04 f003 	lslle.w	r0, r4, r3
 800c0ea:	f7f4 fa1b 	bl	8000524 <__aeabi_ui2d>
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c0f4:	3e01      	subs	r6, #1
 800c0f6:	9212      	str	r2, [sp, #72]	@ 0x48
 800c0f8:	e776      	b.n	800bfe8 <_dtoa_r+0x100>
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	e7b7      	b.n	800c06e <_dtoa_r+0x186>
 800c0fe:	9010      	str	r0, [sp, #64]	@ 0x40
 800c100:	e7b6      	b.n	800c070 <_dtoa_r+0x188>
 800c102:	9b00      	ldr	r3, [sp, #0]
 800c104:	1bdb      	subs	r3, r3, r7
 800c106:	9300      	str	r3, [sp, #0]
 800c108:	427b      	negs	r3, r7
 800c10a:	9308      	str	r3, [sp, #32]
 800c10c:	2300      	movs	r3, #0
 800c10e:	930d      	str	r3, [sp, #52]	@ 0x34
 800c110:	e7c3      	b.n	800c09a <_dtoa_r+0x1b2>
 800c112:	2301      	movs	r3, #1
 800c114:	9309      	str	r3, [sp, #36]	@ 0x24
 800c116:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c118:	eb07 0b03 	add.w	fp, r7, r3
 800c11c:	f10b 0301 	add.w	r3, fp, #1
 800c120:	2b01      	cmp	r3, #1
 800c122:	9303      	str	r3, [sp, #12]
 800c124:	bfb8      	it	lt
 800c126:	2301      	movlt	r3, #1
 800c128:	e006      	b.n	800c138 <_dtoa_r+0x250>
 800c12a:	2301      	movs	r3, #1
 800c12c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c12e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c130:	2b00      	cmp	r3, #0
 800c132:	dd28      	ble.n	800c186 <_dtoa_r+0x29e>
 800c134:	469b      	mov	fp, r3
 800c136:	9303      	str	r3, [sp, #12]
 800c138:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c13c:	2100      	movs	r1, #0
 800c13e:	2204      	movs	r2, #4
 800c140:	f102 0514 	add.w	r5, r2, #20
 800c144:	429d      	cmp	r5, r3
 800c146:	d926      	bls.n	800c196 <_dtoa_r+0x2ae>
 800c148:	6041      	str	r1, [r0, #4]
 800c14a:	4648      	mov	r0, r9
 800c14c:	f000 fce6 	bl	800cb1c <_Balloc>
 800c150:	4682      	mov	sl, r0
 800c152:	2800      	cmp	r0, #0
 800c154:	d142      	bne.n	800c1dc <_dtoa_r+0x2f4>
 800c156:	4b1e      	ldr	r3, [pc, #120]	@ (800c1d0 <_dtoa_r+0x2e8>)
 800c158:	4602      	mov	r2, r0
 800c15a:	f240 11af 	movw	r1, #431	@ 0x1af
 800c15e:	e6da      	b.n	800bf16 <_dtoa_r+0x2e>
 800c160:	2300      	movs	r3, #0
 800c162:	e7e3      	b.n	800c12c <_dtoa_r+0x244>
 800c164:	2300      	movs	r3, #0
 800c166:	e7d5      	b.n	800c114 <_dtoa_r+0x22c>
 800c168:	2401      	movs	r4, #1
 800c16a:	2300      	movs	r3, #0
 800c16c:	9307      	str	r3, [sp, #28]
 800c16e:	9409      	str	r4, [sp, #36]	@ 0x24
 800c170:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800c174:	2200      	movs	r2, #0
 800c176:	f8cd b00c 	str.w	fp, [sp, #12]
 800c17a:	2312      	movs	r3, #18
 800c17c:	920c      	str	r2, [sp, #48]	@ 0x30
 800c17e:	e7db      	b.n	800c138 <_dtoa_r+0x250>
 800c180:	2301      	movs	r3, #1
 800c182:	9309      	str	r3, [sp, #36]	@ 0x24
 800c184:	e7f4      	b.n	800c170 <_dtoa_r+0x288>
 800c186:	f04f 0b01 	mov.w	fp, #1
 800c18a:	f8cd b00c 	str.w	fp, [sp, #12]
 800c18e:	465b      	mov	r3, fp
 800c190:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c194:	e7d0      	b.n	800c138 <_dtoa_r+0x250>
 800c196:	3101      	adds	r1, #1
 800c198:	0052      	lsls	r2, r2, #1
 800c19a:	e7d1      	b.n	800c140 <_dtoa_r+0x258>
 800c19c:	f3af 8000 	nop.w
 800c1a0:	636f4361 	.word	0x636f4361
 800c1a4:	3fd287a7 	.word	0x3fd287a7
 800c1a8:	8b60c8b3 	.word	0x8b60c8b3
 800c1ac:	3fc68a28 	.word	0x3fc68a28
 800c1b0:	509f79fb 	.word	0x509f79fb
 800c1b4:	3fd34413 	.word	0x3fd34413
 800c1b8:	0800da19 	.word	0x0800da19
 800c1bc:	0800da30 	.word	0x0800da30
 800c1c0:	7ff00000 	.word	0x7ff00000
 800c1c4:	0800d9e9 	.word	0x0800d9e9
 800c1c8:	3ff80000 	.word	0x3ff80000
 800c1cc:	0800db80 	.word	0x0800db80
 800c1d0:	0800da88 	.word	0x0800da88
 800c1d4:	0800da15 	.word	0x0800da15
 800c1d8:	0800d9e8 	.word	0x0800d9e8
 800c1dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c1e0:	6018      	str	r0, [r3, #0]
 800c1e2:	9b03      	ldr	r3, [sp, #12]
 800c1e4:	2b0e      	cmp	r3, #14
 800c1e6:	f200 80a1 	bhi.w	800c32c <_dtoa_r+0x444>
 800c1ea:	2c00      	cmp	r4, #0
 800c1ec:	f000 809e 	beq.w	800c32c <_dtoa_r+0x444>
 800c1f0:	2f00      	cmp	r7, #0
 800c1f2:	dd33      	ble.n	800c25c <_dtoa_r+0x374>
 800c1f4:	4b9c      	ldr	r3, [pc, #624]	@ (800c468 <_dtoa_r+0x580>)
 800c1f6:	f007 020f 	and.w	r2, r7, #15
 800c1fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1fe:	ed93 7b00 	vldr	d7, [r3]
 800c202:	05f8      	lsls	r0, r7, #23
 800c204:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c208:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c20c:	d516      	bpl.n	800c23c <_dtoa_r+0x354>
 800c20e:	4b97      	ldr	r3, [pc, #604]	@ (800c46c <_dtoa_r+0x584>)
 800c210:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c214:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c218:	f7f4 fb28 	bl	800086c <__aeabi_ddiv>
 800c21c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c220:	f004 040f 	and.w	r4, r4, #15
 800c224:	2603      	movs	r6, #3
 800c226:	4d91      	ldr	r5, [pc, #580]	@ (800c46c <_dtoa_r+0x584>)
 800c228:	b954      	cbnz	r4, 800c240 <_dtoa_r+0x358>
 800c22a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c22e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c232:	f7f4 fb1b 	bl	800086c <__aeabi_ddiv>
 800c236:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c23a:	e028      	b.n	800c28e <_dtoa_r+0x3a6>
 800c23c:	2602      	movs	r6, #2
 800c23e:	e7f2      	b.n	800c226 <_dtoa_r+0x33e>
 800c240:	07e1      	lsls	r1, r4, #31
 800c242:	d508      	bpl.n	800c256 <_dtoa_r+0x36e>
 800c244:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c248:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c24c:	f7f4 f9e4 	bl	8000618 <__aeabi_dmul>
 800c250:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c254:	3601      	adds	r6, #1
 800c256:	1064      	asrs	r4, r4, #1
 800c258:	3508      	adds	r5, #8
 800c25a:	e7e5      	b.n	800c228 <_dtoa_r+0x340>
 800c25c:	f000 80af 	beq.w	800c3be <_dtoa_r+0x4d6>
 800c260:	427c      	negs	r4, r7
 800c262:	4b81      	ldr	r3, [pc, #516]	@ (800c468 <_dtoa_r+0x580>)
 800c264:	4d81      	ldr	r5, [pc, #516]	@ (800c46c <_dtoa_r+0x584>)
 800c266:	f004 020f 	and.w	r2, r4, #15
 800c26a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c272:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c276:	f7f4 f9cf 	bl	8000618 <__aeabi_dmul>
 800c27a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c27e:	1124      	asrs	r4, r4, #4
 800c280:	2300      	movs	r3, #0
 800c282:	2602      	movs	r6, #2
 800c284:	2c00      	cmp	r4, #0
 800c286:	f040 808f 	bne.w	800c3a8 <_dtoa_r+0x4c0>
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d1d3      	bne.n	800c236 <_dtoa_r+0x34e>
 800c28e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c290:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c294:	2b00      	cmp	r3, #0
 800c296:	f000 8094 	beq.w	800c3c2 <_dtoa_r+0x4da>
 800c29a:	4b75      	ldr	r3, [pc, #468]	@ (800c470 <_dtoa_r+0x588>)
 800c29c:	2200      	movs	r2, #0
 800c29e:	4620      	mov	r0, r4
 800c2a0:	4629      	mov	r1, r5
 800c2a2:	f7f4 fc2b 	bl	8000afc <__aeabi_dcmplt>
 800c2a6:	2800      	cmp	r0, #0
 800c2a8:	f000 808b 	beq.w	800c3c2 <_dtoa_r+0x4da>
 800c2ac:	9b03      	ldr	r3, [sp, #12]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	f000 8087 	beq.w	800c3c2 <_dtoa_r+0x4da>
 800c2b4:	f1bb 0f00 	cmp.w	fp, #0
 800c2b8:	dd34      	ble.n	800c324 <_dtoa_r+0x43c>
 800c2ba:	4620      	mov	r0, r4
 800c2bc:	4b6d      	ldr	r3, [pc, #436]	@ (800c474 <_dtoa_r+0x58c>)
 800c2be:	2200      	movs	r2, #0
 800c2c0:	4629      	mov	r1, r5
 800c2c2:	f7f4 f9a9 	bl	8000618 <__aeabi_dmul>
 800c2c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c2ca:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800c2ce:	3601      	adds	r6, #1
 800c2d0:	465c      	mov	r4, fp
 800c2d2:	4630      	mov	r0, r6
 800c2d4:	f7f4 f936 	bl	8000544 <__aeabi_i2d>
 800c2d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c2dc:	f7f4 f99c 	bl	8000618 <__aeabi_dmul>
 800c2e0:	4b65      	ldr	r3, [pc, #404]	@ (800c478 <_dtoa_r+0x590>)
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f7f3 ffe2 	bl	80002ac <__adddf3>
 800c2e8:	4605      	mov	r5, r0
 800c2ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c2ee:	2c00      	cmp	r4, #0
 800c2f0:	d16a      	bne.n	800c3c8 <_dtoa_r+0x4e0>
 800c2f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2f6:	4b61      	ldr	r3, [pc, #388]	@ (800c47c <_dtoa_r+0x594>)
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	f7f3 ffd5 	bl	80002a8 <__aeabi_dsub>
 800c2fe:	4602      	mov	r2, r0
 800c300:	460b      	mov	r3, r1
 800c302:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c306:	462a      	mov	r2, r5
 800c308:	4633      	mov	r3, r6
 800c30a:	f7f4 fc15 	bl	8000b38 <__aeabi_dcmpgt>
 800c30e:	2800      	cmp	r0, #0
 800c310:	f040 8298 	bne.w	800c844 <_dtoa_r+0x95c>
 800c314:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c318:	462a      	mov	r2, r5
 800c31a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c31e:	f7f4 fbed 	bl	8000afc <__aeabi_dcmplt>
 800c322:	bb38      	cbnz	r0, 800c374 <_dtoa_r+0x48c>
 800c324:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c328:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c32c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c32e:	2b00      	cmp	r3, #0
 800c330:	f2c0 8157 	blt.w	800c5e2 <_dtoa_r+0x6fa>
 800c334:	2f0e      	cmp	r7, #14
 800c336:	f300 8154 	bgt.w	800c5e2 <_dtoa_r+0x6fa>
 800c33a:	4b4b      	ldr	r3, [pc, #300]	@ (800c468 <_dtoa_r+0x580>)
 800c33c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c340:	ed93 7b00 	vldr	d7, [r3]
 800c344:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c346:	2b00      	cmp	r3, #0
 800c348:	ed8d 7b00 	vstr	d7, [sp]
 800c34c:	f280 80e5 	bge.w	800c51a <_dtoa_r+0x632>
 800c350:	9b03      	ldr	r3, [sp, #12]
 800c352:	2b00      	cmp	r3, #0
 800c354:	f300 80e1 	bgt.w	800c51a <_dtoa_r+0x632>
 800c358:	d10c      	bne.n	800c374 <_dtoa_r+0x48c>
 800c35a:	4b48      	ldr	r3, [pc, #288]	@ (800c47c <_dtoa_r+0x594>)
 800c35c:	2200      	movs	r2, #0
 800c35e:	ec51 0b17 	vmov	r0, r1, d7
 800c362:	f7f4 f959 	bl	8000618 <__aeabi_dmul>
 800c366:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c36a:	f7f4 fbdb 	bl	8000b24 <__aeabi_dcmpge>
 800c36e:	2800      	cmp	r0, #0
 800c370:	f000 8266 	beq.w	800c840 <_dtoa_r+0x958>
 800c374:	2400      	movs	r4, #0
 800c376:	4625      	mov	r5, r4
 800c378:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c37a:	4656      	mov	r6, sl
 800c37c:	ea6f 0803 	mvn.w	r8, r3
 800c380:	2700      	movs	r7, #0
 800c382:	4621      	mov	r1, r4
 800c384:	4648      	mov	r0, r9
 800c386:	f000 fc09 	bl	800cb9c <_Bfree>
 800c38a:	2d00      	cmp	r5, #0
 800c38c:	f000 80bd 	beq.w	800c50a <_dtoa_r+0x622>
 800c390:	b12f      	cbz	r7, 800c39e <_dtoa_r+0x4b6>
 800c392:	42af      	cmp	r7, r5
 800c394:	d003      	beq.n	800c39e <_dtoa_r+0x4b6>
 800c396:	4639      	mov	r1, r7
 800c398:	4648      	mov	r0, r9
 800c39a:	f000 fbff 	bl	800cb9c <_Bfree>
 800c39e:	4629      	mov	r1, r5
 800c3a0:	4648      	mov	r0, r9
 800c3a2:	f000 fbfb 	bl	800cb9c <_Bfree>
 800c3a6:	e0b0      	b.n	800c50a <_dtoa_r+0x622>
 800c3a8:	07e2      	lsls	r2, r4, #31
 800c3aa:	d505      	bpl.n	800c3b8 <_dtoa_r+0x4d0>
 800c3ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c3b0:	f7f4 f932 	bl	8000618 <__aeabi_dmul>
 800c3b4:	3601      	adds	r6, #1
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	1064      	asrs	r4, r4, #1
 800c3ba:	3508      	adds	r5, #8
 800c3bc:	e762      	b.n	800c284 <_dtoa_r+0x39c>
 800c3be:	2602      	movs	r6, #2
 800c3c0:	e765      	b.n	800c28e <_dtoa_r+0x3a6>
 800c3c2:	9c03      	ldr	r4, [sp, #12]
 800c3c4:	46b8      	mov	r8, r7
 800c3c6:	e784      	b.n	800c2d2 <_dtoa_r+0x3ea>
 800c3c8:	4b27      	ldr	r3, [pc, #156]	@ (800c468 <_dtoa_r+0x580>)
 800c3ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c3cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c3d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c3d4:	4454      	add	r4, sl
 800c3d6:	2900      	cmp	r1, #0
 800c3d8:	d054      	beq.n	800c484 <_dtoa_r+0x59c>
 800c3da:	4929      	ldr	r1, [pc, #164]	@ (800c480 <_dtoa_r+0x598>)
 800c3dc:	2000      	movs	r0, #0
 800c3de:	f7f4 fa45 	bl	800086c <__aeabi_ddiv>
 800c3e2:	4633      	mov	r3, r6
 800c3e4:	462a      	mov	r2, r5
 800c3e6:	f7f3 ff5f 	bl	80002a8 <__aeabi_dsub>
 800c3ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c3ee:	4656      	mov	r6, sl
 800c3f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3f4:	f7f4 fbc0 	bl	8000b78 <__aeabi_d2iz>
 800c3f8:	4605      	mov	r5, r0
 800c3fa:	f7f4 f8a3 	bl	8000544 <__aeabi_i2d>
 800c3fe:	4602      	mov	r2, r0
 800c400:	460b      	mov	r3, r1
 800c402:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c406:	f7f3 ff4f 	bl	80002a8 <__aeabi_dsub>
 800c40a:	3530      	adds	r5, #48	@ 0x30
 800c40c:	4602      	mov	r2, r0
 800c40e:	460b      	mov	r3, r1
 800c410:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c414:	f806 5b01 	strb.w	r5, [r6], #1
 800c418:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c41c:	f7f4 fb6e 	bl	8000afc <__aeabi_dcmplt>
 800c420:	2800      	cmp	r0, #0
 800c422:	d172      	bne.n	800c50a <_dtoa_r+0x622>
 800c424:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c428:	4911      	ldr	r1, [pc, #68]	@ (800c470 <_dtoa_r+0x588>)
 800c42a:	2000      	movs	r0, #0
 800c42c:	f7f3 ff3c 	bl	80002a8 <__aeabi_dsub>
 800c430:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c434:	f7f4 fb62 	bl	8000afc <__aeabi_dcmplt>
 800c438:	2800      	cmp	r0, #0
 800c43a:	f040 80b4 	bne.w	800c5a6 <_dtoa_r+0x6be>
 800c43e:	42a6      	cmp	r6, r4
 800c440:	f43f af70 	beq.w	800c324 <_dtoa_r+0x43c>
 800c444:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c448:	4b0a      	ldr	r3, [pc, #40]	@ (800c474 <_dtoa_r+0x58c>)
 800c44a:	2200      	movs	r2, #0
 800c44c:	f7f4 f8e4 	bl	8000618 <__aeabi_dmul>
 800c450:	4b08      	ldr	r3, [pc, #32]	@ (800c474 <_dtoa_r+0x58c>)
 800c452:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c456:	2200      	movs	r2, #0
 800c458:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c45c:	f7f4 f8dc 	bl	8000618 <__aeabi_dmul>
 800c460:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c464:	e7c4      	b.n	800c3f0 <_dtoa_r+0x508>
 800c466:	bf00      	nop
 800c468:	0800db80 	.word	0x0800db80
 800c46c:	0800db58 	.word	0x0800db58
 800c470:	3ff00000 	.word	0x3ff00000
 800c474:	40240000 	.word	0x40240000
 800c478:	401c0000 	.word	0x401c0000
 800c47c:	40140000 	.word	0x40140000
 800c480:	3fe00000 	.word	0x3fe00000
 800c484:	4631      	mov	r1, r6
 800c486:	4628      	mov	r0, r5
 800c488:	f7f4 f8c6 	bl	8000618 <__aeabi_dmul>
 800c48c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c490:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c492:	4656      	mov	r6, sl
 800c494:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c498:	f7f4 fb6e 	bl	8000b78 <__aeabi_d2iz>
 800c49c:	4605      	mov	r5, r0
 800c49e:	f7f4 f851 	bl	8000544 <__aeabi_i2d>
 800c4a2:	4602      	mov	r2, r0
 800c4a4:	460b      	mov	r3, r1
 800c4a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c4aa:	f7f3 fefd 	bl	80002a8 <__aeabi_dsub>
 800c4ae:	3530      	adds	r5, #48	@ 0x30
 800c4b0:	f806 5b01 	strb.w	r5, [r6], #1
 800c4b4:	4602      	mov	r2, r0
 800c4b6:	460b      	mov	r3, r1
 800c4b8:	42a6      	cmp	r6, r4
 800c4ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c4be:	f04f 0200 	mov.w	r2, #0
 800c4c2:	d124      	bne.n	800c50e <_dtoa_r+0x626>
 800c4c4:	4baf      	ldr	r3, [pc, #700]	@ (800c784 <_dtoa_r+0x89c>)
 800c4c6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c4ca:	f7f3 feef 	bl	80002ac <__adddf3>
 800c4ce:	4602      	mov	r2, r0
 800c4d0:	460b      	mov	r3, r1
 800c4d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c4d6:	f7f4 fb2f 	bl	8000b38 <__aeabi_dcmpgt>
 800c4da:	2800      	cmp	r0, #0
 800c4dc:	d163      	bne.n	800c5a6 <_dtoa_r+0x6be>
 800c4de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c4e2:	49a8      	ldr	r1, [pc, #672]	@ (800c784 <_dtoa_r+0x89c>)
 800c4e4:	2000      	movs	r0, #0
 800c4e6:	f7f3 fedf 	bl	80002a8 <__aeabi_dsub>
 800c4ea:	4602      	mov	r2, r0
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c4f2:	f7f4 fb03 	bl	8000afc <__aeabi_dcmplt>
 800c4f6:	2800      	cmp	r0, #0
 800c4f8:	f43f af14 	beq.w	800c324 <_dtoa_r+0x43c>
 800c4fc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c4fe:	1e73      	subs	r3, r6, #1
 800c500:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c502:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c506:	2b30      	cmp	r3, #48	@ 0x30
 800c508:	d0f8      	beq.n	800c4fc <_dtoa_r+0x614>
 800c50a:	4647      	mov	r7, r8
 800c50c:	e03b      	b.n	800c586 <_dtoa_r+0x69e>
 800c50e:	4b9e      	ldr	r3, [pc, #632]	@ (800c788 <_dtoa_r+0x8a0>)
 800c510:	f7f4 f882 	bl	8000618 <__aeabi_dmul>
 800c514:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c518:	e7bc      	b.n	800c494 <_dtoa_r+0x5ac>
 800c51a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c51e:	4656      	mov	r6, sl
 800c520:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c524:	4620      	mov	r0, r4
 800c526:	4629      	mov	r1, r5
 800c528:	f7f4 f9a0 	bl	800086c <__aeabi_ddiv>
 800c52c:	f7f4 fb24 	bl	8000b78 <__aeabi_d2iz>
 800c530:	4680      	mov	r8, r0
 800c532:	f7f4 f807 	bl	8000544 <__aeabi_i2d>
 800c536:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c53a:	f7f4 f86d 	bl	8000618 <__aeabi_dmul>
 800c53e:	4602      	mov	r2, r0
 800c540:	460b      	mov	r3, r1
 800c542:	4620      	mov	r0, r4
 800c544:	4629      	mov	r1, r5
 800c546:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c54a:	f7f3 fead 	bl	80002a8 <__aeabi_dsub>
 800c54e:	f806 4b01 	strb.w	r4, [r6], #1
 800c552:	9d03      	ldr	r5, [sp, #12]
 800c554:	eba6 040a 	sub.w	r4, r6, sl
 800c558:	42a5      	cmp	r5, r4
 800c55a:	4602      	mov	r2, r0
 800c55c:	460b      	mov	r3, r1
 800c55e:	d133      	bne.n	800c5c8 <_dtoa_r+0x6e0>
 800c560:	f7f3 fea4 	bl	80002ac <__adddf3>
 800c564:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c568:	4604      	mov	r4, r0
 800c56a:	460d      	mov	r5, r1
 800c56c:	f7f4 fae4 	bl	8000b38 <__aeabi_dcmpgt>
 800c570:	b9c0      	cbnz	r0, 800c5a4 <_dtoa_r+0x6bc>
 800c572:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c576:	4620      	mov	r0, r4
 800c578:	4629      	mov	r1, r5
 800c57a:	f7f4 fab5 	bl	8000ae8 <__aeabi_dcmpeq>
 800c57e:	b110      	cbz	r0, 800c586 <_dtoa_r+0x69e>
 800c580:	f018 0f01 	tst.w	r8, #1
 800c584:	d10e      	bne.n	800c5a4 <_dtoa_r+0x6bc>
 800c586:	9902      	ldr	r1, [sp, #8]
 800c588:	4648      	mov	r0, r9
 800c58a:	f000 fb07 	bl	800cb9c <_Bfree>
 800c58e:	2300      	movs	r3, #0
 800c590:	7033      	strb	r3, [r6, #0]
 800c592:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c594:	3701      	adds	r7, #1
 800c596:	601f      	str	r7, [r3, #0]
 800c598:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	f000 824b 	beq.w	800ca36 <_dtoa_r+0xb4e>
 800c5a0:	601e      	str	r6, [r3, #0]
 800c5a2:	e248      	b.n	800ca36 <_dtoa_r+0xb4e>
 800c5a4:	46b8      	mov	r8, r7
 800c5a6:	4633      	mov	r3, r6
 800c5a8:	461e      	mov	r6, r3
 800c5aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c5ae:	2a39      	cmp	r2, #57	@ 0x39
 800c5b0:	d106      	bne.n	800c5c0 <_dtoa_r+0x6d8>
 800c5b2:	459a      	cmp	sl, r3
 800c5b4:	d1f8      	bne.n	800c5a8 <_dtoa_r+0x6c0>
 800c5b6:	2230      	movs	r2, #48	@ 0x30
 800c5b8:	f108 0801 	add.w	r8, r8, #1
 800c5bc:	f88a 2000 	strb.w	r2, [sl]
 800c5c0:	781a      	ldrb	r2, [r3, #0]
 800c5c2:	3201      	adds	r2, #1
 800c5c4:	701a      	strb	r2, [r3, #0]
 800c5c6:	e7a0      	b.n	800c50a <_dtoa_r+0x622>
 800c5c8:	4b6f      	ldr	r3, [pc, #444]	@ (800c788 <_dtoa_r+0x8a0>)
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	f7f4 f824 	bl	8000618 <__aeabi_dmul>
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	4604      	mov	r4, r0
 800c5d6:	460d      	mov	r5, r1
 800c5d8:	f7f4 fa86 	bl	8000ae8 <__aeabi_dcmpeq>
 800c5dc:	2800      	cmp	r0, #0
 800c5de:	d09f      	beq.n	800c520 <_dtoa_r+0x638>
 800c5e0:	e7d1      	b.n	800c586 <_dtoa_r+0x69e>
 800c5e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5e4:	2a00      	cmp	r2, #0
 800c5e6:	f000 80ea 	beq.w	800c7be <_dtoa_r+0x8d6>
 800c5ea:	9a07      	ldr	r2, [sp, #28]
 800c5ec:	2a01      	cmp	r2, #1
 800c5ee:	f300 80cd 	bgt.w	800c78c <_dtoa_r+0x8a4>
 800c5f2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c5f4:	2a00      	cmp	r2, #0
 800c5f6:	f000 80c1 	beq.w	800c77c <_dtoa_r+0x894>
 800c5fa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c5fe:	9c08      	ldr	r4, [sp, #32]
 800c600:	9e00      	ldr	r6, [sp, #0]
 800c602:	9a00      	ldr	r2, [sp, #0]
 800c604:	441a      	add	r2, r3
 800c606:	9200      	str	r2, [sp, #0]
 800c608:	9a06      	ldr	r2, [sp, #24]
 800c60a:	2101      	movs	r1, #1
 800c60c:	441a      	add	r2, r3
 800c60e:	4648      	mov	r0, r9
 800c610:	9206      	str	r2, [sp, #24]
 800c612:	f000 fb77 	bl	800cd04 <__i2b>
 800c616:	4605      	mov	r5, r0
 800c618:	b166      	cbz	r6, 800c634 <_dtoa_r+0x74c>
 800c61a:	9b06      	ldr	r3, [sp, #24]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	dd09      	ble.n	800c634 <_dtoa_r+0x74c>
 800c620:	42b3      	cmp	r3, r6
 800c622:	9a00      	ldr	r2, [sp, #0]
 800c624:	bfa8      	it	ge
 800c626:	4633      	movge	r3, r6
 800c628:	1ad2      	subs	r2, r2, r3
 800c62a:	9200      	str	r2, [sp, #0]
 800c62c:	9a06      	ldr	r2, [sp, #24]
 800c62e:	1af6      	subs	r6, r6, r3
 800c630:	1ad3      	subs	r3, r2, r3
 800c632:	9306      	str	r3, [sp, #24]
 800c634:	9b08      	ldr	r3, [sp, #32]
 800c636:	b30b      	cbz	r3, 800c67c <_dtoa_r+0x794>
 800c638:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	f000 80c6 	beq.w	800c7cc <_dtoa_r+0x8e4>
 800c640:	2c00      	cmp	r4, #0
 800c642:	f000 80c0 	beq.w	800c7c6 <_dtoa_r+0x8de>
 800c646:	4629      	mov	r1, r5
 800c648:	4622      	mov	r2, r4
 800c64a:	4648      	mov	r0, r9
 800c64c:	f000 fc12 	bl	800ce74 <__pow5mult>
 800c650:	9a02      	ldr	r2, [sp, #8]
 800c652:	4601      	mov	r1, r0
 800c654:	4605      	mov	r5, r0
 800c656:	4648      	mov	r0, r9
 800c658:	f000 fb6a 	bl	800cd30 <__multiply>
 800c65c:	9902      	ldr	r1, [sp, #8]
 800c65e:	4680      	mov	r8, r0
 800c660:	4648      	mov	r0, r9
 800c662:	f000 fa9b 	bl	800cb9c <_Bfree>
 800c666:	9b08      	ldr	r3, [sp, #32]
 800c668:	1b1b      	subs	r3, r3, r4
 800c66a:	9308      	str	r3, [sp, #32]
 800c66c:	f000 80b1 	beq.w	800c7d2 <_dtoa_r+0x8ea>
 800c670:	9a08      	ldr	r2, [sp, #32]
 800c672:	4641      	mov	r1, r8
 800c674:	4648      	mov	r0, r9
 800c676:	f000 fbfd 	bl	800ce74 <__pow5mult>
 800c67a:	9002      	str	r0, [sp, #8]
 800c67c:	2101      	movs	r1, #1
 800c67e:	4648      	mov	r0, r9
 800c680:	f000 fb40 	bl	800cd04 <__i2b>
 800c684:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c686:	4604      	mov	r4, r0
 800c688:	2b00      	cmp	r3, #0
 800c68a:	f000 81d8 	beq.w	800ca3e <_dtoa_r+0xb56>
 800c68e:	461a      	mov	r2, r3
 800c690:	4601      	mov	r1, r0
 800c692:	4648      	mov	r0, r9
 800c694:	f000 fbee 	bl	800ce74 <__pow5mult>
 800c698:	9b07      	ldr	r3, [sp, #28]
 800c69a:	2b01      	cmp	r3, #1
 800c69c:	4604      	mov	r4, r0
 800c69e:	f300 809f 	bgt.w	800c7e0 <_dtoa_r+0x8f8>
 800c6a2:	9b04      	ldr	r3, [sp, #16]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	f040 8097 	bne.w	800c7d8 <_dtoa_r+0x8f0>
 800c6aa:	9b05      	ldr	r3, [sp, #20]
 800c6ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	f040 8093 	bne.w	800c7dc <_dtoa_r+0x8f4>
 800c6b6:	9b05      	ldr	r3, [sp, #20]
 800c6b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c6bc:	0d1b      	lsrs	r3, r3, #20
 800c6be:	051b      	lsls	r3, r3, #20
 800c6c0:	b133      	cbz	r3, 800c6d0 <_dtoa_r+0x7e8>
 800c6c2:	9b00      	ldr	r3, [sp, #0]
 800c6c4:	3301      	adds	r3, #1
 800c6c6:	9300      	str	r3, [sp, #0]
 800c6c8:	9b06      	ldr	r3, [sp, #24]
 800c6ca:	3301      	adds	r3, #1
 800c6cc:	9306      	str	r3, [sp, #24]
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	9308      	str	r3, [sp, #32]
 800c6d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	f000 81b8 	beq.w	800ca4a <_dtoa_r+0xb62>
 800c6da:	6923      	ldr	r3, [r4, #16]
 800c6dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c6e0:	6918      	ldr	r0, [r3, #16]
 800c6e2:	f000 fac3 	bl	800cc6c <__hi0bits>
 800c6e6:	f1c0 0020 	rsb	r0, r0, #32
 800c6ea:	9b06      	ldr	r3, [sp, #24]
 800c6ec:	4418      	add	r0, r3
 800c6ee:	f010 001f 	ands.w	r0, r0, #31
 800c6f2:	f000 8082 	beq.w	800c7fa <_dtoa_r+0x912>
 800c6f6:	f1c0 0320 	rsb	r3, r0, #32
 800c6fa:	2b04      	cmp	r3, #4
 800c6fc:	dd73      	ble.n	800c7e6 <_dtoa_r+0x8fe>
 800c6fe:	9b00      	ldr	r3, [sp, #0]
 800c700:	f1c0 001c 	rsb	r0, r0, #28
 800c704:	4403      	add	r3, r0
 800c706:	9300      	str	r3, [sp, #0]
 800c708:	9b06      	ldr	r3, [sp, #24]
 800c70a:	4403      	add	r3, r0
 800c70c:	4406      	add	r6, r0
 800c70e:	9306      	str	r3, [sp, #24]
 800c710:	9b00      	ldr	r3, [sp, #0]
 800c712:	2b00      	cmp	r3, #0
 800c714:	dd05      	ble.n	800c722 <_dtoa_r+0x83a>
 800c716:	9902      	ldr	r1, [sp, #8]
 800c718:	461a      	mov	r2, r3
 800c71a:	4648      	mov	r0, r9
 800c71c:	f000 fc04 	bl	800cf28 <__lshift>
 800c720:	9002      	str	r0, [sp, #8]
 800c722:	9b06      	ldr	r3, [sp, #24]
 800c724:	2b00      	cmp	r3, #0
 800c726:	dd05      	ble.n	800c734 <_dtoa_r+0x84c>
 800c728:	4621      	mov	r1, r4
 800c72a:	461a      	mov	r2, r3
 800c72c:	4648      	mov	r0, r9
 800c72e:	f000 fbfb 	bl	800cf28 <__lshift>
 800c732:	4604      	mov	r4, r0
 800c734:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c736:	2b00      	cmp	r3, #0
 800c738:	d061      	beq.n	800c7fe <_dtoa_r+0x916>
 800c73a:	9802      	ldr	r0, [sp, #8]
 800c73c:	4621      	mov	r1, r4
 800c73e:	f000 fc5f 	bl	800d000 <__mcmp>
 800c742:	2800      	cmp	r0, #0
 800c744:	da5b      	bge.n	800c7fe <_dtoa_r+0x916>
 800c746:	2300      	movs	r3, #0
 800c748:	9902      	ldr	r1, [sp, #8]
 800c74a:	220a      	movs	r2, #10
 800c74c:	4648      	mov	r0, r9
 800c74e:	f000 fa47 	bl	800cbe0 <__multadd>
 800c752:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c754:	9002      	str	r0, [sp, #8]
 800c756:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	f000 8177 	beq.w	800ca4e <_dtoa_r+0xb66>
 800c760:	4629      	mov	r1, r5
 800c762:	2300      	movs	r3, #0
 800c764:	220a      	movs	r2, #10
 800c766:	4648      	mov	r0, r9
 800c768:	f000 fa3a 	bl	800cbe0 <__multadd>
 800c76c:	f1bb 0f00 	cmp.w	fp, #0
 800c770:	4605      	mov	r5, r0
 800c772:	dc6f      	bgt.n	800c854 <_dtoa_r+0x96c>
 800c774:	9b07      	ldr	r3, [sp, #28]
 800c776:	2b02      	cmp	r3, #2
 800c778:	dc49      	bgt.n	800c80e <_dtoa_r+0x926>
 800c77a:	e06b      	b.n	800c854 <_dtoa_r+0x96c>
 800c77c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c77e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c782:	e73c      	b.n	800c5fe <_dtoa_r+0x716>
 800c784:	3fe00000 	.word	0x3fe00000
 800c788:	40240000 	.word	0x40240000
 800c78c:	9b03      	ldr	r3, [sp, #12]
 800c78e:	1e5c      	subs	r4, r3, #1
 800c790:	9b08      	ldr	r3, [sp, #32]
 800c792:	42a3      	cmp	r3, r4
 800c794:	db09      	blt.n	800c7aa <_dtoa_r+0x8c2>
 800c796:	1b1c      	subs	r4, r3, r4
 800c798:	9b03      	ldr	r3, [sp, #12]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	f6bf af30 	bge.w	800c600 <_dtoa_r+0x718>
 800c7a0:	9b00      	ldr	r3, [sp, #0]
 800c7a2:	9a03      	ldr	r2, [sp, #12]
 800c7a4:	1a9e      	subs	r6, r3, r2
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	e72b      	b.n	800c602 <_dtoa_r+0x71a>
 800c7aa:	9b08      	ldr	r3, [sp, #32]
 800c7ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c7ae:	9408      	str	r4, [sp, #32]
 800c7b0:	1ae3      	subs	r3, r4, r3
 800c7b2:	441a      	add	r2, r3
 800c7b4:	9e00      	ldr	r6, [sp, #0]
 800c7b6:	9b03      	ldr	r3, [sp, #12]
 800c7b8:	920d      	str	r2, [sp, #52]	@ 0x34
 800c7ba:	2400      	movs	r4, #0
 800c7bc:	e721      	b.n	800c602 <_dtoa_r+0x71a>
 800c7be:	9c08      	ldr	r4, [sp, #32]
 800c7c0:	9e00      	ldr	r6, [sp, #0]
 800c7c2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c7c4:	e728      	b.n	800c618 <_dtoa_r+0x730>
 800c7c6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c7ca:	e751      	b.n	800c670 <_dtoa_r+0x788>
 800c7cc:	9a08      	ldr	r2, [sp, #32]
 800c7ce:	9902      	ldr	r1, [sp, #8]
 800c7d0:	e750      	b.n	800c674 <_dtoa_r+0x78c>
 800c7d2:	f8cd 8008 	str.w	r8, [sp, #8]
 800c7d6:	e751      	b.n	800c67c <_dtoa_r+0x794>
 800c7d8:	2300      	movs	r3, #0
 800c7da:	e779      	b.n	800c6d0 <_dtoa_r+0x7e8>
 800c7dc:	9b04      	ldr	r3, [sp, #16]
 800c7de:	e777      	b.n	800c6d0 <_dtoa_r+0x7e8>
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	9308      	str	r3, [sp, #32]
 800c7e4:	e779      	b.n	800c6da <_dtoa_r+0x7f2>
 800c7e6:	d093      	beq.n	800c710 <_dtoa_r+0x828>
 800c7e8:	9a00      	ldr	r2, [sp, #0]
 800c7ea:	331c      	adds	r3, #28
 800c7ec:	441a      	add	r2, r3
 800c7ee:	9200      	str	r2, [sp, #0]
 800c7f0:	9a06      	ldr	r2, [sp, #24]
 800c7f2:	441a      	add	r2, r3
 800c7f4:	441e      	add	r6, r3
 800c7f6:	9206      	str	r2, [sp, #24]
 800c7f8:	e78a      	b.n	800c710 <_dtoa_r+0x828>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	e7f4      	b.n	800c7e8 <_dtoa_r+0x900>
 800c7fe:	9b03      	ldr	r3, [sp, #12]
 800c800:	2b00      	cmp	r3, #0
 800c802:	46b8      	mov	r8, r7
 800c804:	dc20      	bgt.n	800c848 <_dtoa_r+0x960>
 800c806:	469b      	mov	fp, r3
 800c808:	9b07      	ldr	r3, [sp, #28]
 800c80a:	2b02      	cmp	r3, #2
 800c80c:	dd1e      	ble.n	800c84c <_dtoa_r+0x964>
 800c80e:	f1bb 0f00 	cmp.w	fp, #0
 800c812:	f47f adb1 	bne.w	800c378 <_dtoa_r+0x490>
 800c816:	4621      	mov	r1, r4
 800c818:	465b      	mov	r3, fp
 800c81a:	2205      	movs	r2, #5
 800c81c:	4648      	mov	r0, r9
 800c81e:	f000 f9df 	bl	800cbe0 <__multadd>
 800c822:	4601      	mov	r1, r0
 800c824:	4604      	mov	r4, r0
 800c826:	9802      	ldr	r0, [sp, #8]
 800c828:	f000 fbea 	bl	800d000 <__mcmp>
 800c82c:	2800      	cmp	r0, #0
 800c82e:	f77f ada3 	ble.w	800c378 <_dtoa_r+0x490>
 800c832:	4656      	mov	r6, sl
 800c834:	2331      	movs	r3, #49	@ 0x31
 800c836:	f806 3b01 	strb.w	r3, [r6], #1
 800c83a:	f108 0801 	add.w	r8, r8, #1
 800c83e:	e59f      	b.n	800c380 <_dtoa_r+0x498>
 800c840:	9c03      	ldr	r4, [sp, #12]
 800c842:	46b8      	mov	r8, r7
 800c844:	4625      	mov	r5, r4
 800c846:	e7f4      	b.n	800c832 <_dtoa_r+0x94a>
 800c848:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c84c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c84e:	2b00      	cmp	r3, #0
 800c850:	f000 8101 	beq.w	800ca56 <_dtoa_r+0xb6e>
 800c854:	2e00      	cmp	r6, #0
 800c856:	dd05      	ble.n	800c864 <_dtoa_r+0x97c>
 800c858:	4629      	mov	r1, r5
 800c85a:	4632      	mov	r2, r6
 800c85c:	4648      	mov	r0, r9
 800c85e:	f000 fb63 	bl	800cf28 <__lshift>
 800c862:	4605      	mov	r5, r0
 800c864:	9b08      	ldr	r3, [sp, #32]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d05c      	beq.n	800c924 <_dtoa_r+0xa3c>
 800c86a:	6869      	ldr	r1, [r5, #4]
 800c86c:	4648      	mov	r0, r9
 800c86e:	f000 f955 	bl	800cb1c <_Balloc>
 800c872:	4606      	mov	r6, r0
 800c874:	b928      	cbnz	r0, 800c882 <_dtoa_r+0x99a>
 800c876:	4b82      	ldr	r3, [pc, #520]	@ (800ca80 <_dtoa_r+0xb98>)
 800c878:	4602      	mov	r2, r0
 800c87a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c87e:	f7ff bb4a 	b.w	800bf16 <_dtoa_r+0x2e>
 800c882:	692a      	ldr	r2, [r5, #16]
 800c884:	3202      	adds	r2, #2
 800c886:	0092      	lsls	r2, r2, #2
 800c888:	f105 010c 	add.w	r1, r5, #12
 800c88c:	300c      	adds	r0, #12
 800c88e:	f7ff fa94 	bl	800bdba <memcpy>
 800c892:	2201      	movs	r2, #1
 800c894:	4631      	mov	r1, r6
 800c896:	4648      	mov	r0, r9
 800c898:	f000 fb46 	bl	800cf28 <__lshift>
 800c89c:	f10a 0301 	add.w	r3, sl, #1
 800c8a0:	9300      	str	r3, [sp, #0]
 800c8a2:	eb0a 030b 	add.w	r3, sl, fp
 800c8a6:	9308      	str	r3, [sp, #32]
 800c8a8:	9b04      	ldr	r3, [sp, #16]
 800c8aa:	f003 0301 	and.w	r3, r3, #1
 800c8ae:	462f      	mov	r7, r5
 800c8b0:	9306      	str	r3, [sp, #24]
 800c8b2:	4605      	mov	r5, r0
 800c8b4:	9b00      	ldr	r3, [sp, #0]
 800c8b6:	9802      	ldr	r0, [sp, #8]
 800c8b8:	4621      	mov	r1, r4
 800c8ba:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800c8be:	f7ff fa8a 	bl	800bdd6 <quorem>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	3330      	adds	r3, #48	@ 0x30
 800c8c6:	9003      	str	r0, [sp, #12]
 800c8c8:	4639      	mov	r1, r7
 800c8ca:	9802      	ldr	r0, [sp, #8]
 800c8cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8ce:	f000 fb97 	bl	800d000 <__mcmp>
 800c8d2:	462a      	mov	r2, r5
 800c8d4:	9004      	str	r0, [sp, #16]
 800c8d6:	4621      	mov	r1, r4
 800c8d8:	4648      	mov	r0, r9
 800c8da:	f000 fbad 	bl	800d038 <__mdiff>
 800c8de:	68c2      	ldr	r2, [r0, #12]
 800c8e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8e2:	4606      	mov	r6, r0
 800c8e4:	bb02      	cbnz	r2, 800c928 <_dtoa_r+0xa40>
 800c8e6:	4601      	mov	r1, r0
 800c8e8:	9802      	ldr	r0, [sp, #8]
 800c8ea:	f000 fb89 	bl	800d000 <__mcmp>
 800c8ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8f0:	4602      	mov	r2, r0
 800c8f2:	4631      	mov	r1, r6
 800c8f4:	4648      	mov	r0, r9
 800c8f6:	920c      	str	r2, [sp, #48]	@ 0x30
 800c8f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8fa:	f000 f94f 	bl	800cb9c <_Bfree>
 800c8fe:	9b07      	ldr	r3, [sp, #28]
 800c900:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c902:	9e00      	ldr	r6, [sp, #0]
 800c904:	ea42 0103 	orr.w	r1, r2, r3
 800c908:	9b06      	ldr	r3, [sp, #24]
 800c90a:	4319      	orrs	r1, r3
 800c90c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c90e:	d10d      	bne.n	800c92c <_dtoa_r+0xa44>
 800c910:	2b39      	cmp	r3, #57	@ 0x39
 800c912:	d027      	beq.n	800c964 <_dtoa_r+0xa7c>
 800c914:	9a04      	ldr	r2, [sp, #16]
 800c916:	2a00      	cmp	r2, #0
 800c918:	dd01      	ble.n	800c91e <_dtoa_r+0xa36>
 800c91a:	9b03      	ldr	r3, [sp, #12]
 800c91c:	3331      	adds	r3, #49	@ 0x31
 800c91e:	f88b 3000 	strb.w	r3, [fp]
 800c922:	e52e      	b.n	800c382 <_dtoa_r+0x49a>
 800c924:	4628      	mov	r0, r5
 800c926:	e7b9      	b.n	800c89c <_dtoa_r+0x9b4>
 800c928:	2201      	movs	r2, #1
 800c92a:	e7e2      	b.n	800c8f2 <_dtoa_r+0xa0a>
 800c92c:	9904      	ldr	r1, [sp, #16]
 800c92e:	2900      	cmp	r1, #0
 800c930:	db04      	blt.n	800c93c <_dtoa_r+0xa54>
 800c932:	9807      	ldr	r0, [sp, #28]
 800c934:	4301      	orrs	r1, r0
 800c936:	9806      	ldr	r0, [sp, #24]
 800c938:	4301      	orrs	r1, r0
 800c93a:	d120      	bne.n	800c97e <_dtoa_r+0xa96>
 800c93c:	2a00      	cmp	r2, #0
 800c93e:	ddee      	ble.n	800c91e <_dtoa_r+0xa36>
 800c940:	9902      	ldr	r1, [sp, #8]
 800c942:	9300      	str	r3, [sp, #0]
 800c944:	2201      	movs	r2, #1
 800c946:	4648      	mov	r0, r9
 800c948:	f000 faee 	bl	800cf28 <__lshift>
 800c94c:	4621      	mov	r1, r4
 800c94e:	9002      	str	r0, [sp, #8]
 800c950:	f000 fb56 	bl	800d000 <__mcmp>
 800c954:	2800      	cmp	r0, #0
 800c956:	9b00      	ldr	r3, [sp, #0]
 800c958:	dc02      	bgt.n	800c960 <_dtoa_r+0xa78>
 800c95a:	d1e0      	bne.n	800c91e <_dtoa_r+0xa36>
 800c95c:	07da      	lsls	r2, r3, #31
 800c95e:	d5de      	bpl.n	800c91e <_dtoa_r+0xa36>
 800c960:	2b39      	cmp	r3, #57	@ 0x39
 800c962:	d1da      	bne.n	800c91a <_dtoa_r+0xa32>
 800c964:	2339      	movs	r3, #57	@ 0x39
 800c966:	f88b 3000 	strb.w	r3, [fp]
 800c96a:	4633      	mov	r3, r6
 800c96c:	461e      	mov	r6, r3
 800c96e:	3b01      	subs	r3, #1
 800c970:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c974:	2a39      	cmp	r2, #57	@ 0x39
 800c976:	d04e      	beq.n	800ca16 <_dtoa_r+0xb2e>
 800c978:	3201      	adds	r2, #1
 800c97a:	701a      	strb	r2, [r3, #0]
 800c97c:	e501      	b.n	800c382 <_dtoa_r+0x49a>
 800c97e:	2a00      	cmp	r2, #0
 800c980:	dd03      	ble.n	800c98a <_dtoa_r+0xaa2>
 800c982:	2b39      	cmp	r3, #57	@ 0x39
 800c984:	d0ee      	beq.n	800c964 <_dtoa_r+0xa7c>
 800c986:	3301      	adds	r3, #1
 800c988:	e7c9      	b.n	800c91e <_dtoa_r+0xa36>
 800c98a:	9a00      	ldr	r2, [sp, #0]
 800c98c:	9908      	ldr	r1, [sp, #32]
 800c98e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c992:	428a      	cmp	r2, r1
 800c994:	d028      	beq.n	800c9e8 <_dtoa_r+0xb00>
 800c996:	9902      	ldr	r1, [sp, #8]
 800c998:	2300      	movs	r3, #0
 800c99a:	220a      	movs	r2, #10
 800c99c:	4648      	mov	r0, r9
 800c99e:	f000 f91f 	bl	800cbe0 <__multadd>
 800c9a2:	42af      	cmp	r7, r5
 800c9a4:	9002      	str	r0, [sp, #8]
 800c9a6:	f04f 0300 	mov.w	r3, #0
 800c9aa:	f04f 020a 	mov.w	r2, #10
 800c9ae:	4639      	mov	r1, r7
 800c9b0:	4648      	mov	r0, r9
 800c9b2:	d107      	bne.n	800c9c4 <_dtoa_r+0xadc>
 800c9b4:	f000 f914 	bl	800cbe0 <__multadd>
 800c9b8:	4607      	mov	r7, r0
 800c9ba:	4605      	mov	r5, r0
 800c9bc:	9b00      	ldr	r3, [sp, #0]
 800c9be:	3301      	adds	r3, #1
 800c9c0:	9300      	str	r3, [sp, #0]
 800c9c2:	e777      	b.n	800c8b4 <_dtoa_r+0x9cc>
 800c9c4:	f000 f90c 	bl	800cbe0 <__multadd>
 800c9c8:	4629      	mov	r1, r5
 800c9ca:	4607      	mov	r7, r0
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	220a      	movs	r2, #10
 800c9d0:	4648      	mov	r0, r9
 800c9d2:	f000 f905 	bl	800cbe0 <__multadd>
 800c9d6:	4605      	mov	r5, r0
 800c9d8:	e7f0      	b.n	800c9bc <_dtoa_r+0xad4>
 800c9da:	f1bb 0f00 	cmp.w	fp, #0
 800c9de:	bfcc      	ite	gt
 800c9e0:	465e      	movgt	r6, fp
 800c9e2:	2601      	movle	r6, #1
 800c9e4:	4456      	add	r6, sl
 800c9e6:	2700      	movs	r7, #0
 800c9e8:	9902      	ldr	r1, [sp, #8]
 800c9ea:	9300      	str	r3, [sp, #0]
 800c9ec:	2201      	movs	r2, #1
 800c9ee:	4648      	mov	r0, r9
 800c9f0:	f000 fa9a 	bl	800cf28 <__lshift>
 800c9f4:	4621      	mov	r1, r4
 800c9f6:	9002      	str	r0, [sp, #8]
 800c9f8:	f000 fb02 	bl	800d000 <__mcmp>
 800c9fc:	2800      	cmp	r0, #0
 800c9fe:	dcb4      	bgt.n	800c96a <_dtoa_r+0xa82>
 800ca00:	d102      	bne.n	800ca08 <_dtoa_r+0xb20>
 800ca02:	9b00      	ldr	r3, [sp, #0]
 800ca04:	07db      	lsls	r3, r3, #31
 800ca06:	d4b0      	bmi.n	800c96a <_dtoa_r+0xa82>
 800ca08:	4633      	mov	r3, r6
 800ca0a:	461e      	mov	r6, r3
 800ca0c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca10:	2a30      	cmp	r2, #48	@ 0x30
 800ca12:	d0fa      	beq.n	800ca0a <_dtoa_r+0xb22>
 800ca14:	e4b5      	b.n	800c382 <_dtoa_r+0x49a>
 800ca16:	459a      	cmp	sl, r3
 800ca18:	d1a8      	bne.n	800c96c <_dtoa_r+0xa84>
 800ca1a:	2331      	movs	r3, #49	@ 0x31
 800ca1c:	f108 0801 	add.w	r8, r8, #1
 800ca20:	f88a 3000 	strb.w	r3, [sl]
 800ca24:	e4ad      	b.n	800c382 <_dtoa_r+0x49a>
 800ca26:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ca28:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800ca84 <_dtoa_r+0xb9c>
 800ca2c:	b11b      	cbz	r3, 800ca36 <_dtoa_r+0xb4e>
 800ca2e:	f10a 0308 	add.w	r3, sl, #8
 800ca32:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ca34:	6013      	str	r3, [r2, #0]
 800ca36:	4650      	mov	r0, sl
 800ca38:	b017      	add	sp, #92	@ 0x5c
 800ca3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca3e:	9b07      	ldr	r3, [sp, #28]
 800ca40:	2b01      	cmp	r3, #1
 800ca42:	f77f ae2e 	ble.w	800c6a2 <_dtoa_r+0x7ba>
 800ca46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ca48:	9308      	str	r3, [sp, #32]
 800ca4a:	2001      	movs	r0, #1
 800ca4c:	e64d      	b.n	800c6ea <_dtoa_r+0x802>
 800ca4e:	f1bb 0f00 	cmp.w	fp, #0
 800ca52:	f77f aed9 	ble.w	800c808 <_dtoa_r+0x920>
 800ca56:	4656      	mov	r6, sl
 800ca58:	9802      	ldr	r0, [sp, #8]
 800ca5a:	4621      	mov	r1, r4
 800ca5c:	f7ff f9bb 	bl	800bdd6 <quorem>
 800ca60:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ca64:	f806 3b01 	strb.w	r3, [r6], #1
 800ca68:	eba6 020a 	sub.w	r2, r6, sl
 800ca6c:	4593      	cmp	fp, r2
 800ca6e:	ddb4      	ble.n	800c9da <_dtoa_r+0xaf2>
 800ca70:	9902      	ldr	r1, [sp, #8]
 800ca72:	2300      	movs	r3, #0
 800ca74:	220a      	movs	r2, #10
 800ca76:	4648      	mov	r0, r9
 800ca78:	f000 f8b2 	bl	800cbe0 <__multadd>
 800ca7c:	9002      	str	r0, [sp, #8]
 800ca7e:	e7eb      	b.n	800ca58 <_dtoa_r+0xb70>
 800ca80:	0800da88 	.word	0x0800da88
 800ca84:	0800da0c 	.word	0x0800da0c

0800ca88 <_free_r>:
 800ca88:	b538      	push	{r3, r4, r5, lr}
 800ca8a:	4605      	mov	r5, r0
 800ca8c:	2900      	cmp	r1, #0
 800ca8e:	d041      	beq.n	800cb14 <_free_r+0x8c>
 800ca90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca94:	1f0c      	subs	r4, r1, #4
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	bfb8      	it	lt
 800ca9a:	18e4      	addlt	r4, r4, r3
 800ca9c:	f7fe fa92 	bl	800afc4 <__malloc_lock>
 800caa0:	4a1d      	ldr	r2, [pc, #116]	@ (800cb18 <_free_r+0x90>)
 800caa2:	6813      	ldr	r3, [r2, #0]
 800caa4:	b933      	cbnz	r3, 800cab4 <_free_r+0x2c>
 800caa6:	6063      	str	r3, [r4, #4]
 800caa8:	6014      	str	r4, [r2, #0]
 800caaa:	4628      	mov	r0, r5
 800caac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cab0:	f7fe ba8e 	b.w	800afd0 <__malloc_unlock>
 800cab4:	42a3      	cmp	r3, r4
 800cab6:	d908      	bls.n	800caca <_free_r+0x42>
 800cab8:	6820      	ldr	r0, [r4, #0]
 800caba:	1821      	adds	r1, r4, r0
 800cabc:	428b      	cmp	r3, r1
 800cabe:	bf01      	itttt	eq
 800cac0:	6819      	ldreq	r1, [r3, #0]
 800cac2:	685b      	ldreq	r3, [r3, #4]
 800cac4:	1809      	addeq	r1, r1, r0
 800cac6:	6021      	streq	r1, [r4, #0]
 800cac8:	e7ed      	b.n	800caa6 <_free_r+0x1e>
 800caca:	461a      	mov	r2, r3
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	b10b      	cbz	r3, 800cad4 <_free_r+0x4c>
 800cad0:	42a3      	cmp	r3, r4
 800cad2:	d9fa      	bls.n	800caca <_free_r+0x42>
 800cad4:	6811      	ldr	r1, [r2, #0]
 800cad6:	1850      	adds	r0, r2, r1
 800cad8:	42a0      	cmp	r0, r4
 800cada:	d10b      	bne.n	800caf4 <_free_r+0x6c>
 800cadc:	6820      	ldr	r0, [r4, #0]
 800cade:	4401      	add	r1, r0
 800cae0:	1850      	adds	r0, r2, r1
 800cae2:	4283      	cmp	r3, r0
 800cae4:	6011      	str	r1, [r2, #0]
 800cae6:	d1e0      	bne.n	800caaa <_free_r+0x22>
 800cae8:	6818      	ldr	r0, [r3, #0]
 800caea:	685b      	ldr	r3, [r3, #4]
 800caec:	6053      	str	r3, [r2, #4]
 800caee:	4408      	add	r0, r1
 800caf0:	6010      	str	r0, [r2, #0]
 800caf2:	e7da      	b.n	800caaa <_free_r+0x22>
 800caf4:	d902      	bls.n	800cafc <_free_r+0x74>
 800caf6:	230c      	movs	r3, #12
 800caf8:	602b      	str	r3, [r5, #0]
 800cafa:	e7d6      	b.n	800caaa <_free_r+0x22>
 800cafc:	6820      	ldr	r0, [r4, #0]
 800cafe:	1821      	adds	r1, r4, r0
 800cb00:	428b      	cmp	r3, r1
 800cb02:	bf04      	itt	eq
 800cb04:	6819      	ldreq	r1, [r3, #0]
 800cb06:	685b      	ldreq	r3, [r3, #4]
 800cb08:	6063      	str	r3, [r4, #4]
 800cb0a:	bf04      	itt	eq
 800cb0c:	1809      	addeq	r1, r1, r0
 800cb0e:	6021      	streq	r1, [r4, #0]
 800cb10:	6054      	str	r4, [r2, #4]
 800cb12:	e7ca      	b.n	800caaa <_free_r+0x22>
 800cb14:	bd38      	pop	{r3, r4, r5, pc}
 800cb16:	bf00      	nop
 800cb18:	20026318 	.word	0x20026318

0800cb1c <_Balloc>:
 800cb1c:	b570      	push	{r4, r5, r6, lr}
 800cb1e:	69c6      	ldr	r6, [r0, #28]
 800cb20:	4604      	mov	r4, r0
 800cb22:	460d      	mov	r5, r1
 800cb24:	b976      	cbnz	r6, 800cb44 <_Balloc+0x28>
 800cb26:	2010      	movs	r0, #16
 800cb28:	f7fe f9a2 	bl	800ae70 <malloc>
 800cb2c:	4602      	mov	r2, r0
 800cb2e:	61e0      	str	r0, [r4, #28]
 800cb30:	b920      	cbnz	r0, 800cb3c <_Balloc+0x20>
 800cb32:	4b18      	ldr	r3, [pc, #96]	@ (800cb94 <_Balloc+0x78>)
 800cb34:	4818      	ldr	r0, [pc, #96]	@ (800cb98 <_Balloc+0x7c>)
 800cb36:	216b      	movs	r1, #107	@ 0x6b
 800cb38:	f000 fddc 	bl	800d6f4 <__assert_func>
 800cb3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb40:	6006      	str	r6, [r0, #0]
 800cb42:	60c6      	str	r6, [r0, #12]
 800cb44:	69e6      	ldr	r6, [r4, #28]
 800cb46:	68f3      	ldr	r3, [r6, #12]
 800cb48:	b183      	cbz	r3, 800cb6c <_Balloc+0x50>
 800cb4a:	69e3      	ldr	r3, [r4, #28]
 800cb4c:	68db      	ldr	r3, [r3, #12]
 800cb4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb52:	b9b8      	cbnz	r0, 800cb84 <_Balloc+0x68>
 800cb54:	2101      	movs	r1, #1
 800cb56:	fa01 f605 	lsl.w	r6, r1, r5
 800cb5a:	1d72      	adds	r2, r6, #5
 800cb5c:	0092      	lsls	r2, r2, #2
 800cb5e:	4620      	mov	r0, r4
 800cb60:	f000 fde6 	bl	800d730 <_calloc_r>
 800cb64:	b160      	cbz	r0, 800cb80 <_Balloc+0x64>
 800cb66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cb6a:	e00e      	b.n	800cb8a <_Balloc+0x6e>
 800cb6c:	2221      	movs	r2, #33	@ 0x21
 800cb6e:	2104      	movs	r1, #4
 800cb70:	4620      	mov	r0, r4
 800cb72:	f000 fddd 	bl	800d730 <_calloc_r>
 800cb76:	69e3      	ldr	r3, [r4, #28]
 800cb78:	60f0      	str	r0, [r6, #12]
 800cb7a:	68db      	ldr	r3, [r3, #12]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d1e4      	bne.n	800cb4a <_Balloc+0x2e>
 800cb80:	2000      	movs	r0, #0
 800cb82:	bd70      	pop	{r4, r5, r6, pc}
 800cb84:	6802      	ldr	r2, [r0, #0]
 800cb86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb90:	e7f7      	b.n	800cb82 <_Balloc+0x66>
 800cb92:	bf00      	nop
 800cb94:	0800da19 	.word	0x0800da19
 800cb98:	0800da99 	.word	0x0800da99

0800cb9c <_Bfree>:
 800cb9c:	b570      	push	{r4, r5, r6, lr}
 800cb9e:	69c6      	ldr	r6, [r0, #28]
 800cba0:	4605      	mov	r5, r0
 800cba2:	460c      	mov	r4, r1
 800cba4:	b976      	cbnz	r6, 800cbc4 <_Bfree+0x28>
 800cba6:	2010      	movs	r0, #16
 800cba8:	f7fe f962 	bl	800ae70 <malloc>
 800cbac:	4602      	mov	r2, r0
 800cbae:	61e8      	str	r0, [r5, #28]
 800cbb0:	b920      	cbnz	r0, 800cbbc <_Bfree+0x20>
 800cbb2:	4b09      	ldr	r3, [pc, #36]	@ (800cbd8 <_Bfree+0x3c>)
 800cbb4:	4809      	ldr	r0, [pc, #36]	@ (800cbdc <_Bfree+0x40>)
 800cbb6:	218f      	movs	r1, #143	@ 0x8f
 800cbb8:	f000 fd9c 	bl	800d6f4 <__assert_func>
 800cbbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cbc0:	6006      	str	r6, [r0, #0]
 800cbc2:	60c6      	str	r6, [r0, #12]
 800cbc4:	b13c      	cbz	r4, 800cbd6 <_Bfree+0x3a>
 800cbc6:	69eb      	ldr	r3, [r5, #28]
 800cbc8:	6862      	ldr	r2, [r4, #4]
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cbd0:	6021      	str	r1, [r4, #0]
 800cbd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cbd6:	bd70      	pop	{r4, r5, r6, pc}
 800cbd8:	0800da19 	.word	0x0800da19
 800cbdc:	0800da99 	.word	0x0800da99

0800cbe0 <__multadd>:
 800cbe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbe4:	690d      	ldr	r5, [r1, #16]
 800cbe6:	4607      	mov	r7, r0
 800cbe8:	460c      	mov	r4, r1
 800cbea:	461e      	mov	r6, r3
 800cbec:	f101 0c14 	add.w	ip, r1, #20
 800cbf0:	2000      	movs	r0, #0
 800cbf2:	f8dc 3000 	ldr.w	r3, [ip]
 800cbf6:	b299      	uxth	r1, r3
 800cbf8:	fb02 6101 	mla	r1, r2, r1, r6
 800cbfc:	0c1e      	lsrs	r6, r3, #16
 800cbfe:	0c0b      	lsrs	r3, r1, #16
 800cc00:	fb02 3306 	mla	r3, r2, r6, r3
 800cc04:	b289      	uxth	r1, r1
 800cc06:	3001      	adds	r0, #1
 800cc08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cc0c:	4285      	cmp	r5, r0
 800cc0e:	f84c 1b04 	str.w	r1, [ip], #4
 800cc12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cc16:	dcec      	bgt.n	800cbf2 <__multadd+0x12>
 800cc18:	b30e      	cbz	r6, 800cc5e <__multadd+0x7e>
 800cc1a:	68a3      	ldr	r3, [r4, #8]
 800cc1c:	42ab      	cmp	r3, r5
 800cc1e:	dc19      	bgt.n	800cc54 <__multadd+0x74>
 800cc20:	6861      	ldr	r1, [r4, #4]
 800cc22:	4638      	mov	r0, r7
 800cc24:	3101      	adds	r1, #1
 800cc26:	f7ff ff79 	bl	800cb1c <_Balloc>
 800cc2a:	4680      	mov	r8, r0
 800cc2c:	b928      	cbnz	r0, 800cc3a <__multadd+0x5a>
 800cc2e:	4602      	mov	r2, r0
 800cc30:	4b0c      	ldr	r3, [pc, #48]	@ (800cc64 <__multadd+0x84>)
 800cc32:	480d      	ldr	r0, [pc, #52]	@ (800cc68 <__multadd+0x88>)
 800cc34:	21ba      	movs	r1, #186	@ 0xba
 800cc36:	f000 fd5d 	bl	800d6f4 <__assert_func>
 800cc3a:	6922      	ldr	r2, [r4, #16]
 800cc3c:	3202      	adds	r2, #2
 800cc3e:	f104 010c 	add.w	r1, r4, #12
 800cc42:	0092      	lsls	r2, r2, #2
 800cc44:	300c      	adds	r0, #12
 800cc46:	f7ff f8b8 	bl	800bdba <memcpy>
 800cc4a:	4621      	mov	r1, r4
 800cc4c:	4638      	mov	r0, r7
 800cc4e:	f7ff ffa5 	bl	800cb9c <_Bfree>
 800cc52:	4644      	mov	r4, r8
 800cc54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc58:	3501      	adds	r5, #1
 800cc5a:	615e      	str	r6, [r3, #20]
 800cc5c:	6125      	str	r5, [r4, #16]
 800cc5e:	4620      	mov	r0, r4
 800cc60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc64:	0800da88 	.word	0x0800da88
 800cc68:	0800da99 	.word	0x0800da99

0800cc6c <__hi0bits>:
 800cc6c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cc70:	4603      	mov	r3, r0
 800cc72:	bf36      	itet	cc
 800cc74:	0403      	lslcc	r3, r0, #16
 800cc76:	2000      	movcs	r0, #0
 800cc78:	2010      	movcc	r0, #16
 800cc7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cc7e:	bf3c      	itt	cc
 800cc80:	021b      	lslcc	r3, r3, #8
 800cc82:	3008      	addcc	r0, #8
 800cc84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cc88:	bf3c      	itt	cc
 800cc8a:	011b      	lslcc	r3, r3, #4
 800cc8c:	3004      	addcc	r0, #4
 800cc8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc92:	bf3c      	itt	cc
 800cc94:	009b      	lslcc	r3, r3, #2
 800cc96:	3002      	addcc	r0, #2
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	db05      	blt.n	800cca8 <__hi0bits+0x3c>
 800cc9c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cca0:	f100 0001 	add.w	r0, r0, #1
 800cca4:	bf08      	it	eq
 800cca6:	2020      	moveq	r0, #32
 800cca8:	4770      	bx	lr

0800ccaa <__lo0bits>:
 800ccaa:	6803      	ldr	r3, [r0, #0]
 800ccac:	4602      	mov	r2, r0
 800ccae:	f013 0007 	ands.w	r0, r3, #7
 800ccb2:	d00b      	beq.n	800cccc <__lo0bits+0x22>
 800ccb4:	07d9      	lsls	r1, r3, #31
 800ccb6:	d421      	bmi.n	800ccfc <__lo0bits+0x52>
 800ccb8:	0798      	lsls	r0, r3, #30
 800ccba:	bf49      	itett	mi
 800ccbc:	085b      	lsrmi	r3, r3, #1
 800ccbe:	089b      	lsrpl	r3, r3, #2
 800ccc0:	2001      	movmi	r0, #1
 800ccc2:	6013      	strmi	r3, [r2, #0]
 800ccc4:	bf5c      	itt	pl
 800ccc6:	6013      	strpl	r3, [r2, #0]
 800ccc8:	2002      	movpl	r0, #2
 800ccca:	4770      	bx	lr
 800cccc:	b299      	uxth	r1, r3
 800ccce:	b909      	cbnz	r1, 800ccd4 <__lo0bits+0x2a>
 800ccd0:	0c1b      	lsrs	r3, r3, #16
 800ccd2:	2010      	movs	r0, #16
 800ccd4:	b2d9      	uxtb	r1, r3
 800ccd6:	b909      	cbnz	r1, 800ccdc <__lo0bits+0x32>
 800ccd8:	3008      	adds	r0, #8
 800ccda:	0a1b      	lsrs	r3, r3, #8
 800ccdc:	0719      	lsls	r1, r3, #28
 800ccde:	bf04      	itt	eq
 800cce0:	091b      	lsreq	r3, r3, #4
 800cce2:	3004      	addeq	r0, #4
 800cce4:	0799      	lsls	r1, r3, #30
 800cce6:	bf04      	itt	eq
 800cce8:	089b      	lsreq	r3, r3, #2
 800ccea:	3002      	addeq	r0, #2
 800ccec:	07d9      	lsls	r1, r3, #31
 800ccee:	d403      	bmi.n	800ccf8 <__lo0bits+0x4e>
 800ccf0:	085b      	lsrs	r3, r3, #1
 800ccf2:	f100 0001 	add.w	r0, r0, #1
 800ccf6:	d003      	beq.n	800cd00 <__lo0bits+0x56>
 800ccf8:	6013      	str	r3, [r2, #0]
 800ccfa:	4770      	bx	lr
 800ccfc:	2000      	movs	r0, #0
 800ccfe:	4770      	bx	lr
 800cd00:	2020      	movs	r0, #32
 800cd02:	4770      	bx	lr

0800cd04 <__i2b>:
 800cd04:	b510      	push	{r4, lr}
 800cd06:	460c      	mov	r4, r1
 800cd08:	2101      	movs	r1, #1
 800cd0a:	f7ff ff07 	bl	800cb1c <_Balloc>
 800cd0e:	4602      	mov	r2, r0
 800cd10:	b928      	cbnz	r0, 800cd1e <__i2b+0x1a>
 800cd12:	4b05      	ldr	r3, [pc, #20]	@ (800cd28 <__i2b+0x24>)
 800cd14:	4805      	ldr	r0, [pc, #20]	@ (800cd2c <__i2b+0x28>)
 800cd16:	f240 1145 	movw	r1, #325	@ 0x145
 800cd1a:	f000 fceb 	bl	800d6f4 <__assert_func>
 800cd1e:	2301      	movs	r3, #1
 800cd20:	6144      	str	r4, [r0, #20]
 800cd22:	6103      	str	r3, [r0, #16]
 800cd24:	bd10      	pop	{r4, pc}
 800cd26:	bf00      	nop
 800cd28:	0800da88 	.word	0x0800da88
 800cd2c:	0800da99 	.word	0x0800da99

0800cd30 <__multiply>:
 800cd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd34:	4617      	mov	r7, r2
 800cd36:	690a      	ldr	r2, [r1, #16]
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	bfa8      	it	ge
 800cd3e:	463b      	movge	r3, r7
 800cd40:	4689      	mov	r9, r1
 800cd42:	bfa4      	itt	ge
 800cd44:	460f      	movge	r7, r1
 800cd46:	4699      	movge	r9, r3
 800cd48:	693d      	ldr	r5, [r7, #16]
 800cd4a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	6879      	ldr	r1, [r7, #4]
 800cd52:	eb05 060a 	add.w	r6, r5, sl
 800cd56:	42b3      	cmp	r3, r6
 800cd58:	b085      	sub	sp, #20
 800cd5a:	bfb8      	it	lt
 800cd5c:	3101      	addlt	r1, #1
 800cd5e:	f7ff fedd 	bl	800cb1c <_Balloc>
 800cd62:	b930      	cbnz	r0, 800cd72 <__multiply+0x42>
 800cd64:	4602      	mov	r2, r0
 800cd66:	4b41      	ldr	r3, [pc, #260]	@ (800ce6c <__multiply+0x13c>)
 800cd68:	4841      	ldr	r0, [pc, #260]	@ (800ce70 <__multiply+0x140>)
 800cd6a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cd6e:	f000 fcc1 	bl	800d6f4 <__assert_func>
 800cd72:	f100 0414 	add.w	r4, r0, #20
 800cd76:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800cd7a:	4623      	mov	r3, r4
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	4573      	cmp	r3, lr
 800cd80:	d320      	bcc.n	800cdc4 <__multiply+0x94>
 800cd82:	f107 0814 	add.w	r8, r7, #20
 800cd86:	f109 0114 	add.w	r1, r9, #20
 800cd8a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800cd8e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800cd92:	9302      	str	r3, [sp, #8]
 800cd94:	1beb      	subs	r3, r5, r7
 800cd96:	3b15      	subs	r3, #21
 800cd98:	f023 0303 	bic.w	r3, r3, #3
 800cd9c:	3304      	adds	r3, #4
 800cd9e:	3715      	adds	r7, #21
 800cda0:	42bd      	cmp	r5, r7
 800cda2:	bf38      	it	cc
 800cda4:	2304      	movcc	r3, #4
 800cda6:	9301      	str	r3, [sp, #4]
 800cda8:	9b02      	ldr	r3, [sp, #8]
 800cdaa:	9103      	str	r1, [sp, #12]
 800cdac:	428b      	cmp	r3, r1
 800cdae:	d80c      	bhi.n	800cdca <__multiply+0x9a>
 800cdb0:	2e00      	cmp	r6, #0
 800cdb2:	dd03      	ble.n	800cdbc <__multiply+0x8c>
 800cdb4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d055      	beq.n	800ce68 <__multiply+0x138>
 800cdbc:	6106      	str	r6, [r0, #16]
 800cdbe:	b005      	add	sp, #20
 800cdc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdc4:	f843 2b04 	str.w	r2, [r3], #4
 800cdc8:	e7d9      	b.n	800cd7e <__multiply+0x4e>
 800cdca:	f8b1 a000 	ldrh.w	sl, [r1]
 800cdce:	f1ba 0f00 	cmp.w	sl, #0
 800cdd2:	d01f      	beq.n	800ce14 <__multiply+0xe4>
 800cdd4:	46c4      	mov	ip, r8
 800cdd6:	46a1      	mov	r9, r4
 800cdd8:	2700      	movs	r7, #0
 800cdda:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cdde:	f8d9 3000 	ldr.w	r3, [r9]
 800cde2:	fa1f fb82 	uxth.w	fp, r2
 800cde6:	b29b      	uxth	r3, r3
 800cde8:	fb0a 330b 	mla	r3, sl, fp, r3
 800cdec:	443b      	add	r3, r7
 800cdee:	f8d9 7000 	ldr.w	r7, [r9]
 800cdf2:	0c12      	lsrs	r2, r2, #16
 800cdf4:	0c3f      	lsrs	r7, r7, #16
 800cdf6:	fb0a 7202 	mla	r2, sl, r2, r7
 800cdfa:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800cdfe:	b29b      	uxth	r3, r3
 800ce00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce04:	4565      	cmp	r5, ip
 800ce06:	f849 3b04 	str.w	r3, [r9], #4
 800ce0a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ce0e:	d8e4      	bhi.n	800cdda <__multiply+0xaa>
 800ce10:	9b01      	ldr	r3, [sp, #4]
 800ce12:	50e7      	str	r7, [r4, r3]
 800ce14:	9b03      	ldr	r3, [sp, #12]
 800ce16:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ce1a:	3104      	adds	r1, #4
 800ce1c:	f1b9 0f00 	cmp.w	r9, #0
 800ce20:	d020      	beq.n	800ce64 <__multiply+0x134>
 800ce22:	6823      	ldr	r3, [r4, #0]
 800ce24:	4647      	mov	r7, r8
 800ce26:	46a4      	mov	ip, r4
 800ce28:	f04f 0a00 	mov.w	sl, #0
 800ce2c:	f8b7 b000 	ldrh.w	fp, [r7]
 800ce30:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ce34:	fb09 220b 	mla	r2, r9, fp, r2
 800ce38:	4452      	add	r2, sl
 800ce3a:	b29b      	uxth	r3, r3
 800ce3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce40:	f84c 3b04 	str.w	r3, [ip], #4
 800ce44:	f857 3b04 	ldr.w	r3, [r7], #4
 800ce48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ce4c:	f8bc 3000 	ldrh.w	r3, [ip]
 800ce50:	fb09 330a 	mla	r3, r9, sl, r3
 800ce54:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ce58:	42bd      	cmp	r5, r7
 800ce5a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ce5e:	d8e5      	bhi.n	800ce2c <__multiply+0xfc>
 800ce60:	9a01      	ldr	r2, [sp, #4]
 800ce62:	50a3      	str	r3, [r4, r2]
 800ce64:	3404      	adds	r4, #4
 800ce66:	e79f      	b.n	800cda8 <__multiply+0x78>
 800ce68:	3e01      	subs	r6, #1
 800ce6a:	e7a1      	b.n	800cdb0 <__multiply+0x80>
 800ce6c:	0800da88 	.word	0x0800da88
 800ce70:	0800da99 	.word	0x0800da99

0800ce74 <__pow5mult>:
 800ce74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce78:	4615      	mov	r5, r2
 800ce7a:	f012 0203 	ands.w	r2, r2, #3
 800ce7e:	4607      	mov	r7, r0
 800ce80:	460e      	mov	r6, r1
 800ce82:	d007      	beq.n	800ce94 <__pow5mult+0x20>
 800ce84:	4c25      	ldr	r4, [pc, #148]	@ (800cf1c <__pow5mult+0xa8>)
 800ce86:	3a01      	subs	r2, #1
 800ce88:	2300      	movs	r3, #0
 800ce8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ce8e:	f7ff fea7 	bl	800cbe0 <__multadd>
 800ce92:	4606      	mov	r6, r0
 800ce94:	10ad      	asrs	r5, r5, #2
 800ce96:	d03d      	beq.n	800cf14 <__pow5mult+0xa0>
 800ce98:	69fc      	ldr	r4, [r7, #28]
 800ce9a:	b97c      	cbnz	r4, 800cebc <__pow5mult+0x48>
 800ce9c:	2010      	movs	r0, #16
 800ce9e:	f7fd ffe7 	bl	800ae70 <malloc>
 800cea2:	4602      	mov	r2, r0
 800cea4:	61f8      	str	r0, [r7, #28]
 800cea6:	b928      	cbnz	r0, 800ceb4 <__pow5mult+0x40>
 800cea8:	4b1d      	ldr	r3, [pc, #116]	@ (800cf20 <__pow5mult+0xac>)
 800ceaa:	481e      	ldr	r0, [pc, #120]	@ (800cf24 <__pow5mult+0xb0>)
 800ceac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ceb0:	f000 fc20 	bl	800d6f4 <__assert_func>
 800ceb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ceb8:	6004      	str	r4, [r0, #0]
 800ceba:	60c4      	str	r4, [r0, #12]
 800cebc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cec0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cec4:	b94c      	cbnz	r4, 800ceda <__pow5mult+0x66>
 800cec6:	f240 2171 	movw	r1, #625	@ 0x271
 800ceca:	4638      	mov	r0, r7
 800cecc:	f7ff ff1a 	bl	800cd04 <__i2b>
 800ced0:	2300      	movs	r3, #0
 800ced2:	f8c8 0008 	str.w	r0, [r8, #8]
 800ced6:	4604      	mov	r4, r0
 800ced8:	6003      	str	r3, [r0, #0]
 800ceda:	f04f 0900 	mov.w	r9, #0
 800cede:	07eb      	lsls	r3, r5, #31
 800cee0:	d50a      	bpl.n	800cef8 <__pow5mult+0x84>
 800cee2:	4631      	mov	r1, r6
 800cee4:	4622      	mov	r2, r4
 800cee6:	4638      	mov	r0, r7
 800cee8:	f7ff ff22 	bl	800cd30 <__multiply>
 800ceec:	4631      	mov	r1, r6
 800ceee:	4680      	mov	r8, r0
 800cef0:	4638      	mov	r0, r7
 800cef2:	f7ff fe53 	bl	800cb9c <_Bfree>
 800cef6:	4646      	mov	r6, r8
 800cef8:	106d      	asrs	r5, r5, #1
 800cefa:	d00b      	beq.n	800cf14 <__pow5mult+0xa0>
 800cefc:	6820      	ldr	r0, [r4, #0]
 800cefe:	b938      	cbnz	r0, 800cf10 <__pow5mult+0x9c>
 800cf00:	4622      	mov	r2, r4
 800cf02:	4621      	mov	r1, r4
 800cf04:	4638      	mov	r0, r7
 800cf06:	f7ff ff13 	bl	800cd30 <__multiply>
 800cf0a:	6020      	str	r0, [r4, #0]
 800cf0c:	f8c0 9000 	str.w	r9, [r0]
 800cf10:	4604      	mov	r4, r0
 800cf12:	e7e4      	b.n	800cede <__pow5mult+0x6a>
 800cf14:	4630      	mov	r0, r6
 800cf16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf1a:	bf00      	nop
 800cf1c:	0800db4c 	.word	0x0800db4c
 800cf20:	0800da19 	.word	0x0800da19
 800cf24:	0800da99 	.word	0x0800da99

0800cf28 <__lshift>:
 800cf28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf2c:	460c      	mov	r4, r1
 800cf2e:	6849      	ldr	r1, [r1, #4]
 800cf30:	6923      	ldr	r3, [r4, #16]
 800cf32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cf36:	68a3      	ldr	r3, [r4, #8]
 800cf38:	4607      	mov	r7, r0
 800cf3a:	4691      	mov	r9, r2
 800cf3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cf40:	f108 0601 	add.w	r6, r8, #1
 800cf44:	42b3      	cmp	r3, r6
 800cf46:	db0b      	blt.n	800cf60 <__lshift+0x38>
 800cf48:	4638      	mov	r0, r7
 800cf4a:	f7ff fde7 	bl	800cb1c <_Balloc>
 800cf4e:	4605      	mov	r5, r0
 800cf50:	b948      	cbnz	r0, 800cf66 <__lshift+0x3e>
 800cf52:	4602      	mov	r2, r0
 800cf54:	4b28      	ldr	r3, [pc, #160]	@ (800cff8 <__lshift+0xd0>)
 800cf56:	4829      	ldr	r0, [pc, #164]	@ (800cffc <__lshift+0xd4>)
 800cf58:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cf5c:	f000 fbca 	bl	800d6f4 <__assert_func>
 800cf60:	3101      	adds	r1, #1
 800cf62:	005b      	lsls	r3, r3, #1
 800cf64:	e7ee      	b.n	800cf44 <__lshift+0x1c>
 800cf66:	2300      	movs	r3, #0
 800cf68:	f100 0114 	add.w	r1, r0, #20
 800cf6c:	f100 0210 	add.w	r2, r0, #16
 800cf70:	4618      	mov	r0, r3
 800cf72:	4553      	cmp	r3, sl
 800cf74:	db33      	blt.n	800cfde <__lshift+0xb6>
 800cf76:	6920      	ldr	r0, [r4, #16]
 800cf78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf7c:	f104 0314 	add.w	r3, r4, #20
 800cf80:	f019 091f 	ands.w	r9, r9, #31
 800cf84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cf8c:	d02b      	beq.n	800cfe6 <__lshift+0xbe>
 800cf8e:	f1c9 0e20 	rsb	lr, r9, #32
 800cf92:	468a      	mov	sl, r1
 800cf94:	2200      	movs	r2, #0
 800cf96:	6818      	ldr	r0, [r3, #0]
 800cf98:	fa00 f009 	lsl.w	r0, r0, r9
 800cf9c:	4310      	orrs	r0, r2
 800cf9e:	f84a 0b04 	str.w	r0, [sl], #4
 800cfa2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfa6:	459c      	cmp	ip, r3
 800cfa8:	fa22 f20e 	lsr.w	r2, r2, lr
 800cfac:	d8f3      	bhi.n	800cf96 <__lshift+0x6e>
 800cfae:	ebac 0304 	sub.w	r3, ip, r4
 800cfb2:	3b15      	subs	r3, #21
 800cfb4:	f023 0303 	bic.w	r3, r3, #3
 800cfb8:	3304      	adds	r3, #4
 800cfba:	f104 0015 	add.w	r0, r4, #21
 800cfbe:	4560      	cmp	r0, ip
 800cfc0:	bf88      	it	hi
 800cfc2:	2304      	movhi	r3, #4
 800cfc4:	50ca      	str	r2, [r1, r3]
 800cfc6:	b10a      	cbz	r2, 800cfcc <__lshift+0xa4>
 800cfc8:	f108 0602 	add.w	r6, r8, #2
 800cfcc:	3e01      	subs	r6, #1
 800cfce:	4638      	mov	r0, r7
 800cfd0:	612e      	str	r6, [r5, #16]
 800cfd2:	4621      	mov	r1, r4
 800cfd4:	f7ff fde2 	bl	800cb9c <_Bfree>
 800cfd8:	4628      	mov	r0, r5
 800cfda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfde:	f842 0f04 	str.w	r0, [r2, #4]!
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	e7c5      	b.n	800cf72 <__lshift+0x4a>
 800cfe6:	3904      	subs	r1, #4
 800cfe8:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfec:	f841 2f04 	str.w	r2, [r1, #4]!
 800cff0:	459c      	cmp	ip, r3
 800cff2:	d8f9      	bhi.n	800cfe8 <__lshift+0xc0>
 800cff4:	e7ea      	b.n	800cfcc <__lshift+0xa4>
 800cff6:	bf00      	nop
 800cff8:	0800da88 	.word	0x0800da88
 800cffc:	0800da99 	.word	0x0800da99

0800d000 <__mcmp>:
 800d000:	690a      	ldr	r2, [r1, #16]
 800d002:	4603      	mov	r3, r0
 800d004:	6900      	ldr	r0, [r0, #16]
 800d006:	1a80      	subs	r0, r0, r2
 800d008:	b530      	push	{r4, r5, lr}
 800d00a:	d10e      	bne.n	800d02a <__mcmp+0x2a>
 800d00c:	3314      	adds	r3, #20
 800d00e:	3114      	adds	r1, #20
 800d010:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d014:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d018:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d01c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d020:	4295      	cmp	r5, r2
 800d022:	d003      	beq.n	800d02c <__mcmp+0x2c>
 800d024:	d205      	bcs.n	800d032 <__mcmp+0x32>
 800d026:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d02a:	bd30      	pop	{r4, r5, pc}
 800d02c:	42a3      	cmp	r3, r4
 800d02e:	d3f3      	bcc.n	800d018 <__mcmp+0x18>
 800d030:	e7fb      	b.n	800d02a <__mcmp+0x2a>
 800d032:	2001      	movs	r0, #1
 800d034:	e7f9      	b.n	800d02a <__mcmp+0x2a>
	...

0800d038 <__mdiff>:
 800d038:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d03c:	4689      	mov	r9, r1
 800d03e:	4606      	mov	r6, r0
 800d040:	4611      	mov	r1, r2
 800d042:	4648      	mov	r0, r9
 800d044:	4614      	mov	r4, r2
 800d046:	f7ff ffdb 	bl	800d000 <__mcmp>
 800d04a:	1e05      	subs	r5, r0, #0
 800d04c:	d112      	bne.n	800d074 <__mdiff+0x3c>
 800d04e:	4629      	mov	r1, r5
 800d050:	4630      	mov	r0, r6
 800d052:	f7ff fd63 	bl	800cb1c <_Balloc>
 800d056:	4602      	mov	r2, r0
 800d058:	b928      	cbnz	r0, 800d066 <__mdiff+0x2e>
 800d05a:	4b3f      	ldr	r3, [pc, #252]	@ (800d158 <__mdiff+0x120>)
 800d05c:	f240 2137 	movw	r1, #567	@ 0x237
 800d060:	483e      	ldr	r0, [pc, #248]	@ (800d15c <__mdiff+0x124>)
 800d062:	f000 fb47 	bl	800d6f4 <__assert_func>
 800d066:	2301      	movs	r3, #1
 800d068:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d06c:	4610      	mov	r0, r2
 800d06e:	b003      	add	sp, #12
 800d070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d074:	bfbc      	itt	lt
 800d076:	464b      	movlt	r3, r9
 800d078:	46a1      	movlt	r9, r4
 800d07a:	4630      	mov	r0, r6
 800d07c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d080:	bfba      	itte	lt
 800d082:	461c      	movlt	r4, r3
 800d084:	2501      	movlt	r5, #1
 800d086:	2500      	movge	r5, #0
 800d088:	f7ff fd48 	bl	800cb1c <_Balloc>
 800d08c:	4602      	mov	r2, r0
 800d08e:	b918      	cbnz	r0, 800d098 <__mdiff+0x60>
 800d090:	4b31      	ldr	r3, [pc, #196]	@ (800d158 <__mdiff+0x120>)
 800d092:	f240 2145 	movw	r1, #581	@ 0x245
 800d096:	e7e3      	b.n	800d060 <__mdiff+0x28>
 800d098:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d09c:	6926      	ldr	r6, [r4, #16]
 800d09e:	60c5      	str	r5, [r0, #12]
 800d0a0:	f109 0310 	add.w	r3, r9, #16
 800d0a4:	f109 0514 	add.w	r5, r9, #20
 800d0a8:	f104 0e14 	add.w	lr, r4, #20
 800d0ac:	f100 0b14 	add.w	fp, r0, #20
 800d0b0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d0b4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d0b8:	9301      	str	r3, [sp, #4]
 800d0ba:	46d9      	mov	r9, fp
 800d0bc:	f04f 0c00 	mov.w	ip, #0
 800d0c0:	9b01      	ldr	r3, [sp, #4]
 800d0c2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d0c6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d0ca:	9301      	str	r3, [sp, #4]
 800d0cc:	fa1f f38a 	uxth.w	r3, sl
 800d0d0:	4619      	mov	r1, r3
 800d0d2:	b283      	uxth	r3, r0
 800d0d4:	1acb      	subs	r3, r1, r3
 800d0d6:	0c00      	lsrs	r0, r0, #16
 800d0d8:	4463      	add	r3, ip
 800d0da:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d0de:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d0e2:	b29b      	uxth	r3, r3
 800d0e4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d0e8:	4576      	cmp	r6, lr
 800d0ea:	f849 3b04 	str.w	r3, [r9], #4
 800d0ee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d0f2:	d8e5      	bhi.n	800d0c0 <__mdiff+0x88>
 800d0f4:	1b33      	subs	r3, r6, r4
 800d0f6:	3b15      	subs	r3, #21
 800d0f8:	f023 0303 	bic.w	r3, r3, #3
 800d0fc:	3415      	adds	r4, #21
 800d0fe:	3304      	adds	r3, #4
 800d100:	42a6      	cmp	r6, r4
 800d102:	bf38      	it	cc
 800d104:	2304      	movcc	r3, #4
 800d106:	441d      	add	r5, r3
 800d108:	445b      	add	r3, fp
 800d10a:	461e      	mov	r6, r3
 800d10c:	462c      	mov	r4, r5
 800d10e:	4544      	cmp	r4, r8
 800d110:	d30e      	bcc.n	800d130 <__mdiff+0xf8>
 800d112:	f108 0103 	add.w	r1, r8, #3
 800d116:	1b49      	subs	r1, r1, r5
 800d118:	f021 0103 	bic.w	r1, r1, #3
 800d11c:	3d03      	subs	r5, #3
 800d11e:	45a8      	cmp	r8, r5
 800d120:	bf38      	it	cc
 800d122:	2100      	movcc	r1, #0
 800d124:	440b      	add	r3, r1
 800d126:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d12a:	b191      	cbz	r1, 800d152 <__mdiff+0x11a>
 800d12c:	6117      	str	r7, [r2, #16]
 800d12e:	e79d      	b.n	800d06c <__mdiff+0x34>
 800d130:	f854 1b04 	ldr.w	r1, [r4], #4
 800d134:	46e6      	mov	lr, ip
 800d136:	0c08      	lsrs	r0, r1, #16
 800d138:	fa1c fc81 	uxtah	ip, ip, r1
 800d13c:	4471      	add	r1, lr
 800d13e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d142:	b289      	uxth	r1, r1
 800d144:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d148:	f846 1b04 	str.w	r1, [r6], #4
 800d14c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d150:	e7dd      	b.n	800d10e <__mdiff+0xd6>
 800d152:	3f01      	subs	r7, #1
 800d154:	e7e7      	b.n	800d126 <__mdiff+0xee>
 800d156:	bf00      	nop
 800d158:	0800da88 	.word	0x0800da88
 800d15c:	0800da99 	.word	0x0800da99

0800d160 <__d2b>:
 800d160:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d164:	460f      	mov	r7, r1
 800d166:	2101      	movs	r1, #1
 800d168:	ec59 8b10 	vmov	r8, r9, d0
 800d16c:	4616      	mov	r6, r2
 800d16e:	f7ff fcd5 	bl	800cb1c <_Balloc>
 800d172:	4604      	mov	r4, r0
 800d174:	b930      	cbnz	r0, 800d184 <__d2b+0x24>
 800d176:	4602      	mov	r2, r0
 800d178:	4b23      	ldr	r3, [pc, #140]	@ (800d208 <__d2b+0xa8>)
 800d17a:	4824      	ldr	r0, [pc, #144]	@ (800d20c <__d2b+0xac>)
 800d17c:	f240 310f 	movw	r1, #783	@ 0x30f
 800d180:	f000 fab8 	bl	800d6f4 <__assert_func>
 800d184:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d188:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d18c:	b10d      	cbz	r5, 800d192 <__d2b+0x32>
 800d18e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d192:	9301      	str	r3, [sp, #4]
 800d194:	f1b8 0300 	subs.w	r3, r8, #0
 800d198:	d023      	beq.n	800d1e2 <__d2b+0x82>
 800d19a:	4668      	mov	r0, sp
 800d19c:	9300      	str	r3, [sp, #0]
 800d19e:	f7ff fd84 	bl	800ccaa <__lo0bits>
 800d1a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d1a6:	b1d0      	cbz	r0, 800d1de <__d2b+0x7e>
 800d1a8:	f1c0 0320 	rsb	r3, r0, #32
 800d1ac:	fa02 f303 	lsl.w	r3, r2, r3
 800d1b0:	430b      	orrs	r3, r1
 800d1b2:	40c2      	lsrs	r2, r0
 800d1b4:	6163      	str	r3, [r4, #20]
 800d1b6:	9201      	str	r2, [sp, #4]
 800d1b8:	9b01      	ldr	r3, [sp, #4]
 800d1ba:	61a3      	str	r3, [r4, #24]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	bf0c      	ite	eq
 800d1c0:	2201      	moveq	r2, #1
 800d1c2:	2202      	movne	r2, #2
 800d1c4:	6122      	str	r2, [r4, #16]
 800d1c6:	b1a5      	cbz	r5, 800d1f2 <__d2b+0x92>
 800d1c8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d1cc:	4405      	add	r5, r0
 800d1ce:	603d      	str	r5, [r7, #0]
 800d1d0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d1d4:	6030      	str	r0, [r6, #0]
 800d1d6:	4620      	mov	r0, r4
 800d1d8:	b003      	add	sp, #12
 800d1da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1de:	6161      	str	r1, [r4, #20]
 800d1e0:	e7ea      	b.n	800d1b8 <__d2b+0x58>
 800d1e2:	a801      	add	r0, sp, #4
 800d1e4:	f7ff fd61 	bl	800ccaa <__lo0bits>
 800d1e8:	9b01      	ldr	r3, [sp, #4]
 800d1ea:	6163      	str	r3, [r4, #20]
 800d1ec:	3020      	adds	r0, #32
 800d1ee:	2201      	movs	r2, #1
 800d1f0:	e7e8      	b.n	800d1c4 <__d2b+0x64>
 800d1f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d1f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d1fa:	6038      	str	r0, [r7, #0]
 800d1fc:	6918      	ldr	r0, [r3, #16]
 800d1fe:	f7ff fd35 	bl	800cc6c <__hi0bits>
 800d202:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d206:	e7e5      	b.n	800d1d4 <__d2b+0x74>
 800d208:	0800da88 	.word	0x0800da88
 800d20c:	0800da99 	.word	0x0800da99

0800d210 <__sfputc_r>:
 800d210:	6893      	ldr	r3, [r2, #8]
 800d212:	3b01      	subs	r3, #1
 800d214:	2b00      	cmp	r3, #0
 800d216:	b410      	push	{r4}
 800d218:	6093      	str	r3, [r2, #8]
 800d21a:	da08      	bge.n	800d22e <__sfputc_r+0x1e>
 800d21c:	6994      	ldr	r4, [r2, #24]
 800d21e:	42a3      	cmp	r3, r4
 800d220:	db01      	blt.n	800d226 <__sfputc_r+0x16>
 800d222:	290a      	cmp	r1, #10
 800d224:	d103      	bne.n	800d22e <__sfputc_r+0x1e>
 800d226:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d22a:	f7fe bca2 	b.w	800bb72 <__swbuf_r>
 800d22e:	6813      	ldr	r3, [r2, #0]
 800d230:	1c58      	adds	r0, r3, #1
 800d232:	6010      	str	r0, [r2, #0]
 800d234:	7019      	strb	r1, [r3, #0]
 800d236:	4608      	mov	r0, r1
 800d238:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d23c:	4770      	bx	lr

0800d23e <__sfputs_r>:
 800d23e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d240:	4606      	mov	r6, r0
 800d242:	460f      	mov	r7, r1
 800d244:	4614      	mov	r4, r2
 800d246:	18d5      	adds	r5, r2, r3
 800d248:	42ac      	cmp	r4, r5
 800d24a:	d101      	bne.n	800d250 <__sfputs_r+0x12>
 800d24c:	2000      	movs	r0, #0
 800d24e:	e007      	b.n	800d260 <__sfputs_r+0x22>
 800d250:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d254:	463a      	mov	r2, r7
 800d256:	4630      	mov	r0, r6
 800d258:	f7ff ffda 	bl	800d210 <__sfputc_r>
 800d25c:	1c43      	adds	r3, r0, #1
 800d25e:	d1f3      	bne.n	800d248 <__sfputs_r+0xa>
 800d260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d264 <_vfiprintf_r>:
 800d264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d268:	460d      	mov	r5, r1
 800d26a:	b09d      	sub	sp, #116	@ 0x74
 800d26c:	4614      	mov	r4, r2
 800d26e:	4698      	mov	r8, r3
 800d270:	4606      	mov	r6, r0
 800d272:	b118      	cbz	r0, 800d27c <_vfiprintf_r+0x18>
 800d274:	6a03      	ldr	r3, [r0, #32]
 800d276:	b90b      	cbnz	r3, 800d27c <_vfiprintf_r+0x18>
 800d278:	f7fe fb92 	bl	800b9a0 <__sinit>
 800d27c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d27e:	07d9      	lsls	r1, r3, #31
 800d280:	d405      	bmi.n	800d28e <_vfiprintf_r+0x2a>
 800d282:	89ab      	ldrh	r3, [r5, #12]
 800d284:	059a      	lsls	r2, r3, #22
 800d286:	d402      	bmi.n	800d28e <_vfiprintf_r+0x2a>
 800d288:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d28a:	f7fe fd94 	bl	800bdb6 <__retarget_lock_acquire_recursive>
 800d28e:	89ab      	ldrh	r3, [r5, #12]
 800d290:	071b      	lsls	r3, r3, #28
 800d292:	d501      	bpl.n	800d298 <_vfiprintf_r+0x34>
 800d294:	692b      	ldr	r3, [r5, #16]
 800d296:	b99b      	cbnz	r3, 800d2c0 <_vfiprintf_r+0x5c>
 800d298:	4629      	mov	r1, r5
 800d29a:	4630      	mov	r0, r6
 800d29c:	f7fe fca8 	bl	800bbf0 <__swsetup_r>
 800d2a0:	b170      	cbz	r0, 800d2c0 <_vfiprintf_r+0x5c>
 800d2a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d2a4:	07dc      	lsls	r4, r3, #31
 800d2a6:	d504      	bpl.n	800d2b2 <_vfiprintf_r+0x4e>
 800d2a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d2ac:	b01d      	add	sp, #116	@ 0x74
 800d2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2b2:	89ab      	ldrh	r3, [r5, #12]
 800d2b4:	0598      	lsls	r0, r3, #22
 800d2b6:	d4f7      	bmi.n	800d2a8 <_vfiprintf_r+0x44>
 800d2b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d2ba:	f7fe fd7d 	bl	800bdb8 <__retarget_lock_release_recursive>
 800d2be:	e7f3      	b.n	800d2a8 <_vfiprintf_r+0x44>
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2c4:	2320      	movs	r3, #32
 800d2c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d2ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2ce:	2330      	movs	r3, #48	@ 0x30
 800d2d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d480 <_vfiprintf_r+0x21c>
 800d2d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d2d8:	f04f 0901 	mov.w	r9, #1
 800d2dc:	4623      	mov	r3, r4
 800d2de:	469a      	mov	sl, r3
 800d2e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2e4:	b10a      	cbz	r2, 800d2ea <_vfiprintf_r+0x86>
 800d2e6:	2a25      	cmp	r2, #37	@ 0x25
 800d2e8:	d1f9      	bne.n	800d2de <_vfiprintf_r+0x7a>
 800d2ea:	ebba 0b04 	subs.w	fp, sl, r4
 800d2ee:	d00b      	beq.n	800d308 <_vfiprintf_r+0xa4>
 800d2f0:	465b      	mov	r3, fp
 800d2f2:	4622      	mov	r2, r4
 800d2f4:	4629      	mov	r1, r5
 800d2f6:	4630      	mov	r0, r6
 800d2f8:	f7ff ffa1 	bl	800d23e <__sfputs_r>
 800d2fc:	3001      	adds	r0, #1
 800d2fe:	f000 80a7 	beq.w	800d450 <_vfiprintf_r+0x1ec>
 800d302:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d304:	445a      	add	r2, fp
 800d306:	9209      	str	r2, [sp, #36]	@ 0x24
 800d308:	f89a 3000 	ldrb.w	r3, [sl]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	f000 809f 	beq.w	800d450 <_vfiprintf_r+0x1ec>
 800d312:	2300      	movs	r3, #0
 800d314:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d318:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d31c:	f10a 0a01 	add.w	sl, sl, #1
 800d320:	9304      	str	r3, [sp, #16]
 800d322:	9307      	str	r3, [sp, #28]
 800d324:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d328:	931a      	str	r3, [sp, #104]	@ 0x68
 800d32a:	4654      	mov	r4, sl
 800d32c:	2205      	movs	r2, #5
 800d32e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d332:	4853      	ldr	r0, [pc, #332]	@ (800d480 <_vfiprintf_r+0x21c>)
 800d334:	f7f2 ff5c 	bl	80001f0 <memchr>
 800d338:	9a04      	ldr	r2, [sp, #16]
 800d33a:	b9d8      	cbnz	r0, 800d374 <_vfiprintf_r+0x110>
 800d33c:	06d1      	lsls	r1, r2, #27
 800d33e:	bf44      	itt	mi
 800d340:	2320      	movmi	r3, #32
 800d342:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d346:	0713      	lsls	r3, r2, #28
 800d348:	bf44      	itt	mi
 800d34a:	232b      	movmi	r3, #43	@ 0x2b
 800d34c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d350:	f89a 3000 	ldrb.w	r3, [sl]
 800d354:	2b2a      	cmp	r3, #42	@ 0x2a
 800d356:	d015      	beq.n	800d384 <_vfiprintf_r+0x120>
 800d358:	9a07      	ldr	r2, [sp, #28]
 800d35a:	4654      	mov	r4, sl
 800d35c:	2000      	movs	r0, #0
 800d35e:	f04f 0c0a 	mov.w	ip, #10
 800d362:	4621      	mov	r1, r4
 800d364:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d368:	3b30      	subs	r3, #48	@ 0x30
 800d36a:	2b09      	cmp	r3, #9
 800d36c:	d94b      	bls.n	800d406 <_vfiprintf_r+0x1a2>
 800d36e:	b1b0      	cbz	r0, 800d39e <_vfiprintf_r+0x13a>
 800d370:	9207      	str	r2, [sp, #28]
 800d372:	e014      	b.n	800d39e <_vfiprintf_r+0x13a>
 800d374:	eba0 0308 	sub.w	r3, r0, r8
 800d378:	fa09 f303 	lsl.w	r3, r9, r3
 800d37c:	4313      	orrs	r3, r2
 800d37e:	9304      	str	r3, [sp, #16]
 800d380:	46a2      	mov	sl, r4
 800d382:	e7d2      	b.n	800d32a <_vfiprintf_r+0xc6>
 800d384:	9b03      	ldr	r3, [sp, #12]
 800d386:	1d19      	adds	r1, r3, #4
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	9103      	str	r1, [sp, #12]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	bfbb      	ittet	lt
 800d390:	425b      	neglt	r3, r3
 800d392:	f042 0202 	orrlt.w	r2, r2, #2
 800d396:	9307      	strge	r3, [sp, #28]
 800d398:	9307      	strlt	r3, [sp, #28]
 800d39a:	bfb8      	it	lt
 800d39c:	9204      	strlt	r2, [sp, #16]
 800d39e:	7823      	ldrb	r3, [r4, #0]
 800d3a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800d3a2:	d10a      	bne.n	800d3ba <_vfiprintf_r+0x156>
 800d3a4:	7863      	ldrb	r3, [r4, #1]
 800d3a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d3a8:	d132      	bne.n	800d410 <_vfiprintf_r+0x1ac>
 800d3aa:	9b03      	ldr	r3, [sp, #12]
 800d3ac:	1d1a      	adds	r2, r3, #4
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	9203      	str	r2, [sp, #12]
 800d3b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d3b6:	3402      	adds	r4, #2
 800d3b8:	9305      	str	r3, [sp, #20]
 800d3ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d490 <_vfiprintf_r+0x22c>
 800d3be:	7821      	ldrb	r1, [r4, #0]
 800d3c0:	2203      	movs	r2, #3
 800d3c2:	4650      	mov	r0, sl
 800d3c4:	f7f2 ff14 	bl	80001f0 <memchr>
 800d3c8:	b138      	cbz	r0, 800d3da <_vfiprintf_r+0x176>
 800d3ca:	9b04      	ldr	r3, [sp, #16]
 800d3cc:	eba0 000a 	sub.w	r0, r0, sl
 800d3d0:	2240      	movs	r2, #64	@ 0x40
 800d3d2:	4082      	lsls	r2, r0
 800d3d4:	4313      	orrs	r3, r2
 800d3d6:	3401      	adds	r4, #1
 800d3d8:	9304      	str	r3, [sp, #16]
 800d3da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3de:	4829      	ldr	r0, [pc, #164]	@ (800d484 <_vfiprintf_r+0x220>)
 800d3e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d3e4:	2206      	movs	r2, #6
 800d3e6:	f7f2 ff03 	bl	80001f0 <memchr>
 800d3ea:	2800      	cmp	r0, #0
 800d3ec:	d03f      	beq.n	800d46e <_vfiprintf_r+0x20a>
 800d3ee:	4b26      	ldr	r3, [pc, #152]	@ (800d488 <_vfiprintf_r+0x224>)
 800d3f0:	bb1b      	cbnz	r3, 800d43a <_vfiprintf_r+0x1d6>
 800d3f2:	9b03      	ldr	r3, [sp, #12]
 800d3f4:	3307      	adds	r3, #7
 800d3f6:	f023 0307 	bic.w	r3, r3, #7
 800d3fa:	3308      	adds	r3, #8
 800d3fc:	9303      	str	r3, [sp, #12]
 800d3fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d400:	443b      	add	r3, r7
 800d402:	9309      	str	r3, [sp, #36]	@ 0x24
 800d404:	e76a      	b.n	800d2dc <_vfiprintf_r+0x78>
 800d406:	fb0c 3202 	mla	r2, ip, r2, r3
 800d40a:	460c      	mov	r4, r1
 800d40c:	2001      	movs	r0, #1
 800d40e:	e7a8      	b.n	800d362 <_vfiprintf_r+0xfe>
 800d410:	2300      	movs	r3, #0
 800d412:	3401      	adds	r4, #1
 800d414:	9305      	str	r3, [sp, #20]
 800d416:	4619      	mov	r1, r3
 800d418:	f04f 0c0a 	mov.w	ip, #10
 800d41c:	4620      	mov	r0, r4
 800d41e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d422:	3a30      	subs	r2, #48	@ 0x30
 800d424:	2a09      	cmp	r2, #9
 800d426:	d903      	bls.n	800d430 <_vfiprintf_r+0x1cc>
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d0c6      	beq.n	800d3ba <_vfiprintf_r+0x156>
 800d42c:	9105      	str	r1, [sp, #20]
 800d42e:	e7c4      	b.n	800d3ba <_vfiprintf_r+0x156>
 800d430:	fb0c 2101 	mla	r1, ip, r1, r2
 800d434:	4604      	mov	r4, r0
 800d436:	2301      	movs	r3, #1
 800d438:	e7f0      	b.n	800d41c <_vfiprintf_r+0x1b8>
 800d43a:	ab03      	add	r3, sp, #12
 800d43c:	9300      	str	r3, [sp, #0]
 800d43e:	462a      	mov	r2, r5
 800d440:	4b12      	ldr	r3, [pc, #72]	@ (800d48c <_vfiprintf_r+0x228>)
 800d442:	a904      	add	r1, sp, #16
 800d444:	4630      	mov	r0, r6
 800d446:	f7fd fe69 	bl	800b11c <_printf_float>
 800d44a:	4607      	mov	r7, r0
 800d44c:	1c78      	adds	r0, r7, #1
 800d44e:	d1d6      	bne.n	800d3fe <_vfiprintf_r+0x19a>
 800d450:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d452:	07d9      	lsls	r1, r3, #31
 800d454:	d405      	bmi.n	800d462 <_vfiprintf_r+0x1fe>
 800d456:	89ab      	ldrh	r3, [r5, #12]
 800d458:	059a      	lsls	r2, r3, #22
 800d45a:	d402      	bmi.n	800d462 <_vfiprintf_r+0x1fe>
 800d45c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d45e:	f7fe fcab 	bl	800bdb8 <__retarget_lock_release_recursive>
 800d462:	89ab      	ldrh	r3, [r5, #12]
 800d464:	065b      	lsls	r3, r3, #25
 800d466:	f53f af1f 	bmi.w	800d2a8 <_vfiprintf_r+0x44>
 800d46a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d46c:	e71e      	b.n	800d2ac <_vfiprintf_r+0x48>
 800d46e:	ab03      	add	r3, sp, #12
 800d470:	9300      	str	r3, [sp, #0]
 800d472:	462a      	mov	r2, r5
 800d474:	4b05      	ldr	r3, [pc, #20]	@ (800d48c <_vfiprintf_r+0x228>)
 800d476:	a904      	add	r1, sp, #16
 800d478:	4630      	mov	r0, r6
 800d47a:	f7fe f8e7 	bl	800b64c <_printf_i>
 800d47e:	e7e4      	b.n	800d44a <_vfiprintf_r+0x1e6>
 800d480:	0800daf2 	.word	0x0800daf2
 800d484:	0800dafc 	.word	0x0800dafc
 800d488:	0800b11d 	.word	0x0800b11d
 800d48c:	0800d23f 	.word	0x0800d23f
 800d490:	0800daf8 	.word	0x0800daf8

0800d494 <__sflush_r>:
 800d494:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d49c:	0716      	lsls	r6, r2, #28
 800d49e:	4605      	mov	r5, r0
 800d4a0:	460c      	mov	r4, r1
 800d4a2:	d454      	bmi.n	800d54e <__sflush_r+0xba>
 800d4a4:	684b      	ldr	r3, [r1, #4]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	dc02      	bgt.n	800d4b0 <__sflush_r+0x1c>
 800d4aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	dd48      	ble.n	800d542 <__sflush_r+0xae>
 800d4b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d4b2:	2e00      	cmp	r6, #0
 800d4b4:	d045      	beq.n	800d542 <__sflush_r+0xae>
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d4bc:	682f      	ldr	r7, [r5, #0]
 800d4be:	6a21      	ldr	r1, [r4, #32]
 800d4c0:	602b      	str	r3, [r5, #0]
 800d4c2:	d030      	beq.n	800d526 <__sflush_r+0x92>
 800d4c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d4c6:	89a3      	ldrh	r3, [r4, #12]
 800d4c8:	0759      	lsls	r1, r3, #29
 800d4ca:	d505      	bpl.n	800d4d8 <__sflush_r+0x44>
 800d4cc:	6863      	ldr	r3, [r4, #4]
 800d4ce:	1ad2      	subs	r2, r2, r3
 800d4d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d4d2:	b10b      	cbz	r3, 800d4d8 <__sflush_r+0x44>
 800d4d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d4d6:	1ad2      	subs	r2, r2, r3
 800d4d8:	2300      	movs	r3, #0
 800d4da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d4dc:	6a21      	ldr	r1, [r4, #32]
 800d4de:	4628      	mov	r0, r5
 800d4e0:	47b0      	blx	r6
 800d4e2:	1c43      	adds	r3, r0, #1
 800d4e4:	89a3      	ldrh	r3, [r4, #12]
 800d4e6:	d106      	bne.n	800d4f6 <__sflush_r+0x62>
 800d4e8:	6829      	ldr	r1, [r5, #0]
 800d4ea:	291d      	cmp	r1, #29
 800d4ec:	d82b      	bhi.n	800d546 <__sflush_r+0xb2>
 800d4ee:	4a2a      	ldr	r2, [pc, #168]	@ (800d598 <__sflush_r+0x104>)
 800d4f0:	40ca      	lsrs	r2, r1
 800d4f2:	07d6      	lsls	r6, r2, #31
 800d4f4:	d527      	bpl.n	800d546 <__sflush_r+0xb2>
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	6062      	str	r2, [r4, #4]
 800d4fa:	04d9      	lsls	r1, r3, #19
 800d4fc:	6922      	ldr	r2, [r4, #16]
 800d4fe:	6022      	str	r2, [r4, #0]
 800d500:	d504      	bpl.n	800d50c <__sflush_r+0x78>
 800d502:	1c42      	adds	r2, r0, #1
 800d504:	d101      	bne.n	800d50a <__sflush_r+0x76>
 800d506:	682b      	ldr	r3, [r5, #0]
 800d508:	b903      	cbnz	r3, 800d50c <__sflush_r+0x78>
 800d50a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d50c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d50e:	602f      	str	r7, [r5, #0]
 800d510:	b1b9      	cbz	r1, 800d542 <__sflush_r+0xae>
 800d512:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d516:	4299      	cmp	r1, r3
 800d518:	d002      	beq.n	800d520 <__sflush_r+0x8c>
 800d51a:	4628      	mov	r0, r5
 800d51c:	f7ff fab4 	bl	800ca88 <_free_r>
 800d520:	2300      	movs	r3, #0
 800d522:	6363      	str	r3, [r4, #52]	@ 0x34
 800d524:	e00d      	b.n	800d542 <__sflush_r+0xae>
 800d526:	2301      	movs	r3, #1
 800d528:	4628      	mov	r0, r5
 800d52a:	47b0      	blx	r6
 800d52c:	4602      	mov	r2, r0
 800d52e:	1c50      	adds	r0, r2, #1
 800d530:	d1c9      	bne.n	800d4c6 <__sflush_r+0x32>
 800d532:	682b      	ldr	r3, [r5, #0]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d0c6      	beq.n	800d4c6 <__sflush_r+0x32>
 800d538:	2b1d      	cmp	r3, #29
 800d53a:	d001      	beq.n	800d540 <__sflush_r+0xac>
 800d53c:	2b16      	cmp	r3, #22
 800d53e:	d11e      	bne.n	800d57e <__sflush_r+0xea>
 800d540:	602f      	str	r7, [r5, #0]
 800d542:	2000      	movs	r0, #0
 800d544:	e022      	b.n	800d58c <__sflush_r+0xf8>
 800d546:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d54a:	b21b      	sxth	r3, r3
 800d54c:	e01b      	b.n	800d586 <__sflush_r+0xf2>
 800d54e:	690f      	ldr	r7, [r1, #16]
 800d550:	2f00      	cmp	r7, #0
 800d552:	d0f6      	beq.n	800d542 <__sflush_r+0xae>
 800d554:	0793      	lsls	r3, r2, #30
 800d556:	680e      	ldr	r6, [r1, #0]
 800d558:	bf08      	it	eq
 800d55a:	694b      	ldreq	r3, [r1, #20]
 800d55c:	600f      	str	r7, [r1, #0]
 800d55e:	bf18      	it	ne
 800d560:	2300      	movne	r3, #0
 800d562:	eba6 0807 	sub.w	r8, r6, r7
 800d566:	608b      	str	r3, [r1, #8]
 800d568:	f1b8 0f00 	cmp.w	r8, #0
 800d56c:	dde9      	ble.n	800d542 <__sflush_r+0xae>
 800d56e:	6a21      	ldr	r1, [r4, #32]
 800d570:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d572:	4643      	mov	r3, r8
 800d574:	463a      	mov	r2, r7
 800d576:	4628      	mov	r0, r5
 800d578:	47b0      	blx	r6
 800d57a:	2800      	cmp	r0, #0
 800d57c:	dc08      	bgt.n	800d590 <__sflush_r+0xfc>
 800d57e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d582:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d586:	81a3      	strh	r3, [r4, #12]
 800d588:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d590:	4407      	add	r7, r0
 800d592:	eba8 0800 	sub.w	r8, r8, r0
 800d596:	e7e7      	b.n	800d568 <__sflush_r+0xd4>
 800d598:	20400001 	.word	0x20400001

0800d59c <_fflush_r>:
 800d59c:	b538      	push	{r3, r4, r5, lr}
 800d59e:	690b      	ldr	r3, [r1, #16]
 800d5a0:	4605      	mov	r5, r0
 800d5a2:	460c      	mov	r4, r1
 800d5a4:	b913      	cbnz	r3, 800d5ac <_fflush_r+0x10>
 800d5a6:	2500      	movs	r5, #0
 800d5a8:	4628      	mov	r0, r5
 800d5aa:	bd38      	pop	{r3, r4, r5, pc}
 800d5ac:	b118      	cbz	r0, 800d5b6 <_fflush_r+0x1a>
 800d5ae:	6a03      	ldr	r3, [r0, #32]
 800d5b0:	b90b      	cbnz	r3, 800d5b6 <_fflush_r+0x1a>
 800d5b2:	f7fe f9f5 	bl	800b9a0 <__sinit>
 800d5b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d0f3      	beq.n	800d5a6 <_fflush_r+0xa>
 800d5be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d5c0:	07d0      	lsls	r0, r2, #31
 800d5c2:	d404      	bmi.n	800d5ce <_fflush_r+0x32>
 800d5c4:	0599      	lsls	r1, r3, #22
 800d5c6:	d402      	bmi.n	800d5ce <_fflush_r+0x32>
 800d5c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d5ca:	f7fe fbf4 	bl	800bdb6 <__retarget_lock_acquire_recursive>
 800d5ce:	4628      	mov	r0, r5
 800d5d0:	4621      	mov	r1, r4
 800d5d2:	f7ff ff5f 	bl	800d494 <__sflush_r>
 800d5d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d5d8:	07da      	lsls	r2, r3, #31
 800d5da:	4605      	mov	r5, r0
 800d5dc:	d4e4      	bmi.n	800d5a8 <_fflush_r+0xc>
 800d5de:	89a3      	ldrh	r3, [r4, #12]
 800d5e0:	059b      	lsls	r3, r3, #22
 800d5e2:	d4e1      	bmi.n	800d5a8 <_fflush_r+0xc>
 800d5e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d5e6:	f7fe fbe7 	bl	800bdb8 <__retarget_lock_release_recursive>
 800d5ea:	e7dd      	b.n	800d5a8 <_fflush_r+0xc>

0800d5ec <__swhatbuf_r>:
 800d5ec:	b570      	push	{r4, r5, r6, lr}
 800d5ee:	460c      	mov	r4, r1
 800d5f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5f4:	2900      	cmp	r1, #0
 800d5f6:	b096      	sub	sp, #88	@ 0x58
 800d5f8:	4615      	mov	r5, r2
 800d5fa:	461e      	mov	r6, r3
 800d5fc:	da0d      	bge.n	800d61a <__swhatbuf_r+0x2e>
 800d5fe:	89a3      	ldrh	r3, [r4, #12]
 800d600:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d604:	f04f 0100 	mov.w	r1, #0
 800d608:	bf14      	ite	ne
 800d60a:	2340      	movne	r3, #64	@ 0x40
 800d60c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d610:	2000      	movs	r0, #0
 800d612:	6031      	str	r1, [r6, #0]
 800d614:	602b      	str	r3, [r5, #0]
 800d616:	b016      	add	sp, #88	@ 0x58
 800d618:	bd70      	pop	{r4, r5, r6, pc}
 800d61a:	466a      	mov	r2, sp
 800d61c:	f000 f848 	bl	800d6b0 <_fstat_r>
 800d620:	2800      	cmp	r0, #0
 800d622:	dbec      	blt.n	800d5fe <__swhatbuf_r+0x12>
 800d624:	9901      	ldr	r1, [sp, #4]
 800d626:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d62a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d62e:	4259      	negs	r1, r3
 800d630:	4159      	adcs	r1, r3
 800d632:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d636:	e7eb      	b.n	800d610 <__swhatbuf_r+0x24>

0800d638 <__smakebuf_r>:
 800d638:	898b      	ldrh	r3, [r1, #12]
 800d63a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d63c:	079d      	lsls	r5, r3, #30
 800d63e:	4606      	mov	r6, r0
 800d640:	460c      	mov	r4, r1
 800d642:	d507      	bpl.n	800d654 <__smakebuf_r+0x1c>
 800d644:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d648:	6023      	str	r3, [r4, #0]
 800d64a:	6123      	str	r3, [r4, #16]
 800d64c:	2301      	movs	r3, #1
 800d64e:	6163      	str	r3, [r4, #20]
 800d650:	b003      	add	sp, #12
 800d652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d654:	ab01      	add	r3, sp, #4
 800d656:	466a      	mov	r2, sp
 800d658:	f7ff ffc8 	bl	800d5ec <__swhatbuf_r>
 800d65c:	9f00      	ldr	r7, [sp, #0]
 800d65e:	4605      	mov	r5, r0
 800d660:	4639      	mov	r1, r7
 800d662:	4630      	mov	r0, r6
 800d664:	f7fd fc2e 	bl	800aec4 <_malloc_r>
 800d668:	b948      	cbnz	r0, 800d67e <__smakebuf_r+0x46>
 800d66a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d66e:	059a      	lsls	r2, r3, #22
 800d670:	d4ee      	bmi.n	800d650 <__smakebuf_r+0x18>
 800d672:	f023 0303 	bic.w	r3, r3, #3
 800d676:	f043 0302 	orr.w	r3, r3, #2
 800d67a:	81a3      	strh	r3, [r4, #12]
 800d67c:	e7e2      	b.n	800d644 <__smakebuf_r+0xc>
 800d67e:	89a3      	ldrh	r3, [r4, #12]
 800d680:	6020      	str	r0, [r4, #0]
 800d682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d686:	81a3      	strh	r3, [r4, #12]
 800d688:	9b01      	ldr	r3, [sp, #4]
 800d68a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d68e:	b15b      	cbz	r3, 800d6a8 <__smakebuf_r+0x70>
 800d690:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d694:	4630      	mov	r0, r6
 800d696:	f000 f81d 	bl	800d6d4 <_isatty_r>
 800d69a:	b128      	cbz	r0, 800d6a8 <__smakebuf_r+0x70>
 800d69c:	89a3      	ldrh	r3, [r4, #12]
 800d69e:	f023 0303 	bic.w	r3, r3, #3
 800d6a2:	f043 0301 	orr.w	r3, r3, #1
 800d6a6:	81a3      	strh	r3, [r4, #12]
 800d6a8:	89a3      	ldrh	r3, [r4, #12]
 800d6aa:	431d      	orrs	r5, r3
 800d6ac:	81a5      	strh	r5, [r4, #12]
 800d6ae:	e7cf      	b.n	800d650 <__smakebuf_r+0x18>

0800d6b0 <_fstat_r>:
 800d6b0:	b538      	push	{r3, r4, r5, lr}
 800d6b2:	4d07      	ldr	r5, [pc, #28]	@ (800d6d0 <_fstat_r+0x20>)
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	4604      	mov	r4, r0
 800d6b8:	4608      	mov	r0, r1
 800d6ba:	4611      	mov	r1, r2
 800d6bc:	602b      	str	r3, [r5, #0]
 800d6be:	f7f5 faf9 	bl	8002cb4 <_fstat>
 800d6c2:	1c43      	adds	r3, r0, #1
 800d6c4:	d102      	bne.n	800d6cc <_fstat_r+0x1c>
 800d6c6:	682b      	ldr	r3, [r5, #0]
 800d6c8:	b103      	cbz	r3, 800d6cc <_fstat_r+0x1c>
 800d6ca:	6023      	str	r3, [r4, #0]
 800d6cc:	bd38      	pop	{r3, r4, r5, pc}
 800d6ce:	bf00      	nop
 800d6d0:	20026458 	.word	0x20026458

0800d6d4 <_isatty_r>:
 800d6d4:	b538      	push	{r3, r4, r5, lr}
 800d6d6:	4d06      	ldr	r5, [pc, #24]	@ (800d6f0 <_isatty_r+0x1c>)
 800d6d8:	2300      	movs	r3, #0
 800d6da:	4604      	mov	r4, r0
 800d6dc:	4608      	mov	r0, r1
 800d6de:	602b      	str	r3, [r5, #0]
 800d6e0:	f7f5 faf8 	bl	8002cd4 <_isatty>
 800d6e4:	1c43      	adds	r3, r0, #1
 800d6e6:	d102      	bne.n	800d6ee <_isatty_r+0x1a>
 800d6e8:	682b      	ldr	r3, [r5, #0]
 800d6ea:	b103      	cbz	r3, 800d6ee <_isatty_r+0x1a>
 800d6ec:	6023      	str	r3, [r4, #0]
 800d6ee:	bd38      	pop	{r3, r4, r5, pc}
 800d6f0:	20026458 	.word	0x20026458

0800d6f4 <__assert_func>:
 800d6f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d6f6:	4614      	mov	r4, r2
 800d6f8:	461a      	mov	r2, r3
 800d6fa:	4b09      	ldr	r3, [pc, #36]	@ (800d720 <__assert_func+0x2c>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	4605      	mov	r5, r0
 800d700:	68d8      	ldr	r0, [r3, #12]
 800d702:	b14c      	cbz	r4, 800d718 <__assert_func+0x24>
 800d704:	4b07      	ldr	r3, [pc, #28]	@ (800d724 <__assert_func+0x30>)
 800d706:	9100      	str	r1, [sp, #0]
 800d708:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d70c:	4906      	ldr	r1, [pc, #24]	@ (800d728 <__assert_func+0x34>)
 800d70e:	462b      	mov	r3, r5
 800d710:	f000 f842 	bl	800d798 <fiprintf>
 800d714:	f000 f852 	bl	800d7bc <abort>
 800d718:	4b04      	ldr	r3, [pc, #16]	@ (800d72c <__assert_func+0x38>)
 800d71a:	461c      	mov	r4, r3
 800d71c:	e7f3      	b.n	800d706 <__assert_func+0x12>
 800d71e:	bf00      	nop
 800d720:	20000020 	.word	0x20000020
 800d724:	0800db0d 	.word	0x0800db0d
 800d728:	0800db1a 	.word	0x0800db1a
 800d72c:	0800db48 	.word	0x0800db48

0800d730 <_calloc_r>:
 800d730:	b570      	push	{r4, r5, r6, lr}
 800d732:	fba1 5402 	umull	r5, r4, r1, r2
 800d736:	b934      	cbnz	r4, 800d746 <_calloc_r+0x16>
 800d738:	4629      	mov	r1, r5
 800d73a:	f7fd fbc3 	bl	800aec4 <_malloc_r>
 800d73e:	4606      	mov	r6, r0
 800d740:	b928      	cbnz	r0, 800d74e <_calloc_r+0x1e>
 800d742:	4630      	mov	r0, r6
 800d744:	bd70      	pop	{r4, r5, r6, pc}
 800d746:	220c      	movs	r2, #12
 800d748:	6002      	str	r2, [r0, #0]
 800d74a:	2600      	movs	r6, #0
 800d74c:	e7f9      	b.n	800d742 <_calloc_r+0x12>
 800d74e:	462a      	mov	r2, r5
 800d750:	4621      	mov	r1, r4
 800d752:	f7fe faa3 	bl	800bc9c <memset>
 800d756:	e7f4      	b.n	800d742 <_calloc_r+0x12>

0800d758 <__ascii_mbtowc>:
 800d758:	b082      	sub	sp, #8
 800d75a:	b901      	cbnz	r1, 800d75e <__ascii_mbtowc+0x6>
 800d75c:	a901      	add	r1, sp, #4
 800d75e:	b142      	cbz	r2, 800d772 <__ascii_mbtowc+0x1a>
 800d760:	b14b      	cbz	r3, 800d776 <__ascii_mbtowc+0x1e>
 800d762:	7813      	ldrb	r3, [r2, #0]
 800d764:	600b      	str	r3, [r1, #0]
 800d766:	7812      	ldrb	r2, [r2, #0]
 800d768:	1e10      	subs	r0, r2, #0
 800d76a:	bf18      	it	ne
 800d76c:	2001      	movne	r0, #1
 800d76e:	b002      	add	sp, #8
 800d770:	4770      	bx	lr
 800d772:	4610      	mov	r0, r2
 800d774:	e7fb      	b.n	800d76e <__ascii_mbtowc+0x16>
 800d776:	f06f 0001 	mvn.w	r0, #1
 800d77a:	e7f8      	b.n	800d76e <__ascii_mbtowc+0x16>

0800d77c <__ascii_wctomb>:
 800d77c:	4603      	mov	r3, r0
 800d77e:	4608      	mov	r0, r1
 800d780:	b141      	cbz	r1, 800d794 <__ascii_wctomb+0x18>
 800d782:	2aff      	cmp	r2, #255	@ 0xff
 800d784:	d904      	bls.n	800d790 <__ascii_wctomb+0x14>
 800d786:	228a      	movs	r2, #138	@ 0x8a
 800d788:	601a      	str	r2, [r3, #0]
 800d78a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d78e:	4770      	bx	lr
 800d790:	700a      	strb	r2, [r1, #0]
 800d792:	2001      	movs	r0, #1
 800d794:	4770      	bx	lr
	...

0800d798 <fiprintf>:
 800d798:	b40e      	push	{r1, r2, r3}
 800d79a:	b503      	push	{r0, r1, lr}
 800d79c:	4601      	mov	r1, r0
 800d79e:	ab03      	add	r3, sp, #12
 800d7a0:	4805      	ldr	r0, [pc, #20]	@ (800d7b8 <fiprintf+0x20>)
 800d7a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7a6:	6800      	ldr	r0, [r0, #0]
 800d7a8:	9301      	str	r3, [sp, #4]
 800d7aa:	f7ff fd5b 	bl	800d264 <_vfiprintf_r>
 800d7ae:	b002      	add	sp, #8
 800d7b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7b4:	b003      	add	sp, #12
 800d7b6:	4770      	bx	lr
 800d7b8:	20000020 	.word	0x20000020

0800d7bc <abort>:
 800d7bc:	b508      	push	{r3, lr}
 800d7be:	2006      	movs	r0, #6
 800d7c0:	f000 f82c 	bl	800d81c <raise>
 800d7c4:	2001      	movs	r0, #1
 800d7c6:	f7f5 fa41 	bl	8002c4c <_exit>

0800d7ca <_raise_r>:
 800d7ca:	291f      	cmp	r1, #31
 800d7cc:	b538      	push	{r3, r4, r5, lr}
 800d7ce:	4605      	mov	r5, r0
 800d7d0:	460c      	mov	r4, r1
 800d7d2:	d904      	bls.n	800d7de <_raise_r+0x14>
 800d7d4:	2316      	movs	r3, #22
 800d7d6:	6003      	str	r3, [r0, #0]
 800d7d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d7dc:	bd38      	pop	{r3, r4, r5, pc}
 800d7de:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d7e0:	b112      	cbz	r2, 800d7e8 <_raise_r+0x1e>
 800d7e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d7e6:	b94b      	cbnz	r3, 800d7fc <_raise_r+0x32>
 800d7e8:	4628      	mov	r0, r5
 800d7ea:	f000 f831 	bl	800d850 <_getpid_r>
 800d7ee:	4622      	mov	r2, r4
 800d7f0:	4601      	mov	r1, r0
 800d7f2:	4628      	mov	r0, r5
 800d7f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7f8:	f000 b818 	b.w	800d82c <_kill_r>
 800d7fc:	2b01      	cmp	r3, #1
 800d7fe:	d00a      	beq.n	800d816 <_raise_r+0x4c>
 800d800:	1c59      	adds	r1, r3, #1
 800d802:	d103      	bne.n	800d80c <_raise_r+0x42>
 800d804:	2316      	movs	r3, #22
 800d806:	6003      	str	r3, [r0, #0]
 800d808:	2001      	movs	r0, #1
 800d80a:	e7e7      	b.n	800d7dc <_raise_r+0x12>
 800d80c:	2100      	movs	r1, #0
 800d80e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d812:	4620      	mov	r0, r4
 800d814:	4798      	blx	r3
 800d816:	2000      	movs	r0, #0
 800d818:	e7e0      	b.n	800d7dc <_raise_r+0x12>
	...

0800d81c <raise>:
 800d81c:	4b02      	ldr	r3, [pc, #8]	@ (800d828 <raise+0xc>)
 800d81e:	4601      	mov	r1, r0
 800d820:	6818      	ldr	r0, [r3, #0]
 800d822:	f7ff bfd2 	b.w	800d7ca <_raise_r>
 800d826:	bf00      	nop
 800d828:	20000020 	.word	0x20000020

0800d82c <_kill_r>:
 800d82c:	b538      	push	{r3, r4, r5, lr}
 800d82e:	4d07      	ldr	r5, [pc, #28]	@ (800d84c <_kill_r+0x20>)
 800d830:	2300      	movs	r3, #0
 800d832:	4604      	mov	r4, r0
 800d834:	4608      	mov	r0, r1
 800d836:	4611      	mov	r1, r2
 800d838:	602b      	str	r3, [r5, #0]
 800d83a:	f7f5 f9f7 	bl	8002c2c <_kill>
 800d83e:	1c43      	adds	r3, r0, #1
 800d840:	d102      	bne.n	800d848 <_kill_r+0x1c>
 800d842:	682b      	ldr	r3, [r5, #0]
 800d844:	b103      	cbz	r3, 800d848 <_kill_r+0x1c>
 800d846:	6023      	str	r3, [r4, #0]
 800d848:	bd38      	pop	{r3, r4, r5, pc}
 800d84a:	bf00      	nop
 800d84c:	20026458 	.word	0x20026458

0800d850 <_getpid_r>:
 800d850:	f7f5 b9e4 	b.w	8002c1c <_getpid>

0800d854 <_init>:
 800d854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d856:	bf00      	nop
 800d858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d85a:	bc08      	pop	{r3}
 800d85c:	469e      	mov	lr, r3
 800d85e:	4770      	bx	lr

0800d860 <_fini>:
 800d860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d862:	bf00      	nop
 800d864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d866:	bc08      	pop	{r3}
 800d868:	469e      	mov	lr, r3
 800d86a:	4770      	bx	lr
