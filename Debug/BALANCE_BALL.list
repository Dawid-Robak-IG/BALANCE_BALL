
BALANCE_BALL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000847c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800862c  0800862c  0000962c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086b0  080086b0  0000a010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080086b0  080086b0  000096b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086b8  080086b8  0000a010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086b8  080086b8  000096b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080086bc  080086bc  000096bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080086c0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a010  2**0
                  CONTENTS
 10 .bss          000007a0  20000010  20000010  0000a010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200007b0  200007b0  0000a010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027258  00000000  00000000  0000a040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005e8a  00000000  00000000  00031298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002198  00000000  00000000  00037128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000019f0  00000000  00000000  000392c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a4ef  00000000  00000000  0003acb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002977b  00000000  00000000  0006519f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4306  00000000  00000000  0008e91a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00182c20  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008d50  00000000  00000000  00182c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0018b9b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008614 	.word	0x08008614

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08008614 	.word	0x08008614

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000204:	f000 b988 	b.w	8000518 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	468e      	mov	lr, r1
 8000228:	4604      	mov	r4, r0
 800022a:	4688      	mov	r8, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d962      	bls.n	80002fc <__udivmoddi4+0xdc>
 8000236:	fab2 f682 	clz	r6, r2
 800023a:	b14e      	cbz	r6, 8000250 <__udivmoddi4+0x30>
 800023c:	f1c6 0320 	rsb	r3, r6, #32
 8000240:	fa01 f806 	lsl.w	r8, r1, r6
 8000244:	fa20 f303 	lsr.w	r3, r0, r3
 8000248:	40b7      	lsls	r7, r6
 800024a:	ea43 0808 	orr.w	r8, r3, r8
 800024e:	40b4      	lsls	r4, r6
 8000250:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000254:	fa1f fc87 	uxth.w	ip, r7
 8000258:	fbb8 f1fe 	udiv	r1, r8, lr
 800025c:	0c23      	lsrs	r3, r4, #16
 800025e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000262:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000266:	fb01 f20c 	mul.w	r2, r1, ip
 800026a:	429a      	cmp	r2, r3
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0x62>
 800026e:	18fb      	adds	r3, r7, r3
 8000270:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000274:	f080 80ea 	bcs.w	800044c <__udivmoddi4+0x22c>
 8000278:	429a      	cmp	r2, r3
 800027a:	f240 80e7 	bls.w	800044c <__udivmoddi4+0x22c>
 800027e:	3902      	subs	r1, #2
 8000280:	443b      	add	r3, r7
 8000282:	1a9a      	subs	r2, r3, r2
 8000284:	b2a3      	uxth	r3, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000292:	fb00 fc0c 	mul.w	ip, r0, ip
 8000296:	459c      	cmp	ip, r3
 8000298:	d909      	bls.n	80002ae <__udivmoddi4+0x8e>
 800029a:	18fb      	adds	r3, r7, r3
 800029c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002a0:	f080 80d6 	bcs.w	8000450 <__udivmoddi4+0x230>
 80002a4:	459c      	cmp	ip, r3
 80002a6:	f240 80d3 	bls.w	8000450 <__udivmoddi4+0x230>
 80002aa:	443b      	add	r3, r7
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b2:	eba3 030c 	sub.w	r3, r3, ip
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40f3      	lsrs	r3, r6
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xb6>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb0>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x14c>
 80002de:	4573      	cmp	r3, lr
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xc8>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 8105 	bhi.w	80004f2 <__udivmoddi4+0x2d2>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4690      	mov	r8, r2
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e5      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002f6:	e9c5 4800 	strd	r4, r8, [r5]
 80002fa:	e7e2      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f000 8090 	beq.w	8000422 <__udivmoddi4+0x202>
 8000302:	fab2 f682 	clz	r6, r2
 8000306:	2e00      	cmp	r6, #0
 8000308:	f040 80a4 	bne.w	8000454 <__udivmoddi4+0x234>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	0c03      	lsrs	r3, r0, #16
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	b280      	uxth	r0, r0
 8000316:	b2bc      	uxth	r4, r7
 8000318:	2101      	movs	r1, #1
 800031a:	fbb2 fcfe 	udiv	ip, r2, lr
 800031e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000326:	fb04 f20c 	mul.w	r2, r4, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d907      	bls.n	800033e <__udivmoddi4+0x11e>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0x11c>
 8000336:	429a      	cmp	r2, r3
 8000338:	f200 80e0 	bhi.w	80004fc <__udivmoddi4+0x2dc>
 800033c:	46c4      	mov	ip, r8
 800033e:	1a9b      	subs	r3, r3, r2
 8000340:	fbb3 f2fe 	udiv	r2, r3, lr
 8000344:	fb0e 3312 	mls	r3, lr, r2, r3
 8000348:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800034c:	fb02 f404 	mul.w	r4, r2, r4
 8000350:	429c      	cmp	r4, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x144>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x142>
 800035c:	429c      	cmp	r4, r3
 800035e:	f200 80ca 	bhi.w	80004f6 <__udivmoddi4+0x2d6>
 8000362:	4602      	mov	r2, r0
 8000364:	1b1b      	subs	r3, r3, r4
 8000366:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x98>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa0e f401 	lsl.w	r4, lr, r1
 800037c:	fa20 f306 	lsr.w	r3, r0, r6
 8000380:	fa2e fe06 	lsr.w	lr, lr, r6
 8000384:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000388:	4323      	orrs	r3, r4
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	fa1f fc87 	uxth.w	ip, r7
 8000392:	fbbe f0f9 	udiv	r0, lr, r9
 8000396:	0c1c      	lsrs	r4, r3, #16
 8000398:	fb09 ee10 	mls	lr, r9, r0, lr
 800039c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a4:	45a6      	cmp	lr, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1a0>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003b2:	f080 809c 	bcs.w	80004ee <__udivmoddi4+0x2ce>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f240 8099 	bls.w	80004ee <__udivmoddi4+0x2ce>
 80003bc:	3802      	subs	r0, #2
 80003be:	443c      	add	r4, r7
 80003c0:	eba4 040e 	sub.w	r4, r4, lr
 80003c4:	fa1f fe83 	uxth.w	lr, r3
 80003c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003cc:	fb09 4413 	mls	r4, r9, r3, r4
 80003d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d8:	45a4      	cmp	ip, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1ce>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003e2:	f080 8082 	bcs.w	80004ea <__udivmoddi4+0x2ca>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d97f      	bls.n	80004ea <__udivmoddi4+0x2ca>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003fa:	4564      	cmp	r4, ip
 80003fc:	4673      	mov	r3, lr
 80003fe:	46e1      	mov	r9, ip
 8000400:	d362      	bcc.n	80004c8 <__udivmoddi4+0x2a8>
 8000402:	d05f      	beq.n	80004c4 <__udivmoddi4+0x2a4>
 8000404:	b15d      	cbz	r5, 800041e <__udivmoddi4+0x1fe>
 8000406:	ebb8 0203 	subs.w	r2, r8, r3
 800040a:	eb64 0409 	sbc.w	r4, r4, r9
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	fa22 f301 	lsr.w	r3, r2, r1
 8000416:	431e      	orrs	r6, r3
 8000418:	40cc      	lsrs	r4, r1
 800041a:	e9c5 6400 	strd	r6, r4, [r5]
 800041e:	2100      	movs	r1, #0
 8000420:	e74f      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000422:	fbb1 fcf2 	udiv	ip, r1, r2
 8000426:	0c01      	lsrs	r1, r0, #16
 8000428:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800042c:	b280      	uxth	r0, r0
 800042e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000432:	463b      	mov	r3, r7
 8000434:	4638      	mov	r0, r7
 8000436:	463c      	mov	r4, r7
 8000438:	46b8      	mov	r8, r7
 800043a:	46be      	mov	lr, r7
 800043c:	2620      	movs	r6, #32
 800043e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000442:	eba2 0208 	sub.w	r2, r2, r8
 8000446:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800044a:	e766      	b.n	800031a <__udivmoddi4+0xfa>
 800044c:	4601      	mov	r1, r0
 800044e:	e718      	b.n	8000282 <__udivmoddi4+0x62>
 8000450:	4610      	mov	r0, r2
 8000452:	e72c      	b.n	80002ae <__udivmoddi4+0x8e>
 8000454:	f1c6 0220 	rsb	r2, r6, #32
 8000458:	fa2e f302 	lsr.w	r3, lr, r2
 800045c:	40b7      	lsls	r7, r6
 800045e:	40b1      	lsls	r1, r6
 8000460:	fa20 f202 	lsr.w	r2, r0, r2
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	430a      	orrs	r2, r1
 800046a:	fbb3 f8fe 	udiv	r8, r3, lr
 800046e:	b2bc      	uxth	r4, r7
 8000470:	fb0e 3318 	mls	r3, lr, r8, r3
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb08 f904 	mul.w	r9, r8, r4
 800047e:	40b0      	lsls	r0, r6
 8000480:	4589      	cmp	r9, r1
 8000482:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000486:	b280      	uxth	r0, r0
 8000488:	d93e      	bls.n	8000508 <__udivmoddi4+0x2e8>
 800048a:	1879      	adds	r1, r7, r1
 800048c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x276>
 8000492:	4589      	cmp	r9, r1
 8000494:	d81f      	bhi.n	80004d6 <__udivmoddi4+0x2b6>
 8000496:	eba1 0109 	sub.w	r1, r1, r9
 800049a:	fbb1 f9fe 	udiv	r9, r1, lr
 800049e:	fb09 f804 	mul.w	r8, r9, r4
 80004a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a6:	b292      	uxth	r2, r2
 80004a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ac:	4542      	cmp	r2, r8
 80004ae:	d229      	bcs.n	8000504 <__udivmoddi4+0x2e4>
 80004b0:	18ba      	adds	r2, r7, r2
 80004b2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004b6:	d2c4      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d2c2      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004bc:	f1a9 0102 	sub.w	r1, r9, #2
 80004c0:	443a      	add	r2, r7
 80004c2:	e7be      	b.n	8000442 <__udivmoddi4+0x222>
 80004c4:	45f0      	cmp	r8, lr
 80004c6:	d29d      	bcs.n	8000404 <__udivmoddi4+0x1e4>
 80004c8:	ebbe 0302 	subs.w	r3, lr, r2
 80004cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004d0:	3801      	subs	r0, #1
 80004d2:	46e1      	mov	r9, ip
 80004d4:	e796      	b.n	8000404 <__udivmoddi4+0x1e4>
 80004d6:	eba7 0909 	sub.w	r9, r7, r9
 80004da:	4449      	add	r1, r9
 80004dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e4:	fb09 f804 	mul.w	r8, r9, r4
 80004e8:	e7db      	b.n	80004a2 <__udivmoddi4+0x282>
 80004ea:	4673      	mov	r3, lr
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1ce>
 80004ee:	4650      	mov	r0, sl
 80004f0:	e766      	b.n	80003c0 <__udivmoddi4+0x1a0>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e6fd      	b.n	80002f2 <__udivmoddi4+0xd2>
 80004f6:	443b      	add	r3, r7
 80004f8:	3a02      	subs	r2, #2
 80004fa:	e733      	b.n	8000364 <__udivmoddi4+0x144>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	443b      	add	r3, r7
 8000502:	e71c      	b.n	800033e <__udivmoddi4+0x11e>
 8000504:	4649      	mov	r1, r9
 8000506:	e79c      	b.n	8000442 <__udivmoddi4+0x222>
 8000508:	eba1 0109 	sub.w	r1, r1, r9
 800050c:	46c4      	mov	ip, r8
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fb09 f804 	mul.w	r8, r9, r4
 8000516:	e7c4      	b.n	80004a2 <__udivmoddi4+0x282>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000520:	4b06      	ldr	r3, [pc, #24]	@ (800053c <MX_CRC_Init+0x20>)
 8000522:	4a07      	ldr	r2, [pc, #28]	@ (8000540 <MX_CRC_Init+0x24>)
 8000524:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000526:	4805      	ldr	r0, [pc, #20]	@ (800053c <MX_CRC_Init+0x20>)
 8000528:	f001 faf0 	bl	8001b0c <HAL_CRC_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000532:	f000 ff13 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	2000002c 	.word	0x2000002c
 8000540:	40023000 	.word	0x40023000

08000544 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a0b      	ldr	r2, [pc, #44]	@ (8000580 <HAL_CRC_MspInit+0x3c>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d10d      	bne.n	8000572 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	4b0a      	ldr	r3, [pc, #40]	@ (8000584 <HAL_CRC_MspInit+0x40>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055e:	4a09      	ldr	r2, [pc, #36]	@ (8000584 <HAL_CRC_MspInit+0x40>)
 8000560:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000564:	6313      	str	r3, [r2, #48]	@ 0x30
 8000566:	4b07      	ldr	r3, [pc, #28]	@ (8000584 <HAL_CRC_MspInit+0x40>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000572:	bf00      	nop
 8000574:	3714      	adds	r7, #20
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40023000 	.word	0x40023000
 8000584:	40023800 	.word	0x40023800

08000588 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800058c:	4b15      	ldr	r3, [pc, #84]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 800058e:	4a16      	ldr	r2, [pc, #88]	@ (80005e8 <MX_DMA2D_Init+0x60>)
 8000590:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000592:	4b14      	ldr	r3, [pc, #80]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 8000594:	2200      	movs	r2, #0
 8000596:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000598:	4b12      	ldr	r3, [pc, #72]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800059e:	4b11      	ldr	r3, [pc, #68]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80005a4:	4b0f      	ldr	r3, [pc, #60]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80005aa:	4b0e      	ldr	r3, [pc, #56]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80005b0:	4b0c      	ldr	r3, [pc, #48]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80005b6:	4b0b      	ldr	r3, [pc, #44]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80005bc:	4809      	ldr	r0, [pc, #36]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 80005be:	f001 fac1 	bl	8001b44 <HAL_DMA2D_Init>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80005c8:	f000 fec8 	bl	800135c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80005cc:	2101      	movs	r1, #1
 80005ce:	4805      	ldr	r0, [pc, #20]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 80005d0:	f001 fc12 	bl	8001df8 <HAL_DMA2D_ConfigLayer>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80005da:	f000 febf 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000034 	.word	0x20000034
 80005e8:	4002b000 	.word	0x4002b000

080005ec <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a0e      	ldr	r2, [pc, #56]	@ (8000634 <HAL_DMA2D_MspInit+0x48>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d115      	bne.n	800062a <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	4b0d      	ldr	r3, [pc, #52]	@ (8000638 <HAL_DMA2D_MspInit+0x4c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	4a0c      	ldr	r2, [pc, #48]	@ (8000638 <HAL_DMA2D_MspInit+0x4c>)
 8000608:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800060c:	6313      	str	r3, [r2, #48]	@ 0x30
 800060e:	4b0a      	ldr	r3, [pc, #40]	@ (8000638 <HAL_DMA2D_MspInit+0x4c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2105      	movs	r1, #5
 800061e:	205a      	movs	r0, #90	@ 0x5a
 8000620:	f001 fa4a 	bl	8001ab8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000624:	205a      	movs	r0, #90	@ 0x5a
 8000626:	f001 fa63 	bl	8001af0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	4002b000 	.word	0x4002b000
 8000638:	40023800 	.word	0x40023800

0800063c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
 8000650:	615a      	str	r2, [r3, #20]
 8000652:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000654:	4b1f      	ldr	r3, [pc, #124]	@ (80006d4 <MX_FMC_Init+0x98>)
 8000656:	4a20      	ldr	r2, [pc, #128]	@ (80006d8 <MX_FMC_Init+0x9c>)
 8000658:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800065a:	4b1e      	ldr	r3, [pc, #120]	@ (80006d4 <MX_FMC_Init+0x98>)
 800065c:	2201      	movs	r2, #1
 800065e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000660:	4b1c      	ldr	r3, [pc, #112]	@ (80006d4 <MX_FMC_Init+0x98>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000666:	4b1b      	ldr	r3, [pc, #108]	@ (80006d4 <MX_FMC_Init+0x98>)
 8000668:	2204      	movs	r2, #4
 800066a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800066c:	4b19      	ldr	r3, [pc, #100]	@ (80006d4 <MX_FMC_Init+0x98>)
 800066e:	2210      	movs	r2, #16
 8000670:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000672:	4b18      	ldr	r3, [pc, #96]	@ (80006d4 <MX_FMC_Init+0x98>)
 8000674:	2240      	movs	r2, #64	@ 0x40
 8000676:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000678:	4b16      	ldr	r3, [pc, #88]	@ (80006d4 <MX_FMC_Init+0x98>)
 800067a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800067e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000680:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <MX_FMC_Init+0x98>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000686:	4b13      	ldr	r3, [pc, #76]	@ (80006d4 <MX_FMC_Init+0x98>)
 8000688:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800068c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800068e:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <MX_FMC_Init+0x98>)
 8000690:	2200      	movs	r2, #0
 8000692:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000694:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <MX_FMC_Init+0x98>)
 8000696:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800069a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800069c:	2302      	movs	r3, #2
 800069e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80006a0:	2307      	movs	r3, #7
 80006a2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80006a4:	2304      	movs	r3, #4
 80006a6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80006a8:	2307      	movs	r3, #7
 80006aa:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80006ac:	2303      	movs	r3, #3
 80006ae:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	4619      	mov	r1, r3
 80006bc:	4805      	ldr	r0, [pc, #20]	@ (80006d4 <MX_FMC_Init+0x98>)
 80006be:	f004 ff7d 	bl	80055bc <HAL_SDRAM_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80006c8:	f000 fe48 	bl	800135c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80006cc:	bf00      	nop
 80006ce:	3720      	adds	r7, #32
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000074 	.word	0x20000074
 80006d8:	a0000140 	.word	0xa0000140

080006dc <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80006f0:	4b3b      	ldr	r3, [pc, #236]	@ (80007e0 <HAL_FMC_MspInit+0x104>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d16f      	bne.n	80007d8 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80006f8:	4b39      	ldr	r3, [pc, #228]	@ (80007e0 <HAL_FMC_MspInit+0x104>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	4b38      	ldr	r3, [pc, #224]	@ (80007e4 <HAL_FMC_MspInit+0x108>)
 8000704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000706:	4a37      	ldr	r2, [pc, #220]	@ (80007e4 <HAL_FMC_MspInit+0x108>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6393      	str	r3, [r2, #56]	@ 0x38
 800070e:	4b35      	ldr	r3, [pc, #212]	@ (80007e4 <HAL_FMC_MspInit+0x108>)
 8000710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800071a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800071e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000720:	2302      	movs	r3, #2
 8000722:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000728:	2303      	movs	r3, #3
 800072a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800072c:	230c      	movs	r3, #12
 800072e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	4619      	mov	r1, r3
 8000734:	482c      	ldr	r0, [pc, #176]	@ (80007e8 <HAL_FMC_MspInit+0x10c>)
 8000736:	f001 fbf1 	bl	8001f1c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800073a:	2301      	movs	r3, #1
 800073c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073e:	2302      	movs	r3, #2
 8000740:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000746:	2303      	movs	r3, #3
 8000748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800074a:	230c      	movs	r3, #12
 800074c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	4619      	mov	r1, r3
 8000752:	4826      	ldr	r0, [pc, #152]	@ (80007ec <HAL_FMC_MspInit+0x110>)
 8000754:	f001 fbe2 	bl	8001f1c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000758:	f248 1333 	movw	r3, #33075	@ 0x8133
 800075c:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075e:	2302      	movs	r3, #2
 8000760:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000766:	2303      	movs	r3, #3
 8000768:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800076a:	230c      	movs	r3, #12
 800076c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	4619      	mov	r1, r3
 8000772:	481f      	ldr	r0, [pc, #124]	@ (80007f0 <HAL_FMC_MspInit+0x114>)
 8000774:	f001 fbd2 	bl	8001f1c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000778:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800077c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077e:	2302      	movs	r3, #2
 8000780:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000786:	2303      	movs	r3, #3
 8000788:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800078a:	230c      	movs	r3, #12
 800078c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	4619      	mov	r1, r3
 8000792:	4818      	ldr	r0, [pc, #96]	@ (80007f4 <HAL_FMC_MspInit+0x118>)
 8000794:	f001 fbc2 	bl	8001f1c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000798:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800079c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079e:	2302      	movs	r3, #2
 80007a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a6:	2303      	movs	r3, #3
 80007a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007aa:	230c      	movs	r3, #12
 80007ac:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	4619      	mov	r1, r3
 80007b2:	4811      	ldr	r0, [pc, #68]	@ (80007f8 <HAL_FMC_MspInit+0x11c>)
 80007b4:	f001 fbb2 	bl	8001f1c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80007b8:	2360      	movs	r3, #96	@ 0x60
 80007ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007bc:	2302      	movs	r3, #2
 80007be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c4:	2303      	movs	r3, #3
 80007c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007c8:	230c      	movs	r3, #12
 80007ca:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	4619      	mov	r1, r3
 80007d0:	480a      	ldr	r0, [pc, #40]	@ (80007fc <HAL_FMC_MspInit+0x120>)
 80007d2:	f001 fba3 	bl	8001f1c <HAL_GPIO_Init>
 80007d6:	e000      	b.n	80007da <HAL_FMC_MspInit+0xfe>
    return;
 80007d8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	200000a8 	.word	0x200000a8
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40021400 	.word	0x40021400
 80007ec:	40020800 	.word	0x40020800
 80007f0:	40021800 	.word	0x40021800
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40020c00 	.word	0x40020c00
 80007fc:	40020400 	.word	0x40020400

08000800 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000808:	f7ff ff68 	bl	80006dc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
	...

0800082c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08e      	sub	sp, #56	@ 0x38
 8000830:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	623b      	str	r3, [r7, #32]
 8000846:	4b81      	ldr	r3, [pc, #516]	@ (8000a4c <MX_GPIO_Init+0x220>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a80      	ldr	r2, [pc, #512]	@ (8000a4c <MX_GPIO_Init+0x220>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b7e      	ldr	r3, [pc, #504]	@ (8000a4c <MX_GPIO_Init+0x220>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	623b      	str	r3, [r7, #32]
 800085c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
 8000862:	4b7a      	ldr	r3, [pc, #488]	@ (8000a4c <MX_GPIO_Init+0x220>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a79      	ldr	r2, [pc, #484]	@ (8000a4c <MX_GPIO_Init+0x220>)
 8000868:	f043 0320 	orr.w	r3, r3, #32
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b77      	ldr	r3, [pc, #476]	@ (8000a4c <MX_GPIO_Init+0x220>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0320 	and.w	r3, r3, #32
 8000876:	61fb      	str	r3, [r7, #28]
 8000878:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	61bb      	str	r3, [r7, #24]
 800087e:	4b73      	ldr	r3, [pc, #460]	@ (8000a4c <MX_GPIO_Init+0x220>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a72      	ldr	r2, [pc, #456]	@ (8000a4c <MX_GPIO_Init+0x220>)
 8000884:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b70      	ldr	r3, [pc, #448]	@ (8000a4c <MX_GPIO_Init+0x220>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000892:	61bb      	str	r3, [r7, #24]
 8000894:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	4b6c      	ldr	r3, [pc, #432]	@ (8000a4c <MX_GPIO_Init+0x220>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	4a6b      	ldr	r2, [pc, #428]	@ (8000a4c <MX_GPIO_Init+0x220>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a6:	4b69      	ldr	r3, [pc, #420]	@ (8000a4c <MX_GPIO_Init+0x220>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
 80008b6:	4b65      	ldr	r3, [pc, #404]	@ (8000a4c <MX_GPIO_Init+0x220>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a64      	ldr	r2, [pc, #400]	@ (8000a4c <MX_GPIO_Init+0x220>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b62      	ldr	r3, [pc, #392]	@ (8000a4c <MX_GPIO_Init+0x220>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	4b5e      	ldr	r3, [pc, #376]	@ (8000a4c <MX_GPIO_Init+0x220>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a5d      	ldr	r2, [pc, #372]	@ (8000a4c <MX_GPIO_Init+0x220>)
 80008d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b5b      	ldr	r3, [pc, #364]	@ (8000a4c <MX_GPIO_Init+0x220>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	4b57      	ldr	r3, [pc, #348]	@ (8000a4c <MX_GPIO_Init+0x220>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a56      	ldr	r2, [pc, #344]	@ (8000a4c <MX_GPIO_Init+0x220>)
 80008f4:	f043 0310 	orr.w	r3, r3, #16
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b54      	ldr	r3, [pc, #336]	@ (8000a4c <MX_GPIO_Init+0x220>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0310 	and.w	r3, r3, #16
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b50      	ldr	r3, [pc, #320]	@ (8000a4c <MX_GPIO_Init+0x220>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a4f      	ldr	r2, [pc, #316]	@ (8000a4c <MX_GPIO_Init+0x220>)
 8000910:	f043 0308 	orr.w	r3, r3, #8
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b4d      	ldr	r3, [pc, #308]	@ (8000a4c <MX_GPIO_Init+0x220>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0308 	and.w	r3, r3, #8
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2116      	movs	r1, #22
 8000926:	484a      	ldr	r0, [pc, #296]	@ (8000a50 <MX_GPIO_Init+0x224>)
 8000928:	f001 fcbc 	bl	80022a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	2180      	movs	r1, #128	@ 0x80
 8000930:	4848      	ldr	r0, [pc, #288]	@ (8000a54 <MX_GPIO_Init+0x228>)
 8000932:	f001 fcb7 	bl	80022a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800093c:	4846      	ldr	r0, [pc, #280]	@ (8000a58 <MX_GPIO_Init+0x22c>)
 800093e:	f001 fcb1 	bl	80022a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000948:	4844      	ldr	r0, [pc, #272]	@ (8000a5c <MX_GPIO_Init+0x230>)
 800094a:	f001 fcab 	bl	80022a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800094e:	2316      	movs	r3, #22
 8000950:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000962:	4619      	mov	r1, r3
 8000964:	483a      	ldr	r0, [pc, #232]	@ (8000a50 <MX_GPIO_Init+0x224>)
 8000966:	f001 fad9 	bl	8001f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 800096a:	2301      	movs	r3, #1
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096e:	2300      	movs	r3, #0
 8000970:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800097a:	4619      	mov	r1, r3
 800097c:	4835      	ldr	r0, [pc, #212]	@ (8000a54 <MX_GPIO_Init+0x228>)
 800097e:	f001 facd 	bl	8001f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000982:	f248 0306 	movw	r3, #32774	@ 0x8006
 8000986:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000988:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800098c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000996:	4619      	mov	r1, r3
 8000998:	482e      	ldr	r0, [pc, #184]	@ (8000a54 <MX_GPIO_Init+0x228>)
 800099a:	f001 fabf 	bl	8001f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800099e:	2380      	movs	r3, #128	@ 0x80
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009b2:	4619      	mov	r1, r3
 80009b4:	4827      	ldr	r0, [pc, #156]	@ (8000a54 <MX_GPIO_Init+0x228>)
 80009b6:	f001 fab1 	bl	8001f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80009ba:	2320      	movs	r3, #32
 80009bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009be:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009cc:	4619      	mov	r1, r3
 80009ce:	4820      	ldr	r0, [pc, #128]	@ (8000a50 <MX_GPIO_Init+0x224>)
 80009d0:	f001 faa4 	bl	8001f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009d4:	2304      	movs	r3, #4
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e4:	4619      	mov	r1, r3
 80009e6:	481e      	ldr	r0, [pc, #120]	@ (8000a60 <MX_GPIO_Init+0x234>)
 80009e8:	f001 fa98 	bl	8001f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80009ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80009f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009fe:	4619      	mov	r1, r3
 8000a00:	4815      	ldr	r0, [pc, #84]	@ (8000a58 <MX_GPIO_Init+0x22c>)
 8000a02:	f001 fa8b 	bl	8001f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000a06:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480e      	ldr	r0, [pc, #56]	@ (8000a58 <MX_GPIO_Init+0x22c>)
 8000a20:	f001 fa7c 	bl	8001f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000a24:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000a28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4807      	ldr	r0, [pc, #28]	@ (8000a5c <MX_GPIO_Init+0x230>)
 8000a3e:	f001 fa6d 	bl	8001f1c <HAL_GPIO_Init>

}
 8000a42:	bf00      	nop
 8000a44:	3738      	adds	r7, #56	@ 0x38
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40020800 	.word	0x40020800
 8000a54:	40020000 	.word	0x40020000
 8000a58:	40020c00 	.word	0x40020c00
 8000a5c:	40021800 	.word	0x40021800
 8000a60:	40020400 	.word	0x40020400

08000a64 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a68:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000adc <MX_I2C3_Init+0x78>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000a70:	4a1b      	ldr	r2, [pc, #108]	@ (8000ae0 <MX_I2C3_Init+0x7c>)
 8000a72:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a74:	4b18      	ldr	r3, [pc, #96]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000a7a:	4b17      	ldr	r3, [pc, #92]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a80:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000a82:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a86:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a88:	4b13      	ldr	r3, [pc, #76]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000a8e:	4b12      	ldr	r3, [pc, #72]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a94:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000aa0:	480d      	ldr	r0, [pc, #52]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000aa2:	f003 f9d9 	bl	8003e58 <HAL_I2C_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000aac:	f000 fc56 	bl	800135c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4809      	ldr	r0, [pc, #36]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000ab4:	f003 fb14 	bl	80040e0 <HAL_I2CEx_ConfigAnalogFilter>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000abe:	f000 fc4d 	bl	800135c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4804      	ldr	r0, [pc, #16]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000ac6:	f003 fb47 	bl	8004158 <HAL_I2CEx_ConfigDigitalFilter>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000ad0:	f000 fc44 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	200000ac 	.word	0x200000ac
 8000adc:	40005c00 	.word	0x40005c00
 8000ae0:	000186a0 	.word	0x000186a0

08000ae4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	@ 0x28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a29      	ldr	r2, [pc, #164]	@ (8000ba8 <HAL_I2C_MspInit+0xc4>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d14b      	bne.n	8000b9e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	4b28      	ldr	r3, [pc, #160]	@ (8000bac <HAL_I2C_MspInit+0xc8>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	4a27      	ldr	r2, [pc, #156]	@ (8000bac <HAL_I2C_MspInit+0xc8>)
 8000b10:	f043 0304 	orr.w	r3, r3, #4
 8000b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b16:	4b25      	ldr	r3, [pc, #148]	@ (8000bac <HAL_I2C_MspInit+0xc8>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	f003 0304 	and.w	r3, r3, #4
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b21      	ldr	r3, [pc, #132]	@ (8000bac <HAL_I2C_MspInit+0xc8>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	4a20      	ldr	r2, [pc, #128]	@ (8000bac <HAL_I2C_MspInit+0xc8>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b32:	4b1e      	ldr	r3, [pc, #120]	@ (8000bac <HAL_I2C_MspInit+0xc8>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000b3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b44:	2312      	movs	r3, #18
 8000b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b50:	2304      	movs	r3, #4
 8000b52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4815      	ldr	r0, [pc, #84]	@ (8000bb0 <HAL_I2C_MspInit+0xcc>)
 8000b5c:	f001 f9de 	bl	8001f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000b60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b66:	2312      	movs	r3, #18
 8000b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b72:	2304      	movs	r3, #4
 8000b74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	480d      	ldr	r0, [pc, #52]	@ (8000bb4 <HAL_I2C_MspInit+0xd0>)
 8000b7e:	f001 f9cd 	bl	8001f1c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	4b09      	ldr	r3, [pc, #36]	@ (8000bac <HAL_I2C_MspInit+0xc8>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8a:	4a08      	ldr	r2, [pc, #32]	@ (8000bac <HAL_I2C_MspInit+0xc8>)
 8000b8c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000b90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b92:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <HAL_I2C_MspInit+0xc8>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	3728      	adds	r7, #40	@ 0x28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40005c00 	.word	0x40005c00
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40020800 	.word	0x40020800
 8000bb4:	40020000 	.word	0x40020000

08000bb8 <lcd_cmd>:
		CMD(COLMOD), 0x05, // chosen 16-bit, R5, G6, B5
		CMD(MAC), 0xC8, //in documentation this means BGR but it turned out to be RGB
		CMD(POS_GAMMA_COR), 0x1F, 0x1A, 0x18, 0x0A, 0x0F, 0x06, 0x45, 0x87, 0x32, 0x0A, 0x07, 0x02, 0x07, 0x05, 0x00,
		CMD(NEG_GAMMA_COR), 0x00, 0x25, 0x27, 0x05, 0x10, 0x09, 0x3A, 0x56, 0x4C, 0x05, 0x0D, 0x0C, 0x2E, 0x2F, 0x0F,
};
static void lcd_cmd(uint8_t cmd){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_RESET); //teraz komendy
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bc8:	480b      	ldr	r0, [pc, #44]	@ (8000bf8 <lcd_cmd+0x40>)
 8000bca:	f001 fb6b 	bl	80022a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2104      	movs	r1, #4
 8000bd2:	480a      	ldr	r0, [pc, #40]	@ (8000bfc <lcd_cmd+0x44>)
 8000bd4:	f001 fb66 	bl	80022a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &cmd, 1, HAL_MAX_DELAY);
 8000bd8:	1df9      	adds	r1, r7, #7
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bde:	2201      	movs	r2, #1
 8000be0:	4807      	ldr	r0, [pc, #28]	@ (8000c00 <lcd_cmd+0x48>)
 8000be2:	f004 fda8 	bl	8005736 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_SET);
 8000be6:	2201      	movs	r2, #1
 8000be8:	2104      	movs	r1, #4
 8000bea:	4804      	ldr	r0, [pc, #16]	@ (8000bfc <lcd_cmd+0x44>)
 8000bec:	f001 fb5a 	bl	80022a4 <HAL_GPIO_WritePin>
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40020c00 	.word	0x40020c00
 8000bfc:	40020800 	.word	0x40020800
 8000c00:	200001b0 	.word	0x200001b0

08000c04 <lcd_data>:
static void lcd_data(uint8_t data){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_SET); //teraz dane
 8000c0e:	2201      	movs	r2, #1
 8000c10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c14:	480b      	ldr	r0, [pc, #44]	@ (8000c44 <lcd_data+0x40>)
 8000c16:	f001 fb45 	bl	80022a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2104      	movs	r1, #4
 8000c1e:	480a      	ldr	r0, [pc, #40]	@ (8000c48 <lcd_data+0x44>)
 8000c20:	f001 fb40 	bl	80022a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &data, 1, HAL_MAX_DELAY);
 8000c24:	1df9      	adds	r1, r7, #7
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4807      	ldr	r0, [pc, #28]	@ (8000c4c <lcd_data+0x48>)
 8000c2e:	f004 fd82 	bl	8005736 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_SET);
 8000c32:	2201      	movs	r2, #1
 8000c34:	2104      	movs	r1, #4
 8000c36:	4804      	ldr	r0, [pc, #16]	@ (8000c48 <lcd_data+0x44>)
 8000c38:	f001 fb34 	bl	80022a4 <HAL_GPIO_WritePin>
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40020c00 	.word	0x40020c00
 8000c48:	40020800 	.word	0x40020800
 8000c4c:	200001b0 	.word	0x200001b0

08000c50 <lcd_data16>:
static void lcd_data16(uint16_t value){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 8000c5a:	88fb      	ldrh	r3, [r7, #6]
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff ffce 	bl	8000c04 <lcd_data>
	lcd_data(value);
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ffc9 	bl	8000c04 <lcd_data>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <lcd_send>:
static void lcd_send(uint16_t value){
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	4603      	mov	r3, r0
 8000c82:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 8000c84:	88fb      	ldrh	r3, [r7, #6]
 8000c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d005      	beq.n	8000c9a <lcd_send+0x20>
		lcd_cmd(value);
 8000c8e:	88fb      	ldrh	r3, [r7, #6]
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff ff90 	bl	8000bb8 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 8000c98:	e004      	b.n	8000ca4 <lcd_send+0x2a>
		lcd_data(value);
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff ffb0 	bl	8000c04 <lcd_data>
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <lcd_init>:
void lcd_init(void){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
  int i;
  HAL_GPIO_WritePin(RDX_GPIO_Port, RDX_Pin, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cb8:	4817      	ldr	r0, [pc, #92]	@ (8000d18 <lcd_init+0x6c>)
 8000cba:	f001 faf3 	bl	80022a4 <HAL_GPIO_WritePin>
  HAL_Delay(100); // w nocie 10 mikro sec
 8000cbe:	2064      	movs	r0, #100	@ 0x64
 8000cc0:	f000 fe1e 	bl	8001900 <HAL_Delay>
  HAL_GPIO_WritePin(RDX_GPIO_Port, RDX_GPIO_Port, GPIO_PIN_SET);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8000cca:	4813      	ldr	r0, [pc, #76]	@ (8000d18 <lcd_init+0x6c>)
 8000ccc:	f001 faea 	bl	80022a4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000cd0:	2064      	movs	r0, #100	@ 0x64
 8000cd2:	f000 fe15 	bl	8001900 <HAL_Delay>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	e009      	b.n	8000cf0 <lcd_init+0x44>
    lcd_send(init_table[i]);
 8000cdc:	4a0f      	ldr	r2, [pc, #60]	@ (8000d1c <lcd_init+0x70>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ffc8 	bl	8000c7a <lcd_send>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	3301      	adds	r3, #1
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b35      	cmp	r3, #53	@ 0x35
 8000cf4:	d9f2      	bls.n	8000cdc <lcd_init+0x30>
  }
  HAL_Delay(200);
 8000cf6:	20c8      	movs	r0, #200	@ 0xc8
 8000cf8:	f000 fe02 	bl	8001900 <HAL_Delay>
  lcd_cmd(SLEEP_OUT);
 8000cfc:	2011      	movs	r0, #17
 8000cfe:	f7ff ff5b 	bl	8000bb8 <lcd_cmd>
  HAL_Delay(120);
 8000d02:	2078      	movs	r0, #120	@ 0x78
 8000d04:	f000 fdfc 	bl	8001900 <HAL_Delay>
  lcd_cmd(DISPLAY_ON);
 8000d08:	2029      	movs	r0, #41	@ 0x29
 8000d0a:	f7ff ff55 	bl	8000bb8 <lcd_cmd>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40020c00 	.word	0x40020c00
 8000d1c:	0800862c 	.word	0x0800862c

08000d20 <lcd_set_window>:
static void lcd_set_window(int x, int y, int width, int height){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
 8000d2c:	603b      	str	r3, [r7, #0]
	lcd_cmd(COL_ADR_SET);
 8000d2e:	202a      	movs	r0, #42	@ 0x2a
 8000d30:	f7ff ff42 	bl	8000bb8 <lcd_cmd>
	lcd_data16(x);
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff89 	bl	8000c50 <lcd_data16>
	lcd_data16(x + width - 1);
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	4413      	add	r3, r2
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff ff7e 	bl	8000c50 <lcd_data16>
	lcd_cmd(PAGE_ADR_SET);
 8000d54:	202b      	movs	r0, #43	@ 0x2b
 8000d56:	f7ff ff2f 	bl	8000bb8 <lcd_cmd>
	lcd_data16(y);
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ff76 	bl	8000c50 <lcd_data16>
	lcd_data16(y + height- 1);
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	4413      	add	r3, r2
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	3b01      	subs	r3, #1
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff6b 	bl	8000c50 <lcd_data16>
}
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <lcd_put_rectangle>:
void lcd_put_rectangle(int x,int y,int width,int height,uint16_t color){
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	60f8      	str	r0, [r7, #12]
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
 8000d8e:	603b      	str	r3, [r7, #0]
	lcd_set_window(x, y, width, height);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	68b9      	ldr	r1, [r7, #8]
 8000d96:	68f8      	ldr	r0, [r7, #12]
 8000d98:	f7ff ffc2 	bl	8000d20 <lcd_set_window>
	lcd_cmd(MEM_WRITE);
 8000d9c:	202c      	movs	r0, #44	@ 0x2c
 8000d9e:	f7ff ff0b 	bl	8000bb8 <lcd_cmd>
	for(int i=0;i<width*height;i++){
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e006      	b.n	8000db6 <lcd_put_rectangle+0x34>
		lcd_data16(color); //start pos accoridng to MADCTL setting ( i named it MAC)
 8000da8:	8c3b      	ldrh	r3, [r7, #32]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ff50 	bl	8000c50 <lcd_data16>
	for(int i=0;i<width*height;i++){
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	3301      	adds	r3, #1
 8000db4:	617b      	str	r3, [r7, #20]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	683a      	ldr	r2, [r7, #0]
 8000dba:	fb02 f303 	mul.w	r3, r2, r3
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	dbf1      	blt.n	8000da8 <lcd_put_rectangle+0x26>
	}
}
 8000dc4:	bf00      	nop
 8000dc6:	bf00      	nop
 8000dc8:	3718      	adds	r7, #24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08e      	sub	sp, #56	@ 0x38
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	2234      	movs	r2, #52	@ 0x34
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f007 fbdf 	bl	80085a0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000de2:	4b39      	ldr	r3, [pc, #228]	@ (8000ec8 <MX_LTDC_Init+0xf8>)
 8000de4:	4a39      	ldr	r2, [pc, #228]	@ (8000ecc <MX_LTDC_Init+0xfc>)
 8000de6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000de8:	4b37      	ldr	r3, [pc, #220]	@ (8000ec8 <MX_LTDC_Init+0xf8>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000dee:	4b36      	ldr	r3, [pc, #216]	@ (8000ec8 <MX_LTDC_Init+0xf8>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000df4:	4b34      	ldr	r3, [pc, #208]	@ (8000ec8 <MX_LTDC_Init+0xf8>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000dfa:	4b33      	ldr	r3, [pc, #204]	@ (8000ec8 <MX_LTDC_Init+0xf8>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000e00:	4b31      	ldr	r3, [pc, #196]	@ (8000ec8 <MX_LTDC_Init+0xf8>)
 8000e02:	2209      	movs	r2, #9
 8000e04:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000e06:	4b30      	ldr	r3, [pc, #192]	@ (8000ec8 <MX_LTDC_Init+0xf8>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000e0c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ec8 <MX_LTDC_Init+0xf8>)
 8000e0e:	221d      	movs	r2, #29
 8000e10:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000e12:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec8 <MX_LTDC_Init+0xf8>)
 8000e14:	2203      	movs	r2, #3
 8000e16:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000e18:	4b2b      	ldr	r3, [pc, #172]	@ (8000ec8 <MX_LTDC_Init+0xf8>)
 8000e1a:	f240 120d 	movw	r2, #269	@ 0x10d
 8000e1e:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000e20:	4b29      	ldr	r3, [pc, #164]	@ (8000ec8 <MX_LTDC_Init+0xf8>)
 8000e22:	f240 1243 	movw	r2, #323	@ 0x143
 8000e26:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 8000e28:	4b27      	ldr	r3, [pc, #156]	@ (8000ec8 <MX_LTDC_Init+0xf8>)
 8000e2a:	f240 1217 	movw	r2, #279	@ 0x117
 8000e2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000e30:	4b25      	ldr	r3, [pc, #148]	@ (8000ec8 <MX_LTDC_Init+0xf8>)
 8000e32:	f240 1247 	movw	r2, #327	@ 0x147
 8000e36:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000e38:	4b23      	ldr	r3, [pc, #140]	@ (8000ec8 <MX_LTDC_Init+0xf8>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000e40:	4b21      	ldr	r3, [pc, #132]	@ (8000ec8 <MX_LTDC_Init+0xf8>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000e48:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec8 <MX_LTDC_Init+0xf8>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000e50:	481d      	ldr	r0, [pc, #116]	@ (8000ec8 <MX_LTDC_Init+0xf8>)
 8000e52:	f003 f9c1 	bl	80041d8 <HAL_LTDC_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000e5c:	f000 fa7e 	bl	800135c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000e64:	23f0      	movs	r3, #240	@ 0xf0
 8000e66:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000e6c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000e70:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000e72:	2302      	movs	r3, #2
 8000e74:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000e76:	23ff      	movs	r3, #255	@ 0xff
 8000e78:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000e7e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e82:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000e84:	2307      	movs	r3, #7
 8000e86:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000e88:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 8000e8e:	23f0      	movs	r3, #240	@ 0xf0
 8000e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 8000e92:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000e96:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	2200      	movs	r2, #0
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4805      	ldr	r0, [pc, #20]	@ (8000ec8 <MX_LTDC_Init+0xf8>)
 8000eb2:	f003 fb23 	bl	80044fc <HAL_LTDC_ConfigLayer>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000ebc:	f000 fa4e 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	3738      	adds	r7, #56	@ 0x38
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000100 	.word	0x20000100
 8000ecc:	40016800 	.word	0x40016800

08000ed0 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b09a      	sub	sp, #104	@ 0x68
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eec:	2230      	movs	r2, #48	@ 0x30
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f007 fb55 	bl	80085a0 <memset>
  if(ltdcHandle->Instance==LTDC)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a85      	ldr	r2, [pc, #532]	@ (8001110 <HAL_LTDC_MspInit+0x240>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	f040 8102 	bne.w	8001106 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000f02:	2308      	movs	r3, #8
 8000f04:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000f06:	2332      	movs	r3, #50	@ 0x32
 8000f08:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f16:	4618      	mov	r0, r3
 8000f18:	f004 f990 	bl	800523c <HAL_RCCEx_PeriphCLKConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000f22:	f000 fa1b 	bl	800135c <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	623b      	str	r3, [r7, #32]
 8000f2a:	4b7a      	ldr	r3, [pc, #488]	@ (8001114 <HAL_LTDC_MspInit+0x244>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2e:	4a79      	ldr	r2, [pc, #484]	@ (8001114 <HAL_LTDC_MspInit+0x244>)
 8000f30:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f36:	4b77      	ldr	r3, [pc, #476]	@ (8001114 <HAL_LTDC_MspInit+0x244>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f3e:	623b      	str	r3, [r7, #32]
 8000f40:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
 8000f46:	4b73      	ldr	r3, [pc, #460]	@ (8001114 <HAL_LTDC_MspInit+0x244>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	4a72      	ldr	r2, [pc, #456]	@ (8001114 <HAL_LTDC_MspInit+0x244>)
 8000f4c:	f043 0320 	orr.w	r3, r3, #32
 8000f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f52:	4b70      	ldr	r3, [pc, #448]	@ (8001114 <HAL_LTDC_MspInit+0x244>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	f003 0320 	and.w	r3, r3, #32
 8000f5a:	61fb      	str	r3, [r7, #28]
 8000f5c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61bb      	str	r3, [r7, #24]
 8000f62:	4b6c      	ldr	r3, [pc, #432]	@ (8001114 <HAL_LTDC_MspInit+0x244>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	4a6b      	ldr	r2, [pc, #428]	@ (8001114 <HAL_LTDC_MspInit+0x244>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6e:	4b69      	ldr	r3, [pc, #420]	@ (8001114 <HAL_LTDC_MspInit+0x244>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	61bb      	str	r3, [r7, #24]
 8000f78:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	4b65      	ldr	r3, [pc, #404]	@ (8001114 <HAL_LTDC_MspInit+0x244>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	4a64      	ldr	r2, [pc, #400]	@ (8001114 <HAL_LTDC_MspInit+0x244>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8a:	4b62      	ldr	r3, [pc, #392]	@ (8001114 <HAL_LTDC_MspInit+0x244>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	4b5e      	ldr	r3, [pc, #376]	@ (8001114 <HAL_LTDC_MspInit+0x244>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	4a5d      	ldr	r2, [pc, #372]	@ (8001114 <HAL_LTDC_MspInit+0x244>)
 8000fa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa6:	4b5b      	ldr	r3, [pc, #364]	@ (8001114 <HAL_LTDC_MspInit+0x244>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b57      	ldr	r3, [pc, #348]	@ (8001114 <HAL_LTDC_MspInit+0x244>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	4a56      	ldr	r2, [pc, #344]	@ (8001114 <HAL_LTDC_MspInit+0x244>)
 8000fbc:	f043 0304 	orr.w	r3, r3, #4
 8000fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc2:	4b54      	ldr	r3, [pc, #336]	@ (8001114 <HAL_LTDC_MspInit+0x244>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	4b50      	ldr	r3, [pc, #320]	@ (8001114 <HAL_LTDC_MspInit+0x244>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	4a4f      	ldr	r2, [pc, #316]	@ (8001114 <HAL_LTDC_MspInit+0x244>)
 8000fd8:	f043 0308 	orr.w	r3, r3, #8
 8000fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fde:	4b4d      	ldr	r3, [pc, #308]	@ (8001114 <HAL_LTDC_MspInit+0x244>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	f003 0308 	and.w	r3, r3, #8
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000fea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fee:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ffc:	230e      	movs	r3, #14
 8000ffe:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001000:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001004:	4619      	mov	r1, r3
 8001006:	4844      	ldr	r0, [pc, #272]	@ (8001118 <HAL_LTDC_MspInit+0x248>)
 8001008:	f000 ff88 	bl	8001f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800100c:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001010:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800101e:	230e      	movs	r3, #14
 8001020:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001022:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001026:	4619      	mov	r1, r3
 8001028:	483c      	ldr	r0, [pc, #240]	@ (800111c <HAL_LTDC_MspInit+0x24c>)
 800102a:	f000 ff77 	bl	8001f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800102e:	2303      	movs	r3, #3
 8001030:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800103e:	2309      	movs	r3, #9
 8001040:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001042:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001046:	4619      	mov	r1, r3
 8001048:	4835      	ldr	r0, [pc, #212]	@ (8001120 <HAL_LTDC_MspInit+0x250>)
 800104a:	f000 ff67 	bl	8001f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800104e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001052:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	2300      	movs	r3, #0
 800105e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001060:	230e      	movs	r3, #14
 8001062:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001064:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001068:	4619      	mov	r1, r3
 800106a:	482d      	ldr	r0, [pc, #180]	@ (8001120 <HAL_LTDC_MspInit+0x250>)
 800106c:	f000 ff56 	bl	8001f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001070:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001074:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001082:	230e      	movs	r3, #14
 8001084:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001086:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800108a:	4619      	mov	r1, r3
 800108c:	4825      	ldr	r0, [pc, #148]	@ (8001124 <HAL_LTDC_MspInit+0x254>)
 800108e:	f000 ff45 	bl	8001f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001092:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001096:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010a4:	230e      	movs	r3, #14
 80010a6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010ac:	4619      	mov	r1, r3
 80010ae:	481e      	ldr	r0, [pc, #120]	@ (8001128 <HAL_LTDC_MspInit+0x258>)
 80010b0:	f000 ff34 	bl	8001f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2D6_Pin;
 80010b4:	2348      	movs	r3, #72	@ 0x48
 80010b6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2300      	movs	r3, #0
 80010c2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010c4:	230e      	movs	r3, #14
 80010c6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010cc:	4619      	mov	r1, r3
 80010ce:	4817      	ldr	r0, [pc, #92]	@ (800112c <HAL_LTDC_MspInit+0x25c>)
 80010d0:	f000 ff24 	bl	8001f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80010d4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010d8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80010e6:	2309      	movs	r3, #9
 80010e8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010ea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010ee:	4619      	mov	r1, r3
 80010f0:	480c      	ldr	r0, [pc, #48]	@ (8001124 <HAL_LTDC_MspInit+0x254>)
 80010f2:	f000 ff13 	bl	8001f1c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2105      	movs	r1, #5
 80010fa:	2058      	movs	r0, #88	@ 0x58
 80010fc:	f000 fcdc 	bl	8001ab8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001100:	2058      	movs	r0, #88	@ 0x58
 8001102:	f000 fcf5 	bl	8001af0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001106:	bf00      	nop
 8001108:	3768      	adds	r7, #104	@ 0x68
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40016800 	.word	0x40016800
 8001114:	40023800 	.word	0x40023800
 8001118:	40021400 	.word	0x40021400
 800111c:	40020000 	.word	0x40020000
 8001120:	40020400 	.word	0x40020400
 8001124:	40021800 	.word	0x40021800
 8001128:	40020800 	.word	0x40020800
 800112c:	40020c00 	.word	0x40020c00

08001130 <click_led>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void click_led(){
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	static uint8_t clicked;
	static uint32_t time;
	if(HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin)==GPIO_PIN_SET){
 8001134:	2101      	movs	r1, #1
 8001136:	4815      	ldr	r0, [pc, #84]	@ (800118c <click_led+0x5c>)
 8001138:	f001 f89c 	bl	8002274 <HAL_GPIO_ReadPin>
 800113c:	4603      	mov	r3, r0
 800113e:	2b01      	cmp	r3, #1
 8001140:	d11e      	bne.n	8001180 <click_led+0x50>
		if((HAL_GetTick()-time)>50){
 8001142:	f000 fbd1 	bl	80018e8 <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	4b11      	ldr	r3, [pc, #68]	@ (8001190 <click_led+0x60>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b32      	cmp	r3, #50	@ 0x32
 8001150:	d919      	bls.n	8001186 <click_led+0x56>
			time=HAL_GetTick();
 8001152:	f000 fbc9 	bl	80018e8 <HAL_GetTick>
 8001156:	4603      	mov	r3, r0
 8001158:	4a0d      	ldr	r2, [pc, #52]	@ (8001190 <click_led+0x60>)
 800115a:	6013      	str	r3, [r2, #0]
			if(clicked==0){
 800115c:	4b0d      	ldr	r3, [pc, #52]	@ (8001194 <click_led+0x64>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d110      	bne.n	8001186 <click_led+0x56>
				clicked=1;
 8001164:	4b0b      	ldr	r3, [pc, #44]	@ (8001194 <click_led+0x64>)
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800116a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800116e:	480a      	ldr	r0, [pc, #40]	@ (8001198 <click_led+0x68>)
 8001170:	f001 f8b1 	bl	80022d6 <HAL_GPIO_TogglePin>
				time=HAL_GetTick();
 8001174:	f000 fbb8 	bl	80018e8 <HAL_GetTick>
 8001178:	4603      	mov	r3, r0
 800117a:	4a05      	ldr	r2, [pc, #20]	@ (8001190 <click_led+0x60>)
 800117c:	6013      	str	r3, [r2, #0]
		}
	}
	else{
		clicked=0;
	}
}
 800117e:	e002      	b.n	8001186 <click_led+0x56>
		clicked=0;
 8001180:	4b04      	ldr	r3, [pc, #16]	@ (8001194 <click_led+0x64>)
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40020000 	.word	0x40020000
 8001190:	200001a8 	.word	0x200001a8
 8001194:	200001ac 	.word	0x200001ac
 8001198:	40021800 	.word	0x40021800

0800119c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a2:	f000 fb6b 	bl	800187c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a6:	f000 f85d 	bl	8001264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011aa:	f7ff fb3f 	bl	800082c <MX_GPIO_Init>
  MX_CRC_Init();
 80011ae:	f7ff f9b5 	bl	800051c <MX_CRC_Init>
  MX_DMA2D_Init();
 80011b2:	f7ff f9e9 	bl	8000588 <MX_DMA2D_Init>
  MX_FMC_Init();
 80011b6:	f7ff fa41 	bl	800063c <MX_FMC_Init>
  MX_I2C3_Init();
 80011ba:	f7ff fc53 	bl	8000a64 <MX_I2C3_Init>
  MX_LTDC_Init();
 80011be:	f7ff fe07 	bl	8000dd0 <MX_LTDC_Init>
  MX_SPI5_Init();
 80011c2:	f000 f8d1 	bl	8001368 <MX_SPI5_Init>
  MX_TIM1_Init();
 80011c6:	f000 fa4b 	bl	8001660 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80011ca:	f000 fabb 	bl	8001744 <MX_USART1_UART_Init>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  lcd_init();
 80011ce:	f7ff fd6d 	bl	8000cac <lcd_init>
  lcd_put_rectangle(0, 0, 160, 16, RED);
 80011d2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2310      	movs	r3, #16
 80011da:	22a0      	movs	r2, #160	@ 0xa0
 80011dc:	2100      	movs	r1, #0
 80011de:	2000      	movs	r0, #0
 80011e0:	f7ff fdcf 	bl	8000d82 <lcd_put_rectangle>
  lcd_put_rectangle(0, 16, 160, 16, GREEN);
 80011e4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2310      	movs	r3, #16
 80011ec:	22a0      	movs	r2, #160	@ 0xa0
 80011ee:	2110      	movs	r1, #16
 80011f0:	2000      	movs	r0, #0
 80011f2:	f7ff fdc6 	bl	8000d82 <lcd_put_rectangle>
  lcd_put_rectangle(0, 32, 160, 16, BLUE);
 80011f6:	231f      	movs	r3, #31
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	2310      	movs	r3, #16
 80011fc:	22a0      	movs	r2, #160	@ 0xa0
 80011fe:	2120      	movs	r1, #32
 8001200:	2000      	movs	r0, #0
 8001202:	f7ff fdbe 	bl	8000d82 <lcd_put_rectangle>
  lcd_put_rectangle(0, 48, 160, 16, YELLOW);
 8001206:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2310      	movs	r3, #16
 800120e:	22a0      	movs	r2, #160	@ 0xa0
 8001210:	2130      	movs	r1, #48	@ 0x30
 8001212:	2000      	movs	r0, #0
 8001214:	f7ff fdb5 	bl	8000d82 <lcd_put_rectangle>
  lcd_put_rectangle(0, 64, 160, 16, MAGENTA);
 8001218:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	2310      	movs	r3, #16
 8001220:	22a0      	movs	r2, #160	@ 0xa0
 8001222:	2140      	movs	r1, #64	@ 0x40
 8001224:	2000      	movs	r0, #0
 8001226:	f7ff fdac 	bl	8000d82 <lcd_put_rectangle>
  lcd_put_rectangle(0, 80, 160, 16, CYAN);
 800122a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	2310      	movs	r3, #16
 8001232:	22a0      	movs	r2, #160	@ 0xa0
 8001234:	2150      	movs	r1, #80	@ 0x50
 8001236:	2000      	movs	r0, #0
 8001238:	f7ff fda3 	bl	8000d82 <lcd_put_rectangle>
  lcd_put_rectangle(0, 96, 160, 16, WHITE);
 800123c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2310      	movs	r3, #16
 8001244:	22a0      	movs	r2, #160	@ 0xa0
 8001246:	2160      	movs	r1, #96	@ 0x60
 8001248:	2000      	movs	r0, #0
 800124a:	f7ff fd9a 	bl	8000d82 <lcd_put_rectangle>
  lcd_put_rectangle(0, 112, 160, 16, BLACK);
 800124e:	2300      	movs	r3, #0
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2310      	movs	r3, #16
 8001254:	22a0      	movs	r2, #160	@ 0xa0
 8001256:	2170      	movs	r1, #112	@ 0x70
 8001258:	2000      	movs	r0, #0
 800125a:	f7ff fd92 	bl	8000d82 <lcd_put_rectangle>
  while (1)
  {
	  click_led();
 800125e:	f7ff ff67 	bl	8001130 <click_led>
 8001262:	e7fc      	b.n	800125e <main+0xc2>

08001264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b094      	sub	sp, #80	@ 0x50
 8001268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126a:	f107 0320 	add.w	r3, r7, #32
 800126e:	2230      	movs	r2, #48	@ 0x30
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f007 f994 	bl	80085a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001288:	2300      	movs	r3, #0
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	4b28      	ldr	r3, [pc, #160]	@ (8001330 <SystemClock_Config+0xcc>)
 800128e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001290:	4a27      	ldr	r2, [pc, #156]	@ (8001330 <SystemClock_Config+0xcc>)
 8001292:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001296:	6413      	str	r3, [r2, #64]	@ 0x40
 8001298:	4b25      	ldr	r3, [pc, #148]	@ (8001330 <SystemClock_Config+0xcc>)
 800129a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012a4:	2300      	movs	r3, #0
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	4b22      	ldr	r3, [pc, #136]	@ (8001334 <SystemClock_Config+0xd0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012b0:	4a20      	ldr	r2, [pc, #128]	@ (8001334 <SystemClock_Config+0xd0>)
 80012b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001334 <SystemClock_Config+0xd0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012c4:	2301      	movs	r3, #1
 80012c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ce:	2302      	movs	r3, #2
 80012d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012d8:	2304      	movs	r3, #4
 80012da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80012dc:	2348      	movs	r3, #72	@ 0x48
 80012de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012e0:	2302      	movs	r3, #2
 80012e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80012e4:	2303      	movs	r3, #3
 80012e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e8:	f107 0320 	add.w	r3, r7, #32
 80012ec:	4618      	mov	r0, r3
 80012ee:	f003 fadb 	bl	80048a8 <HAL_RCC_OscConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012f8:	f000 f830 	bl	800135c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012fc:	230f      	movs	r3, #15
 80012fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001300:	2302      	movs	r3, #2
 8001302:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001308:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800130c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	2102      	movs	r1, #2
 8001318:	4618      	mov	r0, r3
 800131a:	f003 fd3d 	bl	8004d98 <HAL_RCC_ClockConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001324:	f000 f81a 	bl	800135c <Error_Handler>
  }
}
 8001328:	bf00      	nop
 800132a:	3750      	adds	r7, #80	@ 0x50
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40023800 	.word	0x40023800
 8001334:	40007000 	.word	0x40007000

08001338 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a04      	ldr	r2, [pc, #16]	@ (8001358 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d101      	bne.n	800134e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800134a:	f000 fab9 	bl	80018c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40001000 	.word	0x40001000

0800135c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001360:	b672      	cpsid	i
}
 8001362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <Error_Handler+0x8>

08001368 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 800136c:	4b17      	ldr	r3, [pc, #92]	@ (80013cc <MX_SPI5_Init+0x64>)
 800136e:	4a18      	ldr	r2, [pc, #96]	@ (80013d0 <MX_SPI5_Init+0x68>)
 8001370:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001372:	4b16      	ldr	r3, [pc, #88]	@ (80013cc <MX_SPI5_Init+0x64>)
 8001374:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001378:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800137a:	4b14      	ldr	r3, [pc, #80]	@ (80013cc <MX_SPI5_Init+0x64>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001380:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <MX_SPI5_Init+0x64>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001386:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <MX_SPI5_Init+0x64>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800138c:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <MX_SPI5_Init+0x64>)
 800138e:	2200      	movs	r2, #0
 8001390:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001392:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <MX_SPI5_Init+0x64>)
 8001394:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001398:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800139a:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <MX_SPI5_Init+0x64>)
 800139c:	2218      	movs	r2, #24
 800139e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013a0:	4b0a      	ldr	r3, [pc, #40]	@ (80013cc <MX_SPI5_Init+0x64>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80013a6:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <MX_SPI5_Init+0x64>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013ac:	4b07      	ldr	r3, [pc, #28]	@ (80013cc <MX_SPI5_Init+0x64>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80013b2:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <MX_SPI5_Init+0x64>)
 80013b4:	220a      	movs	r2, #10
 80013b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80013b8:	4804      	ldr	r0, [pc, #16]	@ (80013cc <MX_SPI5_Init+0x64>)
 80013ba:	f004 f933 	bl	8005624 <HAL_SPI_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80013c4:	f7ff ffca 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200001b0 	.word	0x200001b0
 80013d0:	40015000 	.word	0x40015000

080013d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	@ 0x28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a19      	ldr	r2, [pc, #100]	@ (8001458 <HAL_SPI_MspInit+0x84>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d12c      	bne.n	8001450 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	4b18      	ldr	r3, [pc, #96]	@ (800145c <HAL_SPI_MspInit+0x88>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fe:	4a17      	ldr	r2, [pc, #92]	@ (800145c <HAL_SPI_MspInit+0x88>)
 8001400:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001404:	6453      	str	r3, [r2, #68]	@ 0x44
 8001406:	4b15      	ldr	r3, [pc, #84]	@ (800145c <HAL_SPI_MspInit+0x88>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800140a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	4b11      	ldr	r3, [pc, #68]	@ (800145c <HAL_SPI_MspInit+0x88>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	4a10      	ldr	r2, [pc, #64]	@ (800145c <HAL_SPI_MspInit+0x88>)
 800141c:	f043 0320 	orr.w	r3, r3, #32
 8001420:	6313      	str	r3, [r2, #48]	@ 0x30
 8001422:	4b0e      	ldr	r3, [pc, #56]	@ (800145c <HAL_SPI_MspInit+0x88>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	f003 0320 	and.w	r3, r3, #32
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800142e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001440:	2305      	movs	r3, #5
 8001442:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4619      	mov	r1, r3
 800144a:	4805      	ldr	r0, [pc, #20]	@ (8001460 <HAL_SPI_MspInit+0x8c>)
 800144c:	f000 fd66 	bl	8001f1c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001450:	bf00      	nop
 8001452:	3728      	adds	r7, #40	@ 0x28
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40015000 	.word	0x40015000
 800145c:	40023800 	.word	0x40023800
 8001460:	40021400 	.word	0x40021400

08001464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	4b12      	ldr	r3, [pc, #72]	@ (80014b8 <HAL_MspInit+0x54>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001472:	4a11      	ldr	r2, [pc, #68]	@ (80014b8 <HAL_MspInit+0x54>)
 8001474:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001478:	6453      	str	r3, [r2, #68]	@ 0x44
 800147a:	4b0f      	ldr	r3, [pc, #60]	@ (80014b8 <HAL_MspInit+0x54>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	603b      	str	r3, [r7, #0]
 800148a:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <HAL_MspInit+0x54>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148e:	4a0a      	ldr	r2, [pc, #40]	@ (80014b8 <HAL_MspInit+0x54>)
 8001490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001494:	6413      	str	r3, [r2, #64]	@ 0x40
 8001496:	4b08      	ldr	r3, [pc, #32]	@ (80014b8 <HAL_MspInit+0x54>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	210f      	movs	r1, #15
 80014a6:	f06f 0001 	mvn.w	r0, #1
 80014aa:	f000 fb05 	bl	8001ab8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800

080014bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08e      	sub	sp, #56	@ 0x38
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	4b33      	ldr	r3, [pc, #204]	@ (80015a0 <HAL_InitTick+0xe4>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d4:	4a32      	ldr	r2, [pc, #200]	@ (80015a0 <HAL_InitTick+0xe4>)
 80014d6:	f043 0310 	orr.w	r3, r3, #16
 80014da:	6413      	str	r3, [r2, #64]	@ 0x40
 80014dc:	4b30      	ldr	r3, [pc, #192]	@ (80015a0 <HAL_InitTick+0xe4>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e0:	f003 0310 	and.w	r3, r3, #16
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014e8:	f107 0210 	add.w	r2, r7, #16
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4611      	mov	r1, r2
 80014f2:	4618      	mov	r0, r3
 80014f4:	f003 fe70 	bl	80051d8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80014f8:	6a3b      	ldr	r3, [r7, #32]
 80014fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80014fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d103      	bne.n	800150a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001502:	f003 fe41 	bl	8005188 <HAL_RCC_GetPCLK1Freq>
 8001506:	6378      	str	r0, [r7, #52]	@ 0x34
 8001508:	e004      	b.n	8001514 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800150a:	f003 fe3d 	bl	8005188 <HAL_RCC_GetPCLK1Freq>
 800150e:	4603      	mov	r3, r0
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001516:	4a23      	ldr	r2, [pc, #140]	@ (80015a4 <HAL_InitTick+0xe8>)
 8001518:	fba2 2303 	umull	r2, r3, r2, r3
 800151c:	0c9b      	lsrs	r3, r3, #18
 800151e:	3b01      	subs	r3, #1
 8001520:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001522:	4b21      	ldr	r3, [pc, #132]	@ (80015a8 <HAL_InitTick+0xec>)
 8001524:	4a21      	ldr	r2, [pc, #132]	@ (80015ac <HAL_InitTick+0xf0>)
 8001526:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001528:	4b1f      	ldr	r3, [pc, #124]	@ (80015a8 <HAL_InitTick+0xec>)
 800152a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800152e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001530:	4a1d      	ldr	r2, [pc, #116]	@ (80015a8 <HAL_InitTick+0xec>)
 8001532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001534:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001536:	4b1c      	ldr	r3, [pc, #112]	@ (80015a8 <HAL_InitTick+0xec>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153c:	4b1a      	ldr	r3, [pc, #104]	@ (80015a8 <HAL_InitTick+0xec>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001542:	4b19      	ldr	r3, [pc, #100]	@ (80015a8 <HAL_InitTick+0xec>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001548:	4817      	ldr	r0, [pc, #92]	@ (80015a8 <HAL_InitTick+0xec>)
 800154a:	f004 fb15 	bl	8005b78 <HAL_TIM_Base_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001554:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001558:	2b00      	cmp	r3, #0
 800155a:	d11b      	bne.n	8001594 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800155c:	4812      	ldr	r0, [pc, #72]	@ (80015a8 <HAL_InitTick+0xec>)
 800155e:	f004 fb5b 	bl	8005c18 <HAL_TIM_Base_Start_IT>
 8001562:	4603      	mov	r3, r0
 8001564:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001568:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800156c:	2b00      	cmp	r3, #0
 800156e:	d111      	bne.n	8001594 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001570:	2036      	movs	r0, #54	@ 0x36
 8001572:	f000 fabd 	bl	8001af0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b0f      	cmp	r3, #15
 800157a:	d808      	bhi.n	800158e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800157c:	2200      	movs	r2, #0
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	2036      	movs	r0, #54	@ 0x36
 8001582:	f000 fa99 	bl	8001ab8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001586:	4a0a      	ldr	r2, [pc, #40]	@ (80015b0 <HAL_InitTick+0xf4>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6013      	str	r3, [r2, #0]
 800158c:	e002      	b.n	8001594 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001594:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001598:	4618      	mov	r0, r3
 800159a:	3738      	adds	r7, #56	@ 0x38
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40023800 	.word	0x40023800
 80015a4:	431bde83 	.word	0x431bde83
 80015a8:	20000208 	.word	0x20000208
 80015ac:	40001000 	.word	0x40001000
 80015b0:	20000004 	.word	0x20000004

080015b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <NMI_Handler+0x4>

080015bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <HardFault_Handler+0x4>

080015c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <MemManage_Handler+0x4>

080015cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <BusFault_Handler+0x4>

080015d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <UsageFault_Handler+0x4>

080015dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
	...

080015ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015f0:	4802      	ldr	r0, [pc, #8]	@ (80015fc <TIM6_DAC_IRQHandler+0x10>)
 80015f2:	f004 fb81 	bl	8005cf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000208 	.word	0x20000208

08001600 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001604:	4802      	ldr	r0, [pc, #8]	@ (8001610 <OTG_HS_IRQHandler+0x10>)
 8001606:	f000 fe80 	bl	800230a <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200003d0 	.word	0x200003d0

08001614 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001618:	4802      	ldr	r0, [pc, #8]	@ (8001624 <LTDC_IRQHandler+0x10>)
 800161a:	f002 fead 	bl	8004378 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000100 	.word	0x20000100

08001628 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800162c:	4802      	ldr	r0, [pc, #8]	@ (8001638 <DMA2D_IRQHandler+0x10>)
 800162e:	f000 fad2 	bl	8001bd6 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000034 	.word	0x20000034

0800163c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001640:	4b06      	ldr	r3, [pc, #24]	@ (800165c <SystemInit+0x20>)
 8001642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001646:	4a05      	ldr	r2, [pc, #20]	@ (800165c <SystemInit+0x20>)
 8001648:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800164c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001666:	f107 0308 	add.w	r3, r7, #8
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001674:	463b      	mov	r3, r7
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800167c:	4b1e      	ldr	r3, [pc, #120]	@ (80016f8 <MX_TIM1_Init+0x98>)
 800167e:	4a1f      	ldr	r2, [pc, #124]	@ (80016fc <MX_TIM1_Init+0x9c>)
 8001680:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001682:	4b1d      	ldr	r3, [pc, #116]	@ (80016f8 <MX_TIM1_Init+0x98>)
 8001684:	2200      	movs	r2, #0
 8001686:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001688:	4b1b      	ldr	r3, [pc, #108]	@ (80016f8 <MX_TIM1_Init+0x98>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800168e:	4b1a      	ldr	r3, [pc, #104]	@ (80016f8 <MX_TIM1_Init+0x98>)
 8001690:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001694:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001696:	4b18      	ldr	r3, [pc, #96]	@ (80016f8 <MX_TIM1_Init+0x98>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800169c:	4b16      	ldr	r3, [pc, #88]	@ (80016f8 <MX_TIM1_Init+0x98>)
 800169e:	2200      	movs	r2, #0
 80016a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a2:	4b15      	ldr	r3, [pc, #84]	@ (80016f8 <MX_TIM1_Init+0x98>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016a8:	4813      	ldr	r0, [pc, #76]	@ (80016f8 <MX_TIM1_Init+0x98>)
 80016aa:	f004 fa65 	bl	8005b78 <HAL_TIM_Base_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80016b4:	f7ff fe52 	bl	800135c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016be:	f107 0308 	add.w	r3, r7, #8
 80016c2:	4619      	mov	r1, r3
 80016c4:	480c      	ldr	r0, [pc, #48]	@ (80016f8 <MX_TIM1_Init+0x98>)
 80016c6:	f004 fc07 	bl	8005ed8 <HAL_TIM_ConfigClockSource>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80016d0:	f7ff fe44 	bl	800135c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d4:	2300      	movs	r3, #0
 80016d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016dc:	463b      	mov	r3, r7
 80016de:	4619      	mov	r1, r3
 80016e0:	4805      	ldr	r0, [pc, #20]	@ (80016f8 <MX_TIM1_Init+0x98>)
 80016e2:	f004 fe2f 	bl	8006344 <HAL_TIMEx_MasterConfigSynchronization>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80016ec:	f7ff fe36 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016f0:	bf00      	nop
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000250 	.word	0x20000250
 80016fc:	40010000 	.word	0x40010000

08001700 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a0b      	ldr	r2, [pc, #44]	@ (800173c <HAL_TIM_Base_MspInit+0x3c>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d10d      	bne.n	800172e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	4b0a      	ldr	r3, [pc, #40]	@ (8001740 <HAL_TIM_Base_MspInit+0x40>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171a:	4a09      	ldr	r2, [pc, #36]	@ (8001740 <HAL_TIM_Base_MspInit+0x40>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6453      	str	r3, [r2, #68]	@ 0x44
 8001722:	4b07      	ldr	r3, [pc, #28]	@ (8001740 <HAL_TIM_Base_MspInit+0x40>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800172e:	bf00      	nop
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40010000 	.word	0x40010000
 8001740:	40023800 	.word	0x40023800

08001744 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001748:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <MX_USART1_UART_Init+0x4c>)
 800174a:	4a12      	ldr	r2, [pc, #72]	@ (8001794 <MX_USART1_UART_Init+0x50>)
 800174c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800174e:	4b10      	ldr	r3, [pc, #64]	@ (8001790 <MX_USART1_UART_Init+0x4c>)
 8001750:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001754:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001756:	4b0e      	ldr	r3, [pc, #56]	@ (8001790 <MX_USART1_UART_Init+0x4c>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800175c:	4b0c      	ldr	r3, [pc, #48]	@ (8001790 <MX_USART1_UART_Init+0x4c>)
 800175e:	2200      	movs	r2, #0
 8001760:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001762:	4b0b      	ldr	r3, [pc, #44]	@ (8001790 <MX_USART1_UART_Init+0x4c>)
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001768:	4b09      	ldr	r3, [pc, #36]	@ (8001790 <MX_USART1_UART_Init+0x4c>)
 800176a:	220c      	movs	r2, #12
 800176c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800176e:	4b08      	ldr	r3, [pc, #32]	@ (8001790 <MX_USART1_UART_Init+0x4c>)
 8001770:	2200      	movs	r2, #0
 8001772:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001774:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <MX_USART1_UART_Init+0x4c>)
 8001776:	2200      	movs	r2, #0
 8001778:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800177a:	4805      	ldr	r0, [pc, #20]	@ (8001790 <MX_USART1_UART_Init+0x4c>)
 800177c:	f004 fe72 	bl	8006464 <HAL_UART_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001786:	f7ff fde9 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000298 	.word	0x20000298
 8001794:	40011000 	.word	0x40011000

08001798 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08a      	sub	sp, #40	@ 0x28
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a19      	ldr	r2, [pc, #100]	@ (800181c <HAL_UART_MspInit+0x84>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d12c      	bne.n	8001814 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	4b18      	ldr	r3, [pc, #96]	@ (8001820 <HAL_UART_MspInit+0x88>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c2:	4a17      	ldr	r2, [pc, #92]	@ (8001820 <HAL_UART_MspInit+0x88>)
 80017c4:	f043 0310 	orr.w	r3, r3, #16
 80017c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ca:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <HAL_UART_MspInit+0x88>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ce:	f003 0310 	and.w	r3, r3, #16
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <HAL_UART_MspInit+0x88>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	4a10      	ldr	r2, [pc, #64]	@ (8001820 <HAL_UART_MspInit+0x88>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001820 <HAL_UART_MspInit+0x88>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80017f2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80017f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f8:	2302      	movs	r3, #2
 80017fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001800:	2303      	movs	r3, #3
 8001802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001804:	2307      	movs	r3, #7
 8001806:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	4619      	mov	r1, r3
 800180e:	4805      	ldr	r0, [pc, #20]	@ (8001824 <HAL_UART_MspInit+0x8c>)
 8001810:	f000 fb84 	bl	8001f1c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001814:	bf00      	nop
 8001816:	3728      	adds	r7, #40	@ 0x28
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40011000 	.word	0x40011000
 8001820:	40023800 	.word	0x40023800
 8001824:	40020000 	.word	0x40020000

08001828 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001828:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001860 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800182c:	f7ff ff06 	bl	800163c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001830:	480c      	ldr	r0, [pc, #48]	@ (8001864 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001832:	490d      	ldr	r1, [pc, #52]	@ (8001868 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001834:	4a0d      	ldr	r2, [pc, #52]	@ (800186c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001838:	e002      	b.n	8001840 <LoopCopyDataInit>

0800183a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800183a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800183c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800183e:	3304      	adds	r3, #4

08001840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001844:	d3f9      	bcc.n	800183a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001846:	4a0a      	ldr	r2, [pc, #40]	@ (8001870 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001848:	4c0a      	ldr	r4, [pc, #40]	@ (8001874 <LoopFillZerobss+0x22>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800184c:	e001      	b.n	8001852 <LoopFillZerobss>

0800184e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800184e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001850:	3204      	adds	r2, #4

08001852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001854:	d3fb      	bcc.n	800184e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001856:	f006 feab 	bl	80085b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800185a:	f7ff fc9f 	bl	800119c <main>
  bx  lr    
 800185e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001860:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001868:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800186c:	080086c0 	.word	0x080086c0
  ldr r2, =_sbss
 8001870:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001874:	200007b0 	.word	0x200007b0

08001878 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001878:	e7fe      	b.n	8001878 <ADC_IRQHandler>
	...

0800187c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001880:	4b0e      	ldr	r3, [pc, #56]	@ (80018bc <HAL_Init+0x40>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a0d      	ldr	r2, [pc, #52]	@ (80018bc <HAL_Init+0x40>)
 8001886:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800188a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800188c:	4b0b      	ldr	r3, [pc, #44]	@ (80018bc <HAL_Init+0x40>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a0a      	ldr	r2, [pc, #40]	@ (80018bc <HAL_Init+0x40>)
 8001892:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001896:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001898:	4b08      	ldr	r3, [pc, #32]	@ (80018bc <HAL_Init+0x40>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a07      	ldr	r2, [pc, #28]	@ (80018bc <HAL_Init+0x40>)
 800189e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a4:	2003      	movs	r0, #3
 80018a6:	f000 f8fc 	bl	8001aa2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018aa:	200f      	movs	r0, #15
 80018ac:	f7ff fe06 	bl	80014bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018b0:	f7ff fdd8 	bl	8001464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40023c00 	.word	0x40023c00

080018c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c4:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <HAL_IncTick+0x20>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <HAL_IncTick+0x24>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4413      	add	r3, r2
 80018d0:	4a04      	ldr	r2, [pc, #16]	@ (80018e4 <HAL_IncTick+0x24>)
 80018d2:	6013      	str	r3, [r2, #0]
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	20000008 	.word	0x20000008
 80018e4:	200002e0 	.word	0x200002e0

080018e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return uwTick;
 80018ec:	4b03      	ldr	r3, [pc, #12]	@ (80018fc <HAL_GetTick+0x14>)
 80018ee:	681b      	ldr	r3, [r3, #0]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	200002e0 	.word	0x200002e0

08001900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001908:	f7ff ffee 	bl	80018e8 <HAL_GetTick>
 800190c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001918:	d005      	beq.n	8001926 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800191a:	4b0a      	ldr	r3, [pc, #40]	@ (8001944 <HAL_Delay+0x44>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4413      	add	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001926:	bf00      	nop
 8001928:	f7ff ffde 	bl	80018e8 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	429a      	cmp	r2, r3
 8001936:	d8f7      	bhi.n	8001928 <HAL_Delay+0x28>
  {
  }
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000008 	.word	0x20000008

08001948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001958:	4b0c      	ldr	r3, [pc, #48]	@ (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001964:	4013      	ands	r3, r2
 8001966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001970:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001974:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800197a:	4a04      	ldr	r2, [pc, #16]	@ (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	60d3      	str	r3, [r2, #12]
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001994:	4b04      	ldr	r3, [pc, #16]	@ (80019a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	0a1b      	lsrs	r3, r3, #8
 800199a:	f003 0307 	and.w	r3, r3, #7
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	db0b      	blt.n	80019d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	f003 021f 	and.w	r2, r3, #31
 80019c4:	4907      	ldr	r1, [pc, #28]	@ (80019e4 <__NVIC_EnableIRQ+0x38>)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	095b      	lsrs	r3, r3, #5
 80019cc:	2001      	movs	r0, #1
 80019ce:	fa00 f202 	lsl.w	r2, r0, r2
 80019d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000e100 	.word	0xe000e100

080019e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	6039      	str	r1, [r7, #0]
 80019f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	db0a      	blt.n	8001a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	490c      	ldr	r1, [pc, #48]	@ (8001a34 <__NVIC_SetPriority+0x4c>)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	0112      	lsls	r2, r2, #4
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a10:	e00a      	b.n	8001a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	4908      	ldr	r1, [pc, #32]	@ (8001a38 <__NVIC_SetPriority+0x50>)
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	3b04      	subs	r3, #4
 8001a20:	0112      	lsls	r2, r2, #4
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	440b      	add	r3, r1
 8001a26:	761a      	strb	r2, [r3, #24]
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000e100 	.word	0xe000e100
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b089      	sub	sp, #36	@ 0x24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f1c3 0307 	rsb	r3, r3, #7
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	bf28      	it	cs
 8001a5a:	2304      	movcs	r3, #4
 8001a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3304      	adds	r3, #4
 8001a62:	2b06      	cmp	r3, #6
 8001a64:	d902      	bls.n	8001a6c <NVIC_EncodePriority+0x30>
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3b03      	subs	r3, #3
 8001a6a:	e000      	b.n	8001a6e <NVIC_EncodePriority+0x32>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43da      	mvns	r2, r3
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	401a      	ands	r2, r3
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a84:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8e:	43d9      	mvns	r1, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a94:	4313      	orrs	r3, r2
         );
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3724      	adds	r7, #36	@ 0x24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff ff4c 	bl	8001948 <__NVIC_SetPriorityGrouping>
}
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
 8001ac4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aca:	f7ff ff61 	bl	8001990 <__NVIC_GetPriorityGrouping>
 8001ace:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	68b9      	ldr	r1, [r7, #8]
 8001ad4:	6978      	ldr	r0, [r7, #20]
 8001ad6:	f7ff ffb1 	bl	8001a3c <NVIC_EncodePriority>
 8001ada:	4602      	mov	r2, r0
 8001adc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff ff80 	bl	80019e8 <__NVIC_SetPriority>
}
 8001ae8:	bf00      	nop
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff ff54 	bl	80019ac <__NVIC_EnableIRQ>
}
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e00e      	b.n	8001b3c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	795b      	ldrb	r3, [r3, #5]
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d105      	bne.n	8001b34 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7fe fd08 	bl	8000544 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e03b      	b.n	8001bce <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d106      	bne.n	8001b70 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7fe fd3e 	bl	80005ec <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2202      	movs	r2, #2
 8001b74:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b94:	f023 0107 	bic.w	r1, r3, #7
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001baa:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001bae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	68d1      	ldr	r1, [r2, #12]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6812      	ldr	r2, [r2, #0]
 8001bba:	430b      	orrs	r3, r1
 8001bbc:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b084      	sub	sp, #16
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d026      	beq.n	8001c46 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d021      	beq.n	8001c46 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c10:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c16:	f043 0201 	orr.w	r2, r3, #1
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2201      	movs	r2, #1
 8001c24:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2204      	movs	r2, #4
 8001c2a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f003 0320 	and.w	r3, r3, #32
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d026      	beq.n	8001c9e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d021      	beq.n	8001c9e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001c68:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2220      	movs	r2, #32
 8001c70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c76:	f043 0202 	orr.w	r2, r3, #2
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2204      	movs	r2, #4
 8001c82:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d026      	beq.n	8001cf6 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d021      	beq.n	8001cf6 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cc0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2208      	movs	r2, #8
 8001cc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cce:	f043 0204 	orr.w	r2, r3, #4
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2204      	movs	r2, #4
 8001cda:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d013      	beq.n	8001d28 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00e      	beq.n	8001d28 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d18:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2204      	movs	r2, #4
 8001d20:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f853 	bl	8001dce <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d024      	beq.n	8001d7c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d01f      	beq.n	8001d7c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001d4a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2202      	movs	r2, #2
 8001d52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 0310 	and.w	r3, r3, #16
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d01f      	beq.n	8001dc6 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d01a      	beq.n	8001dc6 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001d9e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2210      	movs	r2, #16
 8001da6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f80e 	bl	8001de2 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b087      	sub	sp, #28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_DMA2D_ConfigLayer+0x20>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e079      	b.n	8001f0c <HAL_DMA2D_ConfigLayer+0x114>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2202      	movs	r2, #2
 8001e24:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	011b      	lsls	r3, r3, #4
 8001e2c:	3318      	adds	r3, #24
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	4413      	add	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	041b      	lsls	r3, r3, #16
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001e42:	4b35      	ldr	r3, [pc, #212]	@ (8001f18 <HAL_DMA2D_ConfigLayer+0x120>)
 8001e44:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b0a      	cmp	r3, #10
 8001e4c:	d003      	beq.n	8001e56 <HAL_DMA2D_ConfigLayer+0x5e>
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b09      	cmp	r3, #9
 8001e54:	d107      	bne.n	8001e66 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	e005      	b.n	8001e72 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	061b      	lsls	r3, r3, #24
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d120      	bne.n	8001eba <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	ea02 0103 	and.w	r1, r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b0a      	cmp	r3, #10
 8001ea0:	d003      	beq.n	8001eaa <HAL_DMA2D_ConfigLayer+0xb2>
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b09      	cmp	r3, #9
 8001ea8:	d127      	bne.n	8001efa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001eb6:	629a      	str	r2, [r3, #40]	@ 0x28
 8001eb8:	e01f      	b.n	8001efa <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	69da      	ldr	r2, [r3, #28]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	ea02 0103 	and.w	r1, r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	6812      	ldr	r2, [r2, #0]
 8001eda:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b0a      	cmp	r3, #10
 8001ee2:	d003      	beq.n	8001eec <HAL_DMA2D_ConfigLayer+0xf4>
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b09      	cmp	r3, #9
 8001eea:	d106      	bne.n	8001efa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	68da      	ldr	r2, [r3, #12]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001ef8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	371c      	adds	r7, #28
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	ff03000f 	.word	0xff03000f

08001f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b089      	sub	sp, #36	@ 0x24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	61fb      	str	r3, [r7, #28]
 8001f36:	e177      	b.n	8002228 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f38:	2201      	movs	r2, #1
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	f040 8166 	bne.w	8002222 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d005      	beq.n	8001f6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d130      	bne.n	8001fd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	2203      	movs	r2, #3
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	091b      	lsrs	r3, r3, #4
 8001fba:	f003 0201 	and.w	r2, r3, #1
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0303 	and.w	r3, r3, #3
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	d017      	beq.n	800200c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d123      	bne.n	8002060 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	08da      	lsrs	r2, r3, #3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3208      	adds	r2, #8
 8002020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002024:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	220f      	movs	r2, #15
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	691a      	ldr	r2, [r3, #16]
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	08da      	lsrs	r2, r3, #3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	3208      	adds	r2, #8
 800205a:	69b9      	ldr	r1, [r7, #24]
 800205c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	2203      	movs	r2, #3
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 0203 	and.w	r2, r3, #3
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 80c0 	beq.w	8002222 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	4b66      	ldr	r3, [pc, #408]	@ (8002240 <HAL_GPIO_Init+0x324>)
 80020a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020aa:	4a65      	ldr	r2, [pc, #404]	@ (8002240 <HAL_GPIO_Init+0x324>)
 80020ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80020b2:	4b63      	ldr	r3, [pc, #396]	@ (8002240 <HAL_GPIO_Init+0x324>)
 80020b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020be:	4a61      	ldr	r2, [pc, #388]	@ (8002244 <HAL_GPIO_Init+0x328>)
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	089b      	lsrs	r3, r3, #2
 80020c4:	3302      	adds	r3, #2
 80020c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	220f      	movs	r2, #15
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a58      	ldr	r2, [pc, #352]	@ (8002248 <HAL_GPIO_Init+0x32c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d037      	beq.n	800215a <HAL_GPIO_Init+0x23e>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a57      	ldr	r2, [pc, #348]	@ (800224c <HAL_GPIO_Init+0x330>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d031      	beq.n	8002156 <HAL_GPIO_Init+0x23a>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a56      	ldr	r2, [pc, #344]	@ (8002250 <HAL_GPIO_Init+0x334>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d02b      	beq.n	8002152 <HAL_GPIO_Init+0x236>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a55      	ldr	r2, [pc, #340]	@ (8002254 <HAL_GPIO_Init+0x338>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d025      	beq.n	800214e <HAL_GPIO_Init+0x232>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a54      	ldr	r2, [pc, #336]	@ (8002258 <HAL_GPIO_Init+0x33c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d01f      	beq.n	800214a <HAL_GPIO_Init+0x22e>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a53      	ldr	r2, [pc, #332]	@ (800225c <HAL_GPIO_Init+0x340>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d019      	beq.n	8002146 <HAL_GPIO_Init+0x22a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a52      	ldr	r2, [pc, #328]	@ (8002260 <HAL_GPIO_Init+0x344>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d013      	beq.n	8002142 <HAL_GPIO_Init+0x226>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a51      	ldr	r2, [pc, #324]	@ (8002264 <HAL_GPIO_Init+0x348>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00d      	beq.n	800213e <HAL_GPIO_Init+0x222>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a50      	ldr	r2, [pc, #320]	@ (8002268 <HAL_GPIO_Init+0x34c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d007      	beq.n	800213a <HAL_GPIO_Init+0x21e>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a4f      	ldr	r2, [pc, #316]	@ (800226c <HAL_GPIO_Init+0x350>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d101      	bne.n	8002136 <HAL_GPIO_Init+0x21a>
 8002132:	2309      	movs	r3, #9
 8002134:	e012      	b.n	800215c <HAL_GPIO_Init+0x240>
 8002136:	230a      	movs	r3, #10
 8002138:	e010      	b.n	800215c <HAL_GPIO_Init+0x240>
 800213a:	2308      	movs	r3, #8
 800213c:	e00e      	b.n	800215c <HAL_GPIO_Init+0x240>
 800213e:	2307      	movs	r3, #7
 8002140:	e00c      	b.n	800215c <HAL_GPIO_Init+0x240>
 8002142:	2306      	movs	r3, #6
 8002144:	e00a      	b.n	800215c <HAL_GPIO_Init+0x240>
 8002146:	2305      	movs	r3, #5
 8002148:	e008      	b.n	800215c <HAL_GPIO_Init+0x240>
 800214a:	2304      	movs	r3, #4
 800214c:	e006      	b.n	800215c <HAL_GPIO_Init+0x240>
 800214e:	2303      	movs	r3, #3
 8002150:	e004      	b.n	800215c <HAL_GPIO_Init+0x240>
 8002152:	2302      	movs	r3, #2
 8002154:	e002      	b.n	800215c <HAL_GPIO_Init+0x240>
 8002156:	2301      	movs	r3, #1
 8002158:	e000      	b.n	800215c <HAL_GPIO_Init+0x240>
 800215a:	2300      	movs	r3, #0
 800215c:	69fa      	ldr	r2, [r7, #28]
 800215e:	f002 0203 	and.w	r2, r2, #3
 8002162:	0092      	lsls	r2, r2, #2
 8002164:	4093      	lsls	r3, r2
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800216c:	4935      	ldr	r1, [pc, #212]	@ (8002244 <HAL_GPIO_Init+0x328>)
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	089b      	lsrs	r3, r3, #2
 8002172:	3302      	adds	r3, #2
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800217a:	4b3d      	ldr	r3, [pc, #244]	@ (8002270 <HAL_GPIO_Init+0x354>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	43db      	mvns	r3, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4013      	ands	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800219e:	4a34      	ldr	r2, [pc, #208]	@ (8002270 <HAL_GPIO_Init+0x354>)
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021a4:	4b32      	ldr	r3, [pc, #200]	@ (8002270 <HAL_GPIO_Init+0x354>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021c8:	4a29      	ldr	r2, [pc, #164]	@ (8002270 <HAL_GPIO_Init+0x354>)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021ce:	4b28      	ldr	r3, [pc, #160]	@ (8002270 <HAL_GPIO_Init+0x354>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	43db      	mvns	r3, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4013      	ands	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021f2:	4a1f      	ldr	r2, [pc, #124]	@ (8002270 <HAL_GPIO_Init+0x354>)
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002270 <HAL_GPIO_Init+0x354>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	43db      	mvns	r3, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	4313      	orrs	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800221c:	4a14      	ldr	r2, [pc, #80]	@ (8002270 <HAL_GPIO_Init+0x354>)
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	3301      	adds	r3, #1
 8002226:	61fb      	str	r3, [r7, #28]
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	2b0f      	cmp	r3, #15
 800222c:	f67f ae84 	bls.w	8001f38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002230:	bf00      	nop
 8002232:	bf00      	nop
 8002234:	3724      	adds	r7, #36	@ 0x24
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	40023800 	.word	0x40023800
 8002244:	40013800 	.word	0x40013800
 8002248:	40020000 	.word	0x40020000
 800224c:	40020400 	.word	0x40020400
 8002250:	40020800 	.word	0x40020800
 8002254:	40020c00 	.word	0x40020c00
 8002258:	40021000 	.word	0x40021000
 800225c:	40021400 	.word	0x40021400
 8002260:	40021800 	.word	0x40021800
 8002264:	40021c00 	.word	0x40021c00
 8002268:	40022000 	.word	0x40022000
 800226c:	40022400 	.word	0x40022400
 8002270:	40013c00 	.word	0x40013c00

08002274 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691a      	ldr	r2, [r3, #16]
 8002284:	887b      	ldrh	r3, [r7, #2]
 8002286:	4013      	ands	r3, r2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d002      	beq.n	8002292 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800228c:	2301      	movs	r3, #1
 800228e:	73fb      	strb	r3, [r7, #15]
 8002290:	e001      	b.n	8002296 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002292:	2300      	movs	r3, #0
 8002294:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002296:	7bfb      	ldrb	r3, [r7, #15]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	807b      	strh	r3, [r7, #2]
 80022b0:	4613      	mov	r3, r2
 80022b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022b4:	787b      	ldrb	r3, [r7, #1]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ba:	887a      	ldrh	r2, [r7, #2]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022c0:	e003      	b.n	80022ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022c2:	887b      	ldrh	r3, [r7, #2]
 80022c4:	041a      	lsls	r2, r3, #16
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	619a      	str	r2, [r3, #24]
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b085      	sub	sp, #20
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
 80022de:	460b      	mov	r3, r1
 80022e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022e8:	887a      	ldrh	r2, [r7, #2]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4013      	ands	r3, r2
 80022ee:	041a      	lsls	r2, r3, #16
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	43d9      	mvns	r1, r3
 80022f4:	887b      	ldrh	r3, [r7, #2]
 80022f6:	400b      	ands	r3, r1
 80022f8:	431a      	orrs	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	619a      	str	r2, [r3, #24]
}
 80022fe:	bf00      	nop
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b086      	sub	sp, #24
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f004 fd37 	bl	8006d94 <USB_GetMode>
 8002326:	4603      	mov	r3, r0
 8002328:	2b01      	cmp	r3, #1
 800232a:	f040 80fb 	bne.w	8002524 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f004 fcfa 	bl	8006d2c <USB_ReadInterrupts>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 80f1 	beq.w	8002522 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f004 fcf1 	bl	8006d2c <USB_ReadInterrupts>
 800234a:	4603      	mov	r3, r0
 800234c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002350:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002354:	d104      	bne.n	8002360 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800235e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f004 fce1 	bl	8006d2c <USB_ReadInterrupts>
 800236a:	4603      	mov	r3, r0
 800236c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002370:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002374:	d104      	bne.n	8002380 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800237e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f004 fcd1 	bl	8006d2c <USB_ReadInterrupts>
 800238a:	4603      	mov	r3, r0
 800238c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002390:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002394:	d104      	bne.n	80023a0 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800239e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f004 fcc1 	bl	8006d2c <USB_ReadInterrupts>
 80023aa:	4603      	mov	r3, r0
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d103      	bne.n	80023bc <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2202      	movs	r2, #2
 80023ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f004 fcb3 	bl	8006d2c <USB_ReadInterrupts>
 80023c6:	4603      	mov	r3, r0
 80023c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80023cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023d0:	d120      	bne.n	8002414 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80023da:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d113      	bne.n	8002414 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80023ec:	2110      	movs	r1, #16
 80023ee:	6938      	ldr	r0, [r7, #16]
 80023f0:	f004 fbe4 	bl	8006bbc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80023f4:	6938      	ldr	r0, [r7, #16]
 80023f6:	f004 fc13 	bl	8006c20 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	7a5b      	ldrb	r3, [r3, #9]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d105      	bne.n	800240e <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2101      	movs	r1, #1
 8002408:	4618      	mov	r0, r3
 800240a:	f004 fcd1 	bl	8006db0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f006 f842 	bl	8008498 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f004 fc87 	bl	8006d2c <USB_ReadInterrupts>
 800241e:	4603      	mov	r3, r0
 8002420:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002424:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002428:	d102      	bne.n	8002430 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f001 fca1 	bl	8003d72 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f004 fc79 	bl	8006d2c <USB_ReadInterrupts>
 800243a:	4603      	mov	r3, r0
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	2b08      	cmp	r3, #8
 8002442:	d106      	bne.n	8002452 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f006 f80b 	bl	8008460 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2208      	movs	r2, #8
 8002450:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f004 fc68 	bl	8006d2c <USB_ReadInterrupts>
 800245c:	4603      	mov	r3, r0
 800245e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002462:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002466:	d139      	bne.n	80024dc <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f004 fcdc 	bl	8006e2a <USB_HC_ReadInterrupt>
 8002472:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	e025      	b.n	80024c6 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f003 030f 	and.w	r3, r3, #15
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	fa22 f303 	lsr.w	r3, r2, r3
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d018      	beq.n	80024c0 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	015a      	lsls	r2, r3, #5
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	4413      	add	r3, r2
 8002496:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024a4:	d106      	bne.n	80024b4 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	4619      	mov	r1, r3
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f859 	bl	8002564 <HCD_HC_IN_IRQHandler>
 80024b2:	e005      	b.n	80024c0 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	4619      	mov	r1, r3
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 febb 	bl	8003236 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	3301      	adds	r3, #1
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	795b      	ldrb	r3, [r3, #5]
 80024ca:	461a      	mov	r2, r3
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d3d3      	bcc.n	800247a <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f004 fc23 	bl	8006d2c <USB_ReadInterrupts>
 80024e6:	4603      	mov	r3, r0
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	2b10      	cmp	r3, #16
 80024ee:	d101      	bne.n	80024f4 <HAL_HCD_IRQHandler+0x1ea>
 80024f0:	2301      	movs	r3, #1
 80024f2:	e000      	b.n	80024f6 <HAL_HCD_IRQHandler+0x1ec>
 80024f4:	2300      	movs	r3, #0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d014      	beq.n	8002524 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	699a      	ldr	r2, [r3, #24]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0210 	bic.w	r2, r2, #16
 8002508:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f001 fb52 	bl	8003bb4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699a      	ldr	r2, [r3, #24]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0210 	orr.w	r2, r2, #16
 800251e:	619a      	str	r2, [r3, #24]
 8002520:	e000      	b.n	8002524 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002522:	bf00      	nop
    }
  }
}
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002538:	2b01      	cmp	r3, #1
 800253a:	d101      	bne.n	8002540 <HAL_HCD_Stop+0x16>
 800253c:	2302      	movs	r3, #2
 800253e:	e00d      	b.n	800255c <HAL_HCD_Stop+0x32>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f004 fd9d 	bl	800708c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	78fa      	ldrb	r2, [r7, #3]
 8002580:	4611      	mov	r1, r2
 8002582:	4618      	mov	r0, r3
 8002584:	f004 fbe5 	bl	8006d52 <USB_ReadChInterrupts>
 8002588:	4603      	mov	r3, r0
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	2b04      	cmp	r3, #4
 8002590:	d11a      	bne.n	80025c8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002592:	78fb      	ldrb	r3, [r7, #3]
 8002594:	015a      	lsls	r2, r3, #5
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	4413      	add	r3, r2
 800259a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800259e:	461a      	mov	r2, r3
 80025a0:	2304      	movs	r3, #4
 80025a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80025a4:	78fa      	ldrb	r2, [r7, #3]
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	1a9b      	subs	r3, r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	334d      	adds	r3, #77	@ 0x4d
 80025b4:	2207      	movs	r2, #7
 80025b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	78fa      	ldrb	r2, [r7, #3]
 80025be:	4611      	mov	r1, r2
 80025c0:	4618      	mov	r0, r3
 80025c2:	f004 fc43 	bl	8006e4c <USB_HC_Halt>
 80025c6:	e09e      	b.n	8002706 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	78fa      	ldrb	r2, [r7, #3]
 80025ce:	4611      	mov	r1, r2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f004 fbbe 	bl	8006d52 <USB_ReadChInterrupts>
 80025d6:	4603      	mov	r3, r0
 80025d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025e0:	d11b      	bne.n	800261a <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80025e2:	78fb      	ldrb	r3, [r7, #3]
 80025e4:	015a      	lsls	r2, r3, #5
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	4413      	add	r3, r2
 80025ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025ee:	461a      	mov	r2, r3
 80025f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80025f6:	78fa      	ldrb	r2, [r7, #3]
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	1a9b      	subs	r3, r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	334d      	adds	r3, #77	@ 0x4d
 8002606:	2208      	movs	r2, #8
 8002608:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	78fa      	ldrb	r2, [r7, #3]
 8002610:	4611      	mov	r1, r2
 8002612:	4618      	mov	r0, r3
 8002614:	f004 fc1a 	bl	8006e4c <USB_HC_Halt>
 8002618:	e075      	b.n	8002706 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	78fa      	ldrb	r2, [r7, #3]
 8002620:	4611      	mov	r1, r2
 8002622:	4618      	mov	r0, r3
 8002624:	f004 fb95 	bl	8006d52 <USB_ReadChInterrupts>
 8002628:	4603      	mov	r3, r0
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b08      	cmp	r3, #8
 8002630:	d11a      	bne.n	8002668 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002632:	78fb      	ldrb	r3, [r7, #3]
 8002634:	015a      	lsls	r2, r3, #5
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4413      	add	r3, r2
 800263a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800263e:	461a      	mov	r2, r3
 8002640:	2308      	movs	r3, #8
 8002642:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002644:	78fa      	ldrb	r2, [r7, #3]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	1a9b      	subs	r3, r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	334d      	adds	r3, #77	@ 0x4d
 8002654:	2206      	movs	r2, #6
 8002656:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	78fa      	ldrb	r2, [r7, #3]
 800265e:	4611      	mov	r1, r2
 8002660:	4618      	mov	r0, r3
 8002662:	f004 fbf3 	bl	8006e4c <USB_HC_Halt>
 8002666:	e04e      	b.n	8002706 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	78fa      	ldrb	r2, [r7, #3]
 800266e:	4611      	mov	r1, r2
 8002670:	4618      	mov	r0, r3
 8002672:	f004 fb6e 	bl	8006d52 <USB_ReadChInterrupts>
 8002676:	4603      	mov	r3, r0
 8002678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800267c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002680:	d11b      	bne.n	80026ba <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002682:	78fb      	ldrb	r3, [r7, #3]
 8002684:	015a      	lsls	r2, r3, #5
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4413      	add	r3, r2
 800268a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800268e:	461a      	mov	r2, r3
 8002690:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002694:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002696:	78fa      	ldrb	r2, [r7, #3]
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	1a9b      	subs	r3, r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	440b      	add	r3, r1
 80026a4:	334d      	adds	r3, #77	@ 0x4d
 80026a6:	2209      	movs	r2, #9
 80026a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	78fa      	ldrb	r2, [r7, #3]
 80026b0:	4611      	mov	r1, r2
 80026b2:	4618      	mov	r0, r3
 80026b4:	f004 fbca 	bl	8006e4c <USB_HC_Halt>
 80026b8:	e025      	b.n	8002706 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	78fa      	ldrb	r2, [r7, #3]
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f004 fb45 	bl	8006d52 <USB_ReadChInterrupts>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ce:	2b80      	cmp	r3, #128	@ 0x80
 80026d0:	d119      	bne.n	8002706 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80026d2:	78fb      	ldrb	r3, [r7, #3]
 80026d4:	015a      	lsls	r2, r3, #5
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4413      	add	r3, r2
 80026da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026de:	461a      	mov	r2, r3
 80026e0:	2380      	movs	r3, #128	@ 0x80
 80026e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80026e4:	78fa      	ldrb	r2, [r7, #3]
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	1a9b      	subs	r3, r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	334d      	adds	r3, #77	@ 0x4d
 80026f4:	2207      	movs	r2, #7
 80026f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	78fa      	ldrb	r2, [r7, #3]
 80026fe:	4611      	mov	r1, r2
 8002700:	4618      	mov	r0, r3
 8002702:	f004 fba3 	bl	8006e4c <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	78fa      	ldrb	r2, [r7, #3]
 800270c:	4611      	mov	r1, r2
 800270e:	4618      	mov	r0, r3
 8002710:	f004 fb1f 	bl	8006d52 <USB_ReadChInterrupts>
 8002714:	4603      	mov	r3, r0
 8002716:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800271a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800271e:	d112      	bne.n	8002746 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	78fa      	ldrb	r2, [r7, #3]
 8002726:	4611      	mov	r1, r2
 8002728:	4618      	mov	r0, r3
 800272a:	f004 fb8f 	bl	8006e4c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800272e:	78fb      	ldrb	r3, [r7, #3]
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4413      	add	r3, r2
 8002736:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800273a:	461a      	mov	r2, r3
 800273c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002740:	6093      	str	r3, [r2, #8]
 8002742:	f000 bd75 	b.w	8003230 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	78fa      	ldrb	r2, [r7, #3]
 800274c:	4611      	mov	r1, r2
 800274e:	4618      	mov	r0, r3
 8002750:	f004 faff 	bl	8006d52 <USB_ReadChInterrupts>
 8002754:	4603      	mov	r3, r0
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b01      	cmp	r3, #1
 800275c:	f040 8128 	bne.w	80029b0 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002760:	78fb      	ldrb	r3, [r7, #3]
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4413      	add	r3, r2
 8002768:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800276c:	461a      	mov	r2, r3
 800276e:	2320      	movs	r3, #32
 8002770:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002772:	78fa      	ldrb	r2, [r7, #3]
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	4613      	mov	r3, r2
 8002778:	011b      	lsls	r3, r3, #4
 800277a:	1a9b      	subs	r3, r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	440b      	add	r3, r1
 8002780:	331b      	adds	r3, #27
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d119      	bne.n	80027bc <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002788:	78fa      	ldrb	r2, [r7, #3]
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	1a9b      	subs	r3, r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	331b      	adds	r3, #27
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800279c:	78fb      	ldrb	r3, [r7, #3]
 800279e:	015a      	lsls	r2, r3, #5
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	4413      	add	r3, r2
 80027a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	78fa      	ldrb	r2, [r7, #3]
 80027ac:	0151      	lsls	r1, r2, #5
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	440a      	add	r2, r1
 80027b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027ba:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	799b      	ldrb	r3, [r3, #6]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d01b      	beq.n	80027fc <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80027c4:	78fa      	ldrb	r2, [r7, #3]
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	1a9b      	subs	r3, r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	3330      	adds	r3, #48	@ 0x30
 80027d4:	6819      	ldr	r1, [r3, #0]
 80027d6:	78fb      	ldrb	r3, [r7, #3]
 80027d8:	015a      	lsls	r2, r3, #5
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	4413      	add	r3, r2
 80027de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e8:	78fa      	ldrb	r2, [r7, #3]
 80027ea:	1ac9      	subs	r1, r1, r3
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	1a9b      	subs	r3, r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4403      	add	r3, r0
 80027f8:	3338      	adds	r3, #56	@ 0x38
 80027fa:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80027fc:	78fa      	ldrb	r2, [r7, #3]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	334d      	adds	r3, #77	@ 0x4d
 800280c:	2201      	movs	r2, #1
 800280e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002810:	78fa      	ldrb	r2, [r7, #3]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	3344      	adds	r3, #68	@ 0x44
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002824:	78fb      	ldrb	r3, [r7, #3]
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	4413      	add	r3, r2
 800282c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002830:	461a      	mov	r2, r3
 8002832:	2301      	movs	r3, #1
 8002834:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002836:	78fa      	ldrb	r2, [r7, #3]
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	4613      	mov	r3, r2
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	1a9b      	subs	r3, r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	440b      	add	r3, r1
 8002844:	3326      	adds	r3, #38	@ 0x26
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00a      	beq.n	8002862 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800284c:	78fa      	ldrb	r2, [r7, #3]
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	011b      	lsls	r3, r3, #4
 8002854:	1a9b      	subs	r3, r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	3326      	adds	r3, #38	@ 0x26
 800285c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800285e:	2b02      	cmp	r3, #2
 8002860:	d110      	bne.n	8002884 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	78fa      	ldrb	r2, [r7, #3]
 8002868:	4611      	mov	r1, r2
 800286a:	4618      	mov	r0, r3
 800286c:	f004 faee 	bl	8006e4c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002870:	78fb      	ldrb	r3, [r7, #3]
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4413      	add	r3, r2
 8002878:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800287c:	461a      	mov	r2, r3
 800287e:	2310      	movs	r3, #16
 8002880:	6093      	str	r3, [r2, #8]
 8002882:	e03d      	b.n	8002900 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002884:	78fa      	ldrb	r2, [r7, #3]
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	1a9b      	subs	r3, r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	3326      	adds	r3, #38	@ 0x26
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b03      	cmp	r3, #3
 8002898:	d00a      	beq.n	80028b0 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800289a:	78fa      	ldrb	r2, [r7, #3]
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	1a9b      	subs	r3, r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	3326      	adds	r3, #38	@ 0x26
 80028aa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d127      	bne.n	8002900 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80028b0:	78fb      	ldrb	r3, [r7, #3]
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	78fa      	ldrb	r2, [r7, #3]
 80028c0:	0151      	lsls	r1, r2, #5
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	440a      	add	r2, r1
 80028c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80028ca:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80028ce:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80028d0:	78fa      	ldrb	r2, [r7, #3]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	1a9b      	subs	r3, r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	334c      	adds	r3, #76	@ 0x4c
 80028e0:	2201      	movs	r2, #1
 80028e2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80028e4:	78fa      	ldrb	r2, [r7, #3]
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	1a9b      	subs	r3, r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	334c      	adds	r3, #76	@ 0x4c
 80028f4:	781a      	ldrb	r2, [r3, #0]
 80028f6:	78fb      	ldrb	r3, [r7, #3]
 80028f8:	4619      	mov	r1, r3
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f005 fdda 	bl	80084b4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	799b      	ldrb	r3, [r3, #6]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d13b      	bne.n	8002980 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002908:	78fa      	ldrb	r2, [r7, #3]
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	1a9b      	subs	r3, r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	3338      	adds	r3, #56	@ 0x38
 8002918:	6819      	ldr	r1, [r3, #0]
 800291a:	78fa      	ldrb	r2, [r7, #3]
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	1a9b      	subs	r3, r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4403      	add	r3, r0
 8002928:	3328      	adds	r3, #40	@ 0x28
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	440b      	add	r3, r1
 800292e:	1e59      	subs	r1, r3, #1
 8002930:	78fa      	ldrb	r2, [r7, #3]
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4403      	add	r3, r0
 800293e:	3328      	adds	r3, #40	@ 0x28
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	fbb1 f3f3 	udiv	r3, r1, r3
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 8470 	beq.w	8003230 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002950:	78fa      	ldrb	r2, [r7, #3]
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	333c      	adds	r3, #60	@ 0x3c
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	78fa      	ldrb	r2, [r7, #3]
 8002964:	f083 0301 	eor.w	r3, r3, #1
 8002968:	b2d8      	uxtb	r0, r3
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	1a9b      	subs	r3, r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	333c      	adds	r3, #60	@ 0x3c
 8002978:	4602      	mov	r2, r0
 800297a:	701a      	strb	r2, [r3, #0]
 800297c:	f000 bc58 	b.w	8003230 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002980:	78fa      	ldrb	r2, [r7, #3]
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	333c      	adds	r3, #60	@ 0x3c
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	78fa      	ldrb	r2, [r7, #3]
 8002994:	f083 0301 	eor.w	r3, r3, #1
 8002998:	b2d8      	uxtb	r0, r3
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	011b      	lsls	r3, r3, #4
 80029a0:	1a9b      	subs	r3, r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	333c      	adds	r3, #60	@ 0x3c
 80029a8:	4602      	mov	r2, r0
 80029aa:	701a      	strb	r2, [r3, #0]
 80029ac:	f000 bc40 	b.w	8003230 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	78fa      	ldrb	r2, [r7, #3]
 80029b6:	4611      	mov	r1, r2
 80029b8:	4618      	mov	r0, r3
 80029ba:	f004 f9ca 	bl	8006d52 <USB_ReadChInterrupts>
 80029be:	4603      	mov	r3, r0
 80029c0:	f003 0320 	and.w	r3, r3, #32
 80029c4:	2b20      	cmp	r3, #32
 80029c6:	d131      	bne.n	8002a2c <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80029c8:	78fb      	ldrb	r3, [r7, #3]
 80029ca:	015a      	lsls	r2, r3, #5
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029d4:	461a      	mov	r2, r3
 80029d6:	2320      	movs	r3, #32
 80029d8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80029da:	78fa      	ldrb	r2, [r7, #3]
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	1a9b      	subs	r3, r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	440b      	add	r3, r1
 80029e8:	331a      	adds	r3, #26
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	f040 841f 	bne.w	8003230 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80029f2:	78fa      	ldrb	r2, [r7, #3]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	1a9b      	subs	r3, r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	440b      	add	r3, r1
 8002a00:	331b      	adds	r3, #27
 8002a02:	2201      	movs	r2, #1
 8002a04:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002a06:	78fa      	ldrb	r2, [r7, #3]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	011b      	lsls	r3, r3, #4
 8002a0e:	1a9b      	subs	r3, r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	334d      	adds	r3, #77	@ 0x4d
 8002a16:	2203      	movs	r2, #3
 8002a18:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	78fa      	ldrb	r2, [r7, #3]
 8002a20:	4611      	mov	r1, r2
 8002a22:	4618      	mov	r0, r3
 8002a24:	f004 fa12 	bl	8006e4c <USB_HC_Halt>
 8002a28:	f000 bc02 	b.w	8003230 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	78fa      	ldrb	r2, [r7, #3]
 8002a32:	4611      	mov	r1, r2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f004 f98c 	bl	8006d52 <USB_ReadChInterrupts>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	f040 8305 	bne.w	8003050 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002a46:	78fb      	ldrb	r3, [r7, #3]
 8002a48:	015a      	lsls	r2, r3, #5
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a52:	461a      	mov	r2, r3
 8002a54:	2302      	movs	r3, #2
 8002a56:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002a58:	78fa      	ldrb	r2, [r7, #3]
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	1a9b      	subs	r3, r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	440b      	add	r3, r1
 8002a66:	334d      	adds	r3, #77	@ 0x4d
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d114      	bne.n	8002a98 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a6e:	78fa      	ldrb	r2, [r7, #3]
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	4613      	mov	r3, r2
 8002a74:	011b      	lsls	r3, r3, #4
 8002a76:	1a9b      	subs	r3, r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	334d      	adds	r3, #77	@ 0x4d
 8002a7e:	2202      	movs	r2, #2
 8002a80:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002a82:	78fa      	ldrb	r2, [r7, #3]
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	4613      	mov	r3, r2
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	1a9b      	subs	r3, r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	440b      	add	r3, r1
 8002a90:	334c      	adds	r3, #76	@ 0x4c
 8002a92:	2201      	movs	r2, #1
 8002a94:	701a      	strb	r2, [r3, #0]
 8002a96:	e2cc      	b.n	8003032 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002a98:	78fa      	ldrb	r2, [r7, #3]
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	1a9b      	subs	r3, r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	334d      	adds	r3, #77	@ 0x4d
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b06      	cmp	r3, #6
 8002aac:	d114      	bne.n	8002ad8 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002aae:	78fa      	ldrb	r2, [r7, #3]
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	1a9b      	subs	r3, r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	334d      	adds	r3, #77	@ 0x4d
 8002abe:	2202      	movs	r2, #2
 8002ac0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002ac2:	78fa      	ldrb	r2, [r7, #3]
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	1a9b      	subs	r3, r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	440b      	add	r3, r1
 8002ad0:	334c      	adds	r3, #76	@ 0x4c
 8002ad2:	2205      	movs	r2, #5
 8002ad4:	701a      	strb	r2, [r3, #0]
 8002ad6:	e2ac      	b.n	8003032 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002ad8:	78fa      	ldrb	r2, [r7, #3]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	1a9b      	subs	r3, r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	334d      	adds	r3, #77	@ 0x4d
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b07      	cmp	r3, #7
 8002aec:	d00b      	beq.n	8002b06 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002aee:	78fa      	ldrb	r2, [r7, #3]
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	1a9b      	subs	r3, r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	440b      	add	r3, r1
 8002afc:	334d      	adds	r3, #77	@ 0x4d
 8002afe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002b00:	2b09      	cmp	r3, #9
 8002b02:	f040 80a6 	bne.w	8002c52 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b06:	78fa      	ldrb	r2, [r7, #3]
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	1a9b      	subs	r3, r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	440b      	add	r3, r1
 8002b14:	334d      	adds	r3, #77	@ 0x4d
 8002b16:	2202      	movs	r2, #2
 8002b18:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002b1a:	78fa      	ldrb	r2, [r7, #3]
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	1a9b      	subs	r3, r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	440b      	add	r3, r1
 8002b28:	3344      	adds	r3, #68	@ 0x44
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	1c59      	adds	r1, r3, #1
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	4613      	mov	r3, r2
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	1a9b      	subs	r3, r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4403      	add	r3, r0
 8002b3a:	3344      	adds	r3, #68	@ 0x44
 8002b3c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002b3e:	78fa      	ldrb	r2, [r7, #3]
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	1a9b      	subs	r3, r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	3344      	adds	r3, #68	@ 0x44
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d943      	bls.n	8002bdc <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002b54:	78fa      	ldrb	r2, [r7, #3]
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	011b      	lsls	r3, r3, #4
 8002b5c:	1a9b      	subs	r3, r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	3344      	adds	r3, #68	@ 0x44
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002b68:	78fa      	ldrb	r2, [r7, #3]
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	011b      	lsls	r3, r3, #4
 8002b70:	1a9b      	subs	r3, r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	331a      	adds	r3, #26
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d123      	bne.n	8002bc6 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002b7e:	78fa      	ldrb	r2, [r7, #3]
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	011b      	lsls	r3, r3, #4
 8002b86:	1a9b      	subs	r3, r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	331b      	adds	r3, #27
 8002b8e:	2200      	movs	r2, #0
 8002b90:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002b92:	78fa      	ldrb	r2, [r7, #3]
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	1a9b      	subs	r3, r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	331c      	adds	r3, #28
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002ba6:	78fb      	ldrb	r3, [r7, #3]
 8002ba8:	015a      	lsls	r2, r3, #5
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	4413      	add	r3, r2
 8002bae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	78fa      	ldrb	r2, [r7, #3]
 8002bb6:	0151      	lsls	r1, r2, #5
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	440a      	add	r2, r1
 8002bbc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002bc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bc4:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002bc6:	78fa      	ldrb	r2, [r7, #3]
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	011b      	lsls	r3, r3, #4
 8002bce:	1a9b      	subs	r3, r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	334c      	adds	r3, #76	@ 0x4c
 8002bd6:	2204      	movs	r2, #4
 8002bd8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002bda:	e229      	b.n	8003030 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	1a9b      	subs	r3, r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	334c      	adds	r3, #76	@ 0x4c
 8002bec:	2202      	movs	r2, #2
 8002bee:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002bf0:	78fa      	ldrb	r2, [r7, #3]
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	1a9b      	subs	r3, r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	3326      	adds	r3, #38	@ 0x26
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00b      	beq.n	8002c1e <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c06:	78fa      	ldrb	r2, [r7, #3]
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	1a9b      	subs	r3, r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	3326      	adds	r3, #38	@ 0x26
 8002c16:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	f040 8209 	bne.w	8003030 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002c1e:	78fb      	ldrb	r3, [r7, #3]
 8002c20:	015a      	lsls	r2, r3, #5
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	4413      	add	r3, r2
 8002c26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002c34:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002c3c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002c3e:	78fb      	ldrb	r3, [r7, #3]
 8002c40:	015a      	lsls	r2, r3, #5
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	4413      	add	r3, r2
 8002c46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002c50:	e1ee      	b.n	8003030 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002c52:	78fa      	ldrb	r2, [r7, #3]
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	4613      	mov	r3, r2
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	1a9b      	subs	r3, r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	440b      	add	r3, r1
 8002c60:	334d      	adds	r3, #77	@ 0x4d
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b05      	cmp	r3, #5
 8002c66:	f040 80c8 	bne.w	8002dfa <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c6a:	78fa      	ldrb	r2, [r7, #3]
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	1a9b      	subs	r3, r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	440b      	add	r3, r1
 8002c78:	334d      	adds	r3, #77	@ 0x4d
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002c7e:	78fa      	ldrb	r2, [r7, #3]
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	011b      	lsls	r3, r3, #4
 8002c86:	1a9b      	subs	r3, r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	331b      	adds	r3, #27
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	f040 81ce 	bne.w	8003032 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002c96:	78fa      	ldrb	r2, [r7, #3]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	1a9b      	subs	r3, r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	3326      	adds	r3, #38	@ 0x26
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2b03      	cmp	r3, #3
 8002caa:	d16b      	bne.n	8002d84 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002cac:	78fa      	ldrb	r2, [r7, #3]
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	1a9b      	subs	r3, r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	3348      	adds	r3, #72	@ 0x48
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	1c59      	adds	r1, r3, #1
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	1a9b      	subs	r3, r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4403      	add	r3, r0
 8002ccc:	3348      	adds	r3, #72	@ 0x48
 8002cce:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	3348      	adds	r3, #72	@ 0x48
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d943      	bls.n	8002d6e <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002ce6:	78fa      	ldrb	r2, [r7, #3]
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	1a9b      	subs	r3, r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	3348      	adds	r3, #72	@ 0x48
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	1a9b      	subs	r3, r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	331b      	adds	r3, #27
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002d0e:	78fa      	ldrb	r2, [r7, #3]
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	1a9b      	subs	r3, r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	3344      	adds	r3, #68	@ 0x44
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d809      	bhi.n	8002d38 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002d24:	78fa      	ldrb	r2, [r7, #3]
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	1a9b      	subs	r3, r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	331c      	adds	r3, #28
 8002d34:	2201      	movs	r2, #1
 8002d36:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d38:	78fb      	ldrb	r3, [r7, #3]
 8002d3a:	015a      	lsls	r2, r3, #5
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	4413      	add	r3, r2
 8002d40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	78fa      	ldrb	r2, [r7, #3]
 8002d48:	0151      	lsls	r1, r2, #5
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	440a      	add	r2, r1
 8002d4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d56:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002d58:	78fa      	ldrb	r2, [r7, #3]
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	334c      	adds	r3, #76	@ 0x4c
 8002d68:	2204      	movs	r2, #4
 8002d6a:	701a      	strb	r2, [r3, #0]
 8002d6c:	e014      	b.n	8002d98 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d6e:	78fa      	ldrb	r2, [r7, #3]
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	011b      	lsls	r3, r3, #4
 8002d76:	1a9b      	subs	r3, r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	440b      	add	r3, r1
 8002d7c:	334c      	adds	r3, #76	@ 0x4c
 8002d7e:	2202      	movs	r2, #2
 8002d80:	701a      	strb	r2, [r3, #0]
 8002d82:	e009      	b.n	8002d98 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d84:	78fa      	ldrb	r2, [r7, #3]
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	1a9b      	subs	r3, r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	334c      	adds	r3, #76	@ 0x4c
 8002d94:	2202      	movs	r2, #2
 8002d96:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d98:	78fa      	ldrb	r2, [r7, #3]
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	1a9b      	subs	r3, r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	3326      	adds	r3, #38	@ 0x26
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00b      	beq.n	8002dc6 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002dae:	78fa      	ldrb	r2, [r7, #3]
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	4613      	mov	r3, r2
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	1a9b      	subs	r3, r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	440b      	add	r3, r1
 8002dbc:	3326      	adds	r3, #38	@ 0x26
 8002dbe:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	f040 8136 	bne.w	8003032 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002dc6:	78fb      	ldrb	r3, [r7, #3]
 8002dc8:	015a      	lsls	r2, r3, #5
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	4413      	add	r3, r2
 8002dce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002ddc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002de4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002de6:	78fb      	ldrb	r3, [r7, #3]
 8002de8:	015a      	lsls	r2, r3, #5
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	4413      	add	r3, r2
 8002dee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002df2:	461a      	mov	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6013      	str	r3, [r2, #0]
 8002df8:	e11b      	b.n	8003032 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002dfa:	78fa      	ldrb	r2, [r7, #3]
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	1a9b      	subs	r3, r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	440b      	add	r3, r1
 8002e08:	334d      	adds	r3, #77	@ 0x4d
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	f040 8081 	bne.w	8002f14 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e12:	78fa      	ldrb	r2, [r7, #3]
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	4613      	mov	r3, r2
 8002e18:	011b      	lsls	r3, r3, #4
 8002e1a:	1a9b      	subs	r3, r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	440b      	add	r3, r1
 8002e20:	334d      	adds	r3, #77	@ 0x4d
 8002e22:	2202      	movs	r2, #2
 8002e24:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002e26:	78fa      	ldrb	r2, [r7, #3]
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	1a9b      	subs	r3, r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	331b      	adds	r3, #27
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	f040 80fa 	bne.w	8003032 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e3e:	78fa      	ldrb	r2, [r7, #3]
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	4613      	mov	r3, r2
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	1a9b      	subs	r3, r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	334c      	adds	r3, #76	@ 0x4c
 8002e4e:	2202      	movs	r2, #2
 8002e50:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002e52:	78fb      	ldrb	r3, [r7, #3]
 8002e54:	015a      	lsls	r2, r3, #5
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	4413      	add	r3, r2
 8002e5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	78fa      	ldrb	r2, [r7, #3]
 8002e62:	0151      	lsls	r1, r2, #5
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	440a      	add	r2, r1
 8002e68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e70:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002e72:	78fb      	ldrb	r3, [r7, #3]
 8002e74:	015a      	lsls	r2, r3, #5
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4413      	add	r3, r2
 8002e7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	78fa      	ldrb	r2, [r7, #3]
 8002e82:	0151      	lsls	r1, r2, #5
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	440a      	add	r2, r1
 8002e88:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e90:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002e92:	78fb      	ldrb	r3, [r7, #3]
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	78fa      	ldrb	r2, [r7, #3]
 8002ea2:	0151      	lsls	r1, r2, #5
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	440a      	add	r2, r1
 8002ea8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002eac:	f023 0320 	bic.w	r3, r3, #32
 8002eb0:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	1a9b      	subs	r3, r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	3326      	adds	r3, #38	@ 0x26
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00b      	beq.n	8002ee0 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002ec8:	78fa      	ldrb	r2, [r7, #3]
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	1a9b      	subs	r3, r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	3326      	adds	r3, #38	@ 0x26
 8002ed8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	f040 80a9 	bne.w	8003032 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002ee0:	78fb      	ldrb	r3, [r7, #3]
 8002ee2:	015a      	lsls	r2, r3, #5
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002ef6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002efe:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f00:	78fb      	ldrb	r3, [r7, #3]
 8002f02:	015a      	lsls	r2, r3, #5
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	4413      	add	r3, r2
 8002f08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	e08e      	b.n	8003032 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002f14:	78fa      	ldrb	r2, [r7, #3]
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	334d      	adds	r3, #77	@ 0x4d
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d143      	bne.n	8002fb2 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f2a:	78fa      	ldrb	r2, [r7, #3]
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	1a9b      	subs	r3, r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	334d      	adds	r3, #77	@ 0x4d
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f3e:	78fa      	ldrb	r2, [r7, #3]
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	1a9b      	subs	r3, r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	440b      	add	r3, r1
 8002f4c:	334c      	adds	r3, #76	@ 0x4c
 8002f4e:	2202      	movs	r2, #2
 8002f50:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f52:	78fa      	ldrb	r2, [r7, #3]
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	011b      	lsls	r3, r3, #4
 8002f5a:	1a9b      	subs	r3, r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	440b      	add	r3, r1
 8002f60:	3326      	adds	r3, #38	@ 0x26
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00a      	beq.n	8002f7e <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002f68:	78fa      	ldrb	r2, [r7, #3]
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	1a9b      	subs	r3, r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	3326      	adds	r3, #38	@ 0x26
 8002f78:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d159      	bne.n	8003032 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f7e:	78fb      	ldrb	r3, [r7, #3]
 8002f80:	015a      	lsls	r2, r3, #5
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	4413      	add	r3, r2
 8002f86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002f94:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f9c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f9e:	78fb      	ldrb	r3, [r7, #3]
 8002fa0:	015a      	lsls	r2, r3, #5
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002faa:	461a      	mov	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6013      	str	r3, [r2, #0]
 8002fb0:	e03f      	b.n	8003032 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002fb2:	78fa      	ldrb	r2, [r7, #3]
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	334d      	adds	r3, #77	@ 0x4d
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d126      	bne.n	8003016 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002fc8:	78fa      	ldrb	r2, [r7, #3]
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	1a9b      	subs	r3, r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	334d      	adds	r3, #77	@ 0x4d
 8002fd8:	2202      	movs	r2, #2
 8002fda:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002fdc:	78fa      	ldrb	r2, [r7, #3]
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	1a9b      	subs	r3, r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	3344      	adds	r3, #68	@ 0x44
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	1c59      	adds	r1, r3, #1
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	1a9b      	subs	r3, r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4403      	add	r3, r0
 8002ffc:	3344      	adds	r3, #68	@ 0x44
 8002ffe:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003000:	78fa      	ldrb	r2, [r7, #3]
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	1a9b      	subs	r3, r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	334c      	adds	r3, #76	@ 0x4c
 8003010:	2204      	movs	r2, #4
 8003012:	701a      	strb	r2, [r3, #0]
 8003014:	e00d      	b.n	8003032 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003016:	78fa      	ldrb	r2, [r7, #3]
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	1a9b      	subs	r3, r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	334d      	adds	r3, #77	@ 0x4d
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b02      	cmp	r3, #2
 800302a:	f000 8100 	beq.w	800322e <HCD_HC_IN_IRQHandler+0xcca>
 800302e:	e000      	b.n	8003032 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003030:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003032:	78fa      	ldrb	r2, [r7, #3]
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	1a9b      	subs	r3, r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	334c      	adds	r3, #76	@ 0x4c
 8003042:	781a      	ldrb	r2, [r3, #0]
 8003044:	78fb      	ldrb	r3, [r7, #3]
 8003046:	4619      	mov	r1, r3
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f005 fa33 	bl	80084b4 <HAL_HCD_HC_NotifyURBChange_Callback>
 800304e:	e0ef      	b.n	8003230 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	78fa      	ldrb	r2, [r7, #3]
 8003056:	4611      	mov	r1, r2
 8003058:	4618      	mov	r0, r3
 800305a:	f003 fe7a 	bl	8006d52 <USB_ReadChInterrupts>
 800305e:	4603      	mov	r3, r0
 8003060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003064:	2b40      	cmp	r3, #64	@ 0x40
 8003066:	d12f      	bne.n	80030c8 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003068:	78fb      	ldrb	r3, [r7, #3]
 800306a:	015a      	lsls	r2, r3, #5
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	4413      	add	r3, r2
 8003070:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003074:	461a      	mov	r2, r3
 8003076:	2340      	movs	r3, #64	@ 0x40
 8003078:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800307a:	78fa      	ldrb	r2, [r7, #3]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	1a9b      	subs	r3, r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	334d      	adds	r3, #77	@ 0x4d
 800308a:	2205      	movs	r2, #5
 800308c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800308e:	78fa      	ldrb	r2, [r7, #3]
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	1a9b      	subs	r3, r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	440b      	add	r3, r1
 800309c:	331a      	adds	r3, #26
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d109      	bne.n	80030b8 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80030a4:	78fa      	ldrb	r2, [r7, #3]
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	1a9b      	subs	r3, r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	3344      	adds	r3, #68	@ 0x44
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	78fa      	ldrb	r2, [r7, #3]
 80030be:	4611      	mov	r1, r2
 80030c0:	4618      	mov	r0, r3
 80030c2:	f003 fec3 	bl	8006e4c <USB_HC_Halt>
 80030c6:	e0b3      	b.n	8003230 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	78fa      	ldrb	r2, [r7, #3]
 80030ce:	4611      	mov	r1, r2
 80030d0:	4618      	mov	r0, r3
 80030d2:	f003 fe3e 	bl	8006d52 <USB_ReadChInterrupts>
 80030d6:	4603      	mov	r3, r0
 80030d8:	f003 0310 	and.w	r3, r3, #16
 80030dc:	2b10      	cmp	r3, #16
 80030de:	f040 80a7 	bne.w	8003230 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80030e2:	78fa      	ldrb	r2, [r7, #3]
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	1a9b      	subs	r3, r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	440b      	add	r3, r1
 80030f0:	3326      	adds	r3, #38	@ 0x26
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d11b      	bne.n	8003130 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80030f8:	78fa      	ldrb	r2, [r7, #3]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	1a9b      	subs	r3, r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	3344      	adds	r3, #68	@ 0x44
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800310c:	78fa      	ldrb	r2, [r7, #3]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	334d      	adds	r3, #77	@ 0x4d
 800311c:	2204      	movs	r2, #4
 800311e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	78fa      	ldrb	r2, [r7, #3]
 8003126:	4611      	mov	r1, r2
 8003128:	4618      	mov	r0, r3
 800312a:	f003 fe8f 	bl	8006e4c <USB_HC_Halt>
 800312e:	e03f      	b.n	80031b0 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003130:	78fa      	ldrb	r2, [r7, #3]
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	4613      	mov	r3, r2
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	1a9b      	subs	r3, r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	3326      	adds	r3, #38	@ 0x26
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00a      	beq.n	800315c <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003146:	78fa      	ldrb	r2, [r7, #3]
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	3326      	adds	r3, #38	@ 0x26
 8003156:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003158:	2b02      	cmp	r3, #2
 800315a:	d129      	bne.n	80031b0 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800315c:	78fa      	ldrb	r2, [r7, #3]
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	4613      	mov	r3, r2
 8003162:	011b      	lsls	r3, r3, #4
 8003164:	1a9b      	subs	r3, r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	3344      	adds	r3, #68	@ 0x44
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	799b      	ldrb	r3, [r3, #6]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00a      	beq.n	800318e <HCD_HC_IN_IRQHandler+0xc2a>
 8003178:	78fa      	ldrb	r2, [r7, #3]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	331b      	adds	r3, #27
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d110      	bne.n	80031b0 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800318e:	78fa      	ldrb	r2, [r7, #3]
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	1a9b      	subs	r3, r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	334d      	adds	r3, #77	@ 0x4d
 800319e:	2204      	movs	r2, #4
 80031a0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	78fa      	ldrb	r2, [r7, #3]
 80031a8:	4611      	mov	r1, r2
 80031aa:	4618      	mov	r0, r3
 80031ac:	f003 fe4e 	bl	8006e4c <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80031b0:	78fa      	ldrb	r2, [r7, #3]
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	1a9b      	subs	r3, r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	331b      	adds	r3, #27
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d129      	bne.n	800321a <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80031c6:	78fa      	ldrb	r2, [r7, #3]
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	1a9b      	subs	r3, r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	440b      	add	r3, r1
 80031d4:	331b      	adds	r3, #27
 80031d6:	2200      	movs	r2, #0
 80031d8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80031da:	78fb      	ldrb	r3, [r7, #3]
 80031dc:	015a      	lsls	r2, r3, #5
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4413      	add	r3, r2
 80031e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	78fa      	ldrb	r2, [r7, #3]
 80031ea:	0151      	lsls	r1, r2, #5
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	440a      	add	r2, r1
 80031f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80031f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031f8:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4413      	add	r3, r2
 8003202:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	78fa      	ldrb	r2, [r7, #3]
 800320a:	0151      	lsls	r1, r2, #5
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	440a      	add	r2, r1
 8003210:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003214:	f043 0320 	orr.w	r3, r3, #32
 8003218:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800321a:	78fb      	ldrb	r3, [r7, #3]
 800321c:	015a      	lsls	r2, r3, #5
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	4413      	add	r3, r2
 8003222:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003226:	461a      	mov	r2, r3
 8003228:	2310      	movs	r3, #16
 800322a:	6093      	str	r3, [r2, #8]
 800322c:	e000      	b.n	8003230 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800322e:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003230:	3718      	adds	r7, #24
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b086      	sub	sp, #24
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
 800323e:	460b      	mov	r3, r1
 8003240:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	78fa      	ldrb	r2, [r7, #3]
 8003252:	4611      	mov	r1, r2
 8003254:	4618      	mov	r0, r3
 8003256:	f003 fd7c 	bl	8006d52 <USB_ReadChInterrupts>
 800325a:	4603      	mov	r3, r0
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b04      	cmp	r3, #4
 8003262:	d11b      	bne.n	800329c <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003264:	78fb      	ldrb	r3, [r7, #3]
 8003266:	015a      	lsls	r2, r3, #5
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	4413      	add	r3, r2
 800326c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003270:	461a      	mov	r2, r3
 8003272:	2304      	movs	r3, #4
 8003274:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003276:	78fa      	ldrb	r2, [r7, #3]
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	1a9b      	subs	r3, r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	440b      	add	r3, r1
 8003284:	334d      	adds	r3, #77	@ 0x4d
 8003286:	2207      	movs	r2, #7
 8003288:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	78fa      	ldrb	r2, [r7, #3]
 8003290:	4611      	mov	r1, r2
 8003292:	4618      	mov	r0, r3
 8003294:	f003 fdda 	bl	8006e4c <USB_HC_Halt>
 8003298:	f000 bc89 	b.w	8003bae <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	78fa      	ldrb	r2, [r7, #3]
 80032a2:	4611      	mov	r1, r2
 80032a4:	4618      	mov	r0, r3
 80032a6:	f003 fd54 	bl	8006d52 <USB_ReadChInterrupts>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f003 0320 	and.w	r3, r3, #32
 80032b0:	2b20      	cmp	r3, #32
 80032b2:	f040 8082 	bne.w	80033ba <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80032b6:	78fb      	ldrb	r3, [r7, #3]
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032c2:	461a      	mov	r2, r3
 80032c4:	2320      	movs	r3, #32
 80032c6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80032c8:	78fa      	ldrb	r2, [r7, #3]
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	4613      	mov	r3, r2
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	1a9b      	subs	r3, r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	3319      	adds	r3, #25
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d124      	bne.n	8003328 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80032de:	78fa      	ldrb	r2, [r7, #3]
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	4613      	mov	r3, r2
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	1a9b      	subs	r3, r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	440b      	add	r3, r1
 80032ec:	3319      	adds	r3, #25
 80032ee:	2200      	movs	r2, #0
 80032f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032f2:	78fa      	ldrb	r2, [r7, #3]
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	4613      	mov	r3, r2
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	1a9b      	subs	r3, r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	440b      	add	r3, r1
 8003300:	334c      	adds	r3, #76	@ 0x4c
 8003302:	2202      	movs	r2, #2
 8003304:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003306:	78fa      	ldrb	r2, [r7, #3]
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	1a9b      	subs	r3, r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	440b      	add	r3, r1
 8003314:	334d      	adds	r3, #77	@ 0x4d
 8003316:	2203      	movs	r2, #3
 8003318:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	78fa      	ldrb	r2, [r7, #3]
 8003320:	4611      	mov	r1, r2
 8003322:	4618      	mov	r0, r3
 8003324:	f003 fd92 	bl	8006e4c <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003328:	78fa      	ldrb	r2, [r7, #3]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	1a9b      	subs	r3, r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	331a      	adds	r3, #26
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b01      	cmp	r3, #1
 800333c:	f040 8437 	bne.w	8003bae <HCD_HC_OUT_IRQHandler+0x978>
 8003340:	78fa      	ldrb	r2, [r7, #3]
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	331b      	adds	r3, #27
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	f040 842b 	bne.w	8003bae <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003358:	78fa      	ldrb	r2, [r7, #3]
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	1a9b      	subs	r3, r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	3326      	adds	r3, #38	@ 0x26
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d009      	beq.n	8003382 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800336e:	78fa      	ldrb	r2, [r7, #3]
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	011b      	lsls	r3, r3, #4
 8003376:	1a9b      	subs	r3, r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	331b      	adds	r3, #27
 800337e:	2201      	movs	r2, #1
 8003380:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003382:	78fa      	ldrb	r2, [r7, #3]
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	4613      	mov	r3, r2
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	1a9b      	subs	r3, r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	334d      	adds	r3, #77	@ 0x4d
 8003392:	2203      	movs	r2, #3
 8003394:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	78fa      	ldrb	r2, [r7, #3]
 800339c:	4611      	mov	r1, r2
 800339e:	4618      	mov	r0, r3
 80033a0:	f003 fd54 	bl	8006e4c <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80033a4:	78fa      	ldrb	r2, [r7, #3]
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	4613      	mov	r3, r2
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	1a9b      	subs	r3, r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	3344      	adds	r3, #68	@ 0x44
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	e3f9      	b.n	8003bae <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	78fa      	ldrb	r2, [r7, #3]
 80033c0:	4611      	mov	r1, r2
 80033c2:	4618      	mov	r0, r3
 80033c4:	f003 fcc5 	bl	8006d52 <USB_ReadChInterrupts>
 80033c8:	4603      	mov	r3, r0
 80033ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033d2:	d111      	bne.n	80033f8 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80033d4:	78fb      	ldrb	r3, [r7, #3]
 80033d6:	015a      	lsls	r2, r3, #5
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	4413      	add	r3, r2
 80033dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033e0:	461a      	mov	r2, r3
 80033e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80033e6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	78fa      	ldrb	r2, [r7, #3]
 80033ee:	4611      	mov	r1, r2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f003 fd2b 	bl	8006e4c <USB_HC_Halt>
 80033f6:	e3da      	b.n	8003bae <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	4611      	mov	r1, r2
 8003400:	4618      	mov	r0, r3
 8003402:	f003 fca6 	bl	8006d52 <USB_ReadChInterrupts>
 8003406:	4603      	mov	r3, r0
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b01      	cmp	r3, #1
 800340e:	d168      	bne.n	80034e2 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003410:	78fa      	ldrb	r2, [r7, #3]
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	1a9b      	subs	r3, r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	3344      	adds	r3, #68	@ 0x44
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	78fa      	ldrb	r2, [r7, #3]
 800342a:	4611      	mov	r1, r2
 800342c:	4618      	mov	r0, r3
 800342e:	f003 fc90 	bl	8006d52 <USB_ReadChInterrupts>
 8003432:	4603      	mov	r3, r0
 8003434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003438:	2b40      	cmp	r3, #64	@ 0x40
 800343a:	d112      	bne.n	8003462 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800343c:	78fa      	ldrb	r2, [r7, #3]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	3319      	adds	r3, #25
 800344c:	2201      	movs	r2, #1
 800344e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003450:	78fb      	ldrb	r3, [r7, #3]
 8003452:	015a      	lsls	r2, r3, #5
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	4413      	add	r3, r2
 8003458:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800345c:	461a      	mov	r2, r3
 800345e:	2340      	movs	r3, #64	@ 0x40
 8003460:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003462:	78fa      	ldrb	r2, [r7, #3]
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	4613      	mov	r3, r2
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	440b      	add	r3, r1
 8003470:	331b      	adds	r3, #27
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d019      	beq.n	80034ac <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003478:	78fa      	ldrb	r2, [r7, #3]
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	4613      	mov	r3, r2
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	1a9b      	subs	r3, r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	331b      	adds	r3, #27
 8003488:	2200      	movs	r2, #0
 800348a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800348c:	78fb      	ldrb	r3, [r7, #3]
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	4413      	add	r3, r2
 8003494:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	0151      	lsls	r1, r2, #5
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	440a      	add	r2, r1
 80034a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80034a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034aa:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	015a      	lsls	r2, r3, #5
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	4413      	add	r3, r2
 80034b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034b8:	461a      	mov	r2, r3
 80034ba:	2301      	movs	r3, #1
 80034bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80034be:	78fa      	ldrb	r2, [r7, #3]
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	011b      	lsls	r3, r3, #4
 80034c6:	1a9b      	subs	r3, r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	334d      	adds	r3, #77	@ 0x4d
 80034ce:	2201      	movs	r2, #1
 80034d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	78fa      	ldrb	r2, [r7, #3]
 80034d8:	4611      	mov	r1, r2
 80034da:	4618      	mov	r0, r3
 80034dc:	f003 fcb6 	bl	8006e4c <USB_HC_Halt>
 80034e0:	e365      	b.n	8003bae <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	78fa      	ldrb	r2, [r7, #3]
 80034e8:	4611      	mov	r1, r2
 80034ea:	4618      	mov	r0, r3
 80034ec:	f003 fc31 	bl	8006d52 <USB_ReadChInterrupts>
 80034f0:	4603      	mov	r3, r0
 80034f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034f6:	2b40      	cmp	r3, #64	@ 0x40
 80034f8:	d139      	bne.n	800356e <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80034fa:	78fa      	ldrb	r2, [r7, #3]
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	1a9b      	subs	r3, r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	334d      	adds	r3, #77	@ 0x4d
 800350a:	2205      	movs	r2, #5
 800350c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800350e:	78fa      	ldrb	r2, [r7, #3]
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	4613      	mov	r3, r2
 8003514:	011b      	lsls	r3, r3, #4
 8003516:	1a9b      	subs	r3, r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	440b      	add	r3, r1
 800351c:	331a      	adds	r3, #26
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d109      	bne.n	8003538 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003524:	78fa      	ldrb	r2, [r7, #3]
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	1a9b      	subs	r3, r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	3319      	adds	r3, #25
 8003534:	2201      	movs	r2, #1
 8003536:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003538:	78fa      	ldrb	r2, [r7, #3]
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	1a9b      	subs	r3, r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	3344      	adds	r3, #68	@ 0x44
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	78fa      	ldrb	r2, [r7, #3]
 8003552:	4611      	mov	r1, r2
 8003554:	4618      	mov	r0, r3
 8003556:	f003 fc79 	bl	8006e4c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800355a:	78fb      	ldrb	r3, [r7, #3]
 800355c:	015a      	lsls	r2, r3, #5
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	4413      	add	r3, r2
 8003562:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003566:	461a      	mov	r2, r3
 8003568:	2340      	movs	r3, #64	@ 0x40
 800356a:	6093      	str	r3, [r2, #8]
 800356c:	e31f      	b.n	8003bae <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	78fa      	ldrb	r2, [r7, #3]
 8003574:	4611      	mov	r1, r2
 8003576:	4618      	mov	r0, r3
 8003578:	f003 fbeb 	bl	8006d52 <USB_ReadChInterrupts>
 800357c:	4603      	mov	r3, r0
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b08      	cmp	r3, #8
 8003584:	d11a      	bne.n	80035bc <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003586:	78fb      	ldrb	r3, [r7, #3]
 8003588:	015a      	lsls	r2, r3, #5
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	4413      	add	r3, r2
 800358e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003592:	461a      	mov	r2, r3
 8003594:	2308      	movs	r3, #8
 8003596:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003598:	78fa      	ldrb	r2, [r7, #3]
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	4613      	mov	r3, r2
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	1a9b      	subs	r3, r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	440b      	add	r3, r1
 80035a6:	334d      	adds	r3, #77	@ 0x4d
 80035a8:	2206      	movs	r2, #6
 80035aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	78fa      	ldrb	r2, [r7, #3]
 80035b2:	4611      	mov	r1, r2
 80035b4:	4618      	mov	r0, r3
 80035b6:	f003 fc49 	bl	8006e4c <USB_HC_Halt>
 80035ba:	e2f8      	b.n	8003bae <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	78fa      	ldrb	r2, [r7, #3]
 80035c2:	4611      	mov	r1, r2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f003 fbc4 	bl	8006d52 <USB_ReadChInterrupts>
 80035ca:	4603      	mov	r3, r0
 80035cc:	f003 0310 	and.w	r3, r3, #16
 80035d0:	2b10      	cmp	r3, #16
 80035d2:	d144      	bne.n	800365e <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80035d4:	78fa      	ldrb	r2, [r7, #3]
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	3344      	adds	r3, #68	@ 0x44
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80035e8:	78fa      	ldrb	r2, [r7, #3]
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	334d      	adds	r3, #77	@ 0x4d
 80035f8:	2204      	movs	r2, #4
 80035fa:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80035fc:	78fa      	ldrb	r2, [r7, #3]
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	1a9b      	subs	r3, r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	3319      	adds	r3, #25
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d114      	bne.n	800363c <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003612:	78fa      	ldrb	r2, [r7, #3]
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	4613      	mov	r3, r2
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	1a9b      	subs	r3, r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	440b      	add	r3, r1
 8003620:	3318      	adds	r3, #24
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d109      	bne.n	800363c <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003628:	78fa      	ldrb	r2, [r7, #3]
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	1a9b      	subs	r3, r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	3319      	adds	r3, #25
 8003638:	2201      	movs	r2, #1
 800363a:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	78fa      	ldrb	r2, [r7, #3]
 8003642:	4611      	mov	r1, r2
 8003644:	4618      	mov	r0, r3
 8003646:	f003 fc01 	bl	8006e4c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800364a:	78fb      	ldrb	r3, [r7, #3]
 800364c:	015a      	lsls	r2, r3, #5
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	4413      	add	r3, r2
 8003652:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003656:	461a      	mov	r2, r3
 8003658:	2310      	movs	r3, #16
 800365a:	6093      	str	r3, [r2, #8]
 800365c:	e2a7      	b.n	8003bae <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	78fa      	ldrb	r2, [r7, #3]
 8003664:	4611      	mov	r1, r2
 8003666:	4618      	mov	r0, r3
 8003668:	f003 fb73 	bl	8006d52 <USB_ReadChInterrupts>
 800366c:	4603      	mov	r3, r0
 800366e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003672:	2b80      	cmp	r3, #128	@ 0x80
 8003674:	f040 8083 	bne.w	800377e <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	799b      	ldrb	r3, [r3, #6]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d111      	bne.n	80036a4 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003680:	78fa      	ldrb	r2, [r7, #3]
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	1a9b      	subs	r3, r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	334d      	adds	r3, #77	@ 0x4d
 8003690:	2207      	movs	r2, #7
 8003692:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	78fa      	ldrb	r2, [r7, #3]
 800369a:	4611      	mov	r1, r2
 800369c:	4618      	mov	r0, r3
 800369e:	f003 fbd5 	bl	8006e4c <USB_HC_Halt>
 80036a2:	e062      	b.n	800376a <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80036a4:	78fa      	ldrb	r2, [r7, #3]
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	4613      	mov	r3, r2
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	1a9b      	subs	r3, r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	3344      	adds	r3, #68	@ 0x44
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	1c59      	adds	r1, r3, #1
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	4613      	mov	r3, r2
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	1a9b      	subs	r3, r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4403      	add	r3, r0
 80036c4:	3344      	adds	r3, #68	@ 0x44
 80036c6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80036c8:	78fa      	ldrb	r2, [r7, #3]
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	4613      	mov	r3, r2
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	1a9b      	subs	r3, r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	3344      	adds	r3, #68	@ 0x44
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d922      	bls.n	8003724 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80036de:	78fa      	ldrb	r2, [r7, #3]
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	4613      	mov	r3, r2
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	1a9b      	subs	r3, r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	440b      	add	r3, r1
 80036ec:	3344      	adds	r3, #68	@ 0x44
 80036ee:	2200      	movs	r2, #0
 80036f0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80036f2:	78fa      	ldrb	r2, [r7, #3]
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	4613      	mov	r3, r2
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	1a9b      	subs	r3, r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	334c      	adds	r3, #76	@ 0x4c
 8003702:	2204      	movs	r2, #4
 8003704:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003706:	78fa      	ldrb	r2, [r7, #3]
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	1a9b      	subs	r3, r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	334c      	adds	r3, #76	@ 0x4c
 8003716:	781a      	ldrb	r2, [r3, #0]
 8003718:	78fb      	ldrb	r3, [r7, #3]
 800371a:	4619      	mov	r1, r3
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f004 fec9 	bl	80084b4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003722:	e022      	b.n	800376a <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003724:	78fa      	ldrb	r2, [r7, #3]
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	4613      	mov	r3, r2
 800372a:	011b      	lsls	r3, r3, #4
 800372c:	1a9b      	subs	r3, r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	334c      	adds	r3, #76	@ 0x4c
 8003734:	2202      	movs	r2, #2
 8003736:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003738:	78fb      	ldrb	r3, [r7, #3]
 800373a:	015a      	lsls	r2, r3, #5
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	4413      	add	r3, r2
 8003740:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800374e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003756:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003758:	78fb      	ldrb	r3, [r7, #3]
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	4413      	add	r3, r2
 8003760:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003764:	461a      	mov	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800376a:	78fb      	ldrb	r3, [r7, #3]
 800376c:	015a      	lsls	r2, r3, #5
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	4413      	add	r3, r2
 8003772:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003776:	461a      	mov	r2, r3
 8003778:	2380      	movs	r3, #128	@ 0x80
 800377a:	6093      	str	r3, [r2, #8]
 800377c:	e217      	b.n	8003bae <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	78fa      	ldrb	r2, [r7, #3]
 8003784:	4611      	mov	r1, r2
 8003786:	4618      	mov	r0, r3
 8003788:	f003 fae3 	bl	8006d52 <USB_ReadChInterrupts>
 800378c:	4603      	mov	r3, r0
 800378e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003792:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003796:	d11b      	bne.n	80037d0 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003798:	78fa      	ldrb	r2, [r7, #3]
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	4613      	mov	r3, r2
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	1a9b      	subs	r3, r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	334d      	adds	r3, #77	@ 0x4d
 80037a8:	2209      	movs	r2, #9
 80037aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	78fa      	ldrb	r2, [r7, #3]
 80037b2:	4611      	mov	r1, r2
 80037b4:	4618      	mov	r0, r3
 80037b6:	f003 fb49 	bl	8006e4c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80037ba:	78fb      	ldrb	r3, [r7, #3]
 80037bc:	015a      	lsls	r2, r3, #5
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037c6:	461a      	mov	r2, r3
 80037c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037cc:	6093      	str	r3, [r2, #8]
 80037ce:	e1ee      	b.n	8003bae <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	78fa      	ldrb	r2, [r7, #3]
 80037d6:	4611      	mov	r1, r2
 80037d8:	4618      	mov	r0, r3
 80037da:	f003 faba 	bl	8006d52 <USB_ReadChInterrupts>
 80037de:	4603      	mov	r3, r0
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	f040 81df 	bne.w	8003ba8 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80037ea:	78fb      	ldrb	r3, [r7, #3]
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037f6:	461a      	mov	r2, r3
 80037f8:	2302      	movs	r3, #2
 80037fa:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80037fc:	78fa      	ldrb	r2, [r7, #3]
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	4613      	mov	r3, r2
 8003802:	011b      	lsls	r3, r3, #4
 8003804:	1a9b      	subs	r3, r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	440b      	add	r3, r1
 800380a:	334d      	adds	r3, #77	@ 0x4d
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	2b01      	cmp	r3, #1
 8003810:	f040 8093 	bne.w	800393a <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003814:	78fa      	ldrb	r2, [r7, #3]
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	4613      	mov	r3, r2
 800381a:	011b      	lsls	r3, r3, #4
 800381c:	1a9b      	subs	r3, r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	440b      	add	r3, r1
 8003822:	334d      	adds	r3, #77	@ 0x4d
 8003824:	2202      	movs	r2, #2
 8003826:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003828:	78fa      	ldrb	r2, [r7, #3]
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	4613      	mov	r3, r2
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	1a9b      	subs	r3, r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	334c      	adds	r3, #76	@ 0x4c
 8003838:	2201      	movs	r2, #1
 800383a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800383c:	78fa      	ldrb	r2, [r7, #3]
 800383e:	6879      	ldr	r1, [r7, #4]
 8003840:	4613      	mov	r3, r2
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	1a9b      	subs	r3, r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	440b      	add	r3, r1
 800384a:	3326      	adds	r3, #38	@ 0x26
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b02      	cmp	r3, #2
 8003850:	d00b      	beq.n	800386a <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003852:	78fa      	ldrb	r2, [r7, #3]
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	4613      	mov	r3, r2
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	1a9b      	subs	r3, r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	440b      	add	r3, r1
 8003860:	3326      	adds	r3, #38	@ 0x26
 8003862:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003864:	2b03      	cmp	r3, #3
 8003866:	f040 8190 	bne.w	8003b8a <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	799b      	ldrb	r3, [r3, #6]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d115      	bne.n	800389e <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003872:	78fa      	ldrb	r2, [r7, #3]
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	4613      	mov	r3, r2
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	1a9b      	subs	r3, r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	440b      	add	r3, r1
 8003880:	333d      	adds	r3, #61	@ 0x3d
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	78fa      	ldrb	r2, [r7, #3]
 8003886:	f083 0301 	eor.w	r3, r3, #1
 800388a:	b2d8      	uxtb	r0, r3
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	4613      	mov	r3, r2
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	333d      	adds	r3, #61	@ 0x3d
 800389a:	4602      	mov	r2, r0
 800389c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	799b      	ldrb	r3, [r3, #6]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	f040 8171 	bne.w	8003b8a <HCD_HC_OUT_IRQHandler+0x954>
 80038a8:	78fa      	ldrb	r2, [r7, #3]
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	4613      	mov	r3, r2
 80038ae:	011b      	lsls	r3, r3, #4
 80038b0:	1a9b      	subs	r3, r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	3334      	adds	r3, #52	@ 0x34
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 8165 	beq.w	8003b8a <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80038c0:	78fa      	ldrb	r2, [r7, #3]
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	1a9b      	subs	r3, r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	3334      	adds	r3, #52	@ 0x34
 80038d0:	6819      	ldr	r1, [r3, #0]
 80038d2:	78fa      	ldrb	r2, [r7, #3]
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	4613      	mov	r3, r2
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	1a9b      	subs	r3, r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4403      	add	r3, r0
 80038e0:	3328      	adds	r3, #40	@ 0x28
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	440b      	add	r3, r1
 80038e6:	1e59      	subs	r1, r3, #1
 80038e8:	78fa      	ldrb	r2, [r7, #3]
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	4613      	mov	r3, r2
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	1a9b      	subs	r3, r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4403      	add	r3, r0
 80038f6:	3328      	adds	r3, #40	@ 0x28
 80038f8:	881b      	ldrh	r3, [r3, #0]
 80038fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80038fe:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 813f 	beq.w	8003b8a <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800390c:	78fa      	ldrb	r2, [r7, #3]
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	4613      	mov	r3, r2
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	1a9b      	subs	r3, r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	333d      	adds	r3, #61	@ 0x3d
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	78fa      	ldrb	r2, [r7, #3]
 8003920:	f083 0301 	eor.w	r3, r3, #1
 8003924:	b2d8      	uxtb	r0, r3
 8003926:	6879      	ldr	r1, [r7, #4]
 8003928:	4613      	mov	r3, r2
 800392a:	011b      	lsls	r3, r3, #4
 800392c:	1a9b      	subs	r3, r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	440b      	add	r3, r1
 8003932:	333d      	adds	r3, #61	@ 0x3d
 8003934:	4602      	mov	r2, r0
 8003936:	701a      	strb	r2, [r3, #0]
 8003938:	e127      	b.n	8003b8a <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800393a:	78fa      	ldrb	r2, [r7, #3]
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	4613      	mov	r3, r2
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	1a9b      	subs	r3, r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	440b      	add	r3, r1
 8003948:	334d      	adds	r3, #77	@ 0x4d
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b03      	cmp	r3, #3
 800394e:	d120      	bne.n	8003992 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003950:	78fa      	ldrb	r2, [r7, #3]
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	4613      	mov	r3, r2
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	1a9b      	subs	r3, r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	334d      	adds	r3, #77	@ 0x4d
 8003960:	2202      	movs	r2, #2
 8003962:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003964:	78fa      	ldrb	r2, [r7, #3]
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	4613      	mov	r3, r2
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	1a9b      	subs	r3, r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	331b      	adds	r3, #27
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b01      	cmp	r3, #1
 8003978:	f040 8107 	bne.w	8003b8a <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800397c:	78fa      	ldrb	r2, [r7, #3]
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	4613      	mov	r3, r2
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	1a9b      	subs	r3, r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	334c      	adds	r3, #76	@ 0x4c
 800398c:	2202      	movs	r2, #2
 800398e:	701a      	strb	r2, [r3, #0]
 8003990:	e0fb      	b.n	8003b8a <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003992:	78fa      	ldrb	r2, [r7, #3]
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	4613      	mov	r3, r2
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	1a9b      	subs	r3, r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	334d      	adds	r3, #77	@ 0x4d
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d13a      	bne.n	8003a1e <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80039a8:	78fa      	ldrb	r2, [r7, #3]
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	1a9b      	subs	r3, r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	334d      	adds	r3, #77	@ 0x4d
 80039b8:	2202      	movs	r2, #2
 80039ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80039bc:	78fa      	ldrb	r2, [r7, #3]
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	4613      	mov	r3, r2
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	1a9b      	subs	r3, r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	334c      	adds	r3, #76	@ 0x4c
 80039cc:	2202      	movs	r2, #2
 80039ce:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80039d0:	78fa      	ldrb	r2, [r7, #3]
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	4613      	mov	r3, r2
 80039d6:	011b      	lsls	r3, r3, #4
 80039d8:	1a9b      	subs	r3, r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	331b      	adds	r3, #27
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	f040 80d1 	bne.w	8003b8a <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80039e8:	78fa      	ldrb	r2, [r7, #3]
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	4613      	mov	r3, r2
 80039ee:	011b      	lsls	r3, r3, #4
 80039f0:	1a9b      	subs	r3, r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	331b      	adds	r3, #27
 80039f8:	2200      	movs	r2, #0
 80039fa:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80039fc:	78fb      	ldrb	r3, [r7, #3]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	78fa      	ldrb	r2, [r7, #3]
 8003a0c:	0151      	lsls	r1, r2, #5
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	440a      	add	r2, r1
 8003a12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a1a:	6053      	str	r3, [r2, #4]
 8003a1c:	e0b5      	b.n	8003b8a <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003a1e:	78fa      	ldrb	r2, [r7, #3]
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	4613      	mov	r3, r2
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	1a9b      	subs	r3, r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	440b      	add	r3, r1
 8003a2c:	334d      	adds	r3, #77	@ 0x4d
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b05      	cmp	r3, #5
 8003a32:	d114      	bne.n	8003a5e <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a34:	78fa      	ldrb	r2, [r7, #3]
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	1a9b      	subs	r3, r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	334d      	adds	r3, #77	@ 0x4d
 8003a44:	2202      	movs	r2, #2
 8003a46:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003a48:	78fa      	ldrb	r2, [r7, #3]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	1a9b      	subs	r3, r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	334c      	adds	r3, #76	@ 0x4c
 8003a58:	2202      	movs	r2, #2
 8003a5a:	701a      	strb	r2, [r3, #0]
 8003a5c:	e095      	b.n	8003b8a <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003a5e:	78fa      	ldrb	r2, [r7, #3]
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	4613      	mov	r3, r2
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	1a9b      	subs	r3, r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	334d      	adds	r3, #77	@ 0x4d
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b06      	cmp	r3, #6
 8003a72:	d114      	bne.n	8003a9e <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a74:	78fa      	ldrb	r2, [r7, #3]
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	011b      	lsls	r3, r3, #4
 8003a7c:	1a9b      	subs	r3, r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	334d      	adds	r3, #77	@ 0x4d
 8003a84:	2202      	movs	r2, #2
 8003a86:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003a88:	78fa      	ldrb	r2, [r7, #3]
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	1a9b      	subs	r3, r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	334c      	adds	r3, #76	@ 0x4c
 8003a98:	2205      	movs	r2, #5
 8003a9a:	701a      	strb	r2, [r3, #0]
 8003a9c:	e075      	b.n	8003b8a <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003a9e:	78fa      	ldrb	r2, [r7, #3]
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	1a9b      	subs	r3, r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	440b      	add	r3, r1
 8003aac:	334d      	adds	r3, #77	@ 0x4d
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	2b07      	cmp	r3, #7
 8003ab2:	d00a      	beq.n	8003aca <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003ab4:	78fa      	ldrb	r2, [r7, #3]
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	1a9b      	subs	r3, r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	334d      	adds	r3, #77	@ 0x4d
 8003ac4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003ac6:	2b09      	cmp	r3, #9
 8003ac8:	d170      	bne.n	8003bac <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003aca:	78fa      	ldrb	r2, [r7, #3]
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	011b      	lsls	r3, r3, #4
 8003ad2:	1a9b      	subs	r3, r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	440b      	add	r3, r1
 8003ad8:	334d      	adds	r3, #77	@ 0x4d
 8003ada:	2202      	movs	r2, #2
 8003adc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003ade:	78fa      	ldrb	r2, [r7, #3]
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	1a9b      	subs	r3, r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	3344      	adds	r3, #68	@ 0x44
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	1c59      	adds	r1, r3, #1
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	4613      	mov	r3, r2
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	1a9b      	subs	r3, r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4403      	add	r3, r0
 8003afe:	3344      	adds	r3, #68	@ 0x44
 8003b00:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b02:	78fa      	ldrb	r2, [r7, #3]
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	4613      	mov	r3, r2
 8003b08:	011b      	lsls	r3, r3, #4
 8003b0a:	1a9b      	subs	r3, r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	440b      	add	r3, r1
 8003b10:	3344      	adds	r3, #68	@ 0x44
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d914      	bls.n	8003b42 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003b18:	78fa      	ldrb	r2, [r7, #3]
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	011b      	lsls	r3, r3, #4
 8003b20:	1a9b      	subs	r3, r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	3344      	adds	r3, #68	@ 0x44
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003b2c:	78fa      	ldrb	r2, [r7, #3]
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	4613      	mov	r3, r2
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	1a9b      	subs	r3, r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	334c      	adds	r3, #76	@ 0x4c
 8003b3c:	2204      	movs	r2, #4
 8003b3e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b40:	e022      	b.n	8003b88 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b42:	78fa      	ldrb	r2, [r7, #3]
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	4613      	mov	r3, r2
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	1a9b      	subs	r3, r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	440b      	add	r3, r1
 8003b50:	334c      	adds	r3, #76	@ 0x4c
 8003b52:	2202      	movs	r2, #2
 8003b54:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003b56:	78fb      	ldrb	r3, [r7, #3]
 8003b58:	015a      	lsls	r2, r3, #5
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003b6c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b74:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003b76:	78fb      	ldrb	r3, [r7, #3]
 8003b78:	015a      	lsls	r2, r3, #5
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b82:	461a      	mov	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b88:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003b8a:	78fa      	ldrb	r2, [r7, #3]
 8003b8c:	6879      	ldr	r1, [r7, #4]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	011b      	lsls	r3, r3, #4
 8003b92:	1a9b      	subs	r3, r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	440b      	add	r3, r1
 8003b98:	334c      	adds	r3, #76	@ 0x4c
 8003b9a:	781a      	ldrb	r2, [r3, #0]
 8003b9c:	78fb      	ldrb	r3, [r7, #3]
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f004 fc87 	bl	80084b4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003ba6:	e002      	b.n	8003bae <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003ba8:	bf00      	nop
 8003baa:	e000      	b.n	8003bae <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003bac:	bf00      	nop
  }
}
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08a      	sub	sp, #40	@ 0x28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	f003 030f 	and.w	r3, r3, #15
 8003bd4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	0c5b      	lsrs	r3, r3, #17
 8003bda:	f003 030f 	and.w	r3, r3, #15
 8003bde:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	091b      	lsrs	r3, r3, #4
 8003be4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003be8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d004      	beq.n	8003bfa <HCD_RXQLVL_IRQHandler+0x46>
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	2b05      	cmp	r3, #5
 8003bf4:	f000 80b6 	beq.w	8003d64 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003bf8:	e0b7      	b.n	8003d6a <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 80b3 	beq.w	8003d68 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	4613      	mov	r3, r2
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	1a9b      	subs	r3, r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	440b      	add	r3, r1
 8003c10:	332c      	adds	r3, #44	@ 0x2c
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 80a7 	beq.w	8003d68 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	011b      	lsls	r3, r3, #4
 8003c22:	1a9b      	subs	r3, r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	440b      	add	r3, r1
 8003c28:	3338      	adds	r3, #56	@ 0x38
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	18d1      	adds	r1, r2, r3
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	4613      	mov	r3, r2
 8003c36:	011b      	lsls	r3, r3, #4
 8003c38:	1a9b      	subs	r3, r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4403      	add	r3, r0
 8003c3e:	3334      	adds	r3, #52	@ 0x34
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4299      	cmp	r1, r3
 8003c44:	f200 8083 	bhi.w	8003d4e <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6818      	ldr	r0, [r3, #0]
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	4613      	mov	r3, r2
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	1a9b      	subs	r3, r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	332c      	adds	r3, #44	@ 0x2c
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	b292      	uxth	r2, r2
 8003c62:	4619      	mov	r1, r3
 8003c64:	f003 f80a 	bl	8006c7c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	011b      	lsls	r3, r3, #4
 8003c70:	1a9b      	subs	r3, r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	332c      	adds	r3, #44	@ 0x2c
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	18d1      	adds	r1, r2, r3
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	4613      	mov	r3, r2
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	1a9b      	subs	r3, r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4403      	add	r3, r0
 8003c8c:	332c      	adds	r3, #44	@ 0x2c
 8003c8e:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	4613      	mov	r3, r2
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	1a9b      	subs	r3, r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	3338      	adds	r3, #56	@ 0x38
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	18d1      	adds	r1, r2, r3
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	4613      	mov	r3, r2
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	1a9b      	subs	r3, r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4403      	add	r3, r0
 8003cb4:	3338      	adds	r3, #56	@ 0x38
 8003cb6:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	015a      	lsls	r2, r3, #5
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	0cdb      	lsrs	r3, r3, #19
 8003cc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ccc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	1a9b      	subs	r3, r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	440b      	add	r3, r1
 8003cdc:	3328      	adds	r3, #40	@ 0x28
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d13f      	bne.n	8003d68 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d03c      	beq.n	8003d68 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	015a      	lsls	r2, r3, #5
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d04:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003d0c:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	015a      	lsls	r2, r3, #5
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	4413      	add	r3, r2
 8003d16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003d20:	6879      	ldr	r1, [r7, #4]
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	4613      	mov	r3, r2
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	1a9b      	subs	r3, r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	333c      	adds	r3, #60	@ 0x3c
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	f083 0301 	eor.w	r3, r3, #1
 8003d36:	b2d8      	uxtb	r0, r3
 8003d38:	6879      	ldr	r1, [r7, #4]
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	1a9b      	subs	r3, r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	440b      	add	r3, r1
 8003d46:	333c      	adds	r3, #60	@ 0x3c
 8003d48:	4602      	mov	r2, r0
 8003d4a:	701a      	strb	r2, [r3, #0]
      break;
 8003d4c:	e00c      	b.n	8003d68 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	4613      	mov	r3, r2
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	1a9b      	subs	r3, r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	440b      	add	r3, r1
 8003d5c:	334c      	adds	r3, #76	@ 0x4c
 8003d5e:	2204      	movs	r2, #4
 8003d60:	701a      	strb	r2, [r3, #0]
      break;
 8003d62:	e001      	b.n	8003d68 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003d64:	bf00      	nop
 8003d66:	e000      	b.n	8003d6a <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003d68:	bf00      	nop
  }
}
 8003d6a:	bf00      	nop
 8003d6c:	3728      	adds	r7, #40	@ 0x28
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b086      	sub	sp, #24
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003d9e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d10b      	bne.n	8003dc2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d102      	bne.n	8003dba <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f004 fb61 	bl	800847c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f043 0302 	orr.w	r3, r3, #2
 8003dc0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f003 0308 	and.w	r3, r3, #8
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d132      	bne.n	8003e32 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	f043 0308 	orr.w	r3, r3, #8
 8003dd2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f003 0304 	and.w	r3, r3, #4
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d126      	bne.n	8003e2c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	7a5b      	ldrb	r3, [r3, #9]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d113      	bne.n	8003e0e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003dec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003df0:	d106      	bne.n	8003e00 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2102      	movs	r1, #2
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f002 ffd9 	bl	8006db0 <USB_InitFSLSPClkSel>
 8003dfe:	e011      	b.n	8003e24 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2101      	movs	r1, #1
 8003e06:	4618      	mov	r0, r3
 8003e08:	f002 ffd2 	bl	8006db0 <USB_InitFSLSPClkSel>
 8003e0c:	e00a      	b.n	8003e24 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	79db      	ldrb	r3, [r3, #7]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d106      	bne.n	8003e24 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003e22:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f004 fb57 	bl	80084d8 <HAL_HCD_PortEnabled_Callback>
 8003e2a:	e002      	b.n	8003e32 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f004 fb61 	bl	80084f4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f003 0320 	and.w	r3, r3, #32
 8003e38:	2b20      	cmp	r3, #32
 8003e3a:	d103      	bne.n	8003e44 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	f043 0320 	orr.w	r3, r3, #32
 8003e42:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	6013      	str	r3, [r2, #0]
}
 8003e50:	bf00      	nop
 8003e52:	3718      	adds	r7, #24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e12b      	b.n	80040c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d106      	bne.n	8003e84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7fc fe30 	bl	8000ae4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2224      	movs	r2, #36	@ 0x24
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 0201 	bic.w	r2, r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003eaa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003eba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ebc:	f001 f964 	bl	8005188 <HAL_RCC_GetPCLK1Freq>
 8003ec0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	4a81      	ldr	r2, [pc, #516]	@ (80040cc <HAL_I2C_Init+0x274>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d807      	bhi.n	8003edc <HAL_I2C_Init+0x84>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4a80      	ldr	r2, [pc, #512]	@ (80040d0 <HAL_I2C_Init+0x278>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	bf94      	ite	ls
 8003ed4:	2301      	movls	r3, #1
 8003ed6:	2300      	movhi	r3, #0
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	e006      	b.n	8003eea <HAL_I2C_Init+0x92>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4a7d      	ldr	r2, [pc, #500]	@ (80040d4 <HAL_I2C_Init+0x27c>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	bf94      	ite	ls
 8003ee4:	2301      	movls	r3, #1
 8003ee6:	2300      	movhi	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e0e7      	b.n	80040c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4a78      	ldr	r2, [pc, #480]	@ (80040d8 <HAL_I2C_Init+0x280>)
 8003ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8003efa:	0c9b      	lsrs	r3, r3, #18
 8003efc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	4a6a      	ldr	r2, [pc, #424]	@ (80040cc <HAL_I2C_Init+0x274>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d802      	bhi.n	8003f2c <HAL_I2C_Init+0xd4>
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	e009      	b.n	8003f40 <HAL_I2C_Init+0xe8>
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003f32:	fb02 f303 	mul.w	r3, r2, r3
 8003f36:	4a69      	ldr	r2, [pc, #420]	@ (80040dc <HAL_I2C_Init+0x284>)
 8003f38:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3c:	099b      	lsrs	r3, r3, #6
 8003f3e:	3301      	adds	r3, #1
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6812      	ldr	r2, [r2, #0]
 8003f44:	430b      	orrs	r3, r1
 8003f46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003f52:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	495c      	ldr	r1, [pc, #368]	@ (80040cc <HAL_I2C_Init+0x274>)
 8003f5c:	428b      	cmp	r3, r1
 8003f5e:	d819      	bhi.n	8003f94 <HAL_I2C_Init+0x13c>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	1e59      	subs	r1, r3, #1
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f6e:	1c59      	adds	r1, r3, #1
 8003f70:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003f74:	400b      	ands	r3, r1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <HAL_I2C_Init+0x138>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	1e59      	subs	r1, r3, #1
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f88:	3301      	adds	r3, #1
 8003f8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f8e:	e051      	b.n	8004034 <HAL_I2C_Init+0x1dc>
 8003f90:	2304      	movs	r3, #4
 8003f92:	e04f      	b.n	8004034 <HAL_I2C_Init+0x1dc>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d111      	bne.n	8003fc0 <HAL_I2C_Init+0x168>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	1e58      	subs	r0, r3, #1
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6859      	ldr	r1, [r3, #4]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	440b      	add	r3, r1
 8003faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fae:	3301      	adds	r3, #1
 8003fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	bf0c      	ite	eq
 8003fb8:	2301      	moveq	r3, #1
 8003fba:	2300      	movne	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	e012      	b.n	8003fe6 <HAL_I2C_Init+0x18e>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	1e58      	subs	r0, r3, #1
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6859      	ldr	r1, [r3, #4]
 8003fc8:	460b      	mov	r3, r1
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	440b      	add	r3, r1
 8003fce:	0099      	lsls	r1, r3, #2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	bf0c      	ite	eq
 8003fe0:	2301      	moveq	r3, #1
 8003fe2:	2300      	movne	r3, #0
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <HAL_I2C_Init+0x196>
 8003fea:	2301      	movs	r3, #1
 8003fec:	e022      	b.n	8004034 <HAL_I2C_Init+0x1dc>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10e      	bne.n	8004014 <HAL_I2C_Init+0x1bc>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	1e58      	subs	r0, r3, #1
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6859      	ldr	r1, [r3, #4]
 8003ffe:	460b      	mov	r3, r1
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	440b      	add	r3, r1
 8004004:	fbb0 f3f3 	udiv	r3, r0, r3
 8004008:	3301      	adds	r3, #1
 800400a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800400e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004012:	e00f      	b.n	8004034 <HAL_I2C_Init+0x1dc>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	1e58      	subs	r0, r3, #1
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6859      	ldr	r1, [r3, #4]
 800401c:	460b      	mov	r3, r1
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	440b      	add	r3, r1
 8004022:	0099      	lsls	r1, r3, #2
 8004024:	440b      	add	r3, r1
 8004026:	fbb0 f3f3 	udiv	r3, r0, r3
 800402a:	3301      	adds	r3, #1
 800402c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004030:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	6809      	ldr	r1, [r1, #0]
 8004038:	4313      	orrs	r3, r2
 800403a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69da      	ldr	r2, [r3, #28]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004062:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6911      	ldr	r1, [r2, #16]
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	68d2      	ldr	r2, [r2, #12]
 800406e:	4311      	orrs	r1, r2
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	6812      	ldr	r2, [r2, #0]
 8004074:	430b      	orrs	r3, r1
 8004076:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	695a      	ldr	r2, [r3, #20]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f042 0201 	orr.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2220      	movs	r2, #32
 80040ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	000186a0 	.word	0x000186a0
 80040d0:	001e847f 	.word	0x001e847f
 80040d4:	003d08ff 	.word	0x003d08ff
 80040d8:	431bde83 	.word	0x431bde83
 80040dc:	10624dd3 	.word	0x10624dd3

080040e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b20      	cmp	r3, #32
 80040f4:	d129      	bne.n	800414a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2224      	movs	r2, #36	@ 0x24
 80040fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0201 	bic.w	r2, r2, #1
 800410c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0210 	bic.w	r2, r2, #16
 800411c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f042 0201 	orr.w	r2, r2, #1
 800413c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2220      	movs	r2, #32
 8004142:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	e000      	b.n	800414c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800414a:	2302      	movs	r3, #2
  }
}
 800414c:	4618      	mov	r0, r3
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004162:	2300      	movs	r3, #0
 8004164:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b20      	cmp	r3, #32
 8004170:	d12a      	bne.n	80041c8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2224      	movs	r2, #36	@ 0x24
 8004176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0201 	bic.w	r2, r2, #1
 8004188:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004190:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004192:	89fb      	ldrh	r3, [r7, #14]
 8004194:	f023 030f 	bic.w	r3, r3, #15
 8004198:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	b29a      	uxth	r2, r3
 800419e:	89fb      	ldrh	r3, [r7, #14]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	89fa      	ldrh	r2, [r7, #14]
 80041aa:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0201 	orr.w	r2, r2, #1
 80041ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2220      	movs	r2, #32
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80041c4:	2300      	movs	r3, #0
 80041c6:	e000      	b.n	80041ca <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80041c8:	2302      	movs	r3, #2
  }
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
	...

080041d8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e0bf      	b.n	800436a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d106      	bne.n	8004204 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7fc fe66 	bl	8000ed0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2202      	movs	r2, #2
 8004208:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699a      	ldr	r2, [r3, #24]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800421a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6999      	ldr	r1, [r3, #24]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004230:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6899      	ldr	r1, [r3, #8]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	4b4a      	ldr	r3, [pc, #296]	@ (8004374 <HAL_LTDC_Init+0x19c>)
 800424c:	400b      	ands	r3, r1
 800424e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	041b      	lsls	r3, r3, #16
 8004256:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6899      	ldr	r1, [r3, #8]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699a      	ldr	r2, [r3, #24]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	431a      	orrs	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68d9      	ldr	r1, [r3, #12]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	4b3e      	ldr	r3, [pc, #248]	@ (8004374 <HAL_LTDC_Init+0x19c>)
 800427a:	400b      	ands	r3, r1
 800427c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	041b      	lsls	r3, r3, #16
 8004284:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68d9      	ldr	r1, [r3, #12]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a1a      	ldr	r2, [r3, #32]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	431a      	orrs	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6919      	ldr	r1, [r3, #16]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	4b33      	ldr	r3, [pc, #204]	@ (8004374 <HAL_LTDC_Init+0x19c>)
 80042a8:	400b      	ands	r3, r1
 80042aa:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b0:	041b      	lsls	r3, r3, #16
 80042b2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6919      	ldr	r1, [r3, #16]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	431a      	orrs	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6959      	ldr	r1, [r3, #20]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	4b27      	ldr	r3, [pc, #156]	@ (8004374 <HAL_LTDC_Init+0x19c>)
 80042d6:	400b      	ands	r3, r1
 80042d8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042de:	041b      	lsls	r3, r3, #16
 80042e0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6959      	ldr	r1, [r3, #20]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	431a      	orrs	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042fe:	021b      	lsls	r3, r3, #8
 8004300:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004308:	041b      	lsls	r3, r3, #16
 800430a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800431a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4313      	orrs	r3, r2
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0206 	orr.w	r2, r2, #6
 8004346:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	699a      	ldr	r2, [r3, #24]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0201 	orr.w	r2, r2, #1
 8004356:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	f000f800 	.word	0xf000f800

08004378 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004386:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800438e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f003 0304 	and.w	r3, r3, #4
 8004396:	2b00      	cmp	r3, #0
 8004398:	d023      	beq.n	80043e2 <HAL_LTDC_IRQHandler+0x6a>
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d01e      	beq.n	80043e2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 0204 	bic.w	r2, r2, #4
 80043b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2204      	movs	r2, #4
 80043ba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80043c2:	f043 0201 	orr.w	r2, r3, #1
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2204      	movs	r2, #4
 80043d0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f86f 	bl	80044c0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d023      	beq.n	8004434 <HAL_LTDC_IRQHandler+0xbc>
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d01e      	beq.n	8004434 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0202 	bic.w	r2, r2, #2
 8004404:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2202      	movs	r2, #2
 800440c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004414:	f043 0202 	orr.w	r2, r3, #2
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2204      	movs	r2, #4
 8004422:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f846 	bl	80044c0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d01b      	beq.n	8004476 <HAL_LTDC_IRQHandler+0xfe>
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	d016      	beq.n	8004476 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 0201 	bic.w	r2, r2, #1
 8004456:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2201      	movs	r2, #1
 800445e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f82f 	bl	80044d4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f003 0308 	and.w	r3, r3, #8
 800447c:	2b00      	cmp	r3, #0
 800447e:	d01b      	beq.n	80044b8 <HAL_LTDC_IRQHandler+0x140>
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	f003 0308 	and.w	r3, r3, #8
 8004486:	2b00      	cmp	r3, #0
 8004488:	d016      	beq.n	80044b8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0208 	bic.w	r2, r2, #8
 8004498:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2208      	movs	r2, #8
 80044a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f818 	bl	80044e8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80044b8:	bf00      	nop
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80044fc:	b5b0      	push	{r4, r5, r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800450e:	2b01      	cmp	r3, #1
 8004510:	d101      	bne.n	8004516 <HAL_LTDC_ConfigLayer+0x1a>
 8004512:	2302      	movs	r3, #2
 8004514:	e02c      	b.n	8004570 <HAL_LTDC_ConfigLayer+0x74>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2202      	movs	r2, #2
 8004522:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2134      	movs	r1, #52	@ 0x34
 800452c:	fb01 f303 	mul.w	r3, r1, r3
 8004530:	4413      	add	r3, r2
 8004532:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	4614      	mov	r4, r2
 800453a:	461d      	mov	r5, r3
 800453c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800453e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004548:	682b      	ldr	r3, [r5, #0]
 800454a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	68b9      	ldr	r1, [r7, #8]
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 f811 	bl	8004578 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2201      	movs	r2, #1
 800455c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bdb0      	pop	{r4, r5, r7, pc}

08004578 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004578:	b480      	push	{r7}
 800457a:	b089      	sub	sp, #36	@ 0x24
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	0c1b      	lsrs	r3, r3, #16
 8004590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004594:	4413      	add	r3, r2
 8004596:	041b      	lsls	r3, r3, #16
 8004598:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	461a      	mov	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	01db      	lsls	r3, r3, #7
 80045a4:	4413      	add	r3, r2
 80045a6:	3384      	adds	r3, #132	@ 0x84
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	6812      	ldr	r2, [r2, #0]
 80045ae:	4611      	mov	r1, r2
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	01d2      	lsls	r2, r2, #7
 80045b4:	440a      	add	r2, r1
 80045b6:	3284      	adds	r2, #132	@ 0x84
 80045b8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80045bc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	0c1b      	lsrs	r3, r3, #16
 80045ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80045ce:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80045d0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4619      	mov	r1, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	01db      	lsls	r3, r3, #7
 80045dc:	440b      	add	r3, r1
 80045de:	3384      	adds	r3, #132	@ 0x84
 80045e0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80045e6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	68da      	ldr	r2, [r3, #12]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045f6:	4413      	add	r3, r2
 80045f8:	041b      	lsls	r3, r3, #16
 80045fa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	461a      	mov	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	01db      	lsls	r3, r3, #7
 8004606:	4413      	add	r3, r2
 8004608:	3384      	adds	r3, #132	@ 0x84
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	6812      	ldr	r2, [r2, #0]
 8004610:	4611      	mov	r1, r2
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	01d2      	lsls	r2, r2, #7
 8004616:	440a      	add	r2, r1
 8004618:	3284      	adds	r2, #132	@ 0x84
 800461a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800461e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800462e:	4413      	add	r3, r2
 8004630:	1c5a      	adds	r2, r3, #1
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4619      	mov	r1, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	01db      	lsls	r3, r3, #7
 800463c:	440b      	add	r3, r1
 800463e:	3384      	adds	r3, #132	@ 0x84
 8004640:	4619      	mov	r1, r3
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	4313      	orrs	r3, r2
 8004646:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	461a      	mov	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	01db      	lsls	r3, r3, #7
 8004652:	4413      	add	r3, r2
 8004654:	3384      	adds	r3, #132	@ 0x84
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	6812      	ldr	r2, [r2, #0]
 800465c:	4611      	mov	r1, r2
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	01d2      	lsls	r2, r2, #7
 8004662:	440a      	add	r2, r1
 8004664:	3284      	adds	r2, #132	@ 0x84
 8004666:	f023 0307 	bic.w	r3, r3, #7
 800466a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	461a      	mov	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	01db      	lsls	r3, r3, #7
 8004676:	4413      	add	r3, r2
 8004678:	3384      	adds	r3, #132	@ 0x84
 800467a:	461a      	mov	r2, r3
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004688:	021b      	lsls	r3, r3, #8
 800468a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004692:	041b      	lsls	r3, r3, #16
 8004694:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	061b      	lsls	r3, r3, #24
 800469c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	461a      	mov	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	01db      	lsls	r3, r3, #7
 80046a8:	4413      	add	r3, r2
 80046aa:	3384      	adds	r3, #132	@ 0x84
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	461a      	mov	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	01db      	lsls	r3, r3, #7
 80046b8:	4413      	add	r3, r2
 80046ba:	3384      	adds	r3, #132	@ 0x84
 80046bc:	461a      	mov	r2, r3
 80046be:	2300      	movs	r3, #0
 80046c0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80046c8:	461a      	mov	r2, r3
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	431a      	orrs	r2, r3
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	431a      	orrs	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4619      	mov	r1, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	01db      	lsls	r3, r3, #7
 80046dc:	440b      	add	r3, r1
 80046de:	3384      	adds	r3, #132	@ 0x84
 80046e0:	4619      	mov	r1, r3
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	461a      	mov	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	01db      	lsls	r3, r3, #7
 80046f2:	4413      	add	r3, r2
 80046f4:	3384      	adds	r3, #132	@ 0x84
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	6812      	ldr	r2, [r2, #0]
 80046fc:	4611      	mov	r1, r2
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	01d2      	lsls	r2, r2, #7
 8004702:	440a      	add	r2, r1
 8004704:	3284      	adds	r2, #132	@ 0x84
 8004706:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800470a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	461a      	mov	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	01db      	lsls	r3, r3, #7
 8004716:	4413      	add	r3, r2
 8004718:	3384      	adds	r3, #132	@ 0x84
 800471a:	461a      	mov	r2, r3
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	461a      	mov	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	01db      	lsls	r3, r3, #7
 800472c:	4413      	add	r3, r2
 800472e:	3384      	adds	r3, #132	@ 0x84
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	6812      	ldr	r2, [r2, #0]
 8004736:	4611      	mov	r1, r2
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	01d2      	lsls	r2, r2, #7
 800473c:	440a      	add	r2, r1
 800473e:	3284      	adds	r2, #132	@ 0x84
 8004740:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004744:	f023 0307 	bic.w	r3, r3, #7
 8004748:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	69da      	ldr	r2, [r3, #28]
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	68f9      	ldr	r1, [r7, #12]
 8004754:	6809      	ldr	r1, [r1, #0]
 8004756:	4608      	mov	r0, r1
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	01c9      	lsls	r1, r1, #7
 800475c:	4401      	add	r1, r0
 800475e:	3184      	adds	r1, #132	@ 0x84
 8004760:	4313      	orrs	r3, r2
 8004762:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	461a      	mov	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	01db      	lsls	r3, r3, #7
 800476e:	4413      	add	r3, r2
 8004770:	3384      	adds	r3, #132	@ 0x84
 8004772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	461a      	mov	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	01db      	lsls	r3, r3, #7
 800477e:	4413      	add	r3, r2
 8004780:	3384      	adds	r3, #132	@ 0x84
 8004782:	461a      	mov	r2, r3
 8004784:	2300      	movs	r3, #0
 8004786:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	461a      	mov	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	01db      	lsls	r3, r3, #7
 8004792:	4413      	add	r3, r2
 8004794:	3384      	adds	r3, #132	@ 0x84
 8004796:	461a      	mov	r2, r3
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d102      	bne.n	80047ac <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80047a6:	2304      	movs	r3, #4
 80047a8:	61fb      	str	r3, [r7, #28]
 80047aa:	e01b      	b.n	80047e4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d102      	bne.n	80047ba <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80047b4:	2303      	movs	r3, #3
 80047b6:	61fb      	str	r3, [r7, #28]
 80047b8:	e014      	b.n	80047e4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d00b      	beq.n	80047da <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d007      	beq.n	80047da <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80047ce:	2b03      	cmp	r3, #3
 80047d0:	d003      	beq.n	80047da <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80047d6:	2b07      	cmp	r3, #7
 80047d8:	d102      	bne.n	80047e0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80047da:	2302      	movs	r3, #2
 80047dc:	61fb      	str	r3, [r7, #28]
 80047de:	e001      	b.n	80047e4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80047e0:	2301      	movs	r3, #1
 80047e2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	461a      	mov	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	01db      	lsls	r3, r3, #7
 80047ee:	4413      	add	r3, r2
 80047f0:	3384      	adds	r3, #132	@ 0x84
 80047f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	6812      	ldr	r2, [r2, #0]
 80047f8:	4611      	mov	r1, r2
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	01d2      	lsls	r2, r2, #7
 80047fe:	440a      	add	r2, r1
 8004800:	3284      	adds	r2, #132	@ 0x84
 8004802:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004806:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800480c:	69fa      	ldr	r2, [r7, #28]
 800480e:	fb02 f303 	mul.w	r3, r2, r3
 8004812:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	6859      	ldr	r1, [r3, #4]
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	1acb      	subs	r3, r1, r3
 800481e:	69f9      	ldr	r1, [r7, #28]
 8004820:	fb01 f303 	mul.w	r3, r1, r3
 8004824:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004826:	68f9      	ldr	r1, [r7, #12]
 8004828:	6809      	ldr	r1, [r1, #0]
 800482a:	4608      	mov	r0, r1
 800482c:	6879      	ldr	r1, [r7, #4]
 800482e:	01c9      	lsls	r1, r1, #7
 8004830:	4401      	add	r1, r0
 8004832:	3184      	adds	r1, #132	@ 0x84
 8004834:	4313      	orrs	r3, r2
 8004836:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	461a      	mov	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	01db      	lsls	r3, r3, #7
 8004842:	4413      	add	r3, r2
 8004844:	3384      	adds	r3, #132	@ 0x84
 8004846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	6812      	ldr	r2, [r2, #0]
 800484c:	4611      	mov	r1, r2
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	01d2      	lsls	r2, r2, #7
 8004852:	440a      	add	r2, r1
 8004854:	3284      	adds	r2, #132	@ 0x84
 8004856:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800485a:	f023 0307 	bic.w	r3, r3, #7
 800485e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	461a      	mov	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	01db      	lsls	r3, r3, #7
 800486a:	4413      	add	r3, r2
 800486c:	3384      	adds	r3, #132	@ 0x84
 800486e:	461a      	mov	r2, r3
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004874:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	461a      	mov	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	01db      	lsls	r3, r3, #7
 8004880:	4413      	add	r3, r2
 8004882:	3384      	adds	r3, #132	@ 0x84
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	6812      	ldr	r2, [r2, #0]
 800488a:	4611      	mov	r1, r2
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	01d2      	lsls	r2, r2, #7
 8004890:	440a      	add	r2, r1
 8004892:	3284      	adds	r2, #132	@ 0x84
 8004894:	f043 0301 	orr.w	r3, r3, #1
 8004898:	6013      	str	r3, [r2, #0]
}
 800489a:	bf00      	nop
 800489c:	3724      	adds	r7, #36	@ 0x24
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
	...

080048a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e267      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d075      	beq.n	80049b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80048c6:	4b88      	ldr	r3, [pc, #544]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 030c 	and.w	r3, r3, #12
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d00c      	beq.n	80048ec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048d2:	4b85      	ldr	r3, [pc, #532]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80048da:	2b08      	cmp	r3, #8
 80048dc:	d112      	bne.n	8004904 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048de:	4b82      	ldr	r3, [pc, #520]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048ea:	d10b      	bne.n	8004904 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ec:	4b7e      	ldr	r3, [pc, #504]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d05b      	beq.n	80049b0 <HAL_RCC_OscConfig+0x108>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d157      	bne.n	80049b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e242      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800490c:	d106      	bne.n	800491c <HAL_RCC_OscConfig+0x74>
 800490e:	4b76      	ldr	r3, [pc, #472]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a75      	ldr	r2, [pc, #468]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004914:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004918:	6013      	str	r3, [r2, #0]
 800491a:	e01d      	b.n	8004958 <HAL_RCC_OscConfig+0xb0>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004924:	d10c      	bne.n	8004940 <HAL_RCC_OscConfig+0x98>
 8004926:	4b70      	ldr	r3, [pc, #448]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a6f      	ldr	r2, [pc, #444]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 800492c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	4b6d      	ldr	r3, [pc, #436]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a6c      	ldr	r2, [pc, #432]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	e00b      	b.n	8004958 <HAL_RCC_OscConfig+0xb0>
 8004940:	4b69      	ldr	r3, [pc, #420]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a68      	ldr	r2, [pc, #416]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004946:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800494a:	6013      	str	r3, [r2, #0]
 800494c:	4b66      	ldr	r3, [pc, #408]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a65      	ldr	r2, [pc, #404]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004952:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d013      	beq.n	8004988 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004960:	f7fc ffc2 	bl	80018e8 <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004968:	f7fc ffbe 	bl	80018e8 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b64      	cmp	r3, #100	@ 0x64
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e207      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497a:	4b5b      	ldr	r3, [pc, #364]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0f0      	beq.n	8004968 <HAL_RCC_OscConfig+0xc0>
 8004986:	e014      	b.n	80049b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004988:	f7fc ffae 	bl	80018e8 <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004990:	f7fc ffaa 	bl	80018e8 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b64      	cmp	r3, #100	@ 0x64
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e1f3      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049a2:	4b51      	ldr	r3, [pc, #324]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1f0      	bne.n	8004990 <HAL_RCC_OscConfig+0xe8>
 80049ae:	e000      	b.n	80049b2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d063      	beq.n	8004a86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80049be:	4b4a      	ldr	r3, [pc, #296]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 030c 	and.w	r3, r3, #12
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00b      	beq.n	80049e2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ca:	4b47      	ldr	r3, [pc, #284]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80049d2:	2b08      	cmp	r3, #8
 80049d4:	d11c      	bne.n	8004a10 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049d6:	4b44      	ldr	r3, [pc, #272]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d116      	bne.n	8004a10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049e2:	4b41      	ldr	r3, [pc, #260]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d005      	beq.n	80049fa <HAL_RCC_OscConfig+0x152>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d001      	beq.n	80049fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e1c7      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049fa:	4b3b      	ldr	r3, [pc, #236]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	4937      	ldr	r1, [pc, #220]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a0e:	e03a      	b.n	8004a86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d020      	beq.n	8004a5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a18:	4b34      	ldr	r3, [pc, #208]	@ (8004aec <HAL_RCC_OscConfig+0x244>)
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a1e:	f7fc ff63 	bl	80018e8 <HAL_GetTick>
 8004a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a24:	e008      	b.n	8004a38 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a26:	f7fc ff5f 	bl	80018e8 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d901      	bls.n	8004a38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e1a8      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a38:	4b2b      	ldr	r3, [pc, #172]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0f0      	beq.n	8004a26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a44:	4b28      	ldr	r3, [pc, #160]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	00db      	lsls	r3, r3, #3
 8004a52:	4925      	ldr	r1, [pc, #148]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	600b      	str	r3, [r1, #0]
 8004a58:	e015      	b.n	8004a86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a5a:	4b24      	ldr	r3, [pc, #144]	@ (8004aec <HAL_RCC_OscConfig+0x244>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a60:	f7fc ff42 	bl	80018e8 <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a68:	f7fc ff3e 	bl	80018e8 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e187      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1f0      	bne.n	8004a68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0308 	and.w	r3, r3, #8
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d036      	beq.n	8004b00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d016      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a9a:	4b15      	ldr	r3, [pc, #84]	@ (8004af0 <HAL_RCC_OscConfig+0x248>)
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa0:	f7fc ff22 	bl	80018e8 <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aa8:	f7fc ff1e 	bl	80018e8 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e167      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aba:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004abc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0f0      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x200>
 8004ac6:	e01b      	b.n	8004b00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ac8:	4b09      	ldr	r3, [pc, #36]	@ (8004af0 <HAL_RCC_OscConfig+0x248>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ace:	f7fc ff0b 	bl	80018e8 <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ad4:	e00e      	b.n	8004af4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ad6:	f7fc ff07 	bl	80018e8 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d907      	bls.n	8004af4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e150      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	42470000 	.word	0x42470000
 8004af0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004af4:	4b88      	ldr	r3, [pc, #544]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004af6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1ea      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 8097 	beq.w	8004c3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b12:	4b81      	ldr	r3, [pc, #516]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10f      	bne.n	8004b3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b1e:	2300      	movs	r3, #0
 8004b20:	60bb      	str	r3, [r7, #8]
 8004b22:	4b7d      	ldr	r3, [pc, #500]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b26:	4a7c      	ldr	r2, [pc, #496]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004b28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b2e:	4b7a      	ldr	r3, [pc, #488]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b36:	60bb      	str	r3, [r7, #8]
 8004b38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b3e:	4b77      	ldr	r3, [pc, #476]	@ (8004d1c <HAL_RCC_OscConfig+0x474>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d118      	bne.n	8004b7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b4a:	4b74      	ldr	r3, [pc, #464]	@ (8004d1c <HAL_RCC_OscConfig+0x474>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a73      	ldr	r2, [pc, #460]	@ (8004d1c <HAL_RCC_OscConfig+0x474>)
 8004b50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b56:	f7fc fec7 	bl	80018e8 <HAL_GetTick>
 8004b5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b5c:	e008      	b.n	8004b70 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b5e:	f7fc fec3 	bl	80018e8 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e10c      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b70:	4b6a      	ldr	r3, [pc, #424]	@ (8004d1c <HAL_RCC_OscConfig+0x474>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d0f0      	beq.n	8004b5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d106      	bne.n	8004b92 <HAL_RCC_OscConfig+0x2ea>
 8004b84:	4b64      	ldr	r3, [pc, #400]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b88:	4a63      	ldr	r2, [pc, #396]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004b8a:	f043 0301 	orr.w	r3, r3, #1
 8004b8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b90:	e01c      	b.n	8004bcc <HAL_RCC_OscConfig+0x324>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	2b05      	cmp	r3, #5
 8004b98:	d10c      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x30c>
 8004b9a:	4b5f      	ldr	r3, [pc, #380]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b9e:	4a5e      	ldr	r2, [pc, #376]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004ba0:	f043 0304 	orr.w	r3, r3, #4
 8004ba4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ba6:	4b5c      	ldr	r3, [pc, #368]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004baa:	4a5b      	ldr	r2, [pc, #364]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004bac:	f043 0301 	orr.w	r3, r3, #1
 8004bb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bb2:	e00b      	b.n	8004bcc <HAL_RCC_OscConfig+0x324>
 8004bb4:	4b58      	ldr	r3, [pc, #352]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb8:	4a57      	ldr	r2, [pc, #348]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004bba:	f023 0301 	bic.w	r3, r3, #1
 8004bbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bc0:	4b55      	ldr	r3, [pc, #340]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bc4:	4a54      	ldr	r2, [pc, #336]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004bc6:	f023 0304 	bic.w	r3, r3, #4
 8004bca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d015      	beq.n	8004c00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd4:	f7fc fe88 	bl	80018e8 <HAL_GetTick>
 8004bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bda:	e00a      	b.n	8004bf2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bdc:	f7fc fe84 	bl	80018e8 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e0cb      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf2:	4b49      	ldr	r3, [pc, #292]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0ee      	beq.n	8004bdc <HAL_RCC_OscConfig+0x334>
 8004bfe:	e014      	b.n	8004c2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c00:	f7fc fe72 	bl	80018e8 <HAL_GetTick>
 8004c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c06:	e00a      	b.n	8004c1e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c08:	f7fc fe6e 	bl	80018e8 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e0b5      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c1e:	4b3e      	ldr	r3, [pc, #248]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1ee      	bne.n	8004c08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c2a:	7dfb      	ldrb	r3, [r7, #23]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d105      	bne.n	8004c3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c30:	4b39      	ldr	r3, [pc, #228]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c34:	4a38      	ldr	r2, [pc, #224]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004c36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c3a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f000 80a1 	beq.w	8004d88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c46:	4b34      	ldr	r3, [pc, #208]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 030c 	and.w	r3, r3, #12
 8004c4e:	2b08      	cmp	r3, #8
 8004c50:	d05c      	beq.n	8004d0c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d141      	bne.n	8004cde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c5a:	4b31      	ldr	r3, [pc, #196]	@ (8004d20 <HAL_RCC_OscConfig+0x478>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c60:	f7fc fe42 	bl	80018e8 <HAL_GetTick>
 8004c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c66:	e008      	b.n	8004c7a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c68:	f7fc fe3e 	bl	80018e8 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e087      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c7a:	4b27      	ldr	r3, [pc, #156]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1f0      	bne.n	8004c68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	69da      	ldr	r2, [r3, #28]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c94:	019b      	lsls	r3, r3, #6
 8004c96:	431a      	orrs	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9c:	085b      	lsrs	r3, r3, #1
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	041b      	lsls	r3, r3, #16
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca8:	061b      	lsls	r3, r3, #24
 8004caa:	491b      	ldr	r1, [pc, #108]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8004d20 <HAL_RCC_OscConfig+0x478>)
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb6:	f7fc fe17 	bl	80018e8 <HAL_GetTick>
 8004cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cbc:	e008      	b.n	8004cd0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cbe:	f7fc fe13 	bl	80018e8 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d901      	bls.n	8004cd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e05c      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cd0:	4b11      	ldr	r3, [pc, #68]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d0f0      	beq.n	8004cbe <HAL_RCC_OscConfig+0x416>
 8004cdc:	e054      	b.n	8004d88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cde:	4b10      	ldr	r3, [pc, #64]	@ (8004d20 <HAL_RCC_OscConfig+0x478>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce4:	f7fc fe00 	bl	80018e8 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cec:	f7fc fdfc 	bl	80018e8 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e045      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cfe:	4b06      	ldr	r3, [pc, #24]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1f0      	bne.n	8004cec <HAL_RCC_OscConfig+0x444>
 8004d0a:	e03d      	b.n	8004d88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d107      	bne.n	8004d24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e038      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
 8004d18:	40023800 	.word	0x40023800
 8004d1c:	40007000 	.word	0x40007000
 8004d20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d24:	4b1b      	ldr	r3, [pc, #108]	@ (8004d94 <HAL_RCC_OscConfig+0x4ec>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d028      	beq.n	8004d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d121      	bne.n	8004d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d11a      	bne.n	8004d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004d54:	4013      	ands	r3, r2
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d111      	bne.n	8004d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6a:	085b      	lsrs	r3, r3, #1
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d107      	bne.n	8004d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d001      	beq.n	8004d88 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e000      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3718      	adds	r7, #24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	40023800 	.word	0x40023800

08004d98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e0cc      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004dac:	4b68      	ldr	r3, [pc, #416]	@ (8004f50 <HAL_RCC_ClockConfig+0x1b8>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 030f 	and.w	r3, r3, #15
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d90c      	bls.n	8004dd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dba:	4b65      	ldr	r3, [pc, #404]	@ (8004f50 <HAL_RCC_ClockConfig+0x1b8>)
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dc2:	4b63      	ldr	r3, [pc, #396]	@ (8004f50 <HAL_RCC_ClockConfig+0x1b8>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 030f 	and.w	r3, r3, #15
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d001      	beq.n	8004dd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e0b8      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d020      	beq.n	8004e22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d005      	beq.n	8004df8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dec:	4b59      	ldr	r3, [pc, #356]	@ (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	4a58      	ldr	r2, [pc, #352]	@ (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004df2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004df6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0308 	and.w	r3, r3, #8
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d005      	beq.n	8004e10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e04:	4b53      	ldr	r3, [pc, #332]	@ (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	4a52      	ldr	r2, [pc, #328]	@ (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004e0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e10:	4b50      	ldr	r3, [pc, #320]	@ (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	494d      	ldr	r1, [pc, #308]	@ (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d044      	beq.n	8004eb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d107      	bne.n	8004e46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e36:	4b47      	ldr	r3, [pc, #284]	@ (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d119      	bne.n	8004e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e07f      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d003      	beq.n	8004e56 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e52:	2b03      	cmp	r3, #3
 8004e54:	d107      	bne.n	8004e66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e56:	4b3f      	ldr	r3, [pc, #252]	@ (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d109      	bne.n	8004e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e06f      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e66:	4b3b      	ldr	r3, [pc, #236]	@ (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e067      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e76:	4b37      	ldr	r3, [pc, #220]	@ (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f023 0203 	bic.w	r2, r3, #3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	4934      	ldr	r1, [pc, #208]	@ (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e88:	f7fc fd2e 	bl	80018e8 <HAL_GetTick>
 8004e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e8e:	e00a      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e90:	f7fc fd2a 	bl	80018e8 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e04f      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ea6:	4b2b      	ldr	r3, [pc, #172]	@ (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f003 020c 	and.w	r2, r3, #12
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d1eb      	bne.n	8004e90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004eb8:	4b25      	ldr	r3, [pc, #148]	@ (8004f50 <HAL_RCC_ClockConfig+0x1b8>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 030f 	and.w	r3, r3, #15
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d20c      	bcs.n	8004ee0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ec6:	4b22      	ldr	r3, [pc, #136]	@ (8004f50 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ece:	4b20      	ldr	r3, [pc, #128]	@ (8004f50 <HAL_RCC_ClockConfig+0x1b8>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d001      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e032      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d008      	beq.n	8004efe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004eec:	4b19      	ldr	r3, [pc, #100]	@ (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	4916      	ldr	r1, [pc, #88]	@ (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0308 	and.w	r3, r3, #8
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d009      	beq.n	8004f1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f0a:	4b12      	ldr	r3, [pc, #72]	@ (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	490e      	ldr	r1, [pc, #56]	@ (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f1e:	f000 f821 	bl	8004f64 <HAL_RCC_GetSysClockFreq>
 8004f22:	4602      	mov	r2, r0
 8004f24:	4b0b      	ldr	r3, [pc, #44]	@ (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	091b      	lsrs	r3, r3, #4
 8004f2a:	f003 030f 	and.w	r3, r3, #15
 8004f2e:	490a      	ldr	r1, [pc, #40]	@ (8004f58 <HAL_RCC_ClockConfig+0x1c0>)
 8004f30:	5ccb      	ldrb	r3, [r1, r3]
 8004f32:	fa22 f303 	lsr.w	r3, r2, r3
 8004f36:	4a09      	ldr	r2, [pc, #36]	@ (8004f5c <HAL_RCC_ClockConfig+0x1c4>)
 8004f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004f3a:	4b09      	ldr	r3, [pc, #36]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c8>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fc fabc 	bl	80014bc <HAL_InitTick>

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	40023c00 	.word	0x40023c00
 8004f54:	40023800 	.word	0x40023800
 8004f58:	08008698 	.word	0x08008698
 8004f5c:	20000000 	.word	0x20000000
 8004f60:	20000004 	.word	0x20000004

08004f64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f68:	b094      	sub	sp, #80	@ 0x50
 8004f6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f7c:	4b79      	ldr	r3, [pc, #484]	@ (8005164 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f003 030c 	and.w	r3, r3, #12
 8004f84:	2b08      	cmp	r3, #8
 8004f86:	d00d      	beq.n	8004fa4 <HAL_RCC_GetSysClockFreq+0x40>
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	f200 80e1 	bhi.w	8005150 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d002      	beq.n	8004f98 <HAL_RCC_GetSysClockFreq+0x34>
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	d003      	beq.n	8004f9e <HAL_RCC_GetSysClockFreq+0x3a>
 8004f96:	e0db      	b.n	8005150 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f98:	4b73      	ldr	r3, [pc, #460]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f9c:	e0db      	b.n	8005156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f9e:	4b73      	ldr	r3, [pc, #460]	@ (800516c <HAL_RCC_GetSysClockFreq+0x208>)
 8004fa0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fa2:	e0d8      	b.n	8005156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fa4:	4b6f      	ldr	r3, [pc, #444]	@ (8005164 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fae:	4b6d      	ldr	r3, [pc, #436]	@ (8005164 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d063      	beq.n	8005082 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fba:	4b6a      	ldr	r3, [pc, #424]	@ (8005164 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	099b      	lsrs	r3, r3, #6
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004fc4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fce:	2300      	movs	r3, #0
 8004fd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004fd6:	4622      	mov	r2, r4
 8004fd8:	462b      	mov	r3, r5
 8004fda:	f04f 0000 	mov.w	r0, #0
 8004fde:	f04f 0100 	mov.w	r1, #0
 8004fe2:	0159      	lsls	r1, r3, #5
 8004fe4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fe8:	0150      	lsls	r0, r2, #5
 8004fea:	4602      	mov	r2, r0
 8004fec:	460b      	mov	r3, r1
 8004fee:	4621      	mov	r1, r4
 8004ff0:	1a51      	subs	r1, r2, r1
 8004ff2:	6139      	str	r1, [r7, #16]
 8004ff4:	4629      	mov	r1, r5
 8004ff6:	eb63 0301 	sbc.w	r3, r3, r1
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	f04f 0200 	mov.w	r2, #0
 8005000:	f04f 0300 	mov.w	r3, #0
 8005004:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005008:	4659      	mov	r1, fp
 800500a:	018b      	lsls	r3, r1, #6
 800500c:	4651      	mov	r1, sl
 800500e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005012:	4651      	mov	r1, sl
 8005014:	018a      	lsls	r2, r1, #6
 8005016:	4651      	mov	r1, sl
 8005018:	ebb2 0801 	subs.w	r8, r2, r1
 800501c:	4659      	mov	r1, fp
 800501e:	eb63 0901 	sbc.w	r9, r3, r1
 8005022:	f04f 0200 	mov.w	r2, #0
 8005026:	f04f 0300 	mov.w	r3, #0
 800502a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800502e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005032:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005036:	4690      	mov	r8, r2
 8005038:	4699      	mov	r9, r3
 800503a:	4623      	mov	r3, r4
 800503c:	eb18 0303 	adds.w	r3, r8, r3
 8005040:	60bb      	str	r3, [r7, #8]
 8005042:	462b      	mov	r3, r5
 8005044:	eb49 0303 	adc.w	r3, r9, r3
 8005048:	60fb      	str	r3, [r7, #12]
 800504a:	f04f 0200 	mov.w	r2, #0
 800504e:	f04f 0300 	mov.w	r3, #0
 8005052:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005056:	4629      	mov	r1, r5
 8005058:	024b      	lsls	r3, r1, #9
 800505a:	4621      	mov	r1, r4
 800505c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005060:	4621      	mov	r1, r4
 8005062:	024a      	lsls	r2, r1, #9
 8005064:	4610      	mov	r0, r2
 8005066:	4619      	mov	r1, r3
 8005068:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800506a:	2200      	movs	r2, #0
 800506c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800506e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005070:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005074:	f7fb f8bc 	bl	80001f0 <__aeabi_uldivmod>
 8005078:	4602      	mov	r2, r0
 800507a:	460b      	mov	r3, r1
 800507c:	4613      	mov	r3, r2
 800507e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005080:	e058      	b.n	8005134 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005082:	4b38      	ldr	r3, [pc, #224]	@ (8005164 <HAL_RCC_GetSysClockFreq+0x200>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	099b      	lsrs	r3, r3, #6
 8005088:	2200      	movs	r2, #0
 800508a:	4618      	mov	r0, r3
 800508c:	4611      	mov	r1, r2
 800508e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005092:	623b      	str	r3, [r7, #32]
 8005094:	2300      	movs	r3, #0
 8005096:	627b      	str	r3, [r7, #36]	@ 0x24
 8005098:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800509c:	4642      	mov	r2, r8
 800509e:	464b      	mov	r3, r9
 80050a0:	f04f 0000 	mov.w	r0, #0
 80050a4:	f04f 0100 	mov.w	r1, #0
 80050a8:	0159      	lsls	r1, r3, #5
 80050aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050ae:	0150      	lsls	r0, r2, #5
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	4641      	mov	r1, r8
 80050b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80050ba:	4649      	mov	r1, r9
 80050bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80050cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80050d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80050d4:	ebb2 040a 	subs.w	r4, r2, sl
 80050d8:	eb63 050b 	sbc.w	r5, r3, fp
 80050dc:	f04f 0200 	mov.w	r2, #0
 80050e0:	f04f 0300 	mov.w	r3, #0
 80050e4:	00eb      	lsls	r3, r5, #3
 80050e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050ea:	00e2      	lsls	r2, r4, #3
 80050ec:	4614      	mov	r4, r2
 80050ee:	461d      	mov	r5, r3
 80050f0:	4643      	mov	r3, r8
 80050f2:	18e3      	adds	r3, r4, r3
 80050f4:	603b      	str	r3, [r7, #0]
 80050f6:	464b      	mov	r3, r9
 80050f8:	eb45 0303 	adc.w	r3, r5, r3
 80050fc:	607b      	str	r3, [r7, #4]
 80050fe:	f04f 0200 	mov.w	r2, #0
 8005102:	f04f 0300 	mov.w	r3, #0
 8005106:	e9d7 4500 	ldrd	r4, r5, [r7]
 800510a:	4629      	mov	r1, r5
 800510c:	028b      	lsls	r3, r1, #10
 800510e:	4621      	mov	r1, r4
 8005110:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005114:	4621      	mov	r1, r4
 8005116:	028a      	lsls	r2, r1, #10
 8005118:	4610      	mov	r0, r2
 800511a:	4619      	mov	r1, r3
 800511c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800511e:	2200      	movs	r2, #0
 8005120:	61bb      	str	r3, [r7, #24]
 8005122:	61fa      	str	r2, [r7, #28]
 8005124:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005128:	f7fb f862 	bl	80001f0 <__aeabi_uldivmod>
 800512c:	4602      	mov	r2, r0
 800512e:	460b      	mov	r3, r1
 8005130:	4613      	mov	r3, r2
 8005132:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005134:	4b0b      	ldr	r3, [pc, #44]	@ (8005164 <HAL_RCC_GetSysClockFreq+0x200>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	0c1b      	lsrs	r3, r3, #16
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	3301      	adds	r3, #1
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005144:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005146:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005148:	fbb2 f3f3 	udiv	r3, r2, r3
 800514c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800514e:	e002      	b.n	8005156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005150:	4b05      	ldr	r3, [pc, #20]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x204>)
 8005152:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005154:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005156:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005158:	4618      	mov	r0, r3
 800515a:	3750      	adds	r7, #80	@ 0x50
 800515c:	46bd      	mov	sp, r7
 800515e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005162:	bf00      	nop
 8005164:	40023800 	.word	0x40023800
 8005168:	00f42400 	.word	0x00f42400
 800516c:	007a1200 	.word	0x007a1200

08005170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005170:	b480      	push	{r7}
 8005172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005174:	4b03      	ldr	r3, [pc, #12]	@ (8005184 <HAL_RCC_GetHCLKFreq+0x14>)
 8005176:	681b      	ldr	r3, [r3, #0]
}
 8005178:	4618      	mov	r0, r3
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	20000000 	.word	0x20000000

08005188 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800518c:	f7ff fff0 	bl	8005170 <HAL_RCC_GetHCLKFreq>
 8005190:	4602      	mov	r2, r0
 8005192:	4b05      	ldr	r3, [pc, #20]	@ (80051a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	0a9b      	lsrs	r3, r3, #10
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	4903      	ldr	r1, [pc, #12]	@ (80051ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800519e:	5ccb      	ldrb	r3, [r1, r3]
 80051a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	40023800 	.word	0x40023800
 80051ac:	080086a8 	.word	0x080086a8

080051b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051b4:	f7ff ffdc 	bl	8005170 <HAL_RCC_GetHCLKFreq>
 80051b8:	4602      	mov	r2, r0
 80051ba:	4b05      	ldr	r3, [pc, #20]	@ (80051d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	0b5b      	lsrs	r3, r3, #13
 80051c0:	f003 0307 	and.w	r3, r3, #7
 80051c4:	4903      	ldr	r1, [pc, #12]	@ (80051d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051c6:	5ccb      	ldrb	r3, [r1, r3]
 80051c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	40023800 	.word	0x40023800
 80051d4:	080086a8 	.word	0x080086a8

080051d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	220f      	movs	r2, #15
 80051e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80051e8:	4b12      	ldr	r3, [pc, #72]	@ (8005234 <HAL_RCC_GetClockConfig+0x5c>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f003 0203 	and.w	r2, r3, #3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80051f4:	4b0f      	ldr	r3, [pc, #60]	@ (8005234 <HAL_RCC_GetClockConfig+0x5c>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005200:	4b0c      	ldr	r3, [pc, #48]	@ (8005234 <HAL_RCC_GetClockConfig+0x5c>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800520c:	4b09      	ldr	r3, [pc, #36]	@ (8005234 <HAL_RCC_GetClockConfig+0x5c>)
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	08db      	lsrs	r3, r3, #3
 8005212:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800521a:	4b07      	ldr	r3, [pc, #28]	@ (8005238 <HAL_RCC_GetClockConfig+0x60>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 020f 	and.w	r2, r3, #15
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	601a      	str	r2, [r3, #0]
}
 8005226:	bf00      	nop
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	40023800 	.word	0x40023800
 8005238:	40023c00 	.word	0x40023c00

0800523c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10b      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005260:	2b00      	cmp	r3, #0
 8005262:	d105      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800526c:	2b00      	cmp	r3, #0
 800526e:	d075      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005270:	4b91      	ldr	r3, [pc, #580]	@ (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005272:	2200      	movs	r2, #0
 8005274:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005276:	f7fc fb37 	bl	80018e8 <HAL_GetTick>
 800527a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800527c:	e008      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800527e:	f7fc fb33 	bl	80018e8 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	2b02      	cmp	r3, #2
 800528a:	d901      	bls.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e189      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005290:	4b8a      	ldr	r3, [pc, #552]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1f0      	bne.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d009      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	019a      	lsls	r2, r3, #6
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	071b      	lsls	r3, r3, #28
 80052b4:	4981      	ldr	r1, [pc, #516]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d01f      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80052c8:	4b7c      	ldr	r3, [pc, #496]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052ce:	0f1b      	lsrs	r3, r3, #28
 80052d0:	f003 0307 	and.w	r3, r3, #7
 80052d4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	019a      	lsls	r2, r3, #6
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	061b      	lsls	r3, r3, #24
 80052e2:	431a      	orrs	r2, r3
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	071b      	lsls	r3, r3, #28
 80052e8:	4974      	ldr	r1, [pc, #464]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80052f0:	4b72      	ldr	r3, [pc, #456]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052f6:	f023 021f 	bic.w	r2, r3, #31
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	69db      	ldr	r3, [r3, #28]
 80052fe:	3b01      	subs	r3, #1
 8005300:	496e      	ldr	r1, [pc, #440]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005302:	4313      	orrs	r3, r2
 8005304:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00d      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	019a      	lsls	r2, r3, #6
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	061b      	lsls	r3, r3, #24
 8005320:	431a      	orrs	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	071b      	lsls	r3, r3, #28
 8005328:	4964      	ldr	r1, [pc, #400]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800532a:	4313      	orrs	r3, r2
 800532c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005330:	4b61      	ldr	r3, [pc, #388]	@ (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005332:	2201      	movs	r2, #1
 8005334:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005336:	f7fc fad7 	bl	80018e8 <HAL_GetTick>
 800533a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800533c:	e008      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800533e:	f7fc fad3 	bl	80018e8 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	2b02      	cmp	r3, #2
 800534a:	d901      	bls.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e129      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005350:	4b5a      	ldr	r3, [pc, #360]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d0f0      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0304 	and.w	r3, r3, #4
 8005364:	2b00      	cmp	r3, #0
 8005366:	d105      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005370:	2b00      	cmp	r3, #0
 8005372:	d079      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005374:	4b52      	ldr	r3, [pc, #328]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005376:	2200      	movs	r2, #0
 8005378:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800537a:	f7fc fab5 	bl	80018e8 <HAL_GetTick>
 800537e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005380:	e008      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005382:	f7fc fab1 	bl	80018e8 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d901      	bls.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e107      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005394:	4b49      	ldr	r3, [pc, #292]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800539c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053a0:	d0ef      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0304 	and.w	r3, r3, #4
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d020      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80053ae:	4b43      	ldr	r3, [pc, #268]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053b4:	0f1b      	lsrs	r3, r3, #28
 80053b6:	f003 0307 	and.w	r3, r3, #7
 80053ba:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	019a      	lsls	r2, r3, #6
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	061b      	lsls	r3, r3, #24
 80053c8:	431a      	orrs	r2, r3
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	071b      	lsls	r3, r3, #28
 80053ce:	493b      	ldr	r1, [pc, #236]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80053d6:	4b39      	ldr	r3, [pc, #228]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80053dc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a1b      	ldr	r3, [r3, #32]
 80053e4:	3b01      	subs	r3, #1
 80053e6:	021b      	lsls	r3, r3, #8
 80053e8:	4934      	ldr	r1, [pc, #208]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0308 	and.w	r3, r3, #8
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d01e      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80053fc:	4b2f      	ldr	r3, [pc, #188]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005402:	0e1b      	lsrs	r3, r3, #24
 8005404:	f003 030f 	and.w	r3, r3, #15
 8005408:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	019a      	lsls	r2, r3, #6
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	061b      	lsls	r3, r3, #24
 8005414:	431a      	orrs	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	071b      	lsls	r3, r3, #28
 800541c:	4927      	ldr	r1, [pc, #156]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005424:	4b25      	ldr	r3, [pc, #148]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005426:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800542a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005432:	4922      	ldr	r1, [pc, #136]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005434:	4313      	orrs	r3, r2
 8005436:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800543a:	4b21      	ldr	r3, [pc, #132]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800543c:	2201      	movs	r2, #1
 800543e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005440:	f7fc fa52 	bl	80018e8 <HAL_GetTick>
 8005444:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005446:	e008      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005448:	f7fc fa4e 	bl	80018e8 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d901      	bls.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e0a4      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800545a:	4b18      	ldr	r3, [pc, #96]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005462:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005466:	d1ef      	bne.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0320 	and.w	r3, r3, #32
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 808b 	beq.w	800558c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005476:	2300      	movs	r3, #0
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	4b10      	ldr	r3, [pc, #64]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800547c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547e:	4a0f      	ldr	r2, [pc, #60]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005484:	6413      	str	r3, [r2, #64]	@ 0x40
 8005486:	4b0d      	ldr	r3, [pc, #52]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005492:	4b0c      	ldr	r3, [pc, #48]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a0b      	ldr	r2, [pc, #44]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800549c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800549e:	f7fc fa23 	bl	80018e8 <HAL_GetTick>
 80054a2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80054a4:	e010      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054a6:	f7fc fa1f 	bl	80018e8 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d909      	bls.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e075      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80054b8:	42470068 	.word	0x42470068
 80054bc:	40023800 	.word	0x40023800
 80054c0:	42470070 	.word	0x42470070
 80054c4:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80054c8:	4b38      	ldr	r3, [pc, #224]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d0e8      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054d4:	4b36      	ldr	r3, [pc, #216]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054dc:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d02f      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d028      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054f2:	4b2f      	ldr	r3, [pc, #188]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054fa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054fc:	4b2d      	ldr	r3, [pc, #180]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80054fe:	2201      	movs	r2, #1
 8005500:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005502:	4b2c      	ldr	r3, [pc, #176]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005508:	4a29      	ldr	r2, [pc, #164]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800550e:	4b28      	ldr	r3, [pc, #160]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b01      	cmp	r3, #1
 8005518:	d114      	bne.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800551a:	f7fc f9e5 	bl	80018e8 <HAL_GetTick>
 800551e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005520:	e00a      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005522:	f7fc f9e1 	bl	80018e8 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005530:	4293      	cmp	r3, r2
 8005532:	d901      	bls.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e035      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005538:	4b1d      	ldr	r3, [pc, #116]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800553a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d0ee      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005548:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800554c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005550:	d10d      	bne.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005552:	4b17      	ldr	r3, [pc, #92]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800555e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005562:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005566:	4912      	ldr	r1, [pc, #72]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005568:	4313      	orrs	r3, r2
 800556a:	608b      	str	r3, [r1, #8]
 800556c:	e005      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800556e:	4b10      	ldr	r3, [pc, #64]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	4a0f      	ldr	r2, [pc, #60]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005574:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005578:	6093      	str	r3, [r2, #8]
 800557a:	4b0d      	ldr	r3, [pc, #52]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800557c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005582:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005586:	490a      	ldr	r1, [pc, #40]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005588:	4313      	orrs	r3, r2
 800558a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0310 	and.w	r3, r3, #16
 8005594:	2b00      	cmp	r3, #0
 8005596:	d004      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800559e:	4b06      	ldr	r3, [pc, #24]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80055a0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	40007000 	.word	0x40007000
 80055b0:	40023800 	.word	0x40023800
 80055b4:	42470e40 	.word	0x42470e40
 80055b8:	424711e0 	.word	0x424711e0

080055bc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e025      	b.n	800561c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d106      	bne.n	80055ea <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7fb f90b 	bl	8000800 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2202      	movs	r2, #2
 80055ee:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	3304      	adds	r3, #4
 80055fa:	4619      	mov	r1, r3
 80055fc:	4610      	mov	r0, r2
 80055fe:	f001 f9f5 	bl	80069ec <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6818      	ldr	r0, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	461a      	mov	r2, r3
 800560c:	6839      	ldr	r1, [r7, #0]
 800560e:	f001 fa4a 	bl	8006aa6 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e07b      	b.n	800572e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563a:	2b00      	cmp	r3, #0
 800563c:	d108      	bne.n	8005650 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005646:	d009      	beq.n	800565c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	61da      	str	r2, [r3, #28]
 800564e:	e005      	b.n	800565c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d106      	bne.n	800567c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7fb feac 	bl	80013d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005692:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80056a4:	431a      	orrs	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056ae:	431a      	orrs	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	431a      	orrs	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	431a      	orrs	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056cc:	431a      	orrs	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056d6:	431a      	orrs	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a1b      	ldr	r3, [r3, #32]
 80056dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056e0:	ea42 0103 	orr.w	r1, r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	0c1b      	lsrs	r3, r3, #16
 80056fa:	f003 0104 	and.w	r1, r3, #4
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005702:	f003 0210 	and.w	r2, r3, #16
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	430a      	orrs	r2, r1
 800570c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	69da      	ldr	r2, [r3, #28]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800571c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b088      	sub	sp, #32
 800573a:	af00      	add	r7, sp, #0
 800573c:	60f8      	str	r0, [r7, #12]
 800573e:	60b9      	str	r1, [r7, #8]
 8005740:	603b      	str	r3, [r7, #0]
 8005742:	4613      	mov	r3, r2
 8005744:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005746:	f7fc f8cf 	bl	80018e8 <HAL_GetTick>
 800574a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800574c:	88fb      	ldrh	r3, [r7, #6]
 800574e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b01      	cmp	r3, #1
 800575a:	d001      	beq.n	8005760 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800575c:	2302      	movs	r3, #2
 800575e:	e12a      	b.n	80059b6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d002      	beq.n	800576c <HAL_SPI_Transmit+0x36>
 8005766:	88fb      	ldrh	r3, [r7, #6]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e122      	b.n	80059b6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005776:	2b01      	cmp	r3, #1
 8005778:	d101      	bne.n	800577e <HAL_SPI_Transmit+0x48>
 800577a:	2302      	movs	r3, #2
 800577c:	e11b      	b.n	80059b6 <HAL_SPI_Transmit+0x280>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2203      	movs	r2, #3
 800578a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	88fa      	ldrh	r2, [r7, #6]
 800579e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	88fa      	ldrh	r2, [r7, #6]
 80057a4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057cc:	d10f      	bne.n	80057ee <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057f8:	2b40      	cmp	r3, #64	@ 0x40
 80057fa:	d007      	beq.n	800580c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800580a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005814:	d152      	bne.n	80058bc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d002      	beq.n	8005824 <HAL_SPI_Transmit+0xee>
 800581e:	8b7b      	ldrh	r3, [r7, #26]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d145      	bne.n	80058b0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005828:	881a      	ldrh	r2, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005834:	1c9a      	adds	r2, r3, #2
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800583e:	b29b      	uxth	r3, r3
 8005840:	3b01      	subs	r3, #1
 8005842:	b29a      	uxth	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005848:	e032      	b.n	80058b0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	2b02      	cmp	r3, #2
 8005856:	d112      	bne.n	800587e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800585c:	881a      	ldrh	r2, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005868:	1c9a      	adds	r2, r3, #2
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005872:	b29b      	uxth	r3, r3
 8005874:	3b01      	subs	r3, #1
 8005876:	b29a      	uxth	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800587c:	e018      	b.n	80058b0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800587e:	f7fc f833 	bl	80018e8 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	429a      	cmp	r2, r3
 800588c:	d803      	bhi.n	8005896 <HAL_SPI_Transmit+0x160>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005894:	d102      	bne.n	800589c <HAL_SPI_Transmit+0x166>
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d109      	bne.n	80058b0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e082      	b.n	80059b6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1c7      	bne.n	800584a <HAL_SPI_Transmit+0x114>
 80058ba:	e053      	b.n	8005964 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d002      	beq.n	80058ca <HAL_SPI_Transmit+0x194>
 80058c4:	8b7b      	ldrh	r3, [r7, #26]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d147      	bne.n	800595a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	330c      	adds	r3, #12
 80058d4:	7812      	ldrb	r2, [r2, #0]
 80058d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058dc:	1c5a      	adds	r2, r3, #1
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	3b01      	subs	r3, #1
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80058f0:	e033      	b.n	800595a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d113      	bne.n	8005928 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	330c      	adds	r3, #12
 800590a:	7812      	ldrb	r2, [r2, #0]
 800590c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005912:	1c5a      	adds	r2, r3, #1
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800591c:	b29b      	uxth	r3, r3
 800591e:	3b01      	subs	r3, #1
 8005920:	b29a      	uxth	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005926:	e018      	b.n	800595a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005928:	f7fb ffde 	bl	80018e8 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	683a      	ldr	r2, [r7, #0]
 8005934:	429a      	cmp	r2, r3
 8005936:	d803      	bhi.n	8005940 <HAL_SPI_Transmit+0x20a>
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800593e:	d102      	bne.n	8005946 <HAL_SPI_Transmit+0x210>
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d109      	bne.n	800595a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e02d      	b.n	80059b6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800595e:	b29b      	uxth	r3, r3
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1c6      	bne.n	80058f2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005964:	69fa      	ldr	r2, [r7, #28]
 8005966:	6839      	ldr	r1, [r7, #0]
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f000 f8b1 	bl	8005ad0 <SPI_EndRxTxTransaction>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d002      	beq.n	800597a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2220      	movs	r2, #32
 8005978:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10a      	bne.n	8005998 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005982:	2300      	movs	r3, #0
 8005984:	617b      	str	r3, [r7, #20]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	617b      	str	r3, [r7, #20]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	617b      	str	r3, [r7, #20]
 8005996:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d001      	beq.n	80059b4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e000      	b.n	80059b6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80059b4:	2300      	movs	r3, #0
  }
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3720      	adds	r7, #32
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
	...

080059c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b088      	sub	sp, #32
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	603b      	str	r3, [r7, #0]
 80059cc:	4613      	mov	r3, r2
 80059ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80059d0:	f7fb ff8a 	bl	80018e8 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d8:	1a9b      	subs	r3, r3, r2
 80059da:	683a      	ldr	r2, [r7, #0]
 80059dc:	4413      	add	r3, r2
 80059de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80059e0:	f7fb ff82 	bl	80018e8 <HAL_GetTick>
 80059e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80059e6:	4b39      	ldr	r3, [pc, #228]	@ (8005acc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	015b      	lsls	r3, r3, #5
 80059ec:	0d1b      	lsrs	r3, r3, #20
 80059ee:	69fa      	ldr	r2, [r7, #28]
 80059f0:	fb02 f303 	mul.w	r3, r2, r3
 80059f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059f6:	e054      	b.n	8005aa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059fe:	d050      	beq.n	8005aa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a00:	f7fb ff72 	bl	80018e8 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	69fa      	ldr	r2, [r7, #28]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d902      	bls.n	8005a16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d13d      	bne.n	8005a92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005a24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a2e:	d111      	bne.n	8005a54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a38:	d004      	beq.n	8005a44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a42:	d107      	bne.n	8005a54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a5c:	d10f      	bne.n	8005a7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e017      	b.n	8005ac2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	689a      	ldr	r2, [r3, #8]
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	4013      	ands	r3, r2
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	bf0c      	ite	eq
 8005ab2:	2301      	moveq	r3, #1
 8005ab4:	2300      	movne	r3, #0
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	461a      	mov	r2, r3
 8005aba:	79fb      	ldrb	r3, [r7, #7]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d19b      	bne.n	80059f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3720      	adds	r7, #32
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	20000000 	.word	0x20000000

08005ad0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b088      	sub	sp, #32
 8005ad4:	af02      	add	r7, sp, #8
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	9300      	str	r3, [sp, #0]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	2102      	movs	r1, #2
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f7ff ff6a 	bl	80059c0 <SPI_WaitFlagStateUntilTimeout>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d007      	beq.n	8005b02 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005af6:	f043 0220 	orr.w	r2, r3, #32
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e032      	b.n	8005b68 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005b02:	4b1b      	ldr	r3, [pc, #108]	@ (8005b70 <SPI_EndRxTxTransaction+0xa0>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a1b      	ldr	r2, [pc, #108]	@ (8005b74 <SPI_EndRxTxTransaction+0xa4>)
 8005b08:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0c:	0d5b      	lsrs	r3, r3, #21
 8005b0e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005b12:	fb02 f303 	mul.w	r3, r2, r3
 8005b16:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b20:	d112      	bne.n	8005b48 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	2180      	movs	r1, #128	@ 0x80
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f7ff ff47 	bl	80059c0 <SPI_WaitFlagStateUntilTimeout>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d016      	beq.n	8005b66 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b3c:	f043 0220 	orr.w	r2, r3, #32
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e00f      	b.n	8005b68 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00a      	beq.n	8005b64 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	3b01      	subs	r3, #1
 8005b52:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b5e:	2b80      	cmp	r3, #128	@ 0x80
 8005b60:	d0f2      	beq.n	8005b48 <SPI_EndRxTxTransaction+0x78>
 8005b62:	e000      	b.n	8005b66 <SPI_EndRxTxTransaction+0x96>
        break;
 8005b64:	bf00      	nop
  }

  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3718      	adds	r7, #24
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	20000000 	.word	0x20000000
 8005b74:	165e9f81 	.word	0x165e9f81

08005b78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e041      	b.n	8005c0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d106      	bne.n	8005ba4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7fb fdae 	bl	8001700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	4610      	mov	r0, r2
 8005bb8:	f000 fa7e 	bl	80060b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3708      	adds	r7, #8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
	...

08005c18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d001      	beq.n	8005c30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e04e      	b.n	8005cce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68da      	ldr	r2, [r3, #12]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f042 0201 	orr.w	r2, r2, #1
 8005c46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a23      	ldr	r2, [pc, #140]	@ (8005cdc <HAL_TIM_Base_Start_IT+0xc4>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d022      	beq.n	8005c98 <HAL_TIM_Base_Start_IT+0x80>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c5a:	d01d      	beq.n	8005c98 <HAL_TIM_Base_Start_IT+0x80>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a1f      	ldr	r2, [pc, #124]	@ (8005ce0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d018      	beq.n	8005c98 <HAL_TIM_Base_Start_IT+0x80>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a1e      	ldr	r2, [pc, #120]	@ (8005ce4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d013      	beq.n	8005c98 <HAL_TIM_Base_Start_IT+0x80>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a1c      	ldr	r2, [pc, #112]	@ (8005ce8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d00e      	beq.n	8005c98 <HAL_TIM_Base_Start_IT+0x80>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a1b      	ldr	r2, [pc, #108]	@ (8005cec <HAL_TIM_Base_Start_IT+0xd4>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d009      	beq.n	8005c98 <HAL_TIM_Base_Start_IT+0x80>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a19      	ldr	r2, [pc, #100]	@ (8005cf0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d004      	beq.n	8005c98 <HAL_TIM_Base_Start_IT+0x80>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a18      	ldr	r2, [pc, #96]	@ (8005cf4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d111      	bne.n	8005cbc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f003 0307 	and.w	r3, r3, #7
 8005ca2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2b06      	cmp	r3, #6
 8005ca8:	d010      	beq.n	8005ccc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f042 0201 	orr.w	r2, r2, #1
 8005cb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cba:	e007      	b.n	8005ccc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f042 0201 	orr.w	r2, r2, #1
 8005cca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	40010000 	.word	0x40010000
 8005ce0:	40000400 	.word	0x40000400
 8005ce4:	40000800 	.word	0x40000800
 8005ce8:	40000c00 	.word	0x40000c00
 8005cec:	40010400 	.word	0x40010400
 8005cf0:	40014000 	.word	0x40014000
 8005cf4:	40001800 	.word	0x40001800

08005cf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d020      	beq.n	8005d5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d01b      	beq.n	8005d5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f06f 0202 	mvn.w	r2, #2
 8005d2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	f003 0303 	and.w	r3, r3, #3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d003      	beq.n	8005d4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f999 	bl	800607a <HAL_TIM_IC_CaptureCallback>
 8005d48:	e005      	b.n	8005d56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f98b 	bl	8006066 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 f99c 	bl	800608e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	f003 0304 	and.w	r3, r3, #4
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d020      	beq.n	8005da8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f003 0304 	and.w	r3, r3, #4
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d01b      	beq.n	8005da8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f06f 0204 	mvn.w	r2, #4
 8005d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2202      	movs	r2, #2
 8005d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d003      	beq.n	8005d96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f973 	bl	800607a <HAL_TIM_IC_CaptureCallback>
 8005d94:	e005      	b.n	8005da2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f965 	bl	8006066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f976 	bl	800608e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	f003 0308 	and.w	r3, r3, #8
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d020      	beq.n	8005df4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f003 0308 	and.w	r3, r3, #8
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d01b      	beq.n	8005df4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f06f 0208 	mvn.w	r2, #8
 8005dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2204      	movs	r2, #4
 8005dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	f003 0303 	and.w	r3, r3, #3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d003      	beq.n	8005de2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f94d 	bl	800607a <HAL_TIM_IC_CaptureCallback>
 8005de0:	e005      	b.n	8005dee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f93f 	bl	8006066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 f950 	bl	800608e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	f003 0310 	and.w	r3, r3, #16
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d020      	beq.n	8005e40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f003 0310 	and.w	r3, r3, #16
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d01b      	beq.n	8005e40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f06f 0210 	mvn.w	r2, #16
 8005e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2208      	movs	r2, #8
 8005e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d003      	beq.n	8005e2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f927 	bl	800607a <HAL_TIM_IC_CaptureCallback>
 8005e2c:	e005      	b.n	8005e3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f919 	bl	8006066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f92a 	bl	800608e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00c      	beq.n	8005e64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d007      	beq.n	8005e64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f06f 0201 	mvn.w	r2, #1
 8005e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7fb fa6a 	bl	8001338 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00c      	beq.n	8005e88 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d007      	beq.n	8005e88 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 fae4 	bl	8006450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00c      	beq.n	8005eac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d007      	beq.n	8005eac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f8fb 	bl	80060a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	f003 0320 	and.w	r3, r3, #32
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00c      	beq.n	8005ed0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f003 0320 	and.w	r3, r3, #32
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d007      	beq.n	8005ed0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f06f 0220 	mvn.w	r2, #32
 8005ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fab6 	bl	800643c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ed0:	bf00      	nop
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d101      	bne.n	8005ef4 <HAL_TIM_ConfigClockSource+0x1c>
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	e0b4      	b.n	800605e <HAL_TIM_ConfigClockSource+0x186>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f2c:	d03e      	beq.n	8005fac <HAL_TIM_ConfigClockSource+0xd4>
 8005f2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f32:	f200 8087 	bhi.w	8006044 <HAL_TIM_ConfigClockSource+0x16c>
 8005f36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f3a:	f000 8086 	beq.w	800604a <HAL_TIM_ConfigClockSource+0x172>
 8005f3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f42:	d87f      	bhi.n	8006044 <HAL_TIM_ConfigClockSource+0x16c>
 8005f44:	2b70      	cmp	r3, #112	@ 0x70
 8005f46:	d01a      	beq.n	8005f7e <HAL_TIM_ConfigClockSource+0xa6>
 8005f48:	2b70      	cmp	r3, #112	@ 0x70
 8005f4a:	d87b      	bhi.n	8006044 <HAL_TIM_ConfigClockSource+0x16c>
 8005f4c:	2b60      	cmp	r3, #96	@ 0x60
 8005f4e:	d050      	beq.n	8005ff2 <HAL_TIM_ConfigClockSource+0x11a>
 8005f50:	2b60      	cmp	r3, #96	@ 0x60
 8005f52:	d877      	bhi.n	8006044 <HAL_TIM_ConfigClockSource+0x16c>
 8005f54:	2b50      	cmp	r3, #80	@ 0x50
 8005f56:	d03c      	beq.n	8005fd2 <HAL_TIM_ConfigClockSource+0xfa>
 8005f58:	2b50      	cmp	r3, #80	@ 0x50
 8005f5a:	d873      	bhi.n	8006044 <HAL_TIM_ConfigClockSource+0x16c>
 8005f5c:	2b40      	cmp	r3, #64	@ 0x40
 8005f5e:	d058      	beq.n	8006012 <HAL_TIM_ConfigClockSource+0x13a>
 8005f60:	2b40      	cmp	r3, #64	@ 0x40
 8005f62:	d86f      	bhi.n	8006044 <HAL_TIM_ConfigClockSource+0x16c>
 8005f64:	2b30      	cmp	r3, #48	@ 0x30
 8005f66:	d064      	beq.n	8006032 <HAL_TIM_ConfigClockSource+0x15a>
 8005f68:	2b30      	cmp	r3, #48	@ 0x30
 8005f6a:	d86b      	bhi.n	8006044 <HAL_TIM_ConfigClockSource+0x16c>
 8005f6c:	2b20      	cmp	r3, #32
 8005f6e:	d060      	beq.n	8006032 <HAL_TIM_ConfigClockSource+0x15a>
 8005f70:	2b20      	cmp	r3, #32
 8005f72:	d867      	bhi.n	8006044 <HAL_TIM_ConfigClockSource+0x16c>
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d05c      	beq.n	8006032 <HAL_TIM_ConfigClockSource+0x15a>
 8005f78:	2b10      	cmp	r3, #16
 8005f7a:	d05a      	beq.n	8006032 <HAL_TIM_ConfigClockSource+0x15a>
 8005f7c:	e062      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f8e:	f000 f9b9 	bl	8006304 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005fa0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	609a      	str	r2, [r3, #8]
      break;
 8005faa:	e04f      	b.n	800604c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fbc:	f000 f9a2 	bl	8006304 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689a      	ldr	r2, [r3, #8]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fce:	609a      	str	r2, [r3, #8]
      break;
 8005fd0:	e03c      	b.n	800604c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fde:	461a      	mov	r2, r3
 8005fe0:	f000 f916 	bl	8006210 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2150      	movs	r1, #80	@ 0x50
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 f96f 	bl	80062ce <TIM_ITRx_SetConfig>
      break;
 8005ff0:	e02c      	b.n	800604c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ffe:	461a      	mov	r2, r3
 8006000:	f000 f935 	bl	800626e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2160      	movs	r1, #96	@ 0x60
 800600a:	4618      	mov	r0, r3
 800600c:	f000 f95f 	bl	80062ce <TIM_ITRx_SetConfig>
      break;
 8006010:	e01c      	b.n	800604c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800601e:	461a      	mov	r2, r3
 8006020:	f000 f8f6 	bl	8006210 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2140      	movs	r1, #64	@ 0x40
 800602a:	4618      	mov	r0, r3
 800602c:	f000 f94f 	bl	80062ce <TIM_ITRx_SetConfig>
      break;
 8006030:	e00c      	b.n	800604c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4619      	mov	r1, r3
 800603c:	4610      	mov	r0, r2
 800603e:	f000 f946 	bl	80062ce <TIM_ITRx_SetConfig>
      break;
 8006042:	e003      	b.n	800604c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	73fb      	strb	r3, [r7, #15]
      break;
 8006048:	e000      	b.n	800604c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800604a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800605c:	7bfb      	ldrb	r3, [r7, #15]
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006066:	b480      	push	{r7}
 8006068:	b083      	sub	sp, #12
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800606e:	bf00      	nop
 8006070:	370c      	adds	r7, #12
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800607a:	b480      	push	{r7}
 800607c:	b083      	sub	sp, #12
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006082:	bf00      	nop
 8006084:	370c      	adds	r7, #12
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800608e:	b480      	push	{r7}
 8006090:	b083      	sub	sp, #12
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006096:	bf00      	nop
 8006098:	370c      	adds	r7, #12
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060a2:	b480      	push	{r7}
 80060a4:	b083      	sub	sp, #12
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060aa:	bf00      	nop
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
	...

080060b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a46      	ldr	r2, [pc, #280]	@ (80061e4 <TIM_Base_SetConfig+0x12c>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d013      	beq.n	80060f8 <TIM_Base_SetConfig+0x40>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060d6:	d00f      	beq.n	80060f8 <TIM_Base_SetConfig+0x40>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a43      	ldr	r2, [pc, #268]	@ (80061e8 <TIM_Base_SetConfig+0x130>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d00b      	beq.n	80060f8 <TIM_Base_SetConfig+0x40>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a42      	ldr	r2, [pc, #264]	@ (80061ec <TIM_Base_SetConfig+0x134>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d007      	beq.n	80060f8 <TIM_Base_SetConfig+0x40>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a41      	ldr	r2, [pc, #260]	@ (80061f0 <TIM_Base_SetConfig+0x138>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d003      	beq.n	80060f8 <TIM_Base_SetConfig+0x40>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a40      	ldr	r2, [pc, #256]	@ (80061f4 <TIM_Base_SetConfig+0x13c>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d108      	bne.n	800610a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	4313      	orrs	r3, r2
 8006108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a35      	ldr	r2, [pc, #212]	@ (80061e4 <TIM_Base_SetConfig+0x12c>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d02b      	beq.n	800616a <TIM_Base_SetConfig+0xb2>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006118:	d027      	beq.n	800616a <TIM_Base_SetConfig+0xb2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a32      	ldr	r2, [pc, #200]	@ (80061e8 <TIM_Base_SetConfig+0x130>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d023      	beq.n	800616a <TIM_Base_SetConfig+0xb2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a31      	ldr	r2, [pc, #196]	@ (80061ec <TIM_Base_SetConfig+0x134>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d01f      	beq.n	800616a <TIM_Base_SetConfig+0xb2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a30      	ldr	r2, [pc, #192]	@ (80061f0 <TIM_Base_SetConfig+0x138>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d01b      	beq.n	800616a <TIM_Base_SetConfig+0xb2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a2f      	ldr	r2, [pc, #188]	@ (80061f4 <TIM_Base_SetConfig+0x13c>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d017      	beq.n	800616a <TIM_Base_SetConfig+0xb2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a2e      	ldr	r2, [pc, #184]	@ (80061f8 <TIM_Base_SetConfig+0x140>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d013      	beq.n	800616a <TIM_Base_SetConfig+0xb2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a2d      	ldr	r2, [pc, #180]	@ (80061fc <TIM_Base_SetConfig+0x144>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d00f      	beq.n	800616a <TIM_Base_SetConfig+0xb2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a2c      	ldr	r2, [pc, #176]	@ (8006200 <TIM_Base_SetConfig+0x148>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d00b      	beq.n	800616a <TIM_Base_SetConfig+0xb2>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a2b      	ldr	r2, [pc, #172]	@ (8006204 <TIM_Base_SetConfig+0x14c>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d007      	beq.n	800616a <TIM_Base_SetConfig+0xb2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a2a      	ldr	r2, [pc, #168]	@ (8006208 <TIM_Base_SetConfig+0x150>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d003      	beq.n	800616a <TIM_Base_SetConfig+0xb2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a29      	ldr	r2, [pc, #164]	@ (800620c <TIM_Base_SetConfig+0x154>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d108      	bne.n	800617c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	4313      	orrs	r3, r2
 800617a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	4313      	orrs	r3, r2
 8006188:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	689a      	ldr	r2, [r3, #8]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a10      	ldr	r2, [pc, #64]	@ (80061e4 <TIM_Base_SetConfig+0x12c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d003      	beq.n	80061b0 <TIM_Base_SetConfig+0xf8>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a12      	ldr	r2, [pc, #72]	@ (80061f4 <TIM_Base_SetConfig+0x13c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d103      	bne.n	80061b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	691a      	ldr	r2, [r3, #16]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d105      	bne.n	80061d6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	f023 0201 	bic.w	r2, r3, #1
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	611a      	str	r2, [r3, #16]
  }
}
 80061d6:	bf00      	nop
 80061d8:	3714      	adds	r7, #20
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	40010000 	.word	0x40010000
 80061e8:	40000400 	.word	0x40000400
 80061ec:	40000800 	.word	0x40000800
 80061f0:	40000c00 	.word	0x40000c00
 80061f4:	40010400 	.word	0x40010400
 80061f8:	40014000 	.word	0x40014000
 80061fc:	40014400 	.word	0x40014400
 8006200:	40014800 	.word	0x40014800
 8006204:	40001800 	.word	0x40001800
 8006208:	40001c00 	.word	0x40001c00
 800620c:	40002000 	.word	0x40002000

08006210 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006210:	b480      	push	{r7}
 8006212:	b087      	sub	sp, #28
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	f023 0201 	bic.w	r2, r3, #1
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800623a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	011b      	lsls	r3, r3, #4
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	4313      	orrs	r3, r2
 8006244:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f023 030a 	bic.w	r3, r3, #10
 800624c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	4313      	orrs	r3, r2
 8006254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	621a      	str	r2, [r3, #32]
}
 8006262:	bf00      	nop
 8006264:	371c      	adds	r7, #28
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800626e:	b480      	push	{r7}
 8006270:	b087      	sub	sp, #28
 8006272:	af00      	add	r7, sp, #0
 8006274:	60f8      	str	r0, [r7, #12]
 8006276:	60b9      	str	r1, [r7, #8]
 8006278:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6a1b      	ldr	r3, [r3, #32]
 8006284:	f023 0210 	bic.w	r2, r3, #16
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006298:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	031b      	lsls	r3, r3, #12
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80062aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	011b      	lsls	r3, r3, #4
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	621a      	str	r2, [r3, #32]
}
 80062c2:	bf00      	nop
 80062c4:	371c      	adds	r7, #28
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062ce:	b480      	push	{r7}
 80062d0:	b085      	sub	sp, #20
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
 80062d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	f043 0307 	orr.w	r3, r3, #7
 80062f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	609a      	str	r2, [r3, #8]
}
 80062f8:	bf00      	nop
 80062fa:	3714      	adds	r7, #20
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
 8006310:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800631e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	021a      	lsls	r2, r3, #8
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	431a      	orrs	r2, r3
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	4313      	orrs	r3, r2
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	4313      	orrs	r3, r2
 8006330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	609a      	str	r2, [r3, #8]
}
 8006338:	bf00      	nop
 800633a:	371c      	adds	r7, #28
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006344:	b480      	push	{r7}
 8006346:	b085      	sub	sp, #20
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006354:	2b01      	cmp	r3, #1
 8006356:	d101      	bne.n	800635c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006358:	2302      	movs	r3, #2
 800635a:	e05a      	b.n	8006412 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2202      	movs	r2, #2
 8006368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006382:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	4313      	orrs	r3, r2
 800638c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a21      	ldr	r2, [pc, #132]	@ (8006420 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d022      	beq.n	80063e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063a8:	d01d      	beq.n	80063e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a1d      	ldr	r2, [pc, #116]	@ (8006424 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d018      	beq.n	80063e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a1b      	ldr	r2, [pc, #108]	@ (8006428 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d013      	beq.n	80063e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a1a      	ldr	r2, [pc, #104]	@ (800642c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d00e      	beq.n	80063e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a18      	ldr	r2, [pc, #96]	@ (8006430 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d009      	beq.n	80063e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a17      	ldr	r2, [pc, #92]	@ (8006434 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d004      	beq.n	80063e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a15      	ldr	r2, [pc, #84]	@ (8006438 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d10c      	bne.n	8006400 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	68ba      	ldr	r2, [r7, #8]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	40010000 	.word	0x40010000
 8006424:	40000400 	.word	0x40000400
 8006428:	40000800 	.word	0x40000800
 800642c:	40000c00 	.word	0x40000c00
 8006430:	40010400 	.word	0x40010400
 8006434:	40014000 	.word	0x40014000
 8006438:	40001800 	.word	0x40001800

0800643c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d101      	bne.n	8006476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e042      	b.n	80064fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d106      	bne.n	8006490 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7fb f984 	bl	8001798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2224      	movs	r2, #36	@ 0x24
 8006494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68da      	ldr	r2, [r3, #12]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f82b 	bl	8006504 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	691a      	ldr	r2, [r3, #16]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80064bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	695a      	ldr	r2, [r3, #20]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68da      	ldr	r2, [r3, #12]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80064dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2220      	movs	r2, #32
 80064e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2220      	movs	r2, #32
 80064f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3708      	adds	r7, #8
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006508:	b0c0      	sub	sp, #256	@ 0x100
 800650a:	af00      	add	r7, sp, #0
 800650c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800651c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006520:	68d9      	ldr	r1, [r3, #12]
 8006522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	ea40 0301 	orr.w	r3, r0, r1
 800652c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800652e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006532:	689a      	ldr	r2, [r3, #8]
 8006534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	431a      	orrs	r2, r3
 800653c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	431a      	orrs	r2, r3
 8006544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	4313      	orrs	r3, r2
 800654c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800655c:	f021 010c 	bic.w	r1, r1, #12
 8006560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800656a:	430b      	orrs	r3, r1
 800656c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800656e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800657a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800657e:	6999      	ldr	r1, [r3, #24]
 8006580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	ea40 0301 	orr.w	r3, r0, r1
 800658a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800658c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	4b8f      	ldr	r3, [pc, #572]	@ (80067d0 <UART_SetConfig+0x2cc>)
 8006594:	429a      	cmp	r2, r3
 8006596:	d005      	beq.n	80065a4 <UART_SetConfig+0xa0>
 8006598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	4b8d      	ldr	r3, [pc, #564]	@ (80067d4 <UART_SetConfig+0x2d0>)
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d104      	bne.n	80065ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065a4:	f7fe fe04 	bl	80051b0 <HAL_RCC_GetPCLK2Freq>
 80065a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80065ac:	e003      	b.n	80065b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065ae:	f7fe fdeb 	bl	8005188 <HAL_RCC_GetPCLK1Freq>
 80065b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ba:	69db      	ldr	r3, [r3, #28]
 80065bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065c0:	f040 810c 	bne.w	80067dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065c8:	2200      	movs	r2, #0
 80065ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80065ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80065d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80065d6:	4622      	mov	r2, r4
 80065d8:	462b      	mov	r3, r5
 80065da:	1891      	adds	r1, r2, r2
 80065dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80065de:	415b      	adcs	r3, r3
 80065e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80065e6:	4621      	mov	r1, r4
 80065e8:	eb12 0801 	adds.w	r8, r2, r1
 80065ec:	4629      	mov	r1, r5
 80065ee:	eb43 0901 	adc.w	r9, r3, r1
 80065f2:	f04f 0200 	mov.w	r2, #0
 80065f6:	f04f 0300 	mov.w	r3, #0
 80065fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006602:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006606:	4690      	mov	r8, r2
 8006608:	4699      	mov	r9, r3
 800660a:	4623      	mov	r3, r4
 800660c:	eb18 0303 	adds.w	r3, r8, r3
 8006610:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006614:	462b      	mov	r3, r5
 8006616:	eb49 0303 	adc.w	r3, r9, r3
 800661a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800661e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800662a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800662e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006632:	460b      	mov	r3, r1
 8006634:	18db      	adds	r3, r3, r3
 8006636:	653b      	str	r3, [r7, #80]	@ 0x50
 8006638:	4613      	mov	r3, r2
 800663a:	eb42 0303 	adc.w	r3, r2, r3
 800663e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006640:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006644:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006648:	f7f9 fdd2 	bl	80001f0 <__aeabi_uldivmod>
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	4b61      	ldr	r3, [pc, #388]	@ (80067d8 <UART_SetConfig+0x2d4>)
 8006652:	fba3 2302 	umull	r2, r3, r3, r2
 8006656:	095b      	lsrs	r3, r3, #5
 8006658:	011c      	lsls	r4, r3, #4
 800665a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800665e:	2200      	movs	r2, #0
 8006660:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006664:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006668:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800666c:	4642      	mov	r2, r8
 800666e:	464b      	mov	r3, r9
 8006670:	1891      	adds	r1, r2, r2
 8006672:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006674:	415b      	adcs	r3, r3
 8006676:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006678:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800667c:	4641      	mov	r1, r8
 800667e:	eb12 0a01 	adds.w	sl, r2, r1
 8006682:	4649      	mov	r1, r9
 8006684:	eb43 0b01 	adc.w	fp, r3, r1
 8006688:	f04f 0200 	mov.w	r2, #0
 800668c:	f04f 0300 	mov.w	r3, #0
 8006690:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006694:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006698:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800669c:	4692      	mov	sl, r2
 800669e:	469b      	mov	fp, r3
 80066a0:	4643      	mov	r3, r8
 80066a2:	eb1a 0303 	adds.w	r3, sl, r3
 80066a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066aa:	464b      	mov	r3, r9
 80066ac:	eb4b 0303 	adc.w	r3, fp, r3
 80066b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80066b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80066c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80066c8:	460b      	mov	r3, r1
 80066ca:	18db      	adds	r3, r3, r3
 80066cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80066ce:	4613      	mov	r3, r2
 80066d0:	eb42 0303 	adc.w	r3, r2, r3
 80066d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80066d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80066da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80066de:	f7f9 fd87 	bl	80001f0 <__aeabi_uldivmod>
 80066e2:	4602      	mov	r2, r0
 80066e4:	460b      	mov	r3, r1
 80066e6:	4611      	mov	r1, r2
 80066e8:	4b3b      	ldr	r3, [pc, #236]	@ (80067d8 <UART_SetConfig+0x2d4>)
 80066ea:	fba3 2301 	umull	r2, r3, r3, r1
 80066ee:	095b      	lsrs	r3, r3, #5
 80066f0:	2264      	movs	r2, #100	@ 0x64
 80066f2:	fb02 f303 	mul.w	r3, r2, r3
 80066f6:	1acb      	subs	r3, r1, r3
 80066f8:	00db      	lsls	r3, r3, #3
 80066fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80066fe:	4b36      	ldr	r3, [pc, #216]	@ (80067d8 <UART_SetConfig+0x2d4>)
 8006700:	fba3 2302 	umull	r2, r3, r3, r2
 8006704:	095b      	lsrs	r3, r3, #5
 8006706:	005b      	lsls	r3, r3, #1
 8006708:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800670c:	441c      	add	r4, r3
 800670e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006712:	2200      	movs	r2, #0
 8006714:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006718:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800671c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006720:	4642      	mov	r2, r8
 8006722:	464b      	mov	r3, r9
 8006724:	1891      	adds	r1, r2, r2
 8006726:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006728:	415b      	adcs	r3, r3
 800672a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800672c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006730:	4641      	mov	r1, r8
 8006732:	1851      	adds	r1, r2, r1
 8006734:	6339      	str	r1, [r7, #48]	@ 0x30
 8006736:	4649      	mov	r1, r9
 8006738:	414b      	adcs	r3, r1
 800673a:	637b      	str	r3, [r7, #52]	@ 0x34
 800673c:	f04f 0200 	mov.w	r2, #0
 8006740:	f04f 0300 	mov.w	r3, #0
 8006744:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006748:	4659      	mov	r1, fp
 800674a:	00cb      	lsls	r3, r1, #3
 800674c:	4651      	mov	r1, sl
 800674e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006752:	4651      	mov	r1, sl
 8006754:	00ca      	lsls	r2, r1, #3
 8006756:	4610      	mov	r0, r2
 8006758:	4619      	mov	r1, r3
 800675a:	4603      	mov	r3, r0
 800675c:	4642      	mov	r2, r8
 800675e:	189b      	adds	r3, r3, r2
 8006760:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006764:	464b      	mov	r3, r9
 8006766:	460a      	mov	r2, r1
 8006768:	eb42 0303 	adc.w	r3, r2, r3
 800676c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800677c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006780:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006784:	460b      	mov	r3, r1
 8006786:	18db      	adds	r3, r3, r3
 8006788:	62bb      	str	r3, [r7, #40]	@ 0x28
 800678a:	4613      	mov	r3, r2
 800678c:	eb42 0303 	adc.w	r3, r2, r3
 8006790:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006792:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006796:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800679a:	f7f9 fd29 	bl	80001f0 <__aeabi_uldivmod>
 800679e:	4602      	mov	r2, r0
 80067a0:	460b      	mov	r3, r1
 80067a2:	4b0d      	ldr	r3, [pc, #52]	@ (80067d8 <UART_SetConfig+0x2d4>)
 80067a4:	fba3 1302 	umull	r1, r3, r3, r2
 80067a8:	095b      	lsrs	r3, r3, #5
 80067aa:	2164      	movs	r1, #100	@ 0x64
 80067ac:	fb01 f303 	mul.w	r3, r1, r3
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	00db      	lsls	r3, r3, #3
 80067b4:	3332      	adds	r3, #50	@ 0x32
 80067b6:	4a08      	ldr	r2, [pc, #32]	@ (80067d8 <UART_SetConfig+0x2d4>)
 80067b8:	fba2 2303 	umull	r2, r3, r2, r3
 80067bc:	095b      	lsrs	r3, r3, #5
 80067be:	f003 0207 	and.w	r2, r3, #7
 80067c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4422      	add	r2, r4
 80067ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80067cc:	e106      	b.n	80069dc <UART_SetConfig+0x4d8>
 80067ce:	bf00      	nop
 80067d0:	40011000 	.word	0x40011000
 80067d4:	40011400 	.word	0x40011400
 80067d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067e0:	2200      	movs	r2, #0
 80067e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80067e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80067ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80067ee:	4642      	mov	r2, r8
 80067f0:	464b      	mov	r3, r9
 80067f2:	1891      	adds	r1, r2, r2
 80067f4:	6239      	str	r1, [r7, #32]
 80067f6:	415b      	adcs	r3, r3
 80067f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80067fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067fe:	4641      	mov	r1, r8
 8006800:	1854      	adds	r4, r2, r1
 8006802:	4649      	mov	r1, r9
 8006804:	eb43 0501 	adc.w	r5, r3, r1
 8006808:	f04f 0200 	mov.w	r2, #0
 800680c:	f04f 0300 	mov.w	r3, #0
 8006810:	00eb      	lsls	r3, r5, #3
 8006812:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006816:	00e2      	lsls	r2, r4, #3
 8006818:	4614      	mov	r4, r2
 800681a:	461d      	mov	r5, r3
 800681c:	4643      	mov	r3, r8
 800681e:	18e3      	adds	r3, r4, r3
 8006820:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006824:	464b      	mov	r3, r9
 8006826:	eb45 0303 	adc.w	r3, r5, r3
 800682a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800682e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800683a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800683e:	f04f 0200 	mov.w	r2, #0
 8006842:	f04f 0300 	mov.w	r3, #0
 8006846:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800684a:	4629      	mov	r1, r5
 800684c:	008b      	lsls	r3, r1, #2
 800684e:	4621      	mov	r1, r4
 8006850:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006854:	4621      	mov	r1, r4
 8006856:	008a      	lsls	r2, r1, #2
 8006858:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800685c:	f7f9 fcc8 	bl	80001f0 <__aeabi_uldivmod>
 8006860:	4602      	mov	r2, r0
 8006862:	460b      	mov	r3, r1
 8006864:	4b60      	ldr	r3, [pc, #384]	@ (80069e8 <UART_SetConfig+0x4e4>)
 8006866:	fba3 2302 	umull	r2, r3, r3, r2
 800686a:	095b      	lsrs	r3, r3, #5
 800686c:	011c      	lsls	r4, r3, #4
 800686e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006872:	2200      	movs	r2, #0
 8006874:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006878:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800687c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006880:	4642      	mov	r2, r8
 8006882:	464b      	mov	r3, r9
 8006884:	1891      	adds	r1, r2, r2
 8006886:	61b9      	str	r1, [r7, #24]
 8006888:	415b      	adcs	r3, r3
 800688a:	61fb      	str	r3, [r7, #28]
 800688c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006890:	4641      	mov	r1, r8
 8006892:	1851      	adds	r1, r2, r1
 8006894:	6139      	str	r1, [r7, #16]
 8006896:	4649      	mov	r1, r9
 8006898:	414b      	adcs	r3, r1
 800689a:	617b      	str	r3, [r7, #20]
 800689c:	f04f 0200 	mov.w	r2, #0
 80068a0:	f04f 0300 	mov.w	r3, #0
 80068a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068a8:	4659      	mov	r1, fp
 80068aa:	00cb      	lsls	r3, r1, #3
 80068ac:	4651      	mov	r1, sl
 80068ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068b2:	4651      	mov	r1, sl
 80068b4:	00ca      	lsls	r2, r1, #3
 80068b6:	4610      	mov	r0, r2
 80068b8:	4619      	mov	r1, r3
 80068ba:	4603      	mov	r3, r0
 80068bc:	4642      	mov	r2, r8
 80068be:	189b      	adds	r3, r3, r2
 80068c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068c4:	464b      	mov	r3, r9
 80068c6:	460a      	mov	r2, r1
 80068c8:	eb42 0303 	adc.w	r3, r2, r3
 80068cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80068d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80068dc:	f04f 0200 	mov.w	r2, #0
 80068e0:	f04f 0300 	mov.w	r3, #0
 80068e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80068e8:	4649      	mov	r1, r9
 80068ea:	008b      	lsls	r3, r1, #2
 80068ec:	4641      	mov	r1, r8
 80068ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068f2:	4641      	mov	r1, r8
 80068f4:	008a      	lsls	r2, r1, #2
 80068f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80068fa:	f7f9 fc79 	bl	80001f0 <__aeabi_uldivmod>
 80068fe:	4602      	mov	r2, r0
 8006900:	460b      	mov	r3, r1
 8006902:	4611      	mov	r1, r2
 8006904:	4b38      	ldr	r3, [pc, #224]	@ (80069e8 <UART_SetConfig+0x4e4>)
 8006906:	fba3 2301 	umull	r2, r3, r3, r1
 800690a:	095b      	lsrs	r3, r3, #5
 800690c:	2264      	movs	r2, #100	@ 0x64
 800690e:	fb02 f303 	mul.w	r3, r2, r3
 8006912:	1acb      	subs	r3, r1, r3
 8006914:	011b      	lsls	r3, r3, #4
 8006916:	3332      	adds	r3, #50	@ 0x32
 8006918:	4a33      	ldr	r2, [pc, #204]	@ (80069e8 <UART_SetConfig+0x4e4>)
 800691a:	fba2 2303 	umull	r2, r3, r2, r3
 800691e:	095b      	lsrs	r3, r3, #5
 8006920:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006924:	441c      	add	r4, r3
 8006926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800692a:	2200      	movs	r2, #0
 800692c:	673b      	str	r3, [r7, #112]	@ 0x70
 800692e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006930:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006934:	4642      	mov	r2, r8
 8006936:	464b      	mov	r3, r9
 8006938:	1891      	adds	r1, r2, r2
 800693a:	60b9      	str	r1, [r7, #8]
 800693c:	415b      	adcs	r3, r3
 800693e:	60fb      	str	r3, [r7, #12]
 8006940:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006944:	4641      	mov	r1, r8
 8006946:	1851      	adds	r1, r2, r1
 8006948:	6039      	str	r1, [r7, #0]
 800694a:	4649      	mov	r1, r9
 800694c:	414b      	adcs	r3, r1
 800694e:	607b      	str	r3, [r7, #4]
 8006950:	f04f 0200 	mov.w	r2, #0
 8006954:	f04f 0300 	mov.w	r3, #0
 8006958:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800695c:	4659      	mov	r1, fp
 800695e:	00cb      	lsls	r3, r1, #3
 8006960:	4651      	mov	r1, sl
 8006962:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006966:	4651      	mov	r1, sl
 8006968:	00ca      	lsls	r2, r1, #3
 800696a:	4610      	mov	r0, r2
 800696c:	4619      	mov	r1, r3
 800696e:	4603      	mov	r3, r0
 8006970:	4642      	mov	r2, r8
 8006972:	189b      	adds	r3, r3, r2
 8006974:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006976:	464b      	mov	r3, r9
 8006978:	460a      	mov	r2, r1
 800697a:	eb42 0303 	adc.w	r3, r2, r3
 800697e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	663b      	str	r3, [r7, #96]	@ 0x60
 800698a:	667a      	str	r2, [r7, #100]	@ 0x64
 800698c:	f04f 0200 	mov.w	r2, #0
 8006990:	f04f 0300 	mov.w	r3, #0
 8006994:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006998:	4649      	mov	r1, r9
 800699a:	008b      	lsls	r3, r1, #2
 800699c:	4641      	mov	r1, r8
 800699e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069a2:	4641      	mov	r1, r8
 80069a4:	008a      	lsls	r2, r1, #2
 80069a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80069aa:	f7f9 fc21 	bl	80001f0 <__aeabi_uldivmod>
 80069ae:	4602      	mov	r2, r0
 80069b0:	460b      	mov	r3, r1
 80069b2:	4b0d      	ldr	r3, [pc, #52]	@ (80069e8 <UART_SetConfig+0x4e4>)
 80069b4:	fba3 1302 	umull	r1, r3, r3, r2
 80069b8:	095b      	lsrs	r3, r3, #5
 80069ba:	2164      	movs	r1, #100	@ 0x64
 80069bc:	fb01 f303 	mul.w	r3, r1, r3
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	011b      	lsls	r3, r3, #4
 80069c4:	3332      	adds	r3, #50	@ 0x32
 80069c6:	4a08      	ldr	r2, [pc, #32]	@ (80069e8 <UART_SetConfig+0x4e4>)
 80069c8:	fba2 2303 	umull	r2, r3, r2, r3
 80069cc:	095b      	lsrs	r3, r3, #5
 80069ce:	f003 020f 	and.w	r2, r3, #15
 80069d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4422      	add	r2, r4
 80069da:	609a      	str	r2, [r3, #8]
}
 80069dc:	bf00      	nop
 80069de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80069e2:	46bd      	mov	sp, r7
 80069e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069e8:	51eb851f 	.word	0x51eb851f

080069ec <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d123      	bne.n	8006a46 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006a06:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	6851      	ldr	r1, [r2, #4]
 8006a0e:	683a      	ldr	r2, [r7, #0]
 8006a10:	6892      	ldr	r2, [r2, #8]
 8006a12:	4311      	orrs	r1, r2
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	68d2      	ldr	r2, [r2, #12]
 8006a18:	4311      	orrs	r1, r2
 8006a1a:	683a      	ldr	r2, [r7, #0]
 8006a1c:	6912      	ldr	r2, [r2, #16]
 8006a1e:	4311      	orrs	r1, r2
 8006a20:	683a      	ldr	r2, [r7, #0]
 8006a22:	6952      	ldr	r2, [r2, #20]
 8006a24:	4311      	orrs	r1, r2
 8006a26:	683a      	ldr	r2, [r7, #0]
 8006a28:	6992      	ldr	r2, [r2, #24]
 8006a2a:	4311      	orrs	r1, r2
 8006a2c:	683a      	ldr	r2, [r7, #0]
 8006a2e:	69d2      	ldr	r2, [r2, #28]
 8006a30:	4311      	orrs	r1, r2
 8006a32:	683a      	ldr	r2, [r7, #0]
 8006a34:	6a12      	ldr	r2, [r2, #32]
 8006a36:	4311      	orrs	r1, r2
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006a3c:	430a      	orrs	r2, r1
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	601a      	str	r2, [r3, #0]
 8006a44:	e028      	b.n	8006a98 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	69d9      	ldr	r1, [r3, #28]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	4319      	orrs	r1, r3
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a5c:	430b      	orrs	r3, r1
 8006a5e:	431a      	orrs	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006a6c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006a70:	683a      	ldr	r2, [r7, #0]
 8006a72:	6851      	ldr	r1, [r2, #4]
 8006a74:	683a      	ldr	r2, [r7, #0]
 8006a76:	6892      	ldr	r2, [r2, #8]
 8006a78:	4311      	orrs	r1, r2
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	68d2      	ldr	r2, [r2, #12]
 8006a7e:	4311      	orrs	r1, r2
 8006a80:	683a      	ldr	r2, [r7, #0]
 8006a82:	6912      	ldr	r2, [r2, #16]
 8006a84:	4311      	orrs	r1, r2
 8006a86:	683a      	ldr	r2, [r7, #0]
 8006a88:	6952      	ldr	r2, [r2, #20]
 8006a8a:	4311      	orrs	r1, r2
 8006a8c:	683a      	ldr	r2, [r7, #0]
 8006a8e:	6992      	ldr	r2, [r2, #24]
 8006a90:	430a      	orrs	r2, r1
 8006a92:	431a      	orrs	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b085      	sub	sp, #20
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	60f8      	str	r0, [r7, #12]
 8006aae:	60b9      	str	r1, [r7, #8]
 8006ab0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d128      	bne.n	8006b0a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	1e59      	subs	r1, r3, #1
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	3b01      	subs	r3, #1
 8006acc:	011b      	lsls	r3, r3, #4
 8006ace:	4319      	orrs	r1, r3
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	021b      	lsls	r3, r3, #8
 8006ad8:	4319      	orrs	r1, r3
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	031b      	lsls	r3, r3, #12
 8006ae2:	4319      	orrs	r1, r3
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	041b      	lsls	r3, r3, #16
 8006aec:	4319      	orrs	r1, r3
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	3b01      	subs	r3, #1
 8006af4:	051b      	lsls	r3, r3, #20
 8006af6:	4319      	orrs	r1, r3
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	3b01      	subs	r3, #1
 8006afe:	061b      	lsls	r3, r3, #24
 8006b00:	430b      	orrs	r3, r1
 8006b02:	431a      	orrs	r2, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	609a      	str	r2, [r3, #8]
 8006b08:	e02f      	b.n	8006b6a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006b12:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	68d2      	ldr	r2, [r2, #12]
 8006b1a:	3a01      	subs	r2, #1
 8006b1c:	0311      	lsls	r1, r2, #12
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	6952      	ldr	r2, [r2, #20]
 8006b22:	3a01      	subs	r2, #1
 8006b24:	0512      	lsls	r2, r2, #20
 8006b26:	430a      	orrs	r2, r1
 8006b28:	431a      	orrs	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	1e59      	subs	r1, r3, #1
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	3b01      	subs	r3, #1
 8006b42:	011b      	lsls	r3, r3, #4
 8006b44:	4319      	orrs	r1, r3
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	021b      	lsls	r3, r3, #8
 8006b4e:	4319      	orrs	r1, r3
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	3b01      	subs	r3, #1
 8006b56:	041b      	lsls	r3, r3, #16
 8006b58:	4319      	orrs	r1, r3
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	061b      	lsls	r3, r3, #24
 8006b62:	430b      	orrs	r3, r1
 8006b64:	431a      	orrs	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3714      	adds	r7, #20
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	f043 0201 	orr.w	r2, r3, #1
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	370c      	adds	r7, #12
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b083      	sub	sp, #12
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f023 0201 	bic.w	r2, r3, #1
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006bd6:	d901      	bls.n	8006bdc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e01b      	b.n	8006c14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	daf2      	bge.n	8006bca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006be4:	2300      	movs	r3, #0
 8006be6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	019b      	lsls	r3, r3, #6
 8006bec:	f043 0220 	orr.w	r2, r3, #32
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c00:	d901      	bls.n	8006c06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e006      	b.n	8006c14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	f003 0320 	and.w	r3, r3, #32
 8006c0e:	2b20      	cmp	r3, #32
 8006c10:	d0f0      	beq.n	8006bf4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3714      	adds	r7, #20
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c38:	d901      	bls.n	8006c3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e018      	b.n	8006c70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	daf2      	bge.n	8006c2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006c46:	2300      	movs	r3, #0
 8006c48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2210      	movs	r2, #16
 8006c4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	3301      	adds	r3, #1
 8006c54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c5c:	d901      	bls.n	8006c62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e006      	b.n	8006c70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	f003 0310 	and.w	r3, r3, #16
 8006c6a:	2b10      	cmp	r3, #16
 8006c6c:	d0f0      	beq.n	8006c50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3714      	adds	r7, #20
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b08b      	sub	sp, #44	@ 0x2c
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	4613      	mov	r3, r2
 8006c88:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006c92:	88fb      	ldrh	r3, [r7, #6]
 8006c94:	089b      	lsrs	r3, r3, #2
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006c9a:	88fb      	ldrh	r3, [r7, #6]
 8006c9c:	f003 0303 	and.w	r3, r3, #3
 8006ca0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	623b      	str	r3, [r7, #32]
 8006ca6:	e014      	b.n	8006cd2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb2:	601a      	str	r2, [r3, #0]
    pDest++;
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc8:	3301      	adds	r3, #1
 8006cca:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006ccc:	6a3b      	ldr	r3, [r7, #32]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	623b      	str	r3, [r7, #32]
 8006cd2:	6a3a      	ldr	r2, [r7, #32]
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d3e6      	bcc.n	8006ca8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006cda:	8bfb      	ldrh	r3, [r7, #30]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d01e      	beq.n	8006d1e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cea:	461a      	mov	r2, r3
 8006cec:	f107 0310 	add.w	r3, r7, #16
 8006cf0:	6812      	ldr	r2, [r2, #0]
 8006cf2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006cf4:	693a      	ldr	r2, [r7, #16]
 8006cf6:	6a3b      	ldr	r3, [r7, #32]
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	00db      	lsls	r3, r3, #3
 8006cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8006d00:	b2da      	uxtb	r2, r3
 8006d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d04:	701a      	strb	r2, [r3, #0]
      i++;
 8006d06:	6a3b      	ldr	r3, [r7, #32]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	623b      	str	r3, [r7, #32]
      pDest++;
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0e:	3301      	adds	r3, #1
 8006d10:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006d12:	8bfb      	ldrh	r3, [r7, #30]
 8006d14:	3b01      	subs	r3, #1
 8006d16:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006d18:	8bfb      	ldrh	r3, [r7, #30]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1ea      	bne.n	8006cf4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	372c      	adds	r7, #44	@ 0x2c
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b085      	sub	sp, #20
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	695b      	ldr	r3, [r3, #20]
 8006d38:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	4013      	ands	r3, r2
 8006d42:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006d44:	68fb      	ldr	r3, [r7, #12]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr

08006d52 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006d52:	b480      	push	{r7}
 8006d54:	b085      	sub	sp, #20
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006d62:	78fb      	ldrb	r3, [r7, #3]
 8006d64:	015a      	lsls	r2, r3, #5
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	4413      	add	r3, r2
 8006d6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006d72:	78fb      	ldrb	r3, [r7, #3]
 8006d74:	015a      	lsls	r2, r3, #5
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	4413      	add	r3, r2
 8006d7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	4013      	ands	r3, r2
 8006d84:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d86:	68bb      	ldr	r3, [r7, #8]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3714      	adds	r7, #20
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	695b      	ldr	r3, [r3, #20]
 8006da0:	f003 0301 	and.w	r3, r3, #1
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	460b      	mov	r3, r1
 8006dba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006dce:	f023 0303 	bic.w	r3, r3, #3
 8006dd2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	78fb      	ldrb	r3, [r7, #3]
 8006dde:	f003 0303 	and.w	r3, r3, #3
 8006de2:	68f9      	ldr	r1, [r7, #12]
 8006de4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006de8:	4313      	orrs	r3, r2
 8006dea:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006dec:	78fb      	ldrb	r3, [r7, #3]
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d107      	bne.n	8006e02 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006df8:	461a      	mov	r2, r3
 8006dfa:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006dfe:	6053      	str	r3, [r2, #4]
 8006e00:	e00c      	b.n	8006e1c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8006e02:	78fb      	ldrb	r3, [r7, #3]
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d107      	bne.n	8006e18 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e0e:	461a      	mov	r2, r3
 8006e10:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006e14:	6053      	str	r3, [r2, #4]
 8006e16:	e001      	b.n	8006e1c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e000      	b.n	8006e1e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3714      	adds	r7, #20
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr

08006e2a <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	b085      	sub	sp, #20
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e3c:	695b      	ldr	r3, [r3, #20]
 8006e3e:	b29b      	uxth	r3, r3
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3714      	adds	r7, #20
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b089      	sub	sp, #36	@ 0x24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	460b      	mov	r3, r1
 8006e56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006e5c:	78fb      	ldrb	r3, [r7, #3]
 8006e5e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006e60:	2300      	movs	r3, #0
 8006e62:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	015a      	lsls	r2, r3, #5
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	0c9b      	lsrs	r3, r3, #18
 8006e74:	f003 0303 	and.w	r3, r3, #3
 8006e78:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	015a      	lsls	r2, r3, #5
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	4413      	add	r3, r2
 8006e82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	0fdb      	lsrs	r3, r3, #31
 8006e8a:	f003 0301 	and.w	r3, r3, #1
 8006e8e:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	015a      	lsls	r2, r3, #5
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	4413      	add	r3, r2
 8006e98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	0fdb      	lsrs	r3, r3, #31
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f003 0320 	and.w	r3, r3, #32
 8006eae:	2b20      	cmp	r3, #32
 8006eb0:	d10d      	bne.n	8006ece <USB_HC_Halt+0x82>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d10a      	bne.n	8006ece <USB_HC_Halt+0x82>
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d005      	beq.n	8006eca <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d002      	beq.n	8006eca <USB_HC_Halt+0x7e>
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	2b03      	cmp	r3, #3
 8006ec8:	d101      	bne.n	8006ece <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	e0d8      	b.n	8007080 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d002      	beq.n	8006eda <USB_HC_Halt+0x8e>
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d173      	bne.n	8006fc2 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	015a      	lsls	r2, r3, #5
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	69ba      	ldr	r2, [r7, #24]
 8006eea:	0151      	lsls	r1, r2, #5
 8006eec:	69fa      	ldr	r2, [r7, #28]
 8006eee:	440a      	add	r2, r1
 8006ef0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ef4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ef8:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f003 0320 	and.w	r3, r3, #32
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d14a      	bne.n	8006f9c <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f0a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d133      	bne.n	8006f7a <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	015a      	lsls	r2, r3, #5
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	4413      	add	r3, r2
 8006f1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	69ba      	ldr	r2, [r7, #24]
 8006f22:	0151      	lsls	r1, r2, #5
 8006f24:	69fa      	ldr	r2, [r7, #28]
 8006f26:	440a      	add	r2, r1
 8006f28:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f30:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	015a      	lsls	r2, r3, #5
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	4413      	add	r3, r2
 8006f3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	69ba      	ldr	r2, [r7, #24]
 8006f42:	0151      	lsls	r1, r2, #5
 8006f44:	69fa      	ldr	r2, [r7, #28]
 8006f46:	440a      	add	r2, r1
 8006f48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f4c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f50:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	3301      	adds	r3, #1
 8006f56:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006f5e:	d82e      	bhi.n	8006fbe <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	015a      	lsls	r2, r3, #5
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	4413      	add	r3, r2
 8006f68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f76:	d0ec      	beq.n	8006f52 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f78:	e081      	b.n	800707e <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	015a      	lsls	r2, r3, #5
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	4413      	add	r3, r2
 8006f82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	69ba      	ldr	r2, [r7, #24]
 8006f8a:	0151      	lsls	r1, r2, #5
 8006f8c:	69fa      	ldr	r2, [r7, #28]
 8006f8e:	440a      	add	r2, r1
 8006f90:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f94:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f98:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f9a:	e070      	b.n	800707e <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	015a      	lsls	r2, r3, #5
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	69ba      	ldr	r2, [r7, #24]
 8006fac:	0151      	lsls	r1, r2, #5
 8006fae:	69fa      	ldr	r2, [r7, #28]
 8006fb0:	440a      	add	r2, r1
 8006fb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fb6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006fba:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006fbc:	e05f      	b.n	800707e <USB_HC_Halt+0x232>
            break;
 8006fbe:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006fc0:	e05d      	b.n	800707e <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	015a      	lsls	r2, r3, #5
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	4413      	add	r3, r2
 8006fca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	69ba      	ldr	r2, [r7, #24]
 8006fd2:	0151      	lsls	r1, r2, #5
 8006fd4:	69fa      	ldr	r2, [r7, #28]
 8006fd6:	440a      	add	r2, r1
 8006fd8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fdc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006fe0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d133      	bne.n	800705a <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	015a      	lsls	r2, r3, #5
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	69ba      	ldr	r2, [r7, #24]
 8007002:	0151      	lsls	r1, r2, #5
 8007004:	69fa      	ldr	r2, [r7, #28]
 8007006:	440a      	add	r2, r1
 8007008:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800700c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007010:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	015a      	lsls	r2, r3, #5
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	4413      	add	r3, r2
 800701a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	69ba      	ldr	r2, [r7, #24]
 8007022:	0151      	lsls	r1, r2, #5
 8007024:	69fa      	ldr	r2, [r7, #28]
 8007026:	440a      	add	r2, r1
 8007028:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800702c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007030:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	3301      	adds	r3, #1
 8007036:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800703e:	d81d      	bhi.n	800707c <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	015a      	lsls	r2, r3, #5
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	4413      	add	r3, r2
 8007048:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007052:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007056:	d0ec      	beq.n	8007032 <USB_HC_Halt+0x1e6>
 8007058:	e011      	b.n	800707e <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	015a      	lsls	r2, r3, #5
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	4413      	add	r3, r2
 8007062:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	69ba      	ldr	r2, [r7, #24]
 800706a:	0151      	lsls	r1, r2, #5
 800706c:	69fa      	ldr	r2, [r7, #28]
 800706e:	440a      	add	r2, r1
 8007070:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007074:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007078:	6013      	str	r3, [r2, #0]
 800707a:	e000      	b.n	800707e <USB_HC_Halt+0x232>
          break;
 800707c:	bf00      	nop
    }
  }

  return HAL_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3724      	adds	r7, #36	@ 0x24
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b088      	sub	sp, #32
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007094:	2300      	movs	r3, #0
 8007096:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800709c:	2300      	movs	r3, #0
 800709e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f7ff fd7a 	bl	8006b9a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80070a6:	2110      	movs	r1, #16
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f7ff fd87 	bl	8006bbc <USB_FlushTxFifo>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d001      	beq.n	80070b8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f7ff fdb1 	bl	8006c20 <USB_FlushRxFifo>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d001      	beq.n	80070c8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80070c8:	2300      	movs	r3, #0
 80070ca:	61bb      	str	r3, [r7, #24]
 80070cc:	e01f      	b.n	800710e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	015a      	lsls	r2, r3, #5
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	4413      	add	r3, r2
 80070d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070e4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80070ec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80070f4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	015a      	lsls	r2, r3, #5
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	4413      	add	r3, r2
 80070fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007102:	461a      	mov	r2, r3
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	3301      	adds	r3, #1
 800710c:	61bb      	str	r3, [r7, #24]
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	2b0f      	cmp	r3, #15
 8007112:	d9dc      	bls.n	80070ce <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007114:	2300      	movs	r3, #0
 8007116:	61bb      	str	r3, [r7, #24]
 8007118:	e034      	b.n	8007184 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	015a      	lsls	r2, r3, #5
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	4413      	add	r3, r2
 8007122:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007130:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007138:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007140:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	015a      	lsls	r2, r3, #5
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	4413      	add	r3, r2
 800714a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800714e:	461a      	mov	r2, r3
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	3301      	adds	r3, #1
 8007158:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007160:	d80c      	bhi.n	800717c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	4413      	add	r3, r2
 800716a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007174:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007178:	d0ec      	beq.n	8007154 <USB_StopHost+0xc8>
 800717a:	e000      	b.n	800717e <USB_StopHost+0xf2>
        break;
 800717c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	3301      	adds	r3, #1
 8007182:	61bb      	str	r3, [r7, #24]
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	2b0f      	cmp	r3, #15
 8007188:	d9c7      	bls.n	800711a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007190:	461a      	mov	r2, r3
 8007192:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007196:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800719e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f7ff fce9 	bl	8006b78 <USB_EnableGlobalInt>

  return ret;
 80071a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3720      	adds	r7, #32
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80071be:	1c5a      	adds	r2, r3, #1
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 f804 	bl	80071d4 <USBH_HandleSof>
}
 80071cc:	bf00      	nop
 80071ce:	3708      	adds	r7, #8
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	2b0b      	cmp	r3, #11
 80071e4:	d10a      	bne.n	80071fc <USBH_HandleSof+0x28>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d005      	beq.n	80071fc <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	4798      	blx	r3
  }
}
 80071fc:	bf00      	nop
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007228:	2200      	movs	r2, #0
 800722a:	4619      	mov	r1, r3
 800722c:	f000 f8ae 	bl	800738c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007230:	bf00      	nop
}
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007248:	bf00      	nop
}
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007288:	2200      	movs	r2, #0
 800728a:	4619      	mov	r1, r3
 800728c:	f000 f87e 	bl	800738c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3708      	adds	r7, #8
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b082      	sub	sp, #8
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f001 f928 	bl	8008510 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	791b      	ldrb	r3, [r3, #4]
 80072c4:	4619      	mov	r1, r3
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f830 	bl	800732c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	795b      	ldrb	r3, [r3, #5]
 80072d0:	4619      	mov	r1, r3
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f82a 	bl	800732c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80072ec:	2200      	movs	r2, #0
 80072ee:	4619      	mov	r1, r3
 80072f0:	f000 f84c 	bl	800738c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b082      	sub	sp, #8
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800731a:	2200      	movs	r2, #0
 800731c:	4619      	mov	r1, r3
 800731e:	f000 f835 	bl	800738c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3708      	adds	r7, #8
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	460b      	mov	r3, r1
 8007336:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007338:	78fb      	ldrb	r3, [r7, #3]
 800733a:	2b0f      	cmp	r3, #15
 800733c:	d80d      	bhi.n	800735a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800733e:	78fb      	ldrb	r3, [r7, #3]
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	33e0      	adds	r3, #224	@ 0xe0
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	4413      	add	r3, r2
 8007348:	685a      	ldr	r2, [r3, #4]
 800734a:	78fb      	ldrb	r3, [r7, #3]
 800734c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007350:	6879      	ldr	r1, [r7, #4]
 8007352:	33e0      	adds	r3, #224	@ 0xe0
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	440b      	add	r3, r1
 8007358:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800736e:	f3ef 8305 	mrs	r3, IPSR
 8007372:	607b      	str	r3, [r7, #4]
  return(result);
 8007374:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007376:	2b00      	cmp	r3, #0
 8007378:	bf14      	ite	ne
 800737a:	2301      	movne	r3, #1
 800737c:	2300      	moveq	r3, #0
 800737e:	b2db      	uxtb	r3, r3
}
 8007380:	4618      	mov	r0, r3
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b086      	sub	sp, #24
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007398:	2300      	movs	r3, #0
 800739a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d101      	bne.n	80073aa <osMessagePut+0x1e>
    ticks = 1;
 80073a6:	2301      	movs	r3, #1
 80073a8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80073aa:	f7ff ffdd 	bl	8007368 <inHandlerMode>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d018      	beq.n	80073e6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80073b4:	f107 0210 	add.w	r2, r7, #16
 80073b8:	f107 0108 	add.w	r1, r7, #8
 80073bc:	2300      	movs	r3, #0
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f000 f9ae 	bl	8007720 <xQueueGenericSendFromISR>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d001      	beq.n	80073ce <osMessagePut+0x42>
      return osErrorOS;
 80073ca:	23ff      	movs	r3, #255	@ 0xff
 80073cc:	e018      	b.n	8007400 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d014      	beq.n	80073fe <osMessagePut+0x72>
 80073d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007408 <osMessagePut+0x7c>)
 80073d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	f3bf 8f6f 	isb	sy
 80073e4:	e00b      	b.n	80073fe <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80073e6:	f107 0108 	add.w	r1, r7, #8
 80073ea:	2300      	movs	r3, #0
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f000 f894 	bl	800751c <xQueueGenericSend>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d001      	beq.n	80073fe <osMessagePut+0x72>
      return osErrorOS;
 80073fa:	23ff      	movs	r3, #255	@ 0xff
 80073fc:	e000      	b.n	8007400 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3718      	adds	r7, #24
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	e000ed04 	.word	0xe000ed04

0800740c <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	689a      	ldr	r2, [r3, #8]
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	683a      	ldr	r2, [r7, #0]
 8007436:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	1c5a      	adds	r2, r3, #1
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	601a      	str	r2, [r3, #0]
}
 8007448:	bf00      	nop
 800744a:	3714      	adds	r7, #20
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800746a:	d103      	bne.n	8007474 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	60fb      	str	r3, [r7, #12]
 8007472:	e00c      	b.n	800748e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	3308      	adds	r3, #8
 8007478:	60fb      	str	r3, [r7, #12]
 800747a:	e002      	b.n	8007482 <vListInsert+0x2e>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	60fb      	str	r3, [r7, #12]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68ba      	ldr	r2, [r7, #8]
 800748a:	429a      	cmp	r2, r3
 800748c:	d2f6      	bcs.n	800747c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	685a      	ldr	r2, [r3, #4]
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	683a      	ldr	r2, [r7, #0]
 800749c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	683a      	ldr	r2, [r7, #0]
 80074a8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	1c5a      	adds	r2, r3, #1
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	601a      	str	r2, [r3, #0]
}
 80074ba:	bf00      	nop
 80074bc:	3714      	adds	r7, #20
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr

080074c6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80074c6:	b480      	push	{r7}
 80074c8:	b085      	sub	sp, #20
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	6892      	ldr	r2, [r2, #8]
 80074dc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	6852      	ldr	r2, [r2, #4]
 80074e6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d103      	bne.n	80074fa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	689a      	ldr	r2, [r3, #8]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	1e5a      	subs	r2, r3, #1
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
}
 800750e:	4618      	mov	r0, r3
 8007510:	3714      	adds	r7, #20
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
	...

0800751c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b08e      	sub	sp, #56	@ 0x38
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
 8007528:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800752a:	2300      	movs	r3, #0
 800752c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007534:	2b00      	cmp	r3, #0
 8007536:	d10b      	bne.n	8007550 <xQueueGenericSend+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800753c:	f383 8811 	msr	BASEPRI, r3
 8007540:	f3bf 8f6f 	isb	sy
 8007544:	f3bf 8f4f 	dsb	sy
 8007548:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800754a:	bf00      	nop
 800754c:	bf00      	nop
 800754e:	e7fd      	b.n	800754c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d103      	bne.n	800755e <xQueueGenericSend+0x42>
 8007556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800755a:	2b00      	cmp	r3, #0
 800755c:	d101      	bne.n	8007562 <xQueueGenericSend+0x46>
 800755e:	2301      	movs	r3, #1
 8007560:	e000      	b.n	8007564 <xQueueGenericSend+0x48>
 8007562:	2300      	movs	r3, #0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10b      	bne.n	8007580 <xQueueGenericSend+0x64>
	__asm volatile
 8007568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800756c:	f383 8811 	msr	BASEPRI, r3
 8007570:	f3bf 8f6f 	isb	sy
 8007574:	f3bf 8f4f 	dsb	sy
 8007578:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800757a:	bf00      	nop
 800757c:	bf00      	nop
 800757e:	e7fd      	b.n	800757c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	2b02      	cmp	r3, #2
 8007584:	d103      	bne.n	800758e <xQueueGenericSend+0x72>
 8007586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800758a:	2b01      	cmp	r3, #1
 800758c:	d101      	bne.n	8007592 <xQueueGenericSend+0x76>
 800758e:	2301      	movs	r3, #1
 8007590:	e000      	b.n	8007594 <xQueueGenericSend+0x78>
 8007592:	2300      	movs	r3, #0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d10b      	bne.n	80075b0 <xQueueGenericSend+0x94>
	__asm volatile
 8007598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800759c:	f383 8811 	msr	BASEPRI, r3
 80075a0:	f3bf 8f6f 	isb	sy
 80075a4:	f3bf 8f4f 	dsb	sy
 80075a8:	623b      	str	r3, [r7, #32]
}
 80075aa:	bf00      	nop
 80075ac:	bf00      	nop
 80075ae:	e7fd      	b.n	80075ac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075b0:	f000 fd40 	bl	8008034 <xTaskGetSchedulerState>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d102      	bne.n	80075c0 <xQueueGenericSend+0xa4>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d101      	bne.n	80075c4 <xQueueGenericSend+0xa8>
 80075c0:	2301      	movs	r3, #1
 80075c2:	e000      	b.n	80075c6 <xQueueGenericSend+0xaa>
 80075c4:	2300      	movs	r3, #0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10b      	bne.n	80075e2 <xQueueGenericSend+0xc6>
	__asm volatile
 80075ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	61fb      	str	r3, [r7, #28]
}
 80075dc:	bf00      	nop
 80075de:	bf00      	nop
 80075e0:	e7fd      	b.n	80075de <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80075e2:	f000 fe49 	bl	8008278 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80075e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d302      	bcc.n	80075f8 <xQueueGenericSend+0xdc>
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d129      	bne.n	800764c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	68b9      	ldr	r1, [r7, #8]
 80075fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80075fe:	f000 f92d 	bl	800785c <prvCopyDataToQueue>
 8007602:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007608:	2b00      	cmp	r3, #0
 800760a:	d010      	beq.n	800762e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800760c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800760e:	3324      	adds	r3, #36	@ 0x24
 8007610:	4618      	mov	r0, r3
 8007612:	f000 fc05 	bl	8007e20 <xTaskRemoveFromEventList>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d013      	beq.n	8007644 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800761c:	4b3f      	ldr	r3, [pc, #252]	@ (800771c <xQueueGenericSend+0x200>)
 800761e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007622:	601a      	str	r2, [r3, #0]
 8007624:	f3bf 8f4f 	dsb	sy
 8007628:	f3bf 8f6f 	isb	sy
 800762c:	e00a      	b.n	8007644 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800762e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007630:	2b00      	cmp	r3, #0
 8007632:	d007      	beq.n	8007644 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007634:	4b39      	ldr	r3, [pc, #228]	@ (800771c <xQueueGenericSend+0x200>)
 8007636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800763a:	601a      	str	r2, [r3, #0]
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007644:	f000 fe4a 	bl	80082dc <vPortExitCritical>
				return pdPASS;
 8007648:	2301      	movs	r3, #1
 800764a:	e063      	b.n	8007714 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d103      	bne.n	800765a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007652:	f000 fe43 	bl	80082dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007656:	2300      	movs	r3, #0
 8007658:	e05c      	b.n	8007714 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800765a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800765c:	2b00      	cmp	r3, #0
 800765e:	d106      	bne.n	800766e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007660:	f107 0314 	add.w	r3, r7, #20
 8007664:	4618      	mov	r0, r3
 8007666:	f000 fc3f 	bl	8007ee8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800766a:	2301      	movs	r3, #1
 800766c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800766e:	f000 fe35 	bl	80082dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007672:	f000 f9c7 	bl	8007a04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007676:	f000 fdff 	bl	8008278 <vPortEnterCritical>
 800767a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800767c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007680:	b25b      	sxtb	r3, r3
 8007682:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007686:	d103      	bne.n	8007690 <xQueueGenericSend+0x174>
 8007688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768a:	2200      	movs	r2, #0
 800768c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007692:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007696:	b25b      	sxtb	r3, r3
 8007698:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800769c:	d103      	bne.n	80076a6 <xQueueGenericSend+0x18a>
 800769e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076a6:	f000 fe19 	bl	80082dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076aa:	1d3a      	adds	r2, r7, #4
 80076ac:	f107 0314 	add.w	r3, r7, #20
 80076b0:	4611      	mov	r1, r2
 80076b2:	4618      	mov	r0, r3
 80076b4:	f000 fc2e 	bl	8007f14 <xTaskCheckForTimeOut>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d124      	bne.n	8007708 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80076be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80076c0:	f000 f988 	bl	80079d4 <prvIsQueueFull>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d018      	beq.n	80076fc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80076ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076cc:	3310      	adds	r3, #16
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	4611      	mov	r1, r2
 80076d2:	4618      	mov	r0, r3
 80076d4:	f000 fb7e 	bl	8007dd4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80076d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80076da:	f000 f929 	bl	8007930 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80076de:	f000 f99f 	bl	8007a20 <xTaskResumeAll>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f47f af7c 	bne.w	80075e2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80076ea:	4b0c      	ldr	r3, [pc, #48]	@ (800771c <xQueueGenericSend+0x200>)
 80076ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076f0:	601a      	str	r2, [r3, #0]
 80076f2:	f3bf 8f4f 	dsb	sy
 80076f6:	f3bf 8f6f 	isb	sy
 80076fa:	e772      	b.n	80075e2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80076fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80076fe:	f000 f917 	bl	8007930 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007702:	f000 f98d 	bl	8007a20 <xTaskResumeAll>
 8007706:	e76c      	b.n	80075e2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007708:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800770a:	f000 f911 	bl	8007930 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800770e:	f000 f987 	bl	8007a20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007712:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007714:	4618      	mov	r0, r3
 8007716:	3738      	adds	r7, #56	@ 0x38
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	e000ed04 	.word	0xe000ed04

08007720 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b090      	sub	sp, #64	@ 0x40
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	607a      	str	r2, [r7, #4]
 800772c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007734:	2b00      	cmp	r3, #0
 8007736:	d10b      	bne.n	8007750 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800773c:	f383 8811 	msr	BASEPRI, r3
 8007740:	f3bf 8f6f 	isb	sy
 8007744:	f3bf 8f4f 	dsb	sy
 8007748:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800774a:	bf00      	nop
 800774c:	bf00      	nop
 800774e:	e7fd      	b.n	800774c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d103      	bne.n	800775e <xQueueGenericSendFromISR+0x3e>
 8007756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800775a:	2b00      	cmp	r3, #0
 800775c:	d101      	bne.n	8007762 <xQueueGenericSendFromISR+0x42>
 800775e:	2301      	movs	r3, #1
 8007760:	e000      	b.n	8007764 <xQueueGenericSendFromISR+0x44>
 8007762:	2300      	movs	r3, #0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d10b      	bne.n	8007780 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800776c:	f383 8811 	msr	BASEPRI, r3
 8007770:	f3bf 8f6f 	isb	sy
 8007774:	f3bf 8f4f 	dsb	sy
 8007778:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800777a:	bf00      	nop
 800777c:	bf00      	nop
 800777e:	e7fd      	b.n	800777c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	2b02      	cmp	r3, #2
 8007784:	d103      	bne.n	800778e <xQueueGenericSendFromISR+0x6e>
 8007786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800778a:	2b01      	cmp	r3, #1
 800778c:	d101      	bne.n	8007792 <xQueueGenericSendFromISR+0x72>
 800778e:	2301      	movs	r3, #1
 8007790:	e000      	b.n	8007794 <xQueueGenericSendFromISR+0x74>
 8007792:	2300      	movs	r3, #0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d10b      	bne.n	80077b0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800779c:	f383 8811 	msr	BASEPRI, r3
 80077a0:	f3bf 8f6f 	isb	sy
 80077a4:	f3bf 8f4f 	dsb	sy
 80077a8:	623b      	str	r3, [r7, #32]
}
 80077aa:	bf00      	nop
 80077ac:	bf00      	nop
 80077ae:	e7fd      	b.n	80077ac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077b0:	f000 fe14 	bl	80083dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80077b4:	f3ef 8211 	mrs	r2, BASEPRI
 80077b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077bc:	f383 8811 	msr	BASEPRI, r3
 80077c0:	f3bf 8f6f 	isb	sy
 80077c4:	f3bf 8f4f 	dsb	sy
 80077c8:	61fa      	str	r2, [r7, #28]
 80077ca:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80077cc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80077ce:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80077d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077d8:	429a      	cmp	r2, r3
 80077da:	d302      	bcc.n	80077e2 <xQueueGenericSendFromISR+0xc2>
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d12f      	bne.n	8007842 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80077e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80077e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	68b9      	ldr	r1, [r7, #8]
 80077f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80077f8:	f000 f830 	bl	800785c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80077fc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007800:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007804:	d112      	bne.n	800782c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800780a:	2b00      	cmp	r3, #0
 800780c:	d016      	beq.n	800783c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800780e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007810:	3324      	adds	r3, #36	@ 0x24
 8007812:	4618      	mov	r0, r3
 8007814:	f000 fb04 	bl	8007e20 <xTaskRemoveFromEventList>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00e      	beq.n	800783c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d00b      	beq.n	800783c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	601a      	str	r2, [r3, #0]
 800782a:	e007      	b.n	800783c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800782c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007830:	3301      	adds	r3, #1
 8007832:	b2db      	uxtb	r3, r3
 8007834:	b25a      	sxtb	r2, r3
 8007836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007838:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800783c:	2301      	movs	r3, #1
 800783e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007840:	e001      	b.n	8007846 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007842:	2300      	movs	r3, #0
 8007844:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007848:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007850:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007854:	4618      	mov	r0, r3
 8007856:	3740      	adds	r7, #64	@ 0x40
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b086      	sub	sp, #24
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007868:	2300      	movs	r3, #0
 800786a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007870:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10d      	bne.n	8007896 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d14d      	bne.n	800791e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	4618      	mov	r0, r3
 8007888:	f000 fbf2 	bl	8008070 <xTaskPriorityDisinherit>
 800788c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	609a      	str	r2, [r3, #8]
 8007894:	e043      	b.n	800791e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d119      	bne.n	80078d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6858      	ldr	r0, [r3, #4]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a4:	461a      	mov	r2, r3
 80078a6:	68b9      	ldr	r1, [r7, #8]
 80078a8:	f000 fea6 	bl	80085f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	685a      	ldr	r2, [r3, #4]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078b4:	441a      	add	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	685a      	ldr	r2, [r3, #4]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d32b      	bcc.n	800791e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	605a      	str	r2, [r3, #4]
 80078ce:	e026      	b.n	800791e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	68d8      	ldr	r0, [r3, #12]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d8:	461a      	mov	r2, r3
 80078da:	68b9      	ldr	r1, [r7, #8]
 80078dc:	f000 fe8c 	bl	80085f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	68da      	ldr	r2, [r3, #12]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078e8:	425b      	negs	r3, r3
 80078ea:	441a      	add	r2, r3
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	68da      	ldr	r2, [r3, #12]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d207      	bcs.n	800790c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	689a      	ldr	r2, [r3, #8]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007904:	425b      	negs	r3, r3
 8007906:	441a      	add	r2, r3
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2b02      	cmp	r3, #2
 8007910:	d105      	bne.n	800791e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d002      	beq.n	800791e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	3b01      	subs	r3, #1
 800791c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	1c5a      	adds	r2, r3, #1
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007926:	697b      	ldr	r3, [r7, #20]
}
 8007928:	4618      	mov	r0, r3
 800792a:	3718      	adds	r7, #24
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007938:	f000 fc9e 	bl	8008278 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007942:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007944:	e011      	b.n	800796a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800794a:	2b00      	cmp	r3, #0
 800794c:	d012      	beq.n	8007974 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	3324      	adds	r3, #36	@ 0x24
 8007952:	4618      	mov	r0, r3
 8007954:	f000 fa64 	bl	8007e20 <xTaskRemoveFromEventList>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d001      	beq.n	8007962 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800795e:	f000 fb3d 	bl	8007fdc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007962:	7bfb      	ldrb	r3, [r7, #15]
 8007964:	3b01      	subs	r3, #1
 8007966:	b2db      	uxtb	r3, r3
 8007968:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800796a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800796e:	2b00      	cmp	r3, #0
 8007970:	dce9      	bgt.n	8007946 <prvUnlockQueue+0x16>
 8007972:	e000      	b.n	8007976 <prvUnlockQueue+0x46>
					break;
 8007974:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	22ff      	movs	r2, #255	@ 0xff
 800797a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800797e:	f000 fcad 	bl	80082dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007982:	f000 fc79 	bl	8008278 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800798c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800798e:	e011      	b.n	80079b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d012      	beq.n	80079be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	3310      	adds	r3, #16
 800799c:	4618      	mov	r0, r3
 800799e:	f000 fa3f 	bl	8007e20 <xTaskRemoveFromEventList>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d001      	beq.n	80079ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80079a8:	f000 fb18 	bl	8007fdc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
 80079ae:	3b01      	subs	r3, #1
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	dce9      	bgt.n	8007990 <prvUnlockQueue+0x60>
 80079bc:	e000      	b.n	80079c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80079be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	22ff      	movs	r2, #255	@ 0xff
 80079c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80079c8:	f000 fc88 	bl	80082dc <vPortExitCritical>
}
 80079cc:	bf00      	nop
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079dc:	f000 fc4c 	bl	8008278 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d102      	bne.n	80079f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80079ec:	2301      	movs	r3, #1
 80079ee:	60fb      	str	r3, [r7, #12]
 80079f0:	e001      	b.n	80079f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80079f2:	2300      	movs	r3, #0
 80079f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079f6:	f000 fc71 	bl	80082dc <vPortExitCritical>

	return xReturn;
 80079fa:	68fb      	ldr	r3, [r7, #12]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007a04:	b480      	push	{r7}
 8007a06:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007a08:	4b04      	ldr	r3, [pc, #16]	@ (8007a1c <vTaskSuspendAll+0x18>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	4a03      	ldr	r2, [pc, #12]	@ (8007a1c <vTaskSuspendAll+0x18>)
 8007a10:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007a12:	bf00      	nop
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr
 8007a1c:	200003c4 	.word	0x200003c4

08007a20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007a26:	2300      	movs	r3, #0
 8007a28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007a2e:	4b42      	ldr	r3, [pc, #264]	@ (8007b38 <xTaskResumeAll+0x118>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10b      	bne.n	8007a4e <xTaskResumeAll+0x2e>
	__asm volatile
 8007a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a3a:	f383 8811 	msr	BASEPRI, r3
 8007a3e:	f3bf 8f6f 	isb	sy
 8007a42:	f3bf 8f4f 	dsb	sy
 8007a46:	603b      	str	r3, [r7, #0]
}
 8007a48:	bf00      	nop
 8007a4a:	bf00      	nop
 8007a4c:	e7fd      	b.n	8007a4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007a4e:	f000 fc13 	bl	8008278 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007a52:	4b39      	ldr	r3, [pc, #228]	@ (8007b38 <xTaskResumeAll+0x118>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	3b01      	subs	r3, #1
 8007a58:	4a37      	ldr	r2, [pc, #220]	@ (8007b38 <xTaskResumeAll+0x118>)
 8007a5a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a5c:	4b36      	ldr	r3, [pc, #216]	@ (8007b38 <xTaskResumeAll+0x118>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d161      	bne.n	8007b28 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007a64:	4b35      	ldr	r3, [pc, #212]	@ (8007b3c <xTaskResumeAll+0x11c>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d05d      	beq.n	8007b28 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a6c:	e02e      	b.n	8007acc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a6e:	4b34      	ldr	r3, [pc, #208]	@ (8007b40 <xTaskResumeAll+0x120>)
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	3318      	adds	r3, #24
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7ff fd23 	bl	80074c6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	3304      	adds	r3, #4
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7ff fd1e 	bl	80074c6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a8e:	2201      	movs	r2, #1
 8007a90:	409a      	lsls	r2, r3
 8007a92:	4b2c      	ldr	r3, [pc, #176]	@ (8007b44 <xTaskResumeAll+0x124>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	4a2a      	ldr	r2, [pc, #168]	@ (8007b44 <xTaskResumeAll+0x124>)
 8007a9a:	6013      	str	r3, [r2, #0]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	4413      	add	r3, r2
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	4a27      	ldr	r2, [pc, #156]	@ (8007b48 <xTaskResumeAll+0x128>)
 8007aaa:	441a      	add	r2, r3
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	3304      	adds	r3, #4
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	4610      	mov	r0, r2
 8007ab4:	f7ff fcaa 	bl	800740c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007abc:	4b23      	ldr	r3, [pc, #140]	@ (8007b4c <xTaskResumeAll+0x12c>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d302      	bcc.n	8007acc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007ac6:	4b22      	ldr	r3, [pc, #136]	@ (8007b50 <xTaskResumeAll+0x130>)
 8007ac8:	2201      	movs	r2, #1
 8007aca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007acc:	4b1c      	ldr	r3, [pc, #112]	@ (8007b40 <xTaskResumeAll+0x120>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d1cc      	bne.n	8007a6e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d001      	beq.n	8007ade <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007ada:	f000 fa8b 	bl	8007ff4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007ade:	4b1d      	ldr	r3, [pc, #116]	@ (8007b54 <xTaskResumeAll+0x134>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d010      	beq.n	8007b0c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007aea:	f000 f837 	bl	8007b5c <xTaskIncrementTick>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d002      	beq.n	8007afa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007af4:	4b16      	ldr	r3, [pc, #88]	@ (8007b50 <xTaskResumeAll+0x130>)
 8007af6:	2201      	movs	r2, #1
 8007af8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	3b01      	subs	r3, #1
 8007afe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1f1      	bne.n	8007aea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007b06:	4b13      	ldr	r3, [pc, #76]	@ (8007b54 <xTaskResumeAll+0x134>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007b0c:	4b10      	ldr	r3, [pc, #64]	@ (8007b50 <xTaskResumeAll+0x130>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d009      	beq.n	8007b28 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007b14:	2301      	movs	r3, #1
 8007b16:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007b18:	4b0f      	ldr	r3, [pc, #60]	@ (8007b58 <xTaskResumeAll+0x138>)
 8007b1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b1e:	601a      	str	r2, [r3, #0]
 8007b20:	f3bf 8f4f 	dsb	sy
 8007b24:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b28:	f000 fbd8 	bl	80082dc <vPortExitCritical>

	return xAlreadyYielded;
 8007b2c:	68bb      	ldr	r3, [r7, #8]
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	200003c4 	.word	0x200003c4
 8007b3c:	200003a4 	.word	0x200003a4
 8007b40:	2000037c 	.word	0x2000037c
 8007b44:	200003ac 	.word	0x200003ac
 8007b48:	200002e8 	.word	0x200002e8
 8007b4c:	200002e4 	.word	0x200002e4
 8007b50:	200003b8 	.word	0x200003b8
 8007b54:	200003b4 	.word	0x200003b4
 8007b58:	e000ed04 	.word	0xe000ed04

08007b5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b086      	sub	sp, #24
 8007b60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b62:	2300      	movs	r3, #0
 8007b64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b66:	4b4f      	ldr	r3, [pc, #316]	@ (8007ca4 <xTaskIncrementTick+0x148>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f040 808f 	bne.w	8007c8e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b70:	4b4d      	ldr	r3, [pc, #308]	@ (8007ca8 <xTaskIncrementTick+0x14c>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	3301      	adds	r3, #1
 8007b76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b78:	4a4b      	ldr	r2, [pc, #300]	@ (8007ca8 <xTaskIncrementTick+0x14c>)
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d121      	bne.n	8007bc8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b84:	4b49      	ldr	r3, [pc, #292]	@ (8007cac <xTaskIncrementTick+0x150>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00b      	beq.n	8007ba6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	603b      	str	r3, [r7, #0]
}
 8007ba0:	bf00      	nop
 8007ba2:	bf00      	nop
 8007ba4:	e7fd      	b.n	8007ba2 <xTaskIncrementTick+0x46>
 8007ba6:	4b41      	ldr	r3, [pc, #260]	@ (8007cac <xTaskIncrementTick+0x150>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	60fb      	str	r3, [r7, #12]
 8007bac:	4b40      	ldr	r3, [pc, #256]	@ (8007cb0 <xTaskIncrementTick+0x154>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a3e      	ldr	r2, [pc, #248]	@ (8007cac <xTaskIncrementTick+0x150>)
 8007bb2:	6013      	str	r3, [r2, #0]
 8007bb4:	4a3e      	ldr	r2, [pc, #248]	@ (8007cb0 <xTaskIncrementTick+0x154>)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6013      	str	r3, [r2, #0]
 8007bba:	4b3e      	ldr	r3, [pc, #248]	@ (8007cb4 <xTaskIncrementTick+0x158>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	4a3c      	ldr	r2, [pc, #240]	@ (8007cb4 <xTaskIncrementTick+0x158>)
 8007bc2:	6013      	str	r3, [r2, #0]
 8007bc4:	f000 fa16 	bl	8007ff4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007bc8:	4b3b      	ldr	r3, [pc, #236]	@ (8007cb8 <xTaskIncrementTick+0x15c>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	693a      	ldr	r2, [r7, #16]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d348      	bcc.n	8007c64 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bd2:	4b36      	ldr	r3, [pc, #216]	@ (8007cac <xTaskIncrementTick+0x150>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d104      	bne.n	8007be6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bdc:	4b36      	ldr	r3, [pc, #216]	@ (8007cb8 <xTaskIncrementTick+0x15c>)
 8007bde:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007be2:	601a      	str	r2, [r3, #0]
					break;
 8007be4:	e03e      	b.n	8007c64 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007be6:	4b31      	ldr	r3, [pc, #196]	@ (8007cac <xTaskIncrementTick+0x150>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007bf6:	693a      	ldr	r2, [r7, #16]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d203      	bcs.n	8007c06 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007bfe:	4a2e      	ldr	r2, [pc, #184]	@ (8007cb8 <xTaskIncrementTick+0x15c>)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007c04:	e02e      	b.n	8007c64 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	3304      	adds	r3, #4
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7ff fc5b 	bl	80074c6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d004      	beq.n	8007c22 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	3318      	adds	r3, #24
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7ff fc52 	bl	80074c6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c26:	2201      	movs	r2, #1
 8007c28:	409a      	lsls	r2, r3
 8007c2a:	4b24      	ldr	r3, [pc, #144]	@ (8007cbc <xTaskIncrementTick+0x160>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	4a22      	ldr	r2, [pc, #136]	@ (8007cbc <xTaskIncrementTick+0x160>)
 8007c32:	6013      	str	r3, [r2, #0]
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c38:	4613      	mov	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	4a1f      	ldr	r2, [pc, #124]	@ (8007cc0 <xTaskIncrementTick+0x164>)
 8007c42:	441a      	add	r2, r3
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	3304      	adds	r3, #4
 8007c48:	4619      	mov	r1, r3
 8007c4a:	4610      	mov	r0, r2
 8007c4c:	f7ff fbde 	bl	800740c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c54:	4b1b      	ldr	r3, [pc, #108]	@ (8007cc4 <xTaskIncrementTick+0x168>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d3b9      	bcc.n	8007bd2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c62:	e7b6      	b.n	8007bd2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c64:	4b17      	ldr	r3, [pc, #92]	@ (8007cc4 <xTaskIncrementTick+0x168>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c6a:	4915      	ldr	r1, [pc, #84]	@ (8007cc0 <xTaskIncrementTick+0x164>)
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4413      	add	r3, r2
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	440b      	add	r3, r1
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d901      	bls.n	8007c80 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007c80:	4b11      	ldr	r3, [pc, #68]	@ (8007cc8 <xTaskIncrementTick+0x16c>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d007      	beq.n	8007c98 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	617b      	str	r3, [r7, #20]
 8007c8c:	e004      	b.n	8007c98 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8007ccc <xTaskIncrementTick+0x170>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	3301      	adds	r3, #1
 8007c94:	4a0d      	ldr	r2, [pc, #52]	@ (8007ccc <xTaskIncrementTick+0x170>)
 8007c96:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007c98:	697b      	ldr	r3, [r7, #20]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	200003c4 	.word	0x200003c4
 8007ca8:	200003a8 	.word	0x200003a8
 8007cac:	20000374 	.word	0x20000374
 8007cb0:	20000378 	.word	0x20000378
 8007cb4:	200003bc 	.word	0x200003bc
 8007cb8:	200003c0 	.word	0x200003c0
 8007cbc:	200003ac 	.word	0x200003ac
 8007cc0:	200002e8 	.word	0x200002e8
 8007cc4:	200002e4 	.word	0x200002e4
 8007cc8:	200003b8 	.word	0x200003b8
 8007ccc:	200003b4 	.word	0x200003b4

08007cd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b088      	sub	sp, #32
 8007cd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007cd6:	4b3a      	ldr	r3, [pc, #232]	@ (8007dc0 <vTaskSwitchContext+0xf0>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d003      	beq.n	8007ce6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007cde:	4b39      	ldr	r3, [pc, #228]	@ (8007dc4 <vTaskSwitchContext+0xf4>)
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ce4:	e067      	b.n	8007db6 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 8007ce6:	4b37      	ldr	r3, [pc, #220]	@ (8007dc4 <vTaskSwitchContext+0xf4>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8007cec:	4b36      	ldr	r3, [pc, #216]	@ (8007dc8 <vTaskSwitchContext+0xf8>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cf2:	61fb      	str	r3, [r7, #28]
 8007cf4:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8007cf8:	61bb      	str	r3, [r7, #24]
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	69ba      	ldr	r2, [r7, #24]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d111      	bne.n	8007d28 <vTaskSwitchContext+0x58>
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	3304      	adds	r3, #4
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	69ba      	ldr	r2, [r7, #24]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d10b      	bne.n	8007d28 <vTaskSwitchContext+0x58>
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	3308      	adds	r3, #8
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	69ba      	ldr	r2, [r7, #24]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d105      	bne.n	8007d28 <vTaskSwitchContext+0x58>
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	330c      	adds	r3, #12
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	69ba      	ldr	r2, [r7, #24]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d008      	beq.n	8007d3a <vTaskSwitchContext+0x6a>
 8007d28:	4b27      	ldr	r3, [pc, #156]	@ (8007dc8 <vTaskSwitchContext+0xf8>)
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	4b26      	ldr	r3, [pc, #152]	@ (8007dc8 <vTaskSwitchContext+0xf8>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	3334      	adds	r3, #52	@ 0x34
 8007d32:	4619      	mov	r1, r3
 8007d34:	4610      	mov	r0, r2
 8007d36:	f7f8 fd6d 	bl	8000814 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d3a:	4b24      	ldr	r3, [pc, #144]	@ (8007dcc <vTaskSwitchContext+0xfc>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	fab3 f383 	clz	r3, r3
 8007d46:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007d48:	7afb      	ldrb	r3, [r7, #11]
 8007d4a:	f1c3 031f 	rsb	r3, r3, #31
 8007d4e:	617b      	str	r3, [r7, #20]
 8007d50:	491f      	ldr	r1, [pc, #124]	@ (8007dd0 <vTaskSwitchContext+0x100>)
 8007d52:	697a      	ldr	r2, [r7, #20]
 8007d54:	4613      	mov	r3, r2
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	4413      	add	r3, r2
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	440b      	add	r3, r1
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10b      	bne.n	8007d7c <vTaskSwitchContext+0xac>
	__asm volatile
 8007d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d68:	f383 8811 	msr	BASEPRI, r3
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	607b      	str	r3, [r7, #4]
}
 8007d76:	bf00      	nop
 8007d78:	bf00      	nop
 8007d7a:	e7fd      	b.n	8007d78 <vTaskSwitchContext+0xa8>
 8007d7c:	697a      	ldr	r2, [r7, #20]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4413      	add	r3, r2
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	4a12      	ldr	r2, [pc, #72]	@ (8007dd0 <vTaskSwitchContext+0x100>)
 8007d88:	4413      	add	r3, r2
 8007d8a:	613b      	str	r3, [r7, #16]
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	685a      	ldr	r2, [r3, #4]
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	605a      	str	r2, [r3, #4]
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	685a      	ldr	r2, [r3, #4]
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	3308      	adds	r3, #8
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d104      	bne.n	8007dac <vTaskSwitchContext+0xdc>
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	685a      	ldr	r2, [r3, #4]
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	605a      	str	r2, [r3, #4]
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	4a05      	ldr	r2, [pc, #20]	@ (8007dc8 <vTaskSwitchContext+0xf8>)
 8007db4:	6013      	str	r3, [r2, #0]
}
 8007db6:	bf00      	nop
 8007db8:	3720      	adds	r7, #32
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	200003c4 	.word	0x200003c4
 8007dc4:	200003b8 	.word	0x200003b8
 8007dc8:	200002e4 	.word	0x200002e4
 8007dcc:	200003ac 	.word	0x200003ac
 8007dd0:	200002e8 	.word	0x200002e8

08007dd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10b      	bne.n	8007dfc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de8:	f383 8811 	msr	BASEPRI, r3
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f3bf 8f4f 	dsb	sy
 8007df4:	60fb      	str	r3, [r7, #12]
}
 8007df6:	bf00      	nop
 8007df8:	bf00      	nop
 8007dfa:	e7fd      	b.n	8007df8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007dfc:	4b07      	ldr	r3, [pc, #28]	@ (8007e1c <vTaskPlaceOnEventList+0x48>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	3318      	adds	r3, #24
 8007e02:	4619      	mov	r1, r3
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f7ff fb25 	bl	8007454 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007e0a:	2101      	movs	r1, #1
 8007e0c:	6838      	ldr	r0, [r7, #0]
 8007e0e:	f000 f9b7 	bl	8008180 <prvAddCurrentTaskToDelayedList>
}
 8007e12:	bf00      	nop
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	200002e4 	.word	0x200002e4

08007e20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b086      	sub	sp, #24
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d10b      	bne.n	8007e4e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e3a:	f383 8811 	msr	BASEPRI, r3
 8007e3e:	f3bf 8f6f 	isb	sy
 8007e42:	f3bf 8f4f 	dsb	sy
 8007e46:	60fb      	str	r3, [r7, #12]
}
 8007e48:	bf00      	nop
 8007e4a:	bf00      	nop
 8007e4c:	e7fd      	b.n	8007e4a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	3318      	adds	r3, #24
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7ff fb37 	bl	80074c6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e58:	4b1d      	ldr	r3, [pc, #116]	@ (8007ed0 <xTaskRemoveFromEventList+0xb0>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d11c      	bne.n	8007e9a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	3304      	adds	r3, #4
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7ff fb2e 	bl	80074c6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e6e:	2201      	movs	r2, #1
 8007e70:	409a      	lsls	r2, r3
 8007e72:	4b18      	ldr	r3, [pc, #96]	@ (8007ed4 <xTaskRemoveFromEventList+0xb4>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	4a16      	ldr	r2, [pc, #88]	@ (8007ed4 <xTaskRemoveFromEventList+0xb4>)
 8007e7a:	6013      	str	r3, [r2, #0]
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e80:	4613      	mov	r3, r2
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	4413      	add	r3, r2
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	4a13      	ldr	r2, [pc, #76]	@ (8007ed8 <xTaskRemoveFromEventList+0xb8>)
 8007e8a:	441a      	add	r2, r3
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	3304      	adds	r3, #4
 8007e90:	4619      	mov	r1, r3
 8007e92:	4610      	mov	r0, r2
 8007e94:	f7ff faba 	bl	800740c <vListInsertEnd>
 8007e98:	e005      	b.n	8007ea6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	3318      	adds	r3, #24
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	480e      	ldr	r0, [pc, #56]	@ (8007edc <xTaskRemoveFromEventList+0xbc>)
 8007ea2:	f7ff fab3 	bl	800740c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8007ee0 <xTaskRemoveFromEventList+0xc0>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d905      	bls.n	8007ec0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8007ee4 <xTaskRemoveFromEventList+0xc4>)
 8007eba:	2201      	movs	r2, #1
 8007ebc:	601a      	str	r2, [r3, #0]
 8007ebe:	e001      	b.n	8007ec4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007ec4:	697b      	ldr	r3, [r7, #20]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3718      	adds	r7, #24
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	200003c4 	.word	0x200003c4
 8007ed4:	200003ac 	.word	0x200003ac
 8007ed8:	200002e8 	.word	0x200002e8
 8007edc:	2000037c 	.word	0x2000037c
 8007ee0:	200002e4 	.word	0x200002e4
 8007ee4:	200003b8 	.word	0x200003b8

08007ee8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ef0:	4b06      	ldr	r3, [pc, #24]	@ (8007f0c <vTaskInternalSetTimeOutState+0x24>)
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ef8:	4b05      	ldr	r3, [pc, #20]	@ (8007f10 <vTaskInternalSetTimeOutState+0x28>)
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	605a      	str	r2, [r3, #4]
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr
 8007f0c:	200003bc 	.word	0x200003bc
 8007f10:	200003a8 	.word	0x200003a8

08007f14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b088      	sub	sp, #32
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10b      	bne.n	8007f3c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f28:	f383 8811 	msr	BASEPRI, r3
 8007f2c:	f3bf 8f6f 	isb	sy
 8007f30:	f3bf 8f4f 	dsb	sy
 8007f34:	613b      	str	r3, [r7, #16]
}
 8007f36:	bf00      	nop
 8007f38:	bf00      	nop
 8007f3a:	e7fd      	b.n	8007f38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d10b      	bne.n	8007f5a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f46:	f383 8811 	msr	BASEPRI, r3
 8007f4a:	f3bf 8f6f 	isb	sy
 8007f4e:	f3bf 8f4f 	dsb	sy
 8007f52:	60fb      	str	r3, [r7, #12]
}
 8007f54:	bf00      	nop
 8007f56:	bf00      	nop
 8007f58:	e7fd      	b.n	8007f56 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007f5a:	f000 f98d 	bl	8008278 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8007fd4 <xTaskCheckForTimeOut+0xc0>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	69ba      	ldr	r2, [r7, #24]
 8007f6a:	1ad3      	subs	r3, r2, r3
 8007f6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f76:	d102      	bne.n	8007f7e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	61fb      	str	r3, [r7, #28]
 8007f7c:	e023      	b.n	8007fc6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	4b15      	ldr	r3, [pc, #84]	@ (8007fd8 <xTaskCheckForTimeOut+0xc4>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d007      	beq.n	8007f9a <xTaskCheckForTimeOut+0x86>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	69ba      	ldr	r2, [r7, #24]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d302      	bcc.n	8007f9a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007f94:	2301      	movs	r3, #1
 8007f96:	61fb      	str	r3, [r7, #28]
 8007f98:	e015      	b.n	8007fc6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d20b      	bcs.n	8007fbc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	1ad2      	subs	r2, r2, r3
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f7ff ff99 	bl	8007ee8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	61fb      	str	r3, [r7, #28]
 8007fba:	e004      	b.n	8007fc6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007fc6:	f000 f989 	bl	80082dc <vPortExitCritical>

	return xReturn;
 8007fca:	69fb      	ldr	r3, [r7, #28]
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3720      	adds	r7, #32
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	200003a8 	.word	0x200003a8
 8007fd8:	200003bc 	.word	0x200003bc

08007fdc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007fdc:	b480      	push	{r7}
 8007fde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007fe0:	4b03      	ldr	r3, [pc, #12]	@ (8007ff0 <vTaskMissedYield+0x14>)
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	601a      	str	r2, [r3, #0]
}
 8007fe6:	bf00      	nop
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr
 8007ff0:	200003b8 	.word	0x200003b8

08007ff4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800802c <prvResetNextTaskUnblockTime+0x38>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d104      	bne.n	800800e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008004:	4b0a      	ldr	r3, [pc, #40]	@ (8008030 <prvResetNextTaskUnblockTime+0x3c>)
 8008006:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800800a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800800c:	e008      	b.n	8008020 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800800e:	4b07      	ldr	r3, [pc, #28]	@ (800802c <prvResetNextTaskUnblockTime+0x38>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	4a04      	ldr	r2, [pc, #16]	@ (8008030 <prvResetNextTaskUnblockTime+0x3c>)
 800801e:	6013      	str	r3, [r2, #0]
}
 8008020:	bf00      	nop
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr
 800802c:	20000374 	.word	0x20000374
 8008030:	200003c0 	.word	0x200003c0

08008034 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800803a:	4b0b      	ldr	r3, [pc, #44]	@ (8008068 <xTaskGetSchedulerState+0x34>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d102      	bne.n	8008048 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008042:	2301      	movs	r3, #1
 8008044:	607b      	str	r3, [r7, #4]
 8008046:	e008      	b.n	800805a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008048:	4b08      	ldr	r3, [pc, #32]	@ (800806c <xTaskGetSchedulerState+0x38>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d102      	bne.n	8008056 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008050:	2302      	movs	r3, #2
 8008052:	607b      	str	r3, [r7, #4]
 8008054:	e001      	b.n	800805a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008056:	2300      	movs	r3, #0
 8008058:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800805a:	687b      	ldr	r3, [r7, #4]
	}
 800805c:	4618      	mov	r0, r3
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr
 8008068:	200003b0 	.word	0x200003b0
 800806c:	200003c4 	.word	0x200003c4

08008070 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800807c:	2300      	movs	r3, #0
 800807e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d070      	beq.n	8008168 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008086:	4b3b      	ldr	r3, [pc, #236]	@ (8008174 <xTaskPriorityDisinherit+0x104>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	693a      	ldr	r2, [r7, #16]
 800808c:	429a      	cmp	r2, r3
 800808e:	d00b      	beq.n	80080a8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008094:	f383 8811 	msr	BASEPRI, r3
 8008098:	f3bf 8f6f 	isb	sy
 800809c:	f3bf 8f4f 	dsb	sy
 80080a0:	60fb      	str	r3, [r7, #12]
}
 80080a2:	bf00      	nop
 80080a4:	bf00      	nop
 80080a6:	e7fd      	b.n	80080a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d10b      	bne.n	80080c8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80080b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b4:	f383 8811 	msr	BASEPRI, r3
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	60bb      	str	r3, [r7, #8]
}
 80080c2:	bf00      	nop
 80080c4:	bf00      	nop
 80080c6:	e7fd      	b.n	80080c4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080cc:	1e5a      	subs	r2, r3, #1
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080da:	429a      	cmp	r2, r3
 80080dc:	d044      	beq.n	8008168 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d140      	bne.n	8008168 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	3304      	adds	r3, #4
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7ff f9eb 	bl	80074c6 <uxListRemove>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d115      	bne.n	8008122 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080fa:	491f      	ldr	r1, [pc, #124]	@ (8008178 <xTaskPriorityDisinherit+0x108>)
 80080fc:	4613      	mov	r3, r2
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	4413      	add	r3, r2
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	440b      	add	r3, r1
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d10a      	bne.n	8008122 <xTaskPriorityDisinherit+0xb2>
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008110:	2201      	movs	r2, #1
 8008112:	fa02 f303 	lsl.w	r3, r2, r3
 8008116:	43da      	mvns	r2, r3
 8008118:	4b18      	ldr	r3, [pc, #96]	@ (800817c <xTaskPriorityDisinherit+0x10c>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4013      	ands	r3, r2
 800811e:	4a17      	ldr	r2, [pc, #92]	@ (800817c <xTaskPriorityDisinherit+0x10c>)
 8008120:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800812e:	f1c3 0207 	rsb	r2, r3, #7
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800813a:	2201      	movs	r2, #1
 800813c:	409a      	lsls	r2, r3
 800813e:	4b0f      	ldr	r3, [pc, #60]	@ (800817c <xTaskPriorityDisinherit+0x10c>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4313      	orrs	r3, r2
 8008144:	4a0d      	ldr	r2, [pc, #52]	@ (800817c <xTaskPriorityDisinherit+0x10c>)
 8008146:	6013      	str	r3, [r2, #0]
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800814c:	4613      	mov	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	4413      	add	r3, r2
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	4a08      	ldr	r2, [pc, #32]	@ (8008178 <xTaskPriorityDisinherit+0x108>)
 8008156:	441a      	add	r2, r3
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	3304      	adds	r3, #4
 800815c:	4619      	mov	r1, r3
 800815e:	4610      	mov	r0, r2
 8008160:	f7ff f954 	bl	800740c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008164:	2301      	movs	r3, #1
 8008166:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008168:	697b      	ldr	r3, [r7, #20]
	}
 800816a:	4618      	mov	r0, r3
 800816c:	3718      	adds	r7, #24
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	200002e4 	.word	0x200002e4
 8008178:	200002e8 	.word	0x200002e8
 800817c:	200003ac 	.word	0x200003ac

08008180 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800818a:	4b29      	ldr	r3, [pc, #164]	@ (8008230 <prvAddCurrentTaskToDelayedList+0xb0>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008190:	4b28      	ldr	r3, [pc, #160]	@ (8008234 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	3304      	adds	r3, #4
 8008196:	4618      	mov	r0, r3
 8008198:	f7ff f995 	bl	80074c6 <uxListRemove>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d10b      	bne.n	80081ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80081a2:	4b24      	ldr	r3, [pc, #144]	@ (8008234 <prvAddCurrentTaskToDelayedList+0xb4>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081a8:	2201      	movs	r2, #1
 80081aa:	fa02 f303 	lsl.w	r3, r2, r3
 80081ae:	43da      	mvns	r2, r3
 80081b0:	4b21      	ldr	r3, [pc, #132]	@ (8008238 <prvAddCurrentTaskToDelayedList+0xb8>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4013      	ands	r3, r2
 80081b6:	4a20      	ldr	r2, [pc, #128]	@ (8008238 <prvAddCurrentTaskToDelayedList+0xb8>)
 80081b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081c0:	d10a      	bne.n	80081d8 <prvAddCurrentTaskToDelayedList+0x58>
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d007      	beq.n	80081d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081c8:	4b1a      	ldr	r3, [pc, #104]	@ (8008234 <prvAddCurrentTaskToDelayedList+0xb4>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	3304      	adds	r3, #4
 80081ce:	4619      	mov	r1, r3
 80081d0:	481a      	ldr	r0, [pc, #104]	@ (800823c <prvAddCurrentTaskToDelayedList+0xbc>)
 80081d2:	f7ff f91b 	bl	800740c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80081d6:	e026      	b.n	8008226 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4413      	add	r3, r2
 80081de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80081e0:	4b14      	ldr	r3, [pc, #80]	@ (8008234 <prvAddCurrentTaskToDelayedList+0xb4>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	68ba      	ldr	r2, [r7, #8]
 80081e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d209      	bcs.n	8008204 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081f0:	4b13      	ldr	r3, [pc, #76]	@ (8008240 <prvAddCurrentTaskToDelayedList+0xc0>)
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	4b0f      	ldr	r3, [pc, #60]	@ (8008234 <prvAddCurrentTaskToDelayedList+0xb4>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	3304      	adds	r3, #4
 80081fa:	4619      	mov	r1, r3
 80081fc:	4610      	mov	r0, r2
 80081fe:	f7ff f929 	bl	8007454 <vListInsert>
}
 8008202:	e010      	b.n	8008226 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008204:	4b0f      	ldr	r3, [pc, #60]	@ (8008244 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	4b0a      	ldr	r3, [pc, #40]	@ (8008234 <prvAddCurrentTaskToDelayedList+0xb4>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	3304      	adds	r3, #4
 800820e:	4619      	mov	r1, r3
 8008210:	4610      	mov	r0, r2
 8008212:	f7ff f91f 	bl	8007454 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008216:	4b0c      	ldr	r3, [pc, #48]	@ (8008248 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68ba      	ldr	r2, [r7, #8]
 800821c:	429a      	cmp	r2, r3
 800821e:	d202      	bcs.n	8008226 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008220:	4a09      	ldr	r2, [pc, #36]	@ (8008248 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	6013      	str	r3, [r2, #0]
}
 8008226:	bf00      	nop
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	200003a8 	.word	0x200003a8
 8008234:	200002e4 	.word	0x200002e4
 8008238:	200003ac 	.word	0x200003ac
 800823c:	20000390 	.word	0x20000390
 8008240:	20000378 	.word	0x20000378
 8008244:	20000374 	.word	0x20000374
 8008248:	200003c0 	.word	0x200003c0
 800824c:	00000000 	.word	0x00000000

08008250 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008250:	4b07      	ldr	r3, [pc, #28]	@ (8008270 <pxCurrentTCBConst2>)
 8008252:	6819      	ldr	r1, [r3, #0]
 8008254:	6808      	ldr	r0, [r1, #0]
 8008256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800825a:	f380 8809 	msr	PSP, r0
 800825e:	f3bf 8f6f 	isb	sy
 8008262:	f04f 0000 	mov.w	r0, #0
 8008266:	f380 8811 	msr	BASEPRI, r0
 800826a:	4770      	bx	lr
 800826c:	f3af 8000 	nop.w

08008270 <pxCurrentTCBConst2>:
 8008270:	200002e4 	.word	0x200002e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008274:	bf00      	nop
 8008276:	bf00      	nop

08008278 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	607b      	str	r3, [r7, #4]
}
 8008290:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008292:	4b10      	ldr	r3, [pc, #64]	@ (80082d4 <vPortEnterCritical+0x5c>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	3301      	adds	r3, #1
 8008298:	4a0e      	ldr	r2, [pc, #56]	@ (80082d4 <vPortEnterCritical+0x5c>)
 800829a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800829c:	4b0d      	ldr	r3, [pc, #52]	@ (80082d4 <vPortEnterCritical+0x5c>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d110      	bne.n	80082c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80082a4:	4b0c      	ldr	r3, [pc, #48]	@ (80082d8 <vPortEnterCritical+0x60>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00b      	beq.n	80082c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80082ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b2:	f383 8811 	msr	BASEPRI, r3
 80082b6:	f3bf 8f6f 	isb	sy
 80082ba:	f3bf 8f4f 	dsb	sy
 80082be:	603b      	str	r3, [r7, #0]
}
 80082c0:	bf00      	nop
 80082c2:	bf00      	nop
 80082c4:	e7fd      	b.n	80082c2 <vPortEnterCritical+0x4a>
	}
}
 80082c6:	bf00      	nop
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	2000000c 	.word	0x2000000c
 80082d8:	e000ed04 	.word	0xe000ed04

080082dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80082e2:	4b12      	ldr	r3, [pc, #72]	@ (800832c <vPortExitCritical+0x50>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d10b      	bne.n	8008302 <vPortExitCritical+0x26>
	__asm volatile
 80082ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ee:	f383 8811 	msr	BASEPRI, r3
 80082f2:	f3bf 8f6f 	isb	sy
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	607b      	str	r3, [r7, #4]
}
 80082fc:	bf00      	nop
 80082fe:	bf00      	nop
 8008300:	e7fd      	b.n	80082fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008302:	4b0a      	ldr	r3, [pc, #40]	@ (800832c <vPortExitCritical+0x50>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	3b01      	subs	r3, #1
 8008308:	4a08      	ldr	r2, [pc, #32]	@ (800832c <vPortExitCritical+0x50>)
 800830a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800830c:	4b07      	ldr	r3, [pc, #28]	@ (800832c <vPortExitCritical+0x50>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d105      	bne.n	8008320 <vPortExitCritical+0x44>
 8008314:	2300      	movs	r3, #0
 8008316:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	f383 8811 	msr	BASEPRI, r3
}
 800831e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008320:	bf00      	nop
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr
 800832c:	2000000c 	.word	0x2000000c

08008330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008330:	f3ef 8009 	mrs	r0, PSP
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	4b15      	ldr	r3, [pc, #84]	@ (8008390 <pxCurrentTCBConst>)
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	f01e 0f10 	tst.w	lr, #16
 8008340:	bf08      	it	eq
 8008342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800834a:	6010      	str	r0, [r2, #0]
 800834c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008350:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008354:	f380 8811 	msr	BASEPRI, r0
 8008358:	f3bf 8f4f 	dsb	sy
 800835c:	f3bf 8f6f 	isb	sy
 8008360:	f7ff fcb6 	bl	8007cd0 <vTaskSwitchContext>
 8008364:	f04f 0000 	mov.w	r0, #0
 8008368:	f380 8811 	msr	BASEPRI, r0
 800836c:	bc09      	pop	{r0, r3}
 800836e:	6819      	ldr	r1, [r3, #0]
 8008370:	6808      	ldr	r0, [r1, #0]
 8008372:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008376:	f01e 0f10 	tst.w	lr, #16
 800837a:	bf08      	it	eq
 800837c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008380:	f380 8809 	msr	PSP, r0
 8008384:	f3bf 8f6f 	isb	sy
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	f3af 8000 	nop.w

08008390 <pxCurrentTCBConst>:
 8008390:	200002e4 	.word	0x200002e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008394:	bf00      	nop
 8008396:	bf00      	nop

08008398 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
	__asm volatile
 800839e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a2:	f383 8811 	msr	BASEPRI, r3
 80083a6:	f3bf 8f6f 	isb	sy
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	607b      	str	r3, [r7, #4]
}
 80083b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80083b2:	f7ff fbd3 	bl	8007b5c <xTaskIncrementTick>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d003      	beq.n	80083c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80083bc:	4b06      	ldr	r3, [pc, #24]	@ (80083d8 <SysTick_Handler+0x40>)
 80083be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083c2:	601a      	str	r2, [r3, #0]
 80083c4:	2300      	movs	r3, #0
 80083c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	f383 8811 	msr	BASEPRI, r3
}
 80083ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80083d0:	bf00      	nop
 80083d2:	3708      	adds	r7, #8
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	e000ed04 	.word	0xe000ed04

080083dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80083e2:	f3ef 8305 	mrs	r3, IPSR
 80083e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2b0f      	cmp	r3, #15
 80083ec:	d915      	bls.n	800841a <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80083ee:	4a18      	ldr	r2, [pc, #96]	@ (8008450 <vPortValidateInterruptPriority+0x74>)
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	4413      	add	r3, r2
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80083f8:	4b16      	ldr	r3, [pc, #88]	@ (8008454 <vPortValidateInterruptPriority+0x78>)
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	7afa      	ldrb	r2, [r7, #11]
 80083fe:	429a      	cmp	r2, r3
 8008400:	d20b      	bcs.n	800841a <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008406:	f383 8811 	msr	BASEPRI, r3
 800840a:	f3bf 8f6f 	isb	sy
 800840e:	f3bf 8f4f 	dsb	sy
 8008412:	607b      	str	r3, [r7, #4]
}
 8008414:	bf00      	nop
 8008416:	bf00      	nop
 8008418:	e7fd      	b.n	8008416 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800841a:	4b0f      	ldr	r3, [pc, #60]	@ (8008458 <vPortValidateInterruptPriority+0x7c>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008422:	4b0e      	ldr	r3, [pc, #56]	@ (800845c <vPortValidateInterruptPriority+0x80>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	429a      	cmp	r2, r3
 8008428:	d90b      	bls.n	8008442 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800842a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800842e:	f383 8811 	msr	BASEPRI, r3
 8008432:	f3bf 8f6f 	isb	sy
 8008436:	f3bf 8f4f 	dsb	sy
 800843a:	603b      	str	r3, [r7, #0]
}
 800843c:	bf00      	nop
 800843e:	bf00      	nop
 8008440:	e7fd      	b.n	800843e <vPortValidateInterruptPriority+0x62>
	}
 8008442:	bf00      	nop
 8008444:	3714      	adds	r7, #20
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	e000e3f0 	.word	0xe000e3f0
 8008454:	200003c8 	.word	0x200003c8
 8008458:	e000ed0c 	.word	0xe000ed0c
 800845c:	200003cc 	.word	0x200003cc

08008460 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800846e:	4618      	mov	r0, r3
 8008470:	f7fe fe9e 	bl	80071b0 <USBH_LL_IncTimer>
}
 8008474:	bf00      	nop
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800848a:	4618      	mov	r0, r3
 800848c:	f7fe fee2 	bl	8007254 <USBH_LL_Connect>
}
 8008490:	bf00      	nop
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7fe fef7 	bl	800729a <USBH_LL_Disconnect>
}
 80084ac:	bf00      	nop
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	460b      	mov	r3, r1
 80084be:	70fb      	strb	r3, [r7, #3]
 80084c0:	4613      	mov	r3, r2
 80084c2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7fe ff17 	bl	80072fe <USBH_LL_NotifyURBChange>
#endif
}
 80084d0:	bf00      	nop
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7fe fe8c 	bl	8007204 <USBH_LL_PortEnabled>
}
 80084ec:	bf00      	nop
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008502:	4618      	mov	r0, r3
 8008504:	f7fe fe98 	bl	8007238 <USBH_LL_PortDisabled>
}
 8008508:	bf00      	nop
 800850a:	3708      	adds	r7, #8
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008518:	2300      	movs	r3, #0
 800851a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800851c:	2300      	movs	r3, #0
 800851e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008526:	4618      	mov	r0, r3
 8008528:	f7f9 ffff 	bl	800252a <HAL_HCD_Stop>
 800852c:	4603      	mov	r3, r0
 800852e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008530:	7bfb      	ldrb	r3, [r7, #15]
 8008532:	4618      	mov	r0, r3
 8008534:	f000 f808 	bl	8008548 <USBH_Get_USB_Status>
 8008538:	4603      	mov	r3, r0
 800853a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800853c:	7bbb      	ldrb	r3, [r7, #14]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
	...

08008548 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	4603      	mov	r3, r0
 8008550:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008552:	2300      	movs	r3, #0
 8008554:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008556:	79fb      	ldrb	r3, [r7, #7]
 8008558:	2b03      	cmp	r3, #3
 800855a:	d817      	bhi.n	800858c <USBH_Get_USB_Status+0x44>
 800855c:	a201      	add	r2, pc, #4	@ (adr r2, 8008564 <USBH_Get_USB_Status+0x1c>)
 800855e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008562:	bf00      	nop
 8008564:	08008575 	.word	0x08008575
 8008568:	0800857b 	.word	0x0800857b
 800856c:	08008581 	.word	0x08008581
 8008570:	08008587 	.word	0x08008587
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008574:	2300      	movs	r3, #0
 8008576:	73fb      	strb	r3, [r7, #15]
    break;
 8008578:	e00b      	b.n	8008592 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800857a:	2302      	movs	r3, #2
 800857c:	73fb      	strb	r3, [r7, #15]
    break;
 800857e:	e008      	b.n	8008592 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008580:	2301      	movs	r3, #1
 8008582:	73fb      	strb	r3, [r7, #15]
    break;
 8008584:	e005      	b.n	8008592 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008586:	2302      	movs	r3, #2
 8008588:	73fb      	strb	r3, [r7, #15]
    break;
 800858a:	e002      	b.n	8008592 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800858c:	2302      	movs	r3, #2
 800858e:	73fb      	strb	r3, [r7, #15]
    break;
 8008590:	bf00      	nop
  }
  return usb_status;
 8008592:	7bfb      	ldrb	r3, [r7, #15]
}
 8008594:	4618      	mov	r0, r3
 8008596:	3714      	adds	r7, #20
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <memset>:
 80085a0:	4402      	add	r2, r0
 80085a2:	4603      	mov	r3, r0
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d100      	bne.n	80085aa <memset+0xa>
 80085a8:	4770      	bx	lr
 80085aa:	f803 1b01 	strb.w	r1, [r3], #1
 80085ae:	e7f9      	b.n	80085a4 <memset+0x4>

080085b0 <__libc_init_array>:
 80085b0:	b570      	push	{r4, r5, r6, lr}
 80085b2:	4d0d      	ldr	r5, [pc, #52]	@ (80085e8 <__libc_init_array+0x38>)
 80085b4:	4c0d      	ldr	r4, [pc, #52]	@ (80085ec <__libc_init_array+0x3c>)
 80085b6:	1b64      	subs	r4, r4, r5
 80085b8:	10a4      	asrs	r4, r4, #2
 80085ba:	2600      	movs	r6, #0
 80085bc:	42a6      	cmp	r6, r4
 80085be:	d109      	bne.n	80085d4 <__libc_init_array+0x24>
 80085c0:	4d0b      	ldr	r5, [pc, #44]	@ (80085f0 <__libc_init_array+0x40>)
 80085c2:	4c0c      	ldr	r4, [pc, #48]	@ (80085f4 <__libc_init_array+0x44>)
 80085c4:	f000 f826 	bl	8008614 <_init>
 80085c8:	1b64      	subs	r4, r4, r5
 80085ca:	10a4      	asrs	r4, r4, #2
 80085cc:	2600      	movs	r6, #0
 80085ce:	42a6      	cmp	r6, r4
 80085d0:	d105      	bne.n	80085de <__libc_init_array+0x2e>
 80085d2:	bd70      	pop	{r4, r5, r6, pc}
 80085d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80085d8:	4798      	blx	r3
 80085da:	3601      	adds	r6, #1
 80085dc:	e7ee      	b.n	80085bc <__libc_init_array+0xc>
 80085de:	f855 3b04 	ldr.w	r3, [r5], #4
 80085e2:	4798      	blx	r3
 80085e4:	3601      	adds	r6, #1
 80085e6:	e7f2      	b.n	80085ce <__libc_init_array+0x1e>
 80085e8:	080086b8 	.word	0x080086b8
 80085ec:	080086b8 	.word	0x080086b8
 80085f0:	080086b8 	.word	0x080086b8
 80085f4:	080086bc 	.word	0x080086bc

080085f8 <memcpy>:
 80085f8:	440a      	add	r2, r1
 80085fa:	4291      	cmp	r1, r2
 80085fc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008600:	d100      	bne.n	8008604 <memcpy+0xc>
 8008602:	4770      	bx	lr
 8008604:	b510      	push	{r4, lr}
 8008606:	f811 4b01 	ldrb.w	r4, [r1], #1
 800860a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800860e:	4291      	cmp	r1, r2
 8008610:	d1f9      	bne.n	8008606 <memcpy+0xe>
 8008612:	bd10      	pop	{r4, pc}

08008614 <_init>:
 8008614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008616:	bf00      	nop
 8008618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800861a:	bc08      	pop	{r3}
 800861c:	469e      	mov	lr, r3
 800861e:	4770      	bx	lr

08008620 <_fini>:
 8008620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008622:	bf00      	nop
 8008624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008626:	bc08      	pop	{r3}
 8008628:	469e      	mov	lr, r3
 800862a:	4770      	bx	lr
