
BALANCE_BALL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001313c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  080132f0  080132f0  000142f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013824  08013824  00015200  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08013824  08013824  00014824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801382c  0801382c  00015200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801382c  0801382c  0001482c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013830  08013830  00014830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  08013834  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00015200  2**0
                  CONTENTS
 10 .bss          0002a558  20000200  20000200  00015200  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2002a758  2002a758  00015200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00015200  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002e802  00000000  00000000  00015230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000078f2  00000000  00000000  00043a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002658  00000000  00000000  0004b328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001d6d  00000000  00000000  0004d980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000302e4  00000000  00000000  0004f6ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003450b  00000000  00000000  0007f9d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f79d0  00000000  00000000  000b3edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001ab8ac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000af80  00000000  00000000  001ab8f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  001b6870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000200 	.word	0x20000200
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080132d4 	.word	0x080132d4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000204 	.word	0x20000204
 80001ec:	080132d4 	.word	0x080132d4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_ldivmod>:
 8000bc8:	b97b      	cbnz	r3, 8000bea <__aeabi_ldivmod+0x22>
 8000bca:	b972      	cbnz	r2, 8000bea <__aeabi_ldivmod+0x22>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bfbe      	ittt	lt
 8000bd0:	2000      	movlt	r0, #0
 8000bd2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bd6:	e006      	blt.n	8000be6 <__aeabi_ldivmod+0x1e>
 8000bd8:	bf08      	it	eq
 8000bda:	2800      	cmpeq	r0, #0
 8000bdc:	bf1c      	itt	ne
 8000bde:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000be2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000be6:	f000 b9d3 	b.w	8000f90 <__aeabi_idiv0>
 8000bea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf2:	2900      	cmp	r1, #0
 8000bf4:	db09      	blt.n	8000c0a <__aeabi_ldivmod+0x42>
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	db1a      	blt.n	8000c30 <__aeabi_ldivmod+0x68>
 8000bfa:	f000 f84d 	bl	8000c98 <__udivmoddi4>
 8000bfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c06:	b004      	add	sp, #16
 8000c08:	4770      	bx	lr
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db1b      	blt.n	8000c4c <__aeabi_ldivmod+0x84>
 8000c14:	f000 f840 	bl	8000c98 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4240      	negs	r0, r0
 8000c24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c28:	4252      	negs	r2, r2
 8000c2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c2e:	4770      	bx	lr
 8000c30:	4252      	negs	r2, r2
 8000c32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c36:	f000 f82f 	bl	8000c98 <__udivmoddi4>
 8000c3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c42:	b004      	add	sp, #16
 8000c44:	4240      	negs	r0, r0
 8000c46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c4a:	4770      	bx	lr
 8000c4c:	4252      	negs	r2, r2
 8000c4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c52:	f000 f821 	bl	8000c98 <__udivmoddi4>
 8000c56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5e:	b004      	add	sp, #16
 8000c60:	4252      	negs	r2, r2
 8000c62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c7c:	f000 b988 	b.w	8000f90 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	468e      	mov	lr, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	4688      	mov	r8, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4617      	mov	r7, r2
 8000cac:	d962      	bls.n	8000d74 <__udivmoddi4+0xdc>
 8000cae:	fab2 f682 	clz	r6, r2
 8000cb2:	b14e      	cbz	r6, 8000cc8 <__udivmoddi4+0x30>
 8000cb4:	f1c6 0320 	rsb	r3, r6, #32
 8000cb8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cbc:	fa20 f303 	lsr.w	r3, r0, r3
 8000cc0:	40b7      	lsls	r7, r6
 8000cc2:	ea43 0808 	orr.w	r8, r3, r8
 8000cc6:	40b4      	lsls	r4, r6
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	fa1f fc87 	uxth.w	ip, r7
 8000cd0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cd4:	0c23      	lsrs	r3, r4, #16
 8000cd6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cda:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cde:	fb01 f20c 	mul.w	r2, r1, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000cec:	f080 80ea 	bcs.w	8000ec4 <__udivmoddi4+0x22c>
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	f240 80e7 	bls.w	8000ec4 <__udivmoddi4+0x22c>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	443b      	add	r3, r7
 8000cfa:	1a9a      	subs	r2, r3, r2
 8000cfc:	b2a3      	uxth	r3, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d0a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0e:	459c      	cmp	ip, r3
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x8e>
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d18:	f080 80d6 	bcs.w	8000ec8 <__udivmoddi4+0x230>
 8000d1c:	459c      	cmp	ip, r3
 8000d1e:	f240 80d3 	bls.w	8000ec8 <__udivmoddi4+0x230>
 8000d22:	443b      	add	r3, r7
 8000d24:	3802      	subs	r0, #2
 8000d26:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2a:	eba3 030c 	sub.w	r3, r3, ip
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11d      	cbz	r5, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40f3      	lsrs	r3, r6
 8000d34:	2200      	movs	r2, #0
 8000d36:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d905      	bls.n	8000d4e <__udivmoddi4+0xb6>
 8000d42:	b10d      	cbz	r5, 8000d48 <__udivmoddi4+0xb0>
 8000d44:	e9c5 0100 	strd	r0, r1, [r5]
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e7f5      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d4e:	fab3 f183 	clz	r1, r3
 8000d52:	2900      	cmp	r1, #0
 8000d54:	d146      	bne.n	8000de4 <__udivmoddi4+0x14c>
 8000d56:	4573      	cmp	r3, lr
 8000d58:	d302      	bcc.n	8000d60 <__udivmoddi4+0xc8>
 8000d5a:	4282      	cmp	r2, r0
 8000d5c:	f200 8105 	bhi.w	8000f6a <__udivmoddi4+0x2d2>
 8000d60:	1a84      	subs	r4, r0, r2
 8000d62:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d66:	2001      	movs	r0, #1
 8000d68:	4690      	mov	r8, r2
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d0e5      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d6e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d72:	e7e2      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f000 8090 	beq.w	8000e9a <__udivmoddi4+0x202>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	f040 80a4 	bne.w	8000ecc <__udivmoddi4+0x234>
 8000d84:	1a8a      	subs	r2, r1, r2
 8000d86:	0c03      	lsrs	r3, r0, #16
 8000d88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8c:	b280      	uxth	r0, r0
 8000d8e:	b2bc      	uxth	r4, r7
 8000d90:	2101      	movs	r1, #1
 8000d92:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d96:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d9e:	fb04 f20c 	mul.w	r2, r4, ip
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x11e>
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000dac:	d202      	bcs.n	8000db4 <__udivmoddi4+0x11c>
 8000dae:	429a      	cmp	r2, r3
 8000db0:	f200 80e0 	bhi.w	8000f74 <__udivmoddi4+0x2dc>
 8000db4:	46c4      	mov	ip, r8
 8000db6:	1a9b      	subs	r3, r3, r2
 8000db8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dbc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dc0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dc4:	fb02 f404 	mul.w	r4, r2, r4
 8000dc8:	429c      	cmp	r4, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x144>
 8000dcc:	18fb      	adds	r3, r7, r3
 8000dce:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x142>
 8000dd4:	429c      	cmp	r4, r3
 8000dd6:	f200 80ca 	bhi.w	8000f6e <__udivmoddi4+0x2d6>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	1b1b      	subs	r3, r3, r4
 8000dde:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000de2:	e7a5      	b.n	8000d30 <__udivmoddi4+0x98>
 8000de4:	f1c1 0620 	rsb	r6, r1, #32
 8000de8:	408b      	lsls	r3, r1
 8000dea:	fa22 f706 	lsr.w	r7, r2, r6
 8000dee:	431f      	orrs	r7, r3
 8000df0:	fa0e f401 	lsl.w	r4, lr, r1
 8000df4:	fa20 f306 	lsr.w	r3, r0, r6
 8000df8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dfc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e00:	4323      	orrs	r3, r4
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	fa1f fc87 	uxth.w	ip, r7
 8000e0a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e0e:	0c1c      	lsrs	r4, r3, #16
 8000e10:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e14:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e18:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e1c:	45a6      	cmp	lr, r4
 8000e1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e22:	d909      	bls.n	8000e38 <__udivmoddi4+0x1a0>
 8000e24:	193c      	adds	r4, r7, r4
 8000e26:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e2a:	f080 809c 	bcs.w	8000f66 <__udivmoddi4+0x2ce>
 8000e2e:	45a6      	cmp	lr, r4
 8000e30:	f240 8099 	bls.w	8000f66 <__udivmoddi4+0x2ce>
 8000e34:	3802      	subs	r0, #2
 8000e36:	443c      	add	r4, r7
 8000e38:	eba4 040e 	sub.w	r4, r4, lr
 8000e3c:	fa1f fe83 	uxth.w	lr, r3
 8000e40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e44:	fb09 4413 	mls	r4, r9, r3, r4
 8000e48:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e4c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e50:	45a4      	cmp	ip, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x1ce>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000e5a:	f080 8082 	bcs.w	8000f62 <__udivmoddi4+0x2ca>
 8000e5e:	45a4      	cmp	ip, r4
 8000e60:	d97f      	bls.n	8000f62 <__udivmoddi4+0x2ca>
 8000e62:	3b02      	subs	r3, #2
 8000e64:	443c      	add	r4, r7
 8000e66:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e6a:	eba4 040c 	sub.w	r4, r4, ip
 8000e6e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e72:	4564      	cmp	r4, ip
 8000e74:	4673      	mov	r3, lr
 8000e76:	46e1      	mov	r9, ip
 8000e78:	d362      	bcc.n	8000f40 <__udivmoddi4+0x2a8>
 8000e7a:	d05f      	beq.n	8000f3c <__udivmoddi4+0x2a4>
 8000e7c:	b15d      	cbz	r5, 8000e96 <__udivmoddi4+0x1fe>
 8000e7e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e82:	eb64 0409 	sbc.w	r4, r4, r9
 8000e86:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e8e:	431e      	orrs	r6, r3
 8000e90:	40cc      	lsrs	r4, r1
 8000e92:	e9c5 6400 	strd	r6, r4, [r5]
 8000e96:	2100      	movs	r1, #0
 8000e98:	e74f      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000e9a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e9e:	0c01      	lsrs	r1, r0, #16
 8000ea0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ea4:	b280      	uxth	r0, r0
 8000ea6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eaa:	463b      	mov	r3, r7
 8000eac:	4638      	mov	r0, r7
 8000eae:	463c      	mov	r4, r7
 8000eb0:	46b8      	mov	r8, r7
 8000eb2:	46be      	mov	lr, r7
 8000eb4:	2620      	movs	r6, #32
 8000eb6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eba:	eba2 0208 	sub.w	r2, r2, r8
 8000ebe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ec2:	e766      	b.n	8000d92 <__udivmoddi4+0xfa>
 8000ec4:	4601      	mov	r1, r0
 8000ec6:	e718      	b.n	8000cfa <__udivmoddi4+0x62>
 8000ec8:	4610      	mov	r0, r2
 8000eca:	e72c      	b.n	8000d26 <__udivmoddi4+0x8e>
 8000ecc:	f1c6 0220 	rsb	r2, r6, #32
 8000ed0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ed4:	40b7      	lsls	r7, r6
 8000ed6:	40b1      	lsls	r1, r6
 8000ed8:	fa20 f202 	lsr.w	r2, r0, r2
 8000edc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ee6:	b2bc      	uxth	r4, r7
 8000ee8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb08 f904 	mul.w	r9, r8, r4
 8000ef6:	40b0      	lsls	r0, r6
 8000ef8:	4589      	cmp	r9, r1
 8000efa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000efe:	b280      	uxth	r0, r0
 8000f00:	d93e      	bls.n	8000f80 <__udivmoddi4+0x2e8>
 8000f02:	1879      	adds	r1, r7, r1
 8000f04:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f08:	d201      	bcs.n	8000f0e <__udivmoddi4+0x276>
 8000f0a:	4589      	cmp	r9, r1
 8000f0c:	d81f      	bhi.n	8000f4e <__udivmoddi4+0x2b6>
 8000f0e:	eba1 0109 	sub.w	r1, r1, r9
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	b292      	uxth	r2, r2
 8000f20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f24:	4542      	cmp	r2, r8
 8000f26:	d229      	bcs.n	8000f7c <__udivmoddi4+0x2e4>
 8000f28:	18ba      	adds	r2, r7, r2
 8000f2a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f2e:	d2c4      	bcs.n	8000eba <__udivmoddi4+0x222>
 8000f30:	4542      	cmp	r2, r8
 8000f32:	d2c2      	bcs.n	8000eba <__udivmoddi4+0x222>
 8000f34:	f1a9 0102 	sub.w	r1, r9, #2
 8000f38:	443a      	add	r2, r7
 8000f3a:	e7be      	b.n	8000eba <__udivmoddi4+0x222>
 8000f3c:	45f0      	cmp	r8, lr
 8000f3e:	d29d      	bcs.n	8000e7c <__udivmoddi4+0x1e4>
 8000f40:	ebbe 0302 	subs.w	r3, lr, r2
 8000f44:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f48:	3801      	subs	r0, #1
 8000f4a:	46e1      	mov	r9, ip
 8000f4c:	e796      	b.n	8000e7c <__udivmoddi4+0x1e4>
 8000f4e:	eba7 0909 	sub.w	r9, r7, r9
 8000f52:	4449      	add	r1, r9
 8000f54:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f58:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f5c:	fb09 f804 	mul.w	r8, r9, r4
 8000f60:	e7db      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f62:	4673      	mov	r3, lr
 8000f64:	e77f      	b.n	8000e66 <__udivmoddi4+0x1ce>
 8000f66:	4650      	mov	r0, sl
 8000f68:	e766      	b.n	8000e38 <__udivmoddi4+0x1a0>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e6fd      	b.n	8000d6a <__udivmoddi4+0xd2>
 8000f6e:	443b      	add	r3, r7
 8000f70:	3a02      	subs	r2, #2
 8000f72:	e733      	b.n	8000ddc <__udivmoddi4+0x144>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	443b      	add	r3, r7
 8000f7a:	e71c      	b.n	8000db6 <__udivmoddi4+0x11e>
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	e79c      	b.n	8000eba <__udivmoddi4+0x222>
 8000f80:	eba1 0109 	sub.w	r1, r1, r9
 8000f84:	46c4      	mov	ip, r8
 8000f86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8a:	fb09 f804 	mul.w	r8, r9, r4
 8000f8e:	e7c4      	b.n	8000f1a <__udivmoddi4+0x282>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	0000      	movs	r0, r0
	...

08000f98 <ball_set_speed>:
#include "ball_physics.h"

int16_t max_speed = 20;


void ball_set_speed(int16_t *speed_x,int16_t *speed_y){
 8000f98:	b5b0      	push	{r4, r5, r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
	int dx = (int)(gyro_scaled_data_s.y) ;
 8000fa2:	4b75      	ldr	r3, [pc, #468]	@ (8001178 <ball_set_speed+0x1e0>)
 8000fa4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000fa8:	60fb      	str	r3, [r7, #12]
	int dy = (int)(gyro_scaled_data_s.x);
 8000faa:	4b73      	ldr	r3, [pc, #460]	@ (8001178 <ball_set_speed+0x1e0>)
 8000fac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb0:	60bb      	str	r3, [r7, #8]

	if (abs(dx) < 2) dx=0;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000fb8:	db04      	blt.n	8000fc4 <ball_set_speed+0x2c>
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	dc01      	bgt.n	8000fc4 <ball_set_speed+0x2c>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
	if (abs(dy) < 2) dy=0;
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000fca:	db04      	blt.n	8000fd6 <ball_set_speed+0x3e>
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	dc01      	bgt.n	8000fd6 <ball_set_speed+0x3e>
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]

	if(dx==0){
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d115      	bne.n	8001008 <ball_set_speed+0x70>
		*speed_x*=0.99;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff faae 	bl	8000544 <__aeabi_i2d>
 8000fe8:	a35f      	add	r3, pc, #380	@ (adr r3, 8001168 <ball_set_speed+0x1d0>)
 8000fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fee:	f7ff fb13 	bl	8000618 <__aeabi_dmul>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f7ff fdbd 	bl	8000b78 <__aeabi_d2iz>
 8000ffe:	4603      	mov	r3, r0
 8001000:	b21a      	sxth	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	801a      	strh	r2, [r3, #0]
 8001006:	e01f      	b.n	8001048 <ball_set_speed+0xb0>
	}else{
		*speed_x -= 0.1*dx;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fa98 	bl	8000544 <__aeabi_i2d>
 8001014:	4604      	mov	r4, r0
 8001016:	460d      	mov	r5, r1
 8001018:	68f8      	ldr	r0, [r7, #12]
 800101a:	f7ff fa93 	bl	8000544 <__aeabi_i2d>
 800101e:	a354      	add	r3, pc, #336	@ (adr r3, 8001170 <ball_set_speed+0x1d8>)
 8001020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001024:	f7ff faf8 	bl	8000618 <__aeabi_dmul>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	4620      	mov	r0, r4
 800102e:	4629      	mov	r1, r5
 8001030:	f7ff f93a 	bl	80002a8 <__aeabi_dsub>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4610      	mov	r0, r2
 800103a:	4619      	mov	r1, r3
 800103c:	f7ff fd9c 	bl	8000b78 <__aeabi_d2iz>
 8001040:	4603      	mov	r3, r0
 8001042:	b21a      	sxth	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	801a      	strh	r2, [r3, #0]
	}

	if(dy==0){
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d115      	bne.n	800107a <ball_set_speed+0xe2>
			*speed_y*=0.99;
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fa75 	bl	8000544 <__aeabi_i2d>
 800105a:	a343      	add	r3, pc, #268	@ (adr r3, 8001168 <ball_set_speed+0x1d0>)
 800105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001060:	f7ff fada 	bl	8000618 <__aeabi_dmul>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4610      	mov	r0, r2
 800106a:	4619      	mov	r1, r3
 800106c:	f7ff fd84 	bl	8000b78 <__aeabi_d2iz>
 8001070:	4603      	mov	r3, r0
 8001072:	b21a      	sxth	r2, r3
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	801a      	strh	r2, [r3, #0]
 8001078:	e01f      	b.n	80010ba <ball_set_speed+0x122>
		}
	else{
		*speed_y -=  0.1*dy;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fa5f 	bl	8000544 <__aeabi_i2d>
 8001086:	4604      	mov	r4, r0
 8001088:	460d      	mov	r5, r1
 800108a:	68b8      	ldr	r0, [r7, #8]
 800108c:	f7ff fa5a 	bl	8000544 <__aeabi_i2d>
 8001090:	a337      	add	r3, pc, #220	@ (adr r3, 8001170 <ball_set_speed+0x1d8>)
 8001092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001096:	f7ff fabf 	bl	8000618 <__aeabi_dmul>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4620      	mov	r0, r4
 80010a0:	4629      	mov	r1, r5
 80010a2:	f7ff f901 	bl	80002a8 <__aeabi_dsub>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4610      	mov	r0, r2
 80010ac:	4619      	mov	r1, r3
 80010ae:	f7ff fd63 	bl	8000b78 <__aeabi_d2iz>
 80010b2:	4603      	mov	r3, r0
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	801a      	strh	r2, [r3, #0]
	}


	if (*speed_x > max_speed) *speed_x = max_speed;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010c0:	4b2e      	ldr	r3, [pc, #184]	@ (800117c <ball_set_speed+0x1e4>)
 80010c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	dd04      	ble.n	80010d4 <ball_set_speed+0x13c>
 80010ca:	4b2c      	ldr	r3, [pc, #176]	@ (800117c <ball_set_speed+0x1e4>)
 80010cc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	801a      	strh	r2, [r3, #0]
	if (*speed_x < -max_speed) *speed_x = -max_speed;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010da:	461a      	mov	r2, r3
 80010dc:	4b27      	ldr	r3, [pc, #156]	@ (800117c <ball_set_speed+0x1e4>)
 80010de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e2:	425b      	negs	r3, r3
 80010e4:	429a      	cmp	r2, r3
 80010e6:	da08      	bge.n	80010fa <ball_set_speed+0x162>
 80010e8:	4b24      	ldr	r3, [pc, #144]	@ (800117c <ball_set_speed+0x1e4>)
 80010ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	425b      	negs	r3, r3
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	b21a      	sxth	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	801a      	strh	r2, [r3, #0]

	if (*speed_y > max_speed) *speed_y = max_speed;
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001100:	4b1e      	ldr	r3, [pc, #120]	@ (800117c <ball_set_speed+0x1e4>)
 8001102:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001106:	429a      	cmp	r2, r3
 8001108:	dd04      	ble.n	8001114 <ball_set_speed+0x17c>
 800110a:	4b1c      	ldr	r3, [pc, #112]	@ (800117c <ball_set_speed+0x1e4>)
 800110c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	801a      	strh	r2, [r3, #0]
    if (*speed_y < -max_speed) *speed_y = -max_speed;
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	f9b3 3000 	ldrsh.w	r3, [r3]
 800111a:	461a      	mov	r2, r3
 800111c:	4b17      	ldr	r3, [pc, #92]	@ (800117c <ball_set_speed+0x1e4>)
 800111e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001122:	425b      	negs	r3, r3
 8001124:	429a      	cmp	r2, r3
 8001126:	da08      	bge.n	800113a <ball_set_speed+0x1a2>
 8001128:	4b14      	ldr	r3, [pc, #80]	@ (800117c <ball_set_speed+0x1e4>)
 800112a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800112e:	b29b      	uxth	r3, r3
 8001130:	425b      	negs	r3, r3
 8001132:	b29b      	uxth	r3, r3
 8001134:	b21a      	sxth	r2, r3
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	801a      	strh	r2, [r3, #0]

    lcd_change_ball_color( (uint16_t)(abs(*speed_x) ), (uint16_t)(abs(*speed_y) ) );
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001140:	2b00      	cmp	r3, #0
 8001142:	bfb8      	it	lt
 8001144:	425b      	neglt	r3, r3
 8001146:	b29a      	uxth	r2, r3
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800114e:	2b00      	cmp	r3, #0
 8001150:	bfb8      	it	lt
 8001152:	425b      	neglt	r3, r3
 8001154:	b29b      	uxth	r3, r3
 8001156:	4619      	mov	r1, r3
 8001158:	4610      	mov	r0, r2
 800115a:	f001 fcc7 	bl	8002aec <lcd_change_ball_color>
}
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bdb0      	pop	{r4, r5, r7, pc}
 8001166:	bf00      	nop
 8001168:	7ae147ae 	.word	0x7ae147ae
 800116c:	3fefae14 	.word	0x3fefae14
 8001170:	9999999a 	.word	0x9999999a
 8001174:	3fb99999 	.word	0x3fb99999
 8001178:	20025efc 	.word	0x20025efc
 800117c:	20000000 	.word	0x20000000

08001180 <ball_move>:



void ball_move(int16_t *speed_x,int16_t *speed_y){
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	@ 0x28
 8001184:	af04      	add	r7, sp, #16
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
	 int next_x = player.x + *speed_x;
 800118a:	4b4c      	ldr	r3, [pc, #304]	@ (80012bc <ball_move+0x13c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001194:	4413      	add	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
	 int next_y = player.y + *speed_y;
 8001198:	4b48      	ldr	r3, [pc, #288]	@ (80012bc <ball_move+0x13c>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011a2:	4413      	add	r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]

	if(!check_inside_screen(next_x,next_y)){
 80011a6:	68f9      	ldr	r1, [r7, #12]
 80011a8:	6938      	ldr	r0, [r7, #16]
 80011aa:	f000 f8bf 	bl	800132c <check_inside_screen>
 80011ae:	4603      	mov	r3, r0
 80011b0:	f083 0301 	eor.w	r3, r3, #1
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d02a      	beq.n	8001210 <ball_move+0x90>
			*speed_x*=-0.75;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f9bf 	bl	8000544 <__aeabi_i2d>
 80011c6:	f04f 0200 	mov.w	r2, #0
 80011ca:	4b3d      	ldr	r3, [pc, #244]	@ (80012c0 <ball_move+0x140>)
 80011cc:	f7ff fa24 	bl	8000618 <__aeabi_dmul>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4610      	mov	r0, r2
 80011d6:	4619      	mov	r1, r3
 80011d8:	f7ff fcce 	bl	8000b78 <__aeabi_d2iz>
 80011dc:	4603      	mov	r3, r0
 80011de:	b21a      	sxth	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	801a      	strh	r2, [r3, #0]
			*speed_y*=-0.75;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff f9aa 	bl	8000544 <__aeabi_i2d>
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	4b32      	ldr	r3, [pc, #200]	@ (80012c0 <ball_move+0x140>)
 80011f6:	f7ff fa0f 	bl	8000618 <__aeabi_dmul>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	f7ff fcb9 	bl	8000b78 <__aeabi_d2iz>
 8001206:	4603      	mov	r3, r0
 8001208:	b21a      	sxth	r2, r3
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	801a      	strh	r2, [r3, #0]
			return;
 800120e:	e051      	b.n	80012b4 <ball_move+0x134>
	}


	for (int i = 0; i < RECTS_AMOUNT; i++) {
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	e040      	b.n	8001298 <ball_move+0x118>
		if (check_collision(rects[i],next_x,next_y)) {
 8001216:	492b      	ldr	r1, [pc, #172]	@ (80012c4 <ball_move+0x144>)
 8001218:	697a      	ldr	r2, [r7, #20]
 800121a:	4613      	mov	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	440b      	add	r3, r1
 8001224:	68fa      	ldr	r2, [r7, #12]
 8001226:	9202      	str	r2, [sp, #8]
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	9201      	str	r2, [sp, #4]
 800122c:	691a      	ldr	r2, [r3, #16]
 800122e:	9200      	str	r2, [sp, #0]
 8001230:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001232:	f000 f849 	bl	80012c8 <check_collision>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d02a      	beq.n	8001292 <ball_move+0x112>
			*speed_x *= -0.75;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f97e 	bl	8000544 <__aeabi_i2d>
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	4b1c      	ldr	r3, [pc, #112]	@ (80012c0 <ball_move+0x140>)
 800124e:	f7ff f9e3 	bl	8000618 <__aeabi_dmul>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	f7ff fc8d 	bl	8000b78 <__aeabi_d2iz>
 800125e:	4603      	mov	r3, r0
 8001260:	b21a      	sxth	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	801a      	strh	r2, [r3, #0]
			*speed_y *= -0.75;
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	f9b3 3000 	ldrsh.w	r3, [r3]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff f969 	bl	8000544 <__aeabi_i2d>
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <ball_move+0x140>)
 8001278:	f7ff f9ce 	bl	8000618 <__aeabi_dmul>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	f7ff fc78 	bl	8000b78 <__aeabi_d2iz>
 8001288:	4603      	mov	r3, r0
 800128a:	b21a      	sxth	r2, r3
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	801a      	strh	r2, [r3, #0]
			return;
 8001290:	e010      	b.n	80012b4 <ball_move+0x134>
	for (int i = 0; i < RECTS_AMOUNT; i++) {
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	3301      	adds	r3, #1
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	2b09      	cmp	r3, #9
 800129c:	ddbb      	ble.n	8001216 <ball_move+0x96>
		}
	}

	lcd_update_circle(*speed_x, *speed_y, 0);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a4:	4618      	mov	r0, r3
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ac:	2200      	movs	r2, #0
 80012ae:	4619      	mov	r1, r3
 80012b0:	f001 fa34 	bl	800271c <lcd_update_circle>
}
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20025e3c 	.word	0x20025e3c
 80012c0:	bfe80000 	.word	0xbfe80000
 80012c4:	20025d74 	.word	0x20025d74

080012c8 <check_collision>:



bool check_collision(Rectangle rec, int next_x, int next_y){
 80012c8:	b084      	sub	sp, #16
 80012ca:	b490      	push	{r4, r7}
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	f107 0408 	add.w	r4, r7, #8
 80012d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 if ((next_x < rec.x + rec.width + player.r) &&
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	441a      	add	r2, r3
 80012dc:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <check_collision+0x60>)
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	4413      	add	r3, r2
 80012e2:	69fa      	ldr	r2, [r7, #28]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	da18      	bge.n	800131a <check_collision+0x52>
		              (next_x > rec.x - player.r) &&
 80012e8:	68ba      	ldr	r2, [r7, #8]
 80012ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001328 <check_collision+0x60>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	1ad3      	subs	r3, r2, r3
	 if ((next_x < rec.x + rec.width + player.r) &&
 80012f0:	69fa      	ldr	r2, [r7, #28]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	dd11      	ble.n	800131a <check_collision+0x52>
		              (next_y > rec.y - player.r) &&
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <check_collision+0x60>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	1ad3      	subs	r3, r2, r3
		              (next_x > rec.x - player.r) &&
 80012fe:	6a3a      	ldr	r2, [r7, #32]
 8001300:	429a      	cmp	r2, r3
 8001302:	dd0a      	ble.n	800131a <check_collision+0x52>
		              (next_y < rec.y + rec.height + player.r))return true;
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	441a      	add	r2, r3
 800130a:	4b07      	ldr	r3, [pc, #28]	@ (8001328 <check_collision+0x60>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	4413      	add	r3, r2
		              (next_y > rec.y - player.r) &&
 8001310:	6a3a      	ldr	r2, [r7, #32]
 8001312:	429a      	cmp	r2, r3
 8001314:	da01      	bge.n	800131a <check_collision+0x52>
		              (next_y < rec.y + rec.height + player.r))return true;
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <check_collision+0x54>
	return false;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	bc90      	pop	{r4, r7}
 8001322:	b004      	add	sp, #16
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	20025e3c 	.word	0x20025e3c

0800132c <check_inside_screen>:


bool check_inside_screen(int next_x, int next_y){
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
	  if (next_x - player.r <= 0 || next_x + player.r >= LCD_WIDTH || next_y - player.r <= 0 || next_y + player.r >= LCD_HEIGHT) {
 8001336:	4b11      	ldr	r3, [pc, #68]	@ (800137c <check_inside_screen+0x50>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	dd12      	ble.n	8001368 <check_inside_screen+0x3c>
 8001342:	4b0e      	ldr	r3, [pc, #56]	@ (800137c <check_inside_screen+0x50>)
 8001344:	689a      	ldr	r2, [r3, #8]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	2bef      	cmp	r3, #239	@ 0xef
 800134c:	dc0c      	bgt.n	8001368 <check_inside_screen+0x3c>
 800134e:	4b0b      	ldr	r3, [pc, #44]	@ (800137c <check_inside_screen+0x50>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	dd06      	ble.n	8001368 <check_inside_screen+0x3c>
 800135a:	4b08      	ldr	r3, [pc, #32]	@ (800137c <check_inside_screen+0x50>)
 800135c:	689a      	ldr	r2, [r3, #8]
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	4413      	add	r3, r2
 8001362:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001366:	db01      	blt.n	800136c <check_inside_screen+0x40>
		   return false;
 8001368:	2300      	movs	r3, #0
 800136a:	e000      	b.n	800136e <check_inside_screen+0x42>
		}
	return true;
 800136c:	2301      	movs	r3, #1
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	20025e3c 	.word	0x20025e3c

08001380 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001384:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <MX_CRC_Init+0x20>)
 8001386:	4a07      	ldr	r2, [pc, #28]	@ (80013a4 <MX_CRC_Init+0x24>)
 8001388:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800138a:	4805      	ldr	r0, [pc, #20]	@ (80013a0 <MX_CRC_Init+0x20>)
 800138c:	f002 fc40 	bl	8003c10 <HAL_CRC_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001396:	f001 ff01 	bl	800319c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	2000021c 	.word	0x2000021c
 80013a4:	40023000 	.word	0x40023000

080013a8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a0b      	ldr	r2, [pc, #44]	@ (80013e4 <HAL_CRC_MspInit+0x3c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d10d      	bne.n	80013d6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4b0a      	ldr	r3, [pc, #40]	@ (80013e8 <HAL_CRC_MspInit+0x40>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	4a09      	ldr	r2, [pc, #36]	@ (80013e8 <HAL_CRC_MspInit+0x40>)
 80013c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ca:	4b07      	ldr	r3, [pc, #28]	@ (80013e8 <HAL_CRC_MspInit+0x40>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80013d6:	bf00      	nop
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40023000 	.word	0x40023000
 80013e8:	40023800 	.word	0x40023800

080013ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <MX_DMA_Init+0x3c>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001428 <MX_DMA_Init+0x3c>)
 80013fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001400:	6313      	str	r3, [r2, #48]	@ 0x30
 8001402:	4b09      	ldr	r3, [pc, #36]	@ (8001428 <MX_DMA_Init+0x3c>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2105      	movs	r1, #5
 8001412:	203c      	movs	r0, #60	@ 0x3c
 8001414:	f002 fbd2 	bl	8003bbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001418:	203c      	movs	r0, #60	@ 0x3c
 800141a:	f002 fbeb 	bl	8003bf4 <HAL_NVIC_EnableIRQ>

}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800

0800142c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001430:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <MX_DMA2D_Init+0x5c>)
 8001432:	4a16      	ldr	r2, [pc, #88]	@ (800148c <MX_DMA2D_Init+0x60>)
 8001434:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001436:	4b14      	ldr	r3, [pc, #80]	@ (8001488 <MX_DMA2D_Init+0x5c>)
 8001438:	2200      	movs	r2, #0
 800143a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800143c:	4b12      	ldr	r3, [pc, #72]	@ (8001488 <MX_DMA2D_Init+0x5c>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001442:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <MX_DMA2D_Init+0x5c>)
 8001444:	2200      	movs	r2, #0
 8001446:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001448:	4b0f      	ldr	r3, [pc, #60]	@ (8001488 <MX_DMA2D_Init+0x5c>)
 800144a:	2200      	movs	r2, #0
 800144c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800144e:	4b0e      	ldr	r3, [pc, #56]	@ (8001488 <MX_DMA2D_Init+0x5c>)
 8001450:	2200      	movs	r2, #0
 8001452:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001454:	4b0c      	ldr	r3, [pc, #48]	@ (8001488 <MX_DMA2D_Init+0x5c>)
 8001456:	2200      	movs	r2, #0
 8001458:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800145a:	4b0b      	ldr	r3, [pc, #44]	@ (8001488 <MX_DMA2D_Init+0x5c>)
 800145c:	2200      	movs	r2, #0
 800145e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001460:	4809      	ldr	r0, [pc, #36]	@ (8001488 <MX_DMA2D_Init+0x5c>)
 8001462:	f002 ff61 	bl	8004328 <HAL_DMA2D_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800146c:	f001 fe96 	bl	800319c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001470:	2101      	movs	r1, #1
 8001472:	4805      	ldr	r0, [pc, #20]	@ (8001488 <MX_DMA2D_Init+0x5c>)
 8001474:	f003 f8b2 	bl	80045dc <HAL_DMA2D_ConfigLayer>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800147e:	f001 fe8d 	bl	800319c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000224 	.word	0x20000224
 800148c:	4002b000 	.word	0x4002b000

08001490 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a0e      	ldr	r2, [pc, #56]	@ (80014d8 <HAL_DMA2D_MspInit+0x48>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d115      	bne.n	80014ce <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	4b0d      	ldr	r3, [pc, #52]	@ (80014dc <HAL_DMA2D_MspInit+0x4c>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	4a0c      	ldr	r2, [pc, #48]	@ (80014dc <HAL_DMA2D_MspInit+0x4c>)
 80014ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80014b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b2:	4b0a      	ldr	r3, [pc, #40]	@ (80014dc <HAL_DMA2D_MspInit+0x4c>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2105      	movs	r1, #5
 80014c2:	205a      	movs	r0, #90	@ 0x5a
 80014c4:	f002 fb7a 	bl	8003bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80014c8:	205a      	movs	r0, #90	@ 0x5a
 80014ca:	f002 fb93 	bl	8003bf4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	4002b000 	.word	0x4002b000
 80014dc:	40023800 	.word	0x40023800

080014e0 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
 80014f4:	615a      	str	r2, [r3, #20]
 80014f6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80014f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001578 <MX_FMC_Init+0x98>)
 80014fa:	4a20      	ldr	r2, [pc, #128]	@ (800157c <MX_FMC_Init+0x9c>)
 80014fc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80014fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001578 <MX_FMC_Init+0x98>)
 8001500:	2201      	movs	r2, #1
 8001502:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001504:	4b1c      	ldr	r3, [pc, #112]	@ (8001578 <MX_FMC_Init+0x98>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800150a:	4b1b      	ldr	r3, [pc, #108]	@ (8001578 <MX_FMC_Init+0x98>)
 800150c:	2204      	movs	r2, #4
 800150e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001510:	4b19      	ldr	r3, [pc, #100]	@ (8001578 <MX_FMC_Init+0x98>)
 8001512:	2210      	movs	r2, #16
 8001514:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001516:	4b18      	ldr	r3, [pc, #96]	@ (8001578 <MX_FMC_Init+0x98>)
 8001518:	2240      	movs	r2, #64	@ 0x40
 800151a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800151c:	4b16      	ldr	r3, [pc, #88]	@ (8001578 <MX_FMC_Init+0x98>)
 800151e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001522:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001524:	4b14      	ldr	r3, [pc, #80]	@ (8001578 <MX_FMC_Init+0x98>)
 8001526:	2200      	movs	r2, #0
 8001528:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800152a:	4b13      	ldr	r3, [pc, #76]	@ (8001578 <MX_FMC_Init+0x98>)
 800152c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001530:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001532:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <MX_FMC_Init+0x98>)
 8001534:	2200      	movs	r2, #0
 8001536:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8001538:	4b0f      	ldr	r3, [pc, #60]	@ (8001578 <MX_FMC_Init+0x98>)
 800153a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800153e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001540:	2302      	movs	r3, #2
 8001542:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001544:	2307      	movs	r3, #7
 8001546:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001548:	2304      	movs	r3, #4
 800154a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800154c:	2307      	movs	r3, #7
 800154e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001550:	2303      	movs	r3, #3
 8001552:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001554:	2302      	movs	r3, #2
 8001556:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001558:	2302      	movs	r3, #2
 800155a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	4619      	mov	r1, r3
 8001560:	4805      	ldr	r0, [pc, #20]	@ (8001578 <MX_FMC_Init+0x98>)
 8001562:	f006 ff79 	bl	8008458 <HAL_SDRAM_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800156c:	f001 fe16 	bl	800319c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001570:	bf00      	nop
 8001572:	3720      	adds	r7, #32
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000264 	.word	0x20000264
 800157c:	a0000140 	.word	0xa0000140

08001580 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001594:	4b3b      	ldr	r3, [pc, #236]	@ (8001684 <HAL_FMC_MspInit+0x104>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d16f      	bne.n	800167c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800159c:	4b39      	ldr	r3, [pc, #228]	@ (8001684 <HAL_FMC_MspInit+0x104>)
 800159e:	2201      	movs	r2, #1
 80015a0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	603b      	str	r3, [r7, #0]
 80015a6:	4b38      	ldr	r3, [pc, #224]	@ (8001688 <HAL_FMC_MspInit+0x108>)
 80015a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015aa:	4a37      	ldr	r2, [pc, #220]	@ (8001688 <HAL_FMC_MspInit+0x108>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6393      	str	r3, [r2, #56]	@ 0x38
 80015b2:	4b35      	ldr	r3, [pc, #212]	@ (8001688 <HAL_FMC_MspInit+0x108>)
 80015b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80015be:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80015c2:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015d0:	230c      	movs	r3, #12
 80015d2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	4619      	mov	r1, r3
 80015d8:	482c      	ldr	r0, [pc, #176]	@ (800168c <HAL_FMC_MspInit+0x10c>)
 80015da:	f003 f891 	bl	8004700 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80015de:	2301      	movs	r3, #1
 80015e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2302      	movs	r3, #2
 80015e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ea:	2303      	movs	r3, #3
 80015ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015ee:	230c      	movs	r3, #12
 80015f0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	4619      	mov	r1, r3
 80015f6:	4826      	ldr	r0, [pc, #152]	@ (8001690 <HAL_FMC_MspInit+0x110>)
 80015f8:	f003 f882 	bl	8004700 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80015fc:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001600:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160a:	2303      	movs	r3, #3
 800160c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800160e:	230c      	movs	r3, #12
 8001610:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	4619      	mov	r1, r3
 8001616:	481f      	ldr	r0, [pc, #124]	@ (8001694 <HAL_FMC_MspInit+0x114>)
 8001618:	f003 f872 	bl	8004700 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800161c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001620:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162a:	2303      	movs	r3, #3
 800162c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800162e:	230c      	movs	r3, #12
 8001630:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	4619      	mov	r1, r3
 8001636:	4818      	ldr	r0, [pc, #96]	@ (8001698 <HAL_FMC_MspInit+0x118>)
 8001638:	f003 f862 	bl	8004700 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800163c:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001640:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001642:	2302      	movs	r3, #2
 8001644:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164a:	2303      	movs	r3, #3
 800164c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800164e:	230c      	movs	r3, #12
 8001650:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	4619      	mov	r1, r3
 8001656:	4811      	ldr	r0, [pc, #68]	@ (800169c <HAL_FMC_MspInit+0x11c>)
 8001658:	f003 f852 	bl	8004700 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800165c:	2360      	movs	r3, #96	@ 0x60
 800165e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800166c:	230c      	movs	r3, #12
 800166e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	4619      	mov	r1, r3
 8001674:	480a      	ldr	r0, [pc, #40]	@ (80016a0 <HAL_FMC_MspInit+0x120>)
 8001676:	f003 f843 	bl	8004700 <HAL_GPIO_Init>
 800167a:	e000      	b.n	800167e <HAL_FMC_MspInit+0xfe>
    return;
 800167c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000298 	.word	0x20000298
 8001688:	40023800 	.word	0x40023800
 800168c:	40021400 	.word	0x40021400
 8001690:	40020800 	.word	0x40020800
 8001694:	40021800 	.word	0x40021800
 8001698:	40021000 	.word	0x40021000
 800169c:	40020c00 	.word	0x40020c00
 80016a0:	40020400 	.word	0x40020400

080016a4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80016ac:	f7ff ff68 	bl	8001580 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4a07      	ldr	r2, [pc, #28]	@ (80016e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80016c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	4a06      	ldr	r2, [pc, #24]	@ (80016e8 <vApplicationGetIdleTaskMemory+0x30>)
 80016ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2280      	movs	r2, #128	@ 0x80
 80016d4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80016d6:	bf00      	nop
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	200002a0 	.word	0x200002a0
 80016e8:	200002f4 	.word	0x200002f4

080016ec <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80016ec:	b5b0      	push	{r4, r5, r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80016f2:	4b0a      	ldr	r3, [pc, #40]	@ (800171c <MX_FREERTOS_Init+0x30>)
 80016f4:	1d3c      	adds	r4, r7, #4
 80016f6:	461d      	mov	r5, r3
 80016f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001700:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f00c fbb8 	bl	800de7e <osThreadCreate>
 800170e:	4603      	mov	r3, r0
 8001710:	4a03      	ldr	r2, [pc, #12]	@ (8001720 <MX_FREERTOS_Init+0x34>)
 8001712:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001714:	bf00      	nop
 8001716:	3720      	adds	r7, #32
 8001718:	46bd      	mov	sp, r7
 800171a:	bdb0      	pop	{r4, r5, r7, pc}
 800171c:	080132fc 	.word	0x080132fc
 8001720:	2000029c 	.word	0x2000029c

08001724 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800172c:	f00e fdcc 	bl	80102c8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <StartDefaultTask+0xc>

08001734 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08e      	sub	sp, #56	@ 0x38
 8001738:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
 8001748:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	623b      	str	r3, [r7, #32]
 800174e:	4b88      	ldr	r3, [pc, #544]	@ (8001970 <MX_GPIO_Init+0x23c>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	4a87      	ldr	r2, [pc, #540]	@ (8001970 <MX_GPIO_Init+0x23c>)
 8001754:	f043 0304 	orr.w	r3, r3, #4
 8001758:	6313      	str	r3, [r2, #48]	@ 0x30
 800175a:	4b85      	ldr	r3, [pc, #532]	@ (8001970 <MX_GPIO_Init+0x23c>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	623b      	str	r3, [r7, #32]
 8001764:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
 800176a:	4b81      	ldr	r3, [pc, #516]	@ (8001970 <MX_GPIO_Init+0x23c>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	4a80      	ldr	r2, [pc, #512]	@ (8001970 <MX_GPIO_Init+0x23c>)
 8001770:	f043 0320 	orr.w	r3, r3, #32
 8001774:	6313      	str	r3, [r2, #48]	@ 0x30
 8001776:	4b7e      	ldr	r3, [pc, #504]	@ (8001970 <MX_GPIO_Init+0x23c>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	f003 0320 	and.w	r3, r3, #32
 800177e:	61fb      	str	r3, [r7, #28]
 8001780:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	61bb      	str	r3, [r7, #24]
 8001786:	4b7a      	ldr	r3, [pc, #488]	@ (8001970 <MX_GPIO_Init+0x23c>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	4a79      	ldr	r2, [pc, #484]	@ (8001970 <MX_GPIO_Init+0x23c>)
 800178c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001790:	6313      	str	r3, [r2, #48]	@ 0x30
 8001792:	4b77      	ldr	r3, [pc, #476]	@ (8001970 <MX_GPIO_Init+0x23c>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800179a:	61bb      	str	r3, [r7, #24]
 800179c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	4b73      	ldr	r3, [pc, #460]	@ (8001970 <MX_GPIO_Init+0x23c>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	4a72      	ldr	r2, [pc, #456]	@ (8001970 <MX_GPIO_Init+0x23c>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ae:	4b70      	ldr	r3, [pc, #448]	@ (8001970 <MX_GPIO_Init+0x23c>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	4b6c      	ldr	r3, [pc, #432]	@ (8001970 <MX_GPIO_Init+0x23c>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	4a6b      	ldr	r2, [pc, #428]	@ (8001970 <MX_GPIO_Init+0x23c>)
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ca:	4b69      	ldr	r3, [pc, #420]	@ (8001970 <MX_GPIO_Init+0x23c>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	4b65      	ldr	r3, [pc, #404]	@ (8001970 <MX_GPIO_Init+0x23c>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	4a64      	ldr	r2, [pc, #400]	@ (8001970 <MX_GPIO_Init+0x23c>)
 80017e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e6:	4b62      	ldr	r3, [pc, #392]	@ (8001970 <MX_GPIO_Init+0x23c>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	4b5e      	ldr	r3, [pc, #376]	@ (8001970 <MX_GPIO_Init+0x23c>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	4a5d      	ldr	r2, [pc, #372]	@ (8001970 <MX_GPIO_Init+0x23c>)
 80017fc:	f043 0310 	orr.w	r3, r3, #16
 8001800:	6313      	str	r3, [r2, #48]	@ 0x30
 8001802:	4b5b      	ldr	r3, [pc, #364]	@ (8001970 <MX_GPIO_Init+0x23c>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	f003 0310 	and.w	r3, r3, #16
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	4b57      	ldr	r3, [pc, #348]	@ (8001970 <MX_GPIO_Init+0x23c>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	4a56      	ldr	r2, [pc, #344]	@ (8001970 <MX_GPIO_Init+0x23c>)
 8001818:	f043 0308 	orr.w	r3, r3, #8
 800181c:	6313      	str	r3, [r2, #48]	@ 0x30
 800181e:	4b54      	ldr	r3, [pc, #336]	@ (8001970 <MX_GPIO_Init+0x23c>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800182a:	2200      	movs	r2, #0
 800182c:	2116      	movs	r1, #22
 800182e:	4851      	ldr	r0, [pc, #324]	@ (8001974 <MX_GPIO_Init+0x240>)
 8001830:	f003 f912 	bl	8004a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001834:	2200      	movs	r2, #0
 8001836:	2180      	movs	r1, #128	@ 0x80
 8001838:	484f      	ldr	r0, [pc, #316]	@ (8001978 <MX_GPIO_Init+0x244>)
 800183a:	f003 f90d 	bl	8004a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800183e:	2200      	movs	r2, #0
 8001840:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001844:	484d      	ldr	r0, [pc, #308]	@ (800197c <MX_GPIO_Init+0x248>)
 8001846:	f003 f907 	bl	8004a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001850:	484b      	ldr	r0, [pc, #300]	@ (8001980 <MX_GPIO_Init+0x24c>)
 8001852:	f003 f901 	bl	8004a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NCS_MEMS_SPI_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin;
 8001856:	2302      	movs	r3, #2
 8001858:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185a:	2301      	movs	r3, #1
 800185c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800185e:	2301      	movs	r3, #1
 8001860:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	2300      	movs	r3, #0
 8001864:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(NCS_MEMS_SPI_GPIO_Port, &GPIO_InitStruct);
 8001866:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800186a:	4619      	mov	r1, r3
 800186c:	4841      	ldr	r0, [pc, #260]	@ (8001974 <MX_GPIO_Init+0x240>)
 800186e:	f002 ff47 	bl	8004700 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = CSX_Pin|OTG_FS_PSO_Pin;
 8001872:	2314      	movs	r3, #20
 8001874:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001876:	2301      	movs	r3, #1
 8001878:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187e:	2300      	movs	r3, #0
 8001880:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001882:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001886:	4619      	mov	r1, r3
 8001888:	483a      	ldr	r0, [pc, #232]	@ (8001974 <MX_GPIO_Init+0x240>)
 800188a:	f002 ff39 	bl	8004700 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 800188e:	2301      	movs	r3, #1
 8001890:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001892:	2300      	movs	r3, #0
 8001894:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 800189a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800189e:	4619      	mov	r1, r3
 80018a0:	4835      	ldr	r0, [pc, #212]	@ (8001978 <MX_GPIO_Init+0x244>)
 80018a2:	f002 ff2d 	bl	8004700 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80018a6:	f248 0306 	movw	r3, #32774	@ 0x8006
 80018aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018ac:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80018b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ba:	4619      	mov	r1, r3
 80018bc:	482e      	ldr	r0, [pc, #184]	@ (8001978 <MX_GPIO_Init+0x244>)
 80018be:	f002 ff1f 	bl	8004700 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80018c2:	2380      	movs	r3, #128	@ 0x80
 80018c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c6:	2301      	movs	r3, #1
 80018c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	2300      	movs	r3, #0
 80018d0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80018d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018d6:	4619      	mov	r1, r3
 80018d8:	4827      	ldr	r0, [pc, #156]	@ (8001978 <MX_GPIO_Init+0x244>)
 80018da:	f002 ff11 	bl	8004700 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80018de:	2320      	movs	r3, #32
 80018e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018e2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80018e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80018ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018f0:	4619      	mov	r1, r3
 80018f2:	4820      	ldr	r0, [pc, #128]	@ (8001974 <MX_GPIO_Init+0x240>)
 80018f4:	f002 ff04 	bl	8004700 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80018f8:	2304      	movs	r3, #4
 80018fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018fc:	2300      	movs	r3, #0
 80018fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001904:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001908:	4619      	mov	r1, r3
 800190a:	481e      	ldr	r0, [pc, #120]	@ (8001984 <MX_GPIO_Init+0x250>)
 800190c:	f002 fef8 	bl	8004700 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001910:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001914:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001916:	2300      	movs	r3, #0
 8001918:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800191e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001922:	4619      	mov	r1, r3
 8001924:	4815      	ldr	r0, [pc, #84]	@ (800197c <MX_GPIO_Init+0x248>)
 8001926:	f002 feeb 	bl	8004700 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800192a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800192e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001930:	2301      	movs	r3, #1
 8001932:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800193c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001940:	4619      	mov	r1, r3
 8001942:	480e      	ldr	r0, [pc, #56]	@ (800197c <MX_GPIO_Init+0x248>)
 8001944:	f002 fedc 	bl	8004700 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001948:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800194c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194e:	2301      	movs	r3, #1
 8001950:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001956:	2300      	movs	r3, #0
 8001958:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800195a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800195e:	4619      	mov	r1, r3
 8001960:	4807      	ldr	r0, [pc, #28]	@ (8001980 <MX_GPIO_Init+0x24c>)
 8001962:	f002 fecd 	bl	8004700 <HAL_GPIO_Init>

}
 8001966:	bf00      	nop
 8001968:	3738      	adds	r7, #56	@ 0x38
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800
 8001974:	40020800 	.word	0x40020800
 8001978:	40020000 	.word	0x40020000
 800197c:	40020c00 	.word	0x40020c00
 8001980:	40021800 	.word	0x40021800
 8001984:	40020400 	.word	0x40020400

08001988 <_write>:
static int16_t x_data[MOVING_AVERAGE_WINDOW];
static int16_t y_data[MOVING_AVERAGE_WINDOW];
static int16_t z_data[MOVING_AVERAGE_WINDOW];
static uint8_t data_index = 0;

ssize_t _write(int file, const char *data, size_t len) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) data, len, HAL_MAX_DELAY); // Wysyłanie danych przez UART
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	b29a      	uxth	r2, r3
 8001998:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800199c:	68b9      	ldr	r1, [r7, #8]
 800199e:	4804      	ldr	r0, [pc, #16]	@ (80019b0 <_write+0x28>)
 80019a0:	f008 f96e 	bl	8009c80 <HAL_UART_Transmit>
	return len;
 80019a4:	687b      	ldr	r3, [r7, #4]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200260a4 	.word	0x200260a4

080019b4 <gyro_init>:

void gyro_init(void) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
	uint8_t configData[2] = { CTRL_REG1, 0x0F }; // PD=1, Zen=1, Yen=1, Xen=1;
 80019ba:	f44f 6372 	mov.w	r3, #3872	@ 0xf20
 80019be:	80bb      	strh	r3, [r7, #4]

	while (!spi5_acquire())
 80019c0:	bf00      	nop
 80019c2:	f001 fbf1 	bl	80031a8 <spi5_acquire>
 80019c6:	4603      	mov	r3, r0
 80019c8:	f083 0301 	eor.w	r3, r3, #1
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d116      	bne.n	8001a00 <gyro_init+0x4c>
		return;

	GYRO_CS_LOW();
 80019d2:	2200      	movs	r2, #0
 80019d4:	2102      	movs	r1, #2
 80019d6:	480c      	ldr	r0, [pc, #48]	@ (8001a08 <gyro_init+0x54>)
 80019d8:	f003 f83e 	bl	8004a58 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, configData, 2, 100);
 80019dc:	1d39      	adds	r1, r7, #4
 80019de:	2364      	movs	r3, #100	@ 0x64
 80019e0:	2202      	movs	r2, #2
 80019e2:	480a      	ldr	r0, [pc, #40]	@ (8001a0c <gyro_init+0x58>)
 80019e4:	f006 fdf5 	bl	80085d2 <HAL_SPI_Transmit>
	GYRO_CS_HIGH();
 80019e8:	2201      	movs	r2, #1
 80019ea:	2102      	movs	r1, #2
 80019ec:	4806      	ldr	r0, [pc, #24]	@ (8001a08 <gyro_init+0x54>)
 80019ee:	f003 f833 	bl	8004a58 <HAL_GPIO_WritePin>

	spi5_release();
 80019f2:	f001 fbed 	bl	80031d0 <spi5_release>

	gyro_set_sensitivity();
 80019f6:	f000 f80b 	bl	8001a10 <gyro_set_sensitivity>

	// Weryfikacja połączenia
	gyro_ReadWhoAmI();
 80019fa:	f000 f8bb 	bl	8001b74 <gyro_ReadWhoAmI>
 80019fe:	e000      	b.n	8001a02 <gyro_init+0x4e>
		return;
 8001a00:	bf00      	nop
}
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40020800 	.word	0x40020800
 8001a0c:	20025f10 	.word	0x20025f10

08001a10 <gyro_set_sensitivity>:

void gyro_set_sensitivity() {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
	uint8_t configData[2] = { CTRL_REG4, SENSITIVITY };
 8001a16:	f243 0323 	movw	r3, #12323	@ 0x3023
 8001a1a:	80bb      	strh	r3, [r7, #4]

	while (!spi5_acquire())
 8001a1c:	bf00      	nop
 8001a1e:	f001 fbc3 	bl	80031a8 <spi5_acquire>
 8001a22:	4603      	mov	r3, r0
 8001a24:	f083 0301 	eor.w	r3, r3, #1
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d112      	bne.n	8001a54 <gyro_set_sensitivity+0x44>
		return;

	GYRO_CS_LOW();
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2102      	movs	r1, #2
 8001a32:	480a      	ldr	r0, [pc, #40]	@ (8001a5c <gyro_set_sensitivity+0x4c>)
 8001a34:	f003 f810 	bl	8004a58 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, configData, 2, 100);
 8001a38:	1d39      	adds	r1, r7, #4
 8001a3a:	2364      	movs	r3, #100	@ 0x64
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	4808      	ldr	r0, [pc, #32]	@ (8001a60 <gyro_set_sensitivity+0x50>)
 8001a40:	f006 fdc7 	bl	80085d2 <HAL_SPI_Transmit>
	GYRO_CS_HIGH();
 8001a44:	2201      	movs	r2, #1
 8001a46:	2102      	movs	r1, #2
 8001a48:	4804      	ldr	r0, [pc, #16]	@ (8001a5c <gyro_set_sensitivity+0x4c>)
 8001a4a:	f003 f805 	bl	8004a58 <HAL_GPIO_WritePin>

	spi5_release();
 8001a4e:	f001 fbbf 	bl	80031d0 <spi5_release>
 8001a52:	e000      	b.n	8001a56 <gyro_set_sensitivity+0x46>
		return;
 8001a54:	bf00      	nop
}
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40020800 	.word	0x40020800
 8001a60:	20025f10 	.word	0x20025f10

08001a64 <gyro_get_filtered_data>:

void gyro_get_filtered_data(Gyro_Int_Data *gyro_data) {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]

	int32_t x_sum = 0, y_sum = 0, z_sum = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61fb      	str	r3, [r7, #28]
 8001a70:	2300      	movs	r3, #0
 8001a72:	61bb      	str	r3, [r7, #24]
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
	Gyro_Int_Data raw_data;
	data_index = 0;
 8001a78:	4b39      	ldr	r3, [pc, #228]	@ (8001b60 <gyro_get_filtered_data+0xfc>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]

	gyro_get_data(&raw_data);
 8001a7e:	f107 030c 	add.w	r3, r7, #12
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 f8bc 	bl	8001c00 <gyro_get_data>

	// Aktualizacja bufora
	x_data[data_index] = raw_data.x;
 8001a88:	4b35      	ldr	r3, [pc, #212]	@ (8001b60 <gyro_get_filtered_data+0xfc>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001a92:	4b34      	ldr	r3, [pc, #208]	@ (8001b64 <gyro_get_filtered_data+0x100>)
 8001a94:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	y_data[data_index] = raw_data.y;
 8001a98:	4b31      	ldr	r3, [pc, #196]	@ (8001b60 <gyro_get_filtered_data+0xfc>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001aa2:	4b31      	ldr	r3, [pc, #196]	@ (8001b68 <gyro_get_filtered_data+0x104>)
 8001aa4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	z_data[data_index] = raw_data.z;
 8001aa8:	4b2d      	ldr	r3, [pc, #180]	@ (8001b60 <gyro_get_filtered_data+0xfc>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	461a      	mov	r2, r3
 8001aae:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8001ab2:	4b2e      	ldr	r3, [pc, #184]	@ (8001b6c <gyro_get_filtered_data+0x108>)
 8001ab4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	//Średnia
	for (uint8_t i = 0; i < MOVING_AVERAGE_WINDOW; i++) {
 8001ab8:	2300      	movs	r3, #0
 8001aba:	74fb      	strb	r3, [r7, #19]
 8001abc:	e01a      	b.n	8001af4 <gyro_get_filtered_data+0x90>
		x_sum += x_data[i];
 8001abe:	7cfb      	ldrb	r3, [r7, #19]
 8001ac0:	4a28      	ldr	r2, [pc, #160]	@ (8001b64 <gyro_get_filtered_data+0x100>)
 8001ac2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	4413      	add	r3, r2
 8001acc:	61fb      	str	r3, [r7, #28]
		y_sum += y_data[i];
 8001ace:	7cfb      	ldrb	r3, [r7, #19]
 8001ad0:	4a25      	ldr	r2, [pc, #148]	@ (8001b68 <gyro_get_filtered_data+0x104>)
 8001ad2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	4413      	add	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
		z_sum += z_data[i];
 8001ade:	7cfb      	ldrb	r3, [r7, #19]
 8001ae0:	4a22      	ldr	r2, [pc, #136]	@ (8001b6c <gyro_get_filtered_data+0x108>)
 8001ae2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	4413      	add	r3, r2
 8001aec:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MOVING_AVERAGE_WINDOW; i++) {
 8001aee:	7cfb      	ldrb	r3, [r7, #19]
 8001af0:	3301      	adds	r3, #1
 8001af2:	74fb      	strb	r3, [r7, #19]
 8001af4:	7cfb      	ldrb	r3, [r7, #19]
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	d9e1      	bls.n	8001abe <gyro_get_filtered_data+0x5a>
	}

	gyro_data->x = x_sum / MOVING_AVERAGE_WINDOW;
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	4a1c      	ldr	r2, [pc, #112]	@ (8001b70 <gyro_get_filtered_data+0x10c>)
 8001afe:	fb82 1203 	smull	r1, r2, r2, r3
 8001b02:	1052      	asrs	r2, r2, #1
 8001b04:	17db      	asrs	r3, r3, #31
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	b21a      	sxth	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	801a      	strh	r2, [r3, #0]
	gyro_data->y = y_sum / MOVING_AVERAGE_WINDOW;
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	4a17      	ldr	r2, [pc, #92]	@ (8001b70 <gyro_get_filtered_data+0x10c>)
 8001b12:	fb82 1203 	smull	r1, r2, r2, r3
 8001b16:	1052      	asrs	r2, r2, #1
 8001b18:	17db      	asrs	r3, r3, #31
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	b21a      	sxth	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	805a      	strh	r2, [r3, #2]
	gyro_data->z = z_sum / MOVING_AVERAGE_WINDOW;
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	4a12      	ldr	r2, [pc, #72]	@ (8001b70 <gyro_get_filtered_data+0x10c>)
 8001b26:	fb82 1203 	smull	r1, r2, r2, r3
 8001b2a:	1052      	asrs	r2, r2, #1
 8001b2c:	17db      	asrs	r3, r3, #31
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	b21a      	sxth	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	809a      	strh	r2, [r3, #4]

	// Aktualizuj indeks
	data_index = (data_index + 1) % MOVING_AVERAGE_WINDOW;
 8001b36:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <gyro_get_filtered_data+0xfc>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b70 <gyro_get_filtered_data+0x10c>)
 8001b3e:	fb83 1302 	smull	r1, r3, r3, r2
 8001b42:	1059      	asrs	r1, r3, #1
 8001b44:	17d3      	asrs	r3, r2, #31
 8001b46:	1ac9      	subs	r1, r1, r3
 8001b48:	460b      	mov	r3, r1
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	1ad1      	subs	r1, r2, r3
 8001b50:	b2ca      	uxtb	r2, r1
 8001b52:	4b03      	ldr	r3, [pc, #12]	@ (8001b60 <gyro_get_filtered_data+0xfc>)
 8001b54:	701a      	strb	r2, [r3, #0]
}
 8001b56:	bf00      	nop
 8001b58:	3720      	adds	r7, #32
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000516 	.word	0x20000516
 8001b64:	200004f4 	.word	0x200004f4
 8001b68:	20000500 	.word	0x20000500
 8001b6c:	2000050c 	.word	0x2000050c
 8001b70:	66666667 	.word	0x66666667

08001b74 <gyro_ReadWhoAmI>:

void gyro_ReadWhoAmI(void) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
	uint8_t tx = WHO_AM_I | 0x80;
 8001b7a:	238f      	movs	r3, #143	@ 0x8f
 8001b7c:	71fb      	strb	r3, [r7, #7]
	uint8_t rx = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	71bb      	strb	r3, [r7, #6]

	if (!spi5_acquire())
 8001b82:	f001 fb11 	bl	80031a8 <spi5_acquire>
 8001b86:	4603      	mov	r3, r0
 8001b88:	f083 0301 	eor.w	r3, r3, #1
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d129      	bne.n	8001be6 <gyro_ReadWhoAmI+0x72>
		return;

	GYRO_CS_LOW();
 8001b92:	2200      	movs	r2, #0
 8001b94:	2102      	movs	r1, #2
 8001b96:	4816      	ldr	r0, [pc, #88]	@ (8001bf0 <gyro_ReadWhoAmI+0x7c>)
 8001b98:	f002 ff5e 	bl	8004a58 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &tx, 1, 10);
 8001b9c:	1df9      	adds	r1, r7, #7
 8001b9e:	230a      	movs	r3, #10
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	4814      	ldr	r0, [pc, #80]	@ (8001bf4 <gyro_ReadWhoAmI+0x80>)
 8001ba4:	f006 fd15 	bl	80085d2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi5, &rx, 1, 10);
 8001ba8:	1db9      	adds	r1, r7, #6
 8001baa:	230a      	movs	r3, #10
 8001bac:	2201      	movs	r2, #1
 8001bae:	4811      	ldr	r0, [pc, #68]	@ (8001bf4 <gyro_ReadWhoAmI+0x80>)
 8001bb0:	f006 fe53 	bl	800885a <HAL_SPI_Receive>
	GYRO_CS_HIGH();
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	2102      	movs	r1, #2
 8001bb8:	480d      	ldr	r0, [pc, #52]	@ (8001bf0 <gyro_ReadWhoAmI+0x7c>)
 8001bba:	f002 ff4d 	bl	8004a58 <HAL_GPIO_WritePin>

	spi5_release();
 8001bbe:	f001 fb07 	bl	80031d0 <spi5_release>

	if ((rx != 0xD3) && (rx != 0xD4)) {
 8001bc2:	79bb      	ldrb	r3, [r7, #6]
 8001bc4:	2bd3      	cmp	r3, #211	@ 0xd3
 8001bc6:	d008      	beq.n	8001bda <gyro_ReadWhoAmI+0x66>
 8001bc8:	79bb      	ldrb	r3, [r7, #6]
 8001bca:	2bd4      	cmp	r3, #212	@ 0xd4
 8001bcc:	d005      	beq.n	8001bda <gyro_ReadWhoAmI+0x66>
		printf("WHO_AM_I error: 0x%02X (expected 0xD3 or 0xD4)\r\n", rx);
 8001bce:	79bb      	ldrb	r3, [r7, #6]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4809      	ldr	r0, [pc, #36]	@ (8001bf8 <gyro_ReadWhoAmI+0x84>)
 8001bd4:	f00f fc58 	bl	8011488 <iprintf>
 8001bd8:	e006      	b.n	8001be8 <gyro_ReadWhoAmI+0x74>
	}
	else {
		printf("WHO_AM_I OK: 0x%02X\r\n", rx);
 8001bda:	79bb      	ldrb	r3, [r7, #6]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4807      	ldr	r0, [pc, #28]	@ (8001bfc <gyro_ReadWhoAmI+0x88>)
 8001be0:	f00f fc52 	bl	8011488 <iprintf>
 8001be4:	e000      	b.n	8001be8 <gyro_ReadWhoAmI+0x74>
		return;
 8001be6:	bf00      	nop
	}
}
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40020800 	.word	0x40020800
 8001bf4:	20025f10 	.word	0x20025f10
 8001bf8:	08013318 	.word	0x08013318
 8001bfc:	0801334c 	.word	0x0801334c

08001c00 <gyro_get_data>:

void gyro_get_data(Gyro_Int_Data *gyro_data) {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

	uint8_t tx = OUT_X_L | 0x80 | 0x40;
 8001c08:	23e8      	movs	r3, #232	@ 0xe8
 8001c0a:	73fb      	strb	r3, [r7, #15]
	uint8_t rx[6];
	if (gyro_is_data_ready()==false) {
 8001c0c:	f000 f852 	bl	8001cb4 <gyro_is_data_ready>
 8001c10:	4603      	mov	r3, r0
 8001c12:	f083 0301 	eor.w	r3, r3, #1
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d140      	bne.n	8001c9e <gyro_get_data+0x9e>
//		printf("Data not ready\r\n");
		return;
	}

	if (!spi5_acquire())
 8001c1c:	f001 fac4 	bl	80031a8 <spi5_acquire>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f083 0301 	eor.w	r3, r3, #1
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d13a      	bne.n	8001ca2 <gyro_get_data+0xa2>
		return;

	GYRO_CS_LOW();
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2102      	movs	r1, #2
 8001c30:	481e      	ldr	r0, [pc, #120]	@ (8001cac <gyro_get_data+0xac>)
 8001c32:	f002 ff11 	bl	8004a58 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &tx, 1, 10);
 8001c36:	f107 010f 	add.w	r1, r7, #15
 8001c3a:	230a      	movs	r3, #10
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	481c      	ldr	r0, [pc, #112]	@ (8001cb0 <gyro_get_data+0xb0>)
 8001c40:	f006 fcc7 	bl	80085d2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi5, rx, 6, 10);
 8001c44:	f107 0108 	add.w	r1, r7, #8
 8001c48:	230a      	movs	r3, #10
 8001c4a:	2206      	movs	r2, #6
 8001c4c:	4818      	ldr	r0, [pc, #96]	@ (8001cb0 <gyro_get_data+0xb0>)
 8001c4e:	f006 fe04 	bl	800885a <HAL_SPI_Receive>
	GYRO_CS_HIGH();
 8001c52:	2201      	movs	r2, #1
 8001c54:	2102      	movs	r1, #2
 8001c56:	4815      	ldr	r0, [pc, #84]	@ (8001cac <gyro_get_data+0xac>)
 8001c58:	f002 fefe 	bl	8004a58 <HAL_GPIO_WritePin>

	spi5_release();
 8001c5c:	f001 fab8 	bl	80031d0 <spi5_release>

	gyro_data->x = (int16_t) (rx[1] << 8 | rx[0]);
 8001c60:	7a7b      	ldrb	r3, [r7, #9]
 8001c62:	b21b      	sxth	r3, r3
 8001c64:	021b      	lsls	r3, r3, #8
 8001c66:	b21a      	sxth	r2, r3
 8001c68:	7a3b      	ldrb	r3, [r7, #8]
 8001c6a:	b21b      	sxth	r3, r3
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	b21a      	sxth	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	801a      	strh	r2, [r3, #0]
	gyro_data->y = (int16_t) (rx[3] << 8 | rx[2]);
 8001c74:	7afb      	ldrb	r3, [r7, #11]
 8001c76:	b21b      	sxth	r3, r3
 8001c78:	021b      	lsls	r3, r3, #8
 8001c7a:	b21a      	sxth	r2, r3
 8001c7c:	7abb      	ldrb	r3, [r7, #10]
 8001c7e:	b21b      	sxth	r3, r3
 8001c80:	4313      	orrs	r3, r2
 8001c82:	b21a      	sxth	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	805a      	strh	r2, [r3, #2]
	gyro_data->z = (int16_t) (rx[5] << 8 | rx[4]);
 8001c88:	7b7b      	ldrb	r3, [r7, #13]
 8001c8a:	b21b      	sxth	r3, r3
 8001c8c:	021b      	lsls	r3, r3, #8
 8001c8e:	b21a      	sxth	r2, r3
 8001c90:	7b3b      	ldrb	r3, [r7, #12]
 8001c92:	b21b      	sxth	r3, r3
 8001c94:	4313      	orrs	r3, r2
 8001c96:	b21a      	sxth	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	809a      	strh	r2, [r3, #4]
 8001c9c:	e002      	b.n	8001ca4 <gyro_get_data+0xa4>
		return;
 8001c9e:	bf00      	nop
 8001ca0:	e000      	b.n	8001ca4 <gyro_get_data+0xa4>
		return;
 8001ca2:	bf00      	nop

}
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40020800 	.word	0x40020800
 8001cb0:	20025f10 	.word	0x20025f10

08001cb4 <gyro_is_data_ready>:

bool gyro_is_data_ready(void) {
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
	uint8_t tx = STATUS_REG | 0x80;
 8001cba:	23a7      	movs	r3, #167	@ 0xa7
 8001cbc:	71fb      	strb	r3, [r7, #7]
	uint8_t rx = 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	71bb      	strb	r3, [r7, #6]

	if (!spi5_acquire())
 8001cc2:	f001 fa71 	bl	80031a8 <spi5_acquire>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f083 0301 	eor.w	r3, r3, #1
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <gyro_is_data_ready+0x22>
		return false;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	e01f      	b.n	8001d16 <gyro_is_data_ready+0x62>

	GYRO_CS_LOW();
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2102      	movs	r1, #2
 8001cda:	4811      	ldr	r0, [pc, #68]	@ (8001d20 <gyro_is_data_ready+0x6c>)
 8001cdc:	f002 febc 	bl	8004a58 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &tx, 1, 10);
 8001ce0:	1df9      	adds	r1, r7, #7
 8001ce2:	230a      	movs	r3, #10
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	480f      	ldr	r0, [pc, #60]	@ (8001d24 <gyro_is_data_ready+0x70>)
 8001ce8:	f006 fc73 	bl	80085d2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi5, &rx, 1, 10);
 8001cec:	1db9      	adds	r1, r7, #6
 8001cee:	230a      	movs	r3, #10
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	480c      	ldr	r0, [pc, #48]	@ (8001d24 <gyro_is_data_ready+0x70>)
 8001cf4:	f006 fdb1 	bl	800885a <HAL_SPI_Receive>
	GYRO_CS_HIGH();
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	2102      	movs	r1, #2
 8001cfc:	4808      	ldr	r0, [pc, #32]	@ (8001d20 <gyro_is_data_ready+0x6c>)
 8001cfe:	f002 feab 	bl	8004a58 <HAL_GPIO_WritePin>

	spi5_release();
 8001d02:	f001 fa65 	bl	80031d0 <spi5_release>

	return (rx & 0x08);
 8001d06:	79bb      	ldrb	r3, [r7, #6]
 8001d08:	f003 0308 	and.w	r3, r3, #8
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	bf14      	ite	ne
 8001d10:	2301      	movne	r3, #1
 8001d12:	2300      	moveq	r3, #0
 8001d14:	b2db      	uxtb	r3, r3
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40020800 	.word	0x40020800
 8001d24:	20025f10 	.word	0x20025f10

08001d28 <gyro_calculate_offset>:

void gyro_calculate_offset(Gyro_Int_Data *offset) {
 8001d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d2c:	b098      	sub	sp, #96	@ 0x60
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6378      	str	r0, [r7, #52]	@ 0x34
	int64_t sum_x = 0, sum_y = 0, sum_z = 0;
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	f04f 0300 	mov.w	r3, #0
 8001d3a:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	f04f 0300 	mov.w	r3, #0
 8001d52:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	const uint16_t samples = 1000;
 8001d56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d5a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
	Gyro_Int_Data raw_data;

	printf("Starting calibration...\r\n");
 8001d5e:	484f      	ldr	r0, [pc, #316]	@ (8001e9c <gyro_calculate_offset+0x174>)
 8001d60:	f00f fbfa 	bl	8011558 <puts>

	for (uint16_t i = 0; i < samples; i++) {
 8001d64:	2300      	movs	r3, #0
 8001d66:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8001d6a:	e04e      	b.n	8001e0a <gyro_calculate_offset+0xe2>
		gyro_get_data(&raw_data);
 8001d6c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff45 	bl	8001c00 <gyro_get_data>
		sum_x += raw_data.x;
 8001d76:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001d7a:	b21b      	sxth	r3, r3
 8001d7c:	17da      	asrs	r2, r3, #31
 8001d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001d86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d88:	1851      	adds	r1, r2, r1
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001d8e:	414b      	adcs	r3, r1
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d96:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
		sum_y += raw_data.y;
 8001d9a:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8001d9e:	b21b      	sxth	r3, r3
 8001da0:	17da      	asrs	r2, r3, #31
 8001da2:	469a      	mov	sl, r3
 8001da4:	4693      	mov	fp, r2
 8001da6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001daa:	eb12 010a 	adds.w	r1, r2, sl
 8001dae:	6039      	str	r1, [r7, #0]
 8001db0:	eb43 030b 	adc.w	r3, r3, fp
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001dba:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		sum_z += raw_data.z;
 8001dbe:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8001dc2:	b21b      	sxth	r3, r3
 8001dc4:	17da      	asrs	r2, r3, #31
 8001dc6:	461c      	mov	r4, r3
 8001dc8:	4615      	mov	r5, r2
 8001dca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001dce:	eb12 0804 	adds.w	r8, r2, r4
 8001dd2:	eb43 0905 	adc.w	r9, r3, r5
 8001dd6:	e9c7 8912 	strd	r8, r9, [r7, #72]	@ 0x48
		HAL_Delay(10);
 8001dda:	200a      	movs	r0, #10
 8001ddc:	f001 fe12 	bl	8003a04 <HAL_Delay>

		if (i % 100 == 0)
 8001de0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8001de4:	4b2e      	ldr	r3, [pc, #184]	@ (8001ea0 <gyro_calculate_offset+0x178>)
 8001de6:	fba3 2301 	umull	r2, r3, r3, r1
 8001dea:	095a      	lsrs	r2, r3, #5
 8001dec:	2364      	movs	r3, #100	@ 0x64
 8001dee:	fb02 f303 	mul.w	r3, r2, r3
 8001df2:	1acb      	subs	r3, r1, r3
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d102      	bne.n	8001e00 <gyro_calculate_offset+0xd8>
			printf(".\r\n");
 8001dfa:	482a      	ldr	r0, [pc, #168]	@ (8001ea4 <gyro_calculate_offset+0x17c>)
 8001dfc:	f00f fbac 	bl	8011558 <puts>
	for (uint16_t i = 0; i < samples; i++) {
 8001e00:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001e04:	3301      	adds	r3, #1
 8001e06:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8001e0a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8001e0e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d3aa      	bcc.n	8001d6c <gyro_calculate_offset+0x44>
	}

	offset->x = sum_x / samples;
 8001e16:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	623b      	str	r3, [r7, #32]
 8001e1e:	627a      	str	r2, [r7, #36]	@ 0x24
 8001e20:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e24:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001e28:	f7fe fece 	bl	8000bc8 <__aeabi_ldivmod>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	b212      	sxth	r2, r2
 8001e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e34:	801a      	strh	r2, [r3, #0]
	offset->y = sum_y / samples;
 8001e36:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	61bb      	str	r3, [r7, #24]
 8001e3e:	61fa      	str	r2, [r7, #28]
 8001e40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e44:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001e48:	f7fe febe 	bl	8000bc8 <__aeabi_ldivmod>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	b212      	sxth	r2, r2
 8001e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e54:	805a      	strh	r2, [r3, #2]
	offset->z = sum_z / samples;
 8001e56:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	617a      	str	r2, [r7, #20]
 8001e60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e64:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001e68:	f7fe feae 	bl	8000bc8 <__aeabi_ldivmod>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	b212      	sxth	r2, r2
 8001e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e74:	809a      	strh	r2, [r3, #4]

	printf("\nCalibration complete. Offsets: X=%d, Y=%d, Z=%d\r\n", offset->x,
 8001e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e7c:	4619      	mov	r1, r3
			offset->y, offset->z);
 8001e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e80:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	printf("\nCalibration complete. Offsets: X=%d, Y=%d, Z=%d\r\n", offset->x,
 8001e84:	461a      	mov	r2, r3
			offset->y, offset->z);
 8001e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e88:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	printf("\nCalibration complete. Offsets: X=%d, Y=%d, Z=%d\r\n", offset->x,
 8001e8c:	4806      	ldr	r0, [pc, #24]	@ (8001ea8 <gyro_calculate_offset+0x180>)
 8001e8e:	f00f fafb 	bl	8011488 <iprintf>
}
 8001e92:	bf00      	nop
 8001e94:	3760      	adds	r7, #96	@ 0x60
 8001e96:	46bd      	mov	sp, r7
 8001e98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e9c:	08013364 	.word	0x08013364
 8001ea0:	51eb851f 	.word	0x51eb851f
 8001ea4:	08013380 	.word	0x08013380
 8001ea8:	08013384 	.word	0x08013384

08001eac <gyro_compensate_and_scale>:

void gyro_compensate_and_scale(Gyro_Int_Data *gyro_data, Gyro_Int_Data *offset, Gyro_Int_Data *gyro_calibrated_dat) {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]

	// uwzględenienie kalibracji
	gyro_data->x -= offset->x;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	b21a      	sxth	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	801a      	strh	r2, [r3, #0]
	gyro_data->y -= offset->y;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	b21a      	sxth	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	805a      	strh	r2, [r3, #2]
	gyro_data->z -= offset->z;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	b21a      	sxth	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	809a      	strh	r2, [r3, #4]

	float scale = 1.0f;
 8001f06:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001f0a:	617b      	str	r3, [r7, #20]

	if (SENSITIVITY == 0x30)
		scale = 2000.0f / 32768.0f;
 8001f0c:	4b24      	ldr	r3, [pc, #144]	@ (8001fa0 <gyro_compensate_and_scale+0xf4>)
 8001f0e:	617b      	str	r3, [r7, #20]

	if (SENSITIVITY == 0x00)
		scale = 250.0f / 32768.0f;

	// Konwersja do dps (dla skali 2000dps)
	gyro_calibrated_dat->x = gyro_data->x * scale;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f16:	ee07 3a90 	vmov	s15, r3
 8001f1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f2a:	ee17 3a90 	vmov	r3, s15
 8001f2e:	b21a      	sxth	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	801a      	strh	r2, [r3, #0]
	gyro_calibrated_dat->y = gyro_data->y * scale;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f3a:	ee07 3a90 	vmov	s15, r3
 8001f3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f42:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f4e:	ee17 3a90 	vmov	r3, s15
 8001f52:	b21a      	sxth	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	805a      	strh	r2, [r3, #2]
	gyro_calibrated_dat->z = gyro_data->z * scale;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f5e:	ee07 3a90 	vmov	s15, r3
 8001f62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f66:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f72:	ee17 3a90 	vmov	r3, s15
 8001f76:	b21a      	sxth	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	809a      	strh	r2, [r3, #4]

	printf("X: %d dps, Y: %d dps, Z: %d dps\r\n", gyro_calibrated_dat->x, gyro_calibrated_dat->y, gyro_calibrated_dat->z);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f82:	4619      	mov	r1, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f92:	4804      	ldr	r0, [pc, #16]	@ (8001fa4 <gyro_compensate_and_scale+0xf8>)
 8001f94:	f00f fa78 	bl	8011488 <iprintf>
}
 8001f98:	bf00      	nop
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	3d7a0000 	.word	0x3d7a0000
 8001fa4:	080133b8 	.word	0x080133b8

08001fa8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001fac:	4b1b      	ldr	r3, [pc, #108]	@ (800201c <MX_I2C3_Init+0x74>)
 8001fae:	4a1c      	ldr	r2, [pc, #112]	@ (8002020 <MX_I2C3_Init+0x78>)
 8001fb0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001fb2:	4b1a      	ldr	r3, [pc, #104]	@ (800201c <MX_I2C3_Init+0x74>)
 8001fb4:	4a1b      	ldr	r2, [pc, #108]	@ (8002024 <MX_I2C3_Init+0x7c>)
 8001fb6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fb8:	4b18      	ldr	r3, [pc, #96]	@ (800201c <MX_I2C3_Init+0x74>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001fbe:	4b17      	ldr	r3, [pc, #92]	@ (800201c <MX_I2C3_Init+0x74>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fc4:	4b15      	ldr	r3, [pc, #84]	@ (800201c <MX_I2C3_Init+0x74>)
 8001fc6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001fca:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fcc:	4b13      	ldr	r3, [pc, #76]	@ (800201c <MX_I2C3_Init+0x74>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001fd2:	4b12      	ldr	r3, [pc, #72]	@ (800201c <MX_I2C3_Init+0x74>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fd8:	4b10      	ldr	r3, [pc, #64]	@ (800201c <MX_I2C3_Init+0x74>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fde:	4b0f      	ldr	r3, [pc, #60]	@ (800201c <MX_I2C3_Init+0x74>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001fe4:	480d      	ldr	r0, [pc, #52]	@ (800201c <MX_I2C3_Init+0x74>)
 8001fe6:	f004 fe85 	bl	8006cf4 <HAL_I2C_Init>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001ff0:	f001 f8d4 	bl	800319c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	4809      	ldr	r0, [pc, #36]	@ (800201c <MX_I2C3_Init+0x74>)
 8001ff8:	f004 ffc0 	bl	8006f7c <HAL_I2CEx_ConfigAnalogFilter>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8002002:	f001 f8cb 	bl	800319c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002006:	2100      	movs	r1, #0
 8002008:	4804      	ldr	r0, [pc, #16]	@ (800201c <MX_I2C3_Init+0x74>)
 800200a:	f004 fff3 	bl	8006ff4 <HAL_I2CEx_ConfigDigitalFilter>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002014:	f001 f8c2 	bl	800319c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20000518 	.word	0x20000518
 8002020:	40005c00 	.word	0x40005c00
 8002024:	000186a0 	.word	0x000186a0

08002028 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	@ 0x28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a29      	ldr	r2, [pc, #164]	@ (80020ec <HAL_I2C_MspInit+0xc4>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d14b      	bne.n	80020e2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	4b28      	ldr	r3, [pc, #160]	@ (80020f0 <HAL_I2C_MspInit+0xc8>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002052:	4a27      	ldr	r2, [pc, #156]	@ (80020f0 <HAL_I2C_MspInit+0xc8>)
 8002054:	f043 0304 	orr.w	r3, r3, #4
 8002058:	6313      	str	r3, [r2, #48]	@ 0x30
 800205a:	4b25      	ldr	r3, [pc, #148]	@ (80020f0 <HAL_I2C_MspInit+0xc8>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205e:	f003 0304 	and.w	r3, r3, #4
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	4b21      	ldr	r3, [pc, #132]	@ (80020f0 <HAL_I2C_MspInit+0xc8>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206e:	4a20      	ldr	r2, [pc, #128]	@ (80020f0 <HAL_I2C_MspInit+0xc8>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6313      	str	r3, [r2, #48]	@ 0x30
 8002076:	4b1e      	ldr	r3, [pc, #120]	@ (80020f0 <HAL_I2C_MspInit+0xc8>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002082:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002088:	2312      	movs	r3, #18
 800208a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800208c:	2301      	movs	r3, #1
 800208e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002090:	2300      	movs	r3, #0
 8002092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002094:	2304      	movs	r3, #4
 8002096:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002098:	f107 0314 	add.w	r3, r7, #20
 800209c:	4619      	mov	r1, r3
 800209e:	4815      	ldr	r0, [pc, #84]	@ (80020f4 <HAL_I2C_MspInit+0xcc>)
 80020a0:	f002 fb2e 	bl	8004700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80020a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020aa:	2312      	movs	r3, #18
 80020ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020ae:	2301      	movs	r3, #1
 80020b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b2:	2300      	movs	r3, #0
 80020b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80020b6:	2304      	movs	r3, #4
 80020b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80020ba:	f107 0314 	add.w	r3, r7, #20
 80020be:	4619      	mov	r1, r3
 80020c0:	480d      	ldr	r0, [pc, #52]	@ (80020f8 <HAL_I2C_MspInit+0xd0>)
 80020c2:	f002 fb1d 	bl	8004700 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	4b09      	ldr	r3, [pc, #36]	@ (80020f0 <HAL_I2C_MspInit+0xc8>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ce:	4a08      	ldr	r2, [pc, #32]	@ (80020f0 <HAL_I2C_MspInit+0xc8>)
 80020d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80020d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020d6:	4b06      	ldr	r3, [pc, #24]	@ (80020f0 <HAL_I2C_MspInit+0xc8>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80020e2:	bf00      	nop
 80020e4:	3728      	adds	r7, #40	@ 0x28
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40005c00 	.word	0x40005c00
 80020f0:	40023800 	.word	0x40023800
 80020f4:	40020800 	.word	0x40020800
 80020f8:	40020000 	.word	0x40020000

080020fc <lcd_cmd>:
		CMD(COLMOD), 0x05, // chosen 16-bit, R5, G6, B5
		CMD(MAC), 0x48, //in documentation this means BGR but it turned out to be RGB, also it set (0,0) to up left corner
		CMD(POS_GAMMA_COR), 0x1F, 0x1A, 0x18, 0x0A, 0x0F, 0x06, 0x45, 0x87, 0x32, 0x0A, 0x07, 0x02, 0x07, 0x05, 0x00,
		CMD(NEG_GAMMA_COR), 0x00, 0x25, 0x27, 0x05, 0x10, 0x09, 0x3A, 0x56, 0x4C, 0x05, 0x0D, 0x0C, 0x2E, 0x2F, 0x0F,
};
static void lcd_cmd(uint8_t cmd){
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	71fb      	strb	r3, [r7, #7]

	if (!spi5_acquire()) return;  // SPI jest zajęte, zwróć
 8002106:	f001 f84f 	bl	80031a8 <spi5_acquire>
 800210a:	4603      	mov	r3, r0
 800210c:	f083 0301 	eor.w	r3, r3, #1
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d119      	bne.n	800214a <lcd_cmd+0x4e>

	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_RESET); //teraz komendy
 8002116:	2200      	movs	r2, #0
 8002118:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800211c:	480d      	ldr	r0, [pc, #52]	@ (8002154 <lcd_cmd+0x58>)
 800211e:	f002 fc9b 	bl	8004a58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 8002122:	2200      	movs	r2, #0
 8002124:	2104      	movs	r1, #4
 8002126:	480c      	ldr	r0, [pc, #48]	@ (8002158 <lcd_cmd+0x5c>)
 8002128:	f002 fc96 	bl	8004a58 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &cmd, 1, HAL_MAX_DELAY);
 800212c:	1df9      	adds	r1, r7, #7
 800212e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002132:	2201      	movs	r2, #1
 8002134:	4809      	ldr	r0, [pc, #36]	@ (800215c <lcd_cmd+0x60>)
 8002136:	f006 fa4c 	bl	80085d2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_SET);
 800213a:	2201      	movs	r2, #1
 800213c:	2104      	movs	r1, #4
 800213e:	4806      	ldr	r0, [pc, #24]	@ (8002158 <lcd_cmd+0x5c>)
 8002140:	f002 fc8a 	bl	8004a58 <HAL_GPIO_WritePin>

	spi5_release();
 8002144:	f001 f844 	bl	80031d0 <spi5_release>
 8002148:	e000      	b.n	800214c <lcd_cmd+0x50>
	if (!spi5_acquire()) return;  // SPI jest zajęte, zwróć
 800214a:	bf00      	nop

}
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40020c00 	.word	0x40020c00
 8002158:	40020800 	.word	0x40020800
 800215c:	20025f10 	.word	0x20025f10

08002160 <lcd_data>:
static void lcd_data(uint8_t data){
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_SET); //teraz dane
 800216a:	2201      	movs	r2, #1
 800216c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002170:	480b      	ldr	r0, [pc, #44]	@ (80021a0 <lcd_data+0x40>)
 8002172:	f002 fc71 	bl	8004a58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 8002176:	2200      	movs	r2, #0
 8002178:	2104      	movs	r1, #4
 800217a:	480a      	ldr	r0, [pc, #40]	@ (80021a4 <lcd_data+0x44>)
 800217c:	f002 fc6c 	bl	8004a58 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &data, 1, HAL_MAX_DELAY);
 8002180:	1df9      	adds	r1, r7, #7
 8002182:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002186:	2201      	movs	r2, #1
 8002188:	4807      	ldr	r0, [pc, #28]	@ (80021a8 <lcd_data+0x48>)
 800218a:	f006 fa22 	bl	80085d2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_SET);
 800218e:	2201      	movs	r2, #1
 8002190:	2104      	movs	r1, #4
 8002192:	4804      	ldr	r0, [pc, #16]	@ (80021a4 <lcd_data+0x44>)
 8002194:	f002 fc60 	bl	8004a58 <HAL_GPIO_WritePin>
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40020c00 	.word	0x40020c00
 80021a4:	40020800 	.word	0x40020800
 80021a8:	20025f10 	.word	0x20025f10

080021ac <lcd_data16>:
static void lcd_data16(uint16_t value){
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 80021b6:	88fb      	ldrh	r3, [r7, #6]
 80021b8:	0a1b      	lsrs	r3, r3, #8
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff ffce 	bl	8002160 <lcd_data>
	lcd_data(value);
 80021c4:	88fb      	ldrh	r3, [r7, #6]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ffc9 	bl	8002160 <lcd_data>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <lcd_send>:
static void lcd_send(uint16_t value){
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	4603      	mov	r3, r0
 80021de:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 80021e0:	88fb      	ldrh	r3, [r7, #6]
 80021e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d005      	beq.n	80021f6 <lcd_send+0x20>
		lcd_cmd(value);
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff ff84 	bl	80020fc <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 80021f4:	e004      	b.n	8002200 <lcd_send+0x2a>
		lcd_data(value);
 80021f6:	88fb      	ldrh	r3, [r7, #6]
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff ffb0 	bl	8002160 <lcd_data>
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <lcd_init>:
void lcd_init(void){
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
  chunk_size = (LCD_HEIGHT * LCD_WIDTH) / how_many_chunks;
 800220e:	4b23      	ldr	r3, [pc, #140]	@ (800229c <lcd_init+0x94>)
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	461a      	mov	r2, r3
 8002214:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8002218:	fb93 f3f2 	sdiv	r3, r3, r2
 800221c:	b29a      	uxth	r2, r3
 800221e:	4b20      	ldr	r3, [pc, #128]	@ (80022a0 <lcd_init+0x98>)
 8002220:	801a      	strh	r2, [r3, #0]
  y_per_chunk = LCD_HEIGHT / how_many_chunks;
 8002222:	4b1e      	ldr	r3, [pc, #120]	@ (800229c <lcd_init+0x94>)
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800222c:	fb93 f3f2 	sdiv	r3, r3, r2
 8002230:	b29a      	uxth	r2, r3
 8002232:	4b1c      	ldr	r3, [pc, #112]	@ (80022a4 <lcd_init+0x9c>)
 8002234:	801a      	strh	r2, [r3, #0]

  int i;
  HAL_GPIO_WritePin(RDX_GPIO_Port, RDX_Pin, GPIO_PIN_RESET);
 8002236:	2200      	movs	r2, #0
 8002238:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800223c:	481a      	ldr	r0, [pc, #104]	@ (80022a8 <lcd_init+0xa0>)
 800223e:	f002 fc0b 	bl	8004a58 <HAL_GPIO_WritePin>
  HAL_Delay(100); // w nocie 10 mikro sec
 8002242:	2064      	movs	r0, #100	@ 0x64
 8002244:	f001 fbde 	bl	8003a04 <HAL_Delay>
  HAL_GPIO_WritePin(RDX_GPIO_Port, RDX_Pin, GPIO_PIN_SET);
 8002248:	2201      	movs	r2, #1
 800224a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800224e:	4816      	ldr	r0, [pc, #88]	@ (80022a8 <lcd_init+0xa0>)
 8002250:	f002 fc02 	bl	8004a58 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8002254:	2064      	movs	r0, #100	@ 0x64
 8002256:	f001 fbd5 	bl	8003a04 <HAL_Delay>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 800225a:	2300      	movs	r3, #0
 800225c:	607b      	str	r3, [r7, #4]
 800225e:	e009      	b.n	8002274 <lcd_init+0x6c>
    lcd_send(init_table[i]);
 8002260:	4a12      	ldr	r2, [pc, #72]	@ (80022ac <lcd_init+0xa4>)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ffb4 	bl	80021d6 <lcd_send>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3301      	adds	r3, #1
 8002272:	607b      	str	r3, [r7, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b35      	cmp	r3, #53	@ 0x35
 8002278:	d9f2      	bls.n	8002260 <lcd_init+0x58>
  }
  HAL_Delay(200);
 800227a:	20c8      	movs	r0, #200	@ 0xc8
 800227c:	f001 fbc2 	bl	8003a04 <HAL_Delay>
  lcd_cmd(SLEEP_OUT);
 8002280:	2011      	movs	r0, #17
 8002282:	f7ff ff3b 	bl	80020fc <lcd_cmd>
  HAL_Delay(120);
 8002286:	2078      	movs	r0, #120	@ 0x78
 8002288:	f001 fbbc 	bl	8003a04 <HAL_Delay>
  lcd_cmd(DISPLAY_ON);
 800228c:	2029      	movs	r0, #41	@ 0x29
 800228e:	f7ff ff35 	bl	80020fc <lcd_cmd>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000002 	.word	0x20000002
 80022a0:	20025d6e 	.word	0x20025d6e
 80022a4:	20025d70 	.word	0x20025d70
 80022a8:	40020c00 	.word	0x40020c00
 80022ac:	08013420 	.word	0x08013420

080022b0 <lcd_set_window>:

static void lcd_set_window(int x, int y, int width, int height){
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	603b      	str	r3, [r7, #0]
	lcd_cmd(COL_ADR_SET);
 80022be:	202a      	movs	r0, #42	@ 0x2a
 80022c0:	f7ff ff1c 	bl	80020fc <lcd_cmd>
	lcd_data16(x);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff ff6f 	bl	80021ac <lcd_data16>
	lcd_data16(x+width-1);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	4413      	add	r3, r2
 80022d8:	b29b      	uxth	r3, r3
 80022da:	3b01      	subs	r3, #1
 80022dc:	b29b      	uxth	r3, r3
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff ff64 	bl	80021ac <lcd_data16>
	lcd_cmd(PAGE_ADR_SET);
 80022e4:	202b      	movs	r0, #43	@ 0x2b
 80022e6:	f7ff ff09 	bl	80020fc <lcd_cmd>
	lcd_data16(y);
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff ff5c 	bl	80021ac <lcd_data16>
	lcd_data16(y+height-1);
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	4413      	add	r3, r2
 80022fe:	b29b      	uxth	r3, r3
 8002300:	3b01      	subs	r3, #1
 8002302:	b29b      	uxth	r3, r3
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff51 	bl	80021ac <lcd_data16>
}
 800230a:	bf00      	nop
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
	...

08002314 <lcd_set_rectangle>:
void lcd_set_rectangle(uint16_t idx,int x,int y,int width,int height,uint16_t color){
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	607a      	str	r2, [r7, #4]
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	4603      	mov	r3, r0
 8002322:	81fb      	strh	r3, [r7, #14]
	rects[idx].x = x;
 8002324:	89fa      	ldrh	r2, [r7, #14]
 8002326:	491b      	ldr	r1, [pc, #108]	@ (8002394 <lcd_set_rectangle+0x80>)
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	601a      	str	r2, [r3, #0]
	rects[idx].y = y;
 8002336:	89fa      	ldrh	r2, [r7, #14]
 8002338:	4916      	ldr	r1, [pc, #88]	@ (8002394 <lcd_set_rectangle+0x80>)
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	440b      	add	r3, r1
 8002344:	3304      	adds	r3, #4
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	601a      	str	r2, [r3, #0]
	rects[idx].width = width;
 800234a:	89fa      	ldrh	r2, [r7, #14]
 800234c:	4911      	ldr	r1, [pc, #68]	@ (8002394 <lcd_set_rectangle+0x80>)
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	3308      	adds	r3, #8
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	601a      	str	r2, [r3, #0]
	rects[idx].height = height;
 800235e:	89fa      	ldrh	r2, [r7, #14]
 8002360:	490c      	ldr	r1, [pc, #48]	@ (8002394 <lcd_set_rectangle+0x80>)
 8002362:	4613      	mov	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	330c      	adds	r3, #12
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	601a      	str	r2, [r3, #0]
	rects[idx].color = color;
 8002372:	89fa      	ldrh	r2, [r7, #14]
 8002374:	4907      	ldr	r1, [pc, #28]	@ (8002394 <lcd_set_rectangle+0x80>)
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	3310      	adds	r3, #16
 8002382:	8bba      	ldrh	r2, [r7, #28]
 8002384:	801a      	strh	r2, [r3, #0]
}
 8002386:	bf00      	nop
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	20025d74 	.word	0x20025d74

08002398 <lcd_set_circle>:
void lcd_set_circle(int x,int y,int radius,uint16_t color){
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
 80023a4:	807b      	strh	r3, [r7, #2]
	player.x = x;
 80023a6:	4a09      	ldr	r2, [pc, #36]	@ (80023cc <lcd_set_circle+0x34>)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6013      	str	r3, [r2, #0]
	player.y = y;
 80023ac:	4a07      	ldr	r2, [pc, #28]	@ (80023cc <lcd_set_circle+0x34>)
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	6053      	str	r3, [r2, #4]
	player.r = radius;
 80023b2:	4a06      	ldr	r2, [pc, #24]	@ (80023cc <lcd_set_circle+0x34>)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6093      	str	r3, [r2, #8]
	player.color = color;
 80023b8:	4a04      	ldr	r2, [pc, #16]	@ (80023cc <lcd_set_circle+0x34>)
 80023ba:	887b      	ldrh	r3, [r7, #2]
 80023bc:	8193      	strh	r3, [r2, #12]
}
 80023be:	bf00      	nop
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	20025e3c 	.word	0x20025e3c

080023d0 <send_circle>:
static void send_circle(uint16_t circle_color){
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	80fb      	strh	r3, [r7, #6]
	lcd_set_window(player.x - player.r, player.y-player.r, 2*player.r,2*player.r);
 80023da:	4b36      	ldr	r3, [pc, #216]	@ (80024b4 <send_circle+0xe4>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	4b35      	ldr	r3, [pc, #212]	@ (80024b4 <send_circle+0xe4>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	1ad0      	subs	r0, r2, r3
 80023e4:	4b33      	ldr	r3, [pc, #204]	@ (80024b4 <send_circle+0xe4>)
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	4b32      	ldr	r3, [pc, #200]	@ (80024b4 <send_circle+0xe4>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	1ad1      	subs	r1, r2, r3
 80023ee:	4b31      	ldr	r3, [pc, #196]	@ (80024b4 <send_circle+0xe4>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	005a      	lsls	r2, r3, #1
 80023f4:	4b2f      	ldr	r3, [pc, #188]	@ (80024b4 <send_circle+0xe4>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	f7ff ff59 	bl	80022b0 <lcd_set_window>
	lcd_cmd(MEM_WRITE);
 80023fe:	202c      	movs	r0, #44	@ 0x2c
 8002400:	f7ff fe7c 	bl	80020fc <lcd_cmd>
	if(!spi5_acquire())return;
 8002404:	f000 fed0 	bl	80031a8 <spi5_acquire>
 8002408:	4603      	mov	r3, r0
 800240a:	f083 0301 	eor.w	r3, r3, #1
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d14b      	bne.n	80024ac <send_circle+0xdc>
	for(int y=player.y-player.r;y<player.y+player.r;y++){
 8002414:	4b27      	ldr	r3, [pc, #156]	@ (80024b4 <send_circle+0xe4>)
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	4b26      	ldr	r3, [pc, #152]	@ (80024b4 <send_circle+0xe4>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	e039      	b.n	8002496 <send_circle+0xc6>
		for(int x=player.x-player.r;x<player.x+player.r;x++){
 8002422:	4b24      	ldr	r3, [pc, #144]	@ (80024b4 <send_circle+0xe4>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	4b23      	ldr	r3, [pc, #140]	@ (80024b4 <send_circle+0xe4>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	e027      	b.n	8002480 <send_circle+0xb0>
			if( ( (x-player.x)*(x-player.x)+(y-player.y)*(y-player.y)) <= (player.r*player.r)){
 8002430:	4b20      	ldr	r3, [pc, #128]	@ (80024b4 <send_circle+0xe4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	4a1e      	ldr	r2, [pc, #120]	@ (80024b4 <send_circle+0xe4>)
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	68b9      	ldr	r1, [r7, #8]
 800243e:	1a8a      	subs	r2, r1, r2
 8002440:	fb03 f202 	mul.w	r2, r3, r2
 8002444:	4b1b      	ldr	r3, [pc, #108]	@ (80024b4 <send_circle+0xe4>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	68f9      	ldr	r1, [r7, #12]
 800244a:	1acb      	subs	r3, r1, r3
 800244c:	4919      	ldr	r1, [pc, #100]	@ (80024b4 <send_circle+0xe4>)
 800244e:	6849      	ldr	r1, [r1, #4]
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	1a41      	subs	r1, r0, r1
 8002454:	fb01 f303 	mul.w	r3, r1, r3
 8002458:	441a      	add	r2, r3
 800245a:	4b16      	ldr	r3, [pc, #88]	@ (80024b4 <send_circle+0xe4>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	4915      	ldr	r1, [pc, #84]	@ (80024b4 <send_circle+0xe4>)
 8002460:	6889      	ldr	r1, [r1, #8]
 8002462:	fb01 f303 	mul.w	r3, r1, r3
 8002466:	429a      	cmp	r2, r3
 8002468:	dc04      	bgt.n	8002474 <send_circle+0xa4>
				lcd_data16(circle_color);
 800246a:	88fb      	ldrh	r3, [r7, #6]
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff fe9d 	bl	80021ac <lcd_data16>
 8002472:	e002      	b.n	800247a <send_circle+0xaa>
			} else{
				lcd_data16(BACKGROUND); // zle
 8002474:	201f      	movs	r0, #31
 8002476:	f7ff fe99 	bl	80021ac <lcd_data16>
		for(int x=player.x-player.r;x<player.x+player.r;x++){
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	3301      	adds	r3, #1
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	4b0c      	ldr	r3, [pc, #48]	@ (80024b4 <send_circle+0xe4>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4b0b      	ldr	r3, [pc, #44]	@ (80024b4 <send_circle+0xe4>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	4413      	add	r3, r2
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	429a      	cmp	r2, r3
 800248e:	dbcf      	blt.n	8002430 <send_circle+0x60>
	for(int y=player.y-player.r;y<player.y+player.r;y++){
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	3301      	adds	r3, #1
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	4b07      	ldr	r3, [pc, #28]	@ (80024b4 <send_circle+0xe4>)
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	4b06      	ldr	r3, [pc, #24]	@ (80024b4 <send_circle+0xe4>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	4413      	add	r3, r2
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	dbbd      	blt.n	8002422 <send_circle+0x52>
			}
		}
	}
	spi5_release();
 80024a6:	f000 fe93 	bl	80031d0 <spi5_release>
 80024aa:	e000      	b.n	80024ae <send_circle+0xde>
	if(!spi5_acquire())return;
 80024ac:	bf00      	nop
}
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20025e3c 	.word	0x20025e3c

080024b8 <clear_former_horizontal>:
//
//	HAL_SPI_Transmit_DMA(&hspi5, (uint8_t*)circle_buffer, 2*4*player.r*player.r);
//
//	spi5_release();
//}
static void clear_former_horizontal(Circle former){
 80024b8:	b590      	push	{r4, r7, lr}
 80024ba:	b08b      	sub	sp, #44	@ 0x2c
 80024bc:	af00      	add	r7, sp, #0
 80024be:	463c      	mov	r4, r7
 80024c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int min_y,max_y;

	if(former.y-former.r < player.y - player.r){
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	1ad2      	subs	r2, r2, r3
 80024ca:	4b29      	ldr	r3, [pc, #164]	@ (8002570 <clear_former_horizontal+0xb8>)
 80024cc:	6859      	ldr	r1, [r3, #4]
 80024ce:	4b28      	ldr	r3, [pc, #160]	@ (8002570 <clear_former_horizontal+0xb8>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	1acb      	subs	r3, r1, r3
 80024d4:	429a      	cmp	r2, r3
 80024d6:	da0a      	bge.n	80024ee <clear_former_horizontal+0x36>
		min_y = former.y-former.r;
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	627b      	str	r3, [r7, #36]	@ 0x24
		max_y = player.y-player.r;
 80024e0:	4b23      	ldr	r3, [pc, #140]	@ (8002570 <clear_former_horizontal+0xb8>)
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	4b22      	ldr	r3, [pc, #136]	@ (8002570 <clear_former_horizontal+0xb8>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	623b      	str	r3, [r7, #32]
 80024ec:	e009      	b.n	8002502 <clear_former_horizontal+0x4a>
	} else{
		min_y = player.y+player.r;
 80024ee:	4b20      	ldr	r3, [pc, #128]	@ (8002570 <clear_former_horizontal+0xb8>)
 80024f0:	685a      	ldr	r2, [r3, #4]
 80024f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002570 <clear_former_horizontal+0xb8>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	4413      	add	r3, r2
 80024f8:	627b      	str	r3, [r7, #36]	@ 0x24
		max_y = former.y+former.r;
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	4413      	add	r3, r2
 8002500:	623b      	str	r3, [r7, #32]
	}

	int height = max_y-min_y;
 8002502:	6a3a      	ldr	r2, [r7, #32]
 8002504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	61fb      	str	r3, [r7, #28]
	int d_wh = 2*former.r;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	617b      	str	r3, [r7, #20]
	if(height>d_wh)height=d_wh;
 8002510:	69fa      	ldr	r2, [r7, #28]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	429a      	cmp	r2, r3
 8002516:	dd01      	ble.n	800251c <clear_former_horizontal+0x64>
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	61fb      	str	r3, [r7, #28]

	lcd_set_window(former.x-former.r, min_y, d_wh, height);
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	1ad0      	subs	r0, r2, r3
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002528:	f7ff fec2 	bl	80022b0 <lcd_set_window>
	lcd_cmd(MEM_WRITE);
 800252c:	202c      	movs	r0, #44	@ 0x2c
 800252e:	f7ff fde5 	bl	80020fc <lcd_cmd>
	if(!spi5_acquire()){return;}
 8002532:	f000 fe39 	bl	80031a8 <spi5_acquire>
 8002536:	4603      	mov	r3, r0
 8002538:	f083 0301 	eor.w	r3, r3, #1
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d112      	bne.n	8002568 <clear_former_horizontal+0xb0>
	for(int i=0;i<d_wh*height;i++){
 8002542:	2300      	movs	r3, #0
 8002544:	61bb      	str	r3, [r7, #24]
 8002546:	e005      	b.n	8002554 <clear_former_horizontal+0x9c>
		lcd_data16(BACKGROUND);
 8002548:	201f      	movs	r0, #31
 800254a:	f7ff fe2f 	bl	80021ac <lcd_data16>
	for(int i=0;i<d_wh*height;i++){
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	3301      	adds	r3, #1
 8002552:	61bb      	str	r3, [r7, #24]
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	69fa      	ldr	r2, [r7, #28]
 8002558:	fb02 f303 	mul.w	r3, r2, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	429a      	cmp	r2, r3
 8002560:	dbf2      	blt.n	8002548 <clear_former_horizontal+0x90>
	}
	spi5_release();
 8002562:	f000 fe35 	bl	80031d0 <spi5_release>
 8002566:	e000      	b.n	800256a <clear_former_horizontal+0xb2>
	if(!spi5_acquire()){return;}
 8002568:	bf00      	nop
}
 800256a:	372c      	adds	r7, #44	@ 0x2c
 800256c:	46bd      	mov	sp, r7
 800256e:	bd90      	pop	{r4, r7, pc}
 8002570:	20025e3c 	.word	0x20025e3c

08002574 <clear_former_vertical>:
static void clear_former_vertical(Circle former){
 8002574:	b590      	push	{r4, r7, lr}
 8002576:	b08b      	sub	sp, #44	@ 0x2c
 8002578:	af00      	add	r7, sp, #0
 800257a:	463c      	mov	r4, r7
 800257c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int min_x,max_x;

	if(former.x-former.r < player.x - player.r){
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	1ad2      	subs	r2, r2, r3
 8002586:	4b2a      	ldr	r3, [pc, #168]	@ (8002630 <clear_former_vertical+0xbc>)
 8002588:	6819      	ldr	r1, [r3, #0]
 800258a:	4b29      	ldr	r3, [pc, #164]	@ (8002630 <clear_former_vertical+0xbc>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	1acb      	subs	r3, r1, r3
 8002590:	429a      	cmp	r2, r3
 8002592:	da0a      	bge.n	80025aa <clear_former_vertical+0x36>
		min_x = former.x-former.r;
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	627b      	str	r3, [r7, #36]	@ 0x24
		max_x = player.x-player.r;
 800259c:	4b24      	ldr	r3, [pc, #144]	@ (8002630 <clear_former_vertical+0xbc>)
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	4b23      	ldr	r3, [pc, #140]	@ (8002630 <clear_former_vertical+0xbc>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	623b      	str	r3, [r7, #32]
 80025a8:	e009      	b.n	80025be <clear_former_vertical+0x4a>
	} else{
		min_x = player.x+player.r;
 80025aa:	4b21      	ldr	r3, [pc, #132]	@ (8002630 <clear_former_vertical+0xbc>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	4b20      	ldr	r3, [pc, #128]	@ (8002630 <clear_former_vertical+0xbc>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	4413      	add	r3, r2
 80025b4:	627b      	str	r3, [r7, #36]	@ 0x24
		max_x = former.x+former.r;
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	4413      	add	r3, r2
 80025bc:	623b      	str	r3, [r7, #32]
	}

	int width = max_x-min_x;
 80025be:	6a3a      	ldr	r2, [r7, #32]
 80025c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	61fb      	str	r3, [r7, #28]
	int d_wh = 2*former.r;
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	617b      	str	r3, [r7, #20]
	if(width>d_wh)width=2*d_wh;
 80025cc:	69fa      	ldr	r2, [r7, #28]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	dd02      	ble.n	80025da <clear_former_vertical+0x66>
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	61fb      	str	r3, [r7, #28]

	lcd_set_window(min_x, former.y-former.r, width, d_wh);
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	1ad1      	subs	r1, r2, r3
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	69fa      	ldr	r2, [r7, #28]
 80025e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80025e6:	f7ff fe63 	bl	80022b0 <lcd_set_window>
	lcd_cmd(MEM_WRITE);
 80025ea:	202c      	movs	r0, #44	@ 0x2c
 80025ec:	f7ff fd86 	bl	80020fc <lcd_cmd>
	if(!spi5_acquire()){return;}
 80025f0:	f000 fdda 	bl	80031a8 <spi5_acquire>
 80025f4:	4603      	mov	r3, r0
 80025f6:	f083 0301 	eor.w	r3, r3, #1
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d112      	bne.n	8002626 <clear_former_vertical+0xb2>
	for(int i=0;i<d_wh*width;i++){
 8002600:	2300      	movs	r3, #0
 8002602:	61bb      	str	r3, [r7, #24]
 8002604:	e005      	b.n	8002612 <clear_former_vertical+0x9e>
		lcd_data16(BACKGROUND);
 8002606:	201f      	movs	r0, #31
 8002608:	f7ff fdd0 	bl	80021ac <lcd_data16>
	for(int i=0;i<d_wh*width;i++){
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	3301      	adds	r3, #1
 8002610:	61bb      	str	r3, [r7, #24]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	69fa      	ldr	r2, [r7, #28]
 8002616:	fb02 f303 	mul.w	r3, r2, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	429a      	cmp	r2, r3
 800261e:	dbf2      	blt.n	8002606 <clear_former_vertical+0x92>
	}
	spi5_release();
 8002620:	f000 fdd6 	bl	80031d0 <spi5_release>
 8002624:	e000      	b.n	8002628 <clear_former_vertical+0xb4>
	if(!spi5_acquire()){return;}
 8002626:	bf00      	nop
}
 8002628:	372c      	adds	r7, #44	@ 0x2c
 800262a:	46bd      	mov	sp, r7
 800262c:	bd90      	pop	{r4, r7, pc}
 800262e:	bf00      	nop
 8002630:	20025e3c 	.word	0x20025e3c

08002634 <clear_former_circle>:
static void clear_former_circle(Circle former){
 8002634:	b590      	push	{r4, r7, lr}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	463c      	mov	r4, r7
 800263c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	clear_former_horizontal(former);
 8002640:	463b      	mov	r3, r7
 8002642:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002644:	f7ff ff38 	bl	80024b8 <clear_former_horizontal>
	clear_former_vertical(former);
 8002648:	463b      	mov	r3, r7
 800264a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800264c:	f7ff ff92 	bl	8002574 <clear_former_vertical>
}
 8002650:	bf00      	nop
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	bd90      	pop	{r4, r7, pc}

08002658 <lcd_delta_circle>:
void lcd_delta_circle(int dx,int dy,int dradius){
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
	player.x += dx;
 8002664:	4b2c      	ldr	r3, [pc, #176]	@ (8002718 <lcd_delta_circle+0xc0>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4413      	add	r3, r2
 800266c:	4a2a      	ldr	r2, [pc, #168]	@ (8002718 <lcd_delta_circle+0xc0>)
 800266e:	6013      	str	r3, [r2, #0]
	player.y += dy;
 8002670:	4b29      	ldr	r3, [pc, #164]	@ (8002718 <lcd_delta_circle+0xc0>)
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	4413      	add	r3, r2
 8002678:	4a27      	ldr	r2, [pc, #156]	@ (8002718 <lcd_delta_circle+0xc0>)
 800267a:	6053      	str	r3, [r2, #4]
	player.r += dradius;
 800267c:	4b26      	ldr	r3, [pc, #152]	@ (8002718 <lcd_delta_circle+0xc0>)
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4413      	add	r3, r2
 8002684:	4a24      	ldr	r2, [pc, #144]	@ (8002718 <lcd_delta_circle+0xc0>)
 8002686:	6093      	str	r3, [r2, #8]



	if(player.r<0 || player.r > LCD_WIDTH/6 || player.r>LCD_HEIGHT/6)player.r = 5;
 8002688:	4b23      	ldr	r3, [pc, #140]	@ (8002718 <lcd_delta_circle+0xc0>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	db07      	blt.n	80026a0 <lcd_delta_circle+0x48>
 8002690:	4b21      	ldr	r3, [pc, #132]	@ (8002718 <lcd_delta_circle+0xc0>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	2b28      	cmp	r3, #40	@ 0x28
 8002696:	dc03      	bgt.n	80026a0 <lcd_delta_circle+0x48>
 8002698:	4b1f      	ldr	r3, [pc, #124]	@ (8002718 <lcd_delta_circle+0xc0>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	2b35      	cmp	r3, #53	@ 0x35
 800269e:	dd02      	ble.n	80026a6 <lcd_delta_circle+0x4e>
 80026a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002718 <lcd_delta_circle+0xc0>)
 80026a2:	2205      	movs	r2, #5
 80026a4:	609a      	str	r2, [r3, #8]

	if (player.x-player.r < 0) player.x = player.r;
 80026a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002718 <lcd_delta_circle+0xc0>)
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002718 <lcd_delta_circle+0xc0>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	da04      	bge.n	80026be <lcd_delta_circle+0x66>
 80026b4:	4b18      	ldr	r3, [pc, #96]	@ (8002718 <lcd_delta_circle+0xc0>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	4a17      	ldr	r2, [pc, #92]	@ (8002718 <lcd_delta_circle+0xc0>)
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	e00c      	b.n	80026d8 <lcd_delta_circle+0x80>
	else if (player.x+player.r > LCD_WIDTH) player.x = LCD_WIDTH-player.r;
 80026be:	4b16      	ldr	r3, [pc, #88]	@ (8002718 <lcd_delta_circle+0xc0>)
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	4b15      	ldr	r3, [pc, #84]	@ (8002718 <lcd_delta_circle+0xc0>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	4413      	add	r3, r2
 80026c8:	2bf0      	cmp	r3, #240	@ 0xf0
 80026ca:	dd05      	ble.n	80026d8 <lcd_delta_circle+0x80>
 80026cc:	4b12      	ldr	r3, [pc, #72]	@ (8002718 <lcd_delta_circle+0xc0>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80026d4:	4a10      	ldr	r2, [pc, #64]	@ (8002718 <lcd_delta_circle+0xc0>)
 80026d6:	6013      	str	r3, [r2, #0]
	if (player.y-player.r < 0) player.y = player.r;
 80026d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002718 <lcd_delta_circle+0xc0>)
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002718 <lcd_delta_circle+0xc0>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	da04      	bge.n	80026f0 <lcd_delta_circle+0x98>
 80026e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002718 <lcd_delta_circle+0xc0>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	4a0b      	ldr	r2, [pc, #44]	@ (8002718 <lcd_delta_circle+0xc0>)
 80026ec:	6053      	str	r3, [r2, #4]
	else if (player.y+player.r > LCD_HEIGHT) player.y = LCD_HEIGHT-player.r;
}
 80026ee:	e00d      	b.n	800270c <lcd_delta_circle+0xb4>
	else if (player.y+player.r > LCD_HEIGHT) player.y = LCD_HEIGHT-player.r;
 80026f0:	4b09      	ldr	r3, [pc, #36]	@ (8002718 <lcd_delta_circle+0xc0>)
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	4b08      	ldr	r3, [pc, #32]	@ (8002718 <lcd_delta_circle+0xc0>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	4413      	add	r3, r2
 80026fa:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80026fe:	dd05      	ble.n	800270c <lcd_delta_circle+0xb4>
 8002700:	4b05      	ldr	r3, [pc, #20]	@ (8002718 <lcd_delta_circle+0xc0>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8002708:	4a03      	ldr	r2, [pc, #12]	@ (8002718 <lcd_delta_circle+0xc0>)
 800270a:	6053      	str	r3, [r2, #4]
}
 800270c:	bf00      	nop
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	20025e3c 	.word	0x20025e3c

0800271c <lcd_update_circle>:
void lcd_update_circle(int dx,int dy,int dradius){
 800271c:	b590      	push	{r4, r7, lr}
 800271e:	b089      	sub	sp, #36	@ 0x24
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
	Circle former = player;
 8002728:	4b0f      	ldr	r3, [pc, #60]	@ (8002768 <lcd_update_circle+0x4c>)
 800272a:	f107 0410 	add.w	r4, r7, #16
 800272e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002730:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	lcd_delta_circle(dx, dy, dradius);
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	68b9      	ldr	r1, [r7, #8]
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f7ff ff8d 	bl	8002658 <lcd_delta_circle>
	if(dx!=0 ||  dy!=0)clear_former_circle(former);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d102      	bne.n	800274a <lcd_update_circle+0x2e>
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d004      	beq.n	8002754 <lcd_update_circle+0x38>
 800274a:	f107 0310 	add.w	r3, r7, #16
 800274e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002750:	f7ff ff70 	bl	8002634 <clear_former_circle>
	send_circle(player.color);
 8002754:	4b04      	ldr	r3, [pc, #16]	@ (8002768 <lcd_update_circle+0x4c>)
 8002756:	899b      	ldrh	r3, [r3, #12]
 8002758:	b29b      	uxth	r3, r3
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fe38 	bl	80023d0 <send_circle>
	//	send_circle_buffer();
}
 8002760:	bf00      	nop
 8002762:	3724      	adds	r7, #36	@ 0x24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd90      	pop	{r4, r7, pc}
 8002768:	20025e3c 	.word	0x20025e3c

0800276c <lcd_put_pixel>:
void lcd_put_pixel(int x, int y, uint16_t color){
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	4613      	mov	r3, r2
 8002778:	80fb      	strh	r3, [r7, #6]
	screen_buffer[ (LCD_WIDTH*y) + x] = __REV16(color); //to make send most significant bit first
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	ba5b      	rev16	r3, r3
 8002782:	613b      	str	r3, [r7, #16]
  return result;
 8002784:	6939      	ldr	r1, [r7, #16]
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	4613      	mov	r3, r2
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	1a9b      	subs	r3, r3, r2
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	461a      	mov	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	4413      	add	r3, r2
 8002796:	b289      	uxth	r1, r1
 8002798:	4a04      	ldr	r2, [pc, #16]	@ (80027ac <lcd_put_pixel+0x40>)
 800279a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 800279e:	bf00      	nop
 80027a0:	371c      	adds	r7, #28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	2000056c 	.word	0x2000056c

080027b0 <lcd_put_rect_to_buffer>:
static void lcd_put_rect_to_buffer(Rectangle rect){
 80027b0:	b084      	sub	sp, #16
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	f107 0c10 	add.w	ip, r7, #16
 80027bc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for(int y=rect.y;y<rect.y+rect.height;y++){
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	607b      	str	r3, [r7, #4]
 80027c4:	e021      	b.n	800280a <lcd_put_rect_to_buffer+0x5a>
		for(int x=rect.x;x<rect.x+rect.width;x++){
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	603b      	str	r3, [r7, #0]
 80027ca:	e015      	b.n	80027f8 <lcd_put_rect_to_buffer+0x48>
			if(x>=0 && x<LCD_WIDTH && y>=0 && y<LCD_HEIGHT){
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	db0f      	blt.n	80027f2 <lcd_put_rect_to_buffer+0x42>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	2bef      	cmp	r3, #239	@ 0xef
 80027d6:	dc0c      	bgt.n	80027f2 <lcd_put_rect_to_buffer+0x42>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	db09      	blt.n	80027f2 <lcd_put_rect_to_buffer+0x42>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80027e4:	da05      	bge.n	80027f2 <lcd_put_rect_to_buffer+0x42>
				lcd_put_pixel(x, y, rect.color);
 80027e6:	8c3b      	ldrh	r3, [r7, #32]
 80027e8:	461a      	mov	r2, r3
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	6838      	ldr	r0, [r7, #0]
 80027ee:	f7ff ffbd 	bl	800276c <lcd_put_pixel>
		for(int x=rect.x;x<rect.x+rect.width;x++){
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	3301      	adds	r3, #1
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	4413      	add	r3, r2
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	429a      	cmp	r2, r3
 8002802:	dbe3      	blt.n	80027cc <lcd_put_rect_to_buffer+0x1c>
	for(int y=rect.y;y<rect.y+rect.height;y++){
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3301      	adds	r3, #1
 8002808:	607b      	str	r3, [r7, #4]
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	4413      	add	r3, r2
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	429a      	cmp	r2, r3
 8002814:	dbd7      	blt.n	80027c6 <lcd_put_rect_to_buffer+0x16>
			}
		}
	}
}
 8002816:	bf00      	nop
 8002818:	bf00      	nop
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002822:	b004      	add	sp, #16
 8002824:	4770      	bx	lr

08002826 <lcd_put_circ_to_buffer>:
static void lcd_put_circ_to_buffer(Circle circle){
 8002826:	b590      	push	{r4, r7, lr}
 8002828:	b087      	sub	sp, #28
 800282a:	af00      	add	r7, sp, #0
 800282c:	463c      	mov	r4, r7
 800282e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for(int y=circle.y-circle.r;y<circle.y+circle.r;y++){
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	e03a      	b.n	80028b2 <lcd_put_circ_to_buffer+0x8c>
		for(int x=circle.x-circle.r;x<circle.x+circle.r;x++){
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	613b      	str	r3, [r7, #16]
 8002844:	e02c      	b.n	80028a0 <lcd_put_circ_to_buffer+0x7a>
			if(x>=0 && x<LCD_WIDTH && y>=0 && y<LCD_HEIGHT){
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	2b00      	cmp	r3, #0
 800284a:	db26      	blt.n	800289a <lcd_put_circ_to_buffer+0x74>
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	2bef      	cmp	r3, #239	@ 0xef
 8002850:	dc23      	bgt.n	800289a <lcd_put_circ_to_buffer+0x74>
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2b00      	cmp	r3, #0
 8002856:	db20      	blt.n	800289a <lcd_put_circ_to_buffer+0x74>
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800285e:	da1c      	bge.n	800289a <lcd_put_circ_to_buffer+0x74>
				if( ( (x-circle.x)*(x-circle.x)+(y-circle.y)*(y-circle.y)) <= (circle.r*circle.r)){
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	6939      	ldr	r1, [r7, #16]
 800286a:	1a8a      	subs	r2, r1, r2
 800286c:	fb03 f202 	mul.w	r2, r3, r2
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6979      	ldr	r1, [r7, #20]
 8002874:	1acb      	subs	r3, r1, r3
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	6978      	ldr	r0, [r7, #20]
 800287a:	1a41      	subs	r1, r0, r1
 800287c:	fb01 f303 	mul.w	r3, r1, r3
 8002880:	441a      	add	r2, r3
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	68b9      	ldr	r1, [r7, #8]
 8002886:	fb01 f303 	mul.w	r3, r1, r3
 800288a:	429a      	cmp	r2, r3
 800288c:	dc05      	bgt.n	800289a <lcd_put_circ_to_buffer+0x74>
					lcd_put_pixel(x, y, circle.color);
 800288e:	89bb      	ldrh	r3, [r7, #12]
 8002890:	461a      	mov	r2, r3
 8002892:	6979      	ldr	r1, [r7, #20]
 8002894:	6938      	ldr	r0, [r7, #16]
 8002896:	f7ff ff69 	bl	800276c <lcd_put_pixel>
		for(int x=circle.x-circle.r;x<circle.x+circle.r;x++){
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	3301      	adds	r3, #1
 800289e:	613b      	str	r3, [r7, #16]
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	4413      	add	r3, r2
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	dbcc      	blt.n	8002846 <lcd_put_circ_to_buffer+0x20>
	for(int y=circle.y-circle.r;y<circle.y+circle.r;y++){
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	3301      	adds	r3, #1
 80028b0:	617b      	str	r3, [r7, #20]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	4413      	add	r3, r2
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	dbbe      	blt.n	800283c <lcd_put_circ_to_buffer+0x16>
				}
			}
		}
	}
}
 80028be:	bf00      	nop
 80028c0:	bf00      	nop
 80028c2:	371c      	adds	r7, #28
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd90      	pop	{r4, r7, pc}

080028c8 <put_figures_to_buffer>:
static void put_figures_to_buffer(void){
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af02      	add	r7, sp, #8
	for(int i=0; i<LCD_WIDTH*LCD_HEIGHT;i++) {
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	e00d      	b.n	80028f0 <put_figures_to_buffer+0x28>
 80028d4:	231f      	movs	r3, #31
 80028d6:	607b      	str	r3, [r7, #4]
  __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	ba5b      	rev16	r3, r3
 80028dc:	603b      	str	r3, [r7, #0]
  return result;
 80028de:	683b      	ldr	r3, [r7, #0]
		screen_buffer[i] = __REV16(BLUE);
 80028e0:	b299      	uxth	r1, r3
 80028e2:	4a14      	ldr	r2, [pc, #80]	@ (8002934 <put_figures_to_buffer+0x6c>)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0; i<LCD_WIDTH*LCD_HEIGHT;i++) {
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	3301      	adds	r3, #1
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80028f6:	dbed      	blt.n	80028d4 <put_figures_to_buffer+0xc>
	}

	for(int i=0;i<RECTS_AMOUNT;i++){
 80028f8:	2300      	movs	r3, #0
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	e00e      	b.n	800291c <put_figures_to_buffer+0x54>
		lcd_put_rect_to_buffer(rects[i]);
 80028fe:	490e      	ldr	r1, [pc, #56]	@ (8002938 <put_figures_to_buffer+0x70>)
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	691a      	ldr	r2, [r3, #16]
 800290e:	9200      	str	r2, [sp, #0]
 8002910:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002912:	f7ff ff4d 	bl	80027b0 <lcd_put_rect_to_buffer>
	for(int i=0;i<RECTS_AMOUNT;i++){
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	3301      	adds	r3, #1
 800291a:	60bb      	str	r3, [r7, #8]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b09      	cmp	r3, #9
 8002920:	dded      	ble.n	80028fe <put_figures_to_buffer+0x36>
	}
	lcd_put_circ_to_buffer(player);
 8002922:	4b06      	ldr	r3, [pc, #24]	@ (800293c <put_figures_to_buffer+0x74>)
 8002924:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002926:	f7ff ff7e 	bl	8002826 <lcd_put_circ_to_buffer>
}
 800292a:	bf00      	nop
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	2000056c 	.word	0x2000056c
 8002938:	20025d74 	.word	0x20025d74
 800293c:	20025e3c 	.word	0x20025e3c

08002940 <lcd_update>:

void lcd_update(void){
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
	put_figures_to_buffer();
 8002944:	f7ff ffc0 	bl	80028c8 <put_figures_to_buffer>

	current_chunk = 0;
 8002948:	4b20      	ldr	r3, [pc, #128]	@ (80029cc <lcd_update+0x8c>)
 800294a:	2200      	movs	r2, #0
 800294c:	801a      	strh	r2, [r3, #0]
	lcd_set_window(0, current_chunk*y_per_chunk, LCD_WIDTH, LCD_HEIGHT/how_many_chunks);
 800294e:	4b1f      	ldr	r3, [pc, #124]	@ (80029cc <lcd_update+0x8c>)
 8002950:	881b      	ldrh	r3, [r3, #0]
 8002952:	461a      	mov	r2, r3
 8002954:	4b1e      	ldr	r3, [pc, #120]	@ (80029d0 <lcd_update+0x90>)
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	fb03 f102 	mul.w	r1, r3, r2
 800295c:	4b1d      	ldr	r3, [pc, #116]	@ (80029d4 <lcd_update+0x94>)
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	461a      	mov	r2, r3
 8002962:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002966:	fb93 f3f2 	sdiv	r3, r3, r2
 800296a:	22f0      	movs	r2, #240	@ 0xf0
 800296c:	2000      	movs	r0, #0
 800296e:	f7ff fc9f 	bl	80022b0 <lcd_set_window>
	lcd_cmd(MEM_WRITE);
 8002972:	202c      	movs	r0, #44	@ 0x2c
 8002974:	f7ff fbc2 	bl	80020fc <lcd_cmd>
	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_SET);
 8002978:	2201      	movs	r2, #1
 800297a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800297e:	4816      	ldr	r0, [pc, #88]	@ (80029d8 <lcd_update+0x98>)
 8002980:	f002 f86a 	bl	8004a58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 8002984:	2200      	movs	r2, #0
 8002986:	2104      	movs	r1, #4
 8002988:	4814      	ldr	r0, [pc, #80]	@ (80029dc <lcd_update+0x9c>)
 800298a:	f002 f865 	bl	8004a58 <HAL_GPIO_WritePin>

	if (!spi5_acquire()) return;
 800298e:	f000 fc0b 	bl	80031a8 <spi5_acquire>
 8002992:	4603      	mov	r3, r0
 8002994:	f083 0301 	eor.w	r3, r3, #1
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d114      	bne.n	80029c8 <lcd_update+0x88>

	HAL_SPI_Transmit_DMA(&hspi5, (uint8_t*)(screen_buffer + (current_chunk * chunk_size)), 2*chunk_size);
 800299e:	4b0b      	ldr	r3, [pc, #44]	@ (80029cc <lcd_update+0x8c>)
 80029a0:	881b      	ldrh	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	4b0e      	ldr	r3, [pc, #56]	@ (80029e0 <lcd_update+0xa0>)
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	fb02 f303 	mul.w	r3, r2, r3
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	4a0d      	ldr	r2, [pc, #52]	@ (80029e4 <lcd_update+0xa4>)
 80029b0:	1899      	adds	r1, r3, r2
 80029b2:	4b0b      	ldr	r3, [pc, #44]	@ (80029e0 <lcd_update+0xa0>)
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	461a      	mov	r2, r3
 80029bc:	480a      	ldr	r0, [pc, #40]	@ (80029e8 <lcd_update+0xa8>)
 80029be:	f006 fa0f 	bl	8008de0 <HAL_SPI_Transmit_DMA>

	spi5_release();
 80029c2:	f000 fc05 	bl	80031d0 <spi5_release>
 80029c6:	e000      	b.n	80029ca <lcd_update+0x8a>
	if (!spi5_acquire()) return;
 80029c8:	bf00      	nop
}
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	20025d6c 	.word	0x20025d6c
 80029d0:	20025d70 	.word	0x20025d70
 80029d4:	20000002 	.word	0x20000002
 80029d8:	40020c00 	.word	0x40020c00
 80029dc:	40020800 	.word	0x40020800
 80029e0:	20025d6e 	.word	0x20025d6e
 80029e4:	2000056c 	.word	0x2000056c
 80029e8:	20025f10 	.word	0x20025f10

080029ec <lcd_transfer_done>:
void lcd_transfer_done(void){
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_SET);
 80029f0:	2201      	movs	r2, #1
 80029f2:	2104      	movs	r1, #4
 80029f4:	4802      	ldr	r0, [pc, #8]	@ (8002a00 <lcd_transfer_done+0x14>)
 80029f6:	f002 f82f 	bl	8004a58 <HAL_GPIO_WritePin>
}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40020800 	.word	0x40020800

08002a04 <send_next_chunk>:
bool lcd_is_busy(void){
	if (HAL_SPI_GetState(&hspi5) == HAL_SPI_STATE_BUSY) return true;
	else return false;
}
static void send_next_chunk(void){
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
	lcd_set_window(0, current_chunk*y_per_chunk, LCD_WIDTH, LCD_HEIGHT/how_many_chunks);
 8002a08:	4b20      	ldr	r3, [pc, #128]	@ (8002a8c <send_next_chunk+0x88>)
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4b20      	ldr	r3, [pc, #128]	@ (8002a90 <send_next_chunk+0x8c>)
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	fb03 f102 	mul.w	r1, r3, r2
 8002a16:	4b1f      	ldr	r3, [pc, #124]	@ (8002a94 <send_next_chunk+0x90>)
 8002a18:	881b      	ldrh	r3, [r3, #0]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002a20:	fb93 f3f2 	sdiv	r3, r3, r2
 8002a24:	22f0      	movs	r2, #240	@ 0xf0
 8002a26:	2000      	movs	r0, #0
 8002a28:	f7ff fc42 	bl	80022b0 <lcd_set_window>
	lcd_cmd(MEM_WRITE);
 8002a2c:	202c      	movs	r0, #44	@ 0x2c
 8002a2e:	f7ff fb65 	bl	80020fc <lcd_cmd>
	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_SET);
 8002a32:	2201      	movs	r2, #1
 8002a34:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a38:	4817      	ldr	r0, [pc, #92]	@ (8002a98 <send_next_chunk+0x94>)
 8002a3a:	f002 f80d 	bl	8004a58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2104      	movs	r1, #4
 8002a42:	4816      	ldr	r0, [pc, #88]	@ (8002a9c <send_next_chunk+0x98>)
 8002a44:	f002 f808 	bl	8004a58 <HAL_GPIO_WritePin>
	lcd_ready = false;
 8002a48:	4b15      	ldr	r3, [pc, #84]	@ (8002aa0 <send_next_chunk+0x9c>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	701a      	strb	r2, [r3, #0]
	if (!spi5_acquire()) return;
 8002a4e:	f000 fbab 	bl	80031a8 <spi5_acquire>
 8002a52:	4603      	mov	r3, r0
 8002a54:	f083 0301 	eor.w	r3, r3, #1
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d114      	bne.n	8002a88 <send_next_chunk+0x84>
	HAL_SPI_Transmit_DMA(&hspi5, (uint8_t*)(screen_buffer + (current_chunk * chunk_size)), 2*chunk_size);
 8002a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a8c <send_next_chunk+0x88>)
 8002a60:	881b      	ldrh	r3, [r3, #0]
 8002a62:	461a      	mov	r2, r3
 8002a64:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa4 <send_next_chunk+0xa0>)
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	fb02 f303 	mul.w	r3, r2, r3
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	4a0e      	ldr	r2, [pc, #56]	@ (8002aa8 <send_next_chunk+0xa4>)
 8002a70:	1899      	adds	r1, r3, r2
 8002a72:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa4 <send_next_chunk+0xa0>)
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	480b      	ldr	r0, [pc, #44]	@ (8002aac <send_next_chunk+0xa8>)
 8002a7e:	f006 f9af 	bl	8008de0 <HAL_SPI_Transmit_DMA>

	spi5_release();
 8002a82:	f000 fba5 	bl	80031d0 <spi5_release>
 8002a86:	e000      	b.n	8002a8a <send_next_chunk+0x86>
	if (!spi5_acquire()) return;
 8002a88:	bf00      	nop
}
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	20025d6c 	.word	0x20025d6c
 8002a90:	20025d70 	.word	0x20025d70
 8002a94:	20000002 	.word	0x20000002
 8002a98:	40020c00 	.word	0x40020c00
 8002a9c:	40020800 	.word	0x40020800
 8002aa0:	20000004 	.word	0x20000004
 8002aa4:	20025d6e 	.word	0x20025d6e
 8002aa8:	2000056c 	.word	0x2000056c
 8002aac:	20025f10 	.word	0x20025f10

08002ab0 <go_for_next_chunk>:
void go_for_next_chunk(void){
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
	current_chunk++;
 8002ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae0 <go_for_next_chunk+0x30>)
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	4b08      	ldr	r3, [pc, #32]	@ (8002ae0 <go_for_next_chunk+0x30>)
 8002abe:	801a      	strh	r2, [r3, #0]
	if (current_chunk < how_many_chunks) {
 8002ac0:	4b07      	ldr	r3, [pc, #28]	@ (8002ae0 <go_for_next_chunk+0x30>)
 8002ac2:	881a      	ldrh	r2, [r3, #0]
 8002ac4:	4b07      	ldr	r3, [pc, #28]	@ (8002ae4 <go_for_next_chunk+0x34>)
 8002ac6:	881b      	ldrh	r3, [r3, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d202      	bcs.n	8002ad2 <go_for_next_chunk+0x22>
		send_next_chunk();
 8002acc:	f7ff ff9a 	bl	8002a04 <send_next_chunk>
	}
	else {
		lcd_ready=true;
		lcd_transfer_done();
	}
}
 8002ad0:	e004      	b.n	8002adc <go_for_next_chunk+0x2c>
		lcd_ready=true;
 8002ad2:	4b05      	ldr	r3, [pc, #20]	@ (8002ae8 <go_for_next_chunk+0x38>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	701a      	strb	r2, [r3, #0]
		lcd_transfer_done();
 8002ad8:	f7ff ff88 	bl	80029ec <lcd_transfer_done>
}
 8002adc:	bf00      	nop
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	20025d6c 	.word	0x20025d6c
 8002ae4:	20000002 	.word	0x20000002
 8002ae8:	20000004 	.word	0x20000004

08002aec <lcd_change_ball_color>:
void lcd_change_ball_color(uint16_t speed_x, uint16_t speed_y){
 8002aec:	b480      	push	{r7}
 8002aee:	b089      	sub	sp, #36	@ 0x24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	460a      	mov	r2, r1
 8002af6:	80fb      	strh	r3, [r7, #6]
 8002af8:	4613      	mov	r3, r2
 8002afa:	80bb      	strh	r3, [r7, #4]
	uint32_t speed_sq = speed_x * speed_x + speed_y * speed_y;
 8002afc:	88fb      	ldrh	r3, [r7, #6]
 8002afe:	88fa      	ldrh	r2, [r7, #6]
 8002b00:	fb03 f202 	mul.w	r2, r3, r2
 8002b04:	88bb      	ldrh	r3, [r7, #4]
 8002b06:	88b9      	ldrh	r1, [r7, #4]
 8002b08:	fb01 f303 	mul.w	r3, r1, r3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	61fb      	str	r3, [r7, #28]
	uint32_t sq_max_speed = max_speed*max_speed;
 8002b10:	4b27      	ldr	r3, [pc, #156]	@ (8002bb0 <lcd_change_ball_color+0xc4>)
 8002b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b16:	461a      	mov	r2, r3
 8002b18:	4b25      	ldr	r3, [pc, #148]	@ (8002bb0 <lcd_change_ball_color+0xc4>)
 8002b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b1e:	fb02 f303 	mul.w	r3, r2, r3
 8002b22:	61bb      	str	r3, [r7, #24]
	if (speed_sq > sq_max_speed) {
 8002b24:	69fa      	ldr	r2, [r7, #28]
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d901      	bls.n	8002b30 <lcd_change_ball_color+0x44>
		speed_sq = sq_max_speed;
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	61fb      	str	r3, [r7, #28]
	}
	float ratio = (float)speed_sq/sq_max_speed;
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	ee07 3a90 	vmov	s15, r3
 8002b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	ee07 3a90 	vmov	s15, r3
 8002b40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b48:	edc7 7a05 	vstr	s15, [r7, #20]

	// Kolor startowy: zielony (R=0, G=63, B=0)
	// Kolor docelowy: biały (R=31, G=63, B=31)

	uint8_t red   = (uint8_t)(31 * ratio);
 8002b4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b50:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 8002b54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b5c:	edc7 7a00 	vstr	s15, [r7]
 8002b60:	783b      	ldrb	r3, [r7, #0]
 8002b62:	74fb      	strb	r3, [r7, #19]
	uint8_t green = 63;
 8002b64:	233f      	movs	r3, #63	@ 0x3f
 8002b66:	74bb      	strb	r3, [r7, #18]
	uint8_t blue  = (uint8_t)(31 * ratio);
 8002b68:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b6c:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 8002b70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b78:	edc7 7a00 	vstr	s15, [r7]
 8002b7c:	783b      	ldrb	r3, [r7, #0]
 8002b7e:	747b      	strb	r3, [r7, #17]

	uint16_t color = (red << 11) | (green << 5) | blue;
 8002b80:	7cfb      	ldrb	r3, [r7, #19]
 8002b82:	b21b      	sxth	r3, r3
 8002b84:	02db      	lsls	r3, r3, #11
 8002b86:	b21a      	sxth	r2, r3
 8002b88:	7cbb      	ldrb	r3, [r7, #18]
 8002b8a:	b21b      	sxth	r3, r3
 8002b8c:	015b      	lsls	r3, r3, #5
 8002b8e:	b21b      	sxth	r3, r3
 8002b90:	4313      	orrs	r3, r2
 8002b92:	b21a      	sxth	r2, r3
 8002b94:	7c7b      	ldrb	r3, [r7, #17]
 8002b96:	b21b      	sxth	r3, r3
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	b21b      	sxth	r3, r3
 8002b9c:	81fb      	strh	r3, [r7, #14]
	player.color = color;
 8002b9e:	4a05      	ldr	r2, [pc, #20]	@ (8002bb4 <lcd_change_ball_color+0xc8>)
 8002ba0:	89fb      	ldrh	r3, [r7, #14]
 8002ba2:	8193      	strh	r3, [r2, #12]
}
 8002ba4:	bf00      	nop
 8002ba6:	3724      	adds	r7, #36	@ 0x24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	20000000 	.word	0x20000000
 8002bb4:	20025e3c 	.word	0x20025e3c

08002bb8 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b08e      	sub	sp, #56	@ 0x38
 8002bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002bbe:	1d3b      	adds	r3, r7, #4
 8002bc0:	2234      	movs	r2, #52	@ 0x34
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f00e fda7 	bl	8011718 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002bca:	4b39      	ldr	r3, [pc, #228]	@ (8002cb0 <MX_LTDC_Init+0xf8>)
 8002bcc:	4a39      	ldr	r2, [pc, #228]	@ (8002cb4 <MX_LTDC_Init+0xfc>)
 8002bce:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002bd0:	4b37      	ldr	r3, [pc, #220]	@ (8002cb0 <MX_LTDC_Init+0xf8>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002bd6:	4b36      	ldr	r3, [pc, #216]	@ (8002cb0 <MX_LTDC_Init+0xf8>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002bdc:	4b34      	ldr	r3, [pc, #208]	@ (8002cb0 <MX_LTDC_Init+0xf8>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002be2:	4b33      	ldr	r3, [pc, #204]	@ (8002cb0 <MX_LTDC_Init+0xf8>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8002be8:	4b31      	ldr	r3, [pc, #196]	@ (8002cb0 <MX_LTDC_Init+0xf8>)
 8002bea:	2209      	movs	r2, #9
 8002bec:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8002bee:	4b30      	ldr	r3, [pc, #192]	@ (8002cb0 <MX_LTDC_Init+0xf8>)
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8002bf4:	4b2e      	ldr	r3, [pc, #184]	@ (8002cb0 <MX_LTDC_Init+0xf8>)
 8002bf6:	221d      	movs	r2, #29
 8002bf8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8002bfa:	4b2d      	ldr	r3, [pc, #180]	@ (8002cb0 <MX_LTDC_Init+0xf8>)
 8002bfc:	2203      	movs	r2, #3
 8002bfe:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8002c00:	4b2b      	ldr	r3, [pc, #172]	@ (8002cb0 <MX_LTDC_Init+0xf8>)
 8002c02:	f240 120d 	movw	r2, #269	@ 0x10d
 8002c06:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8002c08:	4b29      	ldr	r3, [pc, #164]	@ (8002cb0 <MX_LTDC_Init+0xf8>)
 8002c0a:	f240 1243 	movw	r2, #323	@ 0x143
 8002c0e:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 8002c10:	4b27      	ldr	r3, [pc, #156]	@ (8002cb0 <MX_LTDC_Init+0xf8>)
 8002c12:	f240 1217 	movw	r2, #279	@ 0x117
 8002c16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 8002c18:	4b25      	ldr	r3, [pc, #148]	@ (8002cb0 <MX_LTDC_Init+0xf8>)
 8002c1a:	f240 1247 	movw	r2, #327	@ 0x147
 8002c1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002c20:	4b23      	ldr	r3, [pc, #140]	@ (8002cb0 <MX_LTDC_Init+0xf8>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002c28:	4b21      	ldr	r3, [pc, #132]	@ (8002cb0 <MX_LTDC_Init+0xf8>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002c30:	4b1f      	ldr	r3, [pc, #124]	@ (8002cb0 <MX_LTDC_Init+0xf8>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002c38:	481d      	ldr	r0, [pc, #116]	@ (8002cb0 <MX_LTDC_Init+0xf8>)
 8002c3a:	f004 fa1b 	bl	8007074 <HAL_LTDC_Init>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8002c44:	f000 faaa 	bl	800319c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8002c4c:	23f0      	movs	r3, #240	@ 0xf0
 8002c4e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8002c54:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002c58:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002c5e:	23ff      	movs	r3, #255	@ 0xff
 8002c60:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002c66:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002c6a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002c6c:	2307      	movs	r3, #7
 8002c6e:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8002c70:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8002c74:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 8002c76:	23f0      	movs	r3, #240	@ 0xf0
 8002c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 8002c7a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002c7e:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002c80:	2300      	movs	r3, #0
 8002c82:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002c86:	2300      	movs	r3, #0
 8002c88:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002c92:	1d3b      	adds	r3, r7, #4
 8002c94:	2200      	movs	r2, #0
 8002c96:	4619      	mov	r1, r3
 8002c98:	4805      	ldr	r0, [pc, #20]	@ (8002cb0 <MX_LTDC_Init+0xf8>)
 8002c9a:	f004 fb7d 	bl	8007398 <HAL_LTDC_ConfigLayer>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8002ca4:	f000 fa7a 	bl	800319c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002ca8:	bf00      	nop
 8002caa:	3738      	adds	r7, #56	@ 0x38
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	20025e4c 	.word	0x20025e4c
 8002cb4:	40016800 	.word	0x40016800

08002cb8 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b09a      	sub	sp, #104	@ 0x68
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	60da      	str	r2, [r3, #12]
 8002cce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cd4:	2230      	movs	r2, #48	@ 0x30
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f00e fd1d 	bl	8011718 <memset>
  if(ltdcHandle->Instance==LTDC)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a85      	ldr	r2, [pc, #532]	@ (8002ef8 <HAL_LTDC_MspInit+0x240>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	f040 8102 	bne.w	8002eee <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002cea:	2308      	movs	r3, #8
 8002cec:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8002cee:	2332      	movs	r3, #50	@ 0x32
 8002cf0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f005 f9ea 	bl	80080d8 <HAL_RCCEx_PeriphCLKConfig>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8002d0a:	f000 fa47 	bl	800319c <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	623b      	str	r3, [r7, #32]
 8002d12:	4b7a      	ldr	r3, [pc, #488]	@ (8002efc <HAL_LTDC_MspInit+0x244>)
 8002d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d16:	4a79      	ldr	r2, [pc, #484]	@ (8002efc <HAL_LTDC_MspInit+0x244>)
 8002d18:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d1e:	4b77      	ldr	r3, [pc, #476]	@ (8002efc <HAL_LTDC_MspInit+0x244>)
 8002d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d22:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d26:	623b      	str	r3, [r7, #32]
 8002d28:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61fb      	str	r3, [r7, #28]
 8002d2e:	4b73      	ldr	r3, [pc, #460]	@ (8002efc <HAL_LTDC_MspInit+0x244>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d32:	4a72      	ldr	r2, [pc, #456]	@ (8002efc <HAL_LTDC_MspInit+0x244>)
 8002d34:	f043 0320 	orr.w	r3, r3, #32
 8002d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d3a:	4b70      	ldr	r3, [pc, #448]	@ (8002efc <HAL_LTDC_MspInit+0x244>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3e:	f003 0320 	and.w	r3, r3, #32
 8002d42:	61fb      	str	r3, [r7, #28]
 8002d44:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	61bb      	str	r3, [r7, #24]
 8002d4a:	4b6c      	ldr	r3, [pc, #432]	@ (8002efc <HAL_LTDC_MspInit+0x244>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4e:	4a6b      	ldr	r2, [pc, #428]	@ (8002efc <HAL_LTDC_MspInit+0x244>)
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d56:	4b69      	ldr	r3, [pc, #420]	@ (8002efc <HAL_LTDC_MspInit+0x244>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	61bb      	str	r3, [r7, #24]
 8002d60:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	617b      	str	r3, [r7, #20]
 8002d66:	4b65      	ldr	r3, [pc, #404]	@ (8002efc <HAL_LTDC_MspInit+0x244>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6a:	4a64      	ldr	r2, [pc, #400]	@ (8002efc <HAL_LTDC_MspInit+0x244>)
 8002d6c:	f043 0302 	orr.w	r3, r3, #2
 8002d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d72:	4b62      	ldr	r3, [pc, #392]	@ (8002efc <HAL_LTDC_MspInit+0x244>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	617b      	str	r3, [r7, #20]
 8002d7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	4b5e      	ldr	r3, [pc, #376]	@ (8002efc <HAL_LTDC_MspInit+0x244>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d86:	4a5d      	ldr	r2, [pc, #372]	@ (8002efc <HAL_LTDC_MspInit+0x244>)
 8002d88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d8e:	4b5b      	ldr	r3, [pc, #364]	@ (8002efc <HAL_LTDC_MspInit+0x244>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	4b57      	ldr	r3, [pc, #348]	@ (8002efc <HAL_LTDC_MspInit+0x244>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da2:	4a56      	ldr	r2, [pc, #344]	@ (8002efc <HAL_LTDC_MspInit+0x244>)
 8002da4:	f043 0304 	orr.w	r3, r3, #4
 8002da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002daa:	4b54      	ldr	r3, [pc, #336]	@ (8002efc <HAL_LTDC_MspInit+0x244>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	4b50      	ldr	r3, [pc, #320]	@ (8002efc <HAL_LTDC_MspInit+0x244>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dbe:	4a4f      	ldr	r2, [pc, #316]	@ (8002efc <HAL_LTDC_MspInit+0x244>)
 8002dc0:	f043 0308 	orr.w	r3, r3, #8
 8002dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dc6:	4b4d      	ldr	r3, [pc, #308]	@ (8002efc <HAL_LTDC_MspInit+0x244>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	60bb      	str	r3, [r7, #8]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002dd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dd6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de0:	2300      	movs	r3, #0
 8002de2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002de4:	230e      	movs	r3, #14
 8002de6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002de8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002dec:	4619      	mov	r1, r3
 8002dee:	4844      	ldr	r0, [pc, #272]	@ (8002f00 <HAL_LTDC_MspInit+0x248>)
 8002df0:	f001 fc86 	bl	8004700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002df4:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002df8:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e02:	2300      	movs	r3, #0
 8002e04:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e06:	230e      	movs	r3, #14
 8002e08:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e0a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e0e:	4619      	mov	r1, r3
 8002e10:	483c      	ldr	r0, [pc, #240]	@ (8002f04 <HAL_LTDC_MspInit+0x24c>)
 8002e12:	f001 fc75 	bl	8004700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002e16:	2303      	movs	r3, #3
 8002e18:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e22:	2300      	movs	r3, #0
 8002e24:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002e26:	2309      	movs	r3, #9
 8002e28:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e2a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4835      	ldr	r0, [pc, #212]	@ (8002f08 <HAL_LTDC_MspInit+0x250>)
 8002e32:	f001 fc65 	bl	8004700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002e36:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002e3a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e44:	2300      	movs	r3, #0
 8002e46:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e48:	230e      	movs	r3, #14
 8002e4a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e4c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e50:	4619      	mov	r1, r3
 8002e52:	482d      	ldr	r0, [pc, #180]	@ (8002f08 <HAL_LTDC_MspInit+0x250>)
 8002e54:	f001 fc54 	bl	8004700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002e58:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002e5c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e66:	2300      	movs	r3, #0
 8002e68:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e6a:	230e      	movs	r3, #14
 8002e6c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e6e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e72:	4619      	mov	r1, r3
 8002e74:	4825      	ldr	r0, [pc, #148]	@ (8002f0c <HAL_LTDC_MspInit+0x254>)
 8002e76:	f001 fc43 	bl	8004700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002e7a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002e7e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e80:	2302      	movs	r3, #2
 8002e82:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e8c:	230e      	movs	r3, #14
 8002e8e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e90:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e94:	4619      	mov	r1, r3
 8002e96:	481e      	ldr	r0, [pc, #120]	@ (8002f10 <HAL_LTDC_MspInit+0x258>)
 8002e98:	f001 fc32 	bl	8004700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2D6_Pin;
 8002e9c:	2348      	movs	r3, #72	@ 0x48
 8002e9e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002eac:	230e      	movs	r3, #14
 8002eae:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002eb0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4817      	ldr	r0, [pc, #92]	@ (8002f14 <HAL_LTDC_MspInit+0x25c>)
 8002eb8:	f001 fc22 	bl	8004700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002ebc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002ec0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002ece:	2309      	movs	r3, #9
 8002ed0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ed2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	480c      	ldr	r0, [pc, #48]	@ (8002f0c <HAL_LTDC_MspInit+0x254>)
 8002eda:	f001 fc11 	bl	8004700 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2105      	movs	r1, #5
 8002ee2:	2058      	movs	r0, #88	@ 0x58
 8002ee4:	f000 fe6a 	bl	8003bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002ee8:	2058      	movs	r0, #88	@ 0x58
 8002eea:	f000 fe83 	bl	8003bf4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8002eee:	bf00      	nop
 8002ef0:	3768      	adds	r7, #104	@ 0x68
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40016800 	.word	0x40016800
 8002efc:	40023800 	.word	0x40023800
 8002f00:	40021400 	.word	0x40021400
 8002f04:	40020000 	.word	0x40020000
 8002f08:	40020400 	.word	0x40020400
 8002f0c:	40021800 	.word	0x40021800
 8002f10:	40020800 	.word	0x40020800
 8002f14:	40020c00 	.word	0x40020c00

08002f18 <HAL_SPI_TxCpltCallback>:
	} else {
		clicked = 0;
	}
}

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi5) {
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a04      	ldr	r2, [pc, #16]	@ (8002f34 <HAL_SPI_TxCpltCallback+0x1c>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d101      	bne.n	8002f2c <HAL_SPI_TxCpltCallback+0x14>
		go_for_next_chunk();
 8002f28:	f7ff fdc2 	bl	8002ab0 <go_for_next_chunk>
	}
}
 8002f2c:	bf00      	nop
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20025f10 	.word	0x20025f10

08002f38 <set_new_figs>:
void set_new_figs(void) {
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af02      	add	r7, sp, #8
	lcd_set_rectangle(0, 100, 0, 50, 100, RED);
 8002f3e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002f42:	9301      	str	r3, [sp, #4]
 8002f44:	2364      	movs	r3, #100	@ 0x64
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	2332      	movs	r3, #50	@ 0x32
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	2164      	movs	r1, #100	@ 0x64
 8002f4e:	2000      	movs	r0, #0
 8002f50:	f7ff f9e0 	bl	8002314 <lcd_set_rectangle>
	lcd_set_rectangle(1, 150, 190, 60, 15, YELLOW);
 8002f54:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002f58:	9301      	str	r3, [sp, #4]
 8002f5a:	230f      	movs	r3, #15
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	233c      	movs	r3, #60	@ 0x3c
 8002f60:	22be      	movs	r2, #190	@ 0xbe
 8002f62:	2196      	movs	r1, #150	@ 0x96
 8002f64:	2001      	movs	r0, #1
 8002f66:	f7ff f9d5 	bl	8002314 <lcd_set_rectangle>
	lcd_set_rectangle(2, 0, 250, 200, 30, RED);
 8002f6a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002f6e:	9301      	str	r3, [sp, #4]
 8002f70:	231e      	movs	r3, #30
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	23c8      	movs	r3, #200	@ 0xc8
 8002f76:	22fa      	movs	r2, #250	@ 0xfa
 8002f78:	2100      	movs	r1, #0
 8002f7a:	2002      	movs	r0, #2
 8002f7c:	f7ff f9ca 	bl	8002314 <lcd_set_rectangle>
	lcd_set_circle(LCD_WIDTH/2, LCD_HEIGHT/2, 10, GREEN);
 8002f80:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002f84:	220a      	movs	r2, #10
 8002f86:	21a0      	movs	r1, #160	@ 0xa0
 8002f88:	2078      	movs	r0, #120	@ 0x78
 8002f8a:	f7ff fa05 	bl	8002398 <lcd_set_circle>
}
 8002f8e:	bf00      	nop
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f9a:	f000 fcf1 	bl	8003980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f9e:	f000 f85f 	bl	8003060 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fa2:	f7fe fbc7 	bl	8001734 <MX_GPIO_Init>
  MX_DMA_Init();
 8002fa6:	f7fe fa21 	bl	80013ec <MX_DMA_Init>
  MX_CRC_Init();
 8002faa:	f7fe f9e9 	bl	8001380 <MX_CRC_Init>
  MX_DMA2D_Init();
 8002fae:	f7fe fa3d 	bl	800142c <MX_DMA2D_Init>
  MX_FMC_Init();
 8002fb2:	f7fe fa95 	bl	80014e0 <MX_FMC_Init>
  MX_I2C3_Init();
 8002fb6:	f7fe fff7 	bl	8001fa8 <MX_I2C3_Init>
  MX_LTDC_Init();
 8002fba:	f7ff fdfd 	bl	8002bb8 <MX_LTDC_Init>
  MX_SPI5_Init();
 8002fbe:	f000 f913 	bl	80031e8 <MX_SPI5_Init>
  MX_TIM1_Init();
 8002fc2:	f000 fb7d 	bl	80036c0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8002fc6:	f000 fc3f 	bl	8003848 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8002fca:	f000 fbc9 	bl	8003760 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	lcd_init();
 8002fce:	f7ff f91b 	bl	8002208 <lcd_init>
	for (int y = 0; y < LCD_HEIGHT; y++) {
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	607b      	str	r3, [r7, #4]
 8002fd6:	e010      	b.n	8002ffa <main+0x66>
		for (int x = 0; x < LCD_WIDTH; x++) {
 8002fd8:	2300      	movs	r3, #0
 8002fda:	603b      	str	r3, [r7, #0]
 8002fdc:	e007      	b.n	8002fee <main+0x5a>
			lcd_put_pixel(x, y, BLUE);
 8002fde:	221f      	movs	r2, #31
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	6838      	ldr	r0, [r7, #0]
 8002fe4:	f7ff fbc2 	bl	800276c <lcd_put_pixel>
		for (int x = 0; x < LCD_WIDTH; x++) {
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	3301      	adds	r3, #1
 8002fec:	603b      	str	r3, [r7, #0]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2bef      	cmp	r3, #239	@ 0xef
 8002ff2:	ddf4      	ble.n	8002fde <main+0x4a>
	for (int y = 0; y < LCD_HEIGHT; y++) {
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	607b      	str	r3, [r7, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003000:	dbea      	blt.n	8002fd8 <main+0x44>
		}
	}
	set_new_figs();
 8003002:	f7ff ff99 	bl	8002f38 <set_new_figs>
	lcd_update();
 8003006:	f7ff fc9b 	bl	8002940 <lcd_update>

	while(!spi5_acquire()){}
 800300a:	bf00      	nop
 800300c:	f000 f8cc 	bl	80031a8 <spi5_acquire>
 8003010:	4603      	mov	r3, r0
 8003012:	f083 0301 	eor.w	r3, r3, #1
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1f7      	bne.n	800300c <main+0x78>
	spi5_release();
 800301c:	f000 f8d8 	bl	80031d0 <spi5_release>


	HAL_Delay(500); //żeby LCD skończył swoje przesyłanie
 8003020:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003024:	f000 fcee 	bl	8003a04 <HAL_Delay>
	gyro_init();
 8003028:	f7fe fcc4 	bl	80019b4 <gyro_init>
	HAL_Delay(2000);
 800302c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003030:	f000 fce8 	bl	8003a04 <HAL_Delay>
	gyro_calculate_offset(&gyro_offset_s);
 8003034:	4808      	ldr	r0, [pc, #32]	@ (8003058 <main+0xc4>)
 8003036:	f7fe fe77 	bl	8001d28 <gyro_calculate_offset>
	HAL_Delay(1000);
 800303a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800303e:	f000 fce1 	bl	8003a04 <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim7);
 8003042:	4806      	ldr	r0, [pc, #24]	@ (800305c <main+0xc8>)
 8003044:	f006 f9a6 	bl	8009394 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8003048:	f7fe fb50 	bl	80016ec <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800304c:	f00a ff10 	bl	800de70 <osKernelStart>
//		gyro_get_filtered_data(&gyro_raw_data_s);
//		gyro_compensate_and_scale(&gyro_raw_data_s, &gyro_offset_s, &gyro_scaled_data_s);
//		ball_set_speed();

//		lcd_update();
		HAL_Delay(100);
 8003050:	2064      	movs	r0, #100	@ 0x64
 8003052:	f000 fcd7 	bl	8003a04 <HAL_Delay>
 8003056:	e7fb      	b.n	8003050 <main+0xbc>
 8003058:	20025f04 	.word	0x20025f04
 800305c:	2002605c 	.word	0x2002605c

08003060 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b094      	sub	sp, #80	@ 0x50
 8003064:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003066:	f107 0320 	add.w	r3, r7, #32
 800306a:	2230      	movs	r2, #48	@ 0x30
 800306c:	2100      	movs	r1, #0
 800306e:	4618      	mov	r0, r3
 8003070:	f00e fb52 	bl	8011718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003074:	f107 030c 	add.w	r3, r7, #12
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	605a      	str	r2, [r3, #4]
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	60da      	str	r2, [r3, #12]
 8003082:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003084:	2300      	movs	r3, #0
 8003086:	60bb      	str	r3, [r7, #8]
 8003088:	4b28      	ldr	r3, [pc, #160]	@ (800312c <SystemClock_Config+0xcc>)
 800308a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308c:	4a27      	ldr	r2, [pc, #156]	@ (800312c <SystemClock_Config+0xcc>)
 800308e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003092:	6413      	str	r3, [r2, #64]	@ 0x40
 8003094:	4b25      	ldr	r3, [pc, #148]	@ (800312c <SystemClock_Config+0xcc>)
 8003096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003098:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80030a0:	2300      	movs	r3, #0
 80030a2:	607b      	str	r3, [r7, #4]
 80030a4:	4b22      	ldr	r3, [pc, #136]	@ (8003130 <SystemClock_Config+0xd0>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80030ac:	4a20      	ldr	r2, [pc, #128]	@ (8003130 <SystemClock_Config+0xd0>)
 80030ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003130 <SystemClock_Config+0xd0>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80030bc:	607b      	str	r3, [r7, #4]
 80030be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80030c0:	2301      	movs	r3, #1
 80030c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030ca:	2302      	movs	r3, #2
 80030cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80030d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80030d4:	2304      	movs	r3, #4
 80030d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80030d8:	2348      	movs	r3, #72	@ 0x48
 80030da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80030dc:	2302      	movs	r3, #2
 80030de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80030e0:	2303      	movs	r3, #3
 80030e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030e4:	f107 0320 	add.w	r3, r7, #32
 80030e8:	4618      	mov	r0, r3
 80030ea:	f004 fb2b 	bl	8007744 <HAL_RCC_OscConfig>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80030f4:	f000 f852 	bl	800319c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030f8:	230f      	movs	r3, #15
 80030fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030fc:	2302      	movs	r3, #2
 80030fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003104:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003108:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800310a:	2300      	movs	r3, #0
 800310c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800310e:	f107 030c 	add.w	r3, r7, #12
 8003112:	2102      	movs	r1, #2
 8003114:	4618      	mov	r0, r3
 8003116:	f004 fd8d 	bl	8007c34 <HAL_RCC_ClockConfig>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003120:	f000 f83c 	bl	800319c <Error_Handler>
  }
}
 8003124:	bf00      	nop
 8003126:	3750      	adds	r7, #80	@ 0x50
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40023800 	.word	0x40023800
 8003130:	40007000 	.word	0x40007000

08003134 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a0f      	ldr	r2, [pc, #60]	@ (8003180 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d102      	bne.n	800314c <HAL_TIM_PeriodElapsedCallback+0x18>
  {
    HAL_IncTick();
 8003146:	f000 fc3d 	bl	80039c4 <HAL_IncTick>

	 ball_set_speed(&speed_x,&speed_y);
	 ball_move(&speed_x,&speed_y);
  }
  /* USER CODE END Callback 1 */
}
 800314a:	e014      	b.n	8003176 <HAL_TIM_PeriodElapsedCallback+0x42>
  else if(htim->Instance == TIM7) {
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a0c      	ldr	r2, [pc, #48]	@ (8003184 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d10f      	bne.n	8003176 <HAL_TIM_PeriodElapsedCallback+0x42>
	 gyro_get_filtered_data(&gyro_raw_data_s);
 8003156:	480c      	ldr	r0, [pc, #48]	@ (8003188 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003158:	f7fe fc84 	bl	8001a64 <gyro_get_filtered_data>
	 gyro_compensate_and_scale(&gyro_raw_data_s, &gyro_offset_s, &gyro_scaled_data_s);
 800315c:	4a0b      	ldr	r2, [pc, #44]	@ (800318c <HAL_TIM_PeriodElapsedCallback+0x58>)
 800315e:	490c      	ldr	r1, [pc, #48]	@ (8003190 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003160:	4809      	ldr	r0, [pc, #36]	@ (8003188 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003162:	f7fe fea3 	bl	8001eac <gyro_compensate_and_scale>
	 ball_set_speed(&speed_x,&speed_y);
 8003166:	490b      	ldr	r1, [pc, #44]	@ (8003194 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003168:	480b      	ldr	r0, [pc, #44]	@ (8003198 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800316a:	f7fd ff15 	bl	8000f98 <ball_set_speed>
	 ball_move(&speed_x,&speed_y);
 800316e:	4909      	ldr	r1, [pc, #36]	@ (8003194 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003170:	4809      	ldr	r0, [pc, #36]	@ (8003198 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003172:	f7fe f805 	bl	8001180 <ball_move>
}
 8003176:	bf00      	nop
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40001000 	.word	0x40001000
 8003184:	40001400 	.word	0x40001400
 8003188:	20025ef4 	.word	0x20025ef4
 800318c:	20025efc 	.word	0x20025efc
 8003190:	20025f04 	.word	0x20025f04
 8003194:	20025f0c 	.word	0x20025f0c
 8003198:	20025f0a 	.word	0x20025f0a

0800319c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031a0:	b672      	cpsid	i
}
 80031a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80031a4:	bf00      	nop
 80031a6:	e7fd      	b.n	80031a4 <Error_Handler+0x8>

080031a8 <spi5_acquire>:
/* USER CODE BEGIN 0 */


static volatile bool spi5_busy = false;  //flaga informująca czy SPI5 jest zajęte

bool spi5_acquire(void) {  //zajmij SPI, gdy jest wolne
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0

	if (spi5_busy) return false;
 80031ac:	4b07      	ldr	r3, [pc, #28]	@ (80031cc <spi5_acquire+0x24>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <spi5_acquire+0x12>
 80031b6:	2300      	movs	r3, #0
 80031b8:	e003      	b.n	80031c2 <spi5_acquire+0x1a>

    spi5_busy = true;
 80031ba:	4b04      	ldr	r3, [pc, #16]	@ (80031cc <spi5_acquire+0x24>)
 80031bc:	2201      	movs	r2, #1
 80031be:	701a      	strb	r2, [r3, #0]
    return true;
 80031c0:	2301      	movs	r3, #1
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	20025f0e 	.word	0x20025f0e

080031d0 <spi5_release>:

void spi5_release(void) { //zwolnij SPI
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
    spi5_busy = false;
 80031d4:	4b03      	ldr	r3, [pc, #12]	@ (80031e4 <spi5_release+0x14>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	701a      	strb	r2, [r3, #0]
}
 80031da:	bf00      	nop
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	20025f0e 	.word	0x20025f0e

080031e8 <MX_SPI5_Init>:
SPI_HandleTypeDef hspi5;
DMA_HandleTypeDef hdma_spi5_tx;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80031ec:	4b17      	ldr	r3, [pc, #92]	@ (800324c <MX_SPI5_Init+0x64>)
 80031ee:	4a18      	ldr	r2, [pc, #96]	@ (8003250 <MX_SPI5_Init+0x68>)
 80031f0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80031f2:	4b16      	ldr	r3, [pc, #88]	@ (800324c <MX_SPI5_Init+0x64>)
 80031f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80031f8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80031fa:	4b14      	ldr	r3, [pc, #80]	@ (800324c <MX_SPI5_Init+0x64>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003200:	4b12      	ldr	r3, [pc, #72]	@ (800324c <MX_SPI5_Init+0x64>)
 8003202:	2200      	movs	r2, #0
 8003204:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003206:	4b11      	ldr	r3, [pc, #68]	@ (800324c <MX_SPI5_Init+0x64>)
 8003208:	2200      	movs	r2, #0
 800320a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800320c:	4b0f      	ldr	r3, [pc, #60]	@ (800324c <MX_SPI5_Init+0x64>)
 800320e:	2200      	movs	r2, #0
 8003210:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8003212:	4b0e      	ldr	r3, [pc, #56]	@ (800324c <MX_SPI5_Init+0x64>)
 8003214:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003218:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800321a:	4b0c      	ldr	r3, [pc, #48]	@ (800324c <MX_SPI5_Init+0x64>)
 800321c:	2218      	movs	r2, #24
 800321e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003220:	4b0a      	ldr	r3, [pc, #40]	@ (800324c <MX_SPI5_Init+0x64>)
 8003222:	2200      	movs	r2, #0
 8003224:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003226:	4b09      	ldr	r3, [pc, #36]	@ (800324c <MX_SPI5_Init+0x64>)
 8003228:	2200      	movs	r2, #0
 800322a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800322c:	4b07      	ldr	r3, [pc, #28]	@ (800324c <MX_SPI5_Init+0x64>)
 800322e:	2200      	movs	r2, #0
 8003230:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8003232:	4b06      	ldr	r3, [pc, #24]	@ (800324c <MX_SPI5_Init+0x64>)
 8003234:	220a      	movs	r2, #10
 8003236:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003238:	4804      	ldr	r0, [pc, #16]	@ (800324c <MX_SPI5_Init+0x64>)
 800323a:	f005 f941 	bl	80084c0 <HAL_SPI_Init>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8003244:	f7ff ffaa 	bl	800319c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8003248:	bf00      	nop
 800324a:	bd80      	pop	{r7, pc}
 800324c:	20025f10 	.word	0x20025f10
 8003250:	40015000 	.word	0x40015000

08003254 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08a      	sub	sp, #40	@ 0x28
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800325c:	f107 0314 	add.w	r3, r7, #20
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	605a      	str	r2, [r3, #4]
 8003266:	609a      	str	r2, [r3, #8]
 8003268:	60da      	str	r2, [r3, #12]
 800326a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a30      	ldr	r2, [pc, #192]	@ (8003334 <HAL_SPI_MspInit+0xe0>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d15a      	bne.n	800332c <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	4b2f      	ldr	r3, [pc, #188]	@ (8003338 <HAL_SPI_MspInit+0xe4>)
 800327c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800327e:	4a2e      	ldr	r2, [pc, #184]	@ (8003338 <HAL_SPI_MspInit+0xe4>)
 8003280:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003284:	6453      	str	r3, [r2, #68]	@ 0x44
 8003286:	4b2c      	ldr	r3, [pc, #176]	@ (8003338 <HAL_SPI_MspInit+0xe4>)
 8003288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800328e:	613b      	str	r3, [r7, #16]
 8003290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	4b28      	ldr	r3, [pc, #160]	@ (8003338 <HAL_SPI_MspInit+0xe4>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329a:	4a27      	ldr	r2, [pc, #156]	@ (8003338 <HAL_SPI_MspInit+0xe4>)
 800329c:	f043 0320 	orr.w	r3, r3, #32
 80032a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032a2:	4b25      	ldr	r3, [pc, #148]	@ (8003338 <HAL_SPI_MspInit+0xe4>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a6:	f003 0320 	and.w	r3, r3, #32
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80032ae:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80032b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b4:	2302      	movs	r3, #2
 80032b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b8:	2300      	movs	r3, #0
 80032ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032bc:	2300      	movs	r3, #0
 80032be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80032c0:	2305      	movs	r3, #5
 80032c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80032c4:	f107 0314 	add.w	r3, r7, #20
 80032c8:	4619      	mov	r1, r3
 80032ca:	481c      	ldr	r0, [pc, #112]	@ (800333c <HAL_SPI_MspInit+0xe8>)
 80032cc:	f001 fa18 	bl	8004700 <HAL_GPIO_Init>

    /* SPI5 DMA Init */
    /* SPI5_TX Init */
    hdma_spi5_tx.Instance = DMA2_Stream4;
 80032d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003340 <HAL_SPI_MspInit+0xec>)
 80032d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003344 <HAL_SPI_MspInit+0xf0>)
 80032d4:	601a      	str	r2, [r3, #0]
    hdma_spi5_tx.Init.Channel = DMA_CHANNEL_2;
 80032d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003340 <HAL_SPI_MspInit+0xec>)
 80032d8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80032dc:	605a      	str	r2, [r3, #4]
    hdma_spi5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032de:	4b18      	ldr	r3, [pc, #96]	@ (8003340 <HAL_SPI_MspInit+0xec>)
 80032e0:	2240      	movs	r2, #64	@ 0x40
 80032e2:	609a      	str	r2, [r3, #8]
    hdma_spi5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032e4:	4b16      	ldr	r3, [pc, #88]	@ (8003340 <HAL_SPI_MspInit+0xec>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	60da      	str	r2, [r3, #12]
    hdma_spi5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032ea:	4b15      	ldr	r3, [pc, #84]	@ (8003340 <HAL_SPI_MspInit+0xec>)
 80032ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80032f0:	611a      	str	r2, [r3, #16]
    hdma_spi5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032f2:	4b13      	ldr	r3, [pc, #76]	@ (8003340 <HAL_SPI_MspInit+0xec>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	615a      	str	r2, [r3, #20]
    hdma_spi5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032f8:	4b11      	ldr	r3, [pc, #68]	@ (8003340 <HAL_SPI_MspInit+0xec>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	619a      	str	r2, [r3, #24]
    hdma_spi5_tx.Init.Mode = DMA_NORMAL;
 80032fe:	4b10      	ldr	r3, [pc, #64]	@ (8003340 <HAL_SPI_MspInit+0xec>)
 8003300:	2200      	movs	r2, #0
 8003302:	61da      	str	r2, [r3, #28]
    hdma_spi5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003304:	4b0e      	ldr	r3, [pc, #56]	@ (8003340 <HAL_SPI_MspInit+0xec>)
 8003306:	2200      	movs	r2, #0
 8003308:	621a      	str	r2, [r3, #32]
    hdma_spi5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800330a:	4b0d      	ldr	r3, [pc, #52]	@ (8003340 <HAL_SPI_MspInit+0xec>)
 800330c:	2200      	movs	r2, #0
 800330e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi5_tx) != HAL_OK)
 8003310:	480b      	ldr	r0, [pc, #44]	@ (8003340 <HAL_SPI_MspInit+0xec>)
 8003312:	f000 fc99 	bl	8003c48 <HAL_DMA_Init>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 800331c:	f7ff ff3e 	bl	800319c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi5_tx);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a07      	ldr	r2, [pc, #28]	@ (8003340 <HAL_SPI_MspInit+0xec>)
 8003324:	649a      	str	r2, [r3, #72]	@ 0x48
 8003326:	4a06      	ldr	r2, [pc, #24]	@ (8003340 <HAL_SPI_MspInit+0xec>)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800332c:	bf00      	nop
 800332e:	3728      	adds	r7, #40	@ 0x28
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40015000 	.word	0x40015000
 8003338:	40023800 	.word	0x40023800
 800333c:	40021400 	.word	0x40021400
 8003340:	20025f68 	.word	0x20025f68
 8003344:	40026470 	.word	0x40026470

08003348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800334e:	2300      	movs	r3, #0
 8003350:	607b      	str	r3, [r7, #4]
 8003352:	4b12      	ldr	r3, [pc, #72]	@ (800339c <HAL_MspInit+0x54>)
 8003354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003356:	4a11      	ldr	r2, [pc, #68]	@ (800339c <HAL_MspInit+0x54>)
 8003358:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800335c:	6453      	str	r3, [r2, #68]	@ 0x44
 800335e:	4b0f      	ldr	r3, [pc, #60]	@ (800339c <HAL_MspInit+0x54>)
 8003360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003362:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003366:	607b      	str	r3, [r7, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800336a:	2300      	movs	r3, #0
 800336c:	603b      	str	r3, [r7, #0]
 800336e:	4b0b      	ldr	r3, [pc, #44]	@ (800339c <HAL_MspInit+0x54>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003372:	4a0a      	ldr	r2, [pc, #40]	@ (800339c <HAL_MspInit+0x54>)
 8003374:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003378:	6413      	str	r3, [r2, #64]	@ 0x40
 800337a:	4b08      	ldr	r3, [pc, #32]	@ (800339c <HAL_MspInit+0x54>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003386:	2200      	movs	r2, #0
 8003388:	210f      	movs	r1, #15
 800338a:	f06f 0001 	mvn.w	r0, #1
 800338e:	f000 fc15 	bl	8003bbc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003392:	bf00      	nop
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40023800 	.word	0x40023800

080033a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b08e      	sub	sp, #56	@ 0x38
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80033b0:	2300      	movs	r3, #0
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	4b33      	ldr	r3, [pc, #204]	@ (8003484 <HAL_InitTick+0xe4>)
 80033b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b8:	4a32      	ldr	r2, [pc, #200]	@ (8003484 <HAL_InitTick+0xe4>)
 80033ba:	f043 0310 	orr.w	r3, r3, #16
 80033be:	6413      	str	r3, [r2, #64]	@ 0x40
 80033c0:	4b30      	ldr	r3, [pc, #192]	@ (8003484 <HAL_InitTick+0xe4>)
 80033c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c4:	f003 0310 	and.w	r3, r3, #16
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80033cc:	f107 0210 	add.w	r2, r7, #16
 80033d0:	f107 0314 	add.w	r3, r7, #20
 80033d4:	4611      	mov	r1, r2
 80033d6:	4618      	mov	r0, r3
 80033d8:	f004 fe4c 	bl	8008074 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80033dc:	6a3b      	ldr	r3, [r7, #32]
 80033de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80033e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d103      	bne.n	80033ee <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80033e6:	f004 fe1d 	bl	8008024 <HAL_RCC_GetPCLK1Freq>
 80033ea:	6378      	str	r0, [r7, #52]	@ 0x34
 80033ec:	e004      	b.n	80033f8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80033ee:	f004 fe19 	bl	8008024 <HAL_RCC_GetPCLK1Freq>
 80033f2:	4603      	mov	r3, r0
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80033f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033fa:	4a23      	ldr	r2, [pc, #140]	@ (8003488 <HAL_InitTick+0xe8>)
 80033fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003400:	0c9b      	lsrs	r3, r3, #18
 8003402:	3b01      	subs	r3, #1
 8003404:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003406:	4b21      	ldr	r3, [pc, #132]	@ (800348c <HAL_InitTick+0xec>)
 8003408:	4a21      	ldr	r2, [pc, #132]	@ (8003490 <HAL_InitTick+0xf0>)
 800340a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800340c:	4b1f      	ldr	r3, [pc, #124]	@ (800348c <HAL_InitTick+0xec>)
 800340e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003412:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003414:	4a1d      	ldr	r2, [pc, #116]	@ (800348c <HAL_InitTick+0xec>)
 8003416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003418:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800341a:	4b1c      	ldr	r3, [pc, #112]	@ (800348c <HAL_InitTick+0xec>)
 800341c:	2200      	movs	r2, #0
 800341e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003420:	4b1a      	ldr	r3, [pc, #104]	@ (800348c <HAL_InitTick+0xec>)
 8003422:	2200      	movs	r2, #0
 8003424:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003426:	4b19      	ldr	r3, [pc, #100]	@ (800348c <HAL_InitTick+0xec>)
 8003428:	2200      	movs	r2, #0
 800342a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800342c:	4817      	ldr	r0, [pc, #92]	@ (800348c <HAL_InitTick+0xec>)
 800342e:	f005 ff61 	bl	80092f4 <HAL_TIM_Base_Init>
 8003432:	4603      	mov	r3, r0
 8003434:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003438:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800343c:	2b00      	cmp	r3, #0
 800343e:	d11b      	bne.n	8003478 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003440:	4812      	ldr	r0, [pc, #72]	@ (800348c <HAL_InitTick+0xec>)
 8003442:	f005 ffa7 	bl	8009394 <HAL_TIM_Base_Start_IT>
 8003446:	4603      	mov	r3, r0
 8003448:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800344c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003450:	2b00      	cmp	r3, #0
 8003452:	d111      	bne.n	8003478 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003454:	2036      	movs	r0, #54	@ 0x36
 8003456:	f000 fbcd 	bl	8003bf4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b0f      	cmp	r3, #15
 800345e:	d808      	bhi.n	8003472 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003460:	2200      	movs	r2, #0
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	2036      	movs	r0, #54	@ 0x36
 8003466:	f000 fba9 	bl	8003bbc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800346a:	4a0a      	ldr	r2, [pc, #40]	@ (8003494 <HAL_InitTick+0xf4>)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6013      	str	r3, [r2, #0]
 8003470:	e002      	b.n	8003478 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003478:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800347c:	4618      	mov	r0, r3
 800347e:	3738      	adds	r7, #56	@ 0x38
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40023800 	.word	0x40023800
 8003488:	431bde83 	.word	0x431bde83
 800348c:	20025fc8 	.word	0x20025fc8
 8003490:	40001000 	.word	0x40001000
 8003494:	2000000c 	.word	0x2000000c

08003498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800349c:	bf00      	nop
 800349e:	e7fd      	b.n	800349c <NMI_Handler+0x4>

080034a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034a4:	bf00      	nop
 80034a6:	e7fd      	b.n	80034a4 <HardFault_Handler+0x4>

080034a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034ac:	bf00      	nop
 80034ae:	e7fd      	b.n	80034ac <MemManage_Handler+0x4>

080034b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034b4:	bf00      	nop
 80034b6:	e7fd      	b.n	80034b4 <BusFault_Handler+0x4>

080034b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034bc:	bf00      	nop
 80034be:	e7fd      	b.n	80034bc <UsageFault_Handler+0x4>

080034c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034c4:	bf00      	nop
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
	...

080034d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80034d4:	4802      	ldr	r0, [pc, #8]	@ (80034e0 <TIM6_DAC_IRQHandler+0x10>)
 80034d6:	f005 ffcd 	bl	8009474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80034da:	bf00      	nop
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	20025fc8 	.word	0x20025fc8

080034e4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80034e8:	4802      	ldr	r0, [pc, #8]	@ (80034f4 <TIM7_IRQHandler+0x10>)
 80034ea:	f005 ffc3 	bl	8009474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80034ee:	bf00      	nop
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	2002605c 	.word	0x2002605c

080034f8 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_tx);
 80034fc:	4802      	ldr	r0, [pc, #8]	@ (8003508 <DMA2_Stream4_IRQHandler+0x10>)
 80034fe:	f000 fca9 	bl	8003e54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003502:	bf00      	nop
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	20025f68 	.word	0x20025f68

0800350c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8003510:	4802      	ldr	r0, [pc, #8]	@ (800351c <OTG_HS_IRQHandler+0x10>)
 8003512:	f001 fd9b 	bl	800504c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003516:	bf00      	nop
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	2002a22c 	.word	0x2002a22c

08003520 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003524:	4802      	ldr	r0, [pc, #8]	@ (8003530 <LTDC_IRQHandler+0x10>)
 8003526:	f003 fe75 	bl	8007214 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800352a:	bf00      	nop
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	20025e4c 	.word	0x20025e4c

08003534 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003538:	4802      	ldr	r0, [pc, #8]	@ (8003544 <DMA2D_IRQHandler+0x10>)
 800353a:	f000 ff3e 	bl	80043ba <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800353e:	bf00      	nop
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	20000224 	.word	0x20000224

08003548 <_getpid>:
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
 800354c:	2301      	movs	r3, #1
 800354e:	4618      	mov	r0, r3
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <_kill>:
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
 8003562:	f00e f93b 	bl	80117dc <__errno>
 8003566:	4603      	mov	r3, r0
 8003568:	2216      	movs	r2, #22
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003570:	4618      	mov	r0, r3
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <_exit>:
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7ff ffe7 	bl	8003558 <_kill>
 800358a:	bf00      	nop
 800358c:	e7fd      	b.n	800358a <_exit+0x12>

0800358e <_read>:
 800358e:	b580      	push	{r7, lr}
 8003590:	b086      	sub	sp, #24
 8003592:	af00      	add	r7, sp, #0
 8003594:	60f8      	str	r0, [r7, #12]
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	607a      	str	r2, [r7, #4]
 800359a:	2300      	movs	r3, #0
 800359c:	617b      	str	r3, [r7, #20]
 800359e:	e00a      	b.n	80035b6 <_read+0x28>
 80035a0:	f3af 8000 	nop.w
 80035a4:	4601      	mov	r1, r0
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	60ba      	str	r2, [r7, #8]
 80035ac:	b2ca      	uxtb	r2, r1
 80035ae:	701a      	strb	r2, [r3, #0]
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	3301      	adds	r3, #1
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	dbf0      	blt.n	80035a0 <_read+0x12>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4618      	mov	r0, r3
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <_close>:
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80035d4:	4618      	mov	r0, r3
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <_fstat>:
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035f0:	605a      	str	r2, [r3, #4]
 80035f2:	2300      	movs	r3, #0
 80035f4:	4618      	mov	r0, r3
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <_isatty>:
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	2301      	movs	r3, #1
 800360a:	4618      	mov	r0, r3
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <_lseek>:
 8003616:	b480      	push	{r7}
 8003618:	b085      	sub	sp, #20
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
 8003622:	2300      	movs	r3, #0
 8003624:	4618      	mov	r0, r3
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <_sbrk>:
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	4a14      	ldr	r2, [pc, #80]	@ (800368c <_sbrk+0x5c>)
 800363a:	4b15      	ldr	r3, [pc, #84]	@ (8003690 <_sbrk+0x60>)
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	617b      	str	r3, [r7, #20]
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	613b      	str	r3, [r7, #16]
 8003644:	4b13      	ldr	r3, [pc, #76]	@ (8003694 <_sbrk+0x64>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d102      	bne.n	8003652 <_sbrk+0x22>
 800364c:	4b11      	ldr	r3, [pc, #68]	@ (8003694 <_sbrk+0x64>)
 800364e:	4a12      	ldr	r2, [pc, #72]	@ (8003698 <_sbrk+0x68>)
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	4b10      	ldr	r3, [pc, #64]	@ (8003694 <_sbrk+0x64>)
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4413      	add	r3, r2
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	429a      	cmp	r2, r3
 800365e:	d207      	bcs.n	8003670 <_sbrk+0x40>
 8003660:	f00e f8bc 	bl	80117dc <__errno>
 8003664:	4603      	mov	r3, r0
 8003666:	220c      	movs	r2, #12
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800366e:	e009      	b.n	8003684 <_sbrk+0x54>
 8003670:	4b08      	ldr	r3, [pc, #32]	@ (8003694 <_sbrk+0x64>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	4b07      	ldr	r3, [pc, #28]	@ (8003694 <_sbrk+0x64>)
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4413      	add	r3, r2
 800367e:	4a05      	ldr	r2, [pc, #20]	@ (8003694 <_sbrk+0x64>)
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20030000 	.word	0x20030000
 8003690:	00000400 	.word	0x00000400
 8003694:	20026010 	.word	0x20026010
 8003698:	2002a758 	.word	0x2002a758

0800369c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036a0:	4b06      	ldr	r3, [pc, #24]	@ (80036bc <SystemInit+0x20>)
 80036a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a6:	4a05      	ldr	r2, [pc, #20]	@ (80036bc <SystemInit+0x20>)
 80036a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80036ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036b0:	bf00      	nop
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	e000ed00 	.word	0xe000ed00

080036c0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036c6:	f107 0308 	add.w	r3, r7, #8
 80036ca:	2200      	movs	r2, #0
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	605a      	str	r2, [r3, #4]
 80036d0:	609a      	str	r2, [r3, #8]
 80036d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036d4:	463b      	mov	r3, r7
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80036dc:	4b1e      	ldr	r3, [pc, #120]	@ (8003758 <MX_TIM1_Init+0x98>)
 80036de:	4a1f      	ldr	r2, [pc, #124]	@ (800375c <MX_TIM1_Init+0x9c>)
 80036e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80036e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003758 <MX_TIM1_Init+0x98>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003758 <MX_TIM1_Init+0x98>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80036ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003758 <MX_TIM1_Init+0x98>)
 80036f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80036f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036f6:	4b18      	ldr	r3, [pc, #96]	@ (8003758 <MX_TIM1_Init+0x98>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80036fc:	4b16      	ldr	r3, [pc, #88]	@ (8003758 <MX_TIM1_Init+0x98>)
 80036fe:	2200      	movs	r2, #0
 8003700:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003702:	4b15      	ldr	r3, [pc, #84]	@ (8003758 <MX_TIM1_Init+0x98>)
 8003704:	2200      	movs	r2, #0
 8003706:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003708:	4813      	ldr	r0, [pc, #76]	@ (8003758 <MX_TIM1_Init+0x98>)
 800370a:	f005 fdf3 	bl	80092f4 <HAL_TIM_Base_Init>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003714:	f7ff fd42 	bl	800319c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003718:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800371c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800371e:	f107 0308 	add.w	r3, r7, #8
 8003722:	4619      	mov	r1, r3
 8003724:	480c      	ldr	r0, [pc, #48]	@ (8003758 <MX_TIM1_Init+0x98>)
 8003726:	f005 ff95 	bl	8009654 <HAL_TIM_ConfigClockSource>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003730:	f7ff fd34 	bl	800319c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003734:	2300      	movs	r3, #0
 8003736:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003738:	2300      	movs	r3, #0
 800373a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800373c:	463b      	mov	r3, r7
 800373e:	4619      	mov	r1, r3
 8003740:	4805      	ldr	r0, [pc, #20]	@ (8003758 <MX_TIM1_Init+0x98>)
 8003742:	f006 f9bd 	bl	8009ac0 <HAL_TIMEx_MasterConfigSynchronization>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800374c:	f7ff fd26 	bl	800319c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003750:	bf00      	nop
 8003752:	3718      	adds	r7, #24
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	20026014 	.word	0x20026014
 800375c:	40010000 	.word	0x40010000

08003760 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003766:	463b      	mov	r3, r7
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800376e:	4b15      	ldr	r3, [pc, #84]	@ (80037c4 <MX_TIM7_Init+0x64>)
 8003770:	4a15      	ldr	r2, [pc, #84]	@ (80037c8 <MX_TIM7_Init+0x68>)
 8003772:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = TIM7_PRESCALER;
 8003774:	4b13      	ldr	r3, [pc, #76]	@ (80037c4 <MX_TIM7_Init+0x64>)
 8003776:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800377a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800377c:	4b11      	ldr	r3, [pc, #68]	@ (80037c4 <MX_TIM7_Init+0x64>)
 800377e:	2200      	movs	r2, #0
 8003780:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = TIM7_PERIOD;
 8003782:	4b10      	ldr	r3, [pc, #64]	@ (80037c4 <MX_TIM7_Init+0x64>)
 8003784:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8003788:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800378a:	4b0e      	ldr	r3, [pc, #56]	@ (80037c4 <MX_TIM7_Init+0x64>)
 800378c:	2200      	movs	r2, #0
 800378e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003790:	480c      	ldr	r0, [pc, #48]	@ (80037c4 <MX_TIM7_Init+0x64>)
 8003792:	f005 fdaf 	bl	80092f4 <HAL_TIM_Base_Init>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800379c:	f7ff fcfe 	bl	800319c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037a0:	2300      	movs	r3, #0
 80037a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037a4:	2300      	movs	r3, #0
 80037a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80037a8:	463b      	mov	r3, r7
 80037aa:	4619      	mov	r1, r3
 80037ac:	4805      	ldr	r0, [pc, #20]	@ (80037c4 <MX_TIM7_Init+0x64>)
 80037ae:	f006 f987 	bl	8009ac0 <HAL_TIMEx_MasterConfigSynchronization>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80037b8:	f7ff fcf0 	bl	800319c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80037bc:	bf00      	nop
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	2002605c 	.word	0x2002605c
 80037c8:	40001400 	.word	0x40001400

080037cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a18      	ldr	r2, [pc, #96]	@ (800383c <HAL_TIM_Base_MspInit+0x70>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d10e      	bne.n	80037fc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037de:	2300      	movs	r3, #0
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	4b17      	ldr	r3, [pc, #92]	@ (8003840 <HAL_TIM_Base_MspInit+0x74>)
 80037e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e6:	4a16      	ldr	r2, [pc, #88]	@ (8003840 <HAL_TIM_Base_MspInit+0x74>)
 80037e8:	f043 0301 	orr.w	r3, r3, #1
 80037ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80037ee:	4b14      	ldr	r3, [pc, #80]	@ (8003840 <HAL_TIM_Base_MspInit+0x74>)
 80037f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80037fa:	e01a      	b.n	8003832 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM7)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a10      	ldr	r2, [pc, #64]	@ (8003844 <HAL_TIM_Base_MspInit+0x78>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d115      	bne.n	8003832 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003806:	2300      	movs	r3, #0
 8003808:	60bb      	str	r3, [r7, #8]
 800380a:	4b0d      	ldr	r3, [pc, #52]	@ (8003840 <HAL_TIM_Base_MspInit+0x74>)
 800380c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380e:	4a0c      	ldr	r2, [pc, #48]	@ (8003840 <HAL_TIM_Base_MspInit+0x74>)
 8003810:	f043 0320 	orr.w	r3, r3, #32
 8003814:	6413      	str	r3, [r2, #64]	@ 0x40
 8003816:	4b0a      	ldr	r3, [pc, #40]	@ (8003840 <HAL_TIM_Base_MspInit+0x74>)
 8003818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381a:	f003 0320 	and.w	r3, r3, #32
 800381e:	60bb      	str	r3, [r7, #8]
 8003820:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8003822:	2200      	movs	r2, #0
 8003824:	2105      	movs	r1, #5
 8003826:	2037      	movs	r0, #55	@ 0x37
 8003828:	f000 f9c8 	bl	8003bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800382c:	2037      	movs	r0, #55	@ 0x37
 800382e:	f000 f9e1 	bl	8003bf4 <HAL_NVIC_EnableIRQ>
}
 8003832:	bf00      	nop
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40010000 	.word	0x40010000
 8003840:	40023800 	.word	0x40023800
 8003844:	40001400 	.word	0x40001400

08003848 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800384c:	4b11      	ldr	r3, [pc, #68]	@ (8003894 <MX_USART1_UART_Init+0x4c>)
 800384e:	4a12      	ldr	r2, [pc, #72]	@ (8003898 <MX_USART1_UART_Init+0x50>)
 8003850:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003852:	4b10      	ldr	r3, [pc, #64]	@ (8003894 <MX_USART1_UART_Init+0x4c>)
 8003854:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003858:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800385a:	4b0e      	ldr	r3, [pc, #56]	@ (8003894 <MX_USART1_UART_Init+0x4c>)
 800385c:	2200      	movs	r2, #0
 800385e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003860:	4b0c      	ldr	r3, [pc, #48]	@ (8003894 <MX_USART1_UART_Init+0x4c>)
 8003862:	2200      	movs	r2, #0
 8003864:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003866:	4b0b      	ldr	r3, [pc, #44]	@ (8003894 <MX_USART1_UART_Init+0x4c>)
 8003868:	2200      	movs	r2, #0
 800386a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800386c:	4b09      	ldr	r3, [pc, #36]	@ (8003894 <MX_USART1_UART_Init+0x4c>)
 800386e:	220c      	movs	r2, #12
 8003870:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003872:	4b08      	ldr	r3, [pc, #32]	@ (8003894 <MX_USART1_UART_Init+0x4c>)
 8003874:	2200      	movs	r2, #0
 8003876:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003878:	4b06      	ldr	r3, [pc, #24]	@ (8003894 <MX_USART1_UART_Init+0x4c>)
 800387a:	2200      	movs	r2, #0
 800387c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800387e:	4805      	ldr	r0, [pc, #20]	@ (8003894 <MX_USART1_UART_Init+0x4c>)
 8003880:	f006 f9ae 	bl	8009be0 <HAL_UART_Init>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800388a:	f7ff fc87 	bl	800319c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800388e:	bf00      	nop
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	200260a4 	.word	0x200260a4
 8003898:	40011000 	.word	0x40011000

0800389c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b08a      	sub	sp, #40	@ 0x28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038a4:	f107 0314 	add.w	r3, r7, #20
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	605a      	str	r2, [r3, #4]
 80038ae:	609a      	str	r2, [r3, #8]
 80038b0:	60da      	str	r2, [r3, #12]
 80038b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a19      	ldr	r2, [pc, #100]	@ (8003920 <HAL_UART_MspInit+0x84>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d12c      	bne.n	8003918 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80038be:	2300      	movs	r3, #0
 80038c0:	613b      	str	r3, [r7, #16]
 80038c2:	4b18      	ldr	r3, [pc, #96]	@ (8003924 <HAL_UART_MspInit+0x88>)
 80038c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c6:	4a17      	ldr	r2, [pc, #92]	@ (8003924 <HAL_UART_MspInit+0x88>)
 80038c8:	f043 0310 	orr.w	r3, r3, #16
 80038cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80038ce:	4b15      	ldr	r3, [pc, #84]	@ (8003924 <HAL_UART_MspInit+0x88>)
 80038d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d2:	f003 0310 	and.w	r3, r3, #16
 80038d6:	613b      	str	r3, [r7, #16]
 80038d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	4b11      	ldr	r3, [pc, #68]	@ (8003924 <HAL_UART_MspInit+0x88>)
 80038e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e2:	4a10      	ldr	r2, [pc, #64]	@ (8003924 <HAL_UART_MspInit+0x88>)
 80038e4:	f043 0301 	orr.w	r3, r3, #1
 80038e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80038ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003924 <HAL_UART_MspInit+0x88>)
 80038ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80038f6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80038fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038fc:	2302      	movs	r3, #2
 80038fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003900:	2300      	movs	r3, #0
 8003902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003904:	2303      	movs	r3, #3
 8003906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003908:	2307      	movs	r3, #7
 800390a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800390c:	f107 0314 	add.w	r3, r7, #20
 8003910:	4619      	mov	r1, r3
 8003912:	4805      	ldr	r0, [pc, #20]	@ (8003928 <HAL_UART_MspInit+0x8c>)
 8003914:	f000 fef4 	bl	8004700 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003918:	bf00      	nop
 800391a:	3728      	adds	r7, #40	@ 0x28
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40011000 	.word	0x40011000
 8003924:	40023800 	.word	0x40023800
 8003928:	40020000 	.word	0x40020000

0800392c <Reset_Handler>:
 800392c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003964 <LoopFillZerobss+0xe>
 8003930:	f7ff feb4 	bl	800369c <SystemInit>
 8003934:	480c      	ldr	r0, [pc, #48]	@ (8003968 <LoopFillZerobss+0x12>)
 8003936:	490d      	ldr	r1, [pc, #52]	@ (800396c <LoopFillZerobss+0x16>)
 8003938:	4a0d      	ldr	r2, [pc, #52]	@ (8003970 <LoopFillZerobss+0x1a>)
 800393a:	2300      	movs	r3, #0
 800393c:	e002      	b.n	8003944 <LoopCopyDataInit>

0800393e <CopyDataInit>:
 800393e:	58d4      	ldr	r4, [r2, r3]
 8003940:	50c4      	str	r4, [r0, r3]
 8003942:	3304      	adds	r3, #4

08003944 <LoopCopyDataInit>:
 8003944:	18c4      	adds	r4, r0, r3
 8003946:	428c      	cmp	r4, r1
 8003948:	d3f9      	bcc.n	800393e <CopyDataInit>
 800394a:	4a0a      	ldr	r2, [pc, #40]	@ (8003974 <LoopFillZerobss+0x1e>)
 800394c:	4c0a      	ldr	r4, [pc, #40]	@ (8003978 <LoopFillZerobss+0x22>)
 800394e:	2300      	movs	r3, #0
 8003950:	e001      	b.n	8003956 <LoopFillZerobss>

08003952 <FillZerobss>:
 8003952:	6013      	str	r3, [r2, #0]
 8003954:	3204      	adds	r2, #4

08003956 <LoopFillZerobss>:
 8003956:	42a2      	cmp	r2, r4
 8003958:	d3fb      	bcc.n	8003952 <FillZerobss>
 800395a:	f00d ff45 	bl	80117e8 <__libc_init_array>
 800395e:	f7ff fb19 	bl	8002f94 <main>
 8003962:	4770      	bx	lr
 8003964:	20030000 	.word	0x20030000
 8003968:	20000000 	.word	0x20000000
 800396c:	20000200 	.word	0x20000200
 8003970:	08013834 	.word	0x08013834
 8003974:	20000200 	.word	0x20000200
 8003978:	2002a758 	.word	0x2002a758

0800397c <ADC_IRQHandler>:
 800397c:	e7fe      	b.n	800397c <ADC_IRQHandler>
	...

08003980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003984:	4b0e      	ldr	r3, [pc, #56]	@ (80039c0 <HAL_Init+0x40>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a0d      	ldr	r2, [pc, #52]	@ (80039c0 <HAL_Init+0x40>)
 800398a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800398e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003990:	4b0b      	ldr	r3, [pc, #44]	@ (80039c0 <HAL_Init+0x40>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a0a      	ldr	r2, [pc, #40]	@ (80039c0 <HAL_Init+0x40>)
 8003996:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800399a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800399c:	4b08      	ldr	r3, [pc, #32]	@ (80039c0 <HAL_Init+0x40>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a07      	ldr	r2, [pc, #28]	@ (80039c0 <HAL_Init+0x40>)
 80039a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039a8:	2003      	movs	r0, #3
 80039aa:	f000 f8fc 	bl	8003ba6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039ae:	200f      	movs	r0, #15
 80039b0:	f7ff fcf6 	bl	80033a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039b4:	f7ff fcc8 	bl	8003348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40023c00 	.word	0x40023c00

080039c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039c8:	4b06      	ldr	r3, [pc, #24]	@ (80039e4 <HAL_IncTick+0x20>)
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	461a      	mov	r2, r3
 80039ce:	4b06      	ldr	r3, [pc, #24]	@ (80039e8 <HAL_IncTick+0x24>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4413      	add	r3, r2
 80039d4:	4a04      	ldr	r2, [pc, #16]	@ (80039e8 <HAL_IncTick+0x24>)
 80039d6:	6013      	str	r3, [r2, #0]
}
 80039d8:	bf00      	nop
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	20000010 	.word	0x20000010
 80039e8:	200260ec 	.word	0x200260ec

080039ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  return uwTick;
 80039f0:	4b03      	ldr	r3, [pc, #12]	@ (8003a00 <HAL_GetTick+0x14>)
 80039f2:	681b      	ldr	r3, [r3, #0]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	200260ec 	.word	0x200260ec

08003a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a0c:	f7ff ffee 	bl	80039ec <HAL_GetTick>
 8003a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a1c:	d005      	beq.n	8003a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a48 <HAL_Delay+0x44>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4413      	add	r3, r2
 8003a28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a2a:	bf00      	nop
 8003a2c:	f7ff ffde 	bl	80039ec <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d8f7      	bhi.n	8003a2c <HAL_Delay+0x28>
  {
  }
}
 8003a3c:	bf00      	nop
 8003a3e:	bf00      	nop
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	20000010 	.word	0x20000010

08003a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f003 0307 	and.w	r3, r3, #7
 8003a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003a90 <__NVIC_SetPriorityGrouping+0x44>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a68:	4013      	ands	r3, r2
 8003a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a7e:	4a04      	ldr	r2, [pc, #16]	@ (8003a90 <__NVIC_SetPriorityGrouping+0x44>)
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	60d3      	str	r3, [r2, #12]
}
 8003a84:	bf00      	nop
 8003a86:	3714      	adds	r7, #20
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	e000ed00 	.word	0xe000ed00

08003a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a98:	4b04      	ldr	r3, [pc, #16]	@ (8003aac <__NVIC_GetPriorityGrouping+0x18>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	0a1b      	lsrs	r3, r3, #8
 8003a9e:	f003 0307 	and.w	r3, r3, #7
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	e000ed00 	.word	0xe000ed00

08003ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	db0b      	blt.n	8003ada <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ac2:	79fb      	ldrb	r3, [r7, #7]
 8003ac4:	f003 021f 	and.w	r2, r3, #31
 8003ac8:	4907      	ldr	r1, [pc, #28]	@ (8003ae8 <__NVIC_EnableIRQ+0x38>)
 8003aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	2001      	movs	r0, #1
 8003ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	e000e100 	.word	0xe000e100

08003aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	4603      	mov	r3, r0
 8003af4:	6039      	str	r1, [r7, #0]
 8003af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	db0a      	blt.n	8003b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	490c      	ldr	r1, [pc, #48]	@ (8003b38 <__NVIC_SetPriority+0x4c>)
 8003b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0a:	0112      	lsls	r2, r2, #4
 8003b0c:	b2d2      	uxtb	r2, r2
 8003b0e:	440b      	add	r3, r1
 8003b10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b14:	e00a      	b.n	8003b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	4908      	ldr	r1, [pc, #32]	@ (8003b3c <__NVIC_SetPriority+0x50>)
 8003b1c:	79fb      	ldrb	r3, [r7, #7]
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	3b04      	subs	r3, #4
 8003b24:	0112      	lsls	r2, r2, #4
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	440b      	add	r3, r1
 8003b2a:	761a      	strb	r2, [r3, #24]
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	e000e100 	.word	0xe000e100
 8003b3c:	e000ed00 	.word	0xe000ed00

08003b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b089      	sub	sp, #36	@ 0x24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f003 0307 	and.w	r3, r3, #7
 8003b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f1c3 0307 	rsb	r3, r3, #7
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	bf28      	it	cs
 8003b5e:	2304      	movcs	r3, #4
 8003b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	3304      	adds	r3, #4
 8003b66:	2b06      	cmp	r3, #6
 8003b68:	d902      	bls.n	8003b70 <NVIC_EncodePriority+0x30>
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	3b03      	subs	r3, #3
 8003b6e:	e000      	b.n	8003b72 <NVIC_EncodePriority+0x32>
 8003b70:	2300      	movs	r3, #0
 8003b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	43da      	mvns	r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	401a      	ands	r2, r3
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b88:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b92:	43d9      	mvns	r1, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b98:	4313      	orrs	r3, r2
         );
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3724      	adds	r7, #36	@ 0x24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b082      	sub	sp, #8
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7ff ff4c 	bl	8003a4c <__NVIC_SetPriorityGrouping>
}
 8003bb4:	bf00      	nop
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
 8003bc8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bce:	f7ff ff61 	bl	8003a94 <__NVIC_GetPriorityGrouping>
 8003bd2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	68b9      	ldr	r1, [r7, #8]
 8003bd8:	6978      	ldr	r0, [r7, #20]
 8003bda:	f7ff ffb1 	bl	8003b40 <NVIC_EncodePriority>
 8003bde:	4602      	mov	r2, r0
 8003be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003be4:	4611      	mov	r1, r2
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7ff ff80 	bl	8003aec <__NVIC_SetPriority>
}
 8003bec:	bf00      	nop
 8003bee:	3718      	adds	r7, #24
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff ff54 	bl	8003ab0 <__NVIC_EnableIRQ>
}
 8003c08:	bf00      	nop
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e00e      	b.n	8003c40 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	795b      	ldrb	r3, [r3, #5]
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d105      	bne.n	8003c38 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7fd fbb8 	bl	80013a8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c54:	f7ff feca 	bl	80039ec <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e099      	b.n	8003d98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2202      	movs	r2, #2
 8003c68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0201 	bic.w	r2, r2, #1
 8003c82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c84:	e00f      	b.n	8003ca6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c86:	f7ff feb1 	bl	80039ec <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b05      	cmp	r3, #5
 8003c92:	d908      	bls.n	8003ca6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2220      	movs	r2, #32
 8003c98:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2203      	movs	r2, #3
 8003c9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e078      	b.n	8003d98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1e8      	bne.n	8003c86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	4b38      	ldr	r3, [pc, #224]	@ (8003da0 <HAL_DMA_Init+0x158>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d107      	bne.n	8003d10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f023 0307 	bic.w	r3, r3, #7
 8003d26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d36:	2b04      	cmp	r3, #4
 8003d38:	d117      	bne.n	8003d6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00e      	beq.n	8003d6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 fa6f 	bl	8004230 <DMA_CheckFifoParam>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d008      	beq.n	8003d6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2240      	movs	r2, #64	@ 0x40
 8003d5c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003d66:	2301      	movs	r3, #1
 8003d68:	e016      	b.n	8003d98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 fa26 	bl	80041c4 <DMA_CalcBaseAndBitshift>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d80:	223f      	movs	r2, #63	@ 0x3f
 8003d82:	409a      	lsls	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	f010803f 	.word	0xf010803f

08003da4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
 8003db0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003db2:	2300      	movs	r3, #0
 8003db4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d101      	bne.n	8003dca <HAL_DMA_Start_IT+0x26>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e040      	b.n	8003e4c <HAL_DMA_Start_IT+0xa8>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d12f      	bne.n	8003e3e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2202      	movs	r2, #2
 8003de2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	68b9      	ldr	r1, [r7, #8]
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f000 f9b8 	bl	8004168 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dfc:	223f      	movs	r2, #63	@ 0x3f
 8003dfe:	409a      	lsls	r2, r3
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0216 	orr.w	r2, r2, #22
 8003e12:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d007      	beq.n	8003e2c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0208 	orr.w	r2, r2, #8
 8003e2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0201 	orr.w	r2, r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	e005      	b.n	8003e4a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e46:	2302      	movs	r3, #2
 8003e48:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3718      	adds	r7, #24
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e60:	4b8e      	ldr	r3, [pc, #568]	@ (800409c <HAL_DMA_IRQHandler+0x248>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a8e      	ldr	r2, [pc, #568]	@ (80040a0 <HAL_DMA_IRQHandler+0x24c>)
 8003e66:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6a:	0a9b      	lsrs	r3, r3, #10
 8003e6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e7e:	2208      	movs	r2, #8
 8003e80:	409a      	lsls	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4013      	ands	r3, r2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d01a      	beq.n	8003ec0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d013      	beq.n	8003ec0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 0204 	bic.w	r2, r2, #4
 8003ea6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eac:	2208      	movs	r2, #8
 8003eae:	409a      	lsls	r2, r3
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb8:	f043 0201 	orr.w	r2, r3, #1
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	409a      	lsls	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d012      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00b      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	409a      	lsls	r2, r3
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eee:	f043 0202 	orr.w	r2, r3, #2
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003efa:	2204      	movs	r2, #4
 8003efc:	409a      	lsls	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	4013      	ands	r3, r2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d012      	beq.n	8003f2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00b      	beq.n	8003f2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f18:	2204      	movs	r2, #4
 8003f1a:	409a      	lsls	r2, r3
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f24:	f043 0204 	orr.w	r2, r3, #4
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f30:	2210      	movs	r2, #16
 8003f32:	409a      	lsls	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4013      	ands	r3, r2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d043      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d03c      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f4e:	2210      	movs	r2, #16
 8003f50:	409a      	lsls	r2, r3
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d018      	beq.n	8003f96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d108      	bne.n	8003f84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d024      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	4798      	blx	r3
 8003f82:	e01f      	b.n	8003fc4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d01b      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	4798      	blx	r3
 8003f94:	e016      	b.n	8003fc4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d107      	bne.n	8003fb4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 0208 	bic.w	r2, r2, #8
 8003fb2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fc8:	2220      	movs	r2, #32
 8003fca:	409a      	lsls	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 808f 	beq.w	80040f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0310 	and.w	r3, r3, #16
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 8087 	beq.w	80040f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fea:	2220      	movs	r2, #32
 8003fec:	409a      	lsls	r2, r3
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b05      	cmp	r3, #5
 8003ffc:	d136      	bne.n	800406c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0216 	bic.w	r2, r2, #22
 800400c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	695a      	ldr	r2, [r3, #20]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800401c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004022:	2b00      	cmp	r3, #0
 8004024:	d103      	bne.n	800402e <HAL_DMA_IRQHandler+0x1da>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800402a:	2b00      	cmp	r3, #0
 800402c:	d007      	beq.n	800403e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0208 	bic.w	r2, r2, #8
 800403c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004042:	223f      	movs	r2, #63	@ 0x3f
 8004044:	409a      	lsls	r2, r3
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800405e:	2b00      	cmp	r3, #0
 8004060:	d07e      	beq.n	8004160 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	4798      	blx	r3
        }
        return;
 800406a:	e079      	b.n	8004160 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d01d      	beq.n	80040b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10d      	bne.n	80040a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800408c:	2b00      	cmp	r3, #0
 800408e:	d031      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	4798      	blx	r3
 8004098:	e02c      	b.n	80040f4 <HAL_DMA_IRQHandler+0x2a0>
 800409a:	bf00      	nop
 800409c:	20000008 	.word	0x20000008
 80040a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d023      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	4798      	blx	r3
 80040b4:	e01e      	b.n	80040f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10f      	bne.n	80040e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 0210 	bic.w	r2, r2, #16
 80040d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d032      	beq.n	8004162 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	d022      	beq.n	800414e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2205      	movs	r2, #5
 800410c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0201 	bic.w	r2, r2, #1
 800411e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	3301      	adds	r3, #1
 8004124:	60bb      	str	r3, [r7, #8]
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	429a      	cmp	r2, r3
 800412a:	d307      	bcc.n	800413c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1f2      	bne.n	8004120 <HAL_DMA_IRQHandler+0x2cc>
 800413a:	e000      	b.n	800413e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800413c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004152:	2b00      	cmp	r3, #0
 8004154:	d005      	beq.n	8004162 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	4798      	blx	r3
 800415e:	e000      	b.n	8004162 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004160:	bf00      	nop
    }
  }
}
 8004162:	3718      	adds	r7, #24
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
 8004174:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004184:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	2b40      	cmp	r3, #64	@ 0x40
 8004194:	d108      	bne.n	80041a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80041a6:	e007      	b.n	80041b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	60da      	str	r2, [r3, #12]
}
 80041b8:	bf00      	nop
 80041ba:	3714      	adds	r7, #20
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	3b10      	subs	r3, #16
 80041d4:	4a14      	ldr	r2, [pc, #80]	@ (8004228 <DMA_CalcBaseAndBitshift+0x64>)
 80041d6:	fba2 2303 	umull	r2, r3, r2, r3
 80041da:	091b      	lsrs	r3, r3, #4
 80041dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041de:	4a13      	ldr	r2, [pc, #76]	@ (800422c <DMA_CalcBaseAndBitshift+0x68>)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4413      	add	r3, r2
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	461a      	mov	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2b03      	cmp	r3, #3
 80041f0:	d909      	bls.n	8004206 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80041fa:	f023 0303 	bic.w	r3, r3, #3
 80041fe:	1d1a      	adds	r2, r3, #4
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	659a      	str	r2, [r3, #88]	@ 0x58
 8004204:	e007      	b.n	8004216 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800420e:	f023 0303 	bic.w	r3, r3, #3
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	aaaaaaab 	.word	0xaaaaaaab
 800422c:	080134a4 	.word	0x080134a4

08004230 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004238:	2300      	movs	r3, #0
 800423a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004240:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d11f      	bne.n	800428a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2b03      	cmp	r3, #3
 800424e:	d856      	bhi.n	80042fe <DMA_CheckFifoParam+0xce>
 8004250:	a201      	add	r2, pc, #4	@ (adr r2, 8004258 <DMA_CheckFifoParam+0x28>)
 8004252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004256:	bf00      	nop
 8004258:	08004269 	.word	0x08004269
 800425c:	0800427b 	.word	0x0800427b
 8004260:	08004269 	.word	0x08004269
 8004264:	080042ff 	.word	0x080042ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d046      	beq.n	8004302 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004278:	e043      	b.n	8004302 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004282:	d140      	bne.n	8004306 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004288:	e03d      	b.n	8004306 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004292:	d121      	bne.n	80042d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2b03      	cmp	r3, #3
 8004298:	d837      	bhi.n	800430a <DMA_CheckFifoParam+0xda>
 800429a:	a201      	add	r2, pc, #4	@ (adr r2, 80042a0 <DMA_CheckFifoParam+0x70>)
 800429c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a0:	080042b1 	.word	0x080042b1
 80042a4:	080042b7 	.word	0x080042b7
 80042a8:	080042b1 	.word	0x080042b1
 80042ac:	080042c9 	.word	0x080042c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	73fb      	strb	r3, [r7, #15]
      break;
 80042b4:	e030      	b.n	8004318 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d025      	beq.n	800430e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042c6:	e022      	b.n	800430e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80042d0:	d11f      	bne.n	8004312 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042d6:	e01c      	b.n	8004312 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d903      	bls.n	80042e6 <DMA_CheckFifoParam+0xb6>
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	2b03      	cmp	r3, #3
 80042e2:	d003      	beq.n	80042ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042e4:	e018      	b.n	8004318 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	73fb      	strb	r3, [r7, #15]
      break;
 80042ea:	e015      	b.n	8004318 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00e      	beq.n	8004316 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	73fb      	strb	r3, [r7, #15]
      break;
 80042fc:	e00b      	b.n	8004316 <DMA_CheckFifoParam+0xe6>
      break;
 80042fe:	bf00      	nop
 8004300:	e00a      	b.n	8004318 <DMA_CheckFifoParam+0xe8>
      break;
 8004302:	bf00      	nop
 8004304:	e008      	b.n	8004318 <DMA_CheckFifoParam+0xe8>
      break;
 8004306:	bf00      	nop
 8004308:	e006      	b.n	8004318 <DMA_CheckFifoParam+0xe8>
      break;
 800430a:	bf00      	nop
 800430c:	e004      	b.n	8004318 <DMA_CheckFifoParam+0xe8>
      break;
 800430e:	bf00      	nop
 8004310:	e002      	b.n	8004318 <DMA_CheckFifoParam+0xe8>
      break;   
 8004312:	bf00      	nop
 8004314:	e000      	b.n	8004318 <DMA_CheckFifoParam+0xe8>
      break;
 8004316:	bf00      	nop
    }
  } 
  
  return status; 
 8004318:	7bfb      	ldrb	r3, [r7, #15]
}
 800431a:	4618      	mov	r0, r3
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop

08004328 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e03b      	b.n	80043b2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d106      	bne.n	8004354 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7fd f89e 	bl	8001490 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2202      	movs	r2, #2
 8004358:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004378:	f023 0107 	bic.w	r1, r3, #7
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004392:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	68d1      	ldr	r1, [r2, #12]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6812      	ldr	r2, [r2, #0]
 800439e:	430b      	orrs	r3, r1
 80043a0:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b084      	sub	sp, #16
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d026      	beq.n	800442a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d021      	beq.n	800442a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043f4:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043fa:	f043 0201 	orr.w	r2, r3, #1
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2201      	movs	r2, #1
 8004408:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2204      	movs	r2, #4
 800440e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f003 0320 	and.w	r3, r3, #32
 8004430:	2b00      	cmp	r3, #0
 8004432:	d026      	beq.n	8004482 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d021      	beq.n	8004482 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800444c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2220      	movs	r2, #32
 8004454:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800445a:	f043 0202 	orr.w	r2, r3, #2
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2204      	movs	r2, #4
 8004466:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	2b00      	cmp	r3, #0
 800448a:	d026      	beq.n	80044da <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004492:	2b00      	cmp	r3, #0
 8004494:	d021      	beq.n	80044da <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044a4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2208      	movs	r2, #8
 80044ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044b2:	f043 0204 	orr.w	r2, r3, #4
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2204      	movs	r2, #4
 80044be:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d013      	beq.n	800450c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00e      	beq.n	800450c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044fc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2204      	movs	r2, #4
 8004504:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f853 	bl	80045b2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d024      	beq.n	8004560 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800451c:	2b00      	cmp	r3, #0
 800451e:	d01f      	beq.n	8004560 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800452e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2202      	movs	r2, #2
 8004536:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f003 0310 	and.w	r3, r3, #16
 8004566:	2b00      	cmp	r3, #0
 8004568:	d01f      	beq.n	80045aa <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d01a      	beq.n	80045aa <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004582:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2210      	movs	r2, #16
 800458a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f80e 	bl	80045c6 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80045aa:	bf00      	nop
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b083      	sub	sp, #12
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b083      	sub	sp, #12
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
	...

080045dc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d101      	bne.n	80045fc <HAL_DMA2D_ConfigLayer+0x20>
 80045f8:	2302      	movs	r3, #2
 80045fa:	e079      	b.n	80046f0 <HAL_DMA2D_ConfigLayer+0x114>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2202      	movs	r2, #2
 8004608:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	3318      	adds	r3, #24
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	4413      	add	r3, r2
 8004616:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	041b      	lsls	r3, r3, #16
 8004622:	4313      	orrs	r3, r2
 8004624:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004626:	4b35      	ldr	r3, [pc, #212]	@ (80046fc <HAL_DMA2D_ConfigLayer+0x120>)
 8004628:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2b0a      	cmp	r3, #10
 8004630:	d003      	beq.n	800463a <HAL_DMA2D_ConfigLayer+0x5e>
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2b09      	cmp	r3, #9
 8004638:	d107      	bne.n	800464a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	4313      	orrs	r3, r2
 8004646:	617b      	str	r3, [r7, #20]
 8004648:	e005      	b.n	8004656 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	061b      	lsls	r3, r3, #24
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	4313      	orrs	r3, r2
 8004654:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d120      	bne.n	800469e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	43db      	mvns	r3, r3
 8004666:	ea02 0103 	and.w	r1, r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	430a      	orrs	r2, r1
 8004672:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	6812      	ldr	r2, [r2, #0]
 800467c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	2b0a      	cmp	r3, #10
 8004684:	d003      	beq.n	800468e <HAL_DMA2D_ConfigLayer+0xb2>
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	2b09      	cmp	r3, #9
 800468c:	d127      	bne.n	80046de <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	68da      	ldr	r2, [r3, #12]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800469a:	629a      	str	r2, [r3, #40]	@ 0x28
 800469c:	e01f      	b.n	80046de <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	69da      	ldr	r2, [r3, #28]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	43db      	mvns	r3, r3
 80046a8:	ea02 0103 	and.w	r1, r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	6812      	ldr	r2, [r2, #0]
 80046be:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	2b0a      	cmp	r3, #10
 80046c6:	d003      	beq.n	80046d0 <HAL_DMA2D_ConfigLayer+0xf4>
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	2b09      	cmp	r3, #9
 80046ce:	d106      	bne.n	80046de <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	68da      	ldr	r2, [r3, #12]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80046dc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	371c      	adds	r7, #28
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	ff03000f 	.word	0xff03000f

08004700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004700:	b480      	push	{r7}
 8004702:	b089      	sub	sp, #36	@ 0x24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800470a:	2300      	movs	r3, #0
 800470c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800470e:	2300      	movs	r3, #0
 8004710:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004712:	2300      	movs	r3, #0
 8004714:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004716:	2300      	movs	r3, #0
 8004718:	61fb      	str	r3, [r7, #28]
 800471a:	e177      	b.n	8004a0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800471c:	2201      	movs	r2, #1
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	4013      	ands	r3, r2
 800472e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	429a      	cmp	r2, r3
 8004736:	f040 8166 	bne.w	8004a06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f003 0303 	and.w	r3, r3, #3
 8004742:	2b01      	cmp	r3, #1
 8004744:	d005      	beq.n	8004752 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800474e:	2b02      	cmp	r3, #2
 8004750:	d130      	bne.n	80047b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	2203      	movs	r2, #3
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	43db      	mvns	r3, r3
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	4013      	ands	r3, r2
 8004768:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	fa02 f303 	lsl.w	r3, r2, r3
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	4313      	orrs	r3, r2
 800477a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004788:	2201      	movs	r2, #1
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	43db      	mvns	r3, r3
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	4013      	ands	r3, r2
 8004796:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	091b      	lsrs	r3, r3, #4
 800479e:	f003 0201 	and.w	r2, r3, #1
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f003 0303 	and.w	r3, r3, #3
 80047bc:	2b03      	cmp	r3, #3
 80047be:	d017      	beq.n	80047f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	2203      	movs	r2, #3
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	43db      	mvns	r3, r3
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	4013      	ands	r3, r2
 80047d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f003 0303 	and.w	r3, r3, #3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d123      	bne.n	8004844 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	08da      	lsrs	r2, r3, #3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	3208      	adds	r2, #8
 8004804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004808:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	f003 0307 	and.w	r3, r3, #7
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	220f      	movs	r2, #15
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	43db      	mvns	r3, r3
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	4013      	ands	r3, r2
 800481e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	691a      	ldr	r2, [r3, #16]
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	fa02 f303 	lsl.w	r3, r2, r3
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	4313      	orrs	r3, r2
 8004834:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	08da      	lsrs	r2, r3, #3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3208      	adds	r2, #8
 800483e:	69b9      	ldr	r1, [r7, #24]
 8004840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	2203      	movs	r2, #3
 8004850:	fa02 f303 	lsl.w	r3, r2, r3
 8004854:	43db      	mvns	r3, r3
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	4013      	ands	r3, r2
 800485a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f003 0203 	and.w	r2, r3, #3
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	4313      	orrs	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 80c0 	beq.w	8004a06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004886:	2300      	movs	r3, #0
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	4b66      	ldr	r3, [pc, #408]	@ (8004a24 <HAL_GPIO_Init+0x324>)
 800488c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800488e:	4a65      	ldr	r2, [pc, #404]	@ (8004a24 <HAL_GPIO_Init+0x324>)
 8004890:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004894:	6453      	str	r3, [r2, #68]	@ 0x44
 8004896:	4b63      	ldr	r3, [pc, #396]	@ (8004a24 <HAL_GPIO_Init+0x324>)
 8004898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800489a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048a2:	4a61      	ldr	r2, [pc, #388]	@ (8004a28 <HAL_GPIO_Init+0x328>)
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	089b      	lsrs	r3, r3, #2
 80048a8:	3302      	adds	r3, #2
 80048aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	220f      	movs	r2, #15
 80048ba:	fa02 f303 	lsl.w	r3, r2, r3
 80048be:	43db      	mvns	r3, r3
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	4013      	ands	r3, r2
 80048c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a58      	ldr	r2, [pc, #352]	@ (8004a2c <HAL_GPIO_Init+0x32c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d037      	beq.n	800493e <HAL_GPIO_Init+0x23e>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a57      	ldr	r2, [pc, #348]	@ (8004a30 <HAL_GPIO_Init+0x330>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d031      	beq.n	800493a <HAL_GPIO_Init+0x23a>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a56      	ldr	r2, [pc, #344]	@ (8004a34 <HAL_GPIO_Init+0x334>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d02b      	beq.n	8004936 <HAL_GPIO_Init+0x236>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a55      	ldr	r2, [pc, #340]	@ (8004a38 <HAL_GPIO_Init+0x338>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d025      	beq.n	8004932 <HAL_GPIO_Init+0x232>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a54      	ldr	r2, [pc, #336]	@ (8004a3c <HAL_GPIO_Init+0x33c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d01f      	beq.n	800492e <HAL_GPIO_Init+0x22e>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a53      	ldr	r2, [pc, #332]	@ (8004a40 <HAL_GPIO_Init+0x340>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d019      	beq.n	800492a <HAL_GPIO_Init+0x22a>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a52      	ldr	r2, [pc, #328]	@ (8004a44 <HAL_GPIO_Init+0x344>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d013      	beq.n	8004926 <HAL_GPIO_Init+0x226>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a51      	ldr	r2, [pc, #324]	@ (8004a48 <HAL_GPIO_Init+0x348>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d00d      	beq.n	8004922 <HAL_GPIO_Init+0x222>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a50      	ldr	r2, [pc, #320]	@ (8004a4c <HAL_GPIO_Init+0x34c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d007      	beq.n	800491e <HAL_GPIO_Init+0x21e>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a4f      	ldr	r2, [pc, #316]	@ (8004a50 <HAL_GPIO_Init+0x350>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d101      	bne.n	800491a <HAL_GPIO_Init+0x21a>
 8004916:	2309      	movs	r3, #9
 8004918:	e012      	b.n	8004940 <HAL_GPIO_Init+0x240>
 800491a:	230a      	movs	r3, #10
 800491c:	e010      	b.n	8004940 <HAL_GPIO_Init+0x240>
 800491e:	2308      	movs	r3, #8
 8004920:	e00e      	b.n	8004940 <HAL_GPIO_Init+0x240>
 8004922:	2307      	movs	r3, #7
 8004924:	e00c      	b.n	8004940 <HAL_GPIO_Init+0x240>
 8004926:	2306      	movs	r3, #6
 8004928:	e00a      	b.n	8004940 <HAL_GPIO_Init+0x240>
 800492a:	2305      	movs	r3, #5
 800492c:	e008      	b.n	8004940 <HAL_GPIO_Init+0x240>
 800492e:	2304      	movs	r3, #4
 8004930:	e006      	b.n	8004940 <HAL_GPIO_Init+0x240>
 8004932:	2303      	movs	r3, #3
 8004934:	e004      	b.n	8004940 <HAL_GPIO_Init+0x240>
 8004936:	2302      	movs	r3, #2
 8004938:	e002      	b.n	8004940 <HAL_GPIO_Init+0x240>
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <HAL_GPIO_Init+0x240>
 800493e:	2300      	movs	r3, #0
 8004940:	69fa      	ldr	r2, [r7, #28]
 8004942:	f002 0203 	and.w	r2, r2, #3
 8004946:	0092      	lsls	r2, r2, #2
 8004948:	4093      	lsls	r3, r2
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	4313      	orrs	r3, r2
 800494e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004950:	4935      	ldr	r1, [pc, #212]	@ (8004a28 <HAL_GPIO_Init+0x328>)
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	089b      	lsrs	r3, r3, #2
 8004956:	3302      	adds	r3, #2
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800495e:	4b3d      	ldr	r3, [pc, #244]	@ (8004a54 <HAL_GPIO_Init+0x354>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	43db      	mvns	r3, r3
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	4013      	ands	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	4313      	orrs	r3, r2
 8004980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004982:	4a34      	ldr	r2, [pc, #208]	@ (8004a54 <HAL_GPIO_Init+0x354>)
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004988:	4b32      	ldr	r3, [pc, #200]	@ (8004a54 <HAL_GPIO_Init+0x354>)
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	43db      	mvns	r3, r3
 8004992:	69ba      	ldr	r2, [r7, #24]
 8004994:	4013      	ands	r3, r2
 8004996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049ac:	4a29      	ldr	r2, [pc, #164]	@ (8004a54 <HAL_GPIO_Init+0x354>)
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80049b2:	4b28      	ldr	r3, [pc, #160]	@ (8004a54 <HAL_GPIO_Init+0x354>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	43db      	mvns	r3, r3
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	4013      	ands	r3, r2
 80049c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049d6:	4a1f      	ldr	r2, [pc, #124]	@ (8004a54 <HAL_GPIO_Init+0x354>)
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004a54 <HAL_GPIO_Init+0x354>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	43db      	mvns	r3, r3
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	4013      	ands	r3, r2
 80049ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a00:	4a14      	ldr	r2, [pc, #80]	@ (8004a54 <HAL_GPIO_Init+0x354>)
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	61fb      	str	r3, [r7, #28]
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	2b0f      	cmp	r3, #15
 8004a10:	f67f ae84 	bls.w	800471c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a14:	bf00      	nop
 8004a16:	bf00      	nop
 8004a18:	3724      	adds	r7, #36	@ 0x24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	40023800 	.word	0x40023800
 8004a28:	40013800 	.word	0x40013800
 8004a2c:	40020000 	.word	0x40020000
 8004a30:	40020400 	.word	0x40020400
 8004a34:	40020800 	.word	0x40020800
 8004a38:	40020c00 	.word	0x40020c00
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	40021400 	.word	0x40021400
 8004a44:	40021800 	.word	0x40021800
 8004a48:	40021c00 	.word	0x40021c00
 8004a4c:	40022000 	.word	0x40022000
 8004a50:	40022400 	.word	0x40022400
 8004a54:	40013c00 	.word	0x40013c00

08004a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	460b      	mov	r3, r1
 8004a62:	807b      	strh	r3, [r7, #2]
 8004a64:	4613      	mov	r3, r2
 8004a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a68:	787b      	ldrb	r3, [r7, #1]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a6e:	887a      	ldrh	r2, [r7, #2]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a74:	e003      	b.n	8004a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a76:	887b      	ldrh	r3, [r7, #2]
 8004a78:	041a      	lsls	r2, r3, #16
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	619a      	str	r2, [r3, #24]
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b086      	sub	sp, #24
 8004a8e:	af02      	add	r7, sp, #8
 8004a90:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e059      	b.n	8004b50 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d106      	bne.n	8004abc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f00b fc5a 	bl	8010370 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2203      	movs	r2, #3
 8004ac0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004aca:	d102      	bne.n	8004ad2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f005 fdc9 	bl	800a66e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6818      	ldr	r0, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	7c1a      	ldrb	r2, [r3, #16]
 8004ae4:	f88d 2000 	strb.w	r2, [sp]
 8004ae8:	3304      	adds	r3, #4
 8004aea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004aec:	f005 fd4a 	bl	800a584 <USB_CoreInit>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d005      	beq.n	8004b02 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2202      	movs	r2, #2
 8004afa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e026      	b.n	8004b50 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2101      	movs	r1, #1
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f005 fdc1 	bl	800a690 <USB_SetCurrentMode>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d005      	beq.n	8004b20 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2202      	movs	r2, #2
 8004b18:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e017      	b.n	8004b50 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6818      	ldr	r0, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	7c1a      	ldrb	r2, [r3, #16]
 8004b28:	f88d 2000 	strb.w	r2, [sp]
 8004b2c:	3304      	adds	r3, #4
 8004b2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b30:	f005 ff64 	bl	800a9fc <USB_HostInit>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d005      	beq.n	8004b46 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e004      	b.n	8004b50 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004b58:	b590      	push	{r4, r7, lr}
 8004b5a:	b08b      	sub	sp, #44	@ 0x2c
 8004b5c:	af04      	add	r7, sp, #16
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	4608      	mov	r0, r1
 8004b62:	4611      	mov	r1, r2
 8004b64:	461a      	mov	r2, r3
 8004b66:	4603      	mov	r3, r0
 8004b68:	70fb      	strb	r3, [r7, #3]
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	70bb      	strb	r3, [r7, #2]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8004b72:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004b74:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d101      	bne.n	8004b84 <HAL_HCD_HC_Init+0x2c>
 8004b80:	2302      	movs	r3, #2
 8004b82:	e09d      	b.n	8004cc0 <HAL_HCD_HC_Init+0x168>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8004b8c:	78fa      	ldrb	r2, [r7, #3]
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	4613      	mov	r3, r2
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	1a9b      	subs	r3, r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	440b      	add	r3, r1
 8004b9a:	3319      	adds	r3, #25
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004ba0:	78fa      	ldrb	r2, [r7, #3]
 8004ba2:	6879      	ldr	r1, [r7, #4]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	1a9b      	subs	r3, r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	440b      	add	r3, r1
 8004bae:	3314      	adds	r3, #20
 8004bb0:	787a      	ldrb	r2, [r7, #1]
 8004bb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004bb4:	78fa      	ldrb	r2, [r7, #3]
 8004bb6:	6879      	ldr	r1, [r7, #4]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	1a9b      	subs	r3, r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	3315      	adds	r3, #21
 8004bc4:	78fa      	ldrb	r2, [r7, #3]
 8004bc6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004bc8:	78fa      	ldrb	r2, [r7, #3]
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	1a9b      	subs	r3, r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	3326      	adds	r3, #38	@ 0x26
 8004bd8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8004bdc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004bde:	78fa      	ldrb	r2, [r7, #3]
 8004be0:	78bb      	ldrb	r3, [r7, #2]
 8004be2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004be6:	b2d8      	uxtb	r0, r3
 8004be8:	6879      	ldr	r1, [r7, #4]
 8004bea:	4613      	mov	r3, r2
 8004bec:	011b      	lsls	r3, r3, #4
 8004bee:	1a9b      	subs	r3, r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	440b      	add	r3, r1
 8004bf4:	3316      	adds	r3, #22
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8004bfa:	78fb      	ldrb	r3, [r7, #3]
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fbc8 	bl	8005394 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8004c04:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	da0a      	bge.n	8004c22 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004c0c:	78fa      	ldrb	r2, [r7, #3]
 8004c0e:	6879      	ldr	r1, [r7, #4]
 8004c10:	4613      	mov	r3, r2
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	1a9b      	subs	r3, r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	440b      	add	r3, r1
 8004c1a:	3317      	adds	r3, #23
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	701a      	strb	r2, [r3, #0]
 8004c20:	e009      	b.n	8004c36 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004c22:	78fa      	ldrb	r2, [r7, #3]
 8004c24:	6879      	ldr	r1, [r7, #4]
 8004c26:	4613      	mov	r3, r2
 8004c28:	011b      	lsls	r3, r3, #4
 8004c2a:	1a9b      	subs	r3, r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	440b      	add	r3, r1
 8004c30:	3317      	adds	r3, #23
 8004c32:	2200      	movs	r2, #0
 8004c34:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f006 f842 	bl	800acc4 <USB_GetHostSpeed>
 8004c40:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8004c42:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d10b      	bne.n	8004c62 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8004c4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d107      	bne.n	8004c62 <HAL_HCD_HC_Init+0x10a>
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d104      	bne.n	8004c62 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	2bbc      	cmp	r3, #188	@ 0xbc
 8004c5c:	d901      	bls.n	8004c62 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8004c5e:	23bc      	movs	r3, #188	@ 0xbc
 8004c60:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8004c62:	78fa      	ldrb	r2, [r7, #3]
 8004c64:	6879      	ldr	r1, [r7, #4]
 8004c66:	4613      	mov	r3, r2
 8004c68:	011b      	lsls	r3, r3, #4
 8004c6a:	1a9b      	subs	r3, r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	440b      	add	r3, r1
 8004c70:	3318      	adds	r3, #24
 8004c72:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004c76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8004c78:	78fa      	ldrb	r2, [r7, #3]
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	b298      	uxth	r0, r3
 8004c7e:	6879      	ldr	r1, [r7, #4]
 8004c80:	4613      	mov	r3, r2
 8004c82:	011b      	lsls	r3, r3, #4
 8004c84:	1a9b      	subs	r3, r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	440b      	add	r3, r1
 8004c8a:	3328      	adds	r3, #40	@ 0x28
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6818      	ldr	r0, [r3, #0]
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	787c      	ldrb	r4, [r7, #1]
 8004c9a:	78ba      	ldrb	r2, [r7, #2]
 8004c9c:	78f9      	ldrb	r1, [r7, #3]
 8004c9e:	9302      	str	r3, [sp, #8]
 8004ca0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004ca4:	9301      	str	r3, [sp, #4]
 8004ca6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	4623      	mov	r3, r4
 8004cae:	f006 f831 	bl	800ad14 <USB_HC_Init>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	371c      	adds	r7, #28
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd90      	pop	{r4, r7, pc}

08004cc8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d101      	bne.n	8004ce6 <HAL_HCD_HC_Halt+0x1e>
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	e00f      	b.n	8004d06 <HAL_HCD_HC_Halt+0x3e>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	78fa      	ldrb	r2, [r7, #3]
 8004cf4:	4611      	mov	r1, r2
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f006 fbc3 	bl	800b482 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
	...

08004d10 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	4608      	mov	r0, r1
 8004d1a:	4611      	mov	r1, r2
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	4603      	mov	r3, r0
 8004d20:	70fb      	strb	r3, [r7, #3]
 8004d22:	460b      	mov	r3, r1
 8004d24:	70bb      	strb	r3, [r7, #2]
 8004d26:	4613      	mov	r3, r2
 8004d28:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004d2a:	78fa      	ldrb	r2, [r7, #3]
 8004d2c:	6879      	ldr	r1, [r7, #4]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	011b      	lsls	r3, r3, #4
 8004d32:	1a9b      	subs	r3, r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	440b      	add	r3, r1
 8004d38:	3317      	adds	r3, #23
 8004d3a:	78ba      	ldrb	r2, [r7, #2]
 8004d3c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004d3e:	78fa      	ldrb	r2, [r7, #3]
 8004d40:	6879      	ldr	r1, [r7, #4]
 8004d42:	4613      	mov	r3, r2
 8004d44:	011b      	lsls	r3, r3, #4
 8004d46:	1a9b      	subs	r3, r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	440b      	add	r3, r1
 8004d4c:	3326      	adds	r3, #38	@ 0x26
 8004d4e:	787a      	ldrb	r2, [r7, #1]
 8004d50:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004d52:	7c3b      	ldrb	r3, [r7, #16]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d114      	bne.n	8004d82 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004d58:	78fa      	ldrb	r2, [r7, #3]
 8004d5a:	6879      	ldr	r1, [r7, #4]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	011b      	lsls	r3, r3, #4
 8004d60:	1a9b      	subs	r3, r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	332a      	adds	r3, #42	@ 0x2a
 8004d68:	2203      	movs	r2, #3
 8004d6a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004d6c:	78fa      	ldrb	r2, [r7, #3]
 8004d6e:	6879      	ldr	r1, [r7, #4]
 8004d70:	4613      	mov	r3, r2
 8004d72:	011b      	lsls	r3, r3, #4
 8004d74:	1a9b      	subs	r3, r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	440b      	add	r3, r1
 8004d7a:	3319      	adds	r3, #25
 8004d7c:	7f3a      	ldrb	r2, [r7, #28]
 8004d7e:	701a      	strb	r2, [r3, #0]
 8004d80:	e009      	b.n	8004d96 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d82:	78fa      	ldrb	r2, [r7, #3]
 8004d84:	6879      	ldr	r1, [r7, #4]
 8004d86:	4613      	mov	r3, r2
 8004d88:	011b      	lsls	r3, r3, #4
 8004d8a:	1a9b      	subs	r3, r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	440b      	add	r3, r1
 8004d90:	332a      	adds	r3, #42	@ 0x2a
 8004d92:	2202      	movs	r2, #2
 8004d94:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004d96:	787b      	ldrb	r3, [r7, #1]
 8004d98:	2b03      	cmp	r3, #3
 8004d9a:	f200 8102 	bhi.w	8004fa2 <HAL_HCD_HC_SubmitRequest+0x292>
 8004d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8004da4 <HAL_HCD_HC_SubmitRequest+0x94>)
 8004da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da4:	08004db5 	.word	0x08004db5
 8004da8:	08004f8d 	.word	0x08004f8d
 8004dac:	08004e79 	.word	0x08004e79
 8004db0:	08004f03 	.word	0x08004f03
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8004db4:	7c3b      	ldrb	r3, [r7, #16]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	f040 80f5 	bne.w	8004fa6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8004dbc:	78bb      	ldrb	r3, [r7, #2]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d12d      	bne.n	8004e1e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8004dc2:	8b3b      	ldrh	r3, [r7, #24]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d109      	bne.n	8004ddc <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8004dc8:	78fa      	ldrb	r2, [r7, #3]
 8004dca:	6879      	ldr	r1, [r7, #4]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	011b      	lsls	r3, r3, #4
 8004dd0:	1a9b      	subs	r3, r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	440b      	add	r3, r1
 8004dd6:	333d      	adds	r3, #61	@ 0x3d
 8004dd8:	2201      	movs	r2, #1
 8004dda:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8004ddc:	78fa      	ldrb	r2, [r7, #3]
 8004dde:	6879      	ldr	r1, [r7, #4]
 8004de0:	4613      	mov	r3, r2
 8004de2:	011b      	lsls	r3, r3, #4
 8004de4:	1a9b      	subs	r3, r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	440b      	add	r3, r1
 8004dea:	333d      	adds	r3, #61	@ 0x3d
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10a      	bne.n	8004e08 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004df2:	78fa      	ldrb	r2, [r7, #3]
 8004df4:	6879      	ldr	r1, [r7, #4]
 8004df6:	4613      	mov	r3, r2
 8004df8:	011b      	lsls	r3, r3, #4
 8004dfa:	1a9b      	subs	r3, r3, r2
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	440b      	add	r3, r1
 8004e00:	332a      	adds	r3, #42	@ 0x2a
 8004e02:	2200      	movs	r2, #0
 8004e04:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8004e06:	e0ce      	b.n	8004fa6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e08:	78fa      	ldrb	r2, [r7, #3]
 8004e0a:	6879      	ldr	r1, [r7, #4]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	011b      	lsls	r3, r3, #4
 8004e10:	1a9b      	subs	r3, r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	440b      	add	r3, r1
 8004e16:	332a      	adds	r3, #42	@ 0x2a
 8004e18:	2202      	movs	r2, #2
 8004e1a:	701a      	strb	r2, [r3, #0]
      break;
 8004e1c:	e0c3      	b.n	8004fa6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8004e1e:	78fa      	ldrb	r2, [r7, #3]
 8004e20:	6879      	ldr	r1, [r7, #4]
 8004e22:	4613      	mov	r3, r2
 8004e24:	011b      	lsls	r3, r3, #4
 8004e26:	1a9b      	subs	r3, r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	440b      	add	r3, r1
 8004e2c:	331a      	adds	r3, #26
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	f040 80b8 	bne.w	8004fa6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8004e36:	78fa      	ldrb	r2, [r7, #3]
 8004e38:	6879      	ldr	r1, [r7, #4]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	011b      	lsls	r3, r3, #4
 8004e3e:	1a9b      	subs	r3, r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	440b      	add	r3, r1
 8004e44:	333c      	adds	r3, #60	@ 0x3c
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10a      	bne.n	8004e62 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e4c:	78fa      	ldrb	r2, [r7, #3]
 8004e4e:	6879      	ldr	r1, [r7, #4]
 8004e50:	4613      	mov	r3, r2
 8004e52:	011b      	lsls	r3, r3, #4
 8004e54:	1a9b      	subs	r3, r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	440b      	add	r3, r1
 8004e5a:	332a      	adds	r3, #42	@ 0x2a
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	701a      	strb	r2, [r3, #0]
      break;
 8004e60:	e0a1      	b.n	8004fa6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e62:	78fa      	ldrb	r2, [r7, #3]
 8004e64:	6879      	ldr	r1, [r7, #4]
 8004e66:	4613      	mov	r3, r2
 8004e68:	011b      	lsls	r3, r3, #4
 8004e6a:	1a9b      	subs	r3, r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	440b      	add	r3, r1
 8004e70:	332a      	adds	r3, #42	@ 0x2a
 8004e72:	2202      	movs	r2, #2
 8004e74:	701a      	strb	r2, [r3, #0]
      break;
 8004e76:	e096      	b.n	8004fa6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004e78:	78bb      	ldrb	r3, [r7, #2]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d120      	bne.n	8004ec0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004e7e:	78fa      	ldrb	r2, [r7, #3]
 8004e80:	6879      	ldr	r1, [r7, #4]
 8004e82:	4613      	mov	r3, r2
 8004e84:	011b      	lsls	r3, r3, #4
 8004e86:	1a9b      	subs	r3, r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	440b      	add	r3, r1
 8004e8c:	333d      	adds	r3, #61	@ 0x3d
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10a      	bne.n	8004eaa <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e94:	78fa      	ldrb	r2, [r7, #3]
 8004e96:	6879      	ldr	r1, [r7, #4]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	011b      	lsls	r3, r3, #4
 8004e9c:	1a9b      	subs	r3, r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	440b      	add	r3, r1
 8004ea2:	332a      	adds	r3, #42	@ 0x2a
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004ea8:	e07e      	b.n	8004fa8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004eaa:	78fa      	ldrb	r2, [r7, #3]
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	011b      	lsls	r3, r3, #4
 8004eb2:	1a9b      	subs	r3, r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	440b      	add	r3, r1
 8004eb8:	332a      	adds	r3, #42	@ 0x2a
 8004eba:	2202      	movs	r2, #2
 8004ebc:	701a      	strb	r2, [r3, #0]
      break;
 8004ebe:	e073      	b.n	8004fa8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004ec0:	78fa      	ldrb	r2, [r7, #3]
 8004ec2:	6879      	ldr	r1, [r7, #4]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	011b      	lsls	r3, r3, #4
 8004ec8:	1a9b      	subs	r3, r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	440b      	add	r3, r1
 8004ece:	333c      	adds	r3, #60	@ 0x3c
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10a      	bne.n	8004eec <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004ed6:	78fa      	ldrb	r2, [r7, #3]
 8004ed8:	6879      	ldr	r1, [r7, #4]
 8004eda:	4613      	mov	r3, r2
 8004edc:	011b      	lsls	r3, r3, #4
 8004ede:	1a9b      	subs	r3, r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	440b      	add	r3, r1
 8004ee4:	332a      	adds	r3, #42	@ 0x2a
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	701a      	strb	r2, [r3, #0]
      break;
 8004eea:	e05d      	b.n	8004fa8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004eec:	78fa      	ldrb	r2, [r7, #3]
 8004eee:	6879      	ldr	r1, [r7, #4]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	011b      	lsls	r3, r3, #4
 8004ef4:	1a9b      	subs	r3, r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	440b      	add	r3, r1
 8004efa:	332a      	adds	r3, #42	@ 0x2a
 8004efc:	2202      	movs	r2, #2
 8004efe:	701a      	strb	r2, [r3, #0]
      break;
 8004f00:	e052      	b.n	8004fa8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004f02:	78bb      	ldrb	r3, [r7, #2]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d120      	bne.n	8004f4a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004f08:	78fa      	ldrb	r2, [r7, #3]
 8004f0a:	6879      	ldr	r1, [r7, #4]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	011b      	lsls	r3, r3, #4
 8004f10:	1a9b      	subs	r3, r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	440b      	add	r3, r1
 8004f16:	333d      	adds	r3, #61	@ 0x3d
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10a      	bne.n	8004f34 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004f1e:	78fa      	ldrb	r2, [r7, #3]
 8004f20:	6879      	ldr	r1, [r7, #4]
 8004f22:	4613      	mov	r3, r2
 8004f24:	011b      	lsls	r3, r3, #4
 8004f26:	1a9b      	subs	r3, r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	440b      	add	r3, r1
 8004f2c:	332a      	adds	r3, #42	@ 0x2a
 8004f2e:	2200      	movs	r2, #0
 8004f30:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004f32:	e039      	b.n	8004fa8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004f34:	78fa      	ldrb	r2, [r7, #3]
 8004f36:	6879      	ldr	r1, [r7, #4]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	1a9b      	subs	r3, r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	440b      	add	r3, r1
 8004f42:	332a      	adds	r3, #42	@ 0x2a
 8004f44:	2202      	movs	r2, #2
 8004f46:	701a      	strb	r2, [r3, #0]
      break;
 8004f48:	e02e      	b.n	8004fa8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004f4a:	78fa      	ldrb	r2, [r7, #3]
 8004f4c:	6879      	ldr	r1, [r7, #4]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	011b      	lsls	r3, r3, #4
 8004f52:	1a9b      	subs	r3, r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	440b      	add	r3, r1
 8004f58:	333c      	adds	r3, #60	@ 0x3c
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10a      	bne.n	8004f76 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004f60:	78fa      	ldrb	r2, [r7, #3]
 8004f62:	6879      	ldr	r1, [r7, #4]
 8004f64:	4613      	mov	r3, r2
 8004f66:	011b      	lsls	r3, r3, #4
 8004f68:	1a9b      	subs	r3, r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	440b      	add	r3, r1
 8004f6e:	332a      	adds	r3, #42	@ 0x2a
 8004f70:	2200      	movs	r2, #0
 8004f72:	701a      	strb	r2, [r3, #0]
      break;
 8004f74:	e018      	b.n	8004fa8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004f76:	78fa      	ldrb	r2, [r7, #3]
 8004f78:	6879      	ldr	r1, [r7, #4]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	011b      	lsls	r3, r3, #4
 8004f7e:	1a9b      	subs	r3, r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	440b      	add	r3, r1
 8004f84:	332a      	adds	r3, #42	@ 0x2a
 8004f86:	2202      	movs	r2, #2
 8004f88:	701a      	strb	r2, [r3, #0]
      break;
 8004f8a:	e00d      	b.n	8004fa8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004f8c:	78fa      	ldrb	r2, [r7, #3]
 8004f8e:	6879      	ldr	r1, [r7, #4]
 8004f90:	4613      	mov	r3, r2
 8004f92:	011b      	lsls	r3, r3, #4
 8004f94:	1a9b      	subs	r3, r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	440b      	add	r3, r1
 8004f9a:	332a      	adds	r3, #42	@ 0x2a
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	701a      	strb	r2, [r3, #0]
      break;
 8004fa0:	e002      	b.n	8004fa8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8004fa2:	bf00      	nop
 8004fa4:	e000      	b.n	8004fa8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8004fa6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004fa8:	78fa      	ldrb	r2, [r7, #3]
 8004faa:	6879      	ldr	r1, [r7, #4]
 8004fac:	4613      	mov	r3, r2
 8004fae:	011b      	lsls	r3, r3, #4
 8004fb0:	1a9b      	subs	r3, r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	440b      	add	r3, r1
 8004fb6:	332c      	adds	r3, #44	@ 0x2c
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004fbc:	78fa      	ldrb	r2, [r7, #3]
 8004fbe:	8b39      	ldrh	r1, [r7, #24]
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	011b      	lsls	r3, r3, #4
 8004fc6:	1a9b      	subs	r3, r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4403      	add	r3, r0
 8004fcc:	3334      	adds	r3, #52	@ 0x34
 8004fce:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004fd0:	78fa      	ldrb	r2, [r7, #3]
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	011b      	lsls	r3, r3, #4
 8004fd8:	1a9b      	subs	r3, r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	440b      	add	r3, r1
 8004fde:	334c      	adds	r3, #76	@ 0x4c
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004fe4:	78fa      	ldrb	r2, [r7, #3]
 8004fe6:	6879      	ldr	r1, [r7, #4]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	011b      	lsls	r3, r3, #4
 8004fec:	1a9b      	subs	r3, r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	440b      	add	r3, r1
 8004ff2:	3338      	adds	r3, #56	@ 0x38
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004ff8:	78fa      	ldrb	r2, [r7, #3]
 8004ffa:	6879      	ldr	r1, [r7, #4]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	011b      	lsls	r3, r3, #4
 8005000:	1a9b      	subs	r3, r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	440b      	add	r3, r1
 8005006:	3315      	adds	r3, #21
 8005008:	78fa      	ldrb	r2, [r7, #3]
 800500a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800500c:	78fa      	ldrb	r2, [r7, #3]
 800500e:	6879      	ldr	r1, [r7, #4]
 8005010:	4613      	mov	r3, r2
 8005012:	011b      	lsls	r3, r3, #4
 8005014:	1a9b      	subs	r3, r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	440b      	add	r3, r1
 800501a:	334d      	adds	r3, #77	@ 0x4d
 800501c:	2200      	movs	r2, #0
 800501e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6818      	ldr	r0, [r3, #0]
 8005024:	78fa      	ldrb	r2, [r7, #3]
 8005026:	4613      	mov	r3, r2
 8005028:	011b      	lsls	r3, r3, #4
 800502a:	1a9b      	subs	r3, r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	3310      	adds	r3, #16
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	4413      	add	r3, r2
 8005034:	1d19      	adds	r1, r3, #4
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	799b      	ldrb	r3, [r3, #6]
 800503a:	461a      	mov	r2, r3
 800503c:	f005 ff96 	bl	800af6c <USB_HC_StartXfer>
 8005040:	4603      	mov	r3, r0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3708      	adds	r7, #8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop

0800504c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4618      	mov	r0, r3
 8005064:	f005 fc8a 	bl	800a97c <USB_GetMode>
 8005068:	4603      	mov	r3, r0
 800506a:	2b01      	cmp	r3, #1
 800506c:	f040 80fb 	bne.w	8005266 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4618      	mov	r0, r3
 8005076:	f005 fc4d 	bl	800a914 <USB_ReadInterrupts>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 80f1 	beq.w	8005264 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4618      	mov	r0, r3
 8005088:	f005 fc44 	bl	800a914 <USB_ReadInterrupts>
 800508c:	4603      	mov	r3, r0
 800508e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005092:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005096:	d104      	bne.n	80050a2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80050a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f005 fc34 	bl	800a914 <USB_ReadInterrupts>
 80050ac:	4603      	mov	r3, r0
 80050ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050b6:	d104      	bne.n	80050c2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80050c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f005 fc24 	bl	800a914 <USB_ReadInterrupts>
 80050cc:	4603      	mov	r3, r0
 80050ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80050d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050d6:	d104      	bne.n	80050e2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80050e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f005 fc14 	bl	800a914 <USB_ReadInterrupts>
 80050ec:	4603      	mov	r3, r0
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d103      	bne.n	80050fe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2202      	movs	r2, #2
 80050fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4618      	mov	r0, r3
 8005104:	f005 fc06 	bl	800a914 <USB_ReadInterrupts>
 8005108:	4603      	mov	r3, r0
 800510a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800510e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005112:	d120      	bne.n	8005156 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800511c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d113      	bne.n	8005156 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800512e:	2110      	movs	r1, #16
 8005130:	6938      	ldr	r0, [r7, #16]
 8005132:	f005 faf9 	bl	800a728 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8005136:	6938      	ldr	r0, [r7, #16]
 8005138:	f005 fb28 	bl	800a78c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	7a5b      	ldrb	r3, [r3, #9]
 8005140:	2b02      	cmp	r3, #2
 8005142:	d105      	bne.n	8005150 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2101      	movs	r1, #1
 800514a:	4618      	mov	r0, r3
 800514c:	f005 fd1a 	bl	800ab84 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f00b f987 	bl	8010464 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4618      	mov	r0, r3
 800515c:	f005 fbda 	bl	800a914 <USB_ReadInterrupts>
 8005160:	4603      	mov	r3, r0
 8005162:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005166:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800516a:	d102      	bne.n	8005172 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f001 fd4d 	bl	8006c0c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4618      	mov	r0, r3
 8005178:	f005 fbcc 	bl	800a914 <USB_ReadInterrupts>
 800517c:	4603      	mov	r3, r0
 800517e:	f003 0308 	and.w	r3, r3, #8
 8005182:	2b08      	cmp	r3, #8
 8005184:	d106      	bne.n	8005194 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f00b f950 	bl	801042c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2208      	movs	r2, #8
 8005192:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4618      	mov	r0, r3
 800519a:	f005 fbbb 	bl	800a914 <USB_ReadInterrupts>
 800519e:	4603      	mov	r3, r0
 80051a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80051a8:	d139      	bne.n	800521e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f006 f956 	bl	800b460 <USB_HC_ReadInterrupt>
 80051b4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80051b6:	2300      	movs	r3, #0
 80051b8:	617b      	str	r3, [r7, #20]
 80051ba:	e025      	b.n	8005208 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f003 030f 	and.w	r3, r3, #15
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	fa22 f303 	lsr.w	r3, r2, r3
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d018      	beq.n	8005202 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051e6:	d106      	bne.n	80051f6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	4619      	mov	r1, r3
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f905 	bl	80053fe <HCD_HC_IN_IRQHandler>
 80051f4:	e005      	b.n	8005202 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	4619      	mov	r1, r3
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 ff67 	bl	80060d0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	3301      	adds	r3, #1
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	795b      	ldrb	r3, [r3, #5]
 800520c:	461a      	mov	r2, r3
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	4293      	cmp	r3, r2
 8005212:	d3d3      	bcc.n	80051bc <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800521c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4618      	mov	r0, r3
 8005224:	f005 fb76 	bl	800a914 <USB_ReadInterrupts>
 8005228:	4603      	mov	r3, r0
 800522a:	f003 0310 	and.w	r3, r3, #16
 800522e:	2b10      	cmp	r3, #16
 8005230:	d101      	bne.n	8005236 <HAL_HCD_IRQHandler+0x1ea>
 8005232:	2301      	movs	r3, #1
 8005234:	e000      	b.n	8005238 <HAL_HCD_IRQHandler+0x1ec>
 8005236:	2300      	movs	r3, #0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d014      	beq.n	8005266 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699a      	ldr	r2, [r3, #24]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0210 	bic.w	r2, r2, #16
 800524a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f001 fbfe 	bl	8006a4e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	699a      	ldr	r2, [r3, #24]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f042 0210 	orr.w	r2, r2, #16
 8005260:	619a      	str	r2, [r3, #24]
 8005262:	e000      	b.n	8005266 <HAL_HCD_IRQHandler+0x21a>
      return;
 8005264:	bf00      	nop
    }
  }
}
 8005266:	3718      	adds	r7, #24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800527a:	2b01      	cmp	r3, #1
 800527c:	d101      	bne.n	8005282 <HAL_HCD_Start+0x16>
 800527e:	2302      	movs	r3, #2
 8005280:	e013      	b.n	80052aa <HAL_HCD_Start+0x3e>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2101      	movs	r1, #1
 8005290:	4618      	mov	r0, r3
 8005292:	f005 fcde 	bl	800ac52 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f005 f9d6 	bl	800a64c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b082      	sub	sp, #8
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d101      	bne.n	80052c8 <HAL_HCD_Stop+0x16>
 80052c4:	2302      	movs	r3, #2
 80052c6:	e00d      	b.n	80052e4 <HAL_HCD_Stop+0x32>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f006 fa31 	bl	800b73c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f005 fc80 	bl	800abfe <USB_ResetPort>
 80052fe:	4603      	mov	r3, r0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	460b      	mov	r3, r1
 8005312:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005314:	78fa      	ldrb	r2, [r7, #3]
 8005316:	6879      	ldr	r1, [r7, #4]
 8005318:	4613      	mov	r3, r2
 800531a:	011b      	lsls	r3, r3, #4
 800531c:	1a9b      	subs	r3, r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	440b      	add	r3, r1
 8005322:	334c      	adds	r3, #76	@ 0x4c
 8005324:	781b      	ldrb	r3, [r3, #0]
}
 8005326:	4618      	mov	r0, r3
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8005332:	b480      	push	{r7}
 8005334:	b083      	sub	sp, #12
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	460b      	mov	r3, r1
 800533c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800533e:	78fa      	ldrb	r2, [r7, #3]
 8005340:	6879      	ldr	r1, [r7, #4]
 8005342:	4613      	mov	r3, r2
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	1a9b      	subs	r3, r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	440b      	add	r3, r1
 800534c:	3338      	adds	r3, #56	@ 0x38
 800534e:	681b      	ldr	r3, [r3, #0]
}
 8005350:	4618      	mov	r0, r3
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4618      	mov	r0, r3
 800536a:	f005 fcc2 	bl	800acf2 <USB_GetCurrentFrame>
 800536e:	4603      	mov	r3, r0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3708      	adds	r7, #8
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4618      	mov	r0, r3
 8005386:	f005 fc9d 	bl	800acc4 <USB_GetHostSpeed>
 800538a:	4603      	mov	r3, r0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	460b      	mov	r3, r1
 800539e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80053a0:	78fa      	ldrb	r2, [r7, #3]
 80053a2:	6879      	ldr	r1, [r7, #4]
 80053a4:	4613      	mov	r3, r2
 80053a6:	011b      	lsls	r3, r3, #4
 80053a8:	1a9b      	subs	r3, r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	440b      	add	r3, r1
 80053ae:	331a      	adds	r3, #26
 80053b0:	2200      	movs	r2, #0
 80053b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80053b4:	78fa      	ldrb	r2, [r7, #3]
 80053b6:	6879      	ldr	r1, [r7, #4]
 80053b8:	4613      	mov	r3, r2
 80053ba:	011b      	lsls	r3, r3, #4
 80053bc:	1a9b      	subs	r3, r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	440b      	add	r3, r1
 80053c2:	331b      	adds	r3, #27
 80053c4:	2200      	movs	r2, #0
 80053c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80053c8:	78fa      	ldrb	r2, [r7, #3]
 80053ca:	6879      	ldr	r1, [r7, #4]
 80053cc:	4613      	mov	r3, r2
 80053ce:	011b      	lsls	r3, r3, #4
 80053d0:	1a9b      	subs	r3, r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	440b      	add	r3, r1
 80053d6:	3325      	adds	r3, #37	@ 0x25
 80053d8:	2200      	movs	r2, #0
 80053da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80053dc:	78fa      	ldrb	r2, [r7, #3]
 80053de:	6879      	ldr	r1, [r7, #4]
 80053e0:	4613      	mov	r3, r2
 80053e2:	011b      	lsls	r3, r3, #4
 80053e4:	1a9b      	subs	r3, r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	440b      	add	r3, r1
 80053ea:	3324      	adds	r3, #36	@ 0x24
 80053ec:	2200      	movs	r2, #0
 80053ee:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b086      	sub	sp, #24
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
 8005406:	460b      	mov	r3, r1
 8005408:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	78fa      	ldrb	r2, [r7, #3]
 800541a:	4611      	mov	r1, r2
 800541c:	4618      	mov	r0, r3
 800541e:	f005 fa8c 	bl	800a93a <USB_ReadChInterrupts>
 8005422:	4603      	mov	r3, r0
 8005424:	f003 0304 	and.w	r3, r3, #4
 8005428:	2b04      	cmp	r3, #4
 800542a:	d11a      	bne.n	8005462 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800542c:	78fb      	ldrb	r3, [r7, #3]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	4413      	add	r3, r2
 8005434:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005438:	461a      	mov	r2, r3
 800543a:	2304      	movs	r3, #4
 800543c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800543e:	78fa      	ldrb	r2, [r7, #3]
 8005440:	6879      	ldr	r1, [r7, #4]
 8005442:	4613      	mov	r3, r2
 8005444:	011b      	lsls	r3, r3, #4
 8005446:	1a9b      	subs	r3, r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	440b      	add	r3, r1
 800544c:	334d      	adds	r3, #77	@ 0x4d
 800544e:	2207      	movs	r2, #7
 8005450:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	78fa      	ldrb	r2, [r7, #3]
 8005458:	4611      	mov	r1, r2
 800545a:	4618      	mov	r0, r3
 800545c:	f006 f811 	bl	800b482 <USB_HC_Halt>
 8005460:	e09e      	b.n	80055a0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	78fa      	ldrb	r2, [r7, #3]
 8005468:	4611      	mov	r1, r2
 800546a:	4618      	mov	r0, r3
 800546c:	f005 fa65 	bl	800a93a <USB_ReadChInterrupts>
 8005470:	4603      	mov	r3, r0
 8005472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005476:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800547a:	d11b      	bne.n	80054b4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800547c:	78fb      	ldrb	r3, [r7, #3]
 800547e:	015a      	lsls	r2, r3, #5
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	4413      	add	r3, r2
 8005484:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005488:	461a      	mov	r2, r3
 800548a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800548e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8005490:	78fa      	ldrb	r2, [r7, #3]
 8005492:	6879      	ldr	r1, [r7, #4]
 8005494:	4613      	mov	r3, r2
 8005496:	011b      	lsls	r3, r3, #4
 8005498:	1a9b      	subs	r3, r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	440b      	add	r3, r1
 800549e:	334d      	adds	r3, #77	@ 0x4d
 80054a0:	2208      	movs	r2, #8
 80054a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	78fa      	ldrb	r2, [r7, #3]
 80054aa:	4611      	mov	r1, r2
 80054ac:	4618      	mov	r0, r3
 80054ae:	f005 ffe8 	bl	800b482 <USB_HC_Halt>
 80054b2:	e075      	b.n	80055a0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	78fa      	ldrb	r2, [r7, #3]
 80054ba:	4611      	mov	r1, r2
 80054bc:	4618      	mov	r0, r3
 80054be:	f005 fa3c 	bl	800a93a <USB_ReadChInterrupts>
 80054c2:	4603      	mov	r3, r0
 80054c4:	f003 0308 	and.w	r3, r3, #8
 80054c8:	2b08      	cmp	r3, #8
 80054ca:	d11a      	bne.n	8005502 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80054cc:	78fb      	ldrb	r3, [r7, #3]
 80054ce:	015a      	lsls	r2, r3, #5
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054d8:	461a      	mov	r2, r3
 80054da:	2308      	movs	r3, #8
 80054dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80054de:	78fa      	ldrb	r2, [r7, #3]
 80054e0:	6879      	ldr	r1, [r7, #4]
 80054e2:	4613      	mov	r3, r2
 80054e4:	011b      	lsls	r3, r3, #4
 80054e6:	1a9b      	subs	r3, r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	440b      	add	r3, r1
 80054ec:	334d      	adds	r3, #77	@ 0x4d
 80054ee:	2206      	movs	r2, #6
 80054f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	78fa      	ldrb	r2, [r7, #3]
 80054f8:	4611      	mov	r1, r2
 80054fa:	4618      	mov	r0, r3
 80054fc:	f005 ffc1 	bl	800b482 <USB_HC_Halt>
 8005500:	e04e      	b.n	80055a0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	78fa      	ldrb	r2, [r7, #3]
 8005508:	4611      	mov	r1, r2
 800550a:	4618      	mov	r0, r3
 800550c:	f005 fa15 	bl	800a93a <USB_ReadChInterrupts>
 8005510:	4603      	mov	r3, r0
 8005512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005516:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800551a:	d11b      	bne.n	8005554 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800551c:	78fb      	ldrb	r3, [r7, #3]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	4413      	add	r3, r2
 8005524:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005528:	461a      	mov	r2, r3
 800552a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800552e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005530:	78fa      	ldrb	r2, [r7, #3]
 8005532:	6879      	ldr	r1, [r7, #4]
 8005534:	4613      	mov	r3, r2
 8005536:	011b      	lsls	r3, r3, #4
 8005538:	1a9b      	subs	r3, r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	440b      	add	r3, r1
 800553e:	334d      	adds	r3, #77	@ 0x4d
 8005540:	2209      	movs	r2, #9
 8005542:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	78fa      	ldrb	r2, [r7, #3]
 800554a:	4611      	mov	r1, r2
 800554c:	4618      	mov	r0, r3
 800554e:	f005 ff98 	bl	800b482 <USB_HC_Halt>
 8005552:	e025      	b.n	80055a0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	78fa      	ldrb	r2, [r7, #3]
 800555a:	4611      	mov	r1, r2
 800555c:	4618      	mov	r0, r3
 800555e:	f005 f9ec 	bl	800a93a <USB_ReadChInterrupts>
 8005562:	4603      	mov	r3, r0
 8005564:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005568:	2b80      	cmp	r3, #128	@ 0x80
 800556a:	d119      	bne.n	80055a0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800556c:	78fb      	ldrb	r3, [r7, #3]
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	4413      	add	r3, r2
 8005574:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005578:	461a      	mov	r2, r3
 800557a:	2380      	movs	r3, #128	@ 0x80
 800557c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800557e:	78fa      	ldrb	r2, [r7, #3]
 8005580:	6879      	ldr	r1, [r7, #4]
 8005582:	4613      	mov	r3, r2
 8005584:	011b      	lsls	r3, r3, #4
 8005586:	1a9b      	subs	r3, r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	440b      	add	r3, r1
 800558c:	334d      	adds	r3, #77	@ 0x4d
 800558e:	2207      	movs	r2, #7
 8005590:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	78fa      	ldrb	r2, [r7, #3]
 8005598:	4611      	mov	r1, r2
 800559a:	4618      	mov	r0, r3
 800559c:	f005 ff71 	bl	800b482 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	78fa      	ldrb	r2, [r7, #3]
 80055a6:	4611      	mov	r1, r2
 80055a8:	4618      	mov	r0, r3
 80055aa:	f005 f9c6 	bl	800a93a <USB_ReadChInterrupts>
 80055ae:	4603      	mov	r3, r0
 80055b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055b8:	d112      	bne.n	80055e0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	78fa      	ldrb	r2, [r7, #3]
 80055c0:	4611      	mov	r1, r2
 80055c2:	4618      	mov	r0, r3
 80055c4:	f005 ff5d 	bl	800b482 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80055c8:	78fb      	ldrb	r3, [r7, #3]
 80055ca:	015a      	lsls	r2, r3, #5
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	4413      	add	r3, r2
 80055d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055d4:	461a      	mov	r2, r3
 80055d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80055da:	6093      	str	r3, [r2, #8]
 80055dc:	f000 bd75 	b.w	80060ca <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	78fa      	ldrb	r2, [r7, #3]
 80055e6:	4611      	mov	r1, r2
 80055e8:	4618      	mov	r0, r3
 80055ea:	f005 f9a6 	bl	800a93a <USB_ReadChInterrupts>
 80055ee:	4603      	mov	r3, r0
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	f040 8128 	bne.w	800584a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80055fa:	78fb      	ldrb	r3, [r7, #3]
 80055fc:	015a      	lsls	r2, r3, #5
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	4413      	add	r3, r2
 8005602:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005606:	461a      	mov	r2, r3
 8005608:	2320      	movs	r3, #32
 800560a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800560c:	78fa      	ldrb	r2, [r7, #3]
 800560e:	6879      	ldr	r1, [r7, #4]
 8005610:	4613      	mov	r3, r2
 8005612:	011b      	lsls	r3, r3, #4
 8005614:	1a9b      	subs	r3, r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	440b      	add	r3, r1
 800561a:	331b      	adds	r3, #27
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d119      	bne.n	8005656 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005622:	78fa      	ldrb	r2, [r7, #3]
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	4613      	mov	r3, r2
 8005628:	011b      	lsls	r3, r3, #4
 800562a:	1a9b      	subs	r3, r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	440b      	add	r3, r1
 8005630:	331b      	adds	r3, #27
 8005632:	2200      	movs	r2, #0
 8005634:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005636:	78fb      	ldrb	r3, [r7, #3]
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	4413      	add	r3, r2
 800563e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	78fa      	ldrb	r2, [r7, #3]
 8005646:	0151      	lsls	r1, r2, #5
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	440a      	add	r2, r1
 800564c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005650:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005654:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	799b      	ldrb	r3, [r3, #6]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d01b      	beq.n	8005696 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800565e:	78fa      	ldrb	r2, [r7, #3]
 8005660:	6879      	ldr	r1, [r7, #4]
 8005662:	4613      	mov	r3, r2
 8005664:	011b      	lsls	r3, r3, #4
 8005666:	1a9b      	subs	r3, r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	440b      	add	r3, r1
 800566c:	3330      	adds	r3, #48	@ 0x30
 800566e:	6819      	ldr	r1, [r3, #0]
 8005670:	78fb      	ldrb	r3, [r7, #3]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	4413      	add	r3, r2
 8005678:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005682:	78fa      	ldrb	r2, [r7, #3]
 8005684:	1ac9      	subs	r1, r1, r3
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	4613      	mov	r3, r2
 800568a:	011b      	lsls	r3, r3, #4
 800568c:	1a9b      	subs	r3, r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4403      	add	r3, r0
 8005692:	3338      	adds	r3, #56	@ 0x38
 8005694:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8005696:	78fa      	ldrb	r2, [r7, #3]
 8005698:	6879      	ldr	r1, [r7, #4]
 800569a:	4613      	mov	r3, r2
 800569c:	011b      	lsls	r3, r3, #4
 800569e:	1a9b      	subs	r3, r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	440b      	add	r3, r1
 80056a4:	334d      	adds	r3, #77	@ 0x4d
 80056a6:	2201      	movs	r2, #1
 80056a8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80056aa:	78fa      	ldrb	r2, [r7, #3]
 80056ac:	6879      	ldr	r1, [r7, #4]
 80056ae:	4613      	mov	r3, r2
 80056b0:	011b      	lsls	r3, r3, #4
 80056b2:	1a9b      	subs	r3, r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	440b      	add	r3, r1
 80056b8:	3344      	adds	r3, #68	@ 0x44
 80056ba:	2200      	movs	r2, #0
 80056bc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80056be:	78fb      	ldrb	r3, [r7, #3]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056ca:	461a      	mov	r2, r3
 80056cc:	2301      	movs	r3, #1
 80056ce:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80056d0:	78fa      	ldrb	r2, [r7, #3]
 80056d2:	6879      	ldr	r1, [r7, #4]
 80056d4:	4613      	mov	r3, r2
 80056d6:	011b      	lsls	r3, r3, #4
 80056d8:	1a9b      	subs	r3, r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	440b      	add	r3, r1
 80056de:	3326      	adds	r3, #38	@ 0x26
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80056e6:	78fa      	ldrb	r2, [r7, #3]
 80056e8:	6879      	ldr	r1, [r7, #4]
 80056ea:	4613      	mov	r3, r2
 80056ec:	011b      	lsls	r3, r3, #4
 80056ee:	1a9b      	subs	r3, r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	440b      	add	r3, r1
 80056f4:	3326      	adds	r3, #38	@ 0x26
 80056f6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d110      	bne.n	800571e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	78fa      	ldrb	r2, [r7, #3]
 8005702:	4611      	mov	r1, r2
 8005704:	4618      	mov	r0, r3
 8005706:	f005 febc 	bl	800b482 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800570a:	78fb      	ldrb	r3, [r7, #3]
 800570c:	015a      	lsls	r2, r3, #5
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	4413      	add	r3, r2
 8005712:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005716:	461a      	mov	r2, r3
 8005718:	2310      	movs	r3, #16
 800571a:	6093      	str	r3, [r2, #8]
 800571c:	e03d      	b.n	800579a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800571e:	78fa      	ldrb	r2, [r7, #3]
 8005720:	6879      	ldr	r1, [r7, #4]
 8005722:	4613      	mov	r3, r2
 8005724:	011b      	lsls	r3, r3, #4
 8005726:	1a9b      	subs	r3, r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	440b      	add	r3, r1
 800572c:	3326      	adds	r3, #38	@ 0x26
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2b03      	cmp	r3, #3
 8005732:	d00a      	beq.n	800574a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8005734:	78fa      	ldrb	r2, [r7, #3]
 8005736:	6879      	ldr	r1, [r7, #4]
 8005738:	4613      	mov	r3, r2
 800573a:	011b      	lsls	r3, r3, #4
 800573c:	1a9b      	subs	r3, r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	440b      	add	r3, r1
 8005742:	3326      	adds	r3, #38	@ 0x26
 8005744:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005746:	2b01      	cmp	r3, #1
 8005748:	d127      	bne.n	800579a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800574a:	78fb      	ldrb	r3, [r7, #3]
 800574c:	015a      	lsls	r2, r3, #5
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	4413      	add	r3, r2
 8005752:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	78fa      	ldrb	r2, [r7, #3]
 800575a:	0151      	lsls	r1, r2, #5
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	440a      	add	r2, r1
 8005760:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005764:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005768:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800576a:	78fa      	ldrb	r2, [r7, #3]
 800576c:	6879      	ldr	r1, [r7, #4]
 800576e:	4613      	mov	r3, r2
 8005770:	011b      	lsls	r3, r3, #4
 8005772:	1a9b      	subs	r3, r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	440b      	add	r3, r1
 8005778:	334c      	adds	r3, #76	@ 0x4c
 800577a:	2201      	movs	r2, #1
 800577c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800577e:	78fa      	ldrb	r2, [r7, #3]
 8005780:	6879      	ldr	r1, [r7, #4]
 8005782:	4613      	mov	r3, r2
 8005784:	011b      	lsls	r3, r3, #4
 8005786:	1a9b      	subs	r3, r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	440b      	add	r3, r1
 800578c:	334c      	adds	r3, #76	@ 0x4c
 800578e:	781a      	ldrb	r2, [r3, #0]
 8005790:	78fb      	ldrb	r3, [r7, #3]
 8005792:	4619      	mov	r1, r3
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f00a fe73 	bl	8010480 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	799b      	ldrb	r3, [r3, #6]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d13b      	bne.n	800581a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80057a2:	78fa      	ldrb	r2, [r7, #3]
 80057a4:	6879      	ldr	r1, [r7, #4]
 80057a6:	4613      	mov	r3, r2
 80057a8:	011b      	lsls	r3, r3, #4
 80057aa:	1a9b      	subs	r3, r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	440b      	add	r3, r1
 80057b0:	3338      	adds	r3, #56	@ 0x38
 80057b2:	6819      	ldr	r1, [r3, #0]
 80057b4:	78fa      	ldrb	r2, [r7, #3]
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	4613      	mov	r3, r2
 80057ba:	011b      	lsls	r3, r3, #4
 80057bc:	1a9b      	subs	r3, r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4403      	add	r3, r0
 80057c2:	3328      	adds	r3, #40	@ 0x28
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	440b      	add	r3, r1
 80057c8:	1e59      	subs	r1, r3, #1
 80057ca:	78fa      	ldrb	r2, [r7, #3]
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	4613      	mov	r3, r2
 80057d0:	011b      	lsls	r3, r3, #4
 80057d2:	1a9b      	subs	r3, r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4403      	add	r3, r0
 80057d8:	3328      	adds	r3, #40	@ 0x28
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 8470 	beq.w	80060ca <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80057ea:	78fa      	ldrb	r2, [r7, #3]
 80057ec:	6879      	ldr	r1, [r7, #4]
 80057ee:	4613      	mov	r3, r2
 80057f0:	011b      	lsls	r3, r3, #4
 80057f2:	1a9b      	subs	r3, r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	440b      	add	r3, r1
 80057f8:	333c      	adds	r3, #60	@ 0x3c
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	78fa      	ldrb	r2, [r7, #3]
 80057fe:	f083 0301 	eor.w	r3, r3, #1
 8005802:	b2d8      	uxtb	r0, r3
 8005804:	6879      	ldr	r1, [r7, #4]
 8005806:	4613      	mov	r3, r2
 8005808:	011b      	lsls	r3, r3, #4
 800580a:	1a9b      	subs	r3, r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	440b      	add	r3, r1
 8005810:	333c      	adds	r3, #60	@ 0x3c
 8005812:	4602      	mov	r2, r0
 8005814:	701a      	strb	r2, [r3, #0]
 8005816:	f000 bc58 	b.w	80060ca <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800581a:	78fa      	ldrb	r2, [r7, #3]
 800581c:	6879      	ldr	r1, [r7, #4]
 800581e:	4613      	mov	r3, r2
 8005820:	011b      	lsls	r3, r3, #4
 8005822:	1a9b      	subs	r3, r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	440b      	add	r3, r1
 8005828:	333c      	adds	r3, #60	@ 0x3c
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	78fa      	ldrb	r2, [r7, #3]
 800582e:	f083 0301 	eor.w	r3, r3, #1
 8005832:	b2d8      	uxtb	r0, r3
 8005834:	6879      	ldr	r1, [r7, #4]
 8005836:	4613      	mov	r3, r2
 8005838:	011b      	lsls	r3, r3, #4
 800583a:	1a9b      	subs	r3, r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	440b      	add	r3, r1
 8005840:	333c      	adds	r3, #60	@ 0x3c
 8005842:	4602      	mov	r2, r0
 8005844:	701a      	strb	r2, [r3, #0]
 8005846:	f000 bc40 	b.w	80060ca <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	78fa      	ldrb	r2, [r7, #3]
 8005850:	4611      	mov	r1, r2
 8005852:	4618      	mov	r0, r3
 8005854:	f005 f871 	bl	800a93a <USB_ReadChInterrupts>
 8005858:	4603      	mov	r3, r0
 800585a:	f003 0320 	and.w	r3, r3, #32
 800585e:	2b20      	cmp	r3, #32
 8005860:	d131      	bne.n	80058c6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005862:	78fb      	ldrb	r3, [r7, #3]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	4413      	add	r3, r2
 800586a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800586e:	461a      	mov	r2, r3
 8005870:	2320      	movs	r3, #32
 8005872:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8005874:	78fa      	ldrb	r2, [r7, #3]
 8005876:	6879      	ldr	r1, [r7, #4]
 8005878:	4613      	mov	r3, r2
 800587a:	011b      	lsls	r3, r3, #4
 800587c:	1a9b      	subs	r3, r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	440b      	add	r3, r1
 8005882:	331a      	adds	r3, #26
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	2b01      	cmp	r3, #1
 8005888:	f040 841f 	bne.w	80060ca <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800588c:	78fa      	ldrb	r2, [r7, #3]
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	4613      	mov	r3, r2
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	1a9b      	subs	r3, r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	440b      	add	r3, r1
 800589a:	331b      	adds	r3, #27
 800589c:	2201      	movs	r2, #1
 800589e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80058a0:	78fa      	ldrb	r2, [r7, #3]
 80058a2:	6879      	ldr	r1, [r7, #4]
 80058a4:	4613      	mov	r3, r2
 80058a6:	011b      	lsls	r3, r3, #4
 80058a8:	1a9b      	subs	r3, r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	440b      	add	r3, r1
 80058ae:	334d      	adds	r3, #77	@ 0x4d
 80058b0:	2203      	movs	r2, #3
 80058b2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	78fa      	ldrb	r2, [r7, #3]
 80058ba:	4611      	mov	r1, r2
 80058bc:	4618      	mov	r0, r3
 80058be:	f005 fde0 	bl	800b482 <USB_HC_Halt>
 80058c2:	f000 bc02 	b.w	80060ca <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	78fa      	ldrb	r2, [r7, #3]
 80058cc:	4611      	mov	r1, r2
 80058ce:	4618      	mov	r0, r3
 80058d0:	f005 f833 	bl	800a93a <USB_ReadChInterrupts>
 80058d4:	4603      	mov	r3, r0
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b02      	cmp	r3, #2
 80058dc:	f040 8305 	bne.w	8005eea <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80058e0:	78fb      	ldrb	r3, [r7, #3]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058ec:	461a      	mov	r2, r3
 80058ee:	2302      	movs	r3, #2
 80058f0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80058f2:	78fa      	ldrb	r2, [r7, #3]
 80058f4:	6879      	ldr	r1, [r7, #4]
 80058f6:	4613      	mov	r3, r2
 80058f8:	011b      	lsls	r3, r3, #4
 80058fa:	1a9b      	subs	r3, r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	440b      	add	r3, r1
 8005900:	334d      	adds	r3, #77	@ 0x4d
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d114      	bne.n	8005932 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005908:	78fa      	ldrb	r2, [r7, #3]
 800590a:	6879      	ldr	r1, [r7, #4]
 800590c:	4613      	mov	r3, r2
 800590e:	011b      	lsls	r3, r3, #4
 8005910:	1a9b      	subs	r3, r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	440b      	add	r3, r1
 8005916:	334d      	adds	r3, #77	@ 0x4d
 8005918:	2202      	movs	r2, #2
 800591a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800591c:	78fa      	ldrb	r2, [r7, #3]
 800591e:	6879      	ldr	r1, [r7, #4]
 8005920:	4613      	mov	r3, r2
 8005922:	011b      	lsls	r3, r3, #4
 8005924:	1a9b      	subs	r3, r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	440b      	add	r3, r1
 800592a:	334c      	adds	r3, #76	@ 0x4c
 800592c:	2201      	movs	r2, #1
 800592e:	701a      	strb	r2, [r3, #0]
 8005930:	e2cc      	b.n	8005ecc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005932:	78fa      	ldrb	r2, [r7, #3]
 8005934:	6879      	ldr	r1, [r7, #4]
 8005936:	4613      	mov	r3, r2
 8005938:	011b      	lsls	r3, r3, #4
 800593a:	1a9b      	subs	r3, r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	440b      	add	r3, r1
 8005940:	334d      	adds	r3, #77	@ 0x4d
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	2b06      	cmp	r3, #6
 8005946:	d114      	bne.n	8005972 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005948:	78fa      	ldrb	r2, [r7, #3]
 800594a:	6879      	ldr	r1, [r7, #4]
 800594c:	4613      	mov	r3, r2
 800594e:	011b      	lsls	r3, r3, #4
 8005950:	1a9b      	subs	r3, r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	440b      	add	r3, r1
 8005956:	334d      	adds	r3, #77	@ 0x4d
 8005958:	2202      	movs	r2, #2
 800595a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800595c:	78fa      	ldrb	r2, [r7, #3]
 800595e:	6879      	ldr	r1, [r7, #4]
 8005960:	4613      	mov	r3, r2
 8005962:	011b      	lsls	r3, r3, #4
 8005964:	1a9b      	subs	r3, r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	440b      	add	r3, r1
 800596a:	334c      	adds	r3, #76	@ 0x4c
 800596c:	2205      	movs	r2, #5
 800596e:	701a      	strb	r2, [r3, #0]
 8005970:	e2ac      	b.n	8005ecc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005972:	78fa      	ldrb	r2, [r7, #3]
 8005974:	6879      	ldr	r1, [r7, #4]
 8005976:	4613      	mov	r3, r2
 8005978:	011b      	lsls	r3, r3, #4
 800597a:	1a9b      	subs	r3, r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	440b      	add	r3, r1
 8005980:	334d      	adds	r3, #77	@ 0x4d
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	2b07      	cmp	r3, #7
 8005986:	d00b      	beq.n	80059a0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005988:	78fa      	ldrb	r2, [r7, #3]
 800598a:	6879      	ldr	r1, [r7, #4]
 800598c:	4613      	mov	r3, r2
 800598e:	011b      	lsls	r3, r3, #4
 8005990:	1a9b      	subs	r3, r3, r2
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	440b      	add	r3, r1
 8005996:	334d      	adds	r3, #77	@ 0x4d
 8005998:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800599a:	2b09      	cmp	r3, #9
 800599c:	f040 80a6 	bne.w	8005aec <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80059a0:	78fa      	ldrb	r2, [r7, #3]
 80059a2:	6879      	ldr	r1, [r7, #4]
 80059a4:	4613      	mov	r3, r2
 80059a6:	011b      	lsls	r3, r3, #4
 80059a8:	1a9b      	subs	r3, r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	440b      	add	r3, r1
 80059ae:	334d      	adds	r3, #77	@ 0x4d
 80059b0:	2202      	movs	r2, #2
 80059b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80059b4:	78fa      	ldrb	r2, [r7, #3]
 80059b6:	6879      	ldr	r1, [r7, #4]
 80059b8:	4613      	mov	r3, r2
 80059ba:	011b      	lsls	r3, r3, #4
 80059bc:	1a9b      	subs	r3, r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	440b      	add	r3, r1
 80059c2:	3344      	adds	r3, #68	@ 0x44
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	1c59      	adds	r1, r3, #1
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	4613      	mov	r3, r2
 80059cc:	011b      	lsls	r3, r3, #4
 80059ce:	1a9b      	subs	r3, r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4403      	add	r3, r0
 80059d4:	3344      	adds	r3, #68	@ 0x44
 80059d6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80059d8:	78fa      	ldrb	r2, [r7, #3]
 80059da:	6879      	ldr	r1, [r7, #4]
 80059dc:	4613      	mov	r3, r2
 80059de:	011b      	lsls	r3, r3, #4
 80059e0:	1a9b      	subs	r3, r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	440b      	add	r3, r1
 80059e6:	3344      	adds	r3, #68	@ 0x44
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d943      	bls.n	8005a76 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80059ee:	78fa      	ldrb	r2, [r7, #3]
 80059f0:	6879      	ldr	r1, [r7, #4]
 80059f2:	4613      	mov	r3, r2
 80059f4:	011b      	lsls	r3, r3, #4
 80059f6:	1a9b      	subs	r3, r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	440b      	add	r3, r1
 80059fc:	3344      	adds	r3, #68	@ 0x44
 80059fe:	2200      	movs	r2, #0
 8005a00:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8005a02:	78fa      	ldrb	r2, [r7, #3]
 8005a04:	6879      	ldr	r1, [r7, #4]
 8005a06:	4613      	mov	r3, r2
 8005a08:	011b      	lsls	r3, r3, #4
 8005a0a:	1a9b      	subs	r3, r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	440b      	add	r3, r1
 8005a10:	331a      	adds	r3, #26
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d123      	bne.n	8005a60 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8005a18:	78fa      	ldrb	r2, [r7, #3]
 8005a1a:	6879      	ldr	r1, [r7, #4]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	011b      	lsls	r3, r3, #4
 8005a20:	1a9b      	subs	r3, r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	440b      	add	r3, r1
 8005a26:	331b      	adds	r3, #27
 8005a28:	2200      	movs	r2, #0
 8005a2a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8005a2c:	78fa      	ldrb	r2, [r7, #3]
 8005a2e:	6879      	ldr	r1, [r7, #4]
 8005a30:	4613      	mov	r3, r2
 8005a32:	011b      	lsls	r3, r3, #4
 8005a34:	1a9b      	subs	r3, r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	440b      	add	r3, r1
 8005a3a:	331c      	adds	r3, #28
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005a40:	78fb      	ldrb	r3, [r7, #3]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	78fa      	ldrb	r2, [r7, #3]
 8005a50:	0151      	lsls	r1, r2, #5
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	440a      	add	r2, r1
 8005a56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a5e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005a60:	78fa      	ldrb	r2, [r7, #3]
 8005a62:	6879      	ldr	r1, [r7, #4]
 8005a64:	4613      	mov	r3, r2
 8005a66:	011b      	lsls	r3, r3, #4
 8005a68:	1a9b      	subs	r3, r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	440b      	add	r3, r1
 8005a6e:	334c      	adds	r3, #76	@ 0x4c
 8005a70:	2204      	movs	r2, #4
 8005a72:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005a74:	e229      	b.n	8005eca <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005a76:	78fa      	ldrb	r2, [r7, #3]
 8005a78:	6879      	ldr	r1, [r7, #4]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	011b      	lsls	r3, r3, #4
 8005a7e:	1a9b      	subs	r3, r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	440b      	add	r3, r1
 8005a84:	334c      	adds	r3, #76	@ 0x4c
 8005a86:	2202      	movs	r2, #2
 8005a88:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005a8a:	78fa      	ldrb	r2, [r7, #3]
 8005a8c:	6879      	ldr	r1, [r7, #4]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	011b      	lsls	r3, r3, #4
 8005a92:	1a9b      	subs	r3, r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	440b      	add	r3, r1
 8005a98:	3326      	adds	r3, #38	@ 0x26
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00b      	beq.n	8005ab8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005aa0:	78fa      	ldrb	r2, [r7, #3]
 8005aa2:	6879      	ldr	r1, [r7, #4]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	011b      	lsls	r3, r3, #4
 8005aa8:	1a9b      	subs	r3, r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	440b      	add	r3, r1
 8005aae:	3326      	adds	r3, #38	@ 0x26
 8005ab0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	f040 8209 	bne.w	8005eca <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005ab8:	78fb      	ldrb	r3, [r7, #3]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005ace:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ad6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005ad8:	78fb      	ldrb	r3, [r7, #3]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005aea:	e1ee      	b.n	8005eca <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005aec:	78fa      	ldrb	r2, [r7, #3]
 8005aee:	6879      	ldr	r1, [r7, #4]
 8005af0:	4613      	mov	r3, r2
 8005af2:	011b      	lsls	r3, r3, #4
 8005af4:	1a9b      	subs	r3, r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	440b      	add	r3, r1
 8005afa:	334d      	adds	r3, #77	@ 0x4d
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	2b05      	cmp	r3, #5
 8005b00:	f040 80c8 	bne.w	8005c94 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005b04:	78fa      	ldrb	r2, [r7, #3]
 8005b06:	6879      	ldr	r1, [r7, #4]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	011b      	lsls	r3, r3, #4
 8005b0c:	1a9b      	subs	r3, r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	440b      	add	r3, r1
 8005b12:	334d      	adds	r3, #77	@ 0x4d
 8005b14:	2202      	movs	r2, #2
 8005b16:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005b18:	78fa      	ldrb	r2, [r7, #3]
 8005b1a:	6879      	ldr	r1, [r7, #4]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	011b      	lsls	r3, r3, #4
 8005b20:	1a9b      	subs	r3, r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	440b      	add	r3, r1
 8005b26:	331b      	adds	r3, #27
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	f040 81ce 	bne.w	8005ecc <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005b30:	78fa      	ldrb	r2, [r7, #3]
 8005b32:	6879      	ldr	r1, [r7, #4]
 8005b34:	4613      	mov	r3, r2
 8005b36:	011b      	lsls	r3, r3, #4
 8005b38:	1a9b      	subs	r3, r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	440b      	add	r3, r1
 8005b3e:	3326      	adds	r3, #38	@ 0x26
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	2b03      	cmp	r3, #3
 8005b44:	d16b      	bne.n	8005c1e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8005b46:	78fa      	ldrb	r2, [r7, #3]
 8005b48:	6879      	ldr	r1, [r7, #4]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	011b      	lsls	r3, r3, #4
 8005b4e:	1a9b      	subs	r3, r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	440b      	add	r3, r1
 8005b54:	3348      	adds	r3, #72	@ 0x48
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	1c59      	adds	r1, r3, #1
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	011b      	lsls	r3, r3, #4
 8005b60:	1a9b      	subs	r3, r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4403      	add	r3, r0
 8005b66:	3348      	adds	r3, #72	@ 0x48
 8005b68:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8005b6a:	78fa      	ldrb	r2, [r7, #3]
 8005b6c:	6879      	ldr	r1, [r7, #4]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	011b      	lsls	r3, r3, #4
 8005b72:	1a9b      	subs	r3, r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	440b      	add	r3, r1
 8005b78:	3348      	adds	r3, #72	@ 0x48
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d943      	bls.n	8005c08 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8005b80:	78fa      	ldrb	r2, [r7, #3]
 8005b82:	6879      	ldr	r1, [r7, #4]
 8005b84:	4613      	mov	r3, r2
 8005b86:	011b      	lsls	r3, r3, #4
 8005b88:	1a9b      	subs	r3, r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	440b      	add	r3, r1
 8005b8e:	3348      	adds	r3, #72	@ 0x48
 8005b90:	2200      	movs	r2, #0
 8005b92:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8005b94:	78fa      	ldrb	r2, [r7, #3]
 8005b96:	6879      	ldr	r1, [r7, #4]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	011b      	lsls	r3, r3, #4
 8005b9c:	1a9b      	subs	r3, r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	440b      	add	r3, r1
 8005ba2:	331b      	adds	r3, #27
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8005ba8:	78fa      	ldrb	r2, [r7, #3]
 8005baa:	6879      	ldr	r1, [r7, #4]
 8005bac:	4613      	mov	r3, r2
 8005bae:	011b      	lsls	r3, r3, #4
 8005bb0:	1a9b      	subs	r3, r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	440b      	add	r3, r1
 8005bb6:	3344      	adds	r3, #68	@ 0x44
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d809      	bhi.n	8005bd2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8005bbe:	78fa      	ldrb	r2, [r7, #3]
 8005bc0:	6879      	ldr	r1, [r7, #4]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	011b      	lsls	r3, r3, #4
 8005bc6:	1a9b      	subs	r3, r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	440b      	add	r3, r1
 8005bcc:	331c      	adds	r3, #28
 8005bce:	2201      	movs	r2, #1
 8005bd0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005bd2:	78fb      	ldrb	r3, [r7, #3]
 8005bd4:	015a      	lsls	r2, r3, #5
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	4413      	add	r3, r2
 8005bda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	78fa      	ldrb	r2, [r7, #3]
 8005be2:	0151      	lsls	r1, r2, #5
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	440a      	add	r2, r1
 8005be8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bf0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8005bf2:	78fa      	ldrb	r2, [r7, #3]
 8005bf4:	6879      	ldr	r1, [r7, #4]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	011b      	lsls	r3, r3, #4
 8005bfa:	1a9b      	subs	r3, r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	440b      	add	r3, r1
 8005c00:	334c      	adds	r3, #76	@ 0x4c
 8005c02:	2204      	movs	r2, #4
 8005c04:	701a      	strb	r2, [r3, #0]
 8005c06:	e014      	b.n	8005c32 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005c08:	78fa      	ldrb	r2, [r7, #3]
 8005c0a:	6879      	ldr	r1, [r7, #4]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	011b      	lsls	r3, r3, #4
 8005c10:	1a9b      	subs	r3, r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	440b      	add	r3, r1
 8005c16:	334c      	adds	r3, #76	@ 0x4c
 8005c18:	2202      	movs	r2, #2
 8005c1a:	701a      	strb	r2, [r3, #0]
 8005c1c:	e009      	b.n	8005c32 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005c1e:	78fa      	ldrb	r2, [r7, #3]
 8005c20:	6879      	ldr	r1, [r7, #4]
 8005c22:	4613      	mov	r3, r2
 8005c24:	011b      	lsls	r3, r3, #4
 8005c26:	1a9b      	subs	r3, r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	440b      	add	r3, r1
 8005c2c:	334c      	adds	r3, #76	@ 0x4c
 8005c2e:	2202      	movs	r2, #2
 8005c30:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005c32:	78fa      	ldrb	r2, [r7, #3]
 8005c34:	6879      	ldr	r1, [r7, #4]
 8005c36:	4613      	mov	r3, r2
 8005c38:	011b      	lsls	r3, r3, #4
 8005c3a:	1a9b      	subs	r3, r3, r2
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	440b      	add	r3, r1
 8005c40:	3326      	adds	r3, #38	@ 0x26
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00b      	beq.n	8005c60 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005c48:	78fa      	ldrb	r2, [r7, #3]
 8005c4a:	6879      	ldr	r1, [r7, #4]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	011b      	lsls	r3, r3, #4
 8005c50:	1a9b      	subs	r3, r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	440b      	add	r3, r1
 8005c56:	3326      	adds	r3, #38	@ 0x26
 8005c58:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	f040 8136 	bne.w	8005ecc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005c60:	78fb      	ldrb	r3, [r7, #3]
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005c76:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005c7e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005c80:	78fb      	ldrb	r3, [r7, #3]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6013      	str	r3, [r2, #0]
 8005c92:	e11b      	b.n	8005ecc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005c94:	78fa      	ldrb	r2, [r7, #3]
 8005c96:	6879      	ldr	r1, [r7, #4]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	011b      	lsls	r3, r3, #4
 8005c9c:	1a9b      	subs	r3, r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	440b      	add	r3, r1
 8005ca2:	334d      	adds	r3, #77	@ 0x4d
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	2b03      	cmp	r3, #3
 8005ca8:	f040 8081 	bne.w	8005dae <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005cac:	78fa      	ldrb	r2, [r7, #3]
 8005cae:	6879      	ldr	r1, [r7, #4]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	011b      	lsls	r3, r3, #4
 8005cb4:	1a9b      	subs	r3, r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	440b      	add	r3, r1
 8005cba:	334d      	adds	r3, #77	@ 0x4d
 8005cbc:	2202      	movs	r2, #2
 8005cbe:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005cc0:	78fa      	ldrb	r2, [r7, #3]
 8005cc2:	6879      	ldr	r1, [r7, #4]
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	011b      	lsls	r3, r3, #4
 8005cc8:	1a9b      	subs	r3, r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	440b      	add	r3, r1
 8005cce:	331b      	adds	r3, #27
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	f040 80fa 	bne.w	8005ecc <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005cd8:	78fa      	ldrb	r2, [r7, #3]
 8005cda:	6879      	ldr	r1, [r7, #4]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	011b      	lsls	r3, r3, #4
 8005ce0:	1a9b      	subs	r3, r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	440b      	add	r3, r1
 8005ce6:	334c      	adds	r3, #76	@ 0x4c
 8005ce8:	2202      	movs	r2, #2
 8005cea:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005cec:	78fb      	ldrb	r3, [r7, #3]
 8005cee:	015a      	lsls	r2, r3, #5
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	78fa      	ldrb	r2, [r7, #3]
 8005cfc:	0151      	lsls	r1, r2, #5
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	440a      	add	r2, r1
 8005d02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d0a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005d0c:	78fb      	ldrb	r3, [r7, #3]
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	4413      	add	r3, r2
 8005d14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	78fa      	ldrb	r2, [r7, #3]
 8005d1c:	0151      	lsls	r1, r2, #5
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	440a      	add	r2, r1
 8005d22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d2a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8005d2c:	78fb      	ldrb	r3, [r7, #3]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	78fa      	ldrb	r2, [r7, #3]
 8005d3c:	0151      	lsls	r1, r2, #5
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	440a      	add	r2, r1
 8005d42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d46:	f023 0320 	bic.w	r3, r3, #32
 8005d4a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005d4c:	78fa      	ldrb	r2, [r7, #3]
 8005d4e:	6879      	ldr	r1, [r7, #4]
 8005d50:	4613      	mov	r3, r2
 8005d52:	011b      	lsls	r3, r3, #4
 8005d54:	1a9b      	subs	r3, r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	440b      	add	r3, r1
 8005d5a:	3326      	adds	r3, #38	@ 0x26
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00b      	beq.n	8005d7a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005d62:	78fa      	ldrb	r2, [r7, #3]
 8005d64:	6879      	ldr	r1, [r7, #4]
 8005d66:	4613      	mov	r3, r2
 8005d68:	011b      	lsls	r3, r3, #4
 8005d6a:	1a9b      	subs	r3, r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	440b      	add	r3, r1
 8005d70:	3326      	adds	r3, #38	@ 0x26
 8005d72:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	f040 80a9 	bne.w	8005ecc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005d7a:	78fb      	ldrb	r3, [r7, #3]
 8005d7c:	015a      	lsls	r2, r3, #5
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	4413      	add	r3, r2
 8005d82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005d90:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005d98:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005d9a:	78fb      	ldrb	r3, [r7, #3]
 8005d9c:	015a      	lsls	r2, r3, #5
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005da6:	461a      	mov	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6013      	str	r3, [r2, #0]
 8005dac:	e08e      	b.n	8005ecc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005dae:	78fa      	ldrb	r2, [r7, #3]
 8005db0:	6879      	ldr	r1, [r7, #4]
 8005db2:	4613      	mov	r3, r2
 8005db4:	011b      	lsls	r3, r3, #4
 8005db6:	1a9b      	subs	r3, r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	440b      	add	r3, r1
 8005dbc:	334d      	adds	r3, #77	@ 0x4d
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	2b04      	cmp	r3, #4
 8005dc2:	d143      	bne.n	8005e4c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005dc4:	78fa      	ldrb	r2, [r7, #3]
 8005dc6:	6879      	ldr	r1, [r7, #4]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	011b      	lsls	r3, r3, #4
 8005dcc:	1a9b      	subs	r3, r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	440b      	add	r3, r1
 8005dd2:	334d      	adds	r3, #77	@ 0x4d
 8005dd4:	2202      	movs	r2, #2
 8005dd6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005dd8:	78fa      	ldrb	r2, [r7, #3]
 8005dda:	6879      	ldr	r1, [r7, #4]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	011b      	lsls	r3, r3, #4
 8005de0:	1a9b      	subs	r3, r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	440b      	add	r3, r1
 8005de6:	334c      	adds	r3, #76	@ 0x4c
 8005de8:	2202      	movs	r2, #2
 8005dea:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005dec:	78fa      	ldrb	r2, [r7, #3]
 8005dee:	6879      	ldr	r1, [r7, #4]
 8005df0:	4613      	mov	r3, r2
 8005df2:	011b      	lsls	r3, r3, #4
 8005df4:	1a9b      	subs	r3, r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	440b      	add	r3, r1
 8005dfa:	3326      	adds	r3, #38	@ 0x26
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00a      	beq.n	8005e18 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005e02:	78fa      	ldrb	r2, [r7, #3]
 8005e04:	6879      	ldr	r1, [r7, #4]
 8005e06:	4613      	mov	r3, r2
 8005e08:	011b      	lsls	r3, r3, #4
 8005e0a:	1a9b      	subs	r3, r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	440b      	add	r3, r1
 8005e10:	3326      	adds	r3, #38	@ 0x26
 8005e12:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d159      	bne.n	8005ecc <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005e18:	78fb      	ldrb	r3, [r7, #3]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005e2e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e36:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005e38:	78fb      	ldrb	r3, [r7, #3]
 8005e3a:	015a      	lsls	r2, r3, #5
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e44:	461a      	mov	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6013      	str	r3, [r2, #0]
 8005e4a:	e03f      	b.n	8005ecc <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8005e4c:	78fa      	ldrb	r2, [r7, #3]
 8005e4e:	6879      	ldr	r1, [r7, #4]
 8005e50:	4613      	mov	r3, r2
 8005e52:	011b      	lsls	r3, r3, #4
 8005e54:	1a9b      	subs	r3, r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	440b      	add	r3, r1
 8005e5a:	334d      	adds	r3, #77	@ 0x4d
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	2b08      	cmp	r3, #8
 8005e60:	d126      	bne.n	8005eb0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005e62:	78fa      	ldrb	r2, [r7, #3]
 8005e64:	6879      	ldr	r1, [r7, #4]
 8005e66:	4613      	mov	r3, r2
 8005e68:	011b      	lsls	r3, r3, #4
 8005e6a:	1a9b      	subs	r3, r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	440b      	add	r3, r1
 8005e70:	334d      	adds	r3, #77	@ 0x4d
 8005e72:	2202      	movs	r2, #2
 8005e74:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005e76:	78fa      	ldrb	r2, [r7, #3]
 8005e78:	6879      	ldr	r1, [r7, #4]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	011b      	lsls	r3, r3, #4
 8005e7e:	1a9b      	subs	r3, r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	440b      	add	r3, r1
 8005e84:	3344      	adds	r3, #68	@ 0x44
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	1c59      	adds	r1, r3, #1
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	011b      	lsls	r3, r3, #4
 8005e90:	1a9b      	subs	r3, r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4403      	add	r3, r0
 8005e96:	3344      	adds	r3, #68	@ 0x44
 8005e98:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8005e9a:	78fa      	ldrb	r2, [r7, #3]
 8005e9c:	6879      	ldr	r1, [r7, #4]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	011b      	lsls	r3, r3, #4
 8005ea2:	1a9b      	subs	r3, r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	440b      	add	r3, r1
 8005ea8:	334c      	adds	r3, #76	@ 0x4c
 8005eaa:	2204      	movs	r2, #4
 8005eac:	701a      	strb	r2, [r3, #0]
 8005eae:	e00d      	b.n	8005ecc <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8005eb0:	78fa      	ldrb	r2, [r7, #3]
 8005eb2:	6879      	ldr	r1, [r7, #4]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	011b      	lsls	r3, r3, #4
 8005eb8:	1a9b      	subs	r3, r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	440b      	add	r3, r1
 8005ebe:	334d      	adds	r3, #77	@ 0x4d
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	f000 8100 	beq.w	80060c8 <HCD_HC_IN_IRQHandler+0xcca>
 8005ec8:	e000      	b.n	8005ecc <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005eca:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005ecc:	78fa      	ldrb	r2, [r7, #3]
 8005ece:	6879      	ldr	r1, [r7, #4]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	011b      	lsls	r3, r3, #4
 8005ed4:	1a9b      	subs	r3, r3, r2
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	440b      	add	r3, r1
 8005eda:	334c      	adds	r3, #76	@ 0x4c
 8005edc:	781a      	ldrb	r2, [r3, #0]
 8005ede:	78fb      	ldrb	r3, [r7, #3]
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f00a facc 	bl	8010480 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005ee8:	e0ef      	b.n	80060ca <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	78fa      	ldrb	r2, [r7, #3]
 8005ef0:	4611      	mov	r1, r2
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f004 fd21 	bl	800a93a <USB_ReadChInterrupts>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005efe:	2b40      	cmp	r3, #64	@ 0x40
 8005f00:	d12f      	bne.n	8005f62 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005f02:	78fb      	ldrb	r3, [r7, #3]
 8005f04:	015a      	lsls	r2, r3, #5
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	4413      	add	r3, r2
 8005f0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f0e:	461a      	mov	r2, r3
 8005f10:	2340      	movs	r3, #64	@ 0x40
 8005f12:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8005f14:	78fa      	ldrb	r2, [r7, #3]
 8005f16:	6879      	ldr	r1, [r7, #4]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	011b      	lsls	r3, r3, #4
 8005f1c:	1a9b      	subs	r3, r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	440b      	add	r3, r1
 8005f22:	334d      	adds	r3, #77	@ 0x4d
 8005f24:	2205      	movs	r2, #5
 8005f26:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005f28:	78fa      	ldrb	r2, [r7, #3]
 8005f2a:	6879      	ldr	r1, [r7, #4]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	011b      	lsls	r3, r3, #4
 8005f30:	1a9b      	subs	r3, r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	440b      	add	r3, r1
 8005f36:	331a      	adds	r3, #26
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d109      	bne.n	8005f52 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005f3e:	78fa      	ldrb	r2, [r7, #3]
 8005f40:	6879      	ldr	r1, [r7, #4]
 8005f42:	4613      	mov	r3, r2
 8005f44:	011b      	lsls	r3, r3, #4
 8005f46:	1a9b      	subs	r3, r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	440b      	add	r3, r1
 8005f4c:	3344      	adds	r3, #68	@ 0x44
 8005f4e:	2200      	movs	r2, #0
 8005f50:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	78fa      	ldrb	r2, [r7, #3]
 8005f58:	4611      	mov	r1, r2
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f005 fa91 	bl	800b482 <USB_HC_Halt>
 8005f60:	e0b3      	b.n	80060ca <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	78fa      	ldrb	r2, [r7, #3]
 8005f68:	4611      	mov	r1, r2
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f004 fce5 	bl	800a93a <USB_ReadChInterrupts>
 8005f70:	4603      	mov	r3, r0
 8005f72:	f003 0310 	and.w	r3, r3, #16
 8005f76:	2b10      	cmp	r3, #16
 8005f78:	f040 80a7 	bne.w	80060ca <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005f7c:	78fa      	ldrb	r2, [r7, #3]
 8005f7e:	6879      	ldr	r1, [r7, #4]
 8005f80:	4613      	mov	r3, r2
 8005f82:	011b      	lsls	r3, r3, #4
 8005f84:	1a9b      	subs	r3, r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	440b      	add	r3, r1
 8005f8a:	3326      	adds	r3, #38	@ 0x26
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	2b03      	cmp	r3, #3
 8005f90:	d11b      	bne.n	8005fca <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005f92:	78fa      	ldrb	r2, [r7, #3]
 8005f94:	6879      	ldr	r1, [r7, #4]
 8005f96:	4613      	mov	r3, r2
 8005f98:	011b      	lsls	r3, r3, #4
 8005f9a:	1a9b      	subs	r3, r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	440b      	add	r3, r1
 8005fa0:	3344      	adds	r3, #68	@ 0x44
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8005fa6:	78fa      	ldrb	r2, [r7, #3]
 8005fa8:	6879      	ldr	r1, [r7, #4]
 8005faa:	4613      	mov	r3, r2
 8005fac:	011b      	lsls	r3, r3, #4
 8005fae:	1a9b      	subs	r3, r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	440b      	add	r3, r1
 8005fb4:	334d      	adds	r3, #77	@ 0x4d
 8005fb6:	2204      	movs	r2, #4
 8005fb8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	78fa      	ldrb	r2, [r7, #3]
 8005fc0:	4611      	mov	r1, r2
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f005 fa5d 	bl	800b482 <USB_HC_Halt>
 8005fc8:	e03f      	b.n	800604a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005fca:	78fa      	ldrb	r2, [r7, #3]
 8005fcc:	6879      	ldr	r1, [r7, #4]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	011b      	lsls	r3, r3, #4
 8005fd2:	1a9b      	subs	r3, r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	440b      	add	r3, r1
 8005fd8:	3326      	adds	r3, #38	@ 0x26
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00a      	beq.n	8005ff6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005fe0:	78fa      	ldrb	r2, [r7, #3]
 8005fe2:	6879      	ldr	r1, [r7, #4]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	011b      	lsls	r3, r3, #4
 8005fe8:	1a9b      	subs	r3, r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	440b      	add	r3, r1
 8005fee:	3326      	adds	r3, #38	@ 0x26
 8005ff0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d129      	bne.n	800604a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005ff6:	78fa      	ldrb	r2, [r7, #3]
 8005ff8:	6879      	ldr	r1, [r7, #4]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	011b      	lsls	r3, r3, #4
 8005ffe:	1a9b      	subs	r3, r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	440b      	add	r3, r1
 8006004:	3344      	adds	r3, #68	@ 0x44
 8006006:	2200      	movs	r2, #0
 8006008:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	799b      	ldrb	r3, [r3, #6]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00a      	beq.n	8006028 <HCD_HC_IN_IRQHandler+0xc2a>
 8006012:	78fa      	ldrb	r2, [r7, #3]
 8006014:	6879      	ldr	r1, [r7, #4]
 8006016:	4613      	mov	r3, r2
 8006018:	011b      	lsls	r3, r3, #4
 800601a:	1a9b      	subs	r3, r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	440b      	add	r3, r1
 8006020:	331b      	adds	r3, #27
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d110      	bne.n	800604a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8006028:	78fa      	ldrb	r2, [r7, #3]
 800602a:	6879      	ldr	r1, [r7, #4]
 800602c:	4613      	mov	r3, r2
 800602e:	011b      	lsls	r3, r3, #4
 8006030:	1a9b      	subs	r3, r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	440b      	add	r3, r1
 8006036:	334d      	adds	r3, #77	@ 0x4d
 8006038:	2204      	movs	r2, #4
 800603a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	78fa      	ldrb	r2, [r7, #3]
 8006042:	4611      	mov	r1, r2
 8006044:	4618      	mov	r0, r3
 8006046:	f005 fa1c 	bl	800b482 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800604a:	78fa      	ldrb	r2, [r7, #3]
 800604c:	6879      	ldr	r1, [r7, #4]
 800604e:	4613      	mov	r3, r2
 8006050:	011b      	lsls	r3, r3, #4
 8006052:	1a9b      	subs	r3, r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	440b      	add	r3, r1
 8006058:	331b      	adds	r3, #27
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d129      	bne.n	80060b4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006060:	78fa      	ldrb	r2, [r7, #3]
 8006062:	6879      	ldr	r1, [r7, #4]
 8006064:	4613      	mov	r3, r2
 8006066:	011b      	lsls	r3, r3, #4
 8006068:	1a9b      	subs	r3, r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	440b      	add	r3, r1
 800606e:	331b      	adds	r3, #27
 8006070:	2200      	movs	r2, #0
 8006072:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006074:	78fb      	ldrb	r3, [r7, #3]
 8006076:	015a      	lsls	r2, r3, #5
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	4413      	add	r3, r2
 800607c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	78fa      	ldrb	r2, [r7, #3]
 8006084:	0151      	lsls	r1, r2, #5
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	440a      	add	r2, r1
 800608a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800608e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006092:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8006094:	78fb      	ldrb	r3, [r7, #3]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	4413      	add	r3, r2
 800609c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	78fa      	ldrb	r2, [r7, #3]
 80060a4:	0151      	lsls	r1, r2, #5
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	440a      	add	r2, r1
 80060aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060ae:	f043 0320 	orr.w	r3, r3, #32
 80060b2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80060b4:	78fb      	ldrb	r3, [r7, #3]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060c0:	461a      	mov	r2, r3
 80060c2:	2310      	movs	r3, #16
 80060c4:	6093      	str	r3, [r2, #8]
 80060c6:	e000      	b.n	80060ca <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80060c8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80060ca:	3718      	adds	r7, #24
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	460b      	mov	r3, r1
 80060da:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	78fa      	ldrb	r2, [r7, #3]
 80060ec:	4611      	mov	r1, r2
 80060ee:	4618      	mov	r0, r3
 80060f0:	f004 fc23 	bl	800a93a <USB_ReadChInterrupts>
 80060f4:	4603      	mov	r3, r0
 80060f6:	f003 0304 	and.w	r3, r3, #4
 80060fa:	2b04      	cmp	r3, #4
 80060fc:	d11b      	bne.n	8006136 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80060fe:	78fb      	ldrb	r3, [r7, #3]
 8006100:	015a      	lsls	r2, r3, #5
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	4413      	add	r3, r2
 8006106:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800610a:	461a      	mov	r2, r3
 800610c:	2304      	movs	r3, #4
 800610e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8006110:	78fa      	ldrb	r2, [r7, #3]
 8006112:	6879      	ldr	r1, [r7, #4]
 8006114:	4613      	mov	r3, r2
 8006116:	011b      	lsls	r3, r3, #4
 8006118:	1a9b      	subs	r3, r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	440b      	add	r3, r1
 800611e:	334d      	adds	r3, #77	@ 0x4d
 8006120:	2207      	movs	r2, #7
 8006122:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	78fa      	ldrb	r2, [r7, #3]
 800612a:	4611      	mov	r1, r2
 800612c:	4618      	mov	r0, r3
 800612e:	f005 f9a8 	bl	800b482 <USB_HC_Halt>
 8006132:	f000 bc89 	b.w	8006a48 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	78fa      	ldrb	r2, [r7, #3]
 800613c:	4611      	mov	r1, r2
 800613e:	4618      	mov	r0, r3
 8006140:	f004 fbfb 	bl	800a93a <USB_ReadChInterrupts>
 8006144:	4603      	mov	r3, r0
 8006146:	f003 0320 	and.w	r3, r3, #32
 800614a:	2b20      	cmp	r3, #32
 800614c:	f040 8082 	bne.w	8006254 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006150:	78fb      	ldrb	r3, [r7, #3]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	4413      	add	r3, r2
 8006158:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800615c:	461a      	mov	r2, r3
 800615e:	2320      	movs	r3, #32
 8006160:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8006162:	78fa      	ldrb	r2, [r7, #3]
 8006164:	6879      	ldr	r1, [r7, #4]
 8006166:	4613      	mov	r3, r2
 8006168:	011b      	lsls	r3, r3, #4
 800616a:	1a9b      	subs	r3, r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	440b      	add	r3, r1
 8006170:	3319      	adds	r3, #25
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d124      	bne.n	80061c2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8006178:	78fa      	ldrb	r2, [r7, #3]
 800617a:	6879      	ldr	r1, [r7, #4]
 800617c:	4613      	mov	r3, r2
 800617e:	011b      	lsls	r3, r3, #4
 8006180:	1a9b      	subs	r3, r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	440b      	add	r3, r1
 8006186:	3319      	adds	r3, #25
 8006188:	2200      	movs	r2, #0
 800618a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800618c:	78fa      	ldrb	r2, [r7, #3]
 800618e:	6879      	ldr	r1, [r7, #4]
 8006190:	4613      	mov	r3, r2
 8006192:	011b      	lsls	r3, r3, #4
 8006194:	1a9b      	subs	r3, r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	440b      	add	r3, r1
 800619a:	334c      	adds	r3, #76	@ 0x4c
 800619c:	2202      	movs	r2, #2
 800619e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80061a0:	78fa      	ldrb	r2, [r7, #3]
 80061a2:	6879      	ldr	r1, [r7, #4]
 80061a4:	4613      	mov	r3, r2
 80061a6:	011b      	lsls	r3, r3, #4
 80061a8:	1a9b      	subs	r3, r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	440b      	add	r3, r1
 80061ae:	334d      	adds	r3, #77	@ 0x4d
 80061b0:	2203      	movs	r2, #3
 80061b2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	78fa      	ldrb	r2, [r7, #3]
 80061ba:	4611      	mov	r1, r2
 80061bc:	4618      	mov	r0, r3
 80061be:	f005 f960 	bl	800b482 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80061c2:	78fa      	ldrb	r2, [r7, #3]
 80061c4:	6879      	ldr	r1, [r7, #4]
 80061c6:	4613      	mov	r3, r2
 80061c8:	011b      	lsls	r3, r3, #4
 80061ca:	1a9b      	subs	r3, r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	440b      	add	r3, r1
 80061d0:	331a      	adds	r3, #26
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	f040 8437 	bne.w	8006a48 <HCD_HC_OUT_IRQHandler+0x978>
 80061da:	78fa      	ldrb	r2, [r7, #3]
 80061dc:	6879      	ldr	r1, [r7, #4]
 80061de:	4613      	mov	r3, r2
 80061e0:	011b      	lsls	r3, r3, #4
 80061e2:	1a9b      	subs	r3, r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	440b      	add	r3, r1
 80061e8:	331b      	adds	r3, #27
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f040 842b 	bne.w	8006a48 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80061f2:	78fa      	ldrb	r2, [r7, #3]
 80061f4:	6879      	ldr	r1, [r7, #4]
 80061f6:	4613      	mov	r3, r2
 80061f8:	011b      	lsls	r3, r3, #4
 80061fa:	1a9b      	subs	r3, r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	440b      	add	r3, r1
 8006200:	3326      	adds	r3, #38	@ 0x26
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d009      	beq.n	800621c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8006208:	78fa      	ldrb	r2, [r7, #3]
 800620a:	6879      	ldr	r1, [r7, #4]
 800620c:	4613      	mov	r3, r2
 800620e:	011b      	lsls	r3, r3, #4
 8006210:	1a9b      	subs	r3, r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	440b      	add	r3, r1
 8006216:	331b      	adds	r3, #27
 8006218:	2201      	movs	r2, #1
 800621a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800621c:	78fa      	ldrb	r2, [r7, #3]
 800621e:	6879      	ldr	r1, [r7, #4]
 8006220:	4613      	mov	r3, r2
 8006222:	011b      	lsls	r3, r3, #4
 8006224:	1a9b      	subs	r3, r3, r2
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	440b      	add	r3, r1
 800622a:	334d      	adds	r3, #77	@ 0x4d
 800622c:	2203      	movs	r2, #3
 800622e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	78fa      	ldrb	r2, [r7, #3]
 8006236:	4611      	mov	r1, r2
 8006238:	4618      	mov	r0, r3
 800623a:	f005 f922 	bl	800b482 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800623e:	78fa      	ldrb	r2, [r7, #3]
 8006240:	6879      	ldr	r1, [r7, #4]
 8006242:	4613      	mov	r3, r2
 8006244:	011b      	lsls	r3, r3, #4
 8006246:	1a9b      	subs	r3, r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	440b      	add	r3, r1
 800624c:	3344      	adds	r3, #68	@ 0x44
 800624e:	2200      	movs	r2, #0
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	e3f9      	b.n	8006a48 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	78fa      	ldrb	r2, [r7, #3]
 800625a:	4611      	mov	r1, r2
 800625c:	4618      	mov	r0, r3
 800625e:	f004 fb6c 	bl	800a93a <USB_ReadChInterrupts>
 8006262:	4603      	mov	r3, r0
 8006264:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006268:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800626c:	d111      	bne.n	8006292 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800626e:	78fb      	ldrb	r3, [r7, #3]
 8006270:	015a      	lsls	r2, r3, #5
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	4413      	add	r3, r2
 8006276:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800627a:	461a      	mov	r2, r3
 800627c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006280:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	78fa      	ldrb	r2, [r7, #3]
 8006288:	4611      	mov	r1, r2
 800628a:	4618      	mov	r0, r3
 800628c:	f005 f8f9 	bl	800b482 <USB_HC_Halt>
 8006290:	e3da      	b.n	8006a48 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	78fa      	ldrb	r2, [r7, #3]
 8006298:	4611      	mov	r1, r2
 800629a:	4618      	mov	r0, r3
 800629c:	f004 fb4d 	bl	800a93a <USB_ReadChInterrupts>
 80062a0:	4603      	mov	r3, r0
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d168      	bne.n	800637c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80062aa:	78fa      	ldrb	r2, [r7, #3]
 80062ac:	6879      	ldr	r1, [r7, #4]
 80062ae:	4613      	mov	r3, r2
 80062b0:	011b      	lsls	r3, r3, #4
 80062b2:	1a9b      	subs	r3, r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	440b      	add	r3, r1
 80062b8:	3344      	adds	r3, #68	@ 0x44
 80062ba:	2200      	movs	r2, #0
 80062bc:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	78fa      	ldrb	r2, [r7, #3]
 80062c4:	4611      	mov	r1, r2
 80062c6:	4618      	mov	r0, r3
 80062c8:	f004 fb37 	bl	800a93a <USB_ReadChInterrupts>
 80062cc:	4603      	mov	r3, r0
 80062ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062d2:	2b40      	cmp	r3, #64	@ 0x40
 80062d4:	d112      	bne.n	80062fc <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80062d6:	78fa      	ldrb	r2, [r7, #3]
 80062d8:	6879      	ldr	r1, [r7, #4]
 80062da:	4613      	mov	r3, r2
 80062dc:	011b      	lsls	r3, r3, #4
 80062de:	1a9b      	subs	r3, r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	440b      	add	r3, r1
 80062e4:	3319      	adds	r3, #25
 80062e6:	2201      	movs	r2, #1
 80062e8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80062ea:	78fb      	ldrb	r3, [r7, #3]
 80062ec:	015a      	lsls	r2, r3, #5
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	4413      	add	r3, r2
 80062f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062f6:	461a      	mov	r2, r3
 80062f8:	2340      	movs	r3, #64	@ 0x40
 80062fa:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80062fc:	78fa      	ldrb	r2, [r7, #3]
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	4613      	mov	r3, r2
 8006302:	011b      	lsls	r3, r3, #4
 8006304:	1a9b      	subs	r3, r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	440b      	add	r3, r1
 800630a:	331b      	adds	r3, #27
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d019      	beq.n	8006346 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006312:	78fa      	ldrb	r2, [r7, #3]
 8006314:	6879      	ldr	r1, [r7, #4]
 8006316:	4613      	mov	r3, r2
 8006318:	011b      	lsls	r3, r3, #4
 800631a:	1a9b      	subs	r3, r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	440b      	add	r3, r1
 8006320:	331b      	adds	r3, #27
 8006322:	2200      	movs	r2, #0
 8006324:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006326:	78fb      	ldrb	r3, [r7, #3]
 8006328:	015a      	lsls	r2, r3, #5
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	4413      	add	r3, r2
 800632e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	78fa      	ldrb	r2, [r7, #3]
 8006336:	0151      	lsls	r1, r2, #5
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	440a      	add	r2, r1
 800633c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006340:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006344:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8006346:	78fb      	ldrb	r3, [r7, #3]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	4413      	add	r3, r2
 800634e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006352:	461a      	mov	r2, r3
 8006354:	2301      	movs	r3, #1
 8006356:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8006358:	78fa      	ldrb	r2, [r7, #3]
 800635a:	6879      	ldr	r1, [r7, #4]
 800635c:	4613      	mov	r3, r2
 800635e:	011b      	lsls	r3, r3, #4
 8006360:	1a9b      	subs	r3, r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	440b      	add	r3, r1
 8006366:	334d      	adds	r3, #77	@ 0x4d
 8006368:	2201      	movs	r2, #1
 800636a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	78fa      	ldrb	r2, [r7, #3]
 8006372:	4611      	mov	r1, r2
 8006374:	4618      	mov	r0, r3
 8006376:	f005 f884 	bl	800b482 <USB_HC_Halt>
 800637a:	e365      	b.n	8006a48 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	78fa      	ldrb	r2, [r7, #3]
 8006382:	4611      	mov	r1, r2
 8006384:	4618      	mov	r0, r3
 8006386:	f004 fad8 	bl	800a93a <USB_ReadChInterrupts>
 800638a:	4603      	mov	r3, r0
 800638c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006390:	2b40      	cmp	r3, #64	@ 0x40
 8006392:	d139      	bne.n	8006408 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8006394:	78fa      	ldrb	r2, [r7, #3]
 8006396:	6879      	ldr	r1, [r7, #4]
 8006398:	4613      	mov	r3, r2
 800639a:	011b      	lsls	r3, r3, #4
 800639c:	1a9b      	subs	r3, r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	440b      	add	r3, r1
 80063a2:	334d      	adds	r3, #77	@ 0x4d
 80063a4:	2205      	movs	r2, #5
 80063a6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80063a8:	78fa      	ldrb	r2, [r7, #3]
 80063aa:	6879      	ldr	r1, [r7, #4]
 80063ac:	4613      	mov	r3, r2
 80063ae:	011b      	lsls	r3, r3, #4
 80063b0:	1a9b      	subs	r3, r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	440b      	add	r3, r1
 80063b6:	331a      	adds	r3, #26
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d109      	bne.n	80063d2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80063be:	78fa      	ldrb	r2, [r7, #3]
 80063c0:	6879      	ldr	r1, [r7, #4]
 80063c2:	4613      	mov	r3, r2
 80063c4:	011b      	lsls	r3, r3, #4
 80063c6:	1a9b      	subs	r3, r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	440b      	add	r3, r1
 80063cc:	3319      	adds	r3, #25
 80063ce:	2201      	movs	r2, #1
 80063d0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80063d2:	78fa      	ldrb	r2, [r7, #3]
 80063d4:	6879      	ldr	r1, [r7, #4]
 80063d6:	4613      	mov	r3, r2
 80063d8:	011b      	lsls	r3, r3, #4
 80063da:	1a9b      	subs	r3, r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	440b      	add	r3, r1
 80063e0:	3344      	adds	r3, #68	@ 0x44
 80063e2:	2200      	movs	r2, #0
 80063e4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	78fa      	ldrb	r2, [r7, #3]
 80063ec:	4611      	mov	r1, r2
 80063ee:	4618      	mov	r0, r3
 80063f0:	f005 f847 	bl	800b482 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80063f4:	78fb      	ldrb	r3, [r7, #3]
 80063f6:	015a      	lsls	r2, r3, #5
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	4413      	add	r3, r2
 80063fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006400:	461a      	mov	r2, r3
 8006402:	2340      	movs	r3, #64	@ 0x40
 8006404:	6093      	str	r3, [r2, #8]
 8006406:	e31f      	b.n	8006a48 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	78fa      	ldrb	r2, [r7, #3]
 800640e:	4611      	mov	r1, r2
 8006410:	4618      	mov	r0, r3
 8006412:	f004 fa92 	bl	800a93a <USB_ReadChInterrupts>
 8006416:	4603      	mov	r3, r0
 8006418:	f003 0308 	and.w	r3, r3, #8
 800641c:	2b08      	cmp	r3, #8
 800641e:	d11a      	bne.n	8006456 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8006420:	78fb      	ldrb	r3, [r7, #3]
 8006422:	015a      	lsls	r2, r3, #5
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	4413      	add	r3, r2
 8006428:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800642c:	461a      	mov	r2, r3
 800642e:	2308      	movs	r3, #8
 8006430:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8006432:	78fa      	ldrb	r2, [r7, #3]
 8006434:	6879      	ldr	r1, [r7, #4]
 8006436:	4613      	mov	r3, r2
 8006438:	011b      	lsls	r3, r3, #4
 800643a:	1a9b      	subs	r3, r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	440b      	add	r3, r1
 8006440:	334d      	adds	r3, #77	@ 0x4d
 8006442:	2206      	movs	r2, #6
 8006444:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	78fa      	ldrb	r2, [r7, #3]
 800644c:	4611      	mov	r1, r2
 800644e:	4618      	mov	r0, r3
 8006450:	f005 f817 	bl	800b482 <USB_HC_Halt>
 8006454:	e2f8      	b.n	8006a48 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	78fa      	ldrb	r2, [r7, #3]
 800645c:	4611      	mov	r1, r2
 800645e:	4618      	mov	r0, r3
 8006460:	f004 fa6b 	bl	800a93a <USB_ReadChInterrupts>
 8006464:	4603      	mov	r3, r0
 8006466:	f003 0310 	and.w	r3, r3, #16
 800646a:	2b10      	cmp	r3, #16
 800646c:	d144      	bne.n	80064f8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800646e:	78fa      	ldrb	r2, [r7, #3]
 8006470:	6879      	ldr	r1, [r7, #4]
 8006472:	4613      	mov	r3, r2
 8006474:	011b      	lsls	r3, r3, #4
 8006476:	1a9b      	subs	r3, r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	440b      	add	r3, r1
 800647c:	3344      	adds	r3, #68	@ 0x44
 800647e:	2200      	movs	r2, #0
 8006480:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8006482:	78fa      	ldrb	r2, [r7, #3]
 8006484:	6879      	ldr	r1, [r7, #4]
 8006486:	4613      	mov	r3, r2
 8006488:	011b      	lsls	r3, r3, #4
 800648a:	1a9b      	subs	r3, r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	440b      	add	r3, r1
 8006490:	334d      	adds	r3, #77	@ 0x4d
 8006492:	2204      	movs	r2, #4
 8006494:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8006496:	78fa      	ldrb	r2, [r7, #3]
 8006498:	6879      	ldr	r1, [r7, #4]
 800649a:	4613      	mov	r3, r2
 800649c:	011b      	lsls	r3, r3, #4
 800649e:	1a9b      	subs	r3, r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	440b      	add	r3, r1
 80064a4:	3319      	adds	r3, #25
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d114      	bne.n	80064d6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80064ac:	78fa      	ldrb	r2, [r7, #3]
 80064ae:	6879      	ldr	r1, [r7, #4]
 80064b0:	4613      	mov	r3, r2
 80064b2:	011b      	lsls	r3, r3, #4
 80064b4:	1a9b      	subs	r3, r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	440b      	add	r3, r1
 80064ba:	3318      	adds	r3, #24
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d109      	bne.n	80064d6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80064c2:	78fa      	ldrb	r2, [r7, #3]
 80064c4:	6879      	ldr	r1, [r7, #4]
 80064c6:	4613      	mov	r3, r2
 80064c8:	011b      	lsls	r3, r3, #4
 80064ca:	1a9b      	subs	r3, r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	440b      	add	r3, r1
 80064d0:	3319      	adds	r3, #25
 80064d2:	2201      	movs	r2, #1
 80064d4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	78fa      	ldrb	r2, [r7, #3]
 80064dc:	4611      	mov	r1, r2
 80064de:	4618      	mov	r0, r3
 80064e0:	f004 ffcf 	bl	800b482 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80064e4:	78fb      	ldrb	r3, [r7, #3]
 80064e6:	015a      	lsls	r2, r3, #5
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064f0:	461a      	mov	r2, r3
 80064f2:	2310      	movs	r3, #16
 80064f4:	6093      	str	r3, [r2, #8]
 80064f6:	e2a7      	b.n	8006a48 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	78fa      	ldrb	r2, [r7, #3]
 80064fe:	4611      	mov	r1, r2
 8006500:	4618      	mov	r0, r3
 8006502:	f004 fa1a 	bl	800a93a <USB_ReadChInterrupts>
 8006506:	4603      	mov	r3, r0
 8006508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800650c:	2b80      	cmp	r3, #128	@ 0x80
 800650e:	f040 8083 	bne.w	8006618 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	799b      	ldrb	r3, [r3, #6]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d111      	bne.n	800653e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800651a:	78fa      	ldrb	r2, [r7, #3]
 800651c:	6879      	ldr	r1, [r7, #4]
 800651e:	4613      	mov	r3, r2
 8006520:	011b      	lsls	r3, r3, #4
 8006522:	1a9b      	subs	r3, r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	440b      	add	r3, r1
 8006528:	334d      	adds	r3, #77	@ 0x4d
 800652a:	2207      	movs	r2, #7
 800652c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	78fa      	ldrb	r2, [r7, #3]
 8006534:	4611      	mov	r1, r2
 8006536:	4618      	mov	r0, r3
 8006538:	f004 ffa3 	bl	800b482 <USB_HC_Halt>
 800653c:	e062      	b.n	8006604 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800653e:	78fa      	ldrb	r2, [r7, #3]
 8006540:	6879      	ldr	r1, [r7, #4]
 8006542:	4613      	mov	r3, r2
 8006544:	011b      	lsls	r3, r3, #4
 8006546:	1a9b      	subs	r3, r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	440b      	add	r3, r1
 800654c:	3344      	adds	r3, #68	@ 0x44
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	1c59      	adds	r1, r3, #1
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	4613      	mov	r3, r2
 8006556:	011b      	lsls	r3, r3, #4
 8006558:	1a9b      	subs	r3, r3, r2
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4403      	add	r3, r0
 800655e:	3344      	adds	r3, #68	@ 0x44
 8006560:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006562:	78fa      	ldrb	r2, [r7, #3]
 8006564:	6879      	ldr	r1, [r7, #4]
 8006566:	4613      	mov	r3, r2
 8006568:	011b      	lsls	r3, r3, #4
 800656a:	1a9b      	subs	r3, r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	440b      	add	r3, r1
 8006570:	3344      	adds	r3, #68	@ 0x44
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2b02      	cmp	r3, #2
 8006576:	d922      	bls.n	80065be <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006578:	78fa      	ldrb	r2, [r7, #3]
 800657a:	6879      	ldr	r1, [r7, #4]
 800657c:	4613      	mov	r3, r2
 800657e:	011b      	lsls	r3, r3, #4
 8006580:	1a9b      	subs	r3, r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	440b      	add	r3, r1
 8006586:	3344      	adds	r3, #68	@ 0x44
 8006588:	2200      	movs	r2, #0
 800658a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800658c:	78fa      	ldrb	r2, [r7, #3]
 800658e:	6879      	ldr	r1, [r7, #4]
 8006590:	4613      	mov	r3, r2
 8006592:	011b      	lsls	r3, r3, #4
 8006594:	1a9b      	subs	r3, r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	440b      	add	r3, r1
 800659a:	334c      	adds	r3, #76	@ 0x4c
 800659c:	2204      	movs	r2, #4
 800659e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80065a0:	78fa      	ldrb	r2, [r7, #3]
 80065a2:	6879      	ldr	r1, [r7, #4]
 80065a4:	4613      	mov	r3, r2
 80065a6:	011b      	lsls	r3, r3, #4
 80065a8:	1a9b      	subs	r3, r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	440b      	add	r3, r1
 80065ae:	334c      	adds	r3, #76	@ 0x4c
 80065b0:	781a      	ldrb	r2, [r3, #0]
 80065b2:	78fb      	ldrb	r3, [r7, #3]
 80065b4:	4619      	mov	r1, r3
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f009 ff62 	bl	8010480 <HAL_HCD_HC_NotifyURBChange_Callback>
 80065bc:	e022      	b.n	8006604 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80065be:	78fa      	ldrb	r2, [r7, #3]
 80065c0:	6879      	ldr	r1, [r7, #4]
 80065c2:	4613      	mov	r3, r2
 80065c4:	011b      	lsls	r3, r3, #4
 80065c6:	1a9b      	subs	r3, r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	440b      	add	r3, r1
 80065cc:	334c      	adds	r3, #76	@ 0x4c
 80065ce:	2202      	movs	r2, #2
 80065d0:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80065d2:	78fb      	ldrb	r3, [r7, #3]
 80065d4:	015a      	lsls	r2, r3, #5
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	4413      	add	r3, r2
 80065da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80065e8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80065f0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80065f2:	78fb      	ldrb	r3, [r7, #3]
 80065f4:	015a      	lsls	r2, r3, #5
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	4413      	add	r3, r2
 80065fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065fe:	461a      	mov	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8006604:	78fb      	ldrb	r3, [r7, #3]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	4413      	add	r3, r2
 800660c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006610:	461a      	mov	r2, r3
 8006612:	2380      	movs	r3, #128	@ 0x80
 8006614:	6093      	str	r3, [r2, #8]
 8006616:	e217      	b.n	8006a48 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	78fa      	ldrb	r2, [r7, #3]
 800661e:	4611      	mov	r1, r2
 8006620:	4618      	mov	r0, r3
 8006622:	f004 f98a 	bl	800a93a <USB_ReadChInterrupts>
 8006626:	4603      	mov	r3, r0
 8006628:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800662c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006630:	d11b      	bne.n	800666a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8006632:	78fa      	ldrb	r2, [r7, #3]
 8006634:	6879      	ldr	r1, [r7, #4]
 8006636:	4613      	mov	r3, r2
 8006638:	011b      	lsls	r3, r3, #4
 800663a:	1a9b      	subs	r3, r3, r2
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	440b      	add	r3, r1
 8006640:	334d      	adds	r3, #77	@ 0x4d
 8006642:	2209      	movs	r2, #9
 8006644:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	78fa      	ldrb	r2, [r7, #3]
 800664c:	4611      	mov	r1, r2
 800664e:	4618      	mov	r0, r3
 8006650:	f004 ff17 	bl	800b482 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8006654:	78fb      	ldrb	r3, [r7, #3]
 8006656:	015a      	lsls	r2, r3, #5
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	4413      	add	r3, r2
 800665c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006660:	461a      	mov	r2, r3
 8006662:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006666:	6093      	str	r3, [r2, #8]
 8006668:	e1ee      	b.n	8006a48 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	78fa      	ldrb	r2, [r7, #3]
 8006670:	4611      	mov	r1, r2
 8006672:	4618      	mov	r0, r3
 8006674:	f004 f961 	bl	800a93a <USB_ReadChInterrupts>
 8006678:	4603      	mov	r3, r0
 800667a:	f003 0302 	and.w	r3, r3, #2
 800667e:	2b02      	cmp	r3, #2
 8006680:	f040 81df 	bne.w	8006a42 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8006684:	78fb      	ldrb	r3, [r7, #3]
 8006686:	015a      	lsls	r2, r3, #5
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	4413      	add	r3, r2
 800668c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006690:	461a      	mov	r2, r3
 8006692:	2302      	movs	r3, #2
 8006694:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8006696:	78fa      	ldrb	r2, [r7, #3]
 8006698:	6879      	ldr	r1, [r7, #4]
 800669a:	4613      	mov	r3, r2
 800669c:	011b      	lsls	r3, r3, #4
 800669e:	1a9b      	subs	r3, r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	440b      	add	r3, r1
 80066a4:	334d      	adds	r3, #77	@ 0x4d
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	f040 8093 	bne.w	80067d4 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80066ae:	78fa      	ldrb	r2, [r7, #3]
 80066b0:	6879      	ldr	r1, [r7, #4]
 80066b2:	4613      	mov	r3, r2
 80066b4:	011b      	lsls	r3, r3, #4
 80066b6:	1a9b      	subs	r3, r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	440b      	add	r3, r1
 80066bc:	334d      	adds	r3, #77	@ 0x4d
 80066be:	2202      	movs	r2, #2
 80066c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80066c2:	78fa      	ldrb	r2, [r7, #3]
 80066c4:	6879      	ldr	r1, [r7, #4]
 80066c6:	4613      	mov	r3, r2
 80066c8:	011b      	lsls	r3, r3, #4
 80066ca:	1a9b      	subs	r3, r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	440b      	add	r3, r1
 80066d0:	334c      	adds	r3, #76	@ 0x4c
 80066d2:	2201      	movs	r2, #1
 80066d4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80066d6:	78fa      	ldrb	r2, [r7, #3]
 80066d8:	6879      	ldr	r1, [r7, #4]
 80066da:	4613      	mov	r3, r2
 80066dc:	011b      	lsls	r3, r3, #4
 80066de:	1a9b      	subs	r3, r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	440b      	add	r3, r1
 80066e4:	3326      	adds	r3, #38	@ 0x26
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d00b      	beq.n	8006704 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80066ec:	78fa      	ldrb	r2, [r7, #3]
 80066ee:	6879      	ldr	r1, [r7, #4]
 80066f0:	4613      	mov	r3, r2
 80066f2:	011b      	lsls	r3, r3, #4
 80066f4:	1a9b      	subs	r3, r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	440b      	add	r3, r1
 80066fa:	3326      	adds	r3, #38	@ 0x26
 80066fc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80066fe:	2b03      	cmp	r3, #3
 8006700:	f040 8190 	bne.w	8006a24 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	799b      	ldrb	r3, [r3, #6]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d115      	bne.n	8006738 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800670c:	78fa      	ldrb	r2, [r7, #3]
 800670e:	6879      	ldr	r1, [r7, #4]
 8006710:	4613      	mov	r3, r2
 8006712:	011b      	lsls	r3, r3, #4
 8006714:	1a9b      	subs	r3, r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	440b      	add	r3, r1
 800671a:	333d      	adds	r3, #61	@ 0x3d
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	78fa      	ldrb	r2, [r7, #3]
 8006720:	f083 0301 	eor.w	r3, r3, #1
 8006724:	b2d8      	uxtb	r0, r3
 8006726:	6879      	ldr	r1, [r7, #4]
 8006728:	4613      	mov	r3, r2
 800672a:	011b      	lsls	r3, r3, #4
 800672c:	1a9b      	subs	r3, r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	440b      	add	r3, r1
 8006732:	333d      	adds	r3, #61	@ 0x3d
 8006734:	4602      	mov	r2, r0
 8006736:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	799b      	ldrb	r3, [r3, #6]
 800673c:	2b01      	cmp	r3, #1
 800673e:	f040 8171 	bne.w	8006a24 <HCD_HC_OUT_IRQHandler+0x954>
 8006742:	78fa      	ldrb	r2, [r7, #3]
 8006744:	6879      	ldr	r1, [r7, #4]
 8006746:	4613      	mov	r3, r2
 8006748:	011b      	lsls	r3, r3, #4
 800674a:	1a9b      	subs	r3, r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	440b      	add	r3, r1
 8006750:	3334      	adds	r3, #52	@ 0x34
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 8165 	beq.w	8006a24 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800675a:	78fa      	ldrb	r2, [r7, #3]
 800675c:	6879      	ldr	r1, [r7, #4]
 800675e:	4613      	mov	r3, r2
 8006760:	011b      	lsls	r3, r3, #4
 8006762:	1a9b      	subs	r3, r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	440b      	add	r3, r1
 8006768:	3334      	adds	r3, #52	@ 0x34
 800676a:	6819      	ldr	r1, [r3, #0]
 800676c:	78fa      	ldrb	r2, [r7, #3]
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	4613      	mov	r3, r2
 8006772:	011b      	lsls	r3, r3, #4
 8006774:	1a9b      	subs	r3, r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4403      	add	r3, r0
 800677a:	3328      	adds	r3, #40	@ 0x28
 800677c:	881b      	ldrh	r3, [r3, #0]
 800677e:	440b      	add	r3, r1
 8006780:	1e59      	subs	r1, r3, #1
 8006782:	78fa      	ldrb	r2, [r7, #3]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	4613      	mov	r3, r2
 8006788:	011b      	lsls	r3, r3, #4
 800678a:	1a9b      	subs	r3, r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4403      	add	r3, r0
 8006790:	3328      	adds	r3, #40	@ 0x28
 8006792:	881b      	ldrh	r3, [r3, #0]
 8006794:	fbb1 f3f3 	udiv	r3, r1, r3
 8006798:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f000 813f 	beq.w	8006a24 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80067a6:	78fa      	ldrb	r2, [r7, #3]
 80067a8:	6879      	ldr	r1, [r7, #4]
 80067aa:	4613      	mov	r3, r2
 80067ac:	011b      	lsls	r3, r3, #4
 80067ae:	1a9b      	subs	r3, r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	440b      	add	r3, r1
 80067b4:	333d      	adds	r3, #61	@ 0x3d
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	78fa      	ldrb	r2, [r7, #3]
 80067ba:	f083 0301 	eor.w	r3, r3, #1
 80067be:	b2d8      	uxtb	r0, r3
 80067c0:	6879      	ldr	r1, [r7, #4]
 80067c2:	4613      	mov	r3, r2
 80067c4:	011b      	lsls	r3, r3, #4
 80067c6:	1a9b      	subs	r3, r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	440b      	add	r3, r1
 80067cc:	333d      	adds	r3, #61	@ 0x3d
 80067ce:	4602      	mov	r2, r0
 80067d0:	701a      	strb	r2, [r3, #0]
 80067d2:	e127      	b.n	8006a24 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80067d4:	78fa      	ldrb	r2, [r7, #3]
 80067d6:	6879      	ldr	r1, [r7, #4]
 80067d8:	4613      	mov	r3, r2
 80067da:	011b      	lsls	r3, r3, #4
 80067dc:	1a9b      	subs	r3, r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	440b      	add	r3, r1
 80067e2:	334d      	adds	r3, #77	@ 0x4d
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	2b03      	cmp	r3, #3
 80067e8:	d120      	bne.n	800682c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80067ea:	78fa      	ldrb	r2, [r7, #3]
 80067ec:	6879      	ldr	r1, [r7, #4]
 80067ee:	4613      	mov	r3, r2
 80067f0:	011b      	lsls	r3, r3, #4
 80067f2:	1a9b      	subs	r3, r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	440b      	add	r3, r1
 80067f8:	334d      	adds	r3, #77	@ 0x4d
 80067fa:	2202      	movs	r2, #2
 80067fc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80067fe:	78fa      	ldrb	r2, [r7, #3]
 8006800:	6879      	ldr	r1, [r7, #4]
 8006802:	4613      	mov	r3, r2
 8006804:	011b      	lsls	r3, r3, #4
 8006806:	1a9b      	subs	r3, r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	440b      	add	r3, r1
 800680c:	331b      	adds	r3, #27
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	2b01      	cmp	r3, #1
 8006812:	f040 8107 	bne.w	8006a24 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006816:	78fa      	ldrb	r2, [r7, #3]
 8006818:	6879      	ldr	r1, [r7, #4]
 800681a:	4613      	mov	r3, r2
 800681c:	011b      	lsls	r3, r3, #4
 800681e:	1a9b      	subs	r3, r3, r2
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	440b      	add	r3, r1
 8006824:	334c      	adds	r3, #76	@ 0x4c
 8006826:	2202      	movs	r2, #2
 8006828:	701a      	strb	r2, [r3, #0]
 800682a:	e0fb      	b.n	8006a24 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800682c:	78fa      	ldrb	r2, [r7, #3]
 800682e:	6879      	ldr	r1, [r7, #4]
 8006830:	4613      	mov	r3, r2
 8006832:	011b      	lsls	r3, r3, #4
 8006834:	1a9b      	subs	r3, r3, r2
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	440b      	add	r3, r1
 800683a:	334d      	adds	r3, #77	@ 0x4d
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	2b04      	cmp	r3, #4
 8006840:	d13a      	bne.n	80068b8 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006842:	78fa      	ldrb	r2, [r7, #3]
 8006844:	6879      	ldr	r1, [r7, #4]
 8006846:	4613      	mov	r3, r2
 8006848:	011b      	lsls	r3, r3, #4
 800684a:	1a9b      	subs	r3, r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	440b      	add	r3, r1
 8006850:	334d      	adds	r3, #77	@ 0x4d
 8006852:	2202      	movs	r2, #2
 8006854:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006856:	78fa      	ldrb	r2, [r7, #3]
 8006858:	6879      	ldr	r1, [r7, #4]
 800685a:	4613      	mov	r3, r2
 800685c:	011b      	lsls	r3, r3, #4
 800685e:	1a9b      	subs	r3, r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	440b      	add	r3, r1
 8006864:	334c      	adds	r3, #76	@ 0x4c
 8006866:	2202      	movs	r2, #2
 8006868:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800686a:	78fa      	ldrb	r2, [r7, #3]
 800686c:	6879      	ldr	r1, [r7, #4]
 800686e:	4613      	mov	r3, r2
 8006870:	011b      	lsls	r3, r3, #4
 8006872:	1a9b      	subs	r3, r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	440b      	add	r3, r1
 8006878:	331b      	adds	r3, #27
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	2b01      	cmp	r3, #1
 800687e:	f040 80d1 	bne.w	8006a24 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8006882:	78fa      	ldrb	r2, [r7, #3]
 8006884:	6879      	ldr	r1, [r7, #4]
 8006886:	4613      	mov	r3, r2
 8006888:	011b      	lsls	r3, r3, #4
 800688a:	1a9b      	subs	r3, r3, r2
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	440b      	add	r3, r1
 8006890:	331b      	adds	r3, #27
 8006892:	2200      	movs	r2, #0
 8006894:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006896:	78fb      	ldrb	r3, [r7, #3]
 8006898:	015a      	lsls	r2, r3, #5
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	4413      	add	r3, r2
 800689e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	78fa      	ldrb	r2, [r7, #3]
 80068a6:	0151      	lsls	r1, r2, #5
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	440a      	add	r2, r1
 80068ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068b4:	6053      	str	r3, [r2, #4]
 80068b6:	e0b5      	b.n	8006a24 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80068b8:	78fa      	ldrb	r2, [r7, #3]
 80068ba:	6879      	ldr	r1, [r7, #4]
 80068bc:	4613      	mov	r3, r2
 80068be:	011b      	lsls	r3, r3, #4
 80068c0:	1a9b      	subs	r3, r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	440b      	add	r3, r1
 80068c6:	334d      	adds	r3, #77	@ 0x4d
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	2b05      	cmp	r3, #5
 80068cc:	d114      	bne.n	80068f8 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80068ce:	78fa      	ldrb	r2, [r7, #3]
 80068d0:	6879      	ldr	r1, [r7, #4]
 80068d2:	4613      	mov	r3, r2
 80068d4:	011b      	lsls	r3, r3, #4
 80068d6:	1a9b      	subs	r3, r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	440b      	add	r3, r1
 80068dc:	334d      	adds	r3, #77	@ 0x4d
 80068de:	2202      	movs	r2, #2
 80068e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80068e2:	78fa      	ldrb	r2, [r7, #3]
 80068e4:	6879      	ldr	r1, [r7, #4]
 80068e6:	4613      	mov	r3, r2
 80068e8:	011b      	lsls	r3, r3, #4
 80068ea:	1a9b      	subs	r3, r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	440b      	add	r3, r1
 80068f0:	334c      	adds	r3, #76	@ 0x4c
 80068f2:	2202      	movs	r2, #2
 80068f4:	701a      	strb	r2, [r3, #0]
 80068f6:	e095      	b.n	8006a24 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80068f8:	78fa      	ldrb	r2, [r7, #3]
 80068fa:	6879      	ldr	r1, [r7, #4]
 80068fc:	4613      	mov	r3, r2
 80068fe:	011b      	lsls	r3, r3, #4
 8006900:	1a9b      	subs	r3, r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	440b      	add	r3, r1
 8006906:	334d      	adds	r3, #77	@ 0x4d
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	2b06      	cmp	r3, #6
 800690c:	d114      	bne.n	8006938 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800690e:	78fa      	ldrb	r2, [r7, #3]
 8006910:	6879      	ldr	r1, [r7, #4]
 8006912:	4613      	mov	r3, r2
 8006914:	011b      	lsls	r3, r3, #4
 8006916:	1a9b      	subs	r3, r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	440b      	add	r3, r1
 800691c:	334d      	adds	r3, #77	@ 0x4d
 800691e:	2202      	movs	r2, #2
 8006920:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8006922:	78fa      	ldrb	r2, [r7, #3]
 8006924:	6879      	ldr	r1, [r7, #4]
 8006926:	4613      	mov	r3, r2
 8006928:	011b      	lsls	r3, r3, #4
 800692a:	1a9b      	subs	r3, r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	440b      	add	r3, r1
 8006930:	334c      	adds	r3, #76	@ 0x4c
 8006932:	2205      	movs	r2, #5
 8006934:	701a      	strb	r2, [r3, #0]
 8006936:	e075      	b.n	8006a24 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006938:	78fa      	ldrb	r2, [r7, #3]
 800693a:	6879      	ldr	r1, [r7, #4]
 800693c:	4613      	mov	r3, r2
 800693e:	011b      	lsls	r3, r3, #4
 8006940:	1a9b      	subs	r3, r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	440b      	add	r3, r1
 8006946:	334d      	adds	r3, #77	@ 0x4d
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	2b07      	cmp	r3, #7
 800694c:	d00a      	beq.n	8006964 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800694e:	78fa      	ldrb	r2, [r7, #3]
 8006950:	6879      	ldr	r1, [r7, #4]
 8006952:	4613      	mov	r3, r2
 8006954:	011b      	lsls	r3, r3, #4
 8006956:	1a9b      	subs	r3, r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	440b      	add	r3, r1
 800695c:	334d      	adds	r3, #77	@ 0x4d
 800695e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006960:	2b09      	cmp	r3, #9
 8006962:	d170      	bne.n	8006a46 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006964:	78fa      	ldrb	r2, [r7, #3]
 8006966:	6879      	ldr	r1, [r7, #4]
 8006968:	4613      	mov	r3, r2
 800696a:	011b      	lsls	r3, r3, #4
 800696c:	1a9b      	subs	r3, r3, r2
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	440b      	add	r3, r1
 8006972:	334d      	adds	r3, #77	@ 0x4d
 8006974:	2202      	movs	r2, #2
 8006976:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006978:	78fa      	ldrb	r2, [r7, #3]
 800697a:	6879      	ldr	r1, [r7, #4]
 800697c:	4613      	mov	r3, r2
 800697e:	011b      	lsls	r3, r3, #4
 8006980:	1a9b      	subs	r3, r3, r2
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	440b      	add	r3, r1
 8006986:	3344      	adds	r3, #68	@ 0x44
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	1c59      	adds	r1, r3, #1
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	4613      	mov	r3, r2
 8006990:	011b      	lsls	r3, r3, #4
 8006992:	1a9b      	subs	r3, r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4403      	add	r3, r0
 8006998:	3344      	adds	r3, #68	@ 0x44
 800699a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800699c:	78fa      	ldrb	r2, [r7, #3]
 800699e:	6879      	ldr	r1, [r7, #4]
 80069a0:	4613      	mov	r3, r2
 80069a2:	011b      	lsls	r3, r3, #4
 80069a4:	1a9b      	subs	r3, r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	440b      	add	r3, r1
 80069aa:	3344      	adds	r3, #68	@ 0x44
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d914      	bls.n	80069dc <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80069b2:	78fa      	ldrb	r2, [r7, #3]
 80069b4:	6879      	ldr	r1, [r7, #4]
 80069b6:	4613      	mov	r3, r2
 80069b8:	011b      	lsls	r3, r3, #4
 80069ba:	1a9b      	subs	r3, r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	440b      	add	r3, r1
 80069c0:	3344      	adds	r3, #68	@ 0x44
 80069c2:	2200      	movs	r2, #0
 80069c4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80069c6:	78fa      	ldrb	r2, [r7, #3]
 80069c8:	6879      	ldr	r1, [r7, #4]
 80069ca:	4613      	mov	r3, r2
 80069cc:	011b      	lsls	r3, r3, #4
 80069ce:	1a9b      	subs	r3, r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	440b      	add	r3, r1
 80069d4:	334c      	adds	r3, #76	@ 0x4c
 80069d6:	2204      	movs	r2, #4
 80069d8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80069da:	e022      	b.n	8006a22 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80069dc:	78fa      	ldrb	r2, [r7, #3]
 80069de:	6879      	ldr	r1, [r7, #4]
 80069e0:	4613      	mov	r3, r2
 80069e2:	011b      	lsls	r3, r3, #4
 80069e4:	1a9b      	subs	r3, r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	440b      	add	r3, r1
 80069ea:	334c      	adds	r3, #76	@ 0x4c
 80069ec:	2202      	movs	r2, #2
 80069ee:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80069f0:	78fb      	ldrb	r3, [r7, #3]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006a06:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a0e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006a10:	78fb      	ldrb	r3, [r7, #3]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006a22:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006a24:	78fa      	ldrb	r2, [r7, #3]
 8006a26:	6879      	ldr	r1, [r7, #4]
 8006a28:	4613      	mov	r3, r2
 8006a2a:	011b      	lsls	r3, r3, #4
 8006a2c:	1a9b      	subs	r3, r3, r2
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	440b      	add	r3, r1
 8006a32:	334c      	adds	r3, #76	@ 0x4c
 8006a34:	781a      	ldrb	r2, [r3, #0]
 8006a36:	78fb      	ldrb	r3, [r7, #3]
 8006a38:	4619      	mov	r1, r3
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f009 fd20 	bl	8010480 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006a40:	e002      	b.n	8006a48 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8006a42:	bf00      	nop
 8006a44:	e000      	b.n	8006a48 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8006a46:	bf00      	nop
  }
}
 8006a48:	3718      	adds	r7, #24
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b08a      	sub	sp, #40	@ 0x28
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	f003 030f 	and.w	r3, r3, #15
 8006a6e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	0c5b      	lsrs	r3, r3, #17
 8006a74:	f003 030f 	and.w	r3, r3, #15
 8006a78:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	091b      	lsrs	r3, r3, #4
 8006a7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a82:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d004      	beq.n	8006a94 <HCD_RXQLVL_IRQHandler+0x46>
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	2b05      	cmp	r3, #5
 8006a8e:	f000 80b6 	beq.w	8006bfe <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006a92:	e0b7      	b.n	8006c04 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	f000 80b3 	beq.w	8006c02 <HCD_RXQLVL_IRQHandler+0x1b4>
 8006a9c:	6879      	ldr	r1, [r7, #4]
 8006a9e:	69ba      	ldr	r2, [r7, #24]
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	011b      	lsls	r3, r3, #4
 8006aa4:	1a9b      	subs	r3, r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	440b      	add	r3, r1
 8006aaa:	332c      	adds	r3, #44	@ 0x2c
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 80a7 	beq.w	8006c02 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8006ab4:	6879      	ldr	r1, [r7, #4]
 8006ab6:	69ba      	ldr	r2, [r7, #24]
 8006ab8:	4613      	mov	r3, r2
 8006aba:	011b      	lsls	r3, r3, #4
 8006abc:	1a9b      	subs	r3, r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	440b      	add	r3, r1
 8006ac2:	3338      	adds	r3, #56	@ 0x38
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	18d1      	adds	r1, r2, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	69ba      	ldr	r2, [r7, #24]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	011b      	lsls	r3, r3, #4
 8006ad2:	1a9b      	subs	r3, r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4403      	add	r3, r0
 8006ad8:	3334      	adds	r3, #52	@ 0x34
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4299      	cmp	r1, r3
 8006ade:	f200 8083 	bhi.w	8006be8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6818      	ldr	r0, [r3, #0]
 8006ae6:	6879      	ldr	r1, [r7, #4]
 8006ae8:	69ba      	ldr	r2, [r7, #24]
 8006aea:	4613      	mov	r3, r2
 8006aec:	011b      	lsls	r3, r3, #4
 8006aee:	1a9b      	subs	r3, r3, r2
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	440b      	add	r3, r1
 8006af4:	332c      	adds	r3, #44	@ 0x2c
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	693a      	ldr	r2, [r7, #16]
 8006afa:	b292      	uxth	r2, r2
 8006afc:	4619      	mov	r1, r3
 8006afe:	f003 feb1 	bl	800a864 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8006b02:	6879      	ldr	r1, [r7, #4]
 8006b04:	69ba      	ldr	r2, [r7, #24]
 8006b06:	4613      	mov	r3, r2
 8006b08:	011b      	lsls	r3, r3, #4
 8006b0a:	1a9b      	subs	r3, r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	440b      	add	r3, r1
 8006b10:	332c      	adds	r3, #44	@ 0x2c
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	18d1      	adds	r1, r2, r3
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	69ba      	ldr	r2, [r7, #24]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	011b      	lsls	r3, r3, #4
 8006b20:	1a9b      	subs	r3, r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	4403      	add	r3, r0
 8006b26:	332c      	adds	r3, #44	@ 0x2c
 8006b28:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8006b2a:	6879      	ldr	r1, [r7, #4]
 8006b2c:	69ba      	ldr	r2, [r7, #24]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	011b      	lsls	r3, r3, #4
 8006b32:	1a9b      	subs	r3, r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	440b      	add	r3, r1
 8006b38:	3338      	adds	r3, #56	@ 0x38
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	18d1      	adds	r1, r2, r3
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	69ba      	ldr	r2, [r7, #24]
 8006b44:	4613      	mov	r3, r2
 8006b46:	011b      	lsls	r3, r3, #4
 8006b48:	1a9b      	subs	r3, r3, r2
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	4403      	add	r3, r0
 8006b4e:	3338      	adds	r3, #56	@ 0x38
 8006b50:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	015a      	lsls	r2, r3, #5
 8006b56:	6a3b      	ldr	r3, [r7, #32]
 8006b58:	4413      	add	r3, r2
 8006b5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	0cdb      	lsrs	r3, r3, #19
 8006b62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b66:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006b68:	6879      	ldr	r1, [r7, #4]
 8006b6a:	69ba      	ldr	r2, [r7, #24]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	011b      	lsls	r3, r3, #4
 8006b70:	1a9b      	subs	r3, r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	440b      	add	r3, r1
 8006b76:	3328      	adds	r3, #40	@ 0x28
 8006b78:	881b      	ldrh	r3, [r3, #0]
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d13f      	bne.n	8006c02 <HCD_RXQLVL_IRQHandler+0x1b4>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d03c      	beq.n	8006c02 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	6a3b      	ldr	r3, [r7, #32]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006b9e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006ba6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	015a      	lsls	r2, r3, #5
 8006bac:	6a3b      	ldr	r3, [r7, #32]
 8006bae:	4413      	add	r3, r2
 8006bb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8006bba:	6879      	ldr	r1, [r7, #4]
 8006bbc:	69ba      	ldr	r2, [r7, #24]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	011b      	lsls	r3, r3, #4
 8006bc2:	1a9b      	subs	r3, r3, r2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	440b      	add	r3, r1
 8006bc8:	333c      	adds	r3, #60	@ 0x3c
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	f083 0301 	eor.w	r3, r3, #1
 8006bd0:	b2d8      	uxtb	r0, r3
 8006bd2:	6879      	ldr	r1, [r7, #4]
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	011b      	lsls	r3, r3, #4
 8006bda:	1a9b      	subs	r3, r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	440b      	add	r3, r1
 8006be0:	333c      	adds	r3, #60	@ 0x3c
 8006be2:	4602      	mov	r2, r0
 8006be4:	701a      	strb	r2, [r3, #0]
      break;
 8006be6:	e00c      	b.n	8006c02 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8006be8:	6879      	ldr	r1, [r7, #4]
 8006bea:	69ba      	ldr	r2, [r7, #24]
 8006bec:	4613      	mov	r3, r2
 8006bee:	011b      	lsls	r3, r3, #4
 8006bf0:	1a9b      	subs	r3, r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	440b      	add	r3, r1
 8006bf6:	334c      	adds	r3, #76	@ 0x4c
 8006bf8:	2204      	movs	r2, #4
 8006bfa:	701a      	strb	r2, [r3, #0]
      break;
 8006bfc:	e001      	b.n	8006c02 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8006bfe:	bf00      	nop
 8006c00:	e000      	b.n	8006c04 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8006c02:	bf00      	nop
  }
}
 8006c04:	bf00      	nop
 8006c06:	3728      	adds	r7, #40	@ 0x28
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006c38:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f003 0302 	and.w	r3, r3, #2
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d10b      	bne.n	8006c5c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f003 0301 	and.w	r3, r3, #1
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d102      	bne.n	8006c54 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f009 fbfa 	bl	8010448 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	f043 0302 	orr.w	r3, r3, #2
 8006c5a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f003 0308 	and.w	r3, r3, #8
 8006c62:	2b08      	cmp	r3, #8
 8006c64:	d132      	bne.n	8006ccc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	f043 0308 	orr.w	r3, r3, #8
 8006c6c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f003 0304 	and.w	r3, r3, #4
 8006c74:	2b04      	cmp	r3, #4
 8006c76:	d126      	bne.n	8006cc6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	7a5b      	ldrb	r3, [r3, #9]
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d113      	bne.n	8006ca8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8006c86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c8a:	d106      	bne.n	8006c9a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2102      	movs	r1, #2
 8006c92:	4618      	mov	r0, r3
 8006c94:	f003 ff76 	bl	800ab84 <USB_InitFSLSPClkSel>
 8006c98:	e011      	b.n	8006cbe <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2101      	movs	r1, #1
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f003 ff6f 	bl	800ab84 <USB_InitFSLSPClkSel>
 8006ca6:	e00a      	b.n	8006cbe <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	79db      	ldrb	r3, [r3, #7]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d106      	bne.n	8006cbe <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8006cbc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f009 fbf0 	bl	80104a4 <HAL_HCD_PortEnabled_Callback>
 8006cc4:	e002      	b.n	8006ccc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f009 fbfa 	bl	80104c0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f003 0320 	and.w	r3, r3, #32
 8006cd2:	2b20      	cmp	r3, #32
 8006cd4:	d103      	bne.n	8006cde <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	f043 0320 	orr.w	r3, r3, #32
 8006cdc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	6013      	str	r3, [r2, #0]
}
 8006cea:	bf00      	nop
 8006cec:	3718      	adds	r7, #24
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
	...

08006cf4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e12b      	b.n	8006f5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d106      	bne.n	8006d20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7fb f984 	bl	8002028 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2224      	movs	r2, #36	@ 0x24
 8006d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f022 0201 	bic.w	r2, r2, #1
 8006d36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006d56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006d58:	f001 f964 	bl	8008024 <HAL_RCC_GetPCLK1Freq>
 8006d5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	4a81      	ldr	r2, [pc, #516]	@ (8006f68 <HAL_I2C_Init+0x274>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d807      	bhi.n	8006d78 <HAL_I2C_Init+0x84>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	4a80      	ldr	r2, [pc, #512]	@ (8006f6c <HAL_I2C_Init+0x278>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	bf94      	ite	ls
 8006d70:	2301      	movls	r3, #1
 8006d72:	2300      	movhi	r3, #0
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	e006      	b.n	8006d86 <HAL_I2C_Init+0x92>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	4a7d      	ldr	r2, [pc, #500]	@ (8006f70 <HAL_I2C_Init+0x27c>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	bf94      	ite	ls
 8006d80:	2301      	movls	r3, #1
 8006d82:	2300      	movhi	r3, #0
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d001      	beq.n	8006d8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e0e7      	b.n	8006f5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	4a78      	ldr	r2, [pc, #480]	@ (8006f74 <HAL_I2C_Init+0x280>)
 8006d92:	fba2 2303 	umull	r2, r3, r2, r3
 8006d96:	0c9b      	lsrs	r3, r3, #18
 8006d98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68ba      	ldr	r2, [r7, #8]
 8006daa:	430a      	orrs	r2, r1
 8006dac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	6a1b      	ldr	r3, [r3, #32]
 8006db4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	4a6a      	ldr	r2, [pc, #424]	@ (8006f68 <HAL_I2C_Init+0x274>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d802      	bhi.n	8006dc8 <HAL_I2C_Init+0xd4>
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	e009      	b.n	8006ddc <HAL_I2C_Init+0xe8>
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006dce:	fb02 f303 	mul.w	r3, r2, r3
 8006dd2:	4a69      	ldr	r2, [pc, #420]	@ (8006f78 <HAL_I2C_Init+0x284>)
 8006dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd8:	099b      	lsrs	r3, r3, #6
 8006dda:	3301      	adds	r3, #1
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	6812      	ldr	r2, [r2, #0]
 8006de0:	430b      	orrs	r3, r1
 8006de2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006dee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	495c      	ldr	r1, [pc, #368]	@ (8006f68 <HAL_I2C_Init+0x274>)
 8006df8:	428b      	cmp	r3, r1
 8006dfa:	d819      	bhi.n	8006e30 <HAL_I2C_Init+0x13c>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	1e59      	subs	r1, r3, #1
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	005b      	lsls	r3, r3, #1
 8006e06:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e0a:	1c59      	adds	r1, r3, #1
 8006e0c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006e10:	400b      	ands	r3, r1
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00a      	beq.n	8006e2c <HAL_I2C_Init+0x138>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	1e59      	subs	r1, r3, #1
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	005b      	lsls	r3, r3, #1
 8006e20:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e24:	3301      	adds	r3, #1
 8006e26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e2a:	e051      	b.n	8006ed0 <HAL_I2C_Init+0x1dc>
 8006e2c:	2304      	movs	r3, #4
 8006e2e:	e04f      	b.n	8006ed0 <HAL_I2C_Init+0x1dc>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d111      	bne.n	8006e5c <HAL_I2C_Init+0x168>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	1e58      	subs	r0, r3, #1
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6859      	ldr	r1, [r3, #4]
 8006e40:	460b      	mov	r3, r1
 8006e42:	005b      	lsls	r3, r3, #1
 8006e44:	440b      	add	r3, r1
 8006e46:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	bf0c      	ite	eq
 8006e54:	2301      	moveq	r3, #1
 8006e56:	2300      	movne	r3, #0
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	e012      	b.n	8006e82 <HAL_I2C_Init+0x18e>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	1e58      	subs	r0, r3, #1
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6859      	ldr	r1, [r3, #4]
 8006e64:	460b      	mov	r3, r1
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	440b      	add	r3, r1
 8006e6a:	0099      	lsls	r1, r3, #2
 8006e6c:	440b      	add	r3, r1
 8006e6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e72:	3301      	adds	r3, #1
 8006e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	bf0c      	ite	eq
 8006e7c:	2301      	moveq	r3, #1
 8006e7e:	2300      	movne	r3, #0
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d001      	beq.n	8006e8a <HAL_I2C_Init+0x196>
 8006e86:	2301      	movs	r3, #1
 8006e88:	e022      	b.n	8006ed0 <HAL_I2C_Init+0x1dc>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10e      	bne.n	8006eb0 <HAL_I2C_Init+0x1bc>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	1e58      	subs	r0, r3, #1
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6859      	ldr	r1, [r3, #4]
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	005b      	lsls	r3, r3, #1
 8006e9e:	440b      	add	r3, r1
 8006ea0:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006eaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006eae:	e00f      	b.n	8006ed0 <HAL_I2C_Init+0x1dc>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	1e58      	subs	r0, r3, #1
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6859      	ldr	r1, [r3, #4]
 8006eb8:	460b      	mov	r3, r1
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	440b      	add	r3, r1
 8006ebe:	0099      	lsls	r1, r3, #2
 8006ec0:	440b      	add	r3, r1
 8006ec2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ecc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ed0:	6879      	ldr	r1, [r7, #4]
 8006ed2:	6809      	ldr	r1, [r1, #0]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	69da      	ldr	r2, [r3, #28]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a1b      	ldr	r3, [r3, #32]
 8006eea:	431a      	orrs	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	430a      	orrs	r2, r1
 8006ef2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006efe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	6911      	ldr	r1, [r2, #16]
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	68d2      	ldr	r2, [r2, #12]
 8006f0a:	4311      	orrs	r1, r2
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	6812      	ldr	r2, [r2, #0]
 8006f10:	430b      	orrs	r3, r1
 8006f12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	695a      	ldr	r2, [r3, #20]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	431a      	orrs	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f042 0201 	orr.w	r2, r2, #1
 8006f3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2220      	movs	r2, #32
 8006f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	000186a0 	.word	0x000186a0
 8006f6c:	001e847f 	.word	0x001e847f
 8006f70:	003d08ff 	.word	0x003d08ff
 8006f74:	431bde83 	.word	0x431bde83
 8006f78:	10624dd3 	.word	0x10624dd3

08006f7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b20      	cmp	r3, #32
 8006f90:	d129      	bne.n	8006fe6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2224      	movs	r2, #36	@ 0x24
 8006f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f022 0201 	bic.w	r2, r2, #1
 8006fa8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f022 0210 	bic.w	r2, r2, #16
 8006fb8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	683a      	ldr	r2, [r7, #0]
 8006fc6:	430a      	orrs	r2, r1
 8006fc8:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f042 0201 	orr.w	r2, r2, #1
 8006fd8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2220      	movs	r2, #32
 8006fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	e000      	b.n	8006fe8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006fe6:	2302      	movs	r3, #2
  }
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006ffe:	2300      	movs	r3, #0
 8007000:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007008:	b2db      	uxtb	r3, r3
 800700a:	2b20      	cmp	r3, #32
 800700c:	d12a      	bne.n	8007064 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2224      	movs	r2, #36	@ 0x24
 8007012:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f022 0201 	bic.w	r2, r2, #1
 8007024:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800702c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800702e:	89fb      	ldrh	r3, [r7, #14]
 8007030:	f023 030f 	bic.w	r3, r3, #15
 8007034:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	b29a      	uxth	r2, r3
 800703a:	89fb      	ldrh	r3, [r7, #14]
 800703c:	4313      	orrs	r3, r2
 800703e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	89fa      	ldrh	r2, [r7, #14]
 8007046:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f042 0201 	orr.w	r2, r2, #1
 8007056:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2220      	movs	r2, #32
 800705c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8007060:	2300      	movs	r3, #0
 8007062:	e000      	b.n	8007066 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007064:	2302      	movs	r3, #2
  }
}
 8007066:	4618      	mov	r0, r3
 8007068:	3714      	adds	r7, #20
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
	...

08007074 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e0bf      	b.n	8007206 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b00      	cmp	r3, #0
 8007090:	d106      	bne.n	80070a0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f7fb fe0c 	bl	8002cb8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2202      	movs	r2, #2
 80070a4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	699a      	ldr	r2, [r3, #24]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80070b6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6999      	ldr	r1, [r3, #24]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685a      	ldr	r2, [r3, #4]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80070cc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	430a      	orrs	r2, r1
 80070da:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6899      	ldr	r1, [r3, #8]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	4b4a      	ldr	r3, [pc, #296]	@ (8007210 <HAL_LTDC_Init+0x19c>)
 80070e8:	400b      	ands	r3, r1
 80070ea:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	695b      	ldr	r3, [r3, #20]
 80070f0:	041b      	lsls	r3, r3, #16
 80070f2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	6899      	ldr	r1, [r3, #8]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	699a      	ldr	r2, [r3, #24]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	431a      	orrs	r2, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	430a      	orrs	r2, r1
 8007108:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68d9      	ldr	r1, [r3, #12]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	4b3e      	ldr	r3, [pc, #248]	@ (8007210 <HAL_LTDC_Init+0x19c>)
 8007116:	400b      	ands	r3, r1
 8007118:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	69db      	ldr	r3, [r3, #28]
 800711e:	041b      	lsls	r3, r3, #16
 8007120:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68d9      	ldr	r1, [r3, #12]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a1a      	ldr	r2, [r3, #32]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	431a      	orrs	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	430a      	orrs	r2, r1
 8007136:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	6919      	ldr	r1, [r3, #16]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	4b33      	ldr	r3, [pc, #204]	@ (8007210 <HAL_LTDC_Init+0x19c>)
 8007144:	400b      	ands	r3, r1
 8007146:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800714c:	041b      	lsls	r3, r3, #16
 800714e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	6919      	ldr	r1, [r3, #16]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	431a      	orrs	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	430a      	orrs	r2, r1
 8007164:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	6959      	ldr	r1, [r3, #20]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	4b27      	ldr	r3, [pc, #156]	@ (8007210 <HAL_LTDC_Init+0x19c>)
 8007172:	400b      	ands	r3, r1
 8007174:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800717a:	041b      	lsls	r3, r3, #16
 800717c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	6959      	ldr	r1, [r3, #20]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	431a      	orrs	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	430a      	orrs	r2, r1
 8007192:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800719a:	021b      	lsls	r3, r3, #8
 800719c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80071a4:	041b      	lsls	r3, r3, #16
 80071a6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80071b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80071ca:	431a      	orrs	r2, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	430a      	orrs	r2, r1
 80071d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f042 0206 	orr.w	r2, r2, #6
 80071e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	699a      	ldr	r2, [r3, #24]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f042 0201 	orr.w	r2, r2, #1
 80071f2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	f000f800 	.word	0xf000f800

08007214 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007222:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800722a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f003 0304 	and.w	r3, r3, #4
 8007232:	2b00      	cmp	r3, #0
 8007234:	d023      	beq.n	800727e <HAL_LTDC_IRQHandler+0x6a>
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	f003 0304 	and.w	r3, r3, #4
 800723c:	2b00      	cmp	r3, #0
 800723e:	d01e      	beq.n	800727e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f022 0204 	bic.w	r2, r2, #4
 800724e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2204      	movs	r2, #4
 8007256:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800725e:	f043 0201 	orr.w	r2, r3, #1
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2204      	movs	r2, #4
 800726c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 f86f 	bl	800735c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f003 0302 	and.w	r3, r3, #2
 8007284:	2b00      	cmp	r3, #0
 8007286:	d023      	beq.n	80072d0 <HAL_LTDC_IRQHandler+0xbc>
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	f003 0302 	and.w	r3, r3, #2
 800728e:	2b00      	cmp	r3, #0
 8007290:	d01e      	beq.n	80072d0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f022 0202 	bic.w	r2, r2, #2
 80072a0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2202      	movs	r2, #2
 80072a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80072b0:	f043 0202 	orr.w	r2, r3, #2
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2204      	movs	r2, #4
 80072be:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f846 	bl	800735c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d01b      	beq.n	8007312 <HAL_LTDC_IRQHandler+0xfe>
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	f003 0301 	and.w	r3, r3, #1
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d016      	beq.n	8007312 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f022 0201 	bic.w	r2, r2, #1
 80072f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2201      	movs	r2, #1
 80072fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 f82f 	bl	8007370 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f003 0308 	and.w	r3, r3, #8
 8007318:	2b00      	cmp	r3, #0
 800731a:	d01b      	beq.n	8007354 <HAL_LTDC_IRQHandler+0x140>
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	f003 0308 	and.w	r3, r3, #8
 8007322:	2b00      	cmp	r3, #0
 8007324:	d016      	beq.n	8007354 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f022 0208 	bic.w	r2, r2, #8
 8007334:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2208      	movs	r2, #8
 800733c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f818 	bl	8007384 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007354:	bf00      	nop
 8007356:	3710      	adds	r7, #16
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007364:	bf00      	nop
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007378:	bf00      	nop
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800738c:	bf00      	nop
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007398:	b5b0      	push	{r4, r5, r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d101      	bne.n	80073b2 <HAL_LTDC_ConfigLayer+0x1a>
 80073ae:	2302      	movs	r3, #2
 80073b0:	e02c      	b.n	800740c <HAL_LTDC_ConfigLayer+0x74>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2202      	movs	r2, #2
 80073be:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80073c2:	68fa      	ldr	r2, [r7, #12]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2134      	movs	r1, #52	@ 0x34
 80073c8:	fb01 f303 	mul.w	r3, r1, r3
 80073cc:	4413      	add	r3, r2
 80073ce:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	4614      	mov	r4, r2
 80073d6:	461d      	mov	r5, r3
 80073d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80073da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80073de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80073e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073e4:	682b      	ldr	r3, [r5, #0]
 80073e6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	68b9      	ldr	r1, [r7, #8]
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f000 f811 	bl	8007414 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2201      	movs	r2, #1
 80073f8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bdb0      	pop	{r4, r5, r7, pc}

08007414 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007414:	b480      	push	{r7}
 8007416:	b089      	sub	sp, #36	@ 0x24
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	685a      	ldr	r2, [r3, #4]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	0c1b      	lsrs	r3, r3, #16
 800742c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007430:	4413      	add	r3, r2
 8007432:	041b      	lsls	r3, r3, #16
 8007434:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	461a      	mov	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	01db      	lsls	r3, r3, #7
 8007440:	4413      	add	r3, r2
 8007442:	3384      	adds	r3, #132	@ 0x84
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	6812      	ldr	r2, [r2, #0]
 800744a:	4611      	mov	r1, r2
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	01d2      	lsls	r2, r2, #7
 8007450:	440a      	add	r2, r1
 8007452:	3284      	adds	r2, #132	@ 0x84
 8007454:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007458:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	0c1b      	lsrs	r3, r3, #16
 8007466:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800746a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800746c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4619      	mov	r1, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	01db      	lsls	r3, r3, #7
 8007478:	440b      	add	r3, r1
 800747a:	3384      	adds	r3, #132	@ 0x84
 800747c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007482:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	68da      	ldr	r2, [r3, #12]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007492:	4413      	add	r3, r2
 8007494:	041b      	lsls	r3, r3, #16
 8007496:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	461a      	mov	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	01db      	lsls	r3, r3, #7
 80074a2:	4413      	add	r3, r2
 80074a4:	3384      	adds	r3, #132	@ 0x84
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	6812      	ldr	r2, [r2, #0]
 80074ac:	4611      	mov	r1, r2
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	01d2      	lsls	r2, r2, #7
 80074b2:	440a      	add	r2, r1
 80074b4:	3284      	adds	r2, #132	@ 0x84
 80074b6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80074ba:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	689a      	ldr	r2, [r3, #8]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074ca:	4413      	add	r3, r2
 80074cc:	1c5a      	adds	r2, r3, #1
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4619      	mov	r1, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	01db      	lsls	r3, r3, #7
 80074d8:	440b      	add	r3, r1
 80074da:	3384      	adds	r3, #132	@ 0x84
 80074dc:	4619      	mov	r1, r3
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	461a      	mov	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	01db      	lsls	r3, r3, #7
 80074ee:	4413      	add	r3, r2
 80074f0:	3384      	adds	r3, #132	@ 0x84
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	6812      	ldr	r2, [r2, #0]
 80074f8:	4611      	mov	r1, r2
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	01d2      	lsls	r2, r2, #7
 80074fe:	440a      	add	r2, r1
 8007500:	3284      	adds	r2, #132	@ 0x84
 8007502:	f023 0307 	bic.w	r3, r3, #7
 8007506:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	461a      	mov	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	01db      	lsls	r3, r3, #7
 8007512:	4413      	add	r3, r2
 8007514:	3384      	adds	r3, #132	@ 0x84
 8007516:	461a      	mov	r2, r3
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007524:	021b      	lsls	r3, r3, #8
 8007526:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800752e:	041b      	lsls	r3, r3, #16
 8007530:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	699b      	ldr	r3, [r3, #24]
 8007536:	061b      	lsls	r3, r3, #24
 8007538:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	461a      	mov	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	01db      	lsls	r3, r3, #7
 8007544:	4413      	add	r3, r2
 8007546:	3384      	adds	r3, #132	@ 0x84
 8007548:	699b      	ldr	r3, [r3, #24]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	461a      	mov	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	01db      	lsls	r3, r3, #7
 8007554:	4413      	add	r3, r2
 8007556:	3384      	adds	r3, #132	@ 0x84
 8007558:	461a      	mov	r2, r3
 800755a:	2300      	movs	r3, #0
 800755c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007564:	461a      	mov	r2, r3
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	431a      	orrs	r2, r3
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	431a      	orrs	r2, r3
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4619      	mov	r1, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	01db      	lsls	r3, r3, #7
 8007578:	440b      	add	r3, r1
 800757a:	3384      	adds	r3, #132	@ 0x84
 800757c:	4619      	mov	r1, r3
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	4313      	orrs	r3, r2
 8007582:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	461a      	mov	r2, r3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	01db      	lsls	r3, r3, #7
 800758e:	4413      	add	r3, r2
 8007590:	3384      	adds	r3, #132	@ 0x84
 8007592:	695b      	ldr	r3, [r3, #20]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	6812      	ldr	r2, [r2, #0]
 8007598:	4611      	mov	r1, r2
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	01d2      	lsls	r2, r2, #7
 800759e:	440a      	add	r2, r1
 80075a0:	3284      	adds	r2, #132	@ 0x84
 80075a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80075a6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	461a      	mov	r2, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	01db      	lsls	r3, r3, #7
 80075b2:	4413      	add	r3, r2
 80075b4:	3384      	adds	r3, #132	@ 0x84
 80075b6:	461a      	mov	r2, r3
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	695b      	ldr	r3, [r3, #20]
 80075bc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	461a      	mov	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	01db      	lsls	r3, r3, #7
 80075c8:	4413      	add	r3, r2
 80075ca:	3384      	adds	r3, #132	@ 0x84
 80075cc:	69db      	ldr	r3, [r3, #28]
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	6812      	ldr	r2, [r2, #0]
 80075d2:	4611      	mov	r1, r2
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	01d2      	lsls	r2, r2, #7
 80075d8:	440a      	add	r2, r1
 80075da:	3284      	adds	r2, #132	@ 0x84
 80075dc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80075e0:	f023 0307 	bic.w	r3, r3, #7
 80075e4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	69da      	ldr	r2, [r3, #28]
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	6a1b      	ldr	r3, [r3, #32]
 80075ee:	68f9      	ldr	r1, [r7, #12]
 80075f0:	6809      	ldr	r1, [r1, #0]
 80075f2:	4608      	mov	r0, r1
 80075f4:	6879      	ldr	r1, [r7, #4]
 80075f6:	01c9      	lsls	r1, r1, #7
 80075f8:	4401      	add	r1, r0
 80075fa:	3184      	adds	r1, #132	@ 0x84
 80075fc:	4313      	orrs	r3, r2
 80075fe:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	461a      	mov	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	01db      	lsls	r3, r3, #7
 800760a:	4413      	add	r3, r2
 800760c:	3384      	adds	r3, #132	@ 0x84
 800760e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	461a      	mov	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	01db      	lsls	r3, r3, #7
 800761a:	4413      	add	r3, r2
 800761c:	3384      	adds	r3, #132	@ 0x84
 800761e:	461a      	mov	r2, r3
 8007620:	2300      	movs	r3, #0
 8007622:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	461a      	mov	r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	01db      	lsls	r3, r3, #7
 800762e:	4413      	add	r3, r2
 8007630:	3384      	adds	r3, #132	@ 0x84
 8007632:	461a      	mov	r2, r3
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007638:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d102      	bne.n	8007648 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8007642:	2304      	movs	r3, #4
 8007644:	61fb      	str	r3, [r7, #28]
 8007646:	e01b      	b.n	8007680 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	2b01      	cmp	r3, #1
 800764e:	d102      	bne.n	8007656 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8007650:	2303      	movs	r3, #3
 8007652:	61fb      	str	r3, [r7, #28]
 8007654:	e014      	b.n	8007680 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	2b04      	cmp	r3, #4
 800765c:	d00b      	beq.n	8007676 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007662:	2b02      	cmp	r3, #2
 8007664:	d007      	beq.n	8007676 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800766a:	2b03      	cmp	r3, #3
 800766c:	d003      	beq.n	8007676 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007672:	2b07      	cmp	r3, #7
 8007674:	d102      	bne.n	800767c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8007676:	2302      	movs	r3, #2
 8007678:	61fb      	str	r3, [r7, #28]
 800767a:	e001      	b.n	8007680 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800767c:	2301      	movs	r3, #1
 800767e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	461a      	mov	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	01db      	lsls	r3, r3, #7
 800768a:	4413      	add	r3, r2
 800768c:	3384      	adds	r3, #132	@ 0x84
 800768e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	6812      	ldr	r2, [r2, #0]
 8007694:	4611      	mov	r1, r2
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	01d2      	lsls	r2, r2, #7
 800769a:	440a      	add	r2, r1
 800769c:	3284      	adds	r2, #132	@ 0x84
 800769e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80076a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076a8:	69fa      	ldr	r2, [r7, #28]
 80076aa:	fb02 f303 	mul.w	r3, r2, r3
 80076ae:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	6859      	ldr	r1, [r3, #4]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	1acb      	subs	r3, r1, r3
 80076ba:	69f9      	ldr	r1, [r7, #28]
 80076bc:	fb01 f303 	mul.w	r3, r1, r3
 80076c0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80076c2:	68f9      	ldr	r1, [r7, #12]
 80076c4:	6809      	ldr	r1, [r1, #0]
 80076c6:	4608      	mov	r0, r1
 80076c8:	6879      	ldr	r1, [r7, #4]
 80076ca:	01c9      	lsls	r1, r1, #7
 80076cc:	4401      	add	r1, r0
 80076ce:	3184      	adds	r1, #132	@ 0x84
 80076d0:	4313      	orrs	r3, r2
 80076d2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	461a      	mov	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	01db      	lsls	r3, r3, #7
 80076de:	4413      	add	r3, r2
 80076e0:	3384      	adds	r3, #132	@ 0x84
 80076e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	6812      	ldr	r2, [r2, #0]
 80076e8:	4611      	mov	r1, r2
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	01d2      	lsls	r2, r2, #7
 80076ee:	440a      	add	r2, r1
 80076f0:	3284      	adds	r2, #132	@ 0x84
 80076f2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80076f6:	f023 0307 	bic.w	r3, r3, #7
 80076fa:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	461a      	mov	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	01db      	lsls	r3, r3, #7
 8007706:	4413      	add	r3, r2
 8007708:	3384      	adds	r3, #132	@ 0x84
 800770a:	461a      	mov	r2, r3
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007710:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	461a      	mov	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	01db      	lsls	r3, r3, #7
 800771c:	4413      	add	r3, r2
 800771e:	3384      	adds	r3, #132	@ 0x84
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	6812      	ldr	r2, [r2, #0]
 8007726:	4611      	mov	r1, r2
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	01d2      	lsls	r2, r2, #7
 800772c:	440a      	add	r2, r1
 800772e:	3284      	adds	r2, #132	@ 0x84
 8007730:	f043 0301 	orr.w	r3, r3, #1
 8007734:	6013      	str	r3, [r2, #0]
}
 8007736:	bf00      	nop
 8007738:	3724      	adds	r7, #36	@ 0x24
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr
	...

08007744 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b086      	sub	sp, #24
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e267      	b.n	8007c26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	2b00      	cmp	r3, #0
 8007760:	d075      	beq.n	800784e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007762:	4b88      	ldr	r3, [pc, #544]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	f003 030c 	and.w	r3, r3, #12
 800776a:	2b04      	cmp	r3, #4
 800776c:	d00c      	beq.n	8007788 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800776e:	4b85      	ldr	r3, [pc, #532]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007776:	2b08      	cmp	r3, #8
 8007778:	d112      	bne.n	80077a0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800777a:	4b82      	ldr	r3, [pc, #520]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007782:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007786:	d10b      	bne.n	80077a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007788:	4b7e      	ldr	r3, [pc, #504]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d05b      	beq.n	800784c <HAL_RCC_OscConfig+0x108>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d157      	bne.n	800784c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e242      	b.n	8007c26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077a8:	d106      	bne.n	80077b8 <HAL_RCC_OscConfig+0x74>
 80077aa:	4b76      	ldr	r3, [pc, #472]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a75      	ldr	r2, [pc, #468]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 80077b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077b4:	6013      	str	r3, [r2, #0]
 80077b6:	e01d      	b.n	80077f4 <HAL_RCC_OscConfig+0xb0>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80077c0:	d10c      	bne.n	80077dc <HAL_RCC_OscConfig+0x98>
 80077c2:	4b70      	ldr	r3, [pc, #448]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a6f      	ldr	r2, [pc, #444]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 80077c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80077cc:	6013      	str	r3, [r2, #0]
 80077ce:	4b6d      	ldr	r3, [pc, #436]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a6c      	ldr	r2, [pc, #432]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 80077d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077d8:	6013      	str	r3, [r2, #0]
 80077da:	e00b      	b.n	80077f4 <HAL_RCC_OscConfig+0xb0>
 80077dc:	4b69      	ldr	r3, [pc, #420]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a68      	ldr	r2, [pc, #416]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 80077e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077e6:	6013      	str	r3, [r2, #0]
 80077e8:	4b66      	ldr	r3, [pc, #408]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a65      	ldr	r2, [pc, #404]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 80077ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80077f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d013      	beq.n	8007824 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077fc:	f7fc f8f6 	bl	80039ec <HAL_GetTick>
 8007800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007802:	e008      	b.n	8007816 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007804:	f7fc f8f2 	bl	80039ec <HAL_GetTick>
 8007808:	4602      	mov	r2, r0
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	2b64      	cmp	r3, #100	@ 0x64
 8007810:	d901      	bls.n	8007816 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007812:	2303      	movs	r3, #3
 8007814:	e207      	b.n	8007c26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007816:	4b5b      	ldr	r3, [pc, #364]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800781e:	2b00      	cmp	r3, #0
 8007820:	d0f0      	beq.n	8007804 <HAL_RCC_OscConfig+0xc0>
 8007822:	e014      	b.n	800784e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007824:	f7fc f8e2 	bl	80039ec <HAL_GetTick>
 8007828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800782a:	e008      	b.n	800783e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800782c:	f7fc f8de 	bl	80039ec <HAL_GetTick>
 8007830:	4602      	mov	r2, r0
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	1ad3      	subs	r3, r2, r3
 8007836:	2b64      	cmp	r3, #100	@ 0x64
 8007838:	d901      	bls.n	800783e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800783a:	2303      	movs	r3, #3
 800783c:	e1f3      	b.n	8007c26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800783e:	4b51      	ldr	r3, [pc, #324]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1f0      	bne.n	800782c <HAL_RCC_OscConfig+0xe8>
 800784a:	e000      	b.n	800784e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800784c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f003 0302 	and.w	r3, r3, #2
 8007856:	2b00      	cmp	r3, #0
 8007858:	d063      	beq.n	8007922 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800785a:	4b4a      	ldr	r3, [pc, #296]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	f003 030c 	and.w	r3, r3, #12
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00b      	beq.n	800787e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007866:	4b47      	ldr	r3, [pc, #284]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800786e:	2b08      	cmp	r3, #8
 8007870:	d11c      	bne.n	80078ac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007872:	4b44      	ldr	r3, [pc, #272]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800787a:	2b00      	cmp	r3, #0
 800787c:	d116      	bne.n	80078ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800787e:	4b41      	ldr	r3, [pc, #260]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 0302 	and.w	r3, r3, #2
 8007886:	2b00      	cmp	r3, #0
 8007888:	d005      	beq.n	8007896 <HAL_RCC_OscConfig+0x152>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	2b01      	cmp	r3, #1
 8007890:	d001      	beq.n	8007896 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e1c7      	b.n	8007c26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007896:	4b3b      	ldr	r3, [pc, #236]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	691b      	ldr	r3, [r3, #16]
 80078a2:	00db      	lsls	r3, r3, #3
 80078a4:	4937      	ldr	r1, [pc, #220]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 80078a6:	4313      	orrs	r3, r2
 80078a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078aa:	e03a      	b.n	8007922 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d020      	beq.n	80078f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078b4:	4b34      	ldr	r3, [pc, #208]	@ (8007988 <HAL_RCC_OscConfig+0x244>)
 80078b6:	2201      	movs	r2, #1
 80078b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078ba:	f7fc f897 	bl	80039ec <HAL_GetTick>
 80078be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078c0:	e008      	b.n	80078d4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078c2:	f7fc f893 	bl	80039ec <HAL_GetTick>
 80078c6:	4602      	mov	r2, r0
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d901      	bls.n	80078d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80078d0:	2303      	movs	r3, #3
 80078d2:	e1a8      	b.n	8007c26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078d4:	4b2b      	ldr	r3, [pc, #172]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 0302 	and.w	r3, r3, #2
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d0f0      	beq.n	80078c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078e0:	4b28      	ldr	r3, [pc, #160]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	00db      	lsls	r3, r3, #3
 80078ee:	4925      	ldr	r1, [pc, #148]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 80078f0:	4313      	orrs	r3, r2
 80078f2:	600b      	str	r3, [r1, #0]
 80078f4:	e015      	b.n	8007922 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078f6:	4b24      	ldr	r3, [pc, #144]	@ (8007988 <HAL_RCC_OscConfig+0x244>)
 80078f8:	2200      	movs	r2, #0
 80078fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078fc:	f7fc f876 	bl	80039ec <HAL_GetTick>
 8007900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007902:	e008      	b.n	8007916 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007904:	f7fc f872 	bl	80039ec <HAL_GetTick>
 8007908:	4602      	mov	r2, r0
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	2b02      	cmp	r3, #2
 8007910:	d901      	bls.n	8007916 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e187      	b.n	8007c26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007916:	4b1b      	ldr	r3, [pc, #108]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0302 	and.w	r3, r3, #2
 800791e:	2b00      	cmp	r3, #0
 8007920:	d1f0      	bne.n	8007904 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 0308 	and.w	r3, r3, #8
 800792a:	2b00      	cmp	r3, #0
 800792c:	d036      	beq.n	800799c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d016      	beq.n	8007964 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007936:	4b15      	ldr	r3, [pc, #84]	@ (800798c <HAL_RCC_OscConfig+0x248>)
 8007938:	2201      	movs	r2, #1
 800793a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800793c:	f7fc f856 	bl	80039ec <HAL_GetTick>
 8007940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007942:	e008      	b.n	8007956 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007944:	f7fc f852 	bl	80039ec <HAL_GetTick>
 8007948:	4602      	mov	r2, r0
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	2b02      	cmp	r3, #2
 8007950:	d901      	bls.n	8007956 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e167      	b.n	8007c26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007956:	4b0b      	ldr	r3, [pc, #44]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 8007958:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800795a:	f003 0302 	and.w	r3, r3, #2
 800795e:	2b00      	cmp	r3, #0
 8007960:	d0f0      	beq.n	8007944 <HAL_RCC_OscConfig+0x200>
 8007962:	e01b      	b.n	800799c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007964:	4b09      	ldr	r3, [pc, #36]	@ (800798c <HAL_RCC_OscConfig+0x248>)
 8007966:	2200      	movs	r2, #0
 8007968:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800796a:	f7fc f83f 	bl	80039ec <HAL_GetTick>
 800796e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007970:	e00e      	b.n	8007990 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007972:	f7fc f83b 	bl	80039ec <HAL_GetTick>
 8007976:	4602      	mov	r2, r0
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	2b02      	cmp	r3, #2
 800797e:	d907      	bls.n	8007990 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007980:	2303      	movs	r3, #3
 8007982:	e150      	b.n	8007c26 <HAL_RCC_OscConfig+0x4e2>
 8007984:	40023800 	.word	0x40023800
 8007988:	42470000 	.word	0x42470000
 800798c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007990:	4b88      	ldr	r3, [pc, #544]	@ (8007bb4 <HAL_RCC_OscConfig+0x470>)
 8007992:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007994:	f003 0302 	and.w	r3, r3, #2
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1ea      	bne.n	8007972 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f003 0304 	and.w	r3, r3, #4
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f000 8097 	beq.w	8007ad8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079aa:	2300      	movs	r3, #0
 80079ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079ae:	4b81      	ldr	r3, [pc, #516]	@ (8007bb4 <HAL_RCC_OscConfig+0x470>)
 80079b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10f      	bne.n	80079da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079ba:	2300      	movs	r3, #0
 80079bc:	60bb      	str	r3, [r7, #8]
 80079be:	4b7d      	ldr	r3, [pc, #500]	@ (8007bb4 <HAL_RCC_OscConfig+0x470>)
 80079c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079c2:	4a7c      	ldr	r2, [pc, #496]	@ (8007bb4 <HAL_RCC_OscConfig+0x470>)
 80079c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80079ca:	4b7a      	ldr	r3, [pc, #488]	@ (8007bb4 <HAL_RCC_OscConfig+0x470>)
 80079cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079d2:	60bb      	str	r3, [r7, #8]
 80079d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079d6:	2301      	movs	r3, #1
 80079d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079da:	4b77      	ldr	r3, [pc, #476]	@ (8007bb8 <HAL_RCC_OscConfig+0x474>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d118      	bne.n	8007a18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80079e6:	4b74      	ldr	r3, [pc, #464]	@ (8007bb8 <HAL_RCC_OscConfig+0x474>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a73      	ldr	r2, [pc, #460]	@ (8007bb8 <HAL_RCC_OscConfig+0x474>)
 80079ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079f2:	f7fb fffb 	bl	80039ec <HAL_GetTick>
 80079f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079f8:	e008      	b.n	8007a0c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079fa:	f7fb fff7 	bl	80039ec <HAL_GetTick>
 80079fe:	4602      	mov	r2, r0
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d901      	bls.n	8007a0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	e10c      	b.n	8007c26 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a0c:	4b6a      	ldr	r3, [pc, #424]	@ (8007bb8 <HAL_RCC_OscConfig+0x474>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d0f0      	beq.n	80079fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d106      	bne.n	8007a2e <HAL_RCC_OscConfig+0x2ea>
 8007a20:	4b64      	ldr	r3, [pc, #400]	@ (8007bb4 <HAL_RCC_OscConfig+0x470>)
 8007a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a24:	4a63      	ldr	r2, [pc, #396]	@ (8007bb4 <HAL_RCC_OscConfig+0x470>)
 8007a26:	f043 0301 	orr.w	r3, r3, #1
 8007a2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a2c:	e01c      	b.n	8007a68 <HAL_RCC_OscConfig+0x324>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	2b05      	cmp	r3, #5
 8007a34:	d10c      	bne.n	8007a50 <HAL_RCC_OscConfig+0x30c>
 8007a36:	4b5f      	ldr	r3, [pc, #380]	@ (8007bb4 <HAL_RCC_OscConfig+0x470>)
 8007a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a3a:	4a5e      	ldr	r2, [pc, #376]	@ (8007bb4 <HAL_RCC_OscConfig+0x470>)
 8007a3c:	f043 0304 	orr.w	r3, r3, #4
 8007a40:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a42:	4b5c      	ldr	r3, [pc, #368]	@ (8007bb4 <HAL_RCC_OscConfig+0x470>)
 8007a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a46:	4a5b      	ldr	r2, [pc, #364]	@ (8007bb4 <HAL_RCC_OscConfig+0x470>)
 8007a48:	f043 0301 	orr.w	r3, r3, #1
 8007a4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a4e:	e00b      	b.n	8007a68 <HAL_RCC_OscConfig+0x324>
 8007a50:	4b58      	ldr	r3, [pc, #352]	@ (8007bb4 <HAL_RCC_OscConfig+0x470>)
 8007a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a54:	4a57      	ldr	r2, [pc, #348]	@ (8007bb4 <HAL_RCC_OscConfig+0x470>)
 8007a56:	f023 0301 	bic.w	r3, r3, #1
 8007a5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a5c:	4b55      	ldr	r3, [pc, #340]	@ (8007bb4 <HAL_RCC_OscConfig+0x470>)
 8007a5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a60:	4a54      	ldr	r2, [pc, #336]	@ (8007bb4 <HAL_RCC_OscConfig+0x470>)
 8007a62:	f023 0304 	bic.w	r3, r3, #4
 8007a66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d015      	beq.n	8007a9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a70:	f7fb ffbc 	bl	80039ec <HAL_GetTick>
 8007a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a76:	e00a      	b.n	8007a8e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a78:	f7fb ffb8 	bl	80039ec <HAL_GetTick>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	1ad3      	subs	r3, r2, r3
 8007a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d901      	bls.n	8007a8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e0cb      	b.n	8007c26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a8e:	4b49      	ldr	r3, [pc, #292]	@ (8007bb4 <HAL_RCC_OscConfig+0x470>)
 8007a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a92:	f003 0302 	and.w	r3, r3, #2
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d0ee      	beq.n	8007a78 <HAL_RCC_OscConfig+0x334>
 8007a9a:	e014      	b.n	8007ac6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a9c:	f7fb ffa6 	bl	80039ec <HAL_GetTick>
 8007aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007aa2:	e00a      	b.n	8007aba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007aa4:	f7fb ffa2 	bl	80039ec <HAL_GetTick>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d901      	bls.n	8007aba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e0b5      	b.n	8007c26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007aba:	4b3e      	ldr	r3, [pc, #248]	@ (8007bb4 <HAL_RCC_OscConfig+0x470>)
 8007abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007abe:	f003 0302 	and.w	r3, r3, #2
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1ee      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007ac6:	7dfb      	ldrb	r3, [r7, #23]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d105      	bne.n	8007ad8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007acc:	4b39      	ldr	r3, [pc, #228]	@ (8007bb4 <HAL_RCC_OscConfig+0x470>)
 8007ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ad0:	4a38      	ldr	r2, [pc, #224]	@ (8007bb4 <HAL_RCC_OscConfig+0x470>)
 8007ad2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ad6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f000 80a1 	beq.w	8007c24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007ae2:	4b34      	ldr	r3, [pc, #208]	@ (8007bb4 <HAL_RCC_OscConfig+0x470>)
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	f003 030c 	and.w	r3, r3, #12
 8007aea:	2b08      	cmp	r3, #8
 8007aec:	d05c      	beq.n	8007ba8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	699b      	ldr	r3, [r3, #24]
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d141      	bne.n	8007b7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007af6:	4b31      	ldr	r3, [pc, #196]	@ (8007bbc <HAL_RCC_OscConfig+0x478>)
 8007af8:	2200      	movs	r2, #0
 8007afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007afc:	f7fb ff76 	bl	80039ec <HAL_GetTick>
 8007b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b02:	e008      	b.n	8007b16 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b04:	f7fb ff72 	bl	80039ec <HAL_GetTick>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	1ad3      	subs	r3, r2, r3
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d901      	bls.n	8007b16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007b12:	2303      	movs	r3, #3
 8007b14:	e087      	b.n	8007c26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b16:	4b27      	ldr	r3, [pc, #156]	@ (8007bb4 <HAL_RCC_OscConfig+0x470>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d1f0      	bne.n	8007b04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	69da      	ldr	r2, [r3, #28]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a1b      	ldr	r3, [r3, #32]
 8007b2a:	431a      	orrs	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b30:	019b      	lsls	r3, r3, #6
 8007b32:	431a      	orrs	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b38:	085b      	lsrs	r3, r3, #1
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	041b      	lsls	r3, r3, #16
 8007b3e:	431a      	orrs	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b44:	061b      	lsls	r3, r3, #24
 8007b46:	491b      	ldr	r1, [pc, #108]	@ (8007bb4 <HAL_RCC_OscConfig+0x470>)
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8007bbc <HAL_RCC_OscConfig+0x478>)
 8007b4e:	2201      	movs	r2, #1
 8007b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b52:	f7fb ff4b 	bl	80039ec <HAL_GetTick>
 8007b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b58:	e008      	b.n	8007b6c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b5a:	f7fb ff47 	bl	80039ec <HAL_GetTick>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d901      	bls.n	8007b6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	e05c      	b.n	8007c26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b6c:	4b11      	ldr	r3, [pc, #68]	@ (8007bb4 <HAL_RCC_OscConfig+0x470>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d0f0      	beq.n	8007b5a <HAL_RCC_OscConfig+0x416>
 8007b78:	e054      	b.n	8007c24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b7a:	4b10      	ldr	r3, [pc, #64]	@ (8007bbc <HAL_RCC_OscConfig+0x478>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b80:	f7fb ff34 	bl	80039ec <HAL_GetTick>
 8007b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b86:	e008      	b.n	8007b9a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b88:	f7fb ff30 	bl	80039ec <HAL_GetTick>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d901      	bls.n	8007b9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e045      	b.n	8007c26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b9a:	4b06      	ldr	r3, [pc, #24]	@ (8007bb4 <HAL_RCC_OscConfig+0x470>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d1f0      	bne.n	8007b88 <HAL_RCC_OscConfig+0x444>
 8007ba6:	e03d      	b.n	8007c24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d107      	bne.n	8007bc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e038      	b.n	8007c26 <HAL_RCC_OscConfig+0x4e2>
 8007bb4:	40023800 	.word	0x40023800
 8007bb8:	40007000 	.word	0x40007000
 8007bbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8007c30 <HAL_RCC_OscConfig+0x4ec>)
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	699b      	ldr	r3, [r3, #24]
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d028      	beq.n	8007c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d121      	bne.n	8007c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d11a      	bne.n	8007c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007bea:	68fa      	ldr	r2, [r7, #12]
 8007bec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007bf6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d111      	bne.n	8007c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c06:	085b      	lsrs	r3, r3, #1
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d107      	bne.n	8007c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d001      	beq.n	8007c24 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	e000      	b.n	8007c26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3718      	adds	r7, #24
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	40023800 	.word	0x40023800

08007c34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d101      	bne.n	8007c48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	e0cc      	b.n	8007de2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007c48:	4b68      	ldr	r3, [pc, #416]	@ (8007dec <HAL_RCC_ClockConfig+0x1b8>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 030f 	and.w	r3, r3, #15
 8007c50:	683a      	ldr	r2, [r7, #0]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d90c      	bls.n	8007c70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c56:	4b65      	ldr	r3, [pc, #404]	@ (8007dec <HAL_RCC_ClockConfig+0x1b8>)
 8007c58:	683a      	ldr	r2, [r7, #0]
 8007c5a:	b2d2      	uxtb	r2, r2
 8007c5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c5e:	4b63      	ldr	r3, [pc, #396]	@ (8007dec <HAL_RCC_ClockConfig+0x1b8>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 030f 	and.w	r3, r3, #15
 8007c66:	683a      	ldr	r2, [r7, #0]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d001      	beq.n	8007c70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e0b8      	b.n	8007de2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 0302 	and.w	r3, r3, #2
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d020      	beq.n	8007cbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 0304 	and.w	r3, r3, #4
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d005      	beq.n	8007c94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c88:	4b59      	ldr	r3, [pc, #356]	@ (8007df0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	4a58      	ldr	r2, [pc, #352]	@ (8007df0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007c92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 0308 	and.w	r3, r3, #8
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d005      	beq.n	8007cac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ca0:	4b53      	ldr	r3, [pc, #332]	@ (8007df0 <HAL_RCC_ClockConfig+0x1bc>)
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	4a52      	ldr	r2, [pc, #328]	@ (8007df0 <HAL_RCC_ClockConfig+0x1bc>)
 8007ca6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007caa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007cac:	4b50      	ldr	r3, [pc, #320]	@ (8007df0 <HAL_RCC_ClockConfig+0x1bc>)
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	494d      	ldr	r1, [pc, #308]	@ (8007df0 <HAL_RCC_ClockConfig+0x1bc>)
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 0301 	and.w	r3, r3, #1
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d044      	beq.n	8007d54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d107      	bne.n	8007ce2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cd2:	4b47      	ldr	r3, [pc, #284]	@ (8007df0 <HAL_RCC_ClockConfig+0x1bc>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d119      	bne.n	8007d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e07f      	b.n	8007de2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d003      	beq.n	8007cf2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007cee:	2b03      	cmp	r3, #3
 8007cf0:	d107      	bne.n	8007d02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cf2:	4b3f      	ldr	r3, [pc, #252]	@ (8007df0 <HAL_RCC_ClockConfig+0x1bc>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d109      	bne.n	8007d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e06f      	b.n	8007de2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d02:	4b3b      	ldr	r3, [pc, #236]	@ (8007df0 <HAL_RCC_ClockConfig+0x1bc>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f003 0302 	and.w	r3, r3, #2
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d101      	bne.n	8007d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e067      	b.n	8007de2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d12:	4b37      	ldr	r3, [pc, #220]	@ (8007df0 <HAL_RCC_ClockConfig+0x1bc>)
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	f023 0203 	bic.w	r2, r3, #3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	4934      	ldr	r1, [pc, #208]	@ (8007df0 <HAL_RCC_ClockConfig+0x1bc>)
 8007d20:	4313      	orrs	r3, r2
 8007d22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d24:	f7fb fe62 	bl	80039ec <HAL_GetTick>
 8007d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d2a:	e00a      	b.n	8007d42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d2c:	f7fb fe5e 	bl	80039ec <HAL_GetTick>
 8007d30:	4602      	mov	r2, r0
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	1ad3      	subs	r3, r2, r3
 8007d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d901      	bls.n	8007d42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007d3e:	2303      	movs	r3, #3
 8007d40:	e04f      	b.n	8007de2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d42:	4b2b      	ldr	r3, [pc, #172]	@ (8007df0 <HAL_RCC_ClockConfig+0x1bc>)
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	f003 020c 	and.w	r2, r3, #12
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d1eb      	bne.n	8007d2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007d54:	4b25      	ldr	r3, [pc, #148]	@ (8007dec <HAL_RCC_ClockConfig+0x1b8>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 030f 	and.w	r3, r3, #15
 8007d5c:	683a      	ldr	r2, [r7, #0]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d20c      	bcs.n	8007d7c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d62:	4b22      	ldr	r3, [pc, #136]	@ (8007dec <HAL_RCC_ClockConfig+0x1b8>)
 8007d64:	683a      	ldr	r2, [r7, #0]
 8007d66:	b2d2      	uxtb	r2, r2
 8007d68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d6a:	4b20      	ldr	r3, [pc, #128]	@ (8007dec <HAL_RCC_ClockConfig+0x1b8>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 030f 	and.w	r3, r3, #15
 8007d72:	683a      	ldr	r2, [r7, #0]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d001      	beq.n	8007d7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e032      	b.n	8007de2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f003 0304 	and.w	r3, r3, #4
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d008      	beq.n	8007d9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d88:	4b19      	ldr	r3, [pc, #100]	@ (8007df0 <HAL_RCC_ClockConfig+0x1bc>)
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	4916      	ldr	r1, [pc, #88]	@ (8007df0 <HAL_RCC_ClockConfig+0x1bc>)
 8007d96:	4313      	orrs	r3, r2
 8007d98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f003 0308 	and.w	r3, r3, #8
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d009      	beq.n	8007dba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007da6:	4b12      	ldr	r3, [pc, #72]	@ (8007df0 <HAL_RCC_ClockConfig+0x1bc>)
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	00db      	lsls	r3, r3, #3
 8007db4:	490e      	ldr	r1, [pc, #56]	@ (8007df0 <HAL_RCC_ClockConfig+0x1bc>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007dba:	f000 f821 	bl	8007e00 <HAL_RCC_GetSysClockFreq>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8007df0 <HAL_RCC_ClockConfig+0x1bc>)
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	091b      	lsrs	r3, r3, #4
 8007dc6:	f003 030f 	and.w	r3, r3, #15
 8007dca:	490a      	ldr	r1, [pc, #40]	@ (8007df4 <HAL_RCC_ClockConfig+0x1c0>)
 8007dcc:	5ccb      	ldrb	r3, [r1, r3]
 8007dce:	fa22 f303 	lsr.w	r3, r2, r3
 8007dd2:	4a09      	ldr	r2, [pc, #36]	@ (8007df8 <HAL_RCC_ClockConfig+0x1c4>)
 8007dd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007dd6:	4b09      	ldr	r3, [pc, #36]	@ (8007dfc <HAL_RCC_ClockConfig+0x1c8>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7fb fae0 	bl	80033a0 <HAL_InitTick>

  return HAL_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	40023c00 	.word	0x40023c00
 8007df0:	40023800 	.word	0x40023800
 8007df4:	0801348c 	.word	0x0801348c
 8007df8:	20000008 	.word	0x20000008
 8007dfc:	2000000c 	.word	0x2000000c

08007e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e04:	b094      	sub	sp, #80	@ 0x50
 8007e06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007e10:	2300      	movs	r3, #0
 8007e12:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007e14:	2300      	movs	r3, #0
 8007e16:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e18:	4b79      	ldr	r3, [pc, #484]	@ (8008000 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	f003 030c 	and.w	r3, r3, #12
 8007e20:	2b08      	cmp	r3, #8
 8007e22:	d00d      	beq.n	8007e40 <HAL_RCC_GetSysClockFreq+0x40>
 8007e24:	2b08      	cmp	r3, #8
 8007e26:	f200 80e1 	bhi.w	8007fec <HAL_RCC_GetSysClockFreq+0x1ec>
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d002      	beq.n	8007e34 <HAL_RCC_GetSysClockFreq+0x34>
 8007e2e:	2b04      	cmp	r3, #4
 8007e30:	d003      	beq.n	8007e3a <HAL_RCC_GetSysClockFreq+0x3a>
 8007e32:	e0db      	b.n	8007fec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e34:	4b73      	ldr	r3, [pc, #460]	@ (8008004 <HAL_RCC_GetSysClockFreq+0x204>)
 8007e36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007e38:	e0db      	b.n	8007ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e3a:	4b73      	ldr	r3, [pc, #460]	@ (8008008 <HAL_RCC_GetSysClockFreq+0x208>)
 8007e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007e3e:	e0d8      	b.n	8007ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e40:	4b6f      	ldr	r3, [pc, #444]	@ (8008000 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e48:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007e4a:	4b6d      	ldr	r3, [pc, #436]	@ (8008000 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d063      	beq.n	8007f1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e56:	4b6a      	ldr	r3, [pc, #424]	@ (8008000 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	099b      	lsrs	r3, r3, #6
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007e60:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e68:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007e72:	4622      	mov	r2, r4
 8007e74:	462b      	mov	r3, r5
 8007e76:	f04f 0000 	mov.w	r0, #0
 8007e7a:	f04f 0100 	mov.w	r1, #0
 8007e7e:	0159      	lsls	r1, r3, #5
 8007e80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e84:	0150      	lsls	r0, r2, #5
 8007e86:	4602      	mov	r2, r0
 8007e88:	460b      	mov	r3, r1
 8007e8a:	4621      	mov	r1, r4
 8007e8c:	1a51      	subs	r1, r2, r1
 8007e8e:	6139      	str	r1, [r7, #16]
 8007e90:	4629      	mov	r1, r5
 8007e92:	eb63 0301 	sbc.w	r3, r3, r1
 8007e96:	617b      	str	r3, [r7, #20]
 8007e98:	f04f 0200 	mov.w	r2, #0
 8007e9c:	f04f 0300 	mov.w	r3, #0
 8007ea0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ea4:	4659      	mov	r1, fp
 8007ea6:	018b      	lsls	r3, r1, #6
 8007ea8:	4651      	mov	r1, sl
 8007eaa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007eae:	4651      	mov	r1, sl
 8007eb0:	018a      	lsls	r2, r1, #6
 8007eb2:	4651      	mov	r1, sl
 8007eb4:	ebb2 0801 	subs.w	r8, r2, r1
 8007eb8:	4659      	mov	r1, fp
 8007eba:	eb63 0901 	sbc.w	r9, r3, r1
 8007ebe:	f04f 0200 	mov.w	r2, #0
 8007ec2:	f04f 0300 	mov.w	r3, #0
 8007ec6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007eca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007ece:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007ed2:	4690      	mov	r8, r2
 8007ed4:	4699      	mov	r9, r3
 8007ed6:	4623      	mov	r3, r4
 8007ed8:	eb18 0303 	adds.w	r3, r8, r3
 8007edc:	60bb      	str	r3, [r7, #8]
 8007ede:	462b      	mov	r3, r5
 8007ee0:	eb49 0303 	adc.w	r3, r9, r3
 8007ee4:	60fb      	str	r3, [r7, #12]
 8007ee6:	f04f 0200 	mov.w	r2, #0
 8007eea:	f04f 0300 	mov.w	r3, #0
 8007eee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007ef2:	4629      	mov	r1, r5
 8007ef4:	024b      	lsls	r3, r1, #9
 8007ef6:	4621      	mov	r1, r4
 8007ef8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007efc:	4621      	mov	r1, r4
 8007efe:	024a      	lsls	r2, r1, #9
 8007f00:	4610      	mov	r0, r2
 8007f02:	4619      	mov	r1, r3
 8007f04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f06:	2200      	movs	r2, #0
 8007f08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007f10:	f7f8 feaa 	bl	8000c68 <__aeabi_uldivmod>
 8007f14:	4602      	mov	r2, r0
 8007f16:	460b      	mov	r3, r1
 8007f18:	4613      	mov	r3, r2
 8007f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f1c:	e058      	b.n	8007fd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f1e:	4b38      	ldr	r3, [pc, #224]	@ (8008000 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	099b      	lsrs	r3, r3, #6
 8007f24:	2200      	movs	r2, #0
 8007f26:	4618      	mov	r0, r3
 8007f28:	4611      	mov	r1, r2
 8007f2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007f2e:	623b      	str	r3, [r7, #32]
 8007f30:	2300      	movs	r3, #0
 8007f32:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007f38:	4642      	mov	r2, r8
 8007f3a:	464b      	mov	r3, r9
 8007f3c:	f04f 0000 	mov.w	r0, #0
 8007f40:	f04f 0100 	mov.w	r1, #0
 8007f44:	0159      	lsls	r1, r3, #5
 8007f46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f4a:	0150      	lsls	r0, r2, #5
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	460b      	mov	r3, r1
 8007f50:	4641      	mov	r1, r8
 8007f52:	ebb2 0a01 	subs.w	sl, r2, r1
 8007f56:	4649      	mov	r1, r9
 8007f58:	eb63 0b01 	sbc.w	fp, r3, r1
 8007f5c:	f04f 0200 	mov.w	r2, #0
 8007f60:	f04f 0300 	mov.w	r3, #0
 8007f64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007f68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007f6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007f70:	ebb2 040a 	subs.w	r4, r2, sl
 8007f74:	eb63 050b 	sbc.w	r5, r3, fp
 8007f78:	f04f 0200 	mov.w	r2, #0
 8007f7c:	f04f 0300 	mov.w	r3, #0
 8007f80:	00eb      	lsls	r3, r5, #3
 8007f82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f86:	00e2      	lsls	r2, r4, #3
 8007f88:	4614      	mov	r4, r2
 8007f8a:	461d      	mov	r5, r3
 8007f8c:	4643      	mov	r3, r8
 8007f8e:	18e3      	adds	r3, r4, r3
 8007f90:	603b      	str	r3, [r7, #0]
 8007f92:	464b      	mov	r3, r9
 8007f94:	eb45 0303 	adc.w	r3, r5, r3
 8007f98:	607b      	str	r3, [r7, #4]
 8007f9a:	f04f 0200 	mov.w	r2, #0
 8007f9e:	f04f 0300 	mov.w	r3, #0
 8007fa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007fa6:	4629      	mov	r1, r5
 8007fa8:	028b      	lsls	r3, r1, #10
 8007faa:	4621      	mov	r1, r4
 8007fac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007fb0:	4621      	mov	r1, r4
 8007fb2:	028a      	lsls	r2, r1, #10
 8007fb4:	4610      	mov	r0, r2
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fba:	2200      	movs	r2, #0
 8007fbc:	61bb      	str	r3, [r7, #24]
 8007fbe:	61fa      	str	r2, [r7, #28]
 8007fc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007fc4:	f7f8 fe50 	bl	8000c68 <__aeabi_uldivmod>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	4613      	mov	r3, r2
 8007fce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8008000 <HAL_RCC_GetSysClockFreq+0x200>)
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	0c1b      	lsrs	r3, r3, #16
 8007fd6:	f003 0303 	and.w	r3, r3, #3
 8007fda:	3301      	adds	r3, #1
 8007fdc:	005b      	lsls	r3, r3, #1
 8007fde:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007fe0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007fe2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fe8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007fea:	e002      	b.n	8007ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007fec:	4b05      	ldr	r3, [pc, #20]	@ (8008004 <HAL_RCC_GetSysClockFreq+0x204>)
 8007fee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007ff0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007ff2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3750      	adds	r7, #80	@ 0x50
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ffe:	bf00      	nop
 8008000:	40023800 	.word	0x40023800
 8008004:	00f42400 	.word	0x00f42400
 8008008:	007a1200 	.word	0x007a1200

0800800c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800800c:	b480      	push	{r7}
 800800e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008010:	4b03      	ldr	r3, [pc, #12]	@ (8008020 <HAL_RCC_GetHCLKFreq+0x14>)
 8008012:	681b      	ldr	r3, [r3, #0]
}
 8008014:	4618      	mov	r0, r3
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	20000008 	.word	0x20000008

08008024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008028:	f7ff fff0 	bl	800800c <HAL_RCC_GetHCLKFreq>
 800802c:	4602      	mov	r2, r0
 800802e:	4b05      	ldr	r3, [pc, #20]	@ (8008044 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	0a9b      	lsrs	r3, r3, #10
 8008034:	f003 0307 	and.w	r3, r3, #7
 8008038:	4903      	ldr	r1, [pc, #12]	@ (8008048 <HAL_RCC_GetPCLK1Freq+0x24>)
 800803a:	5ccb      	ldrb	r3, [r1, r3]
 800803c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008040:	4618      	mov	r0, r3
 8008042:	bd80      	pop	{r7, pc}
 8008044:	40023800 	.word	0x40023800
 8008048:	0801349c 	.word	0x0801349c

0800804c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008050:	f7ff ffdc 	bl	800800c <HAL_RCC_GetHCLKFreq>
 8008054:	4602      	mov	r2, r0
 8008056:	4b05      	ldr	r3, [pc, #20]	@ (800806c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	0b5b      	lsrs	r3, r3, #13
 800805c:	f003 0307 	and.w	r3, r3, #7
 8008060:	4903      	ldr	r1, [pc, #12]	@ (8008070 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008062:	5ccb      	ldrb	r3, [r1, r3]
 8008064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008068:	4618      	mov	r0, r3
 800806a:	bd80      	pop	{r7, pc}
 800806c:	40023800 	.word	0x40023800
 8008070:	0801349c 	.word	0x0801349c

08008074 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	220f      	movs	r2, #15
 8008082:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008084:	4b12      	ldr	r3, [pc, #72]	@ (80080d0 <HAL_RCC_GetClockConfig+0x5c>)
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	f003 0203 	and.w	r2, r3, #3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008090:	4b0f      	ldr	r3, [pc, #60]	@ (80080d0 <HAL_RCC_GetClockConfig+0x5c>)
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800809c:	4b0c      	ldr	r3, [pc, #48]	@ (80080d0 <HAL_RCC_GetClockConfig+0x5c>)
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80080a8:	4b09      	ldr	r3, [pc, #36]	@ (80080d0 <HAL_RCC_GetClockConfig+0x5c>)
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	08db      	lsrs	r3, r3, #3
 80080ae:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80080b6:	4b07      	ldr	r3, [pc, #28]	@ (80080d4 <HAL_RCC_GetClockConfig+0x60>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f003 020f 	and.w	r2, r3, #15
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	601a      	str	r2, [r3, #0]
}
 80080c2:	bf00      	nop
 80080c4:	370c      	adds	r7, #12
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop
 80080d0:	40023800 	.word	0x40023800
 80080d4:	40023c00 	.word	0x40023c00

080080d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b086      	sub	sp, #24
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80080e0:	2300      	movs	r3, #0
 80080e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80080e4:	2300      	movs	r3, #0
 80080e6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 0301 	and.w	r3, r3, #1
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10b      	bne.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d105      	bne.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008108:	2b00      	cmp	r3, #0
 800810a:	d075      	beq.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800810c:	4b91      	ldr	r3, [pc, #580]	@ (8008354 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800810e:	2200      	movs	r2, #0
 8008110:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008112:	f7fb fc6b 	bl	80039ec <HAL_GetTick>
 8008116:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008118:	e008      	b.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800811a:	f7fb fc67 	bl	80039ec <HAL_GetTick>
 800811e:	4602      	mov	r2, r0
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	1ad3      	subs	r3, r2, r3
 8008124:	2b02      	cmp	r3, #2
 8008126:	d901      	bls.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008128:	2303      	movs	r3, #3
 800812a:	e189      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800812c:	4b8a      	ldr	r3, [pc, #552]	@ (8008358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008134:	2b00      	cmp	r3, #0
 8008136:	d1f0      	bne.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f003 0301 	and.w	r3, r3, #1
 8008140:	2b00      	cmp	r3, #0
 8008142:	d009      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	019a      	lsls	r2, r3, #6
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	071b      	lsls	r3, r3, #28
 8008150:	4981      	ldr	r1, [pc, #516]	@ (8008358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008152:	4313      	orrs	r3, r2
 8008154:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 0302 	and.w	r3, r3, #2
 8008160:	2b00      	cmp	r3, #0
 8008162:	d01f      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008164:	4b7c      	ldr	r3, [pc, #496]	@ (8008358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008166:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800816a:	0f1b      	lsrs	r3, r3, #28
 800816c:	f003 0307 	and.w	r3, r3, #7
 8008170:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	019a      	lsls	r2, r3, #6
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	061b      	lsls	r3, r3, #24
 800817e:	431a      	orrs	r2, r3
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	071b      	lsls	r3, r3, #28
 8008184:	4974      	ldr	r1, [pc, #464]	@ (8008358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008186:	4313      	orrs	r3, r2
 8008188:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800818c:	4b72      	ldr	r3, [pc, #456]	@ (8008358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800818e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008192:	f023 021f 	bic.w	r2, r3, #31
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	69db      	ldr	r3, [r3, #28]
 800819a:	3b01      	subs	r3, #1
 800819c:	496e      	ldr	r1, [pc, #440]	@ (8008358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800819e:	4313      	orrs	r3, r2
 80081a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00d      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	019a      	lsls	r2, r3, #6
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	061b      	lsls	r3, r3, #24
 80081bc:	431a      	orrs	r2, r3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	071b      	lsls	r3, r3, #28
 80081c4:	4964      	ldr	r1, [pc, #400]	@ (8008358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80081c6:	4313      	orrs	r3, r2
 80081c8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80081cc:	4b61      	ldr	r3, [pc, #388]	@ (8008354 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80081ce:	2201      	movs	r2, #1
 80081d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80081d2:	f7fb fc0b 	bl	80039ec <HAL_GetTick>
 80081d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80081d8:	e008      	b.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80081da:	f7fb fc07 	bl	80039ec <HAL_GetTick>
 80081de:	4602      	mov	r2, r0
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	2b02      	cmp	r3, #2
 80081e6:	d901      	bls.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80081e8:	2303      	movs	r3, #3
 80081ea:	e129      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80081ec:	4b5a      	ldr	r3, [pc, #360]	@ (8008358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d0f0      	beq.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 0304 	and.w	r3, r3, #4
 8008200:	2b00      	cmp	r3, #0
 8008202:	d105      	bne.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800820c:	2b00      	cmp	r3, #0
 800820e:	d079      	beq.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008210:	4b52      	ldr	r3, [pc, #328]	@ (800835c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008212:	2200      	movs	r2, #0
 8008214:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008216:	f7fb fbe9 	bl	80039ec <HAL_GetTick>
 800821a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800821c:	e008      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800821e:	f7fb fbe5 	bl	80039ec <HAL_GetTick>
 8008222:	4602      	mov	r2, r0
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	2b02      	cmp	r3, #2
 800822a:	d901      	bls.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800822c:	2303      	movs	r3, #3
 800822e:	e107      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008230:	4b49      	ldr	r3, [pc, #292]	@ (8008358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008238:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800823c:	d0ef      	beq.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f003 0304 	and.w	r3, r3, #4
 8008246:	2b00      	cmp	r3, #0
 8008248:	d020      	beq.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800824a:	4b43      	ldr	r3, [pc, #268]	@ (8008358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800824c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008250:	0f1b      	lsrs	r3, r3, #28
 8008252:	f003 0307 	and.w	r3, r3, #7
 8008256:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	019a      	lsls	r2, r3, #6
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	695b      	ldr	r3, [r3, #20]
 8008262:	061b      	lsls	r3, r3, #24
 8008264:	431a      	orrs	r2, r3
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	071b      	lsls	r3, r3, #28
 800826a:	493b      	ldr	r1, [pc, #236]	@ (8008358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800826c:	4313      	orrs	r3, r2
 800826e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008272:	4b39      	ldr	r3, [pc, #228]	@ (8008358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008274:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008278:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a1b      	ldr	r3, [r3, #32]
 8008280:	3b01      	subs	r3, #1
 8008282:	021b      	lsls	r3, r3, #8
 8008284:	4934      	ldr	r1, [pc, #208]	@ (8008358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008286:	4313      	orrs	r3, r2
 8008288:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 0308 	and.w	r3, r3, #8
 8008294:	2b00      	cmp	r3, #0
 8008296:	d01e      	beq.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008298:	4b2f      	ldr	r3, [pc, #188]	@ (8008358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800829a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800829e:	0e1b      	lsrs	r3, r3, #24
 80082a0:	f003 030f 	and.w	r3, r3, #15
 80082a4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	019a      	lsls	r2, r3, #6
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	061b      	lsls	r3, r3, #24
 80082b0:	431a      	orrs	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	071b      	lsls	r3, r3, #28
 80082b8:	4927      	ldr	r1, [pc, #156]	@ (8008358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80082ba:	4313      	orrs	r3, r2
 80082bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80082c0:	4b25      	ldr	r3, [pc, #148]	@ (8008358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80082c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082c6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ce:	4922      	ldr	r1, [pc, #136]	@ (8008358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80082d0:	4313      	orrs	r3, r2
 80082d2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80082d6:	4b21      	ldr	r3, [pc, #132]	@ (800835c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80082d8:	2201      	movs	r2, #1
 80082da:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80082dc:	f7fb fb86 	bl	80039ec <HAL_GetTick>
 80082e0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80082e2:	e008      	b.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80082e4:	f7fb fb82 	bl	80039ec <HAL_GetTick>
 80082e8:	4602      	mov	r2, r0
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	1ad3      	subs	r3, r2, r3
 80082ee:	2b02      	cmp	r3, #2
 80082f0:	d901      	bls.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082f2:	2303      	movs	r3, #3
 80082f4:	e0a4      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80082f6:	4b18      	ldr	r3, [pc, #96]	@ (8008358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80082fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008302:	d1ef      	bne.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f003 0320 	and.w	r3, r3, #32
 800830c:	2b00      	cmp	r3, #0
 800830e:	f000 808b 	beq.w	8008428 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008312:	2300      	movs	r3, #0
 8008314:	60fb      	str	r3, [r7, #12]
 8008316:	4b10      	ldr	r3, [pc, #64]	@ (8008358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800831a:	4a0f      	ldr	r2, [pc, #60]	@ (8008358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800831c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008320:	6413      	str	r3, [r2, #64]	@ 0x40
 8008322:	4b0d      	ldr	r3, [pc, #52]	@ (8008358 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800832a:	60fb      	str	r3, [r7, #12]
 800832c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800832e:	4b0c      	ldr	r3, [pc, #48]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a0b      	ldr	r2, [pc, #44]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008334:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008338:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800833a:	f7fb fb57 	bl	80039ec <HAL_GetTick>
 800833e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008340:	e010      	b.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008342:	f7fb fb53 	bl	80039ec <HAL_GetTick>
 8008346:	4602      	mov	r2, r0
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	2b02      	cmp	r3, #2
 800834e:	d909      	bls.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8008350:	2303      	movs	r3, #3
 8008352:	e075      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8008354:	42470068 	.word	0x42470068
 8008358:	40023800 	.word	0x40023800
 800835c:	42470070 	.word	0x42470070
 8008360:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008364:	4b38      	ldr	r3, [pc, #224]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800836c:	2b00      	cmp	r3, #0
 800836e:	d0e8      	beq.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008370:	4b36      	ldr	r3, [pc, #216]	@ (800844c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008374:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008378:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d02f      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008384:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008388:	693a      	ldr	r2, [r7, #16]
 800838a:	429a      	cmp	r2, r3
 800838c:	d028      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800838e:	4b2f      	ldr	r3, [pc, #188]	@ (800844c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008392:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008396:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008398:	4b2d      	ldr	r3, [pc, #180]	@ (8008450 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800839a:	2201      	movs	r2, #1
 800839c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800839e:	4b2c      	ldr	r3, [pc, #176]	@ (8008450 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80083a0:	2200      	movs	r2, #0
 80083a2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80083a4:	4a29      	ldr	r2, [pc, #164]	@ (800844c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80083aa:	4b28      	ldr	r3, [pc, #160]	@ (800844c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80083ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083ae:	f003 0301 	and.w	r3, r3, #1
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d114      	bne.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80083b6:	f7fb fb19 	bl	80039ec <HAL_GetTick>
 80083ba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083bc:	e00a      	b.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083be:	f7fb fb15 	bl	80039ec <HAL_GetTick>
 80083c2:	4602      	mov	r2, r0
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	1ad3      	subs	r3, r2, r3
 80083c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d901      	bls.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80083d0:	2303      	movs	r3, #3
 80083d2:	e035      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083d4:	4b1d      	ldr	r3, [pc, #116]	@ (800844c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80083d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083d8:	f003 0302 	and.w	r3, r3, #2
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d0ee      	beq.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80083ec:	d10d      	bne.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x332>
 80083ee:	4b17      	ldr	r3, [pc, #92]	@ (800844c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083fa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80083fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008402:	4912      	ldr	r1, [pc, #72]	@ (800844c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008404:	4313      	orrs	r3, r2
 8008406:	608b      	str	r3, [r1, #8]
 8008408:	e005      	b.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800840a:	4b10      	ldr	r3, [pc, #64]	@ (800844c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	4a0f      	ldr	r2, [pc, #60]	@ (800844c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008410:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008414:	6093      	str	r3, [r2, #8]
 8008416:	4b0d      	ldr	r3, [pc, #52]	@ (800844c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008418:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800841e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008422:	490a      	ldr	r1, [pc, #40]	@ (800844c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008424:	4313      	orrs	r3, r2
 8008426:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f003 0310 	and.w	r3, r3, #16
 8008430:	2b00      	cmp	r3, #0
 8008432:	d004      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800843a:	4b06      	ldr	r3, [pc, #24]	@ (8008454 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800843c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	3718      	adds	r7, #24
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	40007000 	.word	0x40007000
 800844c:	40023800 	.word	0x40023800
 8008450:	42470e40 	.word	0x42470e40
 8008454:	424711e0 	.word	0x424711e0

08008458 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d101      	bne.n	800846c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	e025      	b.n	80084b8 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008472:	b2db      	uxtb	r3, r3
 8008474:	2b00      	cmp	r3, #0
 8008476:	d106      	bne.n	8008486 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f7f9 f90f 	bl	80016a4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2202      	movs	r2, #2
 800848a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	3304      	adds	r3, #4
 8008496:	4619      	mov	r1, r3
 8008498:	4610      	mov	r0, r2
 800849a:	f001 ffad 	bl	800a3f8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6818      	ldr	r0, [r3, #0]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	461a      	mov	r2, r3
 80084a8:	6839      	ldr	r1, [r7, #0]
 80084aa:	f002 f802 	bl	800a4b2 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2201      	movs	r2, #1
 80084b2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d101      	bne.n	80084d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e07b      	b.n	80085ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d108      	bne.n	80084ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80084e2:	d009      	beq.n	80084f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	61da      	str	r2, [r3, #28]
 80084ea:	e005      	b.n	80084f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008504:	b2db      	uxtb	r3, r3
 8008506:	2b00      	cmp	r3, #0
 8008508:	d106      	bne.n	8008518 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f7fa fe9e 	bl	8003254 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2202      	movs	r2, #2
 800851c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800852e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008540:	431a      	orrs	r2, r3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800854a:	431a      	orrs	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	f003 0302 	and.w	r3, r3, #2
 8008554:	431a      	orrs	r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	695b      	ldr	r3, [r3, #20]
 800855a:	f003 0301 	and.w	r3, r3, #1
 800855e:	431a      	orrs	r2, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	699b      	ldr	r3, [r3, #24]
 8008564:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008568:	431a      	orrs	r2, r3
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	69db      	ldr	r3, [r3, #28]
 800856e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008572:	431a      	orrs	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a1b      	ldr	r3, [r3, #32]
 8008578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800857c:	ea42 0103 	orr.w	r1, r2, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008584:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	430a      	orrs	r2, r1
 800858e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	699b      	ldr	r3, [r3, #24]
 8008594:	0c1b      	lsrs	r3, r3, #16
 8008596:	f003 0104 	and.w	r1, r3, #4
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800859e:	f003 0210 	and.w	r2, r3, #16
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	430a      	orrs	r2, r1
 80085a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	69da      	ldr	r2, [r3, #28]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80085b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3708      	adds	r7, #8
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b088      	sub	sp, #32
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	60f8      	str	r0, [r7, #12]
 80085da:	60b9      	str	r1, [r7, #8]
 80085dc:	603b      	str	r3, [r7, #0]
 80085de:	4613      	mov	r3, r2
 80085e0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80085e2:	f7fb fa03 	bl	80039ec <HAL_GetTick>
 80085e6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80085e8:	88fb      	ldrh	r3, [r7, #6]
 80085ea:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d001      	beq.n	80085fc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80085f8:	2302      	movs	r3, #2
 80085fa:	e12a      	b.n	8008852 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d002      	beq.n	8008608 <HAL_SPI_Transmit+0x36>
 8008602:	88fb      	ldrh	r3, [r7, #6]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d101      	bne.n	800860c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e122      	b.n	8008852 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008612:	2b01      	cmp	r3, #1
 8008614:	d101      	bne.n	800861a <HAL_SPI_Transmit+0x48>
 8008616:	2302      	movs	r3, #2
 8008618:	e11b      	b.n	8008852 <HAL_SPI_Transmit+0x280>
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2201      	movs	r2, #1
 800861e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2203      	movs	r2, #3
 8008626:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2200      	movs	r2, #0
 800862e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	68ba      	ldr	r2, [r7, #8]
 8008634:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	88fa      	ldrh	r2, [r7, #6]
 800863a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	88fa      	ldrh	r2, [r7, #6]
 8008640:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2200      	movs	r2, #0
 8008646:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2200      	movs	r2, #0
 8008652:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2200      	movs	r2, #0
 8008658:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2200      	movs	r2, #0
 800865e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008668:	d10f      	bne.n	800868a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008678:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008688:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008694:	2b40      	cmp	r3, #64	@ 0x40
 8008696:	d007      	beq.n	80086a8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80086a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086b0:	d152      	bne.n	8008758 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d002      	beq.n	80086c0 <HAL_SPI_Transmit+0xee>
 80086ba:	8b7b      	ldrh	r3, [r7, #26]
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d145      	bne.n	800874c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086c4:	881a      	ldrh	r2, [r3, #0]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086d0:	1c9a      	adds	r2, r3, #2
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086da:	b29b      	uxth	r3, r3
 80086dc:	3b01      	subs	r3, #1
 80086de:	b29a      	uxth	r2, r3
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80086e4:	e032      	b.n	800874c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	f003 0302 	and.w	r3, r3, #2
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d112      	bne.n	800871a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086f8:	881a      	ldrh	r2, [r3, #0]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008704:	1c9a      	adds	r2, r3, #2
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800870e:	b29b      	uxth	r3, r3
 8008710:	3b01      	subs	r3, #1
 8008712:	b29a      	uxth	r2, r3
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008718:	e018      	b.n	800874c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800871a:	f7fb f967 	bl	80039ec <HAL_GetTick>
 800871e:	4602      	mov	r2, r0
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	1ad3      	subs	r3, r2, r3
 8008724:	683a      	ldr	r2, [r7, #0]
 8008726:	429a      	cmp	r2, r3
 8008728:	d803      	bhi.n	8008732 <HAL_SPI_Transmit+0x160>
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008730:	d102      	bne.n	8008738 <HAL_SPI_Transmit+0x166>
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d109      	bne.n	800874c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2201      	movs	r2, #1
 800873c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2200      	movs	r2, #0
 8008744:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008748:	2303      	movs	r3, #3
 800874a:	e082      	b.n	8008852 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008750:	b29b      	uxth	r3, r3
 8008752:	2b00      	cmp	r3, #0
 8008754:	d1c7      	bne.n	80086e6 <HAL_SPI_Transmit+0x114>
 8008756:	e053      	b.n	8008800 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d002      	beq.n	8008766 <HAL_SPI_Transmit+0x194>
 8008760:	8b7b      	ldrh	r3, [r7, #26]
 8008762:	2b01      	cmp	r3, #1
 8008764:	d147      	bne.n	80087f6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	330c      	adds	r3, #12
 8008770:	7812      	ldrb	r2, [r2, #0]
 8008772:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008778:	1c5a      	adds	r2, r3, #1
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008782:	b29b      	uxth	r3, r3
 8008784:	3b01      	subs	r3, #1
 8008786:	b29a      	uxth	r2, r3
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800878c:	e033      	b.n	80087f6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	f003 0302 	and.w	r3, r3, #2
 8008798:	2b02      	cmp	r3, #2
 800879a:	d113      	bne.n	80087c4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	330c      	adds	r3, #12
 80087a6:	7812      	ldrb	r2, [r2, #0]
 80087a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087ae:	1c5a      	adds	r2, r3, #1
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	3b01      	subs	r3, #1
 80087bc:	b29a      	uxth	r2, r3
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80087c2:	e018      	b.n	80087f6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087c4:	f7fb f912 	bl	80039ec <HAL_GetTick>
 80087c8:	4602      	mov	r2, r0
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	1ad3      	subs	r3, r2, r3
 80087ce:	683a      	ldr	r2, [r7, #0]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d803      	bhi.n	80087dc <HAL_SPI_Transmit+0x20a>
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087da:	d102      	bne.n	80087e2 <HAL_SPI_Transmit+0x210>
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d109      	bne.n	80087f6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2201      	movs	r2, #1
 80087e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80087f2:	2303      	movs	r3, #3
 80087f4:	e02d      	b.n	8008852 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1c6      	bne.n	800878e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008800:	69fa      	ldr	r2, [r7, #28]
 8008802:	6839      	ldr	r1, [r7, #0]
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f000 fd21 	bl	800924c <SPI_EndRxTxTransaction>
 800880a:	4603      	mov	r3, r0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d002      	beq.n	8008816 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2220      	movs	r2, #32
 8008814:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d10a      	bne.n	8008834 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800881e:	2300      	movs	r3, #0
 8008820:	617b      	str	r3, [r7, #20]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	617b      	str	r3, [r7, #20]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	617b      	str	r3, [r7, #20]
 8008832:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2200      	movs	r2, #0
 8008840:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008848:	2b00      	cmp	r3, #0
 800884a:	d001      	beq.n	8008850 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	e000      	b.n	8008852 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8008850:	2300      	movs	r3, #0
  }
}
 8008852:	4618      	mov	r0, r3
 8008854:	3720      	adds	r7, #32
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b088      	sub	sp, #32
 800885e:	af02      	add	r7, sp, #8
 8008860:	60f8      	str	r0, [r7, #12]
 8008862:	60b9      	str	r1, [r7, #8]
 8008864:	603b      	str	r3, [r7, #0]
 8008866:	4613      	mov	r3, r2
 8008868:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008870:	b2db      	uxtb	r3, r3
 8008872:	2b01      	cmp	r3, #1
 8008874:	d001      	beq.n	800887a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8008876:	2302      	movs	r3, #2
 8008878:	e104      	b.n	8008a84 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008882:	d112      	bne.n	80088aa <HAL_SPI_Receive+0x50>
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d10e      	bne.n	80088aa <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2204      	movs	r2, #4
 8008890:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008894:	88fa      	ldrh	r2, [r7, #6]
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	9300      	str	r3, [sp, #0]
 800889a:	4613      	mov	r3, r2
 800889c:	68ba      	ldr	r2, [r7, #8]
 800889e:	68b9      	ldr	r1, [r7, #8]
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f000 f8f3 	bl	8008a8c <HAL_SPI_TransmitReceive>
 80088a6:	4603      	mov	r3, r0
 80088a8:	e0ec      	b.n	8008a84 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80088aa:	f7fb f89f 	bl	80039ec <HAL_GetTick>
 80088ae:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d002      	beq.n	80088bc <HAL_SPI_Receive+0x62>
 80088b6:	88fb      	ldrh	r3, [r7, #6]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d101      	bne.n	80088c0 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e0e1      	b.n	8008a84 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d101      	bne.n	80088ce <HAL_SPI_Receive+0x74>
 80088ca:	2302      	movs	r3, #2
 80088cc:	e0da      	b.n	8008a84 <HAL_SPI_Receive+0x22a>
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2201      	movs	r2, #1
 80088d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2204      	movs	r2, #4
 80088da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2200      	movs	r2, #0
 80088e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	68ba      	ldr	r2, [r7, #8]
 80088e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	88fa      	ldrh	r2, [r7, #6]
 80088ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	88fa      	ldrh	r2, [r7, #6]
 80088f4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2200      	movs	r2, #0
 80088fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2200      	movs	r2, #0
 8008900:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2200      	movs	r2, #0
 8008906:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2200      	movs	r2, #0
 8008912:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800891c:	d10f      	bne.n	800893e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800892c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800893c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008948:	2b40      	cmp	r3, #64	@ 0x40
 800894a:	d007      	beq.n	800895c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800895a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d170      	bne.n	8008a46 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008964:	e035      	b.n	80089d2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	f003 0301 	and.w	r3, r3, #1
 8008970:	2b01      	cmp	r3, #1
 8008972:	d115      	bne.n	80089a0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f103 020c 	add.w	r2, r3, #12
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008980:	7812      	ldrb	r2, [r2, #0]
 8008982:	b2d2      	uxtb	r2, r2
 8008984:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800898a:	1c5a      	adds	r2, r3, #1
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008994:	b29b      	uxth	r3, r3
 8008996:	3b01      	subs	r3, #1
 8008998:	b29a      	uxth	r2, r3
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800899e:	e018      	b.n	80089d2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089a0:	f7fb f824 	bl	80039ec <HAL_GetTick>
 80089a4:	4602      	mov	r2, r0
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	683a      	ldr	r2, [r7, #0]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d803      	bhi.n	80089b8 <HAL_SPI_Receive+0x15e>
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80089b6:	d102      	bne.n	80089be <HAL_SPI_Receive+0x164>
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d109      	bne.n	80089d2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2201      	movs	r2, #1
 80089c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80089ce:	2303      	movs	r3, #3
 80089d0:	e058      	b.n	8008a84 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d1c4      	bne.n	8008966 <HAL_SPI_Receive+0x10c>
 80089dc:	e038      	b.n	8008a50 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	f003 0301 	and.w	r3, r3, #1
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d113      	bne.n	8008a14 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	68da      	ldr	r2, [r3, #12]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089f6:	b292      	uxth	r2, r2
 80089f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089fe:	1c9a      	adds	r2, r3, #2
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	b29a      	uxth	r2, r3
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008a12:	e018      	b.n	8008a46 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a14:	f7fa ffea 	bl	80039ec <HAL_GetTick>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	1ad3      	subs	r3, r2, r3
 8008a1e:	683a      	ldr	r2, [r7, #0]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d803      	bhi.n	8008a2c <HAL_SPI_Receive+0x1d2>
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a2a:	d102      	bne.n	8008a32 <HAL_SPI_Receive+0x1d8>
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d109      	bne.n	8008a46 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2201      	movs	r2, #1
 8008a36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008a42:	2303      	movs	r3, #3
 8008a44:	e01e      	b.n	8008a84 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d1c6      	bne.n	80089de <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008a50:	697a      	ldr	r2, [r7, #20]
 8008a52:	6839      	ldr	r1, [r7, #0]
 8008a54:	68f8      	ldr	r0, [r7, #12]
 8008a56:	f000 fb93 	bl	8009180 <SPI_EndRxTransaction>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d002      	beq.n	8008a66 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2220      	movs	r2, #32
 8008a64:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d001      	beq.n	8008a82 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e000      	b.n	8008a84 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8008a82:	2300      	movs	r3, #0
  }
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3718      	adds	r7, #24
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b08a      	sub	sp, #40	@ 0x28
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	607a      	str	r2, [r7, #4]
 8008a98:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a9e:	f7fa ffa5 	bl	80039ec <HAL_GetTick>
 8008aa2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008aaa:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008ab2:	887b      	ldrh	r3, [r7, #2]
 8008ab4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008ab6:	7ffb      	ldrb	r3, [r7, #31]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d00c      	beq.n	8008ad6 <HAL_SPI_TransmitReceive+0x4a>
 8008abc:	69bb      	ldr	r3, [r7, #24]
 8008abe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008ac2:	d106      	bne.n	8008ad2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d102      	bne.n	8008ad2 <HAL_SPI_TransmitReceive+0x46>
 8008acc:	7ffb      	ldrb	r3, [r7, #31]
 8008ace:	2b04      	cmp	r3, #4
 8008ad0:	d001      	beq.n	8008ad6 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8008ad2:	2302      	movs	r3, #2
 8008ad4:	e17f      	b.n	8008dd6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d005      	beq.n	8008ae8 <HAL_SPI_TransmitReceive+0x5c>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d002      	beq.n	8008ae8 <HAL_SPI_TransmitReceive+0x5c>
 8008ae2:	887b      	ldrh	r3, [r7, #2]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d101      	bne.n	8008aec <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e174      	b.n	8008dd6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d101      	bne.n	8008afa <HAL_SPI_TransmitReceive+0x6e>
 8008af6:	2302      	movs	r3, #2
 8008af8:	e16d      	b.n	8008dd6 <HAL_SPI_TransmitReceive+0x34a>
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2201      	movs	r2, #1
 8008afe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	2b04      	cmp	r3, #4
 8008b0c:	d003      	beq.n	8008b16 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2205      	movs	r2, #5
 8008b12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	887a      	ldrh	r2, [r7, #2]
 8008b26:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	887a      	ldrh	r2, [r7, #2]
 8008b2c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	68ba      	ldr	r2, [r7, #8]
 8008b32:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	887a      	ldrh	r2, [r7, #2]
 8008b38:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	887a      	ldrh	r2, [r7, #2]
 8008b3e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2200      	movs	r2, #0
 8008b44:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b56:	2b40      	cmp	r3, #64	@ 0x40
 8008b58:	d007      	beq.n	8008b6a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b68:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b72:	d17e      	bne.n	8008c72 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d002      	beq.n	8008b82 <HAL_SPI_TransmitReceive+0xf6>
 8008b7c:	8afb      	ldrh	r3, [r7, #22]
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d16c      	bne.n	8008c5c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b86:	881a      	ldrh	r2, [r3, #0]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b92:	1c9a      	adds	r2, r3, #2
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	3b01      	subs	r3, #1
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ba6:	e059      	b.n	8008c5c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	f003 0302 	and.w	r3, r3, #2
 8008bb2:	2b02      	cmp	r3, #2
 8008bb4:	d11b      	bne.n	8008bee <HAL_SPI_TransmitReceive+0x162>
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d016      	beq.n	8008bee <HAL_SPI_TransmitReceive+0x162>
 8008bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d113      	bne.n	8008bee <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bca:	881a      	ldrh	r2, [r3, #0]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bd6:	1c9a      	adds	r2, r3, #2
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	3b01      	subs	r3, #1
 8008be4:	b29a      	uxth	r2, r3
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008bea:	2300      	movs	r3, #0
 8008bec:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	f003 0301 	and.w	r3, r3, #1
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d119      	bne.n	8008c30 <HAL_SPI_TransmitReceive+0x1a4>
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d014      	beq.n	8008c30 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	68da      	ldr	r2, [r3, #12]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c10:	b292      	uxth	r2, r2
 8008c12:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c18:	1c9a      	adds	r2, r3, #2
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	3b01      	subs	r3, #1
 8008c26:	b29a      	uxth	r2, r3
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008c30:	f7fa fedc 	bl	80039ec <HAL_GetTick>
 8008c34:	4602      	mov	r2, r0
 8008c36:	6a3b      	ldr	r3, [r7, #32]
 8008c38:	1ad3      	subs	r3, r2, r3
 8008c3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d80d      	bhi.n	8008c5c <HAL_SPI_TransmitReceive+0x1d0>
 8008c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c46:	d009      	beq.n	8008c5c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008c58:	2303      	movs	r3, #3
 8008c5a:	e0bc      	b.n	8008dd6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d1a0      	bne.n	8008ba8 <HAL_SPI_TransmitReceive+0x11c>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d19b      	bne.n	8008ba8 <HAL_SPI_TransmitReceive+0x11c>
 8008c70:	e082      	b.n	8008d78 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d002      	beq.n	8008c80 <HAL_SPI_TransmitReceive+0x1f4>
 8008c7a:	8afb      	ldrh	r3, [r7, #22]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d171      	bne.n	8008d64 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	330c      	adds	r3, #12
 8008c8a:	7812      	ldrb	r2, [r2, #0]
 8008c8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c92:	1c5a      	adds	r2, r3, #1
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	b29a      	uxth	r2, r3
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ca6:	e05d      	b.n	8008d64 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	f003 0302 	and.w	r3, r3, #2
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d11c      	bne.n	8008cf0 <HAL_SPI_TransmitReceive+0x264>
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d017      	beq.n	8008cf0 <HAL_SPI_TransmitReceive+0x264>
 8008cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d114      	bne.n	8008cf0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	330c      	adds	r3, #12
 8008cd0:	7812      	ldrb	r2, [r2, #0]
 8008cd2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cd8:	1c5a      	adds	r2, r3, #1
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	3b01      	subs	r3, #1
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008cec:	2300      	movs	r3, #0
 8008cee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	f003 0301 	and.w	r3, r3, #1
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d119      	bne.n	8008d32 <HAL_SPI_TransmitReceive+0x2a6>
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d014      	beq.n	8008d32 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68da      	ldr	r2, [r3, #12]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d12:	b2d2      	uxtb	r2, r2
 8008d14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d1a:	1c5a      	adds	r2, r3, #1
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	3b01      	subs	r3, #1
 8008d28:	b29a      	uxth	r2, r3
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008d32:	f7fa fe5b 	bl	80039ec <HAL_GetTick>
 8008d36:	4602      	mov	r2, r0
 8008d38:	6a3b      	ldr	r3, [r7, #32]
 8008d3a:	1ad3      	subs	r3, r2, r3
 8008d3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d803      	bhi.n	8008d4a <HAL_SPI_TransmitReceive+0x2be>
 8008d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d48:	d102      	bne.n	8008d50 <HAL_SPI_TransmitReceive+0x2c4>
 8008d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d109      	bne.n	8008d64 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2201      	movs	r2, #1
 8008d54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008d60:	2303      	movs	r3, #3
 8008d62:	e038      	b.n	8008dd6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d19c      	bne.n	8008ca8 <HAL_SPI_TransmitReceive+0x21c>
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d197      	bne.n	8008ca8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d78:	6a3a      	ldr	r2, [r7, #32]
 8008d7a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f000 fa65 	bl	800924c <SPI_EndRxTxTransaction>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d008      	beq.n	8008d9a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2220      	movs	r2, #32
 8008d8c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2200      	movs	r2, #0
 8008d92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	e01d      	b.n	8008dd6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d10a      	bne.n	8008db8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008da2:	2300      	movs	r3, #0
 8008da4:	613b      	str	r3, [r7, #16]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	613b      	str	r3, [r7, #16]
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	613b      	str	r3, [r7, #16]
 8008db6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d001      	beq.n	8008dd4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e000      	b.n	8008dd6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8008dd4:	2300      	movs	r3, #0
  }
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3728      	adds	r7, #40	@ 0x28
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
	...

08008de0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	4613      	mov	r3, r2
 8008dec:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	d001      	beq.n	8008dfe <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8008dfa:	2302      	movs	r3, #2
 8008dfc:	e097      	b.n	8008f2e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d002      	beq.n	8008e0a <HAL_SPI_Transmit_DMA+0x2a>
 8008e04:	88fb      	ldrh	r3, [r7, #6]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d101      	bne.n	8008e0e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e08f      	b.n	8008f2e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d101      	bne.n	8008e1c <HAL_SPI_Transmit_DMA+0x3c>
 8008e18:	2302      	movs	r3, #2
 8008e1a:	e088      	b.n	8008f2e <HAL_SPI_Transmit_DMA+0x14e>
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2203      	movs	r2, #3
 8008e28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	68ba      	ldr	r2, [r7, #8]
 8008e36:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	88fa      	ldrh	r2, [r7, #6]
 8008e3c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	88fa      	ldrh	r2, [r7, #6]
 8008e42:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2200      	movs	r2, #0
 8008e48:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2200      	movs	r2, #0
 8008e54:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e6a:	d10f      	bne.n	8008e8c <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008e8a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e90:	4a29      	ldr	r2, [pc, #164]	@ (8008f38 <HAL_SPI_Transmit_DMA+0x158>)
 8008e92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e98:	4a28      	ldr	r2, [pc, #160]	@ (8008f3c <HAL_SPI_Transmit_DMA+0x15c>)
 8008e9a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ea0:	4a27      	ldr	r2, [pc, #156]	@ (8008f40 <HAL_SPI_Transmit_DMA+0x160>)
 8008ea2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	330c      	adds	r3, #12
 8008ebc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008ec2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008ec4:	f7fa ff6e 	bl	8003da4 <HAL_DMA_Start_IT>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00b      	beq.n	8008ee6 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ed2:	f043 0210 	orr.w	r2, r3, #16
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e023      	b.n	8008f2e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ef0:	2b40      	cmp	r3, #64	@ 0x40
 8008ef2:	d007      	beq.n	8008f04 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f02:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	685a      	ldr	r2, [r3, #4]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f042 0220 	orr.w	r2, r2, #32
 8008f1a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	685a      	ldr	r2, [r3, #4]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f042 0202 	orr.w	r2, r2, #2
 8008f2a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	08009015 	.word	0x08009015
 8008f3c:	08008f6d 	.word	0x08008f6d
 8008f40:	08009031 	.word	0x08009031

08008f44 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008f4c:	bf00      	nop
 8008f4e:	370c      	adds	r7, #12
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008f60:	bf00      	nop
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b086      	sub	sp, #24
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f78:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f7a:	f7fa fd37 	bl	80039ec <HAL_GetTick>
 8008f7e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f8e:	d03b      	beq.n	8009008 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	685a      	ldr	r2, [r3, #4]
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f022 0220 	bic.w	r2, r2, #32
 8008f9e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	685a      	ldr	r2, [r3, #4]
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f022 0202 	bic.w	r2, r2, #2
 8008fae:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008fb0:	693a      	ldr	r2, [r7, #16]
 8008fb2:	2164      	movs	r1, #100	@ 0x64
 8008fb4:	6978      	ldr	r0, [r7, #20]
 8008fb6:	f000 f949 	bl	800924c <SPI_EndRxTxTransaction>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d005      	beq.n	8008fcc <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fc4:	f043 0220 	orr.w	r2, r3, #32
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d10a      	bne.n	8008fea <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	60fb      	str	r3, [r7, #12]
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	68db      	ldr	r3, [r3, #12]
 8008fde:	60fb      	str	r3, [r7, #12]
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	60fb      	str	r3, [r7, #12]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	2200      	movs	r2, #0
 8008fee:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d003      	beq.n	8009008 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009000:	6978      	ldr	r0, [r7, #20]
 8009002:	f7ff ffa9 	bl	8008f58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009006:	e002      	b.n	800900e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8009008:	6978      	ldr	r0, [r7, #20]
 800900a:	f7f9 ff85 	bl	8002f18 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800900e:	3718      	adds	r7, #24
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009020:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009022:	68f8      	ldr	r0, [r7, #12]
 8009024:	f7ff ff8e 	bl	8008f44 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009028:	bf00      	nop
 800902a:	3710      	adds	r7, #16
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800903c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	685a      	ldr	r2, [r3, #4]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f022 0203 	bic.w	r2, r2, #3
 800904c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009052:	f043 0210 	orr.w	r2, r3, #16
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2201      	movs	r2, #1
 800905e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f7ff ff78 	bl	8008f58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009068:	bf00      	nop
 800906a:	3710      	adds	r7, #16
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b088      	sub	sp, #32
 8009074:	af00      	add	r7, sp, #0
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	603b      	str	r3, [r7, #0]
 800907c:	4613      	mov	r3, r2
 800907e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009080:	f7fa fcb4 	bl	80039ec <HAL_GetTick>
 8009084:	4602      	mov	r2, r0
 8009086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009088:	1a9b      	subs	r3, r3, r2
 800908a:	683a      	ldr	r2, [r7, #0]
 800908c:	4413      	add	r3, r2
 800908e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009090:	f7fa fcac 	bl	80039ec <HAL_GetTick>
 8009094:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009096:	4b39      	ldr	r3, [pc, #228]	@ (800917c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	015b      	lsls	r3, r3, #5
 800909c:	0d1b      	lsrs	r3, r3, #20
 800909e:	69fa      	ldr	r2, [r7, #28]
 80090a0:	fb02 f303 	mul.w	r3, r2, r3
 80090a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80090a6:	e054      	b.n	8009152 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80090ae:	d050      	beq.n	8009152 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80090b0:	f7fa fc9c 	bl	80039ec <HAL_GetTick>
 80090b4:	4602      	mov	r2, r0
 80090b6:	69bb      	ldr	r3, [r7, #24]
 80090b8:	1ad3      	subs	r3, r2, r3
 80090ba:	69fa      	ldr	r2, [r7, #28]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d902      	bls.n	80090c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d13d      	bne.n	8009142 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	685a      	ldr	r2, [r3, #4]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80090d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80090de:	d111      	bne.n	8009104 <SPI_WaitFlagStateUntilTimeout+0x94>
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090e8:	d004      	beq.n	80090f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090f2:	d107      	bne.n	8009104 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009102:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009108:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800910c:	d10f      	bne.n	800912e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800911c:	601a      	str	r2, [r3, #0]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800912c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2201      	movs	r2, #1
 8009132:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2200      	movs	r2, #0
 800913a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800913e:	2303      	movs	r3, #3
 8009140:	e017      	b.n	8009172 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d101      	bne.n	800914c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009148:	2300      	movs	r3, #0
 800914a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	3b01      	subs	r3, #1
 8009150:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	689a      	ldr	r2, [r3, #8]
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	4013      	ands	r3, r2
 800915c:	68ba      	ldr	r2, [r7, #8]
 800915e:	429a      	cmp	r2, r3
 8009160:	bf0c      	ite	eq
 8009162:	2301      	moveq	r3, #1
 8009164:	2300      	movne	r3, #0
 8009166:	b2db      	uxtb	r3, r3
 8009168:	461a      	mov	r2, r3
 800916a:	79fb      	ldrb	r3, [r7, #7]
 800916c:	429a      	cmp	r2, r3
 800916e:	d19b      	bne.n	80090a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3720      	adds	r7, #32
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	20000008 	.word	0x20000008

08009180 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b086      	sub	sp, #24
 8009184:	af02      	add	r7, sp, #8
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009194:	d111      	bne.n	80091ba <SPI_EndRxTransaction+0x3a>
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800919e:	d004      	beq.n	80091aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091a8:	d107      	bne.n	80091ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80091b8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80091c2:	d12a      	bne.n	800921a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091cc:	d012      	beq.n	80091f4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	9300      	str	r3, [sp, #0]
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	2200      	movs	r2, #0
 80091d6:	2180      	movs	r1, #128	@ 0x80
 80091d8:	68f8      	ldr	r0, [r7, #12]
 80091da:	f7ff ff49 	bl	8009070 <SPI_WaitFlagStateUntilTimeout>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d02d      	beq.n	8009240 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091e8:	f043 0220 	orr.w	r2, r3, #32
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80091f0:	2303      	movs	r3, #3
 80091f2:	e026      	b.n	8009242 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	9300      	str	r3, [sp, #0]
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	2200      	movs	r2, #0
 80091fc:	2101      	movs	r1, #1
 80091fe:	68f8      	ldr	r0, [r7, #12]
 8009200:	f7ff ff36 	bl	8009070 <SPI_WaitFlagStateUntilTimeout>
 8009204:	4603      	mov	r3, r0
 8009206:	2b00      	cmp	r3, #0
 8009208:	d01a      	beq.n	8009240 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800920e:	f043 0220 	orr.w	r2, r3, #32
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8009216:	2303      	movs	r3, #3
 8009218:	e013      	b.n	8009242 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	9300      	str	r3, [sp, #0]
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	2200      	movs	r2, #0
 8009222:	2101      	movs	r1, #1
 8009224:	68f8      	ldr	r0, [r7, #12]
 8009226:	f7ff ff23 	bl	8009070 <SPI_WaitFlagStateUntilTimeout>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d007      	beq.n	8009240 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009234:	f043 0220 	orr.w	r2, r3, #32
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800923c:	2303      	movs	r3, #3
 800923e:	e000      	b.n	8009242 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
	...

0800924c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b088      	sub	sp, #32
 8009250:	af02      	add	r7, sp, #8
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	60b9      	str	r1, [r7, #8]
 8009256:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	9300      	str	r3, [sp, #0]
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	2201      	movs	r2, #1
 8009260:	2102      	movs	r1, #2
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	f7ff ff04 	bl	8009070 <SPI_WaitFlagStateUntilTimeout>
 8009268:	4603      	mov	r3, r0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d007      	beq.n	800927e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009272:	f043 0220 	orr.w	r2, r3, #32
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800927a:	2303      	movs	r3, #3
 800927c:	e032      	b.n	80092e4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800927e:	4b1b      	ldr	r3, [pc, #108]	@ (80092ec <SPI_EndRxTxTransaction+0xa0>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a1b      	ldr	r2, [pc, #108]	@ (80092f0 <SPI_EndRxTxTransaction+0xa4>)
 8009284:	fba2 2303 	umull	r2, r3, r2, r3
 8009288:	0d5b      	lsrs	r3, r3, #21
 800928a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800928e:	fb02 f303 	mul.w	r3, r2, r3
 8009292:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800929c:	d112      	bne.n	80092c4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	9300      	str	r3, [sp, #0]
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	2200      	movs	r2, #0
 80092a6:	2180      	movs	r1, #128	@ 0x80
 80092a8:	68f8      	ldr	r0, [r7, #12]
 80092aa:	f7ff fee1 	bl	8009070 <SPI_WaitFlagStateUntilTimeout>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d016      	beq.n	80092e2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092b8:	f043 0220 	orr.w	r2, r3, #32
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80092c0:	2303      	movs	r3, #3
 80092c2:	e00f      	b.n	80092e4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00a      	beq.n	80092e0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	3b01      	subs	r3, #1
 80092ce:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092da:	2b80      	cmp	r3, #128	@ 0x80
 80092dc:	d0f2      	beq.n	80092c4 <SPI_EndRxTxTransaction+0x78>
 80092de:	e000      	b.n	80092e2 <SPI_EndRxTxTransaction+0x96>
        break;
 80092e0:	bf00      	nop
  }

  return HAL_OK;
 80092e2:	2300      	movs	r3, #0
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3718      	adds	r7, #24
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	20000008 	.word	0x20000008
 80092f0:	165e9f81 	.word	0x165e9f81

080092f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d101      	bne.n	8009306 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e041      	b.n	800938a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800930c:	b2db      	uxtb	r3, r3
 800930e:	2b00      	cmp	r3, #0
 8009310:	d106      	bne.n	8009320 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f7fa fa56 	bl	80037cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2202      	movs	r2, #2
 8009324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	3304      	adds	r3, #4
 8009330:	4619      	mov	r1, r3
 8009332:	4610      	mov	r0, r2
 8009334:	f000 fa7e 	bl	8009834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2201      	movs	r2, #1
 800933c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2201      	movs	r2, #1
 800934c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2201      	movs	r2, #1
 8009354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2201      	movs	r2, #1
 800935c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2201      	movs	r2, #1
 8009364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2201      	movs	r2, #1
 800936c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2201      	movs	r2, #1
 8009384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	3708      	adds	r7, #8
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
	...

08009394 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009394:	b480      	push	{r7}
 8009396:	b085      	sub	sp, #20
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d001      	beq.n	80093ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80093a8:	2301      	movs	r3, #1
 80093aa:	e04e      	b.n	800944a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2202      	movs	r2, #2
 80093b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	68da      	ldr	r2, [r3, #12]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f042 0201 	orr.w	r2, r2, #1
 80093c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a23      	ldr	r2, [pc, #140]	@ (8009458 <HAL_TIM_Base_Start_IT+0xc4>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d022      	beq.n	8009414 <HAL_TIM_Base_Start_IT+0x80>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093d6:	d01d      	beq.n	8009414 <HAL_TIM_Base_Start_IT+0x80>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a1f      	ldr	r2, [pc, #124]	@ (800945c <HAL_TIM_Base_Start_IT+0xc8>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d018      	beq.n	8009414 <HAL_TIM_Base_Start_IT+0x80>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a1e      	ldr	r2, [pc, #120]	@ (8009460 <HAL_TIM_Base_Start_IT+0xcc>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d013      	beq.n	8009414 <HAL_TIM_Base_Start_IT+0x80>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a1c      	ldr	r2, [pc, #112]	@ (8009464 <HAL_TIM_Base_Start_IT+0xd0>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d00e      	beq.n	8009414 <HAL_TIM_Base_Start_IT+0x80>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a1b      	ldr	r2, [pc, #108]	@ (8009468 <HAL_TIM_Base_Start_IT+0xd4>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d009      	beq.n	8009414 <HAL_TIM_Base_Start_IT+0x80>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a19      	ldr	r2, [pc, #100]	@ (800946c <HAL_TIM_Base_Start_IT+0xd8>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d004      	beq.n	8009414 <HAL_TIM_Base_Start_IT+0x80>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a18      	ldr	r2, [pc, #96]	@ (8009470 <HAL_TIM_Base_Start_IT+0xdc>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d111      	bne.n	8009438 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	f003 0307 	and.w	r3, r3, #7
 800941e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2b06      	cmp	r3, #6
 8009424:	d010      	beq.n	8009448 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f042 0201 	orr.w	r2, r2, #1
 8009434:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009436:	e007      	b.n	8009448 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f042 0201 	orr.w	r2, r2, #1
 8009446:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	3714      	adds	r7, #20
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr
 8009456:	bf00      	nop
 8009458:	40010000 	.word	0x40010000
 800945c:	40000400 	.word	0x40000400
 8009460:	40000800 	.word	0x40000800
 8009464:	40000c00 	.word	0x40000c00
 8009468:	40010400 	.word	0x40010400
 800946c:	40014000 	.word	0x40014000
 8009470:	40001800 	.word	0x40001800

08009474 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	691b      	ldr	r3, [r3, #16]
 800948a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	f003 0302 	and.w	r3, r3, #2
 8009492:	2b00      	cmp	r3, #0
 8009494:	d020      	beq.n	80094d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f003 0302 	and.w	r3, r3, #2
 800949c:	2b00      	cmp	r3, #0
 800949e:	d01b      	beq.n	80094d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f06f 0202 	mvn.w	r2, #2
 80094a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2201      	movs	r2, #1
 80094ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	699b      	ldr	r3, [r3, #24]
 80094b6:	f003 0303 	and.w	r3, r3, #3
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d003      	beq.n	80094c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 f999 	bl	80097f6 <HAL_TIM_IC_CaptureCallback>
 80094c4:	e005      	b.n	80094d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 f98b 	bl	80097e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 f99c 	bl	800980a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	f003 0304 	and.w	r3, r3, #4
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d020      	beq.n	8009524 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f003 0304 	and.w	r3, r3, #4
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d01b      	beq.n	8009524 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f06f 0204 	mvn.w	r2, #4
 80094f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2202      	movs	r2, #2
 80094fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	699b      	ldr	r3, [r3, #24]
 8009502:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009506:	2b00      	cmp	r3, #0
 8009508:	d003      	beq.n	8009512 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 f973 	bl	80097f6 <HAL_TIM_IC_CaptureCallback>
 8009510:	e005      	b.n	800951e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 f965 	bl	80097e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 f976 	bl	800980a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	f003 0308 	and.w	r3, r3, #8
 800952a:	2b00      	cmp	r3, #0
 800952c:	d020      	beq.n	8009570 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f003 0308 	and.w	r3, r3, #8
 8009534:	2b00      	cmp	r3, #0
 8009536:	d01b      	beq.n	8009570 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f06f 0208 	mvn.w	r2, #8
 8009540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2204      	movs	r2, #4
 8009546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	69db      	ldr	r3, [r3, #28]
 800954e:	f003 0303 	and.w	r3, r3, #3
 8009552:	2b00      	cmp	r3, #0
 8009554:	d003      	beq.n	800955e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 f94d 	bl	80097f6 <HAL_TIM_IC_CaptureCallback>
 800955c:	e005      	b.n	800956a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 f93f 	bl	80097e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 f950 	bl	800980a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	f003 0310 	and.w	r3, r3, #16
 8009576:	2b00      	cmp	r3, #0
 8009578:	d020      	beq.n	80095bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f003 0310 	and.w	r3, r3, #16
 8009580:	2b00      	cmp	r3, #0
 8009582:	d01b      	beq.n	80095bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f06f 0210 	mvn.w	r2, #16
 800958c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2208      	movs	r2, #8
 8009592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	69db      	ldr	r3, [r3, #28]
 800959a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d003      	beq.n	80095aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 f927 	bl	80097f6 <HAL_TIM_IC_CaptureCallback>
 80095a8:	e005      	b.n	80095b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 f919 	bl	80097e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 f92a 	bl	800980a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	f003 0301 	and.w	r3, r3, #1
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d00c      	beq.n	80095e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f003 0301 	and.w	r3, r3, #1
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d007      	beq.n	80095e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f06f 0201 	mvn.w	r2, #1
 80095d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f7f9 fdaa 	bl	8003134 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d00c      	beq.n	8009604 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d007      	beq.n	8009604 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80095fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 fae4 	bl	8009bcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800960a:	2b00      	cmp	r3, #0
 800960c:	d00c      	beq.n	8009628 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009614:	2b00      	cmp	r3, #0
 8009616:	d007      	beq.n	8009628 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 f8fb 	bl	800981e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	f003 0320 	and.w	r3, r3, #32
 800962e:	2b00      	cmp	r3, #0
 8009630:	d00c      	beq.n	800964c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f003 0320 	and.w	r3, r3, #32
 8009638:	2b00      	cmp	r3, #0
 800963a:	d007      	beq.n	800964c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f06f 0220 	mvn.w	r2, #32
 8009644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 fab6 	bl	8009bb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800964c:	bf00      	nop
 800964e:	3710      	adds	r7, #16
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800965e:	2300      	movs	r3, #0
 8009660:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009668:	2b01      	cmp	r3, #1
 800966a:	d101      	bne.n	8009670 <HAL_TIM_ConfigClockSource+0x1c>
 800966c:	2302      	movs	r3, #2
 800966e:	e0b4      	b.n	80097da <HAL_TIM_ConfigClockSource+0x186>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2202      	movs	r2, #2
 800967c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	689b      	ldr	r3, [r3, #8]
 8009686:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800968e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009696:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	68ba      	ldr	r2, [r7, #8]
 800969e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096a8:	d03e      	beq.n	8009728 <HAL_TIM_ConfigClockSource+0xd4>
 80096aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096ae:	f200 8087 	bhi.w	80097c0 <HAL_TIM_ConfigClockSource+0x16c>
 80096b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096b6:	f000 8086 	beq.w	80097c6 <HAL_TIM_ConfigClockSource+0x172>
 80096ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096be:	d87f      	bhi.n	80097c0 <HAL_TIM_ConfigClockSource+0x16c>
 80096c0:	2b70      	cmp	r3, #112	@ 0x70
 80096c2:	d01a      	beq.n	80096fa <HAL_TIM_ConfigClockSource+0xa6>
 80096c4:	2b70      	cmp	r3, #112	@ 0x70
 80096c6:	d87b      	bhi.n	80097c0 <HAL_TIM_ConfigClockSource+0x16c>
 80096c8:	2b60      	cmp	r3, #96	@ 0x60
 80096ca:	d050      	beq.n	800976e <HAL_TIM_ConfigClockSource+0x11a>
 80096cc:	2b60      	cmp	r3, #96	@ 0x60
 80096ce:	d877      	bhi.n	80097c0 <HAL_TIM_ConfigClockSource+0x16c>
 80096d0:	2b50      	cmp	r3, #80	@ 0x50
 80096d2:	d03c      	beq.n	800974e <HAL_TIM_ConfigClockSource+0xfa>
 80096d4:	2b50      	cmp	r3, #80	@ 0x50
 80096d6:	d873      	bhi.n	80097c0 <HAL_TIM_ConfigClockSource+0x16c>
 80096d8:	2b40      	cmp	r3, #64	@ 0x40
 80096da:	d058      	beq.n	800978e <HAL_TIM_ConfigClockSource+0x13a>
 80096dc:	2b40      	cmp	r3, #64	@ 0x40
 80096de:	d86f      	bhi.n	80097c0 <HAL_TIM_ConfigClockSource+0x16c>
 80096e0:	2b30      	cmp	r3, #48	@ 0x30
 80096e2:	d064      	beq.n	80097ae <HAL_TIM_ConfigClockSource+0x15a>
 80096e4:	2b30      	cmp	r3, #48	@ 0x30
 80096e6:	d86b      	bhi.n	80097c0 <HAL_TIM_ConfigClockSource+0x16c>
 80096e8:	2b20      	cmp	r3, #32
 80096ea:	d060      	beq.n	80097ae <HAL_TIM_ConfigClockSource+0x15a>
 80096ec:	2b20      	cmp	r3, #32
 80096ee:	d867      	bhi.n	80097c0 <HAL_TIM_ConfigClockSource+0x16c>
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d05c      	beq.n	80097ae <HAL_TIM_ConfigClockSource+0x15a>
 80096f4:	2b10      	cmp	r3, #16
 80096f6:	d05a      	beq.n	80097ae <HAL_TIM_ConfigClockSource+0x15a>
 80096f8:	e062      	b.n	80097c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800970a:	f000 f9b9 	bl	8009a80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800971c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	68ba      	ldr	r2, [r7, #8]
 8009724:	609a      	str	r2, [r3, #8]
      break;
 8009726:	e04f      	b.n	80097c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009738:	f000 f9a2 	bl	8009a80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	689a      	ldr	r2, [r3, #8]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800974a:	609a      	str	r2, [r3, #8]
      break;
 800974c:	e03c      	b.n	80097c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800975a:	461a      	mov	r2, r3
 800975c:	f000 f916 	bl	800998c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	2150      	movs	r1, #80	@ 0x50
 8009766:	4618      	mov	r0, r3
 8009768:	f000 f96f 	bl	8009a4a <TIM_ITRx_SetConfig>
      break;
 800976c:	e02c      	b.n	80097c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800977a:	461a      	mov	r2, r3
 800977c:	f000 f935 	bl	80099ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2160      	movs	r1, #96	@ 0x60
 8009786:	4618      	mov	r0, r3
 8009788:	f000 f95f 	bl	8009a4a <TIM_ITRx_SetConfig>
      break;
 800978c:	e01c      	b.n	80097c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800979a:	461a      	mov	r2, r3
 800979c:	f000 f8f6 	bl	800998c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	2140      	movs	r1, #64	@ 0x40
 80097a6:	4618      	mov	r0, r3
 80097a8:	f000 f94f 	bl	8009a4a <TIM_ITRx_SetConfig>
      break;
 80097ac:	e00c      	b.n	80097c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4619      	mov	r1, r3
 80097b8:	4610      	mov	r0, r2
 80097ba:	f000 f946 	bl	8009a4a <TIM_ITRx_SetConfig>
      break;
 80097be:	e003      	b.n	80097c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80097c0:	2301      	movs	r3, #1
 80097c2:	73fb      	strb	r3, [r7, #15]
      break;
 80097c4:	e000      	b.n	80097c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80097c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2200      	movs	r2, #0
 80097d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80097d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3710      	adds	r7, #16
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80097e2:	b480      	push	{r7}
 80097e4:	b083      	sub	sp, #12
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80097ea:	bf00      	nop
 80097ec:	370c      	adds	r7, #12
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr

080097f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80097f6:	b480      	push	{r7}
 80097f8:	b083      	sub	sp, #12
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80097fe:	bf00      	nop
 8009800:	370c      	adds	r7, #12
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr

0800980a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800980a:	b480      	push	{r7}
 800980c:	b083      	sub	sp, #12
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009812:	bf00      	nop
 8009814:	370c      	adds	r7, #12
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr

0800981e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800981e:	b480      	push	{r7}
 8009820:	b083      	sub	sp, #12
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009826:	bf00      	nop
 8009828:	370c      	adds	r7, #12
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr
	...

08009834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009834:	b480      	push	{r7}
 8009836:	b085      	sub	sp, #20
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	4a46      	ldr	r2, [pc, #280]	@ (8009960 <TIM_Base_SetConfig+0x12c>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d013      	beq.n	8009874 <TIM_Base_SetConfig+0x40>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009852:	d00f      	beq.n	8009874 <TIM_Base_SetConfig+0x40>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	4a43      	ldr	r2, [pc, #268]	@ (8009964 <TIM_Base_SetConfig+0x130>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d00b      	beq.n	8009874 <TIM_Base_SetConfig+0x40>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4a42      	ldr	r2, [pc, #264]	@ (8009968 <TIM_Base_SetConfig+0x134>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d007      	beq.n	8009874 <TIM_Base_SetConfig+0x40>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	4a41      	ldr	r2, [pc, #260]	@ (800996c <TIM_Base_SetConfig+0x138>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d003      	beq.n	8009874 <TIM_Base_SetConfig+0x40>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	4a40      	ldr	r2, [pc, #256]	@ (8009970 <TIM_Base_SetConfig+0x13c>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d108      	bne.n	8009886 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800987a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	68fa      	ldr	r2, [r7, #12]
 8009882:	4313      	orrs	r3, r2
 8009884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	4a35      	ldr	r2, [pc, #212]	@ (8009960 <TIM_Base_SetConfig+0x12c>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d02b      	beq.n	80098e6 <TIM_Base_SetConfig+0xb2>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009894:	d027      	beq.n	80098e6 <TIM_Base_SetConfig+0xb2>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	4a32      	ldr	r2, [pc, #200]	@ (8009964 <TIM_Base_SetConfig+0x130>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d023      	beq.n	80098e6 <TIM_Base_SetConfig+0xb2>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	4a31      	ldr	r2, [pc, #196]	@ (8009968 <TIM_Base_SetConfig+0x134>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d01f      	beq.n	80098e6 <TIM_Base_SetConfig+0xb2>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	4a30      	ldr	r2, [pc, #192]	@ (800996c <TIM_Base_SetConfig+0x138>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d01b      	beq.n	80098e6 <TIM_Base_SetConfig+0xb2>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	4a2f      	ldr	r2, [pc, #188]	@ (8009970 <TIM_Base_SetConfig+0x13c>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d017      	beq.n	80098e6 <TIM_Base_SetConfig+0xb2>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	4a2e      	ldr	r2, [pc, #184]	@ (8009974 <TIM_Base_SetConfig+0x140>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d013      	beq.n	80098e6 <TIM_Base_SetConfig+0xb2>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4a2d      	ldr	r2, [pc, #180]	@ (8009978 <TIM_Base_SetConfig+0x144>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d00f      	beq.n	80098e6 <TIM_Base_SetConfig+0xb2>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a2c      	ldr	r2, [pc, #176]	@ (800997c <TIM_Base_SetConfig+0x148>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d00b      	beq.n	80098e6 <TIM_Base_SetConfig+0xb2>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4a2b      	ldr	r2, [pc, #172]	@ (8009980 <TIM_Base_SetConfig+0x14c>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d007      	beq.n	80098e6 <TIM_Base_SetConfig+0xb2>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	4a2a      	ldr	r2, [pc, #168]	@ (8009984 <TIM_Base_SetConfig+0x150>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d003      	beq.n	80098e6 <TIM_Base_SetConfig+0xb2>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	4a29      	ldr	r2, [pc, #164]	@ (8009988 <TIM_Base_SetConfig+0x154>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d108      	bne.n	80098f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	4313      	orrs	r3, r2
 80098f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	695b      	ldr	r3, [r3, #20]
 8009902:	4313      	orrs	r3, r2
 8009904:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	68fa      	ldr	r2, [r7, #12]
 800990a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	689a      	ldr	r2, [r3, #8]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4a10      	ldr	r2, [pc, #64]	@ (8009960 <TIM_Base_SetConfig+0x12c>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d003      	beq.n	800992c <TIM_Base_SetConfig+0xf8>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4a12      	ldr	r2, [pc, #72]	@ (8009970 <TIM_Base_SetConfig+0x13c>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d103      	bne.n	8009934 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	691a      	ldr	r2, [r3, #16]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2201      	movs	r2, #1
 8009938:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	691b      	ldr	r3, [r3, #16]
 800993e:	f003 0301 	and.w	r3, r3, #1
 8009942:	2b01      	cmp	r3, #1
 8009944:	d105      	bne.n	8009952 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	691b      	ldr	r3, [r3, #16]
 800994a:	f023 0201 	bic.w	r2, r3, #1
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	611a      	str	r2, [r3, #16]
  }
}
 8009952:	bf00      	nop
 8009954:	3714      	adds	r7, #20
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr
 800995e:	bf00      	nop
 8009960:	40010000 	.word	0x40010000
 8009964:	40000400 	.word	0x40000400
 8009968:	40000800 	.word	0x40000800
 800996c:	40000c00 	.word	0x40000c00
 8009970:	40010400 	.word	0x40010400
 8009974:	40014000 	.word	0x40014000
 8009978:	40014400 	.word	0x40014400
 800997c:	40014800 	.word	0x40014800
 8009980:	40001800 	.word	0x40001800
 8009984:	40001c00 	.word	0x40001c00
 8009988:	40002000 	.word	0x40002000

0800998c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800998c:	b480      	push	{r7}
 800998e:	b087      	sub	sp, #28
 8009990:	af00      	add	r7, sp, #0
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	60b9      	str	r1, [r7, #8]
 8009996:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	6a1b      	ldr	r3, [r3, #32]
 800999c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	6a1b      	ldr	r3, [r3, #32]
 80099a2:	f023 0201 	bic.w	r2, r3, #1
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	699b      	ldr	r3, [r3, #24]
 80099ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80099b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	011b      	lsls	r3, r3, #4
 80099bc:	693a      	ldr	r2, [r7, #16]
 80099be:	4313      	orrs	r3, r2
 80099c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	f023 030a 	bic.w	r3, r3, #10
 80099c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80099ca:	697a      	ldr	r2, [r7, #20]
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	4313      	orrs	r3, r2
 80099d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	693a      	ldr	r2, [r7, #16]
 80099d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	697a      	ldr	r2, [r7, #20]
 80099dc:	621a      	str	r2, [r3, #32]
}
 80099de:	bf00      	nop
 80099e0:	371c      	adds	r7, #28
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr

080099ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099ea:	b480      	push	{r7}
 80099ec:	b087      	sub	sp, #28
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	60f8      	str	r0, [r7, #12]
 80099f2:	60b9      	str	r1, [r7, #8]
 80099f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	6a1b      	ldr	r3, [r3, #32]
 80099fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6a1b      	ldr	r3, [r3, #32]
 8009a00:	f023 0210 	bic.w	r2, r3, #16
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	699b      	ldr	r3, [r3, #24]
 8009a0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009a14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	031b      	lsls	r3, r3, #12
 8009a1a:	693a      	ldr	r2, [r7, #16]
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009a26:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	011b      	lsls	r3, r3, #4
 8009a2c:	697a      	ldr	r2, [r7, #20]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	693a      	ldr	r2, [r7, #16]
 8009a36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	697a      	ldr	r2, [r7, #20]
 8009a3c:	621a      	str	r2, [r3, #32]
}
 8009a3e:	bf00      	nop
 8009a40:	371c      	adds	r7, #28
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr

08009a4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009a4a:	b480      	push	{r7}
 8009a4c:	b085      	sub	sp, #20
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
 8009a52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a62:	683a      	ldr	r2, [r7, #0]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	f043 0307 	orr.w	r3, r3, #7
 8009a6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	68fa      	ldr	r2, [r7, #12]
 8009a72:	609a      	str	r2, [r3, #8]
}
 8009a74:	bf00      	nop
 8009a76:	3714      	adds	r7, #20
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b087      	sub	sp, #28
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	607a      	str	r2, [r7, #4]
 8009a8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009a9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	021a      	lsls	r2, r3, #8
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	431a      	orrs	r2, r3
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	697a      	ldr	r2, [r7, #20]
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	697a      	ldr	r2, [r7, #20]
 8009ab2:	609a      	str	r2, [r3, #8]
}
 8009ab4:	bf00      	nop
 8009ab6:	371c      	adds	r7, #28
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b085      	sub	sp, #20
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d101      	bne.n	8009ad8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ad4:	2302      	movs	r3, #2
 8009ad6:	e05a      	b.n	8009b8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2201      	movs	r2, #1
 8009adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2202      	movs	r2, #2
 8009ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009afe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	68fa      	ldr	r2, [r7, #12]
 8009b06:	4313      	orrs	r3, r2
 8009b08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	68fa      	ldr	r2, [r7, #12]
 8009b10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a21      	ldr	r2, [pc, #132]	@ (8009b9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d022      	beq.n	8009b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b24:	d01d      	beq.n	8009b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a1d      	ldr	r2, [pc, #116]	@ (8009ba0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d018      	beq.n	8009b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a1b      	ldr	r2, [pc, #108]	@ (8009ba4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d013      	beq.n	8009b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a1a      	ldr	r2, [pc, #104]	@ (8009ba8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d00e      	beq.n	8009b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a18      	ldr	r2, [pc, #96]	@ (8009bac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d009      	beq.n	8009b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a17      	ldr	r2, [pc, #92]	@ (8009bb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d004      	beq.n	8009b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a15      	ldr	r2, [pc, #84]	@ (8009bb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d10c      	bne.n	8009b7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	68ba      	ldr	r2, [r7, #8]
 8009b70:	4313      	orrs	r3, r2
 8009b72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	68ba      	ldr	r2, [r7, #8]
 8009b7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009b8c:	2300      	movs	r3, #0
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3714      	adds	r7, #20
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr
 8009b9a:	bf00      	nop
 8009b9c:	40010000 	.word	0x40010000
 8009ba0:	40000400 	.word	0x40000400
 8009ba4:	40000800 	.word	0x40000800
 8009ba8:	40000c00 	.word	0x40000c00
 8009bac:	40010400 	.word	0x40010400
 8009bb0:	40014000 	.word	0x40014000
 8009bb4:	40001800 	.word	0x40001800

08009bb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009bc0:	bf00      	nop
 8009bc2:	370c      	adds	r7, #12
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr

08009bcc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009bd4:	bf00      	nop
 8009bd6:	370c      	adds	r7, #12
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d101      	bne.n	8009bf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	e042      	b.n	8009c78 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d106      	bne.n	8009c0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f7f9 fe48 	bl	800389c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2224      	movs	r2, #36	@ 0x24
 8009c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	68da      	ldr	r2, [r3, #12]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009c22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 f973 	bl	8009f10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	691a      	ldr	r2, [r3, #16]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009c38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	695a      	ldr	r2, [r3, #20]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009c48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	68da      	ldr	r2, [r3, #12]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009c58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2220      	movs	r2, #32
 8009c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2220      	movs	r2, #32
 8009c6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2200      	movs	r2, #0
 8009c74:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009c76:	2300      	movs	r3, #0
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3708      	adds	r7, #8
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b08a      	sub	sp, #40	@ 0x28
 8009c84:	af02      	add	r7, sp, #8
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	603b      	str	r3, [r7, #0]
 8009c8c:	4613      	mov	r3, r2
 8009c8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009c90:	2300      	movs	r3, #0
 8009c92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	2b20      	cmp	r3, #32
 8009c9e:	d175      	bne.n	8009d8c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d002      	beq.n	8009cac <HAL_UART_Transmit+0x2c>
 8009ca6:	88fb      	ldrh	r3, [r7, #6]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d101      	bne.n	8009cb0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009cac:	2301      	movs	r3, #1
 8009cae:	e06e      	b.n	8009d8e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2221      	movs	r2, #33	@ 0x21
 8009cba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009cbe:	f7f9 fe95 	bl	80039ec <HAL_GetTick>
 8009cc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	88fa      	ldrh	r2, [r7, #6]
 8009cc8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	88fa      	ldrh	r2, [r7, #6]
 8009cce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cd8:	d108      	bne.n	8009cec <HAL_UART_Transmit+0x6c>
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	691b      	ldr	r3, [r3, #16]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d104      	bne.n	8009cec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	61bb      	str	r3, [r7, #24]
 8009cea:	e003      	b.n	8009cf4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009cf4:	e02e      	b.n	8009d54 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	9300      	str	r3, [sp, #0]
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	2180      	movs	r1, #128	@ 0x80
 8009d00:	68f8      	ldr	r0, [r7, #12]
 8009d02:	f000 f848 	bl	8009d96 <UART_WaitOnFlagUntilTimeout>
 8009d06:	4603      	mov	r3, r0
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d005      	beq.n	8009d18 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2220      	movs	r2, #32
 8009d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009d14:	2303      	movs	r3, #3
 8009d16:	e03a      	b.n	8009d8e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009d18:	69fb      	ldr	r3, [r7, #28]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d10b      	bne.n	8009d36 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009d1e:	69bb      	ldr	r3, [r7, #24]
 8009d20:	881b      	ldrh	r3, [r3, #0]
 8009d22:	461a      	mov	r2, r3
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009d2e:	69bb      	ldr	r3, [r7, #24]
 8009d30:	3302      	adds	r3, #2
 8009d32:	61bb      	str	r3, [r7, #24]
 8009d34:	e007      	b.n	8009d46 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d36:	69fb      	ldr	r3, [r7, #28]
 8009d38:	781a      	ldrb	r2, [r3, #0]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009d40:	69fb      	ldr	r3, [r7, #28]
 8009d42:	3301      	adds	r3, #1
 8009d44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	3b01      	subs	r3, #1
 8009d4e:	b29a      	uxth	r2, r3
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d1cb      	bne.n	8009cf6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	9300      	str	r3, [sp, #0]
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	2200      	movs	r2, #0
 8009d66:	2140      	movs	r1, #64	@ 0x40
 8009d68:	68f8      	ldr	r0, [r7, #12]
 8009d6a:	f000 f814 	bl	8009d96 <UART_WaitOnFlagUntilTimeout>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d005      	beq.n	8009d80 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2220      	movs	r2, #32
 8009d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009d7c:	2303      	movs	r3, #3
 8009d7e:	e006      	b.n	8009d8e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2220      	movs	r2, #32
 8009d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	e000      	b.n	8009d8e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009d8c:	2302      	movs	r3, #2
  }
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3720      	adds	r7, #32
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}

08009d96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b086      	sub	sp, #24
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	60f8      	str	r0, [r7, #12]
 8009d9e:	60b9      	str	r1, [r7, #8]
 8009da0:	603b      	str	r3, [r7, #0]
 8009da2:	4613      	mov	r3, r2
 8009da4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009da6:	e03b      	b.n	8009e20 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009da8:	6a3b      	ldr	r3, [r7, #32]
 8009daa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009dae:	d037      	beq.n	8009e20 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009db0:	f7f9 fe1c 	bl	80039ec <HAL_GetTick>
 8009db4:	4602      	mov	r2, r0
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	1ad3      	subs	r3, r2, r3
 8009dba:	6a3a      	ldr	r2, [r7, #32]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d302      	bcc.n	8009dc6 <UART_WaitOnFlagUntilTimeout+0x30>
 8009dc0:	6a3b      	ldr	r3, [r7, #32]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d101      	bne.n	8009dca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009dc6:	2303      	movs	r3, #3
 8009dc8:	e03a      	b.n	8009e40 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	68db      	ldr	r3, [r3, #12]
 8009dd0:	f003 0304 	and.w	r3, r3, #4
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d023      	beq.n	8009e20 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	2b80      	cmp	r3, #128	@ 0x80
 8009ddc:	d020      	beq.n	8009e20 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	2b40      	cmp	r3, #64	@ 0x40
 8009de2:	d01d      	beq.n	8009e20 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f003 0308 	and.w	r3, r3, #8
 8009dee:	2b08      	cmp	r3, #8
 8009df0:	d116      	bne.n	8009e20 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009df2:	2300      	movs	r3, #0
 8009df4:	617b      	str	r3, [r7, #20]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	617b      	str	r3, [r7, #20]
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	617b      	str	r3, [r7, #20]
 8009e06:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e08:	68f8      	ldr	r0, [r7, #12]
 8009e0a:	f000 f81d 	bl	8009e48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2208      	movs	r2, #8
 8009e12:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	e00f      	b.n	8009e40 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	4013      	ands	r3, r2
 8009e2a:	68ba      	ldr	r2, [r7, #8]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	bf0c      	ite	eq
 8009e30:	2301      	moveq	r3, #1
 8009e32:	2300      	movne	r3, #0
 8009e34:	b2db      	uxtb	r3, r3
 8009e36:	461a      	mov	r2, r3
 8009e38:	79fb      	ldrb	r3, [r7, #7]
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d0b4      	beq.n	8009da8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e3e:	2300      	movs	r3, #0
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3718      	adds	r7, #24
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b095      	sub	sp, #84	@ 0x54
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	330c      	adds	r3, #12
 8009e56:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e5a:	e853 3f00 	ldrex	r3, [r3]
 8009e5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	330c      	adds	r3, #12
 8009e6e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009e70:	643a      	str	r2, [r7, #64]	@ 0x40
 8009e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009e76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009e78:	e841 2300 	strex	r3, r2, [r1]
 8009e7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d1e5      	bne.n	8009e50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	3314      	adds	r3, #20
 8009e8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e8c:	6a3b      	ldr	r3, [r7, #32]
 8009e8e:	e853 3f00 	ldrex	r3, [r3]
 8009e92:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e94:	69fb      	ldr	r3, [r7, #28]
 8009e96:	f023 0301 	bic.w	r3, r3, #1
 8009e9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	3314      	adds	r3, #20
 8009ea2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ea4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009eaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009eac:	e841 2300 	strex	r3, r2, [r1]
 8009eb0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d1e5      	bne.n	8009e84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d119      	bne.n	8009ef4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	330c      	adds	r3, #12
 8009ec6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	e853 3f00 	ldrex	r3, [r3]
 8009ece:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	f023 0310 	bic.w	r3, r3, #16
 8009ed6:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	330c      	adds	r3, #12
 8009ede:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ee0:	61ba      	str	r2, [r7, #24]
 8009ee2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee4:	6979      	ldr	r1, [r7, #20]
 8009ee6:	69ba      	ldr	r2, [r7, #24]
 8009ee8:	e841 2300 	strex	r3, r2, [r1]
 8009eec:	613b      	str	r3, [r7, #16]
   return(result);
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d1e5      	bne.n	8009ec0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2220      	movs	r2, #32
 8009ef8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009f02:	bf00      	nop
 8009f04:	3754      	adds	r7, #84	@ 0x54
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr
	...

08009f10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f14:	b0c0      	sub	sp, #256	@ 0x100
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	691b      	ldr	r3, [r3, #16]
 8009f24:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f2c:	68d9      	ldr	r1, [r3, #12]
 8009f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	ea40 0301 	orr.w	r3, r0, r1
 8009f38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f3e:	689a      	ldr	r2, [r3, #8]
 8009f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f44:	691b      	ldr	r3, [r3, #16]
 8009f46:	431a      	orrs	r2, r3
 8009f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f4c:	695b      	ldr	r3, [r3, #20]
 8009f4e:	431a      	orrs	r2, r3
 8009f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f54:	69db      	ldr	r3, [r3, #28]
 8009f56:	4313      	orrs	r3, r2
 8009f58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	68db      	ldr	r3, [r3, #12]
 8009f64:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009f68:	f021 010c 	bic.w	r1, r1, #12
 8009f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009f76:	430b      	orrs	r3, r1
 8009f78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	695b      	ldr	r3, [r3, #20]
 8009f82:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f8a:	6999      	ldr	r1, [r3, #24]
 8009f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	ea40 0301 	orr.w	r3, r0, r1
 8009f96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	4b8f      	ldr	r3, [pc, #572]	@ (800a1dc <UART_SetConfig+0x2cc>)
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d005      	beq.n	8009fb0 <UART_SetConfig+0xa0>
 8009fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	4b8d      	ldr	r3, [pc, #564]	@ (800a1e0 <UART_SetConfig+0x2d0>)
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d104      	bne.n	8009fba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009fb0:	f7fe f84c 	bl	800804c <HAL_RCC_GetPCLK2Freq>
 8009fb4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009fb8:	e003      	b.n	8009fc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009fba:	f7fe f833 	bl	8008024 <HAL_RCC_GetPCLK1Freq>
 8009fbe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fc6:	69db      	ldr	r3, [r3, #28]
 8009fc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009fcc:	f040 810c 	bne.w	800a1e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009fd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009fda:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009fde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009fe2:	4622      	mov	r2, r4
 8009fe4:	462b      	mov	r3, r5
 8009fe6:	1891      	adds	r1, r2, r2
 8009fe8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009fea:	415b      	adcs	r3, r3
 8009fec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009fee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009ff2:	4621      	mov	r1, r4
 8009ff4:	eb12 0801 	adds.w	r8, r2, r1
 8009ff8:	4629      	mov	r1, r5
 8009ffa:	eb43 0901 	adc.w	r9, r3, r1
 8009ffe:	f04f 0200 	mov.w	r2, #0
 800a002:	f04f 0300 	mov.w	r3, #0
 800a006:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a00a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a00e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a012:	4690      	mov	r8, r2
 800a014:	4699      	mov	r9, r3
 800a016:	4623      	mov	r3, r4
 800a018:	eb18 0303 	adds.w	r3, r8, r3
 800a01c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a020:	462b      	mov	r3, r5
 800a022:	eb49 0303 	adc.w	r3, r9, r3
 800a026:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a02a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a036:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a03a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a03e:	460b      	mov	r3, r1
 800a040:	18db      	adds	r3, r3, r3
 800a042:	653b      	str	r3, [r7, #80]	@ 0x50
 800a044:	4613      	mov	r3, r2
 800a046:	eb42 0303 	adc.w	r3, r2, r3
 800a04a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a04c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a050:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a054:	f7f6 fe08 	bl	8000c68 <__aeabi_uldivmod>
 800a058:	4602      	mov	r2, r0
 800a05a:	460b      	mov	r3, r1
 800a05c:	4b61      	ldr	r3, [pc, #388]	@ (800a1e4 <UART_SetConfig+0x2d4>)
 800a05e:	fba3 2302 	umull	r2, r3, r3, r2
 800a062:	095b      	lsrs	r3, r3, #5
 800a064:	011c      	lsls	r4, r3, #4
 800a066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a06a:	2200      	movs	r2, #0
 800a06c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a070:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a074:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a078:	4642      	mov	r2, r8
 800a07a:	464b      	mov	r3, r9
 800a07c:	1891      	adds	r1, r2, r2
 800a07e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a080:	415b      	adcs	r3, r3
 800a082:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a084:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a088:	4641      	mov	r1, r8
 800a08a:	eb12 0a01 	adds.w	sl, r2, r1
 800a08e:	4649      	mov	r1, r9
 800a090:	eb43 0b01 	adc.w	fp, r3, r1
 800a094:	f04f 0200 	mov.w	r2, #0
 800a098:	f04f 0300 	mov.w	r3, #0
 800a09c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a0a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a0a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a0a8:	4692      	mov	sl, r2
 800a0aa:	469b      	mov	fp, r3
 800a0ac:	4643      	mov	r3, r8
 800a0ae:	eb1a 0303 	adds.w	r3, sl, r3
 800a0b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a0b6:	464b      	mov	r3, r9
 800a0b8:	eb4b 0303 	adc.w	r3, fp, r3
 800a0bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a0c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a0cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a0d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	18db      	adds	r3, r3, r3
 800a0d8:	643b      	str	r3, [r7, #64]	@ 0x40
 800a0da:	4613      	mov	r3, r2
 800a0dc:	eb42 0303 	adc.w	r3, r2, r3
 800a0e0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a0e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a0ea:	f7f6 fdbd 	bl	8000c68 <__aeabi_uldivmod>
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	4611      	mov	r1, r2
 800a0f4:	4b3b      	ldr	r3, [pc, #236]	@ (800a1e4 <UART_SetConfig+0x2d4>)
 800a0f6:	fba3 2301 	umull	r2, r3, r3, r1
 800a0fa:	095b      	lsrs	r3, r3, #5
 800a0fc:	2264      	movs	r2, #100	@ 0x64
 800a0fe:	fb02 f303 	mul.w	r3, r2, r3
 800a102:	1acb      	subs	r3, r1, r3
 800a104:	00db      	lsls	r3, r3, #3
 800a106:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a10a:	4b36      	ldr	r3, [pc, #216]	@ (800a1e4 <UART_SetConfig+0x2d4>)
 800a10c:	fba3 2302 	umull	r2, r3, r3, r2
 800a110:	095b      	lsrs	r3, r3, #5
 800a112:	005b      	lsls	r3, r3, #1
 800a114:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a118:	441c      	add	r4, r3
 800a11a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a11e:	2200      	movs	r2, #0
 800a120:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a124:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a128:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a12c:	4642      	mov	r2, r8
 800a12e:	464b      	mov	r3, r9
 800a130:	1891      	adds	r1, r2, r2
 800a132:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a134:	415b      	adcs	r3, r3
 800a136:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a138:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a13c:	4641      	mov	r1, r8
 800a13e:	1851      	adds	r1, r2, r1
 800a140:	6339      	str	r1, [r7, #48]	@ 0x30
 800a142:	4649      	mov	r1, r9
 800a144:	414b      	adcs	r3, r1
 800a146:	637b      	str	r3, [r7, #52]	@ 0x34
 800a148:	f04f 0200 	mov.w	r2, #0
 800a14c:	f04f 0300 	mov.w	r3, #0
 800a150:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a154:	4659      	mov	r1, fp
 800a156:	00cb      	lsls	r3, r1, #3
 800a158:	4651      	mov	r1, sl
 800a15a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a15e:	4651      	mov	r1, sl
 800a160:	00ca      	lsls	r2, r1, #3
 800a162:	4610      	mov	r0, r2
 800a164:	4619      	mov	r1, r3
 800a166:	4603      	mov	r3, r0
 800a168:	4642      	mov	r2, r8
 800a16a:	189b      	adds	r3, r3, r2
 800a16c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a170:	464b      	mov	r3, r9
 800a172:	460a      	mov	r2, r1
 800a174:	eb42 0303 	adc.w	r3, r2, r3
 800a178:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a17c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a188:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a18c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a190:	460b      	mov	r3, r1
 800a192:	18db      	adds	r3, r3, r3
 800a194:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a196:	4613      	mov	r3, r2
 800a198:	eb42 0303 	adc.w	r3, r2, r3
 800a19c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a19e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a1a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a1a6:	f7f6 fd5f 	bl	8000c68 <__aeabi_uldivmod>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a1e4 <UART_SetConfig+0x2d4>)
 800a1b0:	fba3 1302 	umull	r1, r3, r3, r2
 800a1b4:	095b      	lsrs	r3, r3, #5
 800a1b6:	2164      	movs	r1, #100	@ 0x64
 800a1b8:	fb01 f303 	mul.w	r3, r1, r3
 800a1bc:	1ad3      	subs	r3, r2, r3
 800a1be:	00db      	lsls	r3, r3, #3
 800a1c0:	3332      	adds	r3, #50	@ 0x32
 800a1c2:	4a08      	ldr	r2, [pc, #32]	@ (800a1e4 <UART_SetConfig+0x2d4>)
 800a1c4:	fba2 2303 	umull	r2, r3, r2, r3
 800a1c8:	095b      	lsrs	r3, r3, #5
 800a1ca:	f003 0207 	and.w	r2, r3, #7
 800a1ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4422      	add	r2, r4
 800a1d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a1d8:	e106      	b.n	800a3e8 <UART_SetConfig+0x4d8>
 800a1da:	bf00      	nop
 800a1dc:	40011000 	.word	0x40011000
 800a1e0:	40011400 	.word	0x40011400
 800a1e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a1e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a1f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a1f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a1fa:	4642      	mov	r2, r8
 800a1fc:	464b      	mov	r3, r9
 800a1fe:	1891      	adds	r1, r2, r2
 800a200:	6239      	str	r1, [r7, #32]
 800a202:	415b      	adcs	r3, r3
 800a204:	627b      	str	r3, [r7, #36]	@ 0x24
 800a206:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a20a:	4641      	mov	r1, r8
 800a20c:	1854      	adds	r4, r2, r1
 800a20e:	4649      	mov	r1, r9
 800a210:	eb43 0501 	adc.w	r5, r3, r1
 800a214:	f04f 0200 	mov.w	r2, #0
 800a218:	f04f 0300 	mov.w	r3, #0
 800a21c:	00eb      	lsls	r3, r5, #3
 800a21e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a222:	00e2      	lsls	r2, r4, #3
 800a224:	4614      	mov	r4, r2
 800a226:	461d      	mov	r5, r3
 800a228:	4643      	mov	r3, r8
 800a22a:	18e3      	adds	r3, r4, r3
 800a22c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a230:	464b      	mov	r3, r9
 800a232:	eb45 0303 	adc.w	r3, r5, r3
 800a236:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a23a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	2200      	movs	r2, #0
 800a242:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a246:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a24a:	f04f 0200 	mov.w	r2, #0
 800a24e:	f04f 0300 	mov.w	r3, #0
 800a252:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a256:	4629      	mov	r1, r5
 800a258:	008b      	lsls	r3, r1, #2
 800a25a:	4621      	mov	r1, r4
 800a25c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a260:	4621      	mov	r1, r4
 800a262:	008a      	lsls	r2, r1, #2
 800a264:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a268:	f7f6 fcfe 	bl	8000c68 <__aeabi_uldivmod>
 800a26c:	4602      	mov	r2, r0
 800a26e:	460b      	mov	r3, r1
 800a270:	4b60      	ldr	r3, [pc, #384]	@ (800a3f4 <UART_SetConfig+0x4e4>)
 800a272:	fba3 2302 	umull	r2, r3, r3, r2
 800a276:	095b      	lsrs	r3, r3, #5
 800a278:	011c      	lsls	r4, r3, #4
 800a27a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a27e:	2200      	movs	r2, #0
 800a280:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a284:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a288:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a28c:	4642      	mov	r2, r8
 800a28e:	464b      	mov	r3, r9
 800a290:	1891      	adds	r1, r2, r2
 800a292:	61b9      	str	r1, [r7, #24]
 800a294:	415b      	adcs	r3, r3
 800a296:	61fb      	str	r3, [r7, #28]
 800a298:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a29c:	4641      	mov	r1, r8
 800a29e:	1851      	adds	r1, r2, r1
 800a2a0:	6139      	str	r1, [r7, #16]
 800a2a2:	4649      	mov	r1, r9
 800a2a4:	414b      	adcs	r3, r1
 800a2a6:	617b      	str	r3, [r7, #20]
 800a2a8:	f04f 0200 	mov.w	r2, #0
 800a2ac:	f04f 0300 	mov.w	r3, #0
 800a2b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a2b4:	4659      	mov	r1, fp
 800a2b6:	00cb      	lsls	r3, r1, #3
 800a2b8:	4651      	mov	r1, sl
 800a2ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a2be:	4651      	mov	r1, sl
 800a2c0:	00ca      	lsls	r2, r1, #3
 800a2c2:	4610      	mov	r0, r2
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	4642      	mov	r2, r8
 800a2ca:	189b      	adds	r3, r3, r2
 800a2cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a2d0:	464b      	mov	r3, r9
 800a2d2:	460a      	mov	r2, r1
 800a2d4:	eb42 0303 	adc.w	r3, r2, r3
 800a2d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a2dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a2e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a2e8:	f04f 0200 	mov.w	r2, #0
 800a2ec:	f04f 0300 	mov.w	r3, #0
 800a2f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a2f4:	4649      	mov	r1, r9
 800a2f6:	008b      	lsls	r3, r1, #2
 800a2f8:	4641      	mov	r1, r8
 800a2fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a2fe:	4641      	mov	r1, r8
 800a300:	008a      	lsls	r2, r1, #2
 800a302:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a306:	f7f6 fcaf 	bl	8000c68 <__aeabi_uldivmod>
 800a30a:	4602      	mov	r2, r0
 800a30c:	460b      	mov	r3, r1
 800a30e:	4611      	mov	r1, r2
 800a310:	4b38      	ldr	r3, [pc, #224]	@ (800a3f4 <UART_SetConfig+0x4e4>)
 800a312:	fba3 2301 	umull	r2, r3, r3, r1
 800a316:	095b      	lsrs	r3, r3, #5
 800a318:	2264      	movs	r2, #100	@ 0x64
 800a31a:	fb02 f303 	mul.w	r3, r2, r3
 800a31e:	1acb      	subs	r3, r1, r3
 800a320:	011b      	lsls	r3, r3, #4
 800a322:	3332      	adds	r3, #50	@ 0x32
 800a324:	4a33      	ldr	r2, [pc, #204]	@ (800a3f4 <UART_SetConfig+0x4e4>)
 800a326:	fba2 2303 	umull	r2, r3, r2, r3
 800a32a:	095b      	lsrs	r3, r3, #5
 800a32c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a330:	441c      	add	r4, r3
 800a332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a336:	2200      	movs	r2, #0
 800a338:	673b      	str	r3, [r7, #112]	@ 0x70
 800a33a:	677a      	str	r2, [r7, #116]	@ 0x74
 800a33c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a340:	4642      	mov	r2, r8
 800a342:	464b      	mov	r3, r9
 800a344:	1891      	adds	r1, r2, r2
 800a346:	60b9      	str	r1, [r7, #8]
 800a348:	415b      	adcs	r3, r3
 800a34a:	60fb      	str	r3, [r7, #12]
 800a34c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a350:	4641      	mov	r1, r8
 800a352:	1851      	adds	r1, r2, r1
 800a354:	6039      	str	r1, [r7, #0]
 800a356:	4649      	mov	r1, r9
 800a358:	414b      	adcs	r3, r1
 800a35a:	607b      	str	r3, [r7, #4]
 800a35c:	f04f 0200 	mov.w	r2, #0
 800a360:	f04f 0300 	mov.w	r3, #0
 800a364:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a368:	4659      	mov	r1, fp
 800a36a:	00cb      	lsls	r3, r1, #3
 800a36c:	4651      	mov	r1, sl
 800a36e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a372:	4651      	mov	r1, sl
 800a374:	00ca      	lsls	r2, r1, #3
 800a376:	4610      	mov	r0, r2
 800a378:	4619      	mov	r1, r3
 800a37a:	4603      	mov	r3, r0
 800a37c:	4642      	mov	r2, r8
 800a37e:	189b      	adds	r3, r3, r2
 800a380:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a382:	464b      	mov	r3, r9
 800a384:	460a      	mov	r2, r1
 800a386:	eb42 0303 	adc.w	r3, r2, r3
 800a38a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a38c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	2200      	movs	r2, #0
 800a394:	663b      	str	r3, [r7, #96]	@ 0x60
 800a396:	667a      	str	r2, [r7, #100]	@ 0x64
 800a398:	f04f 0200 	mov.w	r2, #0
 800a39c:	f04f 0300 	mov.w	r3, #0
 800a3a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a3a4:	4649      	mov	r1, r9
 800a3a6:	008b      	lsls	r3, r1, #2
 800a3a8:	4641      	mov	r1, r8
 800a3aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a3ae:	4641      	mov	r1, r8
 800a3b0:	008a      	lsls	r2, r1, #2
 800a3b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a3b6:	f7f6 fc57 	bl	8000c68 <__aeabi_uldivmod>
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	460b      	mov	r3, r1
 800a3be:	4b0d      	ldr	r3, [pc, #52]	@ (800a3f4 <UART_SetConfig+0x4e4>)
 800a3c0:	fba3 1302 	umull	r1, r3, r3, r2
 800a3c4:	095b      	lsrs	r3, r3, #5
 800a3c6:	2164      	movs	r1, #100	@ 0x64
 800a3c8:	fb01 f303 	mul.w	r3, r1, r3
 800a3cc:	1ad3      	subs	r3, r2, r3
 800a3ce:	011b      	lsls	r3, r3, #4
 800a3d0:	3332      	adds	r3, #50	@ 0x32
 800a3d2:	4a08      	ldr	r2, [pc, #32]	@ (800a3f4 <UART_SetConfig+0x4e4>)
 800a3d4:	fba2 2303 	umull	r2, r3, r2, r3
 800a3d8:	095b      	lsrs	r3, r3, #5
 800a3da:	f003 020f 	and.w	r2, r3, #15
 800a3de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4422      	add	r2, r4
 800a3e6:	609a      	str	r2, [r3, #8]
}
 800a3e8:	bf00      	nop
 800a3ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a3f4:	51eb851f 	.word	0x51eb851f

0800a3f8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b083      	sub	sp, #12
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d123      	bne.n	800a452 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a412:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a416:	683a      	ldr	r2, [r7, #0]
 800a418:	6851      	ldr	r1, [r2, #4]
 800a41a:	683a      	ldr	r2, [r7, #0]
 800a41c:	6892      	ldr	r2, [r2, #8]
 800a41e:	4311      	orrs	r1, r2
 800a420:	683a      	ldr	r2, [r7, #0]
 800a422:	68d2      	ldr	r2, [r2, #12]
 800a424:	4311      	orrs	r1, r2
 800a426:	683a      	ldr	r2, [r7, #0]
 800a428:	6912      	ldr	r2, [r2, #16]
 800a42a:	4311      	orrs	r1, r2
 800a42c:	683a      	ldr	r2, [r7, #0]
 800a42e:	6952      	ldr	r2, [r2, #20]
 800a430:	4311      	orrs	r1, r2
 800a432:	683a      	ldr	r2, [r7, #0]
 800a434:	6992      	ldr	r2, [r2, #24]
 800a436:	4311      	orrs	r1, r2
 800a438:	683a      	ldr	r2, [r7, #0]
 800a43a:	69d2      	ldr	r2, [r2, #28]
 800a43c:	4311      	orrs	r1, r2
 800a43e:	683a      	ldr	r2, [r7, #0]
 800a440:	6a12      	ldr	r2, [r2, #32]
 800a442:	4311      	orrs	r1, r2
 800a444:	683a      	ldr	r2, [r7, #0]
 800a446:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a448:	430a      	orrs	r2, r1
 800a44a:	431a      	orrs	r2, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	601a      	str	r2, [r3, #0]
 800a450:	e028      	b.n	800a4a4 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	69d9      	ldr	r1, [r3, #28]
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	6a1b      	ldr	r3, [r3, #32]
 800a462:	4319      	orrs	r1, r3
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a468:	430b      	orrs	r3, r1
 800a46a:	431a      	orrs	r2, r3
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a478:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a47c:	683a      	ldr	r2, [r7, #0]
 800a47e:	6851      	ldr	r1, [r2, #4]
 800a480:	683a      	ldr	r2, [r7, #0]
 800a482:	6892      	ldr	r2, [r2, #8]
 800a484:	4311      	orrs	r1, r2
 800a486:	683a      	ldr	r2, [r7, #0]
 800a488:	68d2      	ldr	r2, [r2, #12]
 800a48a:	4311      	orrs	r1, r2
 800a48c:	683a      	ldr	r2, [r7, #0]
 800a48e:	6912      	ldr	r2, [r2, #16]
 800a490:	4311      	orrs	r1, r2
 800a492:	683a      	ldr	r2, [r7, #0]
 800a494:	6952      	ldr	r2, [r2, #20]
 800a496:	4311      	orrs	r1, r2
 800a498:	683a      	ldr	r2, [r7, #0]
 800a49a:	6992      	ldr	r2, [r2, #24]
 800a49c:	430a      	orrs	r2, r1
 800a49e:	431a      	orrs	r2, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a4a4:	2300      	movs	r3, #0
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	370c      	adds	r7, #12
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr

0800a4b2 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a4b2:	b480      	push	{r7}
 800a4b4:	b085      	sub	sp, #20
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	60f8      	str	r0, [r7, #12]
 800a4ba:	60b9      	str	r1, [r7, #8]
 800a4bc:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d128      	bne.n	800a516 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	1e59      	subs	r1, r3, #1
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	3b01      	subs	r3, #1
 800a4d8:	011b      	lsls	r3, r3, #4
 800a4da:	4319      	orrs	r1, r3
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	689b      	ldr	r3, [r3, #8]
 800a4e0:	3b01      	subs	r3, #1
 800a4e2:	021b      	lsls	r3, r3, #8
 800a4e4:	4319      	orrs	r1, r3
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	3b01      	subs	r3, #1
 800a4ec:	031b      	lsls	r3, r3, #12
 800a4ee:	4319      	orrs	r1, r3
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	691b      	ldr	r3, [r3, #16]
 800a4f4:	3b01      	subs	r3, #1
 800a4f6:	041b      	lsls	r3, r3, #16
 800a4f8:	4319      	orrs	r1, r3
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	695b      	ldr	r3, [r3, #20]
 800a4fe:	3b01      	subs	r3, #1
 800a500:	051b      	lsls	r3, r3, #20
 800a502:	4319      	orrs	r1, r3
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	699b      	ldr	r3, [r3, #24]
 800a508:	3b01      	subs	r3, #1
 800a50a:	061b      	lsls	r3, r3, #24
 800a50c:	430b      	orrs	r3, r1
 800a50e:	431a      	orrs	r2, r3
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	609a      	str	r2, [r3, #8]
 800a514:	e02f      	b.n	800a576 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	689b      	ldr	r3, [r3, #8]
 800a51a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a51e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a522:	68ba      	ldr	r2, [r7, #8]
 800a524:	68d2      	ldr	r2, [r2, #12]
 800a526:	3a01      	subs	r2, #1
 800a528:	0311      	lsls	r1, r2, #12
 800a52a:	68ba      	ldr	r2, [r7, #8]
 800a52c:	6952      	ldr	r2, [r2, #20]
 800a52e:	3a01      	subs	r2, #1
 800a530:	0512      	lsls	r2, r2, #20
 800a532:	430a      	orrs	r2, r1
 800a534:	431a      	orrs	r2, r3
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	1e59      	subs	r1, r3, #1
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	3b01      	subs	r3, #1
 800a54e:	011b      	lsls	r3, r3, #4
 800a550:	4319      	orrs	r1, r3
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	689b      	ldr	r3, [r3, #8]
 800a556:	3b01      	subs	r3, #1
 800a558:	021b      	lsls	r3, r3, #8
 800a55a:	4319      	orrs	r1, r3
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	691b      	ldr	r3, [r3, #16]
 800a560:	3b01      	subs	r3, #1
 800a562:	041b      	lsls	r3, r3, #16
 800a564:	4319      	orrs	r1, r3
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	699b      	ldr	r3, [r3, #24]
 800a56a:	3b01      	subs	r3, #1
 800a56c:	061b      	lsls	r3, r3, #24
 800a56e:	430b      	orrs	r3, r1
 800a570:	431a      	orrs	r2, r3
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800a576:	2300      	movs	r3, #0
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3714      	adds	r7, #20
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a584:	b084      	sub	sp, #16
 800a586:	b580      	push	{r7, lr}
 800a588:	b084      	sub	sp, #16
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
 800a58e:	f107 001c 	add.w	r0, r7, #28
 800a592:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a596:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d123      	bne.n	800a5e6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	68db      	ldr	r3, [r3, #12]
 800a5ae:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a5b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	68db      	ldr	r3, [r3, #12]
 800a5be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a5c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	d105      	bne.n	800a5da <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	68db      	ldr	r3, [r3, #12]
 800a5d2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f000 f9dc 	bl	800a998 <USB_CoreReset>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	73fb      	strb	r3, [r7, #15]
 800a5e4:	e01b      	b.n	800a61e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	68db      	ldr	r3, [r3, #12]
 800a5ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 f9d0 	bl	800a998 <USB_CoreReset>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a5fc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a600:	2b00      	cmp	r3, #0
 800a602:	d106      	bne.n	800a612 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a608:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	639a      	str	r2, [r3, #56]	@ 0x38
 800a610:	e005      	b.n	800a61e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a616:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a61e:	7fbb      	ldrb	r3, [r7, #30]
 800a620:	2b01      	cmp	r3, #1
 800a622:	d10b      	bne.n	800a63c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	689b      	ldr	r3, [r3, #8]
 800a628:	f043 0206 	orr.w	r2, r3, #6
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	689b      	ldr	r3, [r3, #8]
 800a634:	f043 0220 	orr.w	r2, r3, #32
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a63c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3710      	adds	r7, #16
 800a642:	46bd      	mov	sp, r7
 800a644:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a648:	b004      	add	sp, #16
 800a64a:	4770      	bx	lr

0800a64c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	f043 0201 	orr.w	r2, r3, #1
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a660:	2300      	movs	r3, #0
}
 800a662:	4618      	mov	r0, r3
 800a664:	370c      	adds	r7, #12
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr

0800a66e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a66e:	b480      	push	{r7}
 800a670:	b083      	sub	sp, #12
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	689b      	ldr	r3, [r3, #8]
 800a67a:	f023 0201 	bic.w	r2, r3, #1
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a682:	2300      	movs	r3, #0
}
 800a684:	4618      	mov	r0, r3
 800a686:	370c      	adds	r7, #12
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr

0800a690 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b084      	sub	sp, #16
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	460b      	mov	r3, r1
 800a69a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a69c:	2300      	movs	r3, #0
 800a69e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a6ac:	78fb      	ldrb	r3, [r7, #3]
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	d115      	bne.n	800a6de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a6be:	200a      	movs	r0, #10
 800a6c0:	f7f9 f9a0 	bl	8003a04 <HAL_Delay>
      ms += 10U;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	330a      	adds	r3, #10
 800a6c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 f956 	bl	800a97c <USB_GetMode>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	d01e      	beq.n	800a714 <USB_SetCurrentMode+0x84>
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2bc7      	cmp	r3, #199	@ 0xc7
 800a6da:	d9f0      	bls.n	800a6be <USB_SetCurrentMode+0x2e>
 800a6dc:	e01a      	b.n	800a714 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a6de:	78fb      	ldrb	r3, [r7, #3]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d115      	bne.n	800a710 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a6f0:	200a      	movs	r0, #10
 800a6f2:	f7f9 f987 	bl	8003a04 <HAL_Delay>
      ms += 10U;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	330a      	adds	r3, #10
 800a6fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 f93d 	bl	800a97c <USB_GetMode>
 800a702:	4603      	mov	r3, r0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d005      	beq.n	800a714 <USB_SetCurrentMode+0x84>
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2bc7      	cmp	r3, #199	@ 0xc7
 800a70c:	d9f0      	bls.n	800a6f0 <USB_SetCurrentMode+0x60>
 800a70e:	e001      	b.n	800a714 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a710:	2301      	movs	r3, #1
 800a712:	e005      	b.n	800a720 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2bc8      	cmp	r3, #200	@ 0xc8
 800a718:	d101      	bne.n	800a71e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a71a:	2301      	movs	r3, #1
 800a71c:	e000      	b.n	800a720 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a71e:	2300      	movs	r3, #0
}
 800a720:	4618      	mov	r0, r3
 800a722:	3710      	adds	r7, #16
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a728:	b480      	push	{r7}
 800a72a:	b085      	sub	sp, #20
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a732:	2300      	movs	r3, #0
 800a734:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	3301      	adds	r3, #1
 800a73a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a742:	d901      	bls.n	800a748 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a744:	2303      	movs	r3, #3
 800a746:	e01b      	b.n	800a780 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	691b      	ldr	r3, [r3, #16]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	daf2      	bge.n	800a736 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a750:	2300      	movs	r3, #0
 800a752:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	019b      	lsls	r3, r3, #6
 800a758:	f043 0220 	orr.w	r2, r3, #32
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	3301      	adds	r3, #1
 800a764:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a76c:	d901      	bls.n	800a772 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a76e:	2303      	movs	r3, #3
 800a770:	e006      	b.n	800a780 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	691b      	ldr	r3, [r3, #16]
 800a776:	f003 0320 	and.w	r3, r3, #32
 800a77a:	2b20      	cmp	r3, #32
 800a77c:	d0f0      	beq.n	800a760 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a77e:	2300      	movs	r3, #0
}
 800a780:	4618      	mov	r0, r3
 800a782:	3714      	adds	r7, #20
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b085      	sub	sp, #20
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a794:	2300      	movs	r3, #0
 800a796:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	3301      	adds	r3, #1
 800a79c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a7a4:	d901      	bls.n	800a7aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a7a6:	2303      	movs	r3, #3
 800a7a8:	e018      	b.n	800a7dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	691b      	ldr	r3, [r3, #16]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	daf2      	bge.n	800a798 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2210      	movs	r2, #16
 800a7ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	3301      	adds	r3, #1
 800a7c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a7c8:	d901      	bls.n	800a7ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	e006      	b.n	800a7dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	691b      	ldr	r3, [r3, #16]
 800a7d2:	f003 0310 	and.w	r3, r3, #16
 800a7d6:	2b10      	cmp	r3, #16
 800a7d8:	d0f0      	beq.n	800a7bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a7da:	2300      	movs	r3, #0
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3714      	adds	r7, #20
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr

0800a7e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b089      	sub	sp, #36	@ 0x24
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	60f8      	str	r0, [r7, #12]
 800a7f0:	60b9      	str	r1, [r7, #8]
 800a7f2:	4611      	mov	r1, r2
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	71fb      	strb	r3, [r7, #7]
 800a7fa:	4613      	mov	r3, r2
 800a7fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a806:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d123      	bne.n	800a856 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a80e:	88bb      	ldrh	r3, [r7, #4]
 800a810:	3303      	adds	r3, #3
 800a812:	089b      	lsrs	r3, r3, #2
 800a814:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a816:	2300      	movs	r3, #0
 800a818:	61bb      	str	r3, [r7, #24]
 800a81a:	e018      	b.n	800a84e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a81c:	79fb      	ldrb	r3, [r7, #7]
 800a81e:	031a      	lsls	r2, r3, #12
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	4413      	add	r3, r2
 800a824:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a828:	461a      	mov	r2, r3
 800a82a:	69fb      	ldr	r3, [r7, #28]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a830:	69fb      	ldr	r3, [r7, #28]
 800a832:	3301      	adds	r3, #1
 800a834:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a836:	69fb      	ldr	r3, [r7, #28]
 800a838:	3301      	adds	r3, #1
 800a83a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a83c:	69fb      	ldr	r3, [r7, #28]
 800a83e:	3301      	adds	r3, #1
 800a840:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a842:	69fb      	ldr	r3, [r7, #28]
 800a844:	3301      	adds	r3, #1
 800a846:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a848:	69bb      	ldr	r3, [r7, #24]
 800a84a:	3301      	adds	r3, #1
 800a84c:	61bb      	str	r3, [r7, #24]
 800a84e:	69ba      	ldr	r2, [r7, #24]
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	429a      	cmp	r2, r3
 800a854:	d3e2      	bcc.n	800a81c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a856:	2300      	movs	r3, #0
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3724      	adds	r7, #36	@ 0x24
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a864:	b480      	push	{r7}
 800a866:	b08b      	sub	sp, #44	@ 0x2c
 800a868:	af00      	add	r7, sp, #0
 800a86a:	60f8      	str	r0, [r7, #12]
 800a86c:	60b9      	str	r1, [r7, #8]
 800a86e:	4613      	mov	r3, r2
 800a870:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a87a:	88fb      	ldrh	r3, [r7, #6]
 800a87c:	089b      	lsrs	r3, r3, #2
 800a87e:	b29b      	uxth	r3, r3
 800a880:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a882:	88fb      	ldrh	r3, [r7, #6]
 800a884:	f003 0303 	and.w	r3, r3, #3
 800a888:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a88a:	2300      	movs	r3, #0
 800a88c:	623b      	str	r3, [r7, #32]
 800a88e:	e014      	b.n	800a8ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a890:	69bb      	ldr	r3, [r7, #24]
 800a892:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a89a:	601a      	str	r2, [r3, #0]
    pDest++;
 800a89c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a89e:	3301      	adds	r3, #1
 800a8a0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a8ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a8b4:	6a3b      	ldr	r3, [r7, #32]
 800a8b6:	3301      	adds	r3, #1
 800a8b8:	623b      	str	r3, [r7, #32]
 800a8ba:	6a3a      	ldr	r2, [r7, #32]
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d3e6      	bcc.n	800a890 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a8c2:	8bfb      	ldrh	r3, [r7, #30]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d01e      	beq.n	800a906 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a8cc:	69bb      	ldr	r3, [r7, #24]
 800a8ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	f107 0310 	add.w	r3, r7, #16
 800a8d8:	6812      	ldr	r2, [r2, #0]
 800a8da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a8dc:	693a      	ldr	r2, [r7, #16]
 800a8de:	6a3b      	ldr	r3, [r7, #32]
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	00db      	lsls	r3, r3, #3
 800a8e4:	fa22 f303 	lsr.w	r3, r2, r3
 800a8e8:	b2da      	uxtb	r2, r3
 800a8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ec:	701a      	strb	r2, [r3, #0]
      i++;
 800a8ee:	6a3b      	ldr	r3, [r7, #32]
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	623b      	str	r3, [r7, #32]
      pDest++;
 800a8f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8f6:	3301      	adds	r3, #1
 800a8f8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a8fa:	8bfb      	ldrh	r3, [r7, #30]
 800a8fc:	3b01      	subs	r3, #1
 800a8fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a900:	8bfb      	ldrh	r3, [r7, #30]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d1ea      	bne.n	800a8dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a908:	4618      	mov	r0, r3
 800a90a:	372c      	adds	r7, #44	@ 0x2c
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a914:	b480      	push	{r7}
 800a916:	b085      	sub	sp, #20
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	695b      	ldr	r3, [r3, #20]
 800a920:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	699b      	ldr	r3, [r3, #24]
 800a926:	68fa      	ldr	r2, [r7, #12]
 800a928:	4013      	ands	r3, r2
 800a92a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a92c:	68fb      	ldr	r3, [r7, #12]
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3714      	adds	r7, #20
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr

0800a93a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800a93a:	b480      	push	{r7}
 800a93c:	b085      	sub	sp, #20
 800a93e:	af00      	add	r7, sp, #0
 800a940:	6078      	str	r0, [r7, #4]
 800a942:	460b      	mov	r3, r1
 800a944:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800a94a:	78fb      	ldrb	r3, [r7, #3]
 800a94c:	015a      	lsls	r2, r3, #5
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	4413      	add	r3, r2
 800a952:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a956:	689b      	ldr	r3, [r3, #8]
 800a958:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800a95a:	78fb      	ldrb	r3, [r7, #3]
 800a95c:	015a      	lsls	r2, r3, #5
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	4413      	add	r3, r2
 800a962:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a966:	68db      	ldr	r3, [r3, #12]
 800a968:	68ba      	ldr	r2, [r7, #8]
 800a96a:	4013      	ands	r3, r2
 800a96c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a96e:	68bb      	ldr	r3, [r7, #8]
}
 800a970:	4618      	mov	r0, r3
 800a972:	3714      	adds	r7, #20
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr

0800a97c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b083      	sub	sp, #12
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	695b      	ldr	r3, [r3, #20]
 800a988:	f003 0301 	and.w	r3, r3, #1
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	370c      	adds	r7, #12
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr

0800a998 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a998:	b480      	push	{r7}
 800a99a:	b085      	sub	sp, #20
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a9b0:	d901      	bls.n	800a9b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a9b2:	2303      	movs	r3, #3
 800a9b4:	e01b      	b.n	800a9ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	daf2      	bge.n	800a9a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	691b      	ldr	r3, [r3, #16]
 800a9c6:	f043 0201 	orr.w	r2, r3, #1
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	3301      	adds	r3, #1
 800a9d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a9da:	d901      	bls.n	800a9e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a9dc:	2303      	movs	r3, #3
 800a9de:	e006      	b.n	800a9ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	691b      	ldr	r3, [r3, #16]
 800a9e4:	f003 0301 	and.w	r3, r3, #1
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d0f0      	beq.n	800a9ce <USB_CoreReset+0x36>

  return HAL_OK;
 800a9ec:	2300      	movs	r3, #0
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3714      	adds	r7, #20
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr
	...

0800a9fc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a9fc:	b084      	sub	sp, #16
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b086      	sub	sp, #24
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
 800aa06:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800aa0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	2300      	movs	r3, #0
 800aa20:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa26:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa32:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa3e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	68db      	ldr	r3, [r3, #12]
 800aa4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d119      	bne.n	800aa86 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800aa52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	d10a      	bne.n	800aa70 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	68fa      	ldr	r2, [r7, #12]
 800aa64:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aa68:	f043 0304 	orr.w	r3, r3, #4
 800aa6c:	6013      	str	r3, [r2, #0]
 800aa6e:	e014      	b.n	800aa9a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	68fa      	ldr	r2, [r7, #12]
 800aa7a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aa7e:	f023 0304 	bic.w	r3, r3, #4
 800aa82:	6013      	str	r3, [r2, #0]
 800aa84:	e009      	b.n	800aa9a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	68fa      	ldr	r2, [r7, #12]
 800aa90:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aa94:	f023 0304 	bic.w	r3, r3, #4
 800aa98:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800aa9a:	2110      	movs	r1, #16
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f7ff fe43 	bl	800a728 <USB_FlushTxFifo>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d001      	beq.n	800aaac <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f7ff fe6d 	bl	800a78c <USB_FlushRxFifo>
 800aab2:	4603      	mov	r3, r0
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d001      	beq.n	800aabc <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800aab8:	2301      	movs	r3, #1
 800aaba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800aabc:	2300      	movs	r3, #0
 800aabe:	613b      	str	r3, [r7, #16]
 800aac0:	e015      	b.n	800aaee <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	015a      	lsls	r2, r3, #5
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	4413      	add	r3, r2
 800aaca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aace:	461a      	mov	r2, r3
 800aad0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aad4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	015a      	lsls	r2, r3, #5
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	4413      	add	r3, r2
 800aade:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aae2:	461a      	mov	r2, r3
 800aae4:	2300      	movs	r3, #0
 800aae6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	3301      	adds	r3, #1
 800aaec:	613b      	str	r3, [r7, #16]
 800aaee:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d3e3      	bcc.n	800aac2 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2200      	movs	r2, #0
 800aafe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ab06:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4a18      	ldr	r2, [pc, #96]	@ (800ab6c <USB_HostInit+0x170>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d10b      	bne.n	800ab28 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ab16:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	4a15      	ldr	r2, [pc, #84]	@ (800ab70 <USB_HostInit+0x174>)
 800ab1c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	4a14      	ldr	r2, [pc, #80]	@ (800ab74 <USB_HostInit+0x178>)
 800ab22:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800ab26:	e009      	b.n	800ab3c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2280      	movs	r2, #128	@ 0x80
 800ab2c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	4a11      	ldr	r2, [pc, #68]	@ (800ab78 <USB_HostInit+0x17c>)
 800ab32:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	4a11      	ldr	r2, [pc, #68]	@ (800ab7c <USB_HostInit+0x180>)
 800ab38:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ab3c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d105      	bne.n	800ab50 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	699b      	ldr	r3, [r3, #24]
 800ab48:	f043 0210 	orr.w	r2, r3, #16
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	699a      	ldr	r2, [r3, #24]
 800ab54:	4b0a      	ldr	r3, [pc, #40]	@ (800ab80 <USB_HostInit+0x184>)
 800ab56:	4313      	orrs	r3, r2
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800ab5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3718      	adds	r7, #24
 800ab62:	46bd      	mov	sp, r7
 800ab64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab68:	b004      	add	sp, #16
 800ab6a:	4770      	bx	lr
 800ab6c:	40040000 	.word	0x40040000
 800ab70:	01000200 	.word	0x01000200
 800ab74:	00e00300 	.word	0x00e00300
 800ab78:	00600080 	.word	0x00600080
 800ab7c:	004000e0 	.word	0x004000e0
 800ab80:	a3200008 	.word	0xa3200008

0800ab84 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b085      	sub	sp, #20
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	460b      	mov	r3, r1
 800ab8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aba2:	f023 0303 	bic.w	r3, r3, #3
 800aba6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800abae:	681a      	ldr	r2, [r3, #0]
 800abb0:	78fb      	ldrb	r3, [r7, #3]
 800abb2:	f003 0303 	and.w	r3, r3, #3
 800abb6:	68f9      	ldr	r1, [r7, #12]
 800abb8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800abbc:	4313      	orrs	r3, r2
 800abbe:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800abc0:	78fb      	ldrb	r3, [r7, #3]
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	d107      	bne.n	800abd6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800abcc:	461a      	mov	r2, r3
 800abce:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800abd2:	6053      	str	r3, [r2, #4]
 800abd4:	e00c      	b.n	800abf0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800abd6:	78fb      	ldrb	r3, [r7, #3]
 800abd8:	2b02      	cmp	r3, #2
 800abda:	d107      	bne.n	800abec <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800abe2:	461a      	mov	r2, r3
 800abe4:	f241 7370 	movw	r3, #6000	@ 0x1770
 800abe8:	6053      	str	r3, [r2, #4]
 800abea:	e001      	b.n	800abf0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800abec:	2301      	movs	r3, #1
 800abee:	e000      	b.n	800abf2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800abf0:	2300      	movs	r3, #0
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3714      	adds	r7, #20
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr

0800abfe <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800abfe:	b580      	push	{r7, lr}
 800ac00:	b084      	sub	sp, #16
 800ac02:	af00      	add	r7, sp, #0
 800ac04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800ac1e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	68fa      	ldr	r2, [r7, #12]
 800ac24:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800ac28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ac2c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800ac2e:	2064      	movs	r0, #100	@ 0x64
 800ac30:	f7f8 fee8 	bl	8003a04 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	68fa      	ldr	r2, [r7, #12]
 800ac38:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800ac3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ac40:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800ac42:	200a      	movs	r0, #10
 800ac44:	f7f8 fede 	bl	8003a04 <HAL_Delay>

  return HAL_OK;
 800ac48:	2300      	movs	r3, #0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3710      	adds	r7, #16
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800ac52:	b480      	push	{r7}
 800ac54:	b085      	sub	sp, #20
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
 800ac5a:	460b      	mov	r3, r1
 800ac5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ac62:	2300      	movs	r3, #0
 800ac64:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800ac76:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d109      	bne.n	800ac96 <USB_DriveVbus+0x44>
 800ac82:	78fb      	ldrb	r3, [r7, #3]
 800ac84:	2b01      	cmp	r3, #1
 800ac86:	d106      	bne.n	800ac96 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	68fa      	ldr	r2, [r7, #12]
 800ac8c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800ac90:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ac94:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ac9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aca0:	d109      	bne.n	800acb6 <USB_DriveVbus+0x64>
 800aca2:	78fb      	ldrb	r3, [r7, #3]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d106      	bne.n	800acb6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	68fa      	ldr	r2, [r7, #12]
 800acac:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800acb0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800acb4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800acb6:	2300      	movs	r3, #0
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3714      	adds	r7, #20
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b085      	sub	sp, #20
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800acd0:	2300      	movs	r3, #0
 800acd2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	0c5b      	lsrs	r3, r3, #17
 800ace2:	f003 0303 	and.w	r3, r3, #3
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3714      	adds	r7, #20
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr

0800acf2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800acf2:	b480      	push	{r7}
 800acf4:	b085      	sub	sp, #20
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ad04:	689b      	ldr	r3, [r3, #8]
 800ad06:	b29b      	uxth	r3, r3
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3714      	adds	r7, #20
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b088      	sub	sp, #32
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	4608      	mov	r0, r1
 800ad1e:	4611      	mov	r1, r2
 800ad20:	461a      	mov	r2, r3
 800ad22:	4603      	mov	r3, r0
 800ad24:	70fb      	strb	r3, [r7, #3]
 800ad26:	460b      	mov	r3, r1
 800ad28:	70bb      	strb	r3, [r7, #2]
 800ad2a:	4613      	mov	r3, r2
 800ad2c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800ad36:	78fb      	ldrb	r3, [r7, #3]
 800ad38:	015a      	lsls	r2, r3, #5
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	4413      	add	r3, r2
 800ad3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad42:	461a      	mov	r2, r3
 800ad44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ad48:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800ad4a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ad4e:	2b03      	cmp	r3, #3
 800ad50:	d87c      	bhi.n	800ae4c <USB_HC_Init+0x138>
 800ad52:	a201      	add	r2, pc, #4	@ (adr r2, 800ad58 <USB_HC_Init+0x44>)
 800ad54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad58:	0800ad69 	.word	0x0800ad69
 800ad5c:	0800ae0f 	.word	0x0800ae0f
 800ad60:	0800ad69 	.word	0x0800ad69
 800ad64:	0800add1 	.word	0x0800add1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ad68:	78fb      	ldrb	r3, [r7, #3]
 800ad6a:	015a      	lsls	r2, r3, #5
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	4413      	add	r3, r2
 800ad70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad74:	461a      	mov	r2, r3
 800ad76:	f240 439d 	movw	r3, #1181	@ 0x49d
 800ad7a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800ad7c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	da10      	bge.n	800ada6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ad84:	78fb      	ldrb	r3, [r7, #3]
 800ad86:	015a      	lsls	r2, r3, #5
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	4413      	add	r3, r2
 800ad8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad90:	68db      	ldr	r3, [r3, #12]
 800ad92:	78fa      	ldrb	r2, [r7, #3]
 800ad94:	0151      	lsls	r1, r2, #5
 800ad96:	693a      	ldr	r2, [r7, #16]
 800ad98:	440a      	add	r2, r1
 800ad9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ad9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ada2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800ada4:	e055      	b.n	800ae52 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	4a6f      	ldr	r2, [pc, #444]	@ (800af68 <USB_HC_Init+0x254>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d151      	bne.n	800ae52 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800adae:	78fb      	ldrb	r3, [r7, #3]
 800adb0:	015a      	lsls	r2, r3, #5
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	4413      	add	r3, r2
 800adb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800adba:	68db      	ldr	r3, [r3, #12]
 800adbc:	78fa      	ldrb	r2, [r7, #3]
 800adbe:	0151      	lsls	r1, r2, #5
 800adc0:	693a      	ldr	r2, [r7, #16]
 800adc2:	440a      	add	r2, r1
 800adc4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800adc8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800adcc:	60d3      	str	r3, [r2, #12]
      break;
 800adce:	e040      	b.n	800ae52 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800add0:	78fb      	ldrb	r3, [r7, #3]
 800add2:	015a      	lsls	r2, r3, #5
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	4413      	add	r3, r2
 800add8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800addc:	461a      	mov	r2, r3
 800adde:	f240 639d 	movw	r3, #1693	@ 0x69d
 800ade2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ade4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	da34      	bge.n	800ae56 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800adec:	78fb      	ldrb	r3, [r7, #3]
 800adee:	015a      	lsls	r2, r3, #5
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	4413      	add	r3, r2
 800adf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800adf8:	68db      	ldr	r3, [r3, #12]
 800adfa:	78fa      	ldrb	r2, [r7, #3]
 800adfc:	0151      	lsls	r1, r2, #5
 800adfe:	693a      	ldr	r2, [r7, #16]
 800ae00:	440a      	add	r2, r1
 800ae02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ae06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ae0a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800ae0c:	e023      	b.n	800ae56 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ae0e:	78fb      	ldrb	r3, [r7, #3]
 800ae10:	015a      	lsls	r2, r3, #5
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	4413      	add	r3, r2
 800ae16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	f240 2325 	movw	r3, #549	@ 0x225
 800ae20:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ae22:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	da17      	bge.n	800ae5a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800ae2a:	78fb      	ldrb	r3, [r7, #3]
 800ae2c:	015a      	lsls	r2, r3, #5
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	4413      	add	r3, r2
 800ae32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae36:	68db      	ldr	r3, [r3, #12]
 800ae38:	78fa      	ldrb	r2, [r7, #3]
 800ae3a:	0151      	lsls	r1, r2, #5
 800ae3c:	693a      	ldr	r2, [r7, #16]
 800ae3e:	440a      	add	r2, r1
 800ae40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ae44:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800ae48:	60d3      	str	r3, [r2, #12]
      }
      break;
 800ae4a:	e006      	b.n	800ae5a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	77fb      	strb	r3, [r7, #31]
      break;
 800ae50:	e004      	b.n	800ae5c <USB_HC_Init+0x148>
      break;
 800ae52:	bf00      	nop
 800ae54:	e002      	b.n	800ae5c <USB_HC_Init+0x148>
      break;
 800ae56:	bf00      	nop
 800ae58:	e000      	b.n	800ae5c <USB_HC_Init+0x148>
      break;
 800ae5a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800ae5c:	78fb      	ldrb	r3, [r7, #3]
 800ae5e:	015a      	lsls	r2, r3, #5
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	4413      	add	r3, r2
 800ae64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae68:	461a      	mov	r2, r3
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800ae6e:	78fb      	ldrb	r3, [r7, #3]
 800ae70:	015a      	lsls	r2, r3, #5
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	4413      	add	r3, r2
 800ae76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae7a:	68db      	ldr	r3, [r3, #12]
 800ae7c:	78fa      	ldrb	r2, [r7, #3]
 800ae7e:	0151      	lsls	r1, r2, #5
 800ae80:	693a      	ldr	r2, [r7, #16]
 800ae82:	440a      	add	r2, r1
 800ae84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ae88:	f043 0302 	orr.w	r3, r3, #2
 800ae8c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ae94:	699a      	ldr	r2, [r3, #24]
 800ae96:	78fb      	ldrb	r3, [r7, #3]
 800ae98:	f003 030f 	and.w	r3, r3, #15
 800ae9c:	2101      	movs	r1, #1
 800ae9e:	fa01 f303 	lsl.w	r3, r1, r3
 800aea2:	6939      	ldr	r1, [r7, #16]
 800aea4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	699b      	ldr	r3, [r3, #24]
 800aeb0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800aeb8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	da03      	bge.n	800aec8 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800aec0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aec4:	61bb      	str	r3, [r7, #24]
 800aec6:	e001      	b.n	800aecc <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800aec8:	2300      	movs	r3, #0
 800aeca:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f7ff fef9 	bl	800acc4 <USB_GetHostSpeed>
 800aed2:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800aed4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800aed8:	2b02      	cmp	r3, #2
 800aeda:	d106      	bne.n	800aeea <USB_HC_Init+0x1d6>
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2b02      	cmp	r3, #2
 800aee0:	d003      	beq.n	800aeea <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800aee2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800aee6:	617b      	str	r3, [r7, #20]
 800aee8:	e001      	b.n	800aeee <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800aeea:	2300      	movs	r3, #0
 800aeec:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800aeee:	787b      	ldrb	r3, [r7, #1]
 800aef0:	059b      	lsls	r3, r3, #22
 800aef2:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800aef6:	78bb      	ldrb	r3, [r7, #2]
 800aef8:	02db      	lsls	r3, r3, #11
 800aefa:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800aefe:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800af00:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800af04:	049b      	lsls	r3, r3, #18
 800af06:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800af0a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800af0c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800af0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800af12:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800af14:	69bb      	ldr	r3, [r7, #24]
 800af16:	431a      	orrs	r2, r3
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800af1c:	78fa      	ldrb	r2, [r7, #3]
 800af1e:	0151      	lsls	r1, r2, #5
 800af20:	693a      	ldr	r2, [r7, #16]
 800af22:	440a      	add	r2, r1
 800af24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800af28:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800af2c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800af2e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800af32:	2b03      	cmp	r3, #3
 800af34:	d003      	beq.n	800af3e <USB_HC_Init+0x22a>
 800af36:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	d10f      	bne.n	800af5e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800af3e:	78fb      	ldrb	r3, [r7, #3]
 800af40:	015a      	lsls	r2, r3, #5
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	4413      	add	r3, r2
 800af46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	78fa      	ldrb	r2, [r7, #3]
 800af4e:	0151      	lsls	r1, r2, #5
 800af50:	693a      	ldr	r2, [r7, #16]
 800af52:	440a      	add	r2, r1
 800af54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800af58:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800af5c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800af5e:	7ffb      	ldrb	r3, [r7, #31]
}
 800af60:	4618      	mov	r0, r3
 800af62:	3720      	adds	r7, #32
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}
 800af68:	40040000 	.word	0x40040000

0800af6c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b08c      	sub	sp, #48	@ 0x30
 800af70:	af02      	add	r7, sp, #8
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	60b9      	str	r1, [r7, #8]
 800af76:	4613      	mov	r3, r2
 800af78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	785b      	ldrb	r3, [r3, #1]
 800af82:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800af84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800af88:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	4a5d      	ldr	r2, [pc, #372]	@ (800b104 <USB_HC_StartXfer+0x198>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d12f      	bne.n	800aff2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800af92:	79fb      	ldrb	r3, [r7, #7]
 800af94:	2b01      	cmp	r3, #1
 800af96:	d11c      	bne.n	800afd2 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	7c9b      	ldrb	r3, [r3, #18]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d003      	beq.n	800afa8 <USB_HC_StartXfer+0x3c>
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	7c9b      	ldrb	r3, [r3, #18]
 800afa4:	2b02      	cmp	r3, #2
 800afa6:	d124      	bne.n	800aff2 <USB_HC_StartXfer+0x86>
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	799b      	ldrb	r3, [r3, #6]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d120      	bne.n	800aff2 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800afb0:	69fb      	ldr	r3, [r7, #28]
 800afb2:	015a      	lsls	r2, r3, #5
 800afb4:	6a3b      	ldr	r3, [r7, #32]
 800afb6:	4413      	add	r3, r2
 800afb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800afbc:	68db      	ldr	r3, [r3, #12]
 800afbe:	69fa      	ldr	r2, [r7, #28]
 800afc0:	0151      	lsls	r1, r2, #5
 800afc2:	6a3a      	ldr	r2, [r7, #32]
 800afc4:	440a      	add	r2, r1
 800afc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800afca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800afce:	60d3      	str	r3, [r2, #12]
 800afd0:	e00f      	b.n	800aff2 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	791b      	ldrb	r3, [r3, #4]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d10b      	bne.n	800aff2 <USB_HC_StartXfer+0x86>
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	795b      	ldrb	r3, [r3, #5]
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d107      	bne.n	800aff2 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	785b      	ldrb	r3, [r3, #1]
 800afe6:	4619      	mov	r1, r3
 800afe8:	68f8      	ldr	r0, [r7, #12]
 800afea:	f000 fb6b 	bl	800b6c4 <USB_DoPing>
        return HAL_OK;
 800afee:	2300      	movs	r3, #0
 800aff0:	e232      	b.n	800b458 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	799b      	ldrb	r3, [r3, #6]
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d158      	bne.n	800b0ac <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800affa:	2301      	movs	r3, #1
 800affc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	78db      	ldrb	r3, [r3, #3]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d007      	beq.n	800b016 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b006:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b008:	68ba      	ldr	r2, [r7, #8]
 800b00a:	8a92      	ldrh	r2, [r2, #20]
 800b00c:	fb03 f202 	mul.w	r2, r3, r2
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	61da      	str	r2, [r3, #28]
 800b014:	e07c      	b.n	800b110 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	7c9b      	ldrb	r3, [r3, #18]
 800b01a:	2b01      	cmp	r3, #1
 800b01c:	d130      	bne.n	800b080 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	6a1b      	ldr	r3, [r3, #32]
 800b022:	2bbc      	cmp	r3, #188	@ 0xbc
 800b024:	d918      	bls.n	800b058 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	8a9b      	ldrh	r3, [r3, #20]
 800b02a:	461a      	mov	r2, r3
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	69da      	ldr	r2, [r3, #28]
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	d003      	beq.n	800b048 <USB_HC_StartXfer+0xdc>
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	68db      	ldr	r3, [r3, #12]
 800b044:	2b02      	cmp	r3, #2
 800b046:	d103      	bne.n	800b050 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	2202      	movs	r2, #2
 800b04c:	60da      	str	r2, [r3, #12]
 800b04e:	e05f      	b.n	800b110 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	2201      	movs	r2, #1
 800b054:	60da      	str	r2, [r3, #12]
 800b056:	e05b      	b.n	800b110 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	6a1a      	ldr	r2, [r3, #32]
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	68db      	ldr	r3, [r3, #12]
 800b064:	2b01      	cmp	r3, #1
 800b066:	d007      	beq.n	800b078 <USB_HC_StartXfer+0x10c>
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	68db      	ldr	r3, [r3, #12]
 800b06c:	2b02      	cmp	r3, #2
 800b06e:	d003      	beq.n	800b078 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	2204      	movs	r2, #4
 800b074:	60da      	str	r2, [r3, #12]
 800b076:	e04b      	b.n	800b110 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	2203      	movs	r2, #3
 800b07c:	60da      	str	r2, [r3, #12]
 800b07e:	e047      	b.n	800b110 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800b080:	79fb      	ldrb	r3, [r7, #7]
 800b082:	2b01      	cmp	r3, #1
 800b084:	d10d      	bne.n	800b0a2 <USB_HC_StartXfer+0x136>
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	6a1b      	ldr	r3, [r3, #32]
 800b08a:	68ba      	ldr	r2, [r7, #8]
 800b08c:	8a92      	ldrh	r2, [r2, #20]
 800b08e:	4293      	cmp	r3, r2
 800b090:	d907      	bls.n	800b0a2 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b092:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b094:	68ba      	ldr	r2, [r7, #8]
 800b096:	8a92      	ldrh	r2, [r2, #20]
 800b098:	fb03 f202 	mul.w	r2, r3, r2
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	61da      	str	r2, [r3, #28]
 800b0a0:	e036      	b.n	800b110 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	6a1a      	ldr	r2, [r3, #32]
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	61da      	str	r2, [r3, #28]
 800b0aa:	e031      	b.n	800b110 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	6a1b      	ldr	r3, [r3, #32]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d018      	beq.n	800b0e6 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	6a1b      	ldr	r3, [r3, #32]
 800b0b8:	68ba      	ldr	r2, [r7, #8]
 800b0ba:	8a92      	ldrh	r2, [r2, #20]
 800b0bc:	4413      	add	r3, r2
 800b0be:	3b01      	subs	r3, #1
 800b0c0:	68ba      	ldr	r2, [r7, #8]
 800b0c2:	8a92      	ldrh	r2, [r2, #20]
 800b0c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0c8:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800b0ca:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800b0cc:	8b7b      	ldrh	r3, [r7, #26]
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d90b      	bls.n	800b0ea <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800b0d2:	8b7b      	ldrh	r3, [r7, #26]
 800b0d4:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b0d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b0d8:	68ba      	ldr	r2, [r7, #8]
 800b0da:	8a92      	ldrh	r2, [r2, #20]
 800b0dc:	fb03 f202 	mul.w	r2, r3, r2
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	61da      	str	r2, [r3, #28]
 800b0e4:	e001      	b.n	800b0ea <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	78db      	ldrb	r3, [r3, #3]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d00a      	beq.n	800b108 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b0f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b0f4:	68ba      	ldr	r2, [r7, #8]
 800b0f6:	8a92      	ldrh	r2, [r2, #20]
 800b0f8:	fb03 f202 	mul.w	r2, r3, r2
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	61da      	str	r2, [r3, #28]
 800b100:	e006      	b.n	800b110 <USB_HC_StartXfer+0x1a4>
 800b102:	bf00      	nop
 800b104:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	6a1a      	ldr	r2, [r3, #32]
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	69db      	ldr	r3, [r3, #28]
 800b114:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b118:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b11a:	04d9      	lsls	r1, r3, #19
 800b11c:	4ba3      	ldr	r3, [pc, #652]	@ (800b3ac <USB_HC_StartXfer+0x440>)
 800b11e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b120:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	7d9b      	ldrb	r3, [r3, #22]
 800b126:	075b      	lsls	r3, r3, #29
 800b128:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b12c:	69f9      	ldr	r1, [r7, #28]
 800b12e:	0148      	lsls	r0, r1, #5
 800b130:	6a39      	ldr	r1, [r7, #32]
 800b132:	4401      	add	r1, r0
 800b134:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b138:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b13a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800b13c:	79fb      	ldrb	r3, [r7, #7]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d009      	beq.n	800b156 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	6999      	ldr	r1, [r3, #24]
 800b146:	69fb      	ldr	r3, [r7, #28]
 800b148:	015a      	lsls	r2, r3, #5
 800b14a:	6a3b      	ldr	r3, [r7, #32]
 800b14c:	4413      	add	r3, r2
 800b14e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b152:	460a      	mov	r2, r1
 800b154:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b156:	6a3b      	ldr	r3, [r7, #32]
 800b158:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b15c:	689b      	ldr	r3, [r3, #8]
 800b15e:	f003 0301 	and.w	r3, r3, #1
 800b162:	2b00      	cmp	r3, #0
 800b164:	bf0c      	ite	eq
 800b166:	2301      	moveq	r3, #1
 800b168:	2300      	movne	r3, #0
 800b16a:	b2db      	uxtb	r3, r3
 800b16c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b16e:	69fb      	ldr	r3, [r7, #28]
 800b170:	015a      	lsls	r2, r3, #5
 800b172:	6a3b      	ldr	r3, [r7, #32]
 800b174:	4413      	add	r3, r2
 800b176:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	69fa      	ldr	r2, [r7, #28]
 800b17e:	0151      	lsls	r1, r2, #5
 800b180:	6a3a      	ldr	r2, [r7, #32]
 800b182:	440a      	add	r2, r1
 800b184:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b188:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b18c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b18e:	69fb      	ldr	r3, [r7, #28]
 800b190:	015a      	lsls	r2, r3, #5
 800b192:	6a3b      	ldr	r3, [r7, #32]
 800b194:	4413      	add	r3, r2
 800b196:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b19a:	681a      	ldr	r2, [r3, #0]
 800b19c:	7e7b      	ldrb	r3, [r7, #25]
 800b19e:	075b      	lsls	r3, r3, #29
 800b1a0:	69f9      	ldr	r1, [r7, #28]
 800b1a2:	0148      	lsls	r0, r1, #5
 800b1a4:	6a39      	ldr	r1, [r7, #32]
 800b1a6:	4401      	add	r1, r0
 800b1a8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	799b      	ldrb	r3, [r3, #6]
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	f040 80c3 	bne.w	800b340 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	7c5b      	ldrb	r3, [r3, #17]
 800b1be:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800b1c0:	68ba      	ldr	r2, [r7, #8]
 800b1c2:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	69fa      	ldr	r2, [r7, #28]
 800b1c8:	0151      	lsls	r1, r2, #5
 800b1ca:	6a3a      	ldr	r2, [r7, #32]
 800b1cc:	440a      	add	r2, r1
 800b1ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800b1d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b1d6:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800b1d8:	69fb      	ldr	r3, [r7, #28]
 800b1da:	015a      	lsls	r2, r3, #5
 800b1dc:	6a3b      	ldr	r3, [r7, #32]
 800b1de:	4413      	add	r3, r2
 800b1e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b1e4:	68db      	ldr	r3, [r3, #12]
 800b1e6:	69fa      	ldr	r2, [r7, #28]
 800b1e8:	0151      	lsls	r1, r2, #5
 800b1ea:	6a3a      	ldr	r2, [r7, #32]
 800b1ec:	440a      	add	r2, r1
 800b1ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b1f2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800b1f6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	79db      	ldrb	r3, [r3, #7]
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	d123      	bne.n	800b248 <USB_HC_StartXfer+0x2dc>
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	78db      	ldrb	r3, [r3, #3]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d11f      	bne.n	800b248 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800b208:	69fb      	ldr	r3, [r7, #28]
 800b20a:	015a      	lsls	r2, r3, #5
 800b20c:	6a3b      	ldr	r3, [r7, #32]
 800b20e:	4413      	add	r3, r2
 800b210:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	69fa      	ldr	r2, [r7, #28]
 800b218:	0151      	lsls	r1, r2, #5
 800b21a:	6a3a      	ldr	r2, [r7, #32]
 800b21c:	440a      	add	r2, r1
 800b21e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b222:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b226:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800b228:	69fb      	ldr	r3, [r7, #28]
 800b22a:	015a      	lsls	r2, r3, #5
 800b22c:	6a3b      	ldr	r3, [r7, #32]
 800b22e:	4413      	add	r3, r2
 800b230:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b234:	68db      	ldr	r3, [r3, #12]
 800b236:	69fa      	ldr	r2, [r7, #28]
 800b238:	0151      	lsls	r1, r2, #5
 800b23a:	6a3a      	ldr	r2, [r7, #32]
 800b23c:	440a      	add	r2, r1
 800b23e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b242:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b246:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	7c9b      	ldrb	r3, [r3, #18]
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d003      	beq.n	800b258 <USB_HC_StartXfer+0x2ec>
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	7c9b      	ldrb	r3, [r3, #18]
 800b254:	2b03      	cmp	r3, #3
 800b256:	d117      	bne.n	800b288 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d113      	bne.n	800b288 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	78db      	ldrb	r3, [r3, #3]
 800b264:	2b01      	cmp	r3, #1
 800b266:	d10f      	bne.n	800b288 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	015a      	lsls	r2, r3, #5
 800b26c:	6a3b      	ldr	r3, [r7, #32]
 800b26e:	4413      	add	r3, r2
 800b270:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b274:	685b      	ldr	r3, [r3, #4]
 800b276:	69fa      	ldr	r2, [r7, #28]
 800b278:	0151      	lsls	r1, r2, #5
 800b27a:	6a3a      	ldr	r2, [r7, #32]
 800b27c:	440a      	add	r2, r1
 800b27e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b282:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b286:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	7c9b      	ldrb	r3, [r3, #18]
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d162      	bne.n	800b356 <USB_HC_StartXfer+0x3ea>
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	78db      	ldrb	r3, [r3, #3]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d15e      	bne.n	800b356 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	68db      	ldr	r3, [r3, #12]
 800b29c:	3b01      	subs	r3, #1
 800b29e:	2b03      	cmp	r3, #3
 800b2a0:	d858      	bhi.n	800b354 <USB_HC_StartXfer+0x3e8>
 800b2a2:	a201      	add	r2, pc, #4	@ (adr r2, 800b2a8 <USB_HC_StartXfer+0x33c>)
 800b2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2a8:	0800b2b9 	.word	0x0800b2b9
 800b2ac:	0800b2db 	.word	0x0800b2db
 800b2b0:	0800b2fd 	.word	0x0800b2fd
 800b2b4:	0800b31f 	.word	0x0800b31f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800b2b8:	69fb      	ldr	r3, [r7, #28]
 800b2ba:	015a      	lsls	r2, r3, #5
 800b2bc:	6a3b      	ldr	r3, [r7, #32]
 800b2be:	4413      	add	r3, r2
 800b2c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b2c4:	685b      	ldr	r3, [r3, #4]
 800b2c6:	69fa      	ldr	r2, [r7, #28]
 800b2c8:	0151      	lsls	r1, r2, #5
 800b2ca:	6a3a      	ldr	r2, [r7, #32]
 800b2cc:	440a      	add	r2, r1
 800b2ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b2d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b2d6:	6053      	str	r3, [r2, #4]
          break;
 800b2d8:	e03d      	b.n	800b356 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800b2da:	69fb      	ldr	r3, [r7, #28]
 800b2dc:	015a      	lsls	r2, r3, #5
 800b2de:	6a3b      	ldr	r3, [r7, #32]
 800b2e0:	4413      	add	r3, r2
 800b2e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	69fa      	ldr	r2, [r7, #28]
 800b2ea:	0151      	lsls	r1, r2, #5
 800b2ec:	6a3a      	ldr	r2, [r7, #32]
 800b2ee:	440a      	add	r2, r1
 800b2f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b2f4:	f043 030e 	orr.w	r3, r3, #14
 800b2f8:	6053      	str	r3, [r2, #4]
          break;
 800b2fa:	e02c      	b.n	800b356 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800b2fc:	69fb      	ldr	r3, [r7, #28]
 800b2fe:	015a      	lsls	r2, r3, #5
 800b300:	6a3b      	ldr	r3, [r7, #32]
 800b302:	4413      	add	r3, r2
 800b304:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	69fa      	ldr	r2, [r7, #28]
 800b30c:	0151      	lsls	r1, r2, #5
 800b30e:	6a3a      	ldr	r2, [r7, #32]
 800b310:	440a      	add	r2, r1
 800b312:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b316:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b31a:	6053      	str	r3, [r2, #4]
          break;
 800b31c:	e01b      	b.n	800b356 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800b31e:	69fb      	ldr	r3, [r7, #28]
 800b320:	015a      	lsls	r2, r3, #5
 800b322:	6a3b      	ldr	r3, [r7, #32]
 800b324:	4413      	add	r3, r2
 800b326:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	69fa      	ldr	r2, [r7, #28]
 800b32e:	0151      	lsls	r1, r2, #5
 800b330:	6a3a      	ldr	r2, [r7, #32]
 800b332:	440a      	add	r2, r1
 800b334:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b338:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b33c:	6053      	str	r3, [r2, #4]
          break;
 800b33e:	e00a      	b.n	800b356 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800b340:	69fb      	ldr	r3, [r7, #28]
 800b342:	015a      	lsls	r2, r3, #5
 800b344:	6a3b      	ldr	r3, [r7, #32]
 800b346:	4413      	add	r3, r2
 800b348:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b34c:	461a      	mov	r2, r3
 800b34e:	2300      	movs	r3, #0
 800b350:	6053      	str	r3, [r2, #4]
 800b352:	e000      	b.n	800b356 <USB_HC_StartXfer+0x3ea>
          break;
 800b354:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b356:	69fb      	ldr	r3, [r7, #28]
 800b358:	015a      	lsls	r2, r3, #5
 800b35a:	6a3b      	ldr	r3, [r7, #32]
 800b35c:	4413      	add	r3, r2
 800b35e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b36c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	78db      	ldrb	r3, [r3, #3]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d004      	beq.n	800b380 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b37c:	613b      	str	r3, [r7, #16]
 800b37e:	e003      	b.n	800b388 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b386:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b38e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b390:	69fb      	ldr	r3, [r7, #28]
 800b392:	015a      	lsls	r2, r3, #5
 800b394:	6a3b      	ldr	r3, [r7, #32]
 800b396:	4413      	add	r3, r2
 800b398:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b39c:	461a      	mov	r2, r3
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800b3a2:	79fb      	ldrb	r3, [r7, #7]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d003      	beq.n	800b3b0 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	e055      	b.n	800b458 <USB_HC_StartXfer+0x4ec>
 800b3ac:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	78db      	ldrb	r3, [r3, #3]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d14e      	bne.n	800b456 <USB_HC_StartXfer+0x4ea>
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	6a1b      	ldr	r3, [r3, #32]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d04a      	beq.n	800b456 <USB_HC_StartXfer+0x4ea>
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	79db      	ldrb	r3, [r3, #7]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d146      	bne.n	800b456 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	7c9b      	ldrb	r3, [r3, #18]
 800b3cc:	2b03      	cmp	r3, #3
 800b3ce:	d831      	bhi.n	800b434 <USB_HC_StartXfer+0x4c8>
 800b3d0:	a201      	add	r2, pc, #4	@ (adr r2, 800b3d8 <USB_HC_StartXfer+0x46c>)
 800b3d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3d6:	bf00      	nop
 800b3d8:	0800b3e9 	.word	0x0800b3e9
 800b3dc:	0800b40d 	.word	0x0800b40d
 800b3e0:	0800b3e9 	.word	0x0800b3e9
 800b3e4:	0800b40d 	.word	0x0800b40d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	6a1b      	ldr	r3, [r3, #32]
 800b3ec:	3303      	adds	r3, #3
 800b3ee:	089b      	lsrs	r3, r3, #2
 800b3f0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b3f2:	8afa      	ldrh	r2, [r7, #22]
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d91c      	bls.n	800b438 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	699b      	ldr	r3, [r3, #24]
 800b402:	f043 0220 	orr.w	r2, r3, #32
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	619a      	str	r2, [r3, #24]
        }
        break;
 800b40a:	e015      	b.n	800b438 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	6a1b      	ldr	r3, [r3, #32]
 800b410:	3303      	adds	r3, #3
 800b412:	089b      	lsrs	r3, r3, #2
 800b414:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b416:	8afa      	ldrh	r2, [r7, #22]
 800b418:	6a3b      	ldr	r3, [r7, #32]
 800b41a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b41e:	691b      	ldr	r3, [r3, #16]
 800b420:	b29b      	uxth	r3, r3
 800b422:	429a      	cmp	r2, r3
 800b424:	d90a      	bls.n	800b43c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	699b      	ldr	r3, [r3, #24]
 800b42a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	619a      	str	r2, [r3, #24]
        }
        break;
 800b432:	e003      	b.n	800b43c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800b434:	bf00      	nop
 800b436:	e002      	b.n	800b43e <USB_HC_StartXfer+0x4d2>
        break;
 800b438:	bf00      	nop
 800b43a:	e000      	b.n	800b43e <USB_HC_StartXfer+0x4d2>
        break;
 800b43c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	6999      	ldr	r1, [r3, #24]
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	785a      	ldrb	r2, [r3, #1]
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	6a1b      	ldr	r3, [r3, #32]
 800b44a:	b29b      	uxth	r3, r3
 800b44c:	2000      	movs	r0, #0
 800b44e:	9000      	str	r0, [sp, #0]
 800b450:	68f8      	ldr	r0, [r7, #12]
 800b452:	f7ff f9c9 	bl	800a7e8 <USB_WritePacket>
  }

  return HAL_OK;
 800b456:	2300      	movs	r3, #0
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3728      	adds	r7, #40	@ 0x28
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}

0800b460 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b460:	b480      	push	{r7}
 800b462:	b085      	sub	sp, #20
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b472:	695b      	ldr	r3, [r3, #20]
 800b474:	b29b      	uxth	r3, r3
}
 800b476:	4618      	mov	r0, r3
 800b478:	3714      	adds	r7, #20
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr

0800b482 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b482:	b480      	push	{r7}
 800b484:	b089      	sub	sp, #36	@ 0x24
 800b486:	af00      	add	r7, sp, #0
 800b488:	6078      	str	r0, [r7, #4]
 800b48a:	460b      	mov	r3, r1
 800b48c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800b492:	78fb      	ldrb	r3, [r7, #3]
 800b494:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800b496:	2300      	movs	r3, #0
 800b498:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b49a:	69bb      	ldr	r3, [r7, #24]
 800b49c:	015a      	lsls	r2, r3, #5
 800b49e:	69fb      	ldr	r3, [r7, #28]
 800b4a0:	4413      	add	r3, r2
 800b4a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	0c9b      	lsrs	r3, r3, #18
 800b4aa:	f003 0303 	and.w	r3, r3, #3
 800b4ae:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800b4b0:	69bb      	ldr	r3, [r7, #24]
 800b4b2:	015a      	lsls	r2, r3, #5
 800b4b4:	69fb      	ldr	r3, [r7, #28]
 800b4b6:	4413      	add	r3, r2
 800b4b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	0fdb      	lsrs	r3, r3, #31
 800b4c0:	f003 0301 	and.w	r3, r3, #1
 800b4c4:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800b4c6:	69bb      	ldr	r3, [r7, #24]
 800b4c8:	015a      	lsls	r2, r3, #5
 800b4ca:	69fb      	ldr	r3, [r7, #28]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	0fdb      	lsrs	r3, r3, #31
 800b4d6:	f003 0301 	and.w	r3, r3, #1
 800b4da:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	689b      	ldr	r3, [r3, #8]
 800b4e0:	f003 0320 	and.w	r3, r3, #32
 800b4e4:	2b20      	cmp	r3, #32
 800b4e6:	d10d      	bne.n	800b504 <USB_HC_Halt+0x82>
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d10a      	bne.n	800b504 <USB_HC_Halt+0x82>
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d005      	beq.n	800b500 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	d002      	beq.n	800b500 <USB_HC_Halt+0x7e>
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	2b03      	cmp	r3, #3
 800b4fe:	d101      	bne.n	800b504 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800b500:	2300      	movs	r3, #0
 800b502:	e0d8      	b.n	800b6b6 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d002      	beq.n	800b510 <USB_HC_Halt+0x8e>
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	2b02      	cmp	r3, #2
 800b50e:	d173      	bne.n	800b5f8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b510:	69bb      	ldr	r3, [r7, #24]
 800b512:	015a      	lsls	r2, r3, #5
 800b514:	69fb      	ldr	r3, [r7, #28]
 800b516:	4413      	add	r3, r2
 800b518:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	69ba      	ldr	r2, [r7, #24]
 800b520:	0151      	lsls	r1, r2, #5
 800b522:	69fa      	ldr	r2, [r7, #28]
 800b524:	440a      	add	r2, r1
 800b526:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b52a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b52e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	689b      	ldr	r3, [r3, #8]
 800b534:	f003 0320 	and.w	r3, r3, #32
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d14a      	bne.n	800b5d2 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b540:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b544:	2b00      	cmp	r3, #0
 800b546:	d133      	bne.n	800b5b0 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b548:	69bb      	ldr	r3, [r7, #24]
 800b54a:	015a      	lsls	r2, r3, #5
 800b54c:	69fb      	ldr	r3, [r7, #28]
 800b54e:	4413      	add	r3, r2
 800b550:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	69ba      	ldr	r2, [r7, #24]
 800b558:	0151      	lsls	r1, r2, #5
 800b55a:	69fa      	ldr	r2, [r7, #28]
 800b55c:	440a      	add	r2, r1
 800b55e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b562:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b566:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b568:	69bb      	ldr	r3, [r7, #24]
 800b56a:	015a      	lsls	r2, r3, #5
 800b56c:	69fb      	ldr	r3, [r7, #28]
 800b56e:	4413      	add	r3, r2
 800b570:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	69ba      	ldr	r2, [r7, #24]
 800b578:	0151      	lsls	r1, r2, #5
 800b57a:	69fa      	ldr	r2, [r7, #28]
 800b57c:	440a      	add	r2, r1
 800b57e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b582:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b586:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	3301      	adds	r3, #1
 800b58c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b594:	d82e      	bhi.n	800b5f4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b596:	69bb      	ldr	r3, [r7, #24]
 800b598:	015a      	lsls	r2, r3, #5
 800b59a:	69fb      	ldr	r3, [r7, #28]
 800b59c:	4413      	add	r3, r2
 800b59e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b5a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b5ac:	d0ec      	beq.n	800b588 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b5ae:	e081      	b.n	800b6b4 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b5b0:	69bb      	ldr	r3, [r7, #24]
 800b5b2:	015a      	lsls	r2, r3, #5
 800b5b4:	69fb      	ldr	r3, [r7, #28]
 800b5b6:	4413      	add	r3, r2
 800b5b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	69ba      	ldr	r2, [r7, #24]
 800b5c0:	0151      	lsls	r1, r2, #5
 800b5c2:	69fa      	ldr	r2, [r7, #28]
 800b5c4:	440a      	add	r2, r1
 800b5c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b5ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b5ce:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b5d0:	e070      	b.n	800b6b4 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b5d2:	69bb      	ldr	r3, [r7, #24]
 800b5d4:	015a      	lsls	r2, r3, #5
 800b5d6:	69fb      	ldr	r3, [r7, #28]
 800b5d8:	4413      	add	r3, r2
 800b5da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	69ba      	ldr	r2, [r7, #24]
 800b5e2:	0151      	lsls	r1, r2, #5
 800b5e4:	69fa      	ldr	r2, [r7, #28]
 800b5e6:	440a      	add	r2, r1
 800b5e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b5ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b5f0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b5f2:	e05f      	b.n	800b6b4 <USB_HC_Halt+0x232>
            break;
 800b5f4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b5f6:	e05d      	b.n	800b6b4 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b5f8:	69bb      	ldr	r3, [r7, #24]
 800b5fa:	015a      	lsls	r2, r3, #5
 800b5fc:	69fb      	ldr	r3, [r7, #28]
 800b5fe:	4413      	add	r3, r2
 800b600:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	69ba      	ldr	r2, [r7, #24]
 800b608:	0151      	lsls	r1, r2, #5
 800b60a:	69fa      	ldr	r2, [r7, #28]
 800b60c:	440a      	add	r2, r1
 800b60e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b612:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b616:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b618:	69fb      	ldr	r3, [r7, #28]
 800b61a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b61e:	691b      	ldr	r3, [r3, #16]
 800b620:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b624:	2b00      	cmp	r3, #0
 800b626:	d133      	bne.n	800b690 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b628:	69bb      	ldr	r3, [r7, #24]
 800b62a:	015a      	lsls	r2, r3, #5
 800b62c:	69fb      	ldr	r3, [r7, #28]
 800b62e:	4413      	add	r3, r2
 800b630:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	69ba      	ldr	r2, [r7, #24]
 800b638:	0151      	lsls	r1, r2, #5
 800b63a:	69fa      	ldr	r2, [r7, #28]
 800b63c:	440a      	add	r2, r1
 800b63e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b642:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b646:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b648:	69bb      	ldr	r3, [r7, #24]
 800b64a:	015a      	lsls	r2, r3, #5
 800b64c:	69fb      	ldr	r3, [r7, #28]
 800b64e:	4413      	add	r3, r2
 800b650:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	69ba      	ldr	r2, [r7, #24]
 800b658:	0151      	lsls	r1, r2, #5
 800b65a:	69fa      	ldr	r2, [r7, #28]
 800b65c:	440a      	add	r2, r1
 800b65e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b662:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b666:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	3301      	adds	r3, #1
 800b66c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b674:	d81d      	bhi.n	800b6b2 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b676:	69bb      	ldr	r3, [r7, #24]
 800b678:	015a      	lsls	r2, r3, #5
 800b67a:	69fb      	ldr	r3, [r7, #28]
 800b67c:	4413      	add	r3, r2
 800b67e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b688:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b68c:	d0ec      	beq.n	800b668 <USB_HC_Halt+0x1e6>
 800b68e:	e011      	b.n	800b6b4 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	015a      	lsls	r2, r3, #5
 800b694:	69fb      	ldr	r3, [r7, #28]
 800b696:	4413      	add	r3, r2
 800b698:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	69ba      	ldr	r2, [r7, #24]
 800b6a0:	0151      	lsls	r1, r2, #5
 800b6a2:	69fa      	ldr	r2, [r7, #28]
 800b6a4:	440a      	add	r2, r1
 800b6a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b6aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b6ae:	6013      	str	r3, [r2, #0]
 800b6b0:	e000      	b.n	800b6b4 <USB_HC_Halt+0x232>
          break;
 800b6b2:	bf00      	nop
    }
  }

  return HAL_OK;
 800b6b4:	2300      	movs	r3, #0
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3724      	adds	r7, #36	@ 0x24
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c0:	4770      	bx	lr
	...

0800b6c4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b087      	sub	sp, #28
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	460b      	mov	r3, r1
 800b6ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800b6d4:	78fb      	ldrb	r3, [r7, #3]
 800b6d6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800b6d8:	2301      	movs	r3, #1
 800b6da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	04da      	lsls	r2, r3, #19
 800b6e0:	4b15      	ldr	r3, [pc, #84]	@ (800b738 <USB_DoPing+0x74>)
 800b6e2:	4013      	ands	r3, r2
 800b6e4:	693a      	ldr	r2, [r7, #16]
 800b6e6:	0151      	lsls	r1, r2, #5
 800b6e8:	697a      	ldr	r2, [r7, #20]
 800b6ea:	440a      	add	r2, r1
 800b6ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b6f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b6f4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	015a      	lsls	r2, r3, #5
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	4413      	add	r3, r2
 800b6fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b70c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b714:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	015a      	lsls	r2, r3, #5
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	4413      	add	r3, r2
 800b71e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b722:	461a      	mov	r2, r3
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b728:	2300      	movs	r3, #0
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	371c      	adds	r7, #28
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr
 800b736:	bf00      	nop
 800b738:	1ff80000 	.word	0x1ff80000

0800b73c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b088      	sub	sp, #32
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800b744:	2300      	movs	r3, #0
 800b746:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800b74c:	2300      	movs	r3, #0
 800b74e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f7fe ff8c 	bl	800a66e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b756:	2110      	movs	r1, #16
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f7fe ffe5 	bl	800a728 <USB_FlushTxFifo>
 800b75e:	4603      	mov	r3, r0
 800b760:	2b00      	cmp	r3, #0
 800b762:	d001      	beq.n	800b768 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800b764:	2301      	movs	r3, #1
 800b766:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f7ff f80f 	bl	800a78c <USB_FlushRxFifo>
 800b76e:	4603      	mov	r3, r0
 800b770:	2b00      	cmp	r3, #0
 800b772:	d001      	beq.n	800b778 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800b774:	2301      	movs	r3, #1
 800b776:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b778:	2300      	movs	r3, #0
 800b77a:	61bb      	str	r3, [r7, #24]
 800b77c:	e01f      	b.n	800b7be <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800b77e:	69bb      	ldr	r3, [r7, #24]
 800b780:	015a      	lsls	r2, r3, #5
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	4413      	add	r3, r2
 800b786:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b794:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b79c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b7a4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b7a6:	69bb      	ldr	r3, [r7, #24]
 800b7a8:	015a      	lsls	r2, r3, #5
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	4413      	add	r3, r2
 800b7ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b7b8:	69bb      	ldr	r3, [r7, #24]
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	61bb      	str	r3, [r7, #24]
 800b7be:	69bb      	ldr	r3, [r7, #24]
 800b7c0:	2b0f      	cmp	r3, #15
 800b7c2:	d9dc      	bls.n	800b77e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	61bb      	str	r3, [r7, #24]
 800b7c8:	e034      	b.n	800b834 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800b7ca:	69bb      	ldr	r3, [r7, #24]
 800b7cc:	015a      	lsls	r2, r3, #5
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	4413      	add	r3, r2
 800b7d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b7e0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b7e8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b7f0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b7f2:	69bb      	ldr	r3, [r7, #24]
 800b7f4:	015a      	lsls	r2, r3, #5
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	4413      	add	r3, r2
 800b7fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b7fe:	461a      	mov	r2, r3
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	3301      	adds	r3, #1
 800b808:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b810:	d80c      	bhi.n	800b82c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b812:	69bb      	ldr	r3, [r7, #24]
 800b814:	015a      	lsls	r2, r3, #5
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	4413      	add	r3, r2
 800b81a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b824:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b828:	d0ec      	beq.n	800b804 <USB_StopHost+0xc8>
 800b82a:	e000      	b.n	800b82e <USB_StopHost+0xf2>
        break;
 800b82c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b82e:	69bb      	ldr	r3, [r7, #24]
 800b830:	3301      	adds	r3, #1
 800b832:	61bb      	str	r3, [r7, #24]
 800b834:	69bb      	ldr	r3, [r7, #24]
 800b836:	2b0f      	cmp	r3, #15
 800b838:	d9c7      	bls.n	800b7ca <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b840:	461a      	mov	r2, r3
 800b842:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b846:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b84e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f7fe fefb 	bl	800a64c <USB_EnableGlobalInt>

  return ret;
 800b856:	7ffb      	ldrb	r3, [r7, #31]
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3720      	adds	r7, #32
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b860:	b590      	push	{r4, r7, lr}
 800b862:	b089      	sub	sp, #36	@ 0x24
 800b864:	af04      	add	r7, sp, #16
 800b866:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800b868:	2301      	movs	r3, #1
 800b86a:	2202      	movs	r2, #2
 800b86c:	2102      	movs	r1, #2
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f000 fcd7 	bl	800c222 <USBH_FindInterface>
 800b874:	4603      	mov	r3, r0
 800b876:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b878:	7bfb      	ldrb	r3, [r7, #15]
 800b87a:	2bff      	cmp	r3, #255	@ 0xff
 800b87c:	d002      	beq.n	800b884 <USBH_CDC_InterfaceInit+0x24>
 800b87e:	7bfb      	ldrb	r3, [r7, #15]
 800b880:	2b01      	cmp	r3, #1
 800b882:	d901      	bls.n	800b888 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b884:	2302      	movs	r3, #2
 800b886:	e13d      	b.n	800bb04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800b888:	7bfb      	ldrb	r3, [r7, #15]
 800b88a:	4619      	mov	r1, r3
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f000 fcac 	bl	800c1ea <USBH_SelectInterface>
 800b892:	4603      	mov	r3, r0
 800b894:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b896:	7bbb      	ldrb	r3, [r7, #14]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d001      	beq.n	800b8a0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800b89c:	2302      	movs	r3, #2
 800b89e:	e131      	b.n	800bb04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800b8a6:	2050      	movs	r0, #80	@ 0x50
 800b8a8:	f005 f818 	bl	80108dc <malloc>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b8b6:	69db      	ldr	r3, [r3, #28]
 800b8b8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d101      	bne.n	800b8c4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800b8c0:	2302      	movs	r3, #2
 800b8c2:	e11f      	b.n	800bb04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800b8c4:	2250      	movs	r2, #80	@ 0x50
 800b8c6:	2100      	movs	r1, #0
 800b8c8:	68b8      	ldr	r0, [r7, #8]
 800b8ca:	f005 ff25 	bl	8011718 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800b8ce:	7bfb      	ldrb	r3, [r7, #15]
 800b8d0:	687a      	ldr	r2, [r7, #4]
 800b8d2:	211a      	movs	r1, #26
 800b8d4:	fb01 f303 	mul.w	r3, r1, r3
 800b8d8:	4413      	add	r3, r2
 800b8da:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	b25b      	sxtb	r3, r3
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	da15      	bge.n	800b912 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b8e6:	7bfb      	ldrb	r3, [r7, #15]
 800b8e8:	687a      	ldr	r2, [r7, #4]
 800b8ea:	211a      	movs	r1, #26
 800b8ec:	fb01 f303 	mul.w	r3, r1, r3
 800b8f0:	4413      	add	r3, r2
 800b8f2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800b8f6:	781a      	ldrb	r2, [r3, #0]
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b8fc:	7bfb      	ldrb	r3, [r7, #15]
 800b8fe:	687a      	ldr	r2, [r7, #4]
 800b900:	211a      	movs	r1, #26
 800b902:	fb01 f303 	mul.w	r3, r1, r3
 800b906:	4413      	add	r3, r2
 800b908:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800b90c:	881a      	ldrh	r2, [r3, #0]
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	785b      	ldrb	r3, [r3, #1]
 800b916:	4619      	mov	r1, r3
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f002 fa1c 	bl	800dd56 <USBH_AllocPipe>
 800b91e:	4603      	mov	r3, r0
 800b920:	461a      	mov	r2, r3
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	7819      	ldrb	r1, [r3, #0]
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	7858      	ldrb	r0, [r3, #1]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b93a:	68ba      	ldr	r2, [r7, #8]
 800b93c:	8952      	ldrh	r2, [r2, #10]
 800b93e:	9202      	str	r2, [sp, #8]
 800b940:	2203      	movs	r2, #3
 800b942:	9201      	str	r2, [sp, #4]
 800b944:	9300      	str	r3, [sp, #0]
 800b946:	4623      	mov	r3, r4
 800b948:	4602      	mov	r2, r0
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f002 f9d4 	bl	800dcf8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	2200      	movs	r2, #0
 800b956:	4619      	mov	r1, r3
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f004 ff39 	bl	80107d0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800b95e:	2300      	movs	r3, #0
 800b960:	2200      	movs	r2, #0
 800b962:	210a      	movs	r1, #10
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f000 fc5c 	bl	800c222 <USBH_FindInterface>
 800b96a:	4603      	mov	r3, r0
 800b96c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b96e:	7bfb      	ldrb	r3, [r7, #15]
 800b970:	2bff      	cmp	r3, #255	@ 0xff
 800b972:	d002      	beq.n	800b97a <USBH_CDC_InterfaceInit+0x11a>
 800b974:	7bfb      	ldrb	r3, [r7, #15]
 800b976:	2b01      	cmp	r3, #1
 800b978:	d901      	bls.n	800b97e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b97a:	2302      	movs	r3, #2
 800b97c:	e0c2      	b.n	800bb04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800b97e:	7bfb      	ldrb	r3, [r7, #15]
 800b980:	687a      	ldr	r2, [r7, #4]
 800b982:	211a      	movs	r1, #26
 800b984:	fb01 f303 	mul.w	r3, r1, r3
 800b988:	4413      	add	r3, r2
 800b98a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800b98e:	781b      	ldrb	r3, [r3, #0]
 800b990:	b25b      	sxtb	r3, r3
 800b992:	2b00      	cmp	r3, #0
 800b994:	da16      	bge.n	800b9c4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b996:	7bfb      	ldrb	r3, [r7, #15]
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	211a      	movs	r1, #26
 800b99c:	fb01 f303 	mul.w	r3, r1, r3
 800b9a0:	4413      	add	r3, r2
 800b9a2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800b9a6:	781a      	ldrb	r2, [r3, #0]
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b9ac:	7bfb      	ldrb	r3, [r7, #15]
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	211a      	movs	r1, #26
 800b9b2:	fb01 f303 	mul.w	r3, r1, r3
 800b9b6:	4413      	add	r3, r2
 800b9b8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800b9bc:	881a      	ldrh	r2, [r3, #0]
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	835a      	strh	r2, [r3, #26]
 800b9c2:	e015      	b.n	800b9f0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b9c4:	7bfb      	ldrb	r3, [r7, #15]
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	211a      	movs	r1, #26
 800b9ca:	fb01 f303 	mul.w	r3, r1, r3
 800b9ce:	4413      	add	r3, r2
 800b9d0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800b9d4:	781a      	ldrb	r2, [r3, #0]
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b9da:	7bfb      	ldrb	r3, [r7, #15]
 800b9dc:	687a      	ldr	r2, [r7, #4]
 800b9de:	211a      	movs	r1, #26
 800b9e0:	fb01 f303 	mul.w	r3, r1, r3
 800b9e4:	4413      	add	r3, r2
 800b9e6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800b9ea:	881a      	ldrh	r2, [r3, #0]
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800b9f0:	7bfb      	ldrb	r3, [r7, #15]
 800b9f2:	687a      	ldr	r2, [r7, #4]
 800b9f4:	211a      	movs	r1, #26
 800b9f6:	fb01 f303 	mul.w	r3, r1, r3
 800b9fa:	4413      	add	r3, r2
 800b9fc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800ba00:	781b      	ldrb	r3, [r3, #0]
 800ba02:	b25b      	sxtb	r3, r3
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	da16      	bge.n	800ba36 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ba08:	7bfb      	ldrb	r3, [r7, #15]
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	211a      	movs	r1, #26
 800ba0e:	fb01 f303 	mul.w	r3, r1, r3
 800ba12:	4413      	add	r3, r2
 800ba14:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800ba18:	781a      	ldrb	r2, [r3, #0]
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ba1e:	7bfb      	ldrb	r3, [r7, #15]
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	211a      	movs	r1, #26
 800ba24:	fb01 f303 	mul.w	r3, r1, r3
 800ba28:	4413      	add	r3, r2
 800ba2a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800ba2e:	881a      	ldrh	r2, [r3, #0]
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	835a      	strh	r2, [r3, #26]
 800ba34:	e015      	b.n	800ba62 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ba36:	7bfb      	ldrb	r3, [r7, #15]
 800ba38:	687a      	ldr	r2, [r7, #4]
 800ba3a:	211a      	movs	r1, #26
 800ba3c:	fb01 f303 	mul.w	r3, r1, r3
 800ba40:	4413      	add	r3, r2
 800ba42:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800ba46:	781a      	ldrb	r2, [r3, #0]
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ba4c:	7bfb      	ldrb	r3, [r7, #15]
 800ba4e:	687a      	ldr	r2, [r7, #4]
 800ba50:	211a      	movs	r1, #26
 800ba52:	fb01 f303 	mul.w	r3, r1, r3
 800ba56:	4413      	add	r3, r2
 800ba58:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800ba5c:	881a      	ldrh	r2, [r3, #0]
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	7b9b      	ldrb	r3, [r3, #14]
 800ba66:	4619      	mov	r1, r3
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f002 f974 	bl	800dd56 <USBH_AllocPipe>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	461a      	mov	r2, r3
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	7bdb      	ldrb	r3, [r3, #15]
 800ba7a:	4619      	mov	r1, r3
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f002 f96a 	bl	800dd56 <USBH_AllocPipe>
 800ba82:	4603      	mov	r3, r0
 800ba84:	461a      	mov	r2, r3
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	7b59      	ldrb	r1, [r3, #13]
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	7b98      	ldrb	r0, [r3, #14]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ba9e:	68ba      	ldr	r2, [r7, #8]
 800baa0:	8b12      	ldrh	r2, [r2, #24]
 800baa2:	9202      	str	r2, [sp, #8]
 800baa4:	2202      	movs	r2, #2
 800baa6:	9201      	str	r2, [sp, #4]
 800baa8:	9300      	str	r3, [sp, #0]
 800baaa:	4623      	mov	r3, r4
 800baac:	4602      	mov	r2, r0
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f002 f922 	bl	800dcf8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	7b19      	ldrb	r1, [r3, #12]
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	7bd8      	ldrb	r0, [r3, #15]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bac8:	68ba      	ldr	r2, [r7, #8]
 800baca:	8b52      	ldrh	r2, [r2, #26]
 800bacc:	9202      	str	r2, [sp, #8]
 800bace:	2202      	movs	r2, #2
 800bad0:	9201      	str	r2, [sp, #4]
 800bad2:	9300      	str	r3, [sp, #0]
 800bad4:	4623      	mov	r3, r4
 800bad6:	4602      	mov	r2, r0
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f002 f90d 	bl	800dcf8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	2200      	movs	r2, #0
 800bae2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	7b5b      	ldrb	r3, [r3, #13]
 800baea:	2200      	movs	r2, #0
 800baec:	4619      	mov	r1, r3
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f004 fe6e 	bl	80107d0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	7b1b      	ldrb	r3, [r3, #12]
 800baf8:	2200      	movs	r2, #0
 800bafa:	4619      	mov	r1, r3
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f004 fe67 	bl	80107d0 <USBH_LL_SetToggle>

  return USBH_OK;
 800bb02:	2300      	movs	r3, #0
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3714      	adds	r7, #20
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd90      	pop	{r4, r7, pc}

0800bb0c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b084      	sub	sp, #16
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bb1a:	69db      	ldr	r3, [r3, #28]
 800bb1c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d00e      	beq.n	800bb44 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f002 f902 	bl	800dd36 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	4619      	mov	r1, r3
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f002 f92d 	bl	800dd98 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2200      	movs	r2, #0
 800bb42:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	7b1b      	ldrb	r3, [r3, #12]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d00e      	beq.n	800bb6a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	7b1b      	ldrb	r3, [r3, #12]
 800bb50:	4619      	mov	r1, r3
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f002 f8ef 	bl	800dd36 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	7b1b      	ldrb	r3, [r3, #12]
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f002 f91a 	bl	800dd98 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	2200      	movs	r2, #0
 800bb68:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	7b5b      	ldrb	r3, [r3, #13]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d00e      	beq.n	800bb90 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	7b5b      	ldrb	r3, [r3, #13]
 800bb76:	4619      	mov	r1, r3
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f002 f8dc 	bl	800dd36 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	7b5b      	ldrb	r3, [r3, #13]
 800bb82:	4619      	mov	r1, r3
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f002 f907 	bl	800dd98 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bb96:	69db      	ldr	r3, [r3, #28]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d00b      	beq.n	800bbb4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bba2:	69db      	ldr	r3, [r3, #28]
 800bba4:	4618      	mov	r0, r3
 800bba6:	f004 fea1 	bl	80108ec <free>
    phost->pActiveClass->pData = 0U;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800bbb4:	2300      	movs	r3, #0
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3710      	adds	r7, #16
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}

0800bbbe <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800bbbe:	b580      	push	{r7, lr}
 800bbc0:	b084      	sub	sp, #16
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bbcc:	69db      	ldr	r3, [r3, #28]
 800bbce:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	3340      	adds	r3, #64	@ 0x40
 800bbd4:	4619      	mov	r1, r3
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f000 f8b1 	bl	800bd3e <GetLineCoding>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800bbe0:	7afb      	ldrb	r3, [r7, #11]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d105      	bne.n	800bbf2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800bbec:	2102      	movs	r1, #2
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800bbf2:	7afb      	ldrb	r3, [r7, #11]
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3710      	adds	r7, #16
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b084      	sub	sp, #16
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800bc04:	2301      	movs	r3, #1
 800bc06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bc12:	69db      	ldr	r3, [r3, #28]
 800bc14:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800bc1c:	2b04      	cmp	r3, #4
 800bc1e:	d877      	bhi.n	800bd10 <USBH_CDC_Process+0x114>
 800bc20:	a201      	add	r2, pc, #4	@ (adr r2, 800bc28 <USBH_CDC_Process+0x2c>)
 800bc22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc26:	bf00      	nop
 800bc28:	0800bc3d 	.word	0x0800bc3d
 800bc2c:	0800bc43 	.word	0x0800bc43
 800bc30:	0800bc73 	.word	0x0800bc73
 800bc34:	0800bce7 	.word	0x0800bce7
 800bc38:	0800bcf5 	.word	0x0800bcf5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	73fb      	strb	r3, [r7, #15]
      break;
 800bc40:	e06d      	b.n	800bd1e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc46:	4619      	mov	r1, r3
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f000 f897 	bl	800bd7c <SetLineCoding>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800bc52:	7bbb      	ldrb	r3, [r7, #14]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d104      	bne.n	800bc62 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	2202      	movs	r2, #2
 800bc5c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800bc60:	e058      	b.n	800bd14 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800bc62:	7bbb      	ldrb	r3, [r7, #14]
 800bc64:	2b01      	cmp	r3, #1
 800bc66:	d055      	beq.n	800bd14 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	2204      	movs	r2, #4
 800bc6c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800bc70:	e050      	b.n	800bd14 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	3340      	adds	r3, #64	@ 0x40
 800bc76:	4619      	mov	r1, r3
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f000 f860 	bl	800bd3e <GetLineCoding>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800bc82:	7bbb      	ldrb	r3, [r7, #14]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d126      	bne.n	800bcd6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc9a:	791b      	ldrb	r3, [r3, #4]
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	d13b      	bne.n	800bd18 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bcaa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d133      	bne.n	800bd18 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bcba:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	d12b      	bne.n	800bd18 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bcc8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d124      	bne.n	800bd18 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f000 f982 	bl	800bfd8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800bcd4:	e020      	b.n	800bd18 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800bcd6:	7bbb      	ldrb	r3, [r7, #14]
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	d01d      	beq.n	800bd18 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	2204      	movs	r2, #4
 800bce0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800bce4:	e018      	b.n	800bd18 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f000 f867 	bl	800bdba <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f000 f8f6 	bl	800bede <CDC_ProcessReception>
      break;
 800bcf2:	e014      	b.n	800bd1e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800bcf4:	2100      	movs	r1, #0
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f001 f988 	bl	800d00c <USBH_ClrFeature>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800bd00:	7bbb      	ldrb	r3, [r7, #14]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d10a      	bne.n	800bd1c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800bd0e:	e005      	b.n	800bd1c <USBH_CDC_Process+0x120>

    default:
      break;
 800bd10:	bf00      	nop
 800bd12:	e004      	b.n	800bd1e <USBH_CDC_Process+0x122>
      break;
 800bd14:	bf00      	nop
 800bd16:	e002      	b.n	800bd1e <USBH_CDC_Process+0x122>
      break;
 800bd18:	bf00      	nop
 800bd1a:	e000      	b.n	800bd1e <USBH_CDC_Process+0x122>
      break;
 800bd1c:	bf00      	nop

  }

  return status;
 800bd1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3710      	adds	r7, #16
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}

0800bd28 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b083      	sub	sp, #12
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800bd30:	2300      	movs	r3, #0
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	370c      	adds	r7, #12
 800bd36:	46bd      	mov	sp, r7
 800bd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3c:	4770      	bx	lr

0800bd3e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800bd3e:	b580      	push	{r7, lr}
 800bd40:	b082      	sub	sp, #8
 800bd42:	af00      	add	r7, sp, #0
 800bd44:	6078      	str	r0, [r7, #4]
 800bd46:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	22a1      	movs	r2, #161	@ 0xa1
 800bd4c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2221      	movs	r2, #33	@ 0x21
 800bd52:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2200      	movs	r2, #0
 800bd58:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2207      	movs	r2, #7
 800bd64:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	2207      	movs	r2, #7
 800bd6a:	4619      	mov	r1, r3
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f001 fc82 	bl	800d676 <USBH_CtlReq>
 800bd72:	4603      	mov	r3, r0
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3708      	adds	r7, #8
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b082      	sub	sp, #8
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2221      	movs	r2, #33	@ 0x21
 800bd8a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2220      	movs	r2, #32
 800bd90:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2200      	movs	r2, #0
 800bd96:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2207      	movs	r2, #7
 800bda2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	2207      	movs	r2, #7
 800bda8:	4619      	mov	r1, r3
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f001 fc63 	bl	800d676 <USBH_CtlReq>
 800bdb0:	4603      	mov	r3, r0
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3708      	adds	r7, #8
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}

0800bdba <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800bdba:	b580      	push	{r7, lr}
 800bdbc:	b086      	sub	sp, #24
 800bdbe:	af02      	add	r7, sp, #8
 800bdc0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bdc8:	69db      	ldr	r3, [r3, #28]
 800bdca:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800bdd6:	2b01      	cmp	r3, #1
 800bdd8:	d002      	beq.n	800bde0 <CDC_ProcessTransmission+0x26>
 800bdda:	2b02      	cmp	r3, #2
 800bddc:	d023      	beq.n	800be26 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800bdde:	e07a      	b.n	800bed6 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bde4:	68fa      	ldr	r2, [r7, #12]
 800bde6:	8b12      	ldrh	r2, [r2, #24]
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d90b      	bls.n	800be04 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	69d9      	ldr	r1, [r3, #28]
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	8b1a      	ldrh	r2, [r3, #24]
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	7b5b      	ldrb	r3, [r3, #13]
 800bdf8:	2001      	movs	r0, #1
 800bdfa:	9000      	str	r0, [sp, #0]
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f001 ff38 	bl	800dc72 <USBH_BulkSendData>
 800be02:	e00b      	b.n	800be1c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800be0c:	b29a      	uxth	r2, r3
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	7b5b      	ldrb	r3, [r3, #13]
 800be12:	2001      	movs	r0, #1
 800be14:	9000      	str	r0, [sp, #0]
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f001 ff2b 	bl	800dc72 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2202      	movs	r2, #2
 800be20:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800be24:	e057      	b.n	800bed6 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	7b5b      	ldrb	r3, [r3, #13]
 800be2a:	4619      	mov	r1, r3
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f004 fca5 	bl	801077c <USBH_LL_GetURBState>
 800be32:	4603      	mov	r3, r0
 800be34:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800be36:	7afb      	ldrb	r3, [r7, #11]
 800be38:	2b01      	cmp	r3, #1
 800be3a:	d136      	bne.n	800beaa <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be40:	68fa      	ldr	r2, [r7, #12]
 800be42:	8b12      	ldrh	r2, [r2, #24]
 800be44:	4293      	cmp	r3, r2
 800be46:	d90e      	bls.n	800be66 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be4c:	68fa      	ldr	r2, [r7, #12]
 800be4e:	8b12      	ldrh	r2, [r2, #24]
 800be50:	1a9a      	subs	r2, r3, r2
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	69db      	ldr	r3, [r3, #28]
 800be5a:	68fa      	ldr	r2, [r7, #12]
 800be5c:	8b12      	ldrh	r2, [r2, #24]
 800be5e:	441a      	add	r2, r3
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	61da      	str	r2, [r3, #28]
 800be64:	e002      	b.n	800be6c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2200      	movs	r2, #0
 800be6a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be70:	2b00      	cmp	r3, #0
 800be72:	d004      	beq.n	800be7e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	2201      	movs	r2, #1
 800be78:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800be7c:	e006      	b.n	800be8c <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	2200      	movs	r2, #0
 800be82:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f000 f892 	bl	800bfb0 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2204      	movs	r2, #4
 800be90:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800bea0:	2200      	movs	r2, #0
 800bea2:	4619      	mov	r1, r3
 800bea4:	f002 f860 	bl	800df68 <osMessagePut>
      break;
 800bea8:	e014      	b.n	800bed4 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800beaa:	7afb      	ldrb	r3, [r7, #11]
 800beac:	2b02      	cmp	r3, #2
 800beae:	d111      	bne.n	800bed4 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	2201      	movs	r2, #1
 800beb4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2204      	movs	r2, #4
 800bebc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800becc:	2200      	movs	r2, #0
 800bece:	4619      	mov	r1, r3
 800bed0:	f002 f84a 	bl	800df68 <osMessagePut>
      break;
 800bed4:	bf00      	nop
  }
}
 800bed6:	bf00      	nop
 800bed8:	3710      	adds	r7, #16
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}

0800bede <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800bede:	b580      	push	{r7, lr}
 800bee0:	b086      	sub	sp, #24
 800bee2:	af00      	add	r7, sp, #0
 800bee4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800beec:	69db      	ldr	r3, [r3, #28]
 800beee:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bef0:	2300      	movs	r3, #0
 800bef2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800befa:	2b03      	cmp	r3, #3
 800befc:	d002      	beq.n	800bf04 <CDC_ProcessReception+0x26>
 800befe:	2b04      	cmp	r3, #4
 800bf00:	d00e      	beq.n	800bf20 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800bf02:	e051      	b.n	800bfa8 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	6a19      	ldr	r1, [r3, #32]
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	8b5a      	ldrh	r2, [r3, #26]
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	7b1b      	ldrb	r3, [r3, #12]
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f001 fed3 	bl	800dcbc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	2204      	movs	r2, #4
 800bf1a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800bf1e:	e043      	b.n	800bfa8 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	7b1b      	ldrb	r3, [r3, #12]
 800bf24:	4619      	mov	r1, r3
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f004 fc28 	bl	801077c <USBH_LL_GetURBState>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800bf30:	7cfb      	ldrb	r3, [r7, #19]
 800bf32:	2b01      	cmp	r3, #1
 800bf34:	d137      	bne.n	800bfa6 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	7b1b      	ldrb	r3, [r3, #12]
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f004 fb8b 	bl	8010658 <USBH_LL_GetLastXferSize>
 800bf42:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf48:	68fa      	ldr	r2, [r7, #12]
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d016      	beq.n	800bf7c <CDC_ProcessReception+0x9e>
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	8b5b      	ldrh	r3, [r3, #26]
 800bf52:	461a      	mov	r2, r3
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d110      	bne.n	800bf7c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	1ad2      	subs	r2, r2, r3
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	6a1a      	ldr	r2, [r3, #32]
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	441a      	add	r2, r3
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	2203      	movs	r2, #3
 800bf76:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800bf7a:	e006      	b.n	800bf8a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f000 f81d 	bl	800bfc4 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2204      	movs	r2, #4
 800bf8e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	4619      	mov	r1, r3
 800bfa2:	f001 ffe1 	bl	800df68 <osMessagePut>
      break;
 800bfa6:	bf00      	nop
  }
}
 800bfa8:	bf00      	nop
 800bfaa:	3718      	adds	r7, #24
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}

0800bfb0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b083      	sub	sp, #12
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800bfb8:	bf00      	nop
 800bfba:	370c      	adds	r7, #12
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr

0800bfc4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b083      	sub	sp, #12
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800bfcc:	bf00      	nop
 800bfce:	370c      	adds	r7, #12
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr

0800bfd8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b083      	sub	sp, #12
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800bfe0:	bf00      	nop
 800bfe2:	370c      	adds	r7, #12
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr

0800bfec <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800bfec:	b5b0      	push	{r4, r5, r7, lr}
 800bfee:	b090      	sub	sp, #64	@ 0x40
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	60f8      	str	r0, [r7, #12]
 800bff4:	60b9      	str	r1, [r7, #8]
 800bff6:	4613      	mov	r3, r2
 800bff8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d101      	bne.n	800c004 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c000:	2302      	movs	r3, #2
 800c002:	e04d      	b.n	800c0a0 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	79fa      	ldrb	r2, [r7, #7]
 800c008:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	2200      	movs	r2, #0
 800c010:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	2200      	movs	r2, #0
 800c018:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800c01c:	68f8      	ldr	r0, [r7, #12]
 800c01e:	f000 f847 	bl	800c0b0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	2200      	movs	r2, #0
 800c026:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	2200      	movs	r2, #0
 800c02e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	2200      	movs	r2, #0
 800c036:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	2200      	movs	r2, #0
 800c03e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d003      	beq.n	800c050 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	68ba      	ldr	r2, [r7, #8]
 800c04c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800c050:	4b15      	ldr	r3, [pc, #84]	@ (800c0a8 <USBH_Init+0xbc>)
 800c052:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800c056:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c058:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800c05c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800c060:	2100      	movs	r1, #0
 800c062:	4618      	mov	r0, r3
 800c064:	f001 ff57 	bl	800df16 <osMessageCreate>
 800c068:	4602      	mov	r2, r0
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800c070:	4b0e      	ldr	r3, [pc, #56]	@ (800c0ac <USBH_Init+0xc0>)
 800c072:	f107 0414 	add.w	r4, r7, #20
 800c076:	461d      	mov	r5, r3
 800c078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c07a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c07c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c080:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800c084:	f107 0314 	add.w	r3, r7, #20
 800c088:	68f9      	ldr	r1, [r7, #12]
 800c08a:	4618      	mov	r0, r3
 800c08c:	f001 fef7 	bl	800de7e <osThreadCreate>
 800c090:	4602      	mov	r2, r0
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800c098:	68f8      	ldr	r0, [r7, #12]
 800c09a:	f004 fa1f 	bl	80104dc <USBH_LL_Init>

  return USBH_OK;
 800c09e:	2300      	movs	r3, #0
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3740      	adds	r7, #64	@ 0x40
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bdb0      	pop	{r4, r5, r7, pc}
 800c0a8:	080133e0 	.word	0x080133e0
 800c0ac:	080133fc 	.word	0x080133fc

0800c0b0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b084      	sub	sp, #16
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c0bc:	2300      	movs	r3, #0
 800c0be:	60fb      	str	r3, [r7, #12]
 800c0c0:	e009      	b.n	800c0d6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c0c2:	687a      	ldr	r2, [r7, #4]
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	33e0      	adds	r3, #224	@ 0xe0
 800c0c8:	009b      	lsls	r3, r3, #2
 800c0ca:	4413      	add	r3, r2
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	3301      	adds	r3, #1
 800c0d4:	60fb      	str	r3, [r7, #12]
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	2b0f      	cmp	r3, #15
 800c0da:	d9f2      	bls.n	800c0c2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c0dc:	2300      	movs	r3, #0
 800c0de:	60fb      	str	r3, [r7, #12]
 800c0e0:	e009      	b.n	800c0f6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c0e2:	687a      	ldr	r2, [r7, #4]
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	4413      	add	r3, r2
 800c0e8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	60fb      	str	r3, [r7, #12]
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c0fc:	d3f1      	bcc.n	800c0e2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2200      	movs	r2, #0
 800c102:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2200      	movs	r2, #0
 800c108:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2201      	movs	r2, #1
 800c10e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2200      	movs	r2, #0
 800c114:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2201      	movs	r2, #1
 800c11c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2240      	movs	r2, #64	@ 0x40
 800c122:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2200      	movs	r2, #0
 800c128:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2200      	movs	r2, #0
 800c12e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2201      	movs	r2, #1
 800c136:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2200      	movs	r2, #0
 800c13e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2200      	movs	r2, #0
 800c146:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	331c      	adds	r3, #28
 800c14e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c152:	2100      	movs	r1, #0
 800c154:	4618      	mov	r0, r3
 800c156:	f005 fadf 	bl	8011718 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c160:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c164:	2100      	movs	r1, #0
 800c166:	4618      	mov	r0, r3
 800c168:	f005 fad6 	bl	8011718 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800c172:	2212      	movs	r2, #18
 800c174:	2100      	movs	r1, #0
 800c176:	4618      	mov	r0, r3
 800c178:	f005 face 	bl	8011718 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800c182:	223e      	movs	r2, #62	@ 0x3e
 800c184:	2100      	movs	r1, #0
 800c186:	4618      	mov	r0, r3
 800c188:	f005 fac6 	bl	8011718 <memset>

  return USBH_OK;
 800c18c:	2300      	movs	r3, #0
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3710      	adds	r7, #16
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}

0800c196 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c196:	b480      	push	{r7}
 800c198:	b085      	sub	sp, #20
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	6078      	str	r0, [r7, #4]
 800c19e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d016      	beq.n	800c1d8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d10e      	bne.n	800c1d2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800c1ba:	1c59      	adds	r1, r3, #1
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800c1c2:	687a      	ldr	r2, [r7, #4]
 800c1c4:	33de      	adds	r3, #222	@ 0xde
 800c1c6:	6839      	ldr	r1, [r7, #0]
 800c1c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	73fb      	strb	r3, [r7, #15]
 800c1d0:	e004      	b.n	800c1dc <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c1d2:	2302      	movs	r3, #2
 800c1d4:	73fb      	strb	r3, [r7, #15]
 800c1d6:	e001      	b.n	800c1dc <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c1d8:	2302      	movs	r3, #2
 800c1da:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c1dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3714      	adds	r7, #20
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e8:	4770      	bx	lr

0800c1ea <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c1ea:	b480      	push	{r7}
 800c1ec:	b085      	sub	sp, #20
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	6078      	str	r0, [r7, #4]
 800c1f2:	460b      	mov	r3, r1
 800c1f4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800c200:	78fa      	ldrb	r2, [r7, #3]
 800c202:	429a      	cmp	r2, r3
 800c204:	d204      	bcs.n	800c210 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	78fa      	ldrb	r2, [r7, #3]
 800c20a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800c20e:	e001      	b.n	800c214 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c210:	2302      	movs	r3, #2
 800c212:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c214:	7bfb      	ldrb	r3, [r7, #15]
}
 800c216:	4618      	mov	r0, r3
 800c218:	3714      	adds	r7, #20
 800c21a:	46bd      	mov	sp, r7
 800c21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c220:	4770      	bx	lr

0800c222 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c222:	b480      	push	{r7}
 800c224:	b087      	sub	sp, #28
 800c226:	af00      	add	r7, sp, #0
 800c228:	6078      	str	r0, [r7, #4]
 800c22a:	4608      	mov	r0, r1
 800c22c:	4611      	mov	r1, r2
 800c22e:	461a      	mov	r2, r3
 800c230:	4603      	mov	r3, r0
 800c232:	70fb      	strb	r3, [r7, #3]
 800c234:	460b      	mov	r3, r1
 800c236:	70bb      	strb	r3, [r7, #2]
 800c238:	4613      	mov	r3, r2
 800c23a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c23c:	2300      	movs	r3, #0
 800c23e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c240:	2300      	movs	r3, #0
 800c242:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800c24a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c24c:	e025      	b.n	800c29a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c24e:	7dfb      	ldrb	r3, [r7, #23]
 800c250:	221a      	movs	r2, #26
 800c252:	fb02 f303 	mul.w	r3, r2, r3
 800c256:	3308      	adds	r3, #8
 800c258:	68fa      	ldr	r2, [r7, #12]
 800c25a:	4413      	add	r3, r2
 800c25c:	3302      	adds	r3, #2
 800c25e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	795b      	ldrb	r3, [r3, #5]
 800c264:	78fa      	ldrb	r2, [r7, #3]
 800c266:	429a      	cmp	r2, r3
 800c268:	d002      	beq.n	800c270 <USBH_FindInterface+0x4e>
 800c26a:	78fb      	ldrb	r3, [r7, #3]
 800c26c:	2bff      	cmp	r3, #255	@ 0xff
 800c26e:	d111      	bne.n	800c294 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c274:	78ba      	ldrb	r2, [r7, #2]
 800c276:	429a      	cmp	r2, r3
 800c278:	d002      	beq.n	800c280 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c27a:	78bb      	ldrb	r3, [r7, #2]
 800c27c:	2bff      	cmp	r3, #255	@ 0xff
 800c27e:	d109      	bne.n	800c294 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c284:	787a      	ldrb	r2, [r7, #1]
 800c286:	429a      	cmp	r2, r3
 800c288:	d002      	beq.n	800c290 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c28a:	787b      	ldrb	r3, [r7, #1]
 800c28c:	2bff      	cmp	r3, #255	@ 0xff
 800c28e:	d101      	bne.n	800c294 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c290:	7dfb      	ldrb	r3, [r7, #23]
 800c292:	e006      	b.n	800c2a2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c294:	7dfb      	ldrb	r3, [r7, #23]
 800c296:	3301      	adds	r3, #1
 800c298:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c29a:	7dfb      	ldrb	r3, [r7, #23]
 800c29c:	2b01      	cmp	r3, #1
 800c29e:	d9d6      	bls.n	800c24e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c2a0:	23ff      	movs	r3, #255	@ 0xff
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	371c      	adds	r7, #28
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ac:	4770      	bx	lr

0800c2ae <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800c2ae:	b580      	push	{r7, lr}
 800c2b0:	b082      	sub	sp, #8
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f004 f956 	bl	8010568 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800c2bc:	2101      	movs	r1, #1
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f004 fa6f 	bl	80107a2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c2c4:	2300      	movs	r3, #0
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3708      	adds	r7, #8
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
	...

0800c2d0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b088      	sub	sp, #32
 800c2d4:	af04      	add	r7, sp, #16
 800c2d6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c2d8:	2302      	movs	r3, #2
 800c2da:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800c2e6:	b2db      	uxtb	r3, r3
 800c2e8:	2b01      	cmp	r3, #1
 800c2ea:	d102      	bne.n	800c2f2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2203      	movs	r2, #3
 800c2f0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	781b      	ldrb	r3, [r3, #0]
 800c2f6:	b2db      	uxtb	r3, r3
 800c2f8:	2b0b      	cmp	r3, #11
 800c2fa:	f200 8244 	bhi.w	800c786 <USBH_Process+0x4b6>
 800c2fe:	a201      	add	r2, pc, #4	@ (adr r2, 800c304 <USBH_Process+0x34>)
 800c300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c304:	0800c335 	.word	0x0800c335
 800c308:	0800c383 	.word	0x0800c383
 800c30c:	0800c407 	.word	0x0800c407
 800c310:	0800c705 	.word	0x0800c705
 800c314:	0800c787 	.word	0x0800c787
 800c318:	0800c4c3 	.word	0x0800c4c3
 800c31c:	0800c68f 	.word	0x0800c68f
 800c320:	0800c515 	.word	0x0800c515
 800c324:	0800c551 	.word	0x0800c551
 800c328:	0800c589 	.word	0x0800c589
 800c32c:	0800c5e7 	.word	0x0800c5e7
 800c330:	0800c6ed 	.word	0x0800c6ed
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800c33a:	b2db      	uxtb	r3, r3
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	f000 8224 	beq.w	800c78a <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2201      	movs	r2, #1
 800c346:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c348:	20c8      	movs	r0, #200	@ 0xc8
 800c34a:	f004 fa74 	bl	8010836 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f004 f967 	bl	8010622 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2200      	movs	r2, #0
 800c358:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2200      	movs	r2, #0
 800c360:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2201      	movs	r2, #1
 800c368:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c378:	2200      	movs	r2, #0
 800c37a:	4619      	mov	r1, r3
 800c37c:	f001 fdf4 	bl	800df68 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c380:	e203      	b.n	800c78a <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800c388:	2b01      	cmp	r3, #1
 800c38a:	d107      	bne.n	800c39c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2200      	movs	r2, #0
 800c390:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2202      	movs	r2, #2
 800c398:	701a      	strb	r2, [r3, #0]
 800c39a:	e025      	b.n	800c3e8 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800c3a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c3a6:	d914      	bls.n	800c3d2 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800c3ae:	3301      	adds	r3, #1
 800c3b0:	b2da      	uxtb	r2, r3
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800c3be:	2b03      	cmp	r3, #3
 800c3c0:	d903      	bls.n	800c3ca <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	220d      	movs	r2, #13
 800c3c6:	701a      	strb	r2, [r3, #0]
 800c3c8:	e00e      	b.n	800c3e8 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	701a      	strb	r2, [r3, #0]
 800c3d0:	e00a      	b.n	800c3e8 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800c3d8:	f103 020a 	add.w	r2, r3, #10
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800c3e2:	200a      	movs	r0, #10
 800c3e4:	f004 fa27 	bl	8010836 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	4619      	mov	r1, r3
 800c400:	f001 fdb2 	bl	800df68 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c404:	e1c8      	b.n	800c798 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d005      	beq.n	800c41c <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c416:	2104      	movs	r1, #4
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c41c:	2064      	movs	r0, #100	@ 0x64
 800c41e:	f004 fa0a 	bl	8010836 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f004 f8d6 	bl	80105d4 <USBH_LL_GetSpeed>
 800c428:	4603      	mov	r3, r0
 800c42a:	461a      	mov	r2, r3
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2205      	movs	r2, #5
 800c436:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c438:	2100      	movs	r1, #0
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f001 fc8b 	bl	800dd56 <USBH_AllocPipe>
 800c440:	4603      	mov	r3, r0
 800c442:	461a      	mov	r2, r3
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c448:	2180      	movs	r1, #128	@ 0x80
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f001 fc83 	bl	800dd56 <USBH_AllocPipe>
 800c450:	4603      	mov	r3, r0
 800c452:	461a      	mov	r2, r3
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	7919      	ldrb	r1, [r3, #4]
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c468:	687a      	ldr	r2, [r7, #4]
 800c46a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c46c:	9202      	str	r2, [sp, #8]
 800c46e:	2200      	movs	r2, #0
 800c470:	9201      	str	r2, [sp, #4]
 800c472:	9300      	str	r3, [sp, #0]
 800c474:	4603      	mov	r3, r0
 800c476:	2280      	movs	r2, #128	@ 0x80
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f001 fc3d 	bl	800dcf8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	7959      	ldrb	r1, [r3, #5]
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c48e:	687a      	ldr	r2, [r7, #4]
 800c490:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c492:	9202      	str	r2, [sp, #8]
 800c494:	2200      	movs	r2, #0
 800c496:	9201      	str	r2, [sp, #4]
 800c498:	9300      	str	r3, [sp, #0]
 800c49a:	4603      	mov	r3, r0
 800c49c:	2200      	movs	r2, #0
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f001 fc2a 	bl	800dcf8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	4619      	mov	r1, r3
 800c4bc:	f001 fd54 	bl	800df68 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c4c0:	e16a      	b.n	800c798 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f000 f96e 	bl	800c7a4 <USBH_HandleEnum>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c4cc:	7bbb      	ldrb	r3, [r7, #14]
 800c4ce:	b2db      	uxtb	r3, r3
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	f040 815c 	bne.w	800c78e <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d103      	bne.n	800c4f0 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2208      	movs	r2, #8
 800c4ec:	701a      	strb	r2, [r3, #0]
 800c4ee:	e002      	b.n	800c4f6 <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2207      	movs	r2, #7
 800c4f4:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2205      	movs	r2, #5
 800c4fa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c50a:	2200      	movs	r2, #0
 800c50c:	4619      	mov	r1, r3
 800c50e:	f001 fd2b 	bl	800df68 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c512:	e13c      	b.n	800c78e <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	f000 8139 	beq.w	800c792 <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c526:	2101      	movs	r1, #1
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2208      	movs	r2, #8
 800c530:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2205      	movs	r2, #5
 800c536:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c546:	2200      	movs	r2, #0
 800c548:	4619      	mov	r1, r3
 800c54a:	f001 fd0d 	bl	800df68 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800c54e:	e120      	b.n	800c792 <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800c556:	4619      	mov	r1, r3
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f000 fd10 	bl	800cf7e <USBH_SetCfg>
 800c55e:	4603      	mov	r3, r0
 800c560:	2b00      	cmp	r3, #0
 800c562:	d102      	bne.n	800c56a <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2209      	movs	r2, #9
 800c568:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2201      	movs	r2, #1
 800c56e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c57e:	2200      	movs	r2, #0
 800c580:	4619      	mov	r1, r3
 800c582:	f001 fcf1 	bl	800df68 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c586:	e107      	b.n	800c798 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800c58e:	f003 0320 	and.w	r3, r3, #32
 800c592:	2b00      	cmp	r3, #0
 800c594:	d015      	beq.n	800c5c2 <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800c596:	2101      	movs	r1, #1
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f000 fd13 	bl	800cfc4 <USBH_SetFeature>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c5a2:	7bbb      	ldrb	r3, [r7, #14]
 800c5a4:	b2db      	uxtb	r3, r3
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d103      	bne.n	800c5b2 <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	220a      	movs	r2, #10
 800c5ae:	701a      	strb	r2, [r3, #0]
 800c5b0:	e00a      	b.n	800c5c8 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800c5b2:	7bbb      	ldrb	r3, [r7, #14]
 800c5b4:	b2db      	uxtb	r3, r3
 800c5b6:	2b03      	cmp	r3, #3
 800c5b8:	d106      	bne.n	800c5c8 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	220a      	movs	r2, #10
 800c5be:	701a      	strb	r2, [r3, #0]
 800c5c0:	e002      	b.n	800c5c8 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	220a      	movs	r2, #10
 800c5c6:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c5dc:	2200      	movs	r2, #0
 800c5de:	4619      	mov	r1, r3
 800c5e0:	f001 fcc2 	bl	800df68 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c5e4:	e0d8      	b.n	800c798 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d03f      	beq.n	800c670 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	73fb      	strb	r3, [r7, #15]
 800c5fc:	e016      	b.n	800c62c <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c5fe:	7bfa      	ldrb	r2, [r7, #15]
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	32de      	adds	r2, #222	@ 0xde
 800c604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c608:	791a      	ldrb	r2, [r3, #4]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800c610:	429a      	cmp	r2, r3
 800c612:	d108      	bne.n	800c626 <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c614:	7bfa      	ldrb	r2, [r7, #15]
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	32de      	adds	r2, #222	@ 0xde
 800c61a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800c624:	e005      	b.n	800c632 <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c626:	7bfb      	ldrb	r3, [r7, #15]
 800c628:	3301      	adds	r3, #1
 800c62a:	73fb      	strb	r3, [r7, #15]
 800c62c:	7bfb      	ldrb	r3, [r7, #15]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d0e5      	beq.n	800c5fe <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d016      	beq.n	800c66a <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c642:	689b      	ldr	r3, [r3, #8]
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	4798      	blx	r3
 800c648:	4603      	mov	r3, r0
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d109      	bne.n	800c662 <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2206      	movs	r2, #6
 800c652:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c65a:	2103      	movs	r1, #3
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	4798      	blx	r3
 800c660:	e006      	b.n	800c670 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	220d      	movs	r2, #13
 800c666:	701a      	strb	r2, [r3, #0]
 800c668:	e002      	b.n	800c670 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	220d      	movs	r2, #13
 800c66e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2205      	movs	r2, #5
 800c674:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c684:	2200      	movs	r2, #0
 800c686:	4619      	mov	r1, r3
 800c688:	f001 fc6e 	bl	800df68 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c68c:	e084      	b.n	800c798 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c694:	2b00      	cmp	r3, #0
 800c696:	d017      	beq.n	800c6c8 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c69e:	691b      	ldr	r3, [r3, #16]
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	4798      	blx	r3
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c6a8:	7bbb      	ldrb	r3, [r7, #14]
 800c6aa:	b2db      	uxtb	r3, r3
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d103      	bne.n	800c6b8 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	220b      	movs	r2, #11
 800c6b4:	701a      	strb	r2, [r3, #0]
 800c6b6:	e00a      	b.n	800c6ce <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 800c6b8:	7bbb      	ldrb	r3, [r7, #14]
 800c6ba:	b2db      	uxtb	r3, r3
 800c6bc:	2b02      	cmp	r3, #2
 800c6be:	d106      	bne.n	800c6ce <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	220d      	movs	r2, #13
 800c6c4:	701a      	strb	r2, [r3, #0]
 800c6c6:	e002      	b.n	800c6ce <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	220d      	movs	r2, #13
 800c6cc:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2205      	movs	r2, #5
 800c6d2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	f001 fc3f 	bl	800df68 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c6ea:	e055      	b.n	800c798 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d04f      	beq.n	800c796 <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c6fc:	695b      	ldr	r3, [r3, #20]
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	4798      	blx	r3
      }
      break;
 800c702:	e048      	b.n	800c796 <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2200      	movs	r2, #0
 800c708:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f7ff fccf 	bl	800c0b0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d009      	beq.n	800c730 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c722:	68db      	ldr	r3, [r3, #12]
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2200      	movs	r2, #0
 800c72c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c736:	2b00      	cmp	r3, #0
 800c738:	d005      	beq.n	800c746 <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c740:	2105      	movs	r1, #5
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800c74c:	b2db      	uxtb	r3, r3
 800c74e:	2b01      	cmp	r3, #1
 800c750:	d107      	bne.n	800c762 <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2200      	movs	r2, #0
 800c756:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f7ff fda7 	bl	800c2ae <USBH_Start>
 800c760:	e002      	b.n	800c768 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f003 ff00 	bl	8010568 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2201      	movs	r2, #1
 800c76c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c77c:	2200      	movs	r2, #0
 800c77e:	4619      	mov	r1, r3
 800c780:	f001 fbf2 	bl	800df68 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c784:	e008      	b.n	800c798 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800c786:	bf00      	nop
 800c788:	e006      	b.n	800c798 <USBH_Process+0x4c8>
      break;
 800c78a:	bf00      	nop
 800c78c:	e004      	b.n	800c798 <USBH_Process+0x4c8>
      break;
 800c78e:	bf00      	nop
 800c790:	e002      	b.n	800c798 <USBH_Process+0x4c8>
    break;
 800c792:	bf00      	nop
 800c794:	e000      	b.n	800c798 <USBH_Process+0x4c8>
      break;
 800c796:	bf00      	nop
  }
  return USBH_OK;
 800c798:	2300      	movs	r3, #0
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3710      	adds	r7, #16
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}
 800c7a2:	bf00      	nop

0800c7a4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b088      	sub	sp, #32
 800c7a8:	af04      	add	r7, sp, #16
 800c7aa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	785b      	ldrb	r3, [r3, #1]
 800c7b8:	2b07      	cmp	r3, #7
 800c7ba:	f200 8204 	bhi.w	800cbc6 <USBH_HandleEnum+0x422>
 800c7be:	a201      	add	r2, pc, #4	@ (adr r2, 800c7c4 <USBH_HandleEnum+0x20>)
 800c7c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7c4:	0800c7e5 	.word	0x0800c7e5
 800c7c8:	0800c89f 	.word	0x0800c89f
 800c7cc:	0800c909 	.word	0x0800c909
 800c7d0:	0800c993 	.word	0x0800c993
 800c7d4:	0800c9fd 	.word	0x0800c9fd
 800c7d8:	0800ca6d 	.word	0x0800ca6d
 800c7dc:	0800cb09 	.word	0x0800cb09
 800c7e0:	0800cb87 	.word	0x0800cb87
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c7e4:	2108      	movs	r1, #8
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f000 fae6 	bl	800cdb8 <USBH_Get_DevDesc>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c7f0:	7bbb      	ldrb	r3, [r7, #14]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d12e      	bne.n	800c854 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2201      	movs	r2, #1
 800c804:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	7919      	ldrb	r1, [r3, #4]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c816:	687a      	ldr	r2, [r7, #4]
 800c818:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c81a:	9202      	str	r2, [sp, #8]
 800c81c:	2200      	movs	r2, #0
 800c81e:	9201      	str	r2, [sp, #4]
 800c820:	9300      	str	r3, [sp, #0]
 800c822:	4603      	mov	r3, r0
 800c824:	2280      	movs	r2, #128	@ 0x80
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f001 fa66 	bl	800dcf8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	7959      	ldrb	r1, [r3, #5]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c83c:	687a      	ldr	r2, [r7, #4]
 800c83e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c840:	9202      	str	r2, [sp, #8]
 800c842:	2200      	movs	r2, #0
 800c844:	9201      	str	r2, [sp, #4]
 800c846:	9300      	str	r3, [sp, #0]
 800c848:	4603      	mov	r3, r0
 800c84a:	2200      	movs	r2, #0
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f001 fa53 	bl	800dcf8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c852:	e1ba      	b.n	800cbca <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c854:	7bbb      	ldrb	r3, [r7, #14]
 800c856:	2b03      	cmp	r3, #3
 800c858:	f040 81b7 	bne.w	800cbca <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c862:	3301      	adds	r3, #1
 800c864:	b2da      	uxtb	r2, r3
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c872:	2b03      	cmp	r3, #3
 800c874:	d903      	bls.n	800c87e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	220d      	movs	r2, #13
 800c87a:	701a      	strb	r2, [r3, #0]
      break;
 800c87c:	e1a5      	b.n	800cbca <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	795b      	ldrb	r3, [r3, #5]
 800c882:	4619      	mov	r1, r3
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f001 fa87 	bl	800dd98 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	791b      	ldrb	r3, [r3, #4]
 800c88e:	4619      	mov	r1, r3
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f001 fa81 	bl	800dd98 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2200      	movs	r2, #0
 800c89a:	701a      	strb	r2, [r3, #0]
      break;
 800c89c:	e195      	b.n	800cbca <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c89e:	2112      	movs	r1, #18
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f000 fa89 	bl	800cdb8 <USBH_Get_DevDesc>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c8aa:	7bbb      	ldrb	r3, [r7, #14]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d103      	bne.n	800c8b8 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2202      	movs	r2, #2
 800c8b4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c8b6:	e18a      	b.n	800cbce <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c8b8:	7bbb      	ldrb	r3, [r7, #14]
 800c8ba:	2b03      	cmp	r3, #3
 800c8bc:	f040 8187 	bne.w	800cbce <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	b2da      	uxtb	r2, r3
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c8d6:	2b03      	cmp	r3, #3
 800c8d8:	d903      	bls.n	800c8e2 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	220d      	movs	r2, #13
 800c8de:	701a      	strb	r2, [r3, #0]
      break;
 800c8e0:	e175      	b.n	800cbce <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	795b      	ldrb	r3, [r3, #5]
 800c8e6:	4619      	mov	r1, r3
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f001 fa55 	bl	800dd98 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	791b      	ldrb	r3, [r3, #4]
 800c8f2:	4619      	mov	r1, r3
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f001 fa4f 	bl	800dd98 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2200      	movs	r2, #0
 800c904:	701a      	strb	r2, [r3, #0]
      break;
 800c906:	e162      	b.n	800cbce <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c908:	2101      	movs	r1, #1
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f000 fb13 	bl	800cf36 <USBH_SetAddress>
 800c910:	4603      	mov	r3, r0
 800c912:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c914:	7bbb      	ldrb	r3, [r7, #14]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d130      	bne.n	800c97c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800c91a:	2002      	movs	r0, #2
 800c91c:	f003 ff8b 	bl	8010836 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2201      	movs	r2, #1
 800c924:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2203      	movs	r2, #3
 800c92c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	7919      	ldrb	r1, [r3, #4]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c93e:	687a      	ldr	r2, [r7, #4]
 800c940:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c942:	9202      	str	r2, [sp, #8]
 800c944:	2200      	movs	r2, #0
 800c946:	9201      	str	r2, [sp, #4]
 800c948:	9300      	str	r3, [sp, #0]
 800c94a:	4603      	mov	r3, r0
 800c94c:	2280      	movs	r2, #128	@ 0x80
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f001 f9d2 	bl	800dcf8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	7959      	ldrb	r1, [r3, #5]
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c964:	687a      	ldr	r2, [r7, #4]
 800c966:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c968:	9202      	str	r2, [sp, #8]
 800c96a:	2200      	movs	r2, #0
 800c96c:	9201      	str	r2, [sp, #4]
 800c96e:	9300      	str	r3, [sp, #0]
 800c970:	4603      	mov	r3, r0
 800c972:	2200      	movs	r2, #0
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f001 f9bf 	bl	800dcf8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c97a:	e12a      	b.n	800cbd2 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c97c:	7bbb      	ldrb	r3, [r7, #14]
 800c97e:	2b03      	cmp	r3, #3
 800c980:	f040 8127 	bne.w	800cbd2 <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	220d      	movs	r2, #13
 800c988:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2200      	movs	r2, #0
 800c98e:	705a      	strb	r2, [r3, #1]
      break;
 800c990:	e11f      	b.n	800cbd2 <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c992:	2109      	movs	r1, #9
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f000 fa3b 	bl	800ce10 <USBH_Get_CfgDesc>
 800c99a:	4603      	mov	r3, r0
 800c99c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c99e:	7bbb      	ldrb	r3, [r7, #14]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d103      	bne.n	800c9ac <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2204      	movs	r2, #4
 800c9a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c9aa:	e114      	b.n	800cbd6 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c9ac:	7bbb      	ldrb	r3, [r7, #14]
 800c9ae:	2b03      	cmp	r3, #3
 800c9b0:	f040 8111 	bne.w	800cbd6 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	b2da      	uxtb	r2, r3
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c9ca:	2b03      	cmp	r3, #3
 800c9cc:	d903      	bls.n	800c9d6 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	220d      	movs	r2, #13
 800c9d2:	701a      	strb	r2, [r3, #0]
      break;
 800c9d4:	e0ff      	b.n	800cbd6 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	795b      	ldrb	r3, [r3, #5]
 800c9da:	4619      	mov	r1, r3
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f001 f9db 	bl	800dd98 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	791b      	ldrb	r3, [r3, #4]
 800c9e6:	4619      	mov	r1, r3
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f001 f9d5 	bl	800dd98 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	701a      	strb	r2, [r3, #0]
      break;
 800c9fa:	e0ec      	b.n	800cbd6 <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800ca02:	4619      	mov	r1, r3
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f000 fa03 	bl	800ce10 <USBH_Get_CfgDesc>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ca0e:	7bbb      	ldrb	r3, [r7, #14]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d103      	bne.n	800ca1c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2205      	movs	r2, #5
 800ca18:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ca1a:	e0de      	b.n	800cbda <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ca1c:	7bbb      	ldrb	r3, [r7, #14]
 800ca1e:	2b03      	cmp	r3, #3
 800ca20:	f040 80db 	bne.w	800cbda <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ca2a:	3301      	adds	r3, #1
 800ca2c:	b2da      	uxtb	r2, r3
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ca3a:	2b03      	cmp	r3, #3
 800ca3c:	d903      	bls.n	800ca46 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	220d      	movs	r2, #13
 800ca42:	701a      	strb	r2, [r3, #0]
      break;
 800ca44:	e0c9      	b.n	800cbda <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	795b      	ldrb	r3, [r3, #5]
 800ca4a:	4619      	mov	r1, r3
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f001 f9a3 	bl	800dd98 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	791b      	ldrb	r3, [r3, #4]
 800ca56:	4619      	mov	r1, r3
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f001 f99d 	bl	800dd98 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2200      	movs	r2, #0
 800ca62:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2200      	movs	r2, #0
 800ca68:	701a      	strb	r2, [r3, #0]
      break;
 800ca6a:	e0b6      	b.n	800cbda <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d036      	beq.n	800cae4 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ca82:	23ff      	movs	r3, #255	@ 0xff
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f000 f9ed 	bl	800ce64 <USBH_Get_StringDesc>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ca8e:	7bbb      	ldrb	r3, [r7, #14]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d111      	bne.n	800cab8 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2206      	movs	r2, #6
 800ca98:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2205      	movs	r2, #5
 800ca9e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800caae:	2200      	movs	r2, #0
 800cab0:	4619      	mov	r1, r3
 800cab2:	f001 fa59 	bl	800df68 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cab6:	e092      	b.n	800cbde <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cab8:	7bbb      	ldrb	r3, [r7, #14]
 800caba:	2b03      	cmp	r3, #3
 800cabc:	f040 808f 	bne.w	800cbde <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2206      	movs	r2, #6
 800cac4:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2205      	movs	r2, #5
 800caca:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800cada:	2200      	movs	r2, #0
 800cadc:	4619      	mov	r1, r3
 800cade:	f001 fa43 	bl	800df68 <osMessagePut>
      break;
 800cae2:	e07c      	b.n	800cbde <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2206      	movs	r2, #6
 800cae8:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2205      	movs	r2, #5
 800caee:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800cafe:	2200      	movs	r2, #0
 800cb00:	4619      	mov	r1, r3
 800cb02:	f001 fa31 	bl	800df68 <osMessagePut>
      break;
 800cb06:	e06a      	b.n	800cbde <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d027      	beq.n	800cb62 <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800cb1e:	23ff      	movs	r3, #255	@ 0xff
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f000 f99f 	bl	800ce64 <USBH_Get_StringDesc>
 800cb26:	4603      	mov	r3, r0
 800cb28:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cb2a:	7bbb      	ldrb	r3, [r7, #14]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d103      	bne.n	800cb38 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2207      	movs	r2, #7
 800cb34:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cb36:	e054      	b.n	800cbe2 <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cb38:	7bbb      	ldrb	r3, [r7, #14]
 800cb3a:	2b03      	cmp	r3, #3
 800cb3c:	d151      	bne.n	800cbe2 <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2207      	movs	r2, #7
 800cb42:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2205      	movs	r2, #5
 800cb48:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800cb58:	2200      	movs	r2, #0
 800cb5a:	4619      	mov	r1, r3
 800cb5c:	f001 fa04 	bl	800df68 <osMessagePut>
      break;
 800cb60:	e03f      	b.n	800cbe2 <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2207      	movs	r2, #7
 800cb66:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2205      	movs	r2, #5
 800cb6c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	4619      	mov	r1, r3
 800cb80:	f001 f9f2 	bl	800df68 <osMessagePut>
      break;
 800cb84:	e02d      	b.n	800cbe2 <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d017      	beq.n	800cbc0 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cb9c:	23ff      	movs	r3, #255	@ 0xff
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f000 f960 	bl	800ce64 <USBH_Get_StringDesc>
 800cba4:	4603      	mov	r3, r0
 800cba6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cba8:	7bbb      	ldrb	r3, [r7, #14]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d102      	bne.n	800cbb4 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800cbb2:	e018      	b.n	800cbe6 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cbb4:	7bbb      	ldrb	r3, [r7, #14]
 800cbb6:	2b03      	cmp	r3, #3
 800cbb8:	d115      	bne.n	800cbe6 <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	73fb      	strb	r3, [r7, #15]
      break;
 800cbbe:	e012      	b.n	800cbe6 <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	73fb      	strb	r3, [r7, #15]
      break;
 800cbc4:	e00f      	b.n	800cbe6 <USBH_HandleEnum+0x442>

    default:
      break;
 800cbc6:	bf00      	nop
 800cbc8:	e00e      	b.n	800cbe8 <USBH_HandleEnum+0x444>
      break;
 800cbca:	bf00      	nop
 800cbcc:	e00c      	b.n	800cbe8 <USBH_HandleEnum+0x444>
      break;
 800cbce:	bf00      	nop
 800cbd0:	e00a      	b.n	800cbe8 <USBH_HandleEnum+0x444>
      break;
 800cbd2:	bf00      	nop
 800cbd4:	e008      	b.n	800cbe8 <USBH_HandleEnum+0x444>
      break;
 800cbd6:	bf00      	nop
 800cbd8:	e006      	b.n	800cbe8 <USBH_HandleEnum+0x444>
      break;
 800cbda:	bf00      	nop
 800cbdc:	e004      	b.n	800cbe8 <USBH_HandleEnum+0x444>
      break;
 800cbde:	bf00      	nop
 800cbe0:	e002      	b.n	800cbe8 <USBH_HandleEnum+0x444>
      break;
 800cbe2:	bf00      	nop
 800cbe4:	e000      	b.n	800cbe8 <USBH_HandleEnum+0x444>
      break;
 800cbe6:	bf00      	nop
  }
  return Status;
 800cbe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3710      	adds	r7, #16
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
 800cbf2:	bf00      	nop

0800cbf4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b083      	sub	sp, #12
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
 800cbfc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	683a      	ldr	r2, [r7, #0]
 800cc02:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800cc06:	bf00      	nop
 800cc08:	370c      	adds	r7, #12
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc10:	4770      	bx	lr

0800cc12 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800cc12:	b580      	push	{r7, lr}
 800cc14:	b082      	sub	sp, #8
 800cc16:	af00      	add	r7, sp, #0
 800cc18:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800cc20:	1c5a      	adds	r2, r3, #1
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f000 f804 	bl	800cc36 <USBH_HandleSof>
}
 800cc2e:	bf00      	nop
 800cc30:	3708      	adds	r7, #8
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}

0800cc36 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800cc36:	b580      	push	{r7, lr}
 800cc38:	b082      	sub	sp, #8
 800cc3a:	af00      	add	r7, sp, #0
 800cc3c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	781b      	ldrb	r3, [r3, #0]
 800cc42:	b2db      	uxtb	r3, r3
 800cc44:	2b0b      	cmp	r3, #11
 800cc46:	d10a      	bne.n	800cc5e <USBH_HandleSof+0x28>
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d005      	beq.n	800cc5e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cc58:	699b      	ldr	r3, [r3, #24]
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	4798      	blx	r3
  }
}
 800cc5e:	bf00      	nop
 800cc60:	3708      	adds	r7, #8
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}

0800cc66 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800cc66:	b580      	push	{r7, lr}
 800cc68:	b082      	sub	sp, #8
 800cc6a:	af00      	add	r7, sp, #0
 800cc6c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2201      	movs	r2, #1
 800cc72:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	2201      	movs	r2, #1
 800cc7a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	4619      	mov	r1, r3
 800cc8e:	f001 f96b 	bl	800df68 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800cc92:	bf00      	nop
}
 800cc94:	3708      	adds	r7, #8
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}

0800cc9a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800cc9a:	b480      	push	{r7}
 800cc9c:	b083      	sub	sp, #12
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2200      	movs	r2, #0
 800cca6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800ccaa:	bf00      	nop
}
 800ccac:	370c      	adds	r7, #12
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb4:	4770      	bx	lr

0800ccb6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ccb6:	b580      	push	{r7, lr}
 800ccb8:	b082      	sub	sp, #8
 800ccba:	af00      	add	r7, sp, #0
 800ccbc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2201      	movs	r2, #1
 800ccc2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2201      	movs	r2, #1
 800ccda:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800ccea:	2200      	movs	r2, #0
 800ccec:	4619      	mov	r1, r3
 800ccee:	f001 f93b 	bl	800df68 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800ccf2:	2300      	movs	r3, #0
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3708      	adds	r7, #8
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}

0800ccfc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b082      	sub	sp, #8
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2201      	movs	r2, #1
 800cd08:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2200      	movs	r2, #0
 800cd18:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f003 fc3e 	bl	801059e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	791b      	ldrb	r3, [r3, #4]
 800cd26:	4619      	mov	r1, r3
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f001 f835 	bl	800dd98 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	795b      	ldrb	r3, [r3, #5]
 800cd32:	4619      	mov	r1, r3
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f001 f82f 	bl	800dd98 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2201      	movs	r2, #1
 800cd3e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800cd4e:	2200      	movs	r2, #0
 800cd50:	4619      	mov	r1, r3
 800cd52:	f001 f909 	bl	800df68 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800cd56:	2300      	movs	r3, #0
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3708      	adds	r7, #8
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}

0800cd60 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b086      	sub	sp, #24
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 800cd6e:	f107 030c 	add.w	r3, r7, #12
 800cd72:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cd76:	4618      	mov	r0, r3
 800cd78:	f001 f936 	bl	800dfe8 <osMessageGet>
    if (event.status == osEventMessage)
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	2b10      	cmp	r3, #16
 800cd80:	d1f2      	bne.n	800cd68 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f7ff faa4 	bl	800c2d0 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800cd88:	e7ee      	b.n	800cd68 <USBH_Process_OS+0x8>

0800cd8a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800cd8a:	b580      	push	{r7, lr}
 800cd8c:	b082      	sub	sp, #8
 800cd8e:	af00      	add	r7, sp, #0
 800cd90:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2201      	movs	r2, #1
 800cd96:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800cda6:	2200      	movs	r2, #0
 800cda8:	4619      	mov	r1, r3
 800cdaa:	f001 f8dd 	bl	800df68 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800cdae:	2300      	movs	r3, #0
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3708      	adds	r7, #8
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}

0800cdb8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b086      	sub	sp, #24
 800cdbc:	af02      	add	r7, sp, #8
 800cdbe:	6078      	str	r0, [r7, #4]
 800cdc0:	460b      	mov	r3, r1
 800cdc2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800cdc4:	887b      	ldrh	r3, [r7, #2]
 800cdc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cdca:	d901      	bls.n	800cdd0 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800cdcc:	2303      	movs	r3, #3
 800cdce:	e01b      	b.n	800ce08 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800cdd6:	887b      	ldrh	r3, [r7, #2]
 800cdd8:	9300      	str	r3, [sp, #0]
 800cdda:	4613      	mov	r3, r2
 800cddc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cde0:	2100      	movs	r1, #0
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f000 f872 	bl	800cecc <USBH_GetDescriptor>
 800cde8:	4603      	mov	r3, r0
 800cdea:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800cdec:	7bfb      	ldrb	r3, [r7, #15]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d109      	bne.n	800ce06 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800cdf8:	887a      	ldrh	r2, [r7, #2]
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f000 f929 	bl	800d054 <USBH_ParseDevDesc>
 800ce02:	4603      	mov	r3, r0
 800ce04:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ce06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3710      	adds	r7, #16
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}

0800ce10 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b086      	sub	sp, #24
 800ce14:	af02      	add	r7, sp, #8
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	460b      	mov	r3, r1
 800ce1a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	331c      	adds	r3, #28
 800ce20:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800ce22:	887b      	ldrh	r3, [r7, #2]
 800ce24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce28:	d901      	bls.n	800ce2e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800ce2a:	2303      	movs	r3, #3
 800ce2c:	e016      	b.n	800ce5c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ce2e:	887b      	ldrh	r3, [r7, #2]
 800ce30:	9300      	str	r3, [sp, #0]
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ce38:	2100      	movs	r1, #0
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f000 f846 	bl	800cecc <USBH_GetDescriptor>
 800ce40:	4603      	mov	r3, r0
 800ce42:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800ce44:	7bfb      	ldrb	r3, [r7, #15]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d107      	bne.n	800ce5a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800ce4a:	887b      	ldrh	r3, [r7, #2]
 800ce4c:	461a      	mov	r2, r3
 800ce4e:	68b9      	ldr	r1, [r7, #8]
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f000 f9af 	bl	800d1b4 <USBH_ParseCfgDesc>
 800ce56:	4603      	mov	r3, r0
 800ce58:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ce5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3710      	adds	r7, #16
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}

0800ce64 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b088      	sub	sp, #32
 800ce68:	af02      	add	r7, sp, #8
 800ce6a:	60f8      	str	r0, [r7, #12]
 800ce6c:	607a      	str	r2, [r7, #4]
 800ce6e:	461a      	mov	r2, r3
 800ce70:	460b      	mov	r3, r1
 800ce72:	72fb      	strb	r3, [r7, #11]
 800ce74:	4613      	mov	r3, r2
 800ce76:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800ce78:	893b      	ldrh	r3, [r7, #8]
 800ce7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce7e:	d802      	bhi.n	800ce86 <USBH_Get_StringDesc+0x22>
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d101      	bne.n	800ce8a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800ce86:	2303      	movs	r3, #3
 800ce88:	e01c      	b.n	800cec4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800ce8a:	7afb      	ldrb	r3, [r7, #11]
 800ce8c:	b29b      	uxth	r3, r3
 800ce8e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800ce92:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800ce9a:	893b      	ldrh	r3, [r7, #8]
 800ce9c:	9300      	str	r3, [sp, #0]
 800ce9e:	460b      	mov	r3, r1
 800cea0:	2100      	movs	r1, #0
 800cea2:	68f8      	ldr	r0, [r7, #12]
 800cea4:	f000 f812 	bl	800cecc <USBH_GetDescriptor>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800ceac:	7dfb      	ldrb	r3, [r7, #23]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d107      	bne.n	800cec2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ceb8:	893a      	ldrh	r2, [r7, #8]
 800ceba:	6879      	ldr	r1, [r7, #4]
 800cebc:	4618      	mov	r0, r3
 800cebe:	f000 fb8d 	bl	800d5dc <USBH_ParseStringDesc>
  }

  return status;
 800cec2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	3718      	adds	r7, #24
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}

0800cecc <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b084      	sub	sp, #16
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	60f8      	str	r0, [r7, #12]
 800ced4:	607b      	str	r3, [r7, #4]
 800ced6:	460b      	mov	r3, r1
 800ced8:	72fb      	strb	r3, [r7, #11]
 800ceda:	4613      	mov	r3, r2
 800cedc:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	789b      	ldrb	r3, [r3, #2]
 800cee2:	2b01      	cmp	r3, #1
 800cee4:	d11c      	bne.n	800cf20 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800cee6:	7afb      	ldrb	r3, [r7, #11]
 800cee8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ceec:	b2da      	uxtb	r2, r3
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	2206      	movs	r2, #6
 800cef6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	893a      	ldrh	r2, [r7, #8]
 800cefc:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800cefe:	893b      	ldrh	r3, [r7, #8]
 800cf00:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800cf04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cf08:	d104      	bne.n	800cf14 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	f240 4209 	movw	r2, #1033	@ 0x409
 800cf10:	829a      	strh	r2, [r3, #20]
 800cf12:	e002      	b.n	800cf1a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2200      	movs	r2, #0
 800cf18:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	8b3a      	ldrh	r2, [r7, #24]
 800cf1e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800cf20:	8b3b      	ldrh	r3, [r7, #24]
 800cf22:	461a      	mov	r2, r3
 800cf24:	6879      	ldr	r1, [r7, #4]
 800cf26:	68f8      	ldr	r0, [r7, #12]
 800cf28:	f000 fba5 	bl	800d676 <USBH_CtlReq>
 800cf2c:	4603      	mov	r3, r0
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3710      	adds	r7, #16
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}

0800cf36 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800cf36:	b580      	push	{r7, lr}
 800cf38:	b082      	sub	sp, #8
 800cf3a:	af00      	add	r7, sp, #0
 800cf3c:	6078      	str	r0, [r7, #4]
 800cf3e:	460b      	mov	r3, r1
 800cf40:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	789b      	ldrb	r3, [r3, #2]
 800cf46:	2b01      	cmp	r3, #1
 800cf48:	d10f      	bne.n	800cf6a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2205      	movs	r2, #5
 800cf54:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800cf56:	78fb      	ldrb	r3, [r7, #3]
 800cf58:	b29a      	uxth	r2, r3
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2200      	movs	r2, #0
 800cf62:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2200      	movs	r2, #0
 800cf68:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	2100      	movs	r1, #0
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f000 fb81 	bl	800d676 <USBH_CtlReq>
 800cf74:	4603      	mov	r3, r0
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3708      	adds	r7, #8
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}

0800cf7e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800cf7e:	b580      	push	{r7, lr}
 800cf80:	b082      	sub	sp, #8
 800cf82:	af00      	add	r7, sp, #0
 800cf84:	6078      	str	r0, [r7, #4]
 800cf86:	460b      	mov	r3, r1
 800cf88:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	789b      	ldrb	r3, [r3, #2]
 800cf8e:	2b01      	cmp	r3, #1
 800cf90:	d10e      	bne.n	800cfb0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2200      	movs	r2, #0
 800cf96:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2209      	movs	r2, #9
 800cf9c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	887a      	ldrh	r2, [r7, #2]
 800cfa2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2200      	movs	r2, #0
 800cfae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	2100      	movs	r1, #0
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f000 fb5e 	bl	800d676 <USBH_CtlReq>
 800cfba:	4603      	mov	r3, r0
}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	3708      	adds	r7, #8
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}

0800cfc4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b082      	sub	sp, #8
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
 800cfcc:	460b      	mov	r3, r1
 800cfce:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	789b      	ldrb	r3, [r3, #2]
 800cfd4:	2b01      	cmp	r3, #1
 800cfd6:	d10f      	bne.n	800cff8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2203      	movs	r2, #3
 800cfe2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800cfe4:	78fb      	ldrb	r3, [r7, #3]
 800cfe6:	b29a      	uxth	r2, r3
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2200      	movs	r2, #0
 800cff0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2200      	movs	r2, #0
 800cff6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800cff8:	2200      	movs	r2, #0
 800cffa:	2100      	movs	r1, #0
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f000 fb3a 	bl	800d676 <USBH_CtlReq>
 800d002:	4603      	mov	r3, r0
}
 800d004:	4618      	mov	r0, r3
 800d006:	3708      	adds	r7, #8
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}

0800d00c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b082      	sub	sp, #8
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	460b      	mov	r3, r1
 800d016:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	789b      	ldrb	r3, [r3, #2]
 800d01c:	2b01      	cmp	r3, #1
 800d01e:	d10f      	bne.n	800d040 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2202      	movs	r2, #2
 800d024:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2201      	movs	r2, #1
 800d02a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2200      	movs	r2, #0
 800d030:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d032:	78fb      	ldrb	r3, [r7, #3]
 800d034:	b29a      	uxth	r2, r3
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2200      	movs	r2, #0
 800d03e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d040:	2200      	movs	r2, #0
 800d042:	2100      	movs	r1, #0
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f000 fb16 	bl	800d676 <USBH_CtlReq>
 800d04a:	4603      	mov	r3, r0
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	3708      	adds	r7, #8
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}

0800d054 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d054:	b480      	push	{r7}
 800d056:	b087      	sub	sp, #28
 800d058:	af00      	add	r7, sp, #0
 800d05a:	60f8      	str	r0, [r7, #12]
 800d05c:	60b9      	str	r1, [r7, #8]
 800d05e:	4613      	mov	r3, r2
 800d060:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800d068:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800d06a:	2300      	movs	r3, #0
 800d06c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d101      	bne.n	800d078 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800d074:	2302      	movs	r3, #2
 800d076:	e094      	b.n	800d1a2 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	781a      	ldrb	r2, [r3, #0]
 800d07c:	693b      	ldr	r3, [r7, #16]
 800d07e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	785a      	ldrb	r2, [r3, #1]
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	3302      	adds	r3, #2
 800d08c:	781b      	ldrb	r3, [r3, #0]
 800d08e:	461a      	mov	r2, r3
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	3303      	adds	r3, #3
 800d094:	781b      	ldrb	r3, [r3, #0]
 800d096:	021b      	lsls	r3, r3, #8
 800d098:	b29b      	uxth	r3, r3
 800d09a:	4313      	orrs	r3, r2
 800d09c:	b29a      	uxth	r2, r3
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	791a      	ldrb	r2, [r3, #4]
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	795a      	ldrb	r2, [r3, #5]
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	799a      	ldrb	r2, [r3, #6]
 800d0b6:	693b      	ldr	r3, [r7, #16]
 800d0b8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	79da      	ldrb	r2, [r3, #7]
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d004      	beq.n	800d0d6 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d0d2:	2b01      	cmp	r3, #1
 800d0d4:	d11b      	bne.n	800d10e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	79db      	ldrb	r3, [r3, #7]
 800d0da:	2b20      	cmp	r3, #32
 800d0dc:	dc0f      	bgt.n	800d0fe <USBH_ParseDevDesc+0xaa>
 800d0de:	2b08      	cmp	r3, #8
 800d0e0:	db0f      	blt.n	800d102 <USBH_ParseDevDesc+0xae>
 800d0e2:	3b08      	subs	r3, #8
 800d0e4:	4a32      	ldr	r2, [pc, #200]	@ (800d1b0 <USBH_ParseDevDesc+0x15c>)
 800d0e6:	fa22 f303 	lsr.w	r3, r2, r3
 800d0ea:	f003 0301 	and.w	r3, r3, #1
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	bf14      	ite	ne
 800d0f2:	2301      	movne	r3, #1
 800d0f4:	2300      	moveq	r3, #0
 800d0f6:	b2db      	uxtb	r3, r3
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d106      	bne.n	800d10a <USBH_ParseDevDesc+0xb6>
 800d0fc:	e001      	b.n	800d102 <USBH_ParseDevDesc+0xae>
 800d0fe:	2b40      	cmp	r3, #64	@ 0x40
 800d100:	d003      	beq.n	800d10a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	2208      	movs	r2, #8
 800d106:	71da      	strb	r2, [r3, #7]
        break;
 800d108:	e000      	b.n	800d10c <USBH_ParseDevDesc+0xb8>
        break;
 800d10a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800d10c:	e00e      	b.n	800d12c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d114:	2b02      	cmp	r3, #2
 800d116:	d107      	bne.n	800d128 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	79db      	ldrb	r3, [r3, #7]
 800d11c:	2b08      	cmp	r3, #8
 800d11e:	d005      	beq.n	800d12c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	2208      	movs	r2, #8
 800d124:	71da      	strb	r2, [r3, #7]
 800d126:	e001      	b.n	800d12c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800d128:	2303      	movs	r3, #3
 800d12a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800d12c:	88fb      	ldrh	r3, [r7, #6]
 800d12e:	2b08      	cmp	r3, #8
 800d130:	d936      	bls.n	800d1a0 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	3308      	adds	r3, #8
 800d136:	781b      	ldrb	r3, [r3, #0]
 800d138:	461a      	mov	r2, r3
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	3309      	adds	r3, #9
 800d13e:	781b      	ldrb	r3, [r3, #0]
 800d140:	021b      	lsls	r3, r3, #8
 800d142:	b29b      	uxth	r3, r3
 800d144:	4313      	orrs	r3, r2
 800d146:	b29a      	uxth	r2, r3
 800d148:	693b      	ldr	r3, [r7, #16]
 800d14a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	330a      	adds	r3, #10
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	461a      	mov	r2, r3
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	330b      	adds	r3, #11
 800d158:	781b      	ldrb	r3, [r3, #0]
 800d15a:	021b      	lsls	r3, r3, #8
 800d15c:	b29b      	uxth	r3, r3
 800d15e:	4313      	orrs	r3, r2
 800d160:	b29a      	uxth	r2, r3
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	330c      	adds	r3, #12
 800d16a:	781b      	ldrb	r3, [r3, #0]
 800d16c:	461a      	mov	r2, r3
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	330d      	adds	r3, #13
 800d172:	781b      	ldrb	r3, [r3, #0]
 800d174:	021b      	lsls	r3, r3, #8
 800d176:	b29b      	uxth	r3, r3
 800d178:	4313      	orrs	r3, r2
 800d17a:	b29a      	uxth	r2, r3
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	7b9a      	ldrb	r2, [r3, #14]
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	7bda      	ldrb	r2, [r3, #15]
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	7c1a      	ldrb	r2, [r3, #16]
 800d194:	693b      	ldr	r3, [r7, #16]
 800d196:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	7c5a      	ldrb	r2, [r3, #17]
 800d19c:	693b      	ldr	r3, [r7, #16]
 800d19e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800d1a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	371c      	adds	r7, #28
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ac:	4770      	bx	lr
 800d1ae:	bf00      	nop
 800d1b0:	01000101 	.word	0x01000101

0800d1b4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b08c      	sub	sp, #48	@ 0x30
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	60f8      	str	r0, [r7, #12]
 800d1bc:	60b9      	str	r1, [r7, #8]
 800d1be:	4613      	mov	r3, r2
 800d1c0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800d1c8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d101      	bne.n	800d1e6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800d1e2:	2302      	movs	r3, #2
 800d1e4:	e0da      	b.n	800d39c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800d1ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1ec:	781b      	ldrb	r3, [r3, #0]
 800d1ee:	2b09      	cmp	r3, #9
 800d1f0:	d002      	beq.n	800d1f8 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800d1f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1f4:	2209      	movs	r2, #9
 800d1f6:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	781a      	ldrb	r2, [r3, #0]
 800d1fc:	6a3b      	ldr	r3, [r7, #32]
 800d1fe:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	785a      	ldrb	r2, [r3, #1]
 800d204:	6a3b      	ldr	r3, [r7, #32]
 800d206:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	3302      	adds	r3, #2
 800d20c:	781b      	ldrb	r3, [r3, #0]
 800d20e:	461a      	mov	r2, r3
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	3303      	adds	r3, #3
 800d214:	781b      	ldrb	r3, [r3, #0]
 800d216:	021b      	lsls	r3, r3, #8
 800d218:	b29b      	uxth	r3, r3
 800d21a:	4313      	orrs	r3, r2
 800d21c:	b29b      	uxth	r3, r3
 800d21e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d222:	bf28      	it	cs
 800d224:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800d228:	b29a      	uxth	r2, r3
 800d22a:	6a3b      	ldr	r3, [r7, #32]
 800d22c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	791a      	ldrb	r2, [r3, #4]
 800d232:	6a3b      	ldr	r3, [r7, #32]
 800d234:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	795a      	ldrb	r2, [r3, #5]
 800d23a:	6a3b      	ldr	r3, [r7, #32]
 800d23c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	799a      	ldrb	r2, [r3, #6]
 800d242:	6a3b      	ldr	r3, [r7, #32]
 800d244:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	79da      	ldrb	r2, [r3, #7]
 800d24a:	6a3b      	ldr	r3, [r7, #32]
 800d24c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	7a1a      	ldrb	r2, [r3, #8]
 800d252:	6a3b      	ldr	r3, [r7, #32]
 800d254:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d256:	88fb      	ldrh	r3, [r7, #6]
 800d258:	2b09      	cmp	r3, #9
 800d25a:	f240 809d 	bls.w	800d398 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800d25e:	2309      	movs	r3, #9
 800d260:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d262:	2300      	movs	r3, #0
 800d264:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d266:	e081      	b.n	800d36c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d268:	f107 0316 	add.w	r3, r7, #22
 800d26c:	4619      	mov	r1, r3
 800d26e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d270:	f000 f9e7 	bl	800d642 <USBH_GetNextDesc>
 800d274:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800d276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d278:	785b      	ldrb	r3, [r3, #1]
 800d27a:	2b04      	cmp	r3, #4
 800d27c:	d176      	bne.n	800d36c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800d27e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d280:	781b      	ldrb	r3, [r3, #0]
 800d282:	2b09      	cmp	r3, #9
 800d284:	d002      	beq.n	800d28c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800d286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d288:	2209      	movs	r2, #9
 800d28a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800d28c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d290:	221a      	movs	r2, #26
 800d292:	fb02 f303 	mul.w	r3, r2, r3
 800d296:	3308      	adds	r3, #8
 800d298:	6a3a      	ldr	r2, [r7, #32]
 800d29a:	4413      	add	r3, r2
 800d29c:	3302      	adds	r3, #2
 800d29e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d2a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d2a2:	69f8      	ldr	r0, [r7, #28]
 800d2a4:	f000 f87e 	bl	800d3a4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d2b2:	e043      	b.n	800d33c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d2b4:	f107 0316 	add.w	r3, r7, #22
 800d2b8:	4619      	mov	r1, r3
 800d2ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d2bc:	f000 f9c1 	bl	800d642 <USBH_GetNextDesc>
 800d2c0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d2c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2c4:	785b      	ldrb	r3, [r3, #1]
 800d2c6:	2b05      	cmp	r3, #5
 800d2c8:	d138      	bne.n	800d33c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800d2ca:	69fb      	ldr	r3, [r7, #28]
 800d2cc:	795b      	ldrb	r3, [r3, #5]
 800d2ce:	2b01      	cmp	r3, #1
 800d2d0:	d113      	bne.n	800d2fa <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800d2d2:	69fb      	ldr	r3, [r7, #28]
 800d2d4:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800d2d6:	2b02      	cmp	r3, #2
 800d2d8:	d003      	beq.n	800d2e2 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800d2da:	69fb      	ldr	r3, [r7, #28]
 800d2dc:	799b      	ldrb	r3, [r3, #6]
 800d2de:	2b03      	cmp	r3, #3
 800d2e0:	d10b      	bne.n	800d2fa <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d2e2:	69fb      	ldr	r3, [r7, #28]
 800d2e4:	79db      	ldrb	r3, [r3, #7]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d10b      	bne.n	800d302 <USBH_ParseCfgDesc+0x14e>
 800d2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	2b09      	cmp	r3, #9
 800d2f0:	d007      	beq.n	800d302 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800d2f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2f4:	2209      	movs	r2, #9
 800d2f6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d2f8:	e003      	b.n	800d302 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800d2fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2fc:	2207      	movs	r2, #7
 800d2fe:	701a      	strb	r2, [r3, #0]
 800d300:	e000      	b.n	800d304 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d302:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d304:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d308:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d30c:	3201      	adds	r2, #1
 800d30e:	00d2      	lsls	r2, r2, #3
 800d310:	211a      	movs	r1, #26
 800d312:	fb01 f303 	mul.w	r3, r1, r3
 800d316:	4413      	add	r3, r2
 800d318:	3308      	adds	r3, #8
 800d31a:	6a3a      	ldr	r2, [r7, #32]
 800d31c:	4413      	add	r3, r2
 800d31e:	3304      	adds	r3, #4
 800d320:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800d322:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d324:	69b9      	ldr	r1, [r7, #24]
 800d326:	68f8      	ldr	r0, [r7, #12]
 800d328:	f000 f870 	bl	800d40c <USBH_ParseEPDesc>
 800d32c:	4603      	mov	r3, r0
 800d32e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800d332:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d336:	3301      	adds	r3, #1
 800d338:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d33c:	69fb      	ldr	r3, [r7, #28]
 800d33e:	791b      	ldrb	r3, [r3, #4]
 800d340:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d344:	429a      	cmp	r2, r3
 800d346:	d204      	bcs.n	800d352 <USBH_ParseCfgDesc+0x19e>
 800d348:	6a3b      	ldr	r3, [r7, #32]
 800d34a:	885a      	ldrh	r2, [r3, #2]
 800d34c:	8afb      	ldrh	r3, [r7, #22]
 800d34e:	429a      	cmp	r2, r3
 800d350:	d8b0      	bhi.n	800d2b4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800d352:	69fb      	ldr	r3, [r7, #28]
 800d354:	791b      	ldrb	r3, [r3, #4]
 800d356:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d35a:	429a      	cmp	r2, r3
 800d35c:	d201      	bcs.n	800d362 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800d35e:	2303      	movs	r3, #3
 800d360:	e01c      	b.n	800d39c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800d362:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d366:	3301      	adds	r3, #1
 800d368:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d36c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d370:	2b01      	cmp	r3, #1
 800d372:	d805      	bhi.n	800d380 <USBH_ParseCfgDesc+0x1cc>
 800d374:	6a3b      	ldr	r3, [r7, #32]
 800d376:	885a      	ldrh	r2, [r3, #2]
 800d378:	8afb      	ldrh	r3, [r7, #22]
 800d37a:	429a      	cmp	r2, r3
 800d37c:	f63f af74 	bhi.w	800d268 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800d380:	6a3b      	ldr	r3, [r7, #32]
 800d382:	791b      	ldrb	r3, [r3, #4]
 800d384:	2b02      	cmp	r3, #2
 800d386:	bf28      	it	cs
 800d388:	2302      	movcs	r3, #2
 800d38a:	b2db      	uxtb	r3, r3
 800d38c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d390:	429a      	cmp	r2, r3
 800d392:	d201      	bcs.n	800d398 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800d394:	2303      	movs	r3, #3
 800d396:	e001      	b.n	800d39c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800d398:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	3730      	adds	r7, #48	@ 0x30
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}

0800d3a4 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b083      	sub	sp, #12
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
 800d3ac:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	781a      	ldrb	r2, [r3, #0]
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	785a      	ldrb	r2, [r3, #1]
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	789a      	ldrb	r2, [r3, #2]
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	78da      	ldrb	r2, [r3, #3]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	3304      	adds	r3, #4
 800d3d2:	781b      	ldrb	r3, [r3, #0]
 800d3d4:	2b02      	cmp	r3, #2
 800d3d6:	bf28      	it	cs
 800d3d8:	2302      	movcs	r3, #2
 800d3da:	b2da      	uxtb	r2, r3
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	795a      	ldrb	r2, [r3, #5]
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	799a      	ldrb	r2, [r3, #6]
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	79da      	ldrb	r2, [r3, #7]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	7a1a      	ldrb	r2, [r3, #8]
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	721a      	strb	r2, [r3, #8]
}
 800d400:	bf00      	nop
 800d402:	370c      	adds	r7, #12
 800d404:	46bd      	mov	sp, r7
 800d406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40a:	4770      	bx	lr

0800d40c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b087      	sub	sp, #28
 800d410:	af00      	add	r7, sp, #0
 800d412:	60f8      	str	r0, [r7, #12]
 800d414:	60b9      	str	r1, [r7, #8]
 800d416:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800d418:	2300      	movs	r3, #0
 800d41a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	781a      	ldrb	r2, [r3, #0]
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	785a      	ldrb	r2, [r3, #1]
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	789a      	ldrb	r2, [r3, #2]
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	78da      	ldrb	r2, [r3, #3]
 800d438:	68bb      	ldr	r3, [r7, #8]
 800d43a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	3304      	adds	r3, #4
 800d440:	781b      	ldrb	r3, [r3, #0]
 800d442:	461a      	mov	r2, r3
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	3305      	adds	r3, #5
 800d448:	781b      	ldrb	r3, [r3, #0]
 800d44a:	021b      	lsls	r3, r3, #8
 800d44c:	b29b      	uxth	r3, r3
 800d44e:	4313      	orrs	r3, r2
 800d450:	b29a      	uxth	r2, r3
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	799a      	ldrb	r2, [r3, #6]
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	889b      	ldrh	r3, [r3, #4]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d009      	beq.n	800d47a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800d46a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d46e:	d804      	bhi.n	800d47a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800d474:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d478:	d901      	bls.n	800d47e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800d47a:	2303      	movs	r3, #3
 800d47c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d484:	2b00      	cmp	r3, #0
 800d486:	d136      	bne.n	800d4f6 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	78db      	ldrb	r3, [r3, #3]
 800d48c:	f003 0303 	and.w	r3, r3, #3
 800d490:	2b02      	cmp	r3, #2
 800d492:	d108      	bne.n	800d4a6 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	889b      	ldrh	r3, [r3, #4]
 800d498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d49c:	f240 8097 	bls.w	800d5ce <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d4a0:	2303      	movs	r3, #3
 800d4a2:	75fb      	strb	r3, [r7, #23]
 800d4a4:	e093      	b.n	800d5ce <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800d4a6:	68bb      	ldr	r3, [r7, #8]
 800d4a8:	78db      	ldrb	r3, [r3, #3]
 800d4aa:	f003 0303 	and.w	r3, r3, #3
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d107      	bne.n	800d4c2 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	889b      	ldrh	r3, [r3, #4]
 800d4b6:	2b40      	cmp	r3, #64	@ 0x40
 800d4b8:	f240 8089 	bls.w	800d5ce <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d4bc:	2303      	movs	r3, #3
 800d4be:	75fb      	strb	r3, [r7, #23]
 800d4c0:	e085      	b.n	800d5ce <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	78db      	ldrb	r3, [r3, #3]
 800d4c6:	f003 0303 	and.w	r3, r3, #3
 800d4ca:	2b01      	cmp	r3, #1
 800d4cc:	d005      	beq.n	800d4da <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	78db      	ldrb	r3, [r3, #3]
 800d4d2:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d4d6:	2b03      	cmp	r3, #3
 800d4d8:	d10a      	bne.n	800d4f0 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	799b      	ldrb	r3, [r3, #6]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d003      	beq.n	800d4ea <USBH_ParseEPDesc+0xde>
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	799b      	ldrb	r3, [r3, #6]
 800d4e6:	2b10      	cmp	r3, #16
 800d4e8:	d970      	bls.n	800d5cc <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800d4ea:	2303      	movs	r3, #3
 800d4ec:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d4ee:	e06d      	b.n	800d5cc <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d4f0:	2303      	movs	r3, #3
 800d4f2:	75fb      	strb	r3, [r7, #23]
 800d4f4:	e06b      	b.n	800d5ce <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d4fc:	2b01      	cmp	r3, #1
 800d4fe:	d13c      	bne.n	800d57a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	78db      	ldrb	r3, [r3, #3]
 800d504:	f003 0303 	and.w	r3, r3, #3
 800d508:	2b02      	cmp	r3, #2
 800d50a:	d005      	beq.n	800d518 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	78db      	ldrb	r3, [r3, #3]
 800d510:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800d514:	2b00      	cmp	r3, #0
 800d516:	d106      	bne.n	800d526 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	889b      	ldrh	r3, [r3, #4]
 800d51c:	2b40      	cmp	r3, #64	@ 0x40
 800d51e:	d956      	bls.n	800d5ce <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d520:	2303      	movs	r3, #3
 800d522:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d524:	e053      	b.n	800d5ce <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	78db      	ldrb	r3, [r3, #3]
 800d52a:	f003 0303 	and.w	r3, r3, #3
 800d52e:	2b01      	cmp	r3, #1
 800d530:	d10e      	bne.n	800d550 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	799b      	ldrb	r3, [r3, #6]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d007      	beq.n	800d54a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800d53e:	2b10      	cmp	r3, #16
 800d540:	d803      	bhi.n	800d54a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800d546:	2b40      	cmp	r3, #64	@ 0x40
 800d548:	d941      	bls.n	800d5ce <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d54a:	2303      	movs	r3, #3
 800d54c:	75fb      	strb	r3, [r7, #23]
 800d54e:	e03e      	b.n	800d5ce <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	78db      	ldrb	r3, [r3, #3]
 800d554:	f003 0303 	and.w	r3, r3, #3
 800d558:	2b03      	cmp	r3, #3
 800d55a:	d10b      	bne.n	800d574 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	799b      	ldrb	r3, [r3, #6]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d004      	beq.n	800d56e <USBH_ParseEPDesc+0x162>
 800d564:	68bb      	ldr	r3, [r7, #8]
 800d566:	889b      	ldrh	r3, [r3, #4]
 800d568:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d56c:	d32f      	bcc.n	800d5ce <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d56e:	2303      	movs	r3, #3
 800d570:	75fb      	strb	r3, [r7, #23]
 800d572:	e02c      	b.n	800d5ce <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d574:	2303      	movs	r3, #3
 800d576:	75fb      	strb	r3, [r7, #23]
 800d578:	e029      	b.n	800d5ce <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d580:	2b02      	cmp	r3, #2
 800d582:	d120      	bne.n	800d5c6 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	78db      	ldrb	r3, [r3, #3]
 800d588:	f003 0303 	and.w	r3, r3, #3
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d106      	bne.n	800d59e <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	889b      	ldrh	r3, [r3, #4]
 800d594:	2b08      	cmp	r3, #8
 800d596:	d01a      	beq.n	800d5ce <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d598:	2303      	movs	r3, #3
 800d59a:	75fb      	strb	r3, [r7, #23]
 800d59c:	e017      	b.n	800d5ce <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	78db      	ldrb	r3, [r3, #3]
 800d5a2:	f003 0303 	and.w	r3, r3, #3
 800d5a6:	2b03      	cmp	r3, #3
 800d5a8:	d10a      	bne.n	800d5c0 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	799b      	ldrb	r3, [r3, #6]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d003      	beq.n	800d5ba <USBH_ParseEPDesc+0x1ae>
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	889b      	ldrh	r3, [r3, #4]
 800d5b6:	2b08      	cmp	r3, #8
 800d5b8:	d909      	bls.n	800d5ce <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d5ba:	2303      	movs	r3, #3
 800d5bc:	75fb      	strb	r3, [r7, #23]
 800d5be:	e006      	b.n	800d5ce <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d5c0:	2303      	movs	r3, #3
 800d5c2:	75fb      	strb	r3, [r7, #23]
 800d5c4:	e003      	b.n	800d5ce <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800d5c6:	2303      	movs	r3, #3
 800d5c8:	75fb      	strb	r3, [r7, #23]
 800d5ca:	e000      	b.n	800d5ce <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d5cc:	bf00      	nop
  }

  return status;
 800d5ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	371c      	adds	r7, #28
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5da:	4770      	bx	lr

0800d5dc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d5dc:	b480      	push	{r7}
 800d5de:	b087      	sub	sp, #28
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	60f8      	str	r0, [r7, #12]
 800d5e4:	60b9      	str	r1, [r7, #8]
 800d5e6:	4613      	mov	r3, r2
 800d5e8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	3301      	adds	r3, #1
 800d5ee:	781b      	ldrb	r3, [r3, #0]
 800d5f0:	2b03      	cmp	r3, #3
 800d5f2:	d120      	bne.n	800d636 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	781b      	ldrb	r3, [r3, #0]
 800d5f8:	1e9a      	subs	r2, r3, #2
 800d5fa:	88fb      	ldrh	r3, [r7, #6]
 800d5fc:	4293      	cmp	r3, r2
 800d5fe:	bf28      	it	cs
 800d600:	4613      	movcs	r3, r2
 800d602:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	3302      	adds	r3, #2
 800d608:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d60a:	2300      	movs	r3, #0
 800d60c:	82fb      	strh	r3, [r7, #22]
 800d60e:	e00b      	b.n	800d628 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d610:	8afb      	ldrh	r3, [r7, #22]
 800d612:	68fa      	ldr	r2, [r7, #12]
 800d614:	4413      	add	r3, r2
 800d616:	781a      	ldrb	r2, [r3, #0]
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	3301      	adds	r3, #1
 800d620:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d622:	8afb      	ldrh	r3, [r7, #22]
 800d624:	3302      	adds	r3, #2
 800d626:	82fb      	strh	r3, [r7, #22]
 800d628:	8afa      	ldrh	r2, [r7, #22]
 800d62a:	8abb      	ldrh	r3, [r7, #20]
 800d62c:	429a      	cmp	r2, r3
 800d62e:	d3ef      	bcc.n	800d610 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d630:	68bb      	ldr	r3, [r7, #8]
 800d632:	2200      	movs	r2, #0
 800d634:	701a      	strb	r2, [r3, #0]
  }
}
 800d636:	bf00      	nop
 800d638:	371c      	adds	r7, #28
 800d63a:	46bd      	mov	sp, r7
 800d63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d640:	4770      	bx	lr

0800d642 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d642:	b480      	push	{r7}
 800d644:	b085      	sub	sp, #20
 800d646:	af00      	add	r7, sp, #0
 800d648:	6078      	str	r0, [r7, #4]
 800d64a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	881b      	ldrh	r3, [r3, #0]
 800d650:	687a      	ldr	r2, [r7, #4]
 800d652:	7812      	ldrb	r2, [r2, #0]
 800d654:	4413      	add	r3, r2
 800d656:	b29a      	uxth	r2, r3
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	781b      	ldrb	r3, [r3, #0]
 800d660:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	4413      	add	r3, r2
 800d666:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d668:	68fb      	ldr	r3, [r7, #12]
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3714      	adds	r7, #20
 800d66e:	46bd      	mov	sp, r7
 800d670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d674:	4770      	bx	lr

0800d676 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d676:	b580      	push	{r7, lr}
 800d678:	b086      	sub	sp, #24
 800d67a:	af00      	add	r7, sp, #0
 800d67c:	60f8      	str	r0, [r7, #12]
 800d67e:	60b9      	str	r1, [r7, #8]
 800d680:	4613      	mov	r3, r2
 800d682:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d684:	2301      	movs	r3, #1
 800d686:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	789b      	ldrb	r3, [r3, #2]
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	d002      	beq.n	800d696 <USBH_CtlReq+0x20>
 800d690:	2b02      	cmp	r3, #2
 800d692:	d01d      	beq.n	800d6d0 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800d694:	e043      	b.n	800d71e <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	68ba      	ldr	r2, [r7, #8]
 800d69a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	88fa      	ldrh	r2, [r7, #6]
 800d6a0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2201      	movs	r2, #1
 800d6a6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	2202      	movs	r2, #2
 800d6ac:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	2203      	movs	r2, #3
 800d6b6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	4619      	mov	r1, r3
 800d6ca:	f000 fc4d 	bl	800df68 <osMessagePut>
      break;
 800d6ce:	e026      	b.n	800d71e <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800d6d0:	68f8      	ldr	r0, [r7, #12]
 800d6d2:	f000 f829 	bl	800d728 <USBH_HandleControl>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d6da:	7dfb      	ldrb	r3, [r7, #23]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d002      	beq.n	800d6e6 <USBH_CtlReq+0x70>
 800d6e0:	7dfb      	ldrb	r3, [r7, #23]
 800d6e2:	2b03      	cmp	r3, #3
 800d6e4:	d106      	bne.n	800d6f4 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	2201      	movs	r2, #1
 800d6ea:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	761a      	strb	r2, [r3, #24]
 800d6f2:	e005      	b.n	800d700 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800d6f4:	7dfb      	ldrb	r3, [r7, #23]
 800d6f6:	2b02      	cmp	r3, #2
 800d6f8:	d102      	bne.n	800d700 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	2201      	movs	r2, #1
 800d6fe:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	2203      	movs	r2, #3
 800d704:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800d714:	2200      	movs	r2, #0
 800d716:	4619      	mov	r1, r3
 800d718:	f000 fc26 	bl	800df68 <osMessagePut>
      break;
 800d71c:	bf00      	nop
  }
  return status;
 800d71e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d720:	4618      	mov	r0, r3
 800d722:	3718      	adds	r7, #24
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}

0800d728 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b086      	sub	sp, #24
 800d72c:	af02      	add	r7, sp, #8
 800d72e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d730:	2301      	movs	r3, #1
 800d732:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d734:	2300      	movs	r3, #0
 800d736:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	7e1b      	ldrb	r3, [r3, #24]
 800d73c:	3b01      	subs	r3, #1
 800d73e:	2b0a      	cmp	r3, #10
 800d740:	f200 8229 	bhi.w	800db96 <USBH_HandleControl+0x46e>
 800d744:	a201      	add	r2, pc, #4	@ (adr r2, 800d74c <USBH_HandleControl+0x24>)
 800d746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d74a:	bf00      	nop
 800d74c:	0800d779 	.word	0x0800d779
 800d750:	0800d793 	.word	0x0800d793
 800d754:	0800d835 	.word	0x0800d835
 800d758:	0800d85b 	.word	0x0800d85b
 800d75c:	0800d8e7 	.word	0x0800d8e7
 800d760:	0800d911 	.word	0x0800d911
 800d764:	0800d9d3 	.word	0x0800d9d3
 800d768:	0800d9f5 	.word	0x0800d9f5
 800d76c:	0800da87 	.word	0x0800da87
 800d770:	0800daad 	.word	0x0800daad
 800d774:	0800db3f 	.word	0x0800db3f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f103 0110 	add.w	r1, r3, #16
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	795b      	ldrb	r3, [r3, #5]
 800d782:	461a      	mov	r2, r3
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f000 fa17 	bl	800dbb8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	2202      	movs	r2, #2
 800d78e:	761a      	strb	r2, [r3, #24]
      break;
 800d790:	e20c      	b.n	800dbac <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	795b      	ldrb	r3, [r3, #5]
 800d796:	4619      	mov	r1, r3
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	f002 ffef 	bl	801077c <USBH_LL_GetURBState>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d7a2:	7bbb      	ldrb	r3, [r7, #14]
 800d7a4:	2b01      	cmp	r3, #1
 800d7a6:	d12c      	bne.n	800d802 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	7c1b      	ldrb	r3, [r3, #16]
 800d7ac:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d7b0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	8adb      	ldrh	r3, [r3, #22]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d00a      	beq.n	800d7d0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d7ba:	7b7b      	ldrb	r3, [r7, #13]
 800d7bc:	2b80      	cmp	r3, #128	@ 0x80
 800d7be:	d103      	bne.n	800d7c8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2203      	movs	r2, #3
 800d7c4:	761a      	strb	r2, [r3, #24]
 800d7c6:	e00d      	b.n	800d7e4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2205      	movs	r2, #5
 800d7cc:	761a      	strb	r2, [r3, #24]
 800d7ce:	e009      	b.n	800d7e4 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800d7d0:	7b7b      	ldrb	r3, [r7, #13]
 800d7d2:	2b80      	cmp	r3, #128	@ 0x80
 800d7d4:	d103      	bne.n	800d7de <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2209      	movs	r2, #9
 800d7da:	761a      	strb	r2, [r3, #24]
 800d7dc:	e002      	b.n	800d7e4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2207      	movs	r2, #7
 800d7e2:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2203      	movs	r2, #3
 800d7e8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	4619      	mov	r1, r3
 800d7fc:	f000 fbb4 	bl	800df68 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d800:	e1cb      	b.n	800db9a <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d802:	7bbb      	ldrb	r3, [r7, #14]
 800d804:	2b04      	cmp	r3, #4
 800d806:	d003      	beq.n	800d810 <USBH_HandleControl+0xe8>
 800d808:	7bbb      	ldrb	r3, [r7, #14]
 800d80a:	2b02      	cmp	r3, #2
 800d80c:	f040 81c5 	bne.w	800db9a <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	220b      	movs	r2, #11
 800d814:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2203      	movs	r2, #3
 800d81a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800d82a:	2200      	movs	r2, #0
 800d82c:	4619      	mov	r1, r3
 800d82e:	f000 fb9b 	bl	800df68 <osMessagePut>
      break;
 800d832:	e1b2      	b.n	800db9a <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d83a:	b29a      	uxth	r2, r3
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6899      	ldr	r1, [r3, #8]
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	899a      	ldrh	r2, [r3, #12]
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	791b      	ldrb	r3, [r3, #4]
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	f000 f9f2 	bl	800dc36 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2204      	movs	r2, #4
 800d856:	761a      	strb	r2, [r3, #24]
      break;
 800d858:	e1a8      	b.n	800dbac <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	791b      	ldrb	r3, [r3, #4]
 800d85e:	4619      	mov	r1, r3
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f002 ff8b 	bl	801077c <USBH_LL_GetURBState>
 800d866:	4603      	mov	r3, r0
 800d868:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d86a:	7bbb      	ldrb	r3, [r7, #14]
 800d86c:	2b01      	cmp	r3, #1
 800d86e:	d110      	bne.n	800d892 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2209      	movs	r2, #9
 800d874:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2203      	movs	r2, #3
 800d87a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800d88a:	2200      	movs	r2, #0
 800d88c:	4619      	mov	r1, r3
 800d88e:	f000 fb6b 	bl	800df68 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d892:	7bbb      	ldrb	r3, [r7, #14]
 800d894:	2b05      	cmp	r3, #5
 800d896:	d110      	bne.n	800d8ba <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d898:	2303      	movs	r3, #3
 800d89a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2203      	movs	r2, #3
 800d8a0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	f000 fb58 	bl	800df68 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d8b8:	e171      	b.n	800db9e <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800d8ba:	7bbb      	ldrb	r3, [r7, #14]
 800d8bc:	2b04      	cmp	r3, #4
 800d8be:	f040 816e 	bne.w	800db9e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	220b      	movs	r2, #11
 800d8c6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2203      	movs	r2, #3
 800d8cc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800d8dc:	2200      	movs	r2, #0
 800d8de:	4619      	mov	r1, r3
 800d8e0:	f000 fb42 	bl	800df68 <osMessagePut>
      break;
 800d8e4:	e15b      	b.n	800db9e <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6899      	ldr	r1, [r3, #8]
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	899a      	ldrh	r2, [r3, #12]
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	795b      	ldrb	r3, [r3, #5]
 800d8f2:	2001      	movs	r0, #1
 800d8f4:	9000      	str	r0, [sp, #0]
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f000 f978 	bl	800dbec <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d902:	b29a      	uxth	r2, r3
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2206      	movs	r2, #6
 800d90c:	761a      	strb	r2, [r3, #24]
      break;
 800d90e:	e14d      	b.n	800dbac <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	795b      	ldrb	r3, [r3, #5]
 800d914:	4619      	mov	r1, r3
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f002 ff30 	bl	801077c <USBH_LL_GetURBState>
 800d91c:	4603      	mov	r3, r0
 800d91e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d920:	7bbb      	ldrb	r3, [r7, #14]
 800d922:	2b01      	cmp	r3, #1
 800d924:	d111      	bne.n	800d94a <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2207      	movs	r2, #7
 800d92a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2203      	movs	r2, #3
 800d930:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800d940:	2200      	movs	r2, #0
 800d942:	4619      	mov	r1, r3
 800d944:	f000 fb10 	bl	800df68 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d948:	e12b      	b.n	800dba2 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800d94a:	7bbb      	ldrb	r3, [r7, #14]
 800d94c:	2b05      	cmp	r3, #5
 800d94e:	d113      	bne.n	800d978 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	220c      	movs	r2, #12
 800d954:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d956:	2303      	movs	r3, #3
 800d958:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2203      	movs	r2, #3
 800d95e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800d96e:	2200      	movs	r2, #0
 800d970:	4619      	mov	r1, r3
 800d972:	f000 faf9 	bl	800df68 <osMessagePut>
      break;
 800d976:	e114      	b.n	800dba2 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d978:	7bbb      	ldrb	r3, [r7, #14]
 800d97a:	2b02      	cmp	r3, #2
 800d97c:	d111      	bne.n	800d9a2 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2205      	movs	r2, #5
 800d982:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2203      	movs	r2, #3
 800d988:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800d998:	2200      	movs	r2, #0
 800d99a:	4619      	mov	r1, r3
 800d99c:	f000 fae4 	bl	800df68 <osMessagePut>
      break;
 800d9a0:	e0ff      	b.n	800dba2 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800d9a2:	7bbb      	ldrb	r3, [r7, #14]
 800d9a4:	2b04      	cmp	r3, #4
 800d9a6:	f040 80fc 	bne.w	800dba2 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	220b      	movs	r2, #11
 800d9ae:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d9b0:	2302      	movs	r3, #2
 800d9b2:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2203      	movs	r2, #3
 800d9b8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	4619      	mov	r1, r3
 800d9cc:	f000 facc 	bl	800df68 <osMessagePut>
      break;
 800d9d0:	e0e7      	b.n	800dba2 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	791b      	ldrb	r3, [r3, #4]
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	2100      	movs	r1, #0
 800d9da:	6878      	ldr	r0, [r7, #4]
 800d9dc:	f000 f92b 	bl	800dc36 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d9e6:	b29a      	uxth	r2, r3
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2208      	movs	r2, #8
 800d9f0:	761a      	strb	r2, [r3, #24]

      break;
 800d9f2:	e0db      	b.n	800dbac <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	791b      	ldrb	r3, [r3, #4]
 800d9f8:	4619      	mov	r1, r3
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f002 febe 	bl	801077c <USBH_LL_GetURBState>
 800da00:	4603      	mov	r3, r0
 800da02:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800da04:	7bbb      	ldrb	r3, [r7, #14]
 800da06:	2b01      	cmp	r3, #1
 800da08:	d113      	bne.n	800da32 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	220d      	movs	r2, #13
 800da0e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800da10:	2300      	movs	r3, #0
 800da12:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2203      	movs	r2, #3
 800da18:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800da28:	2200      	movs	r2, #0
 800da2a:	4619      	mov	r1, r3
 800da2c:	f000 fa9c 	bl	800df68 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800da30:	e0b9      	b.n	800dba6 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800da32:	7bbb      	ldrb	r3, [r7, #14]
 800da34:	2b04      	cmp	r3, #4
 800da36:	d111      	bne.n	800da5c <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	220b      	movs	r2, #11
 800da3c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2203      	movs	r2, #3
 800da42:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800da52:	2200      	movs	r2, #0
 800da54:	4619      	mov	r1, r3
 800da56:	f000 fa87 	bl	800df68 <osMessagePut>
      break;
 800da5a:	e0a4      	b.n	800dba6 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800da5c:	7bbb      	ldrb	r3, [r7, #14]
 800da5e:	2b05      	cmp	r3, #5
 800da60:	f040 80a1 	bne.w	800dba6 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800da64:	2303      	movs	r3, #3
 800da66:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2203      	movs	r2, #3
 800da6c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800da7c:	2200      	movs	r2, #0
 800da7e:	4619      	mov	r1, r3
 800da80:	f000 fa72 	bl	800df68 <osMessagePut>
      break;
 800da84:	e08f      	b.n	800dba6 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	795b      	ldrb	r3, [r3, #5]
 800da8a:	2201      	movs	r2, #1
 800da8c:	9200      	str	r2, [sp, #0]
 800da8e:	2200      	movs	r2, #0
 800da90:	2100      	movs	r1, #0
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f000 f8aa 	bl	800dbec <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800da9e:	b29a      	uxth	r2, r3
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	220a      	movs	r2, #10
 800daa8:	761a      	strb	r2, [r3, #24]
      break;
 800daaa:	e07f      	b.n	800dbac <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	795b      	ldrb	r3, [r3, #5]
 800dab0:	4619      	mov	r1, r3
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f002 fe62 	bl	801077c <USBH_LL_GetURBState>
 800dab8:	4603      	mov	r3, r0
 800daba:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800dabc:	7bbb      	ldrb	r3, [r7, #14]
 800dabe:	2b01      	cmp	r3, #1
 800dac0:	d113      	bne.n	800daea <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800dac2:	2300      	movs	r3, #0
 800dac4:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	220d      	movs	r2, #13
 800daca:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2203      	movs	r2, #3
 800dad0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800dae0:	2200      	movs	r2, #0
 800dae2:	4619      	mov	r1, r3
 800dae4:	f000 fa40 	bl	800df68 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dae8:	e05f      	b.n	800dbaa <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800daea:	7bbb      	ldrb	r3, [r7, #14]
 800daec:	2b02      	cmp	r3, #2
 800daee:	d111      	bne.n	800db14 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2209      	movs	r2, #9
 800daf4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	2203      	movs	r2, #3
 800dafa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800db0a:	2200      	movs	r2, #0
 800db0c:	4619      	mov	r1, r3
 800db0e:	f000 fa2b 	bl	800df68 <osMessagePut>
      break;
 800db12:	e04a      	b.n	800dbaa <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800db14:	7bbb      	ldrb	r3, [r7, #14]
 800db16:	2b04      	cmp	r3, #4
 800db18:	d147      	bne.n	800dbaa <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	220b      	movs	r2, #11
 800db1e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2203      	movs	r2, #3
 800db24:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800db34:	2200      	movs	r2, #0
 800db36:	4619      	mov	r1, r3
 800db38:	f000 fa16 	bl	800df68 <osMessagePut>
      break;
 800db3c:	e035      	b.n	800dbaa <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	7e5b      	ldrb	r3, [r3, #25]
 800db42:	3301      	adds	r3, #1
 800db44:	b2da      	uxtb	r2, r3
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	765a      	strb	r2, [r3, #25]
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	7e5b      	ldrb	r3, [r3, #25]
 800db4e:	2b02      	cmp	r3, #2
 800db50:	d806      	bhi.n	800db60 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2201      	movs	r2, #1
 800db56:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2201      	movs	r2, #1
 800db5c:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800db5e:	e025      	b.n	800dbac <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800db66:	2106      	movs	r1, #6
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2200      	movs	r2, #0
 800db70:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	795b      	ldrb	r3, [r3, #5]
 800db76:	4619      	mov	r1, r3
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f000 f90d 	bl	800dd98 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	791b      	ldrb	r3, [r3, #4]
 800db82:	4619      	mov	r1, r3
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f000 f907 	bl	800dd98 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2200      	movs	r2, #0
 800db8e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800db90:	2302      	movs	r3, #2
 800db92:	73fb      	strb	r3, [r7, #15]
      break;
 800db94:	e00a      	b.n	800dbac <USBH_HandleControl+0x484>

    default:
      break;
 800db96:	bf00      	nop
 800db98:	e008      	b.n	800dbac <USBH_HandleControl+0x484>
      break;
 800db9a:	bf00      	nop
 800db9c:	e006      	b.n	800dbac <USBH_HandleControl+0x484>
      break;
 800db9e:	bf00      	nop
 800dba0:	e004      	b.n	800dbac <USBH_HandleControl+0x484>
      break;
 800dba2:	bf00      	nop
 800dba4:	e002      	b.n	800dbac <USBH_HandleControl+0x484>
      break;
 800dba6:	bf00      	nop
 800dba8:	e000      	b.n	800dbac <USBH_HandleControl+0x484>
      break;
 800dbaa:	bf00      	nop
  }

  return status;
 800dbac:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3710      	adds	r7, #16
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	bf00      	nop

0800dbb8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b088      	sub	sp, #32
 800dbbc:	af04      	add	r7, sp, #16
 800dbbe:	60f8      	str	r0, [r7, #12]
 800dbc0:	60b9      	str	r1, [r7, #8]
 800dbc2:	4613      	mov	r3, r2
 800dbc4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800dbc6:	79f9      	ldrb	r1, [r7, #7]
 800dbc8:	2300      	movs	r3, #0
 800dbca:	9303      	str	r3, [sp, #12]
 800dbcc:	2308      	movs	r3, #8
 800dbce:	9302      	str	r3, [sp, #8]
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	9301      	str	r3, [sp, #4]
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	9300      	str	r3, [sp, #0]
 800dbd8:	2300      	movs	r3, #0
 800dbda:	2200      	movs	r2, #0
 800dbdc:	68f8      	ldr	r0, [r7, #12]
 800dbde:	f002 fd9c 	bl	801071a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800dbe2:	2300      	movs	r3, #0
}
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	3710      	adds	r7, #16
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}

0800dbec <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b088      	sub	sp, #32
 800dbf0:	af04      	add	r7, sp, #16
 800dbf2:	60f8      	str	r0, [r7, #12]
 800dbf4:	60b9      	str	r1, [r7, #8]
 800dbf6:	4611      	mov	r1, r2
 800dbf8:	461a      	mov	r2, r3
 800dbfa:	460b      	mov	r3, r1
 800dbfc:	80fb      	strh	r3, [r7, #6]
 800dbfe:	4613      	mov	r3, r2
 800dc00:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d001      	beq.n	800dc10 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800dc10:	7979      	ldrb	r1, [r7, #5]
 800dc12:	7e3b      	ldrb	r3, [r7, #24]
 800dc14:	9303      	str	r3, [sp, #12]
 800dc16:	88fb      	ldrh	r3, [r7, #6]
 800dc18:	9302      	str	r3, [sp, #8]
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	9301      	str	r3, [sp, #4]
 800dc1e:	2301      	movs	r3, #1
 800dc20:	9300      	str	r3, [sp, #0]
 800dc22:	2300      	movs	r3, #0
 800dc24:	2200      	movs	r2, #0
 800dc26:	68f8      	ldr	r0, [r7, #12]
 800dc28:	f002 fd77 	bl	801071a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800dc2c:	2300      	movs	r3, #0
}
 800dc2e:	4618      	mov	r0, r3
 800dc30:	3710      	adds	r7, #16
 800dc32:	46bd      	mov	sp, r7
 800dc34:	bd80      	pop	{r7, pc}

0800dc36 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800dc36:	b580      	push	{r7, lr}
 800dc38:	b088      	sub	sp, #32
 800dc3a:	af04      	add	r7, sp, #16
 800dc3c:	60f8      	str	r0, [r7, #12]
 800dc3e:	60b9      	str	r1, [r7, #8]
 800dc40:	4611      	mov	r1, r2
 800dc42:	461a      	mov	r2, r3
 800dc44:	460b      	mov	r3, r1
 800dc46:	80fb      	strh	r3, [r7, #6]
 800dc48:	4613      	mov	r3, r2
 800dc4a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800dc4c:	7979      	ldrb	r1, [r7, #5]
 800dc4e:	2300      	movs	r3, #0
 800dc50:	9303      	str	r3, [sp, #12]
 800dc52:	88fb      	ldrh	r3, [r7, #6]
 800dc54:	9302      	str	r3, [sp, #8]
 800dc56:	68bb      	ldr	r3, [r7, #8]
 800dc58:	9301      	str	r3, [sp, #4]
 800dc5a:	2301      	movs	r3, #1
 800dc5c:	9300      	str	r3, [sp, #0]
 800dc5e:	2300      	movs	r3, #0
 800dc60:	2201      	movs	r2, #1
 800dc62:	68f8      	ldr	r0, [r7, #12]
 800dc64:	f002 fd59 	bl	801071a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800dc68:	2300      	movs	r3, #0

}
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	3710      	adds	r7, #16
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}

0800dc72 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800dc72:	b580      	push	{r7, lr}
 800dc74:	b088      	sub	sp, #32
 800dc76:	af04      	add	r7, sp, #16
 800dc78:	60f8      	str	r0, [r7, #12]
 800dc7a:	60b9      	str	r1, [r7, #8]
 800dc7c:	4611      	mov	r1, r2
 800dc7e:	461a      	mov	r2, r3
 800dc80:	460b      	mov	r3, r1
 800dc82:	80fb      	strh	r3, [r7, #6]
 800dc84:	4613      	mov	r3, r2
 800dc86:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d001      	beq.n	800dc96 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800dc92:	2300      	movs	r3, #0
 800dc94:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800dc96:	7979      	ldrb	r1, [r7, #5]
 800dc98:	7e3b      	ldrb	r3, [r7, #24]
 800dc9a:	9303      	str	r3, [sp, #12]
 800dc9c:	88fb      	ldrh	r3, [r7, #6]
 800dc9e:	9302      	str	r3, [sp, #8]
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	9301      	str	r3, [sp, #4]
 800dca4:	2301      	movs	r3, #1
 800dca6:	9300      	str	r3, [sp, #0]
 800dca8:	2302      	movs	r3, #2
 800dcaa:	2200      	movs	r2, #0
 800dcac:	68f8      	ldr	r0, [r7, #12]
 800dcae:	f002 fd34 	bl	801071a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800dcb2:	2300      	movs	r3, #0
}
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	3710      	adds	r7, #16
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}

0800dcbc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b088      	sub	sp, #32
 800dcc0:	af04      	add	r7, sp, #16
 800dcc2:	60f8      	str	r0, [r7, #12]
 800dcc4:	60b9      	str	r1, [r7, #8]
 800dcc6:	4611      	mov	r1, r2
 800dcc8:	461a      	mov	r2, r3
 800dcca:	460b      	mov	r3, r1
 800dccc:	80fb      	strh	r3, [r7, #6]
 800dcce:	4613      	mov	r3, r2
 800dcd0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800dcd2:	7979      	ldrb	r1, [r7, #5]
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	9303      	str	r3, [sp, #12]
 800dcd8:	88fb      	ldrh	r3, [r7, #6]
 800dcda:	9302      	str	r3, [sp, #8]
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	9301      	str	r3, [sp, #4]
 800dce0:	2301      	movs	r3, #1
 800dce2:	9300      	str	r3, [sp, #0]
 800dce4:	2302      	movs	r3, #2
 800dce6:	2201      	movs	r2, #1
 800dce8:	68f8      	ldr	r0, [r7, #12]
 800dcea:	f002 fd16 	bl	801071a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800dcee:	2300      	movs	r3, #0
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3710      	adds	r7, #16
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}

0800dcf8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b086      	sub	sp, #24
 800dcfc:	af04      	add	r7, sp, #16
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	4608      	mov	r0, r1
 800dd02:	4611      	mov	r1, r2
 800dd04:	461a      	mov	r2, r3
 800dd06:	4603      	mov	r3, r0
 800dd08:	70fb      	strb	r3, [r7, #3]
 800dd0a:	460b      	mov	r3, r1
 800dd0c:	70bb      	strb	r3, [r7, #2]
 800dd0e:	4613      	mov	r3, r2
 800dd10:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800dd12:	7878      	ldrb	r0, [r7, #1]
 800dd14:	78ba      	ldrb	r2, [r7, #2]
 800dd16:	78f9      	ldrb	r1, [r7, #3]
 800dd18:	8b3b      	ldrh	r3, [r7, #24]
 800dd1a:	9302      	str	r3, [sp, #8]
 800dd1c:	7d3b      	ldrb	r3, [r7, #20]
 800dd1e:	9301      	str	r3, [sp, #4]
 800dd20:	7c3b      	ldrb	r3, [r7, #16]
 800dd22:	9300      	str	r3, [sp, #0]
 800dd24:	4603      	mov	r3, r0
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f002 fca9 	bl	801067e <USBH_LL_OpenPipe>

  return USBH_OK;
 800dd2c:	2300      	movs	r3, #0
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3708      	adds	r7, #8
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}

0800dd36 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800dd36:	b580      	push	{r7, lr}
 800dd38:	b082      	sub	sp, #8
 800dd3a:	af00      	add	r7, sp, #0
 800dd3c:	6078      	str	r0, [r7, #4]
 800dd3e:	460b      	mov	r3, r1
 800dd40:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800dd42:	78fb      	ldrb	r3, [r7, #3]
 800dd44:	4619      	mov	r1, r3
 800dd46:	6878      	ldr	r0, [r7, #4]
 800dd48:	f002 fcc8 	bl	80106dc <USBH_LL_ClosePipe>

  return USBH_OK;
 800dd4c:	2300      	movs	r3, #0
}
 800dd4e:	4618      	mov	r0, r3
 800dd50:	3708      	adds	r7, #8
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}

0800dd56 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800dd56:	b580      	push	{r7, lr}
 800dd58:	b084      	sub	sp, #16
 800dd5a:	af00      	add	r7, sp, #0
 800dd5c:	6078      	str	r0, [r7, #4]
 800dd5e:	460b      	mov	r3, r1
 800dd60:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f000 f836 	bl	800ddd4 <USBH_GetFreePipe>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800dd6c:	89fb      	ldrh	r3, [r7, #14]
 800dd6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dd72:	4293      	cmp	r3, r2
 800dd74:	d00a      	beq.n	800dd8c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800dd76:	78fa      	ldrb	r2, [r7, #3]
 800dd78:	89fb      	ldrh	r3, [r7, #14]
 800dd7a:	f003 030f 	and.w	r3, r3, #15
 800dd7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800dd82:	6879      	ldr	r1, [r7, #4]
 800dd84:	33e0      	adds	r3, #224	@ 0xe0
 800dd86:	009b      	lsls	r3, r3, #2
 800dd88:	440b      	add	r3, r1
 800dd8a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800dd8c:	89fb      	ldrh	r3, [r7, #14]
 800dd8e:	b2db      	uxtb	r3, r3
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	3710      	adds	r7, #16
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}

0800dd98 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800dd98:	b480      	push	{r7}
 800dd9a:	b083      	sub	sp, #12
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	460b      	mov	r3, r1
 800dda2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800dda4:	78fb      	ldrb	r3, [r7, #3]
 800dda6:	2b0f      	cmp	r3, #15
 800dda8:	d80d      	bhi.n	800ddc6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ddaa:	78fb      	ldrb	r3, [r7, #3]
 800ddac:	687a      	ldr	r2, [r7, #4]
 800ddae:	33e0      	adds	r3, #224	@ 0xe0
 800ddb0:	009b      	lsls	r3, r3, #2
 800ddb2:	4413      	add	r3, r2
 800ddb4:	685a      	ldr	r2, [r3, #4]
 800ddb6:	78fb      	ldrb	r3, [r7, #3]
 800ddb8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ddbc:	6879      	ldr	r1, [r7, #4]
 800ddbe:	33e0      	adds	r3, #224	@ 0xe0
 800ddc0:	009b      	lsls	r3, r3, #2
 800ddc2:	440b      	add	r3, r1
 800ddc4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ddc6:	2300      	movs	r3, #0
}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	370c      	adds	r7, #12
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd2:	4770      	bx	lr

0800ddd4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ddd4:	b480      	push	{r7}
 800ddd6:	b085      	sub	sp, #20
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800dddc:	2300      	movs	r3, #0
 800ddde:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800dde0:	2300      	movs	r3, #0
 800dde2:	73fb      	strb	r3, [r7, #15]
 800dde4:	e00f      	b.n	800de06 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800dde6:	7bfb      	ldrb	r3, [r7, #15]
 800dde8:	687a      	ldr	r2, [r7, #4]
 800ddea:	33e0      	adds	r3, #224	@ 0xe0
 800ddec:	009b      	lsls	r3, r3, #2
 800ddee:	4413      	add	r3, r2
 800ddf0:	685b      	ldr	r3, [r3, #4]
 800ddf2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d102      	bne.n	800de00 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ddfa:	7bfb      	ldrb	r3, [r7, #15]
 800ddfc:	b29b      	uxth	r3, r3
 800ddfe:	e007      	b.n	800de10 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800de00:	7bfb      	ldrb	r3, [r7, #15]
 800de02:	3301      	adds	r3, #1
 800de04:	73fb      	strb	r3, [r7, #15]
 800de06:	7bfb      	ldrb	r3, [r7, #15]
 800de08:	2b0f      	cmp	r3, #15
 800de0a:	d9ec      	bls.n	800dde6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800de0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800de10:	4618      	mov	r0, r3
 800de12:	3714      	adds	r7, #20
 800de14:	46bd      	mov	sp, r7
 800de16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1a:	4770      	bx	lr

0800de1c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800de1c:	b480      	push	{r7}
 800de1e:	b085      	sub	sp, #20
 800de20:	af00      	add	r7, sp, #0
 800de22:	4603      	mov	r3, r0
 800de24:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800de26:	2300      	movs	r3, #0
 800de28:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800de2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800de2e:	2b84      	cmp	r3, #132	@ 0x84
 800de30:	d005      	beq.n	800de3e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800de32:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	4413      	add	r3, r2
 800de3a:	3303      	adds	r3, #3
 800de3c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800de3e:	68fb      	ldr	r3, [r7, #12]
}
 800de40:	4618      	mov	r0, r3
 800de42:	3714      	adds	r7, #20
 800de44:	46bd      	mov	sp, r7
 800de46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4a:	4770      	bx	lr

0800de4c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800de4c:	b480      	push	{r7}
 800de4e:	b083      	sub	sp, #12
 800de50:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de52:	f3ef 8305 	mrs	r3, IPSR
 800de56:	607b      	str	r3, [r7, #4]
  return(result);
 800de58:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	bf14      	ite	ne
 800de5e:	2301      	movne	r3, #1
 800de60:	2300      	moveq	r3, #0
 800de62:	b2db      	uxtb	r3, r3
}
 800de64:	4618      	mov	r0, r3
 800de66:	370c      	adds	r7, #12
 800de68:	46bd      	mov	sp, r7
 800de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6e:	4770      	bx	lr

0800de70 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800de74:	f001 f8ce 	bl	800f014 <vTaskStartScheduler>
  
  return osOK;
 800de78:	2300      	movs	r3, #0
}
 800de7a:	4618      	mov	r0, r3
 800de7c:	bd80      	pop	{r7, pc}

0800de7e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800de7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de80:	b089      	sub	sp, #36	@ 0x24
 800de82:	af04      	add	r7, sp, #16
 800de84:	6078      	str	r0, [r7, #4]
 800de86:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	695b      	ldr	r3, [r3, #20]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d020      	beq.n	800ded2 <osThreadCreate+0x54>
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	699b      	ldr	r3, [r3, #24]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d01c      	beq.n	800ded2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	685c      	ldr	r4, [r3, #4]
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	691e      	ldr	r6, [r3, #16]
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800deaa:	4618      	mov	r0, r3
 800deac:	f7ff ffb6 	bl	800de1c <makeFreeRtosPriority>
 800deb0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	695b      	ldr	r3, [r3, #20]
 800deb6:	687a      	ldr	r2, [r7, #4]
 800deb8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800deba:	9202      	str	r2, [sp, #8]
 800debc:	9301      	str	r3, [sp, #4]
 800debe:	9100      	str	r1, [sp, #0]
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	4632      	mov	r2, r6
 800dec4:	4629      	mov	r1, r5
 800dec6:	4620      	mov	r0, r4
 800dec8:	f000 ff0c 	bl	800ece4 <xTaskCreateStatic>
 800decc:	4603      	mov	r3, r0
 800dece:	60fb      	str	r3, [r7, #12]
 800ded0:	e01c      	b.n	800df0c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	685c      	ldr	r4, [r3, #4]
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dede:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dee6:	4618      	mov	r0, r3
 800dee8:	f7ff ff98 	bl	800de1c <makeFreeRtosPriority>
 800deec:	4602      	mov	r2, r0
 800deee:	f107 030c 	add.w	r3, r7, #12
 800def2:	9301      	str	r3, [sp, #4]
 800def4:	9200      	str	r2, [sp, #0]
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	4632      	mov	r2, r6
 800defa:	4629      	mov	r1, r5
 800defc:	4620      	mov	r0, r4
 800defe:	f000 ff51 	bl	800eda4 <xTaskCreate>
 800df02:	4603      	mov	r3, r0
 800df04:	2b01      	cmp	r3, #1
 800df06:	d001      	beq.n	800df0c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800df08:	2300      	movs	r3, #0
 800df0a:	e000      	b.n	800df0e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800df0c:	68fb      	ldr	r3, [r7, #12]
}
 800df0e:	4618      	mov	r0, r3
 800df10:	3714      	adds	r7, #20
 800df12:	46bd      	mov	sp, r7
 800df14:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800df16 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800df16:	b590      	push	{r4, r7, lr}
 800df18:	b085      	sub	sp, #20
 800df1a:	af02      	add	r7, sp, #8
 800df1c:	6078      	str	r0, [r7, #4]
 800df1e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	689b      	ldr	r3, [r3, #8]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d011      	beq.n	800df4c <osMessageCreate+0x36>
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	68db      	ldr	r3, [r3, #12]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d00d      	beq.n	800df4c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	6818      	ldr	r0, [r3, #0]
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	6859      	ldr	r1, [r3, #4]
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	689a      	ldr	r2, [r3, #8]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	68db      	ldr	r3, [r3, #12]
 800df40:	2400      	movs	r4, #0
 800df42:	9400      	str	r4, [sp, #0]
 800df44:	f000 f9e2 	bl	800e30c <xQueueGenericCreateStatic>
 800df48:	4603      	mov	r3, r0
 800df4a:	e008      	b.n	800df5e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6818      	ldr	r0, [r3, #0]
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	2200      	movs	r2, #0
 800df56:	4619      	mov	r1, r3
 800df58:	f000 fa55 	bl	800e406 <xQueueGenericCreate>
 800df5c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800df5e:	4618      	mov	r0, r3
 800df60:	370c      	adds	r7, #12
 800df62:	46bd      	mov	sp, r7
 800df64:	bd90      	pop	{r4, r7, pc}
	...

0800df68 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b086      	sub	sp, #24
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	60f8      	str	r0, [r7, #12]
 800df70:	60b9      	str	r1, [r7, #8]
 800df72:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800df74:	2300      	movs	r3, #0
 800df76:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d101      	bne.n	800df86 <osMessagePut+0x1e>
    ticks = 1;
 800df82:	2301      	movs	r3, #1
 800df84:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800df86:	f7ff ff61 	bl	800de4c <inHandlerMode>
 800df8a:	4603      	mov	r3, r0
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d018      	beq.n	800dfc2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800df90:	f107 0210 	add.w	r2, r7, #16
 800df94:	f107 0108 	add.w	r1, r7, #8
 800df98:	2300      	movs	r3, #0
 800df9a:	68f8      	ldr	r0, [r7, #12]
 800df9c:	f000 fb90 	bl	800e6c0 <xQueueGenericSendFromISR>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	2b01      	cmp	r3, #1
 800dfa4:	d001      	beq.n	800dfaa <osMessagePut+0x42>
      return osErrorOS;
 800dfa6:	23ff      	movs	r3, #255	@ 0xff
 800dfa8:	e018      	b.n	800dfdc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800dfaa:	693b      	ldr	r3, [r7, #16]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d014      	beq.n	800dfda <osMessagePut+0x72>
 800dfb0:	4b0c      	ldr	r3, [pc, #48]	@ (800dfe4 <osMessagePut+0x7c>)
 800dfb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfb6:	601a      	str	r2, [r3, #0]
 800dfb8:	f3bf 8f4f 	dsb	sy
 800dfbc:	f3bf 8f6f 	isb	sy
 800dfc0:	e00b      	b.n	800dfda <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800dfc2:	f107 0108 	add.w	r1, r7, #8
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	697a      	ldr	r2, [r7, #20]
 800dfca:	68f8      	ldr	r0, [r7, #12]
 800dfcc:	f000 fa76 	bl	800e4bc <xQueueGenericSend>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	2b01      	cmp	r3, #1
 800dfd4:	d001      	beq.n	800dfda <osMessagePut+0x72>
      return osErrorOS;
 800dfd6:	23ff      	movs	r3, #255	@ 0xff
 800dfd8:	e000      	b.n	800dfdc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800dfda:	2300      	movs	r3, #0
}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	3718      	adds	r7, #24
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}
 800dfe4:	e000ed04 	.word	0xe000ed04

0800dfe8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800dfe8:	b590      	push	{r4, r7, lr}
 800dfea:	b08b      	sub	sp, #44	@ 0x2c
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	60f8      	str	r0, [r7, #12]
 800dff0:	60b9      	str	r1, [r7, #8]
 800dff2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800dff8:	2300      	movs	r3, #0
 800dffa:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d10a      	bne.n	800e018 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800e002:	2380      	movs	r3, #128	@ 0x80
 800e004:	617b      	str	r3, [r7, #20]
    return event;
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	461c      	mov	r4, r3
 800e00a:	f107 0314 	add.w	r3, r7, #20
 800e00e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e012:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e016:	e054      	b.n	800e0c2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800e018:	2300      	movs	r3, #0
 800e01a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800e01c:	2300      	movs	r3, #0
 800e01e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e026:	d103      	bne.n	800e030 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800e028:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e02c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e02e:	e009      	b.n	800e044 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d006      	beq.n	800e044 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800e03a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d101      	bne.n	800e044 <osMessageGet+0x5c>
      ticks = 1;
 800e040:	2301      	movs	r3, #1
 800e042:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800e044:	f7ff ff02 	bl	800de4c <inHandlerMode>
 800e048:	4603      	mov	r3, r0
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d01c      	beq.n	800e088 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800e04e:	f107 0220 	add.w	r2, r7, #32
 800e052:	f107 0314 	add.w	r3, r7, #20
 800e056:	3304      	adds	r3, #4
 800e058:	4619      	mov	r1, r3
 800e05a:	68b8      	ldr	r0, [r7, #8]
 800e05c:	f000 fcb0 	bl	800e9c0 <xQueueReceiveFromISR>
 800e060:	4603      	mov	r3, r0
 800e062:	2b01      	cmp	r3, #1
 800e064:	d102      	bne.n	800e06c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800e066:	2310      	movs	r3, #16
 800e068:	617b      	str	r3, [r7, #20]
 800e06a:	e001      	b.n	800e070 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800e06c:	2300      	movs	r3, #0
 800e06e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e070:	6a3b      	ldr	r3, [r7, #32]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d01d      	beq.n	800e0b2 <osMessageGet+0xca>
 800e076:	4b15      	ldr	r3, [pc, #84]	@ (800e0cc <osMessageGet+0xe4>)
 800e078:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e07c:	601a      	str	r2, [r3, #0]
 800e07e:	f3bf 8f4f 	dsb	sy
 800e082:	f3bf 8f6f 	isb	sy
 800e086:	e014      	b.n	800e0b2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800e088:	f107 0314 	add.w	r3, r7, #20
 800e08c:	3304      	adds	r3, #4
 800e08e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e090:	4619      	mov	r1, r3
 800e092:	68b8      	ldr	r0, [r7, #8]
 800e094:	f000 fbb2 	bl	800e7fc <xQueueReceive>
 800e098:	4603      	mov	r3, r0
 800e09a:	2b01      	cmp	r3, #1
 800e09c:	d102      	bne.n	800e0a4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800e09e:	2310      	movs	r3, #16
 800e0a0:	617b      	str	r3, [r7, #20]
 800e0a2:	e006      	b.n	800e0b2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800e0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d101      	bne.n	800e0ae <osMessageGet+0xc6>
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	e000      	b.n	800e0b0 <osMessageGet+0xc8>
 800e0ae:	2340      	movs	r3, #64	@ 0x40
 800e0b0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	461c      	mov	r4, r3
 800e0b6:	f107 0314 	add.w	r3, r7, #20
 800e0ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e0be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800e0c2:	68f8      	ldr	r0, [r7, #12]
 800e0c4:	372c      	adds	r7, #44	@ 0x2c
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd90      	pop	{r4, r7, pc}
 800e0ca:	bf00      	nop
 800e0cc:	e000ed04 	.word	0xe000ed04

0800e0d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e0d0:	b480      	push	{r7}
 800e0d2:	b083      	sub	sp, #12
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f103 0208 	add.w	r2, r3, #8
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e0e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f103 0208 	add.w	r2, r3, #8
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	f103 0208 	add.w	r2, r3, #8
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2200      	movs	r2, #0
 800e102:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e104:	bf00      	nop
 800e106:	370c      	adds	r7, #12
 800e108:	46bd      	mov	sp, r7
 800e10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10e:	4770      	bx	lr

0800e110 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e110:	b480      	push	{r7}
 800e112:	b083      	sub	sp, #12
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2200      	movs	r2, #0
 800e11c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e11e:	bf00      	nop
 800e120:	370c      	adds	r7, #12
 800e122:	46bd      	mov	sp, r7
 800e124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e128:	4770      	bx	lr

0800e12a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e12a:	b480      	push	{r7}
 800e12c:	b085      	sub	sp, #20
 800e12e:	af00      	add	r7, sp, #0
 800e130:	6078      	str	r0, [r7, #4]
 800e132:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	685b      	ldr	r3, [r3, #4]
 800e138:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	68fa      	ldr	r2, [r7, #12]
 800e13e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	689a      	ldr	r2, [r3, #8]
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	689b      	ldr	r3, [r3, #8]
 800e14c:	683a      	ldr	r2, [r7, #0]
 800e14e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	683a      	ldr	r2, [r7, #0]
 800e154:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	687a      	ldr	r2, [r7, #4]
 800e15a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	1c5a      	adds	r2, r3, #1
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	601a      	str	r2, [r3, #0]
}
 800e166:	bf00      	nop
 800e168:	3714      	adds	r7, #20
 800e16a:	46bd      	mov	sp, r7
 800e16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e170:	4770      	bx	lr

0800e172 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e172:	b480      	push	{r7}
 800e174:	b085      	sub	sp, #20
 800e176:	af00      	add	r7, sp, #0
 800e178:	6078      	str	r0, [r7, #4]
 800e17a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e188:	d103      	bne.n	800e192 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	691b      	ldr	r3, [r3, #16]
 800e18e:	60fb      	str	r3, [r7, #12]
 800e190:	e00c      	b.n	800e1ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	3308      	adds	r3, #8
 800e196:	60fb      	str	r3, [r7, #12]
 800e198:	e002      	b.n	800e1a0 <vListInsert+0x2e>
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	685b      	ldr	r3, [r3, #4]
 800e19e:	60fb      	str	r3, [r7, #12]
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	685b      	ldr	r3, [r3, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	68ba      	ldr	r2, [r7, #8]
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	d2f6      	bcs.n	800e19a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	685a      	ldr	r2, [r3, #4]
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	685b      	ldr	r3, [r3, #4]
 800e1b8:	683a      	ldr	r2, [r7, #0]
 800e1ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	68fa      	ldr	r2, [r7, #12]
 800e1c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	683a      	ldr	r2, [r7, #0]
 800e1c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	687a      	ldr	r2, [r7, #4]
 800e1cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	1c5a      	adds	r2, r3, #1
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	601a      	str	r2, [r3, #0]
}
 800e1d8:	bf00      	nop
 800e1da:	3714      	adds	r7, #20
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e2:	4770      	bx	lr

0800e1e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b085      	sub	sp, #20
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	691b      	ldr	r3, [r3, #16]
 800e1f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	685b      	ldr	r3, [r3, #4]
 800e1f6:	687a      	ldr	r2, [r7, #4]
 800e1f8:	6892      	ldr	r2, [r2, #8]
 800e1fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	689b      	ldr	r3, [r3, #8]
 800e200:	687a      	ldr	r2, [r7, #4]
 800e202:	6852      	ldr	r2, [r2, #4]
 800e204:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	685b      	ldr	r3, [r3, #4]
 800e20a:	687a      	ldr	r2, [r7, #4]
 800e20c:	429a      	cmp	r2, r3
 800e20e:	d103      	bne.n	800e218 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	689a      	ldr	r2, [r3, #8]
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2200      	movs	r2, #0
 800e21c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	1e5a      	subs	r2, r3, #1
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	681b      	ldr	r3, [r3, #0]
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	3714      	adds	r7, #20
 800e230:	46bd      	mov	sp, r7
 800e232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e236:	4770      	bx	lr

0800e238 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b084      	sub	sp, #16
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d10b      	bne.n	800e264 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e24c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e250:	f383 8811 	msr	BASEPRI, r3
 800e254:	f3bf 8f6f 	isb	sy
 800e258:	f3bf 8f4f 	dsb	sy
 800e25c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e25e:	bf00      	nop
 800e260:	bf00      	nop
 800e262:	e7fd      	b.n	800e260 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e264:	f001 fd20 	bl	800fca8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	681a      	ldr	r2, [r3, #0]
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e270:	68f9      	ldr	r1, [r7, #12]
 800e272:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e274:	fb01 f303 	mul.w	r3, r1, r3
 800e278:	441a      	add	r2, r3
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	2200      	movs	r2, #0
 800e282:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	681a      	ldr	r2, [r3, #0]
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	681a      	ldr	r2, [r3, #0]
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e294:	3b01      	subs	r3, #1
 800e296:	68f9      	ldr	r1, [r7, #12]
 800e298:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e29a:	fb01 f303 	mul.w	r3, r1, r3
 800e29e:	441a      	add	r2, r3
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	22ff      	movs	r2, #255	@ 0xff
 800e2a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	22ff      	movs	r2, #255	@ 0xff
 800e2b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d114      	bne.n	800e2e4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	691b      	ldr	r3, [r3, #16]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d01a      	beq.n	800e2f8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	3310      	adds	r3, #16
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f001 f8ee 	bl	800f4a8 <xTaskRemoveFromEventList>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d012      	beq.n	800e2f8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e2d2:	4b0d      	ldr	r3, [pc, #52]	@ (800e308 <xQueueGenericReset+0xd0>)
 800e2d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e2d8:	601a      	str	r2, [r3, #0]
 800e2da:	f3bf 8f4f 	dsb	sy
 800e2de:	f3bf 8f6f 	isb	sy
 800e2e2:	e009      	b.n	800e2f8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	3310      	adds	r3, #16
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f7ff fef1 	bl	800e0d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	3324      	adds	r3, #36	@ 0x24
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f7ff feec 	bl	800e0d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e2f8:	f001 fd08 	bl	800fd0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e2fc:	2301      	movs	r3, #1
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	3710      	adds	r7, #16
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}
 800e306:	bf00      	nop
 800e308:	e000ed04 	.word	0xe000ed04

0800e30c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b08e      	sub	sp, #56	@ 0x38
 800e310:	af02      	add	r7, sp, #8
 800e312:	60f8      	str	r0, [r7, #12]
 800e314:	60b9      	str	r1, [r7, #8]
 800e316:	607a      	str	r2, [r7, #4]
 800e318:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d10b      	bne.n	800e338 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800e320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e324:	f383 8811 	msr	BASEPRI, r3
 800e328:	f3bf 8f6f 	isb	sy
 800e32c:	f3bf 8f4f 	dsb	sy
 800e330:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e332:	bf00      	nop
 800e334:	bf00      	nop
 800e336:	e7fd      	b.n	800e334 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d10b      	bne.n	800e356 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800e33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e342:	f383 8811 	msr	BASEPRI, r3
 800e346:	f3bf 8f6f 	isb	sy
 800e34a:	f3bf 8f4f 	dsb	sy
 800e34e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e350:	bf00      	nop
 800e352:	bf00      	nop
 800e354:	e7fd      	b.n	800e352 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d002      	beq.n	800e362 <xQueueGenericCreateStatic+0x56>
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d001      	beq.n	800e366 <xQueueGenericCreateStatic+0x5a>
 800e362:	2301      	movs	r3, #1
 800e364:	e000      	b.n	800e368 <xQueueGenericCreateStatic+0x5c>
 800e366:	2300      	movs	r3, #0
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d10b      	bne.n	800e384 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800e36c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e370:	f383 8811 	msr	BASEPRI, r3
 800e374:	f3bf 8f6f 	isb	sy
 800e378:	f3bf 8f4f 	dsb	sy
 800e37c:	623b      	str	r3, [r7, #32]
}
 800e37e:	bf00      	nop
 800e380:	bf00      	nop
 800e382:	e7fd      	b.n	800e380 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d102      	bne.n	800e390 <xQueueGenericCreateStatic+0x84>
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d101      	bne.n	800e394 <xQueueGenericCreateStatic+0x88>
 800e390:	2301      	movs	r3, #1
 800e392:	e000      	b.n	800e396 <xQueueGenericCreateStatic+0x8a>
 800e394:	2300      	movs	r3, #0
 800e396:	2b00      	cmp	r3, #0
 800e398:	d10b      	bne.n	800e3b2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800e39a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e39e:	f383 8811 	msr	BASEPRI, r3
 800e3a2:	f3bf 8f6f 	isb	sy
 800e3a6:	f3bf 8f4f 	dsb	sy
 800e3aa:	61fb      	str	r3, [r7, #28]
}
 800e3ac:	bf00      	nop
 800e3ae:	bf00      	nop
 800e3b0:	e7fd      	b.n	800e3ae <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e3b2:	2348      	movs	r3, #72	@ 0x48
 800e3b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	2b48      	cmp	r3, #72	@ 0x48
 800e3ba:	d00b      	beq.n	800e3d4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800e3bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3c0:	f383 8811 	msr	BASEPRI, r3
 800e3c4:	f3bf 8f6f 	isb	sy
 800e3c8:	f3bf 8f4f 	dsb	sy
 800e3cc:	61bb      	str	r3, [r7, #24]
}
 800e3ce:	bf00      	nop
 800e3d0:	bf00      	nop
 800e3d2:	e7fd      	b.n	800e3d0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e3d4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800e3da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d00d      	beq.n	800e3fc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e3e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3e2:	2201      	movs	r2, #1
 800e3e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e3e8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e3ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3ee:	9300      	str	r3, [sp, #0]
 800e3f0:	4613      	mov	r3, r2
 800e3f2:	687a      	ldr	r2, [r7, #4]
 800e3f4:	68b9      	ldr	r1, [r7, #8]
 800e3f6:	68f8      	ldr	r0, [r7, #12]
 800e3f8:	f000 f840 	bl	800e47c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e3fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800e3fe:	4618      	mov	r0, r3
 800e400:	3730      	adds	r7, #48	@ 0x30
 800e402:	46bd      	mov	sp, r7
 800e404:	bd80      	pop	{r7, pc}

0800e406 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e406:	b580      	push	{r7, lr}
 800e408:	b08a      	sub	sp, #40	@ 0x28
 800e40a:	af02      	add	r7, sp, #8
 800e40c:	60f8      	str	r0, [r7, #12]
 800e40e:	60b9      	str	r1, [r7, #8]
 800e410:	4613      	mov	r3, r2
 800e412:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d10b      	bne.n	800e432 <xQueueGenericCreate+0x2c>
	__asm volatile
 800e41a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e41e:	f383 8811 	msr	BASEPRI, r3
 800e422:	f3bf 8f6f 	isb	sy
 800e426:	f3bf 8f4f 	dsb	sy
 800e42a:	613b      	str	r3, [r7, #16]
}
 800e42c:	bf00      	nop
 800e42e:	bf00      	nop
 800e430:	e7fd      	b.n	800e42e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	68ba      	ldr	r2, [r7, #8]
 800e436:	fb02 f303 	mul.w	r3, r2, r3
 800e43a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e43c:	69fb      	ldr	r3, [r7, #28]
 800e43e:	3348      	adds	r3, #72	@ 0x48
 800e440:	4618      	mov	r0, r3
 800e442:	f001 fd53 	bl	800feec <pvPortMalloc>
 800e446:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e448:	69bb      	ldr	r3, [r7, #24]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d011      	beq.n	800e472 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e44e:	69bb      	ldr	r3, [r7, #24]
 800e450:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	3348      	adds	r3, #72	@ 0x48
 800e456:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e458:	69bb      	ldr	r3, [r7, #24]
 800e45a:	2200      	movs	r2, #0
 800e45c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e460:	79fa      	ldrb	r2, [r7, #7]
 800e462:	69bb      	ldr	r3, [r7, #24]
 800e464:	9300      	str	r3, [sp, #0]
 800e466:	4613      	mov	r3, r2
 800e468:	697a      	ldr	r2, [r7, #20]
 800e46a:	68b9      	ldr	r1, [r7, #8]
 800e46c:	68f8      	ldr	r0, [r7, #12]
 800e46e:	f000 f805 	bl	800e47c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e472:	69bb      	ldr	r3, [r7, #24]
	}
 800e474:	4618      	mov	r0, r3
 800e476:	3720      	adds	r7, #32
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}

0800e47c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b084      	sub	sp, #16
 800e480:	af00      	add	r7, sp, #0
 800e482:	60f8      	str	r0, [r7, #12]
 800e484:	60b9      	str	r1, [r7, #8]
 800e486:	607a      	str	r2, [r7, #4]
 800e488:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e48a:	68bb      	ldr	r3, [r7, #8]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d103      	bne.n	800e498 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e490:	69bb      	ldr	r3, [r7, #24]
 800e492:	69ba      	ldr	r2, [r7, #24]
 800e494:	601a      	str	r2, [r3, #0]
 800e496:	e002      	b.n	800e49e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e498:	69bb      	ldr	r3, [r7, #24]
 800e49a:	687a      	ldr	r2, [r7, #4]
 800e49c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e49e:	69bb      	ldr	r3, [r7, #24]
 800e4a0:	68fa      	ldr	r2, [r7, #12]
 800e4a2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e4a4:	69bb      	ldr	r3, [r7, #24]
 800e4a6:	68ba      	ldr	r2, [r7, #8]
 800e4a8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e4aa:	2101      	movs	r1, #1
 800e4ac:	69b8      	ldr	r0, [r7, #24]
 800e4ae:	f7ff fec3 	bl	800e238 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e4b2:	bf00      	nop
 800e4b4:	3710      	adds	r7, #16
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}
	...

0800e4bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b08e      	sub	sp, #56	@ 0x38
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	60f8      	str	r0, [r7, #12]
 800e4c4:	60b9      	str	r1, [r7, #8]
 800e4c6:	607a      	str	r2, [r7, #4]
 800e4c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e4d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d10b      	bne.n	800e4f0 <xQueueGenericSend+0x34>
	__asm volatile
 800e4d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4dc:	f383 8811 	msr	BASEPRI, r3
 800e4e0:	f3bf 8f6f 	isb	sy
 800e4e4:	f3bf 8f4f 	dsb	sy
 800e4e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e4ea:	bf00      	nop
 800e4ec:	bf00      	nop
 800e4ee:	e7fd      	b.n	800e4ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e4f0:	68bb      	ldr	r3, [r7, #8]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d103      	bne.n	800e4fe <xQueueGenericSend+0x42>
 800e4f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d101      	bne.n	800e502 <xQueueGenericSend+0x46>
 800e4fe:	2301      	movs	r3, #1
 800e500:	e000      	b.n	800e504 <xQueueGenericSend+0x48>
 800e502:	2300      	movs	r3, #0
 800e504:	2b00      	cmp	r3, #0
 800e506:	d10b      	bne.n	800e520 <xQueueGenericSend+0x64>
	__asm volatile
 800e508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e50c:	f383 8811 	msr	BASEPRI, r3
 800e510:	f3bf 8f6f 	isb	sy
 800e514:	f3bf 8f4f 	dsb	sy
 800e518:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e51a:	bf00      	nop
 800e51c:	bf00      	nop
 800e51e:	e7fd      	b.n	800e51c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	2b02      	cmp	r3, #2
 800e524:	d103      	bne.n	800e52e <xQueueGenericSend+0x72>
 800e526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e52a:	2b01      	cmp	r3, #1
 800e52c:	d101      	bne.n	800e532 <xQueueGenericSend+0x76>
 800e52e:	2301      	movs	r3, #1
 800e530:	e000      	b.n	800e534 <xQueueGenericSend+0x78>
 800e532:	2300      	movs	r3, #0
 800e534:	2b00      	cmp	r3, #0
 800e536:	d10b      	bne.n	800e550 <xQueueGenericSend+0x94>
	__asm volatile
 800e538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e53c:	f383 8811 	msr	BASEPRI, r3
 800e540:	f3bf 8f6f 	isb	sy
 800e544:	f3bf 8f4f 	dsb	sy
 800e548:	623b      	str	r3, [r7, #32]
}
 800e54a:	bf00      	nop
 800e54c:	bf00      	nop
 800e54e:	e7fd      	b.n	800e54c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e550:	f001 f96a 	bl	800f828 <xTaskGetSchedulerState>
 800e554:	4603      	mov	r3, r0
 800e556:	2b00      	cmp	r3, #0
 800e558:	d102      	bne.n	800e560 <xQueueGenericSend+0xa4>
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d101      	bne.n	800e564 <xQueueGenericSend+0xa8>
 800e560:	2301      	movs	r3, #1
 800e562:	e000      	b.n	800e566 <xQueueGenericSend+0xaa>
 800e564:	2300      	movs	r3, #0
 800e566:	2b00      	cmp	r3, #0
 800e568:	d10b      	bne.n	800e582 <xQueueGenericSend+0xc6>
	__asm volatile
 800e56a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e56e:	f383 8811 	msr	BASEPRI, r3
 800e572:	f3bf 8f6f 	isb	sy
 800e576:	f3bf 8f4f 	dsb	sy
 800e57a:	61fb      	str	r3, [r7, #28]
}
 800e57c:	bf00      	nop
 800e57e:	bf00      	nop
 800e580:	e7fd      	b.n	800e57e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e582:	f001 fb91 	bl	800fca8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e588:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e58a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e58c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e58e:	429a      	cmp	r2, r3
 800e590:	d302      	bcc.n	800e598 <xQueueGenericSend+0xdc>
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	2b02      	cmp	r3, #2
 800e596:	d129      	bne.n	800e5ec <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e598:	683a      	ldr	r2, [r7, #0]
 800e59a:	68b9      	ldr	r1, [r7, #8]
 800e59c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e59e:	f000 fa91 	bl	800eac4 <prvCopyDataToQueue>
 800e5a2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e5a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d010      	beq.n	800e5ce <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e5ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5ae:	3324      	adds	r3, #36	@ 0x24
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f000 ff79 	bl	800f4a8 <xTaskRemoveFromEventList>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d013      	beq.n	800e5e4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e5bc:	4b3f      	ldr	r3, [pc, #252]	@ (800e6bc <xQueueGenericSend+0x200>)
 800e5be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e5c2:	601a      	str	r2, [r3, #0]
 800e5c4:	f3bf 8f4f 	dsb	sy
 800e5c8:	f3bf 8f6f 	isb	sy
 800e5cc:	e00a      	b.n	800e5e4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e5ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d007      	beq.n	800e5e4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e5d4:	4b39      	ldr	r3, [pc, #228]	@ (800e6bc <xQueueGenericSend+0x200>)
 800e5d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e5da:	601a      	str	r2, [r3, #0]
 800e5dc:	f3bf 8f4f 	dsb	sy
 800e5e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e5e4:	f001 fb92 	bl	800fd0c <vPortExitCritical>
				return pdPASS;
 800e5e8:	2301      	movs	r3, #1
 800e5ea:	e063      	b.n	800e6b4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d103      	bne.n	800e5fa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e5f2:	f001 fb8b 	bl	800fd0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	e05c      	b.n	800e6b4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e5fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d106      	bne.n	800e60e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e600:	f107 0314 	add.w	r3, r7, #20
 800e604:	4618      	mov	r0, r3
 800e606:	f000 ffb3 	bl	800f570 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e60a:	2301      	movs	r3, #1
 800e60c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e60e:	f001 fb7d 	bl	800fd0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e612:	f000 fd61 	bl	800f0d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e616:	f001 fb47 	bl	800fca8 <vPortEnterCritical>
 800e61a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e61c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e620:	b25b      	sxtb	r3, r3
 800e622:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e626:	d103      	bne.n	800e630 <xQueueGenericSend+0x174>
 800e628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e62a:	2200      	movs	r2, #0
 800e62c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e632:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e636:	b25b      	sxtb	r3, r3
 800e638:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e63c:	d103      	bne.n	800e646 <xQueueGenericSend+0x18a>
 800e63e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e640:	2200      	movs	r2, #0
 800e642:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e646:	f001 fb61 	bl	800fd0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e64a:	1d3a      	adds	r2, r7, #4
 800e64c:	f107 0314 	add.w	r3, r7, #20
 800e650:	4611      	mov	r1, r2
 800e652:	4618      	mov	r0, r3
 800e654:	f000 ffa2 	bl	800f59c <xTaskCheckForTimeOut>
 800e658:	4603      	mov	r3, r0
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d124      	bne.n	800e6a8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e65e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e660:	f000 fb28 	bl	800ecb4 <prvIsQueueFull>
 800e664:	4603      	mov	r3, r0
 800e666:	2b00      	cmp	r3, #0
 800e668:	d018      	beq.n	800e69c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e66a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e66c:	3310      	adds	r3, #16
 800e66e:	687a      	ldr	r2, [r7, #4]
 800e670:	4611      	mov	r1, r2
 800e672:	4618      	mov	r0, r3
 800e674:	f000 fef2 	bl	800f45c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e678:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e67a:	f000 fab3 	bl	800ebe4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e67e:	f000 fd39 	bl	800f0f4 <xTaskResumeAll>
 800e682:	4603      	mov	r3, r0
 800e684:	2b00      	cmp	r3, #0
 800e686:	f47f af7c 	bne.w	800e582 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800e68a:	4b0c      	ldr	r3, [pc, #48]	@ (800e6bc <xQueueGenericSend+0x200>)
 800e68c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e690:	601a      	str	r2, [r3, #0]
 800e692:	f3bf 8f4f 	dsb	sy
 800e696:	f3bf 8f6f 	isb	sy
 800e69a:	e772      	b.n	800e582 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e69c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e69e:	f000 faa1 	bl	800ebe4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e6a2:	f000 fd27 	bl	800f0f4 <xTaskResumeAll>
 800e6a6:	e76c      	b.n	800e582 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e6a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e6aa:	f000 fa9b 	bl	800ebe4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e6ae:	f000 fd21 	bl	800f0f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e6b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	3738      	adds	r7, #56	@ 0x38
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}
 800e6bc:	e000ed04 	.word	0xe000ed04

0800e6c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b090      	sub	sp, #64	@ 0x40
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	60f8      	str	r0, [r7, #12]
 800e6c8:	60b9      	str	r1, [r7, #8]
 800e6ca:	607a      	str	r2, [r7, #4]
 800e6cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800e6d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d10b      	bne.n	800e6f0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800e6d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6dc:	f383 8811 	msr	BASEPRI, r3
 800e6e0:	f3bf 8f6f 	isb	sy
 800e6e4:	f3bf 8f4f 	dsb	sy
 800e6e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e6ea:	bf00      	nop
 800e6ec:	bf00      	nop
 800e6ee:	e7fd      	b.n	800e6ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d103      	bne.n	800e6fe <xQueueGenericSendFromISR+0x3e>
 800e6f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d101      	bne.n	800e702 <xQueueGenericSendFromISR+0x42>
 800e6fe:	2301      	movs	r3, #1
 800e700:	e000      	b.n	800e704 <xQueueGenericSendFromISR+0x44>
 800e702:	2300      	movs	r3, #0
 800e704:	2b00      	cmp	r3, #0
 800e706:	d10b      	bne.n	800e720 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800e708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e70c:	f383 8811 	msr	BASEPRI, r3
 800e710:	f3bf 8f6f 	isb	sy
 800e714:	f3bf 8f4f 	dsb	sy
 800e718:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e71a:	bf00      	nop
 800e71c:	bf00      	nop
 800e71e:	e7fd      	b.n	800e71c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	2b02      	cmp	r3, #2
 800e724:	d103      	bne.n	800e72e <xQueueGenericSendFromISR+0x6e>
 800e726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e72a:	2b01      	cmp	r3, #1
 800e72c:	d101      	bne.n	800e732 <xQueueGenericSendFromISR+0x72>
 800e72e:	2301      	movs	r3, #1
 800e730:	e000      	b.n	800e734 <xQueueGenericSendFromISR+0x74>
 800e732:	2300      	movs	r3, #0
 800e734:	2b00      	cmp	r3, #0
 800e736:	d10b      	bne.n	800e750 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800e738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e73c:	f383 8811 	msr	BASEPRI, r3
 800e740:	f3bf 8f6f 	isb	sy
 800e744:	f3bf 8f4f 	dsb	sy
 800e748:	623b      	str	r3, [r7, #32]
}
 800e74a:	bf00      	nop
 800e74c:	bf00      	nop
 800e74e:	e7fd      	b.n	800e74c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e750:	f001 fb8a 	bl	800fe68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e754:	f3ef 8211 	mrs	r2, BASEPRI
 800e758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e75c:	f383 8811 	msr	BASEPRI, r3
 800e760:	f3bf 8f6f 	isb	sy
 800e764:	f3bf 8f4f 	dsb	sy
 800e768:	61fa      	str	r2, [r7, #28]
 800e76a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e76c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e76e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e772:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e778:	429a      	cmp	r2, r3
 800e77a:	d302      	bcc.n	800e782 <xQueueGenericSendFromISR+0xc2>
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	2b02      	cmp	r3, #2
 800e780:	d12f      	bne.n	800e7e2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e784:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e788:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e78c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e78e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e790:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e792:	683a      	ldr	r2, [r7, #0]
 800e794:	68b9      	ldr	r1, [r7, #8]
 800e796:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e798:	f000 f994 	bl	800eac4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e79c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800e7a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e7a4:	d112      	bne.n	800e7cc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e7a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d016      	beq.n	800e7dc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e7ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7b0:	3324      	adds	r3, #36	@ 0x24
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f000 fe78 	bl	800f4a8 <xTaskRemoveFromEventList>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d00e      	beq.n	800e7dc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d00b      	beq.n	800e7dc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2201      	movs	r2, #1
 800e7c8:	601a      	str	r2, [r3, #0]
 800e7ca:	e007      	b.n	800e7dc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e7cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e7d0:	3301      	adds	r3, #1
 800e7d2:	b2db      	uxtb	r3, r3
 800e7d4:	b25a      	sxtb	r2, r3
 800e7d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e7dc:	2301      	movs	r3, #1
 800e7de:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800e7e0:	e001      	b.n	800e7e6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e7e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e7e8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e7ea:	697b      	ldr	r3, [r7, #20]
 800e7ec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e7f0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e7f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	3740      	adds	r7, #64	@ 0x40
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	bd80      	pop	{r7, pc}

0800e7fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b08c      	sub	sp, #48	@ 0x30
 800e800:	af00      	add	r7, sp, #0
 800e802:	60f8      	str	r0, [r7, #12]
 800e804:	60b9      	str	r1, [r7, #8]
 800e806:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e808:	2300      	movs	r3, #0
 800e80a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e812:	2b00      	cmp	r3, #0
 800e814:	d10b      	bne.n	800e82e <xQueueReceive+0x32>
	__asm volatile
 800e816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e81a:	f383 8811 	msr	BASEPRI, r3
 800e81e:	f3bf 8f6f 	isb	sy
 800e822:	f3bf 8f4f 	dsb	sy
 800e826:	623b      	str	r3, [r7, #32]
}
 800e828:	bf00      	nop
 800e82a:	bf00      	nop
 800e82c:	e7fd      	b.n	800e82a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e82e:	68bb      	ldr	r3, [r7, #8]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d103      	bne.n	800e83c <xQueueReceive+0x40>
 800e834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d101      	bne.n	800e840 <xQueueReceive+0x44>
 800e83c:	2301      	movs	r3, #1
 800e83e:	e000      	b.n	800e842 <xQueueReceive+0x46>
 800e840:	2300      	movs	r3, #0
 800e842:	2b00      	cmp	r3, #0
 800e844:	d10b      	bne.n	800e85e <xQueueReceive+0x62>
	__asm volatile
 800e846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e84a:	f383 8811 	msr	BASEPRI, r3
 800e84e:	f3bf 8f6f 	isb	sy
 800e852:	f3bf 8f4f 	dsb	sy
 800e856:	61fb      	str	r3, [r7, #28]
}
 800e858:	bf00      	nop
 800e85a:	bf00      	nop
 800e85c:	e7fd      	b.n	800e85a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e85e:	f000 ffe3 	bl	800f828 <xTaskGetSchedulerState>
 800e862:	4603      	mov	r3, r0
 800e864:	2b00      	cmp	r3, #0
 800e866:	d102      	bne.n	800e86e <xQueueReceive+0x72>
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d101      	bne.n	800e872 <xQueueReceive+0x76>
 800e86e:	2301      	movs	r3, #1
 800e870:	e000      	b.n	800e874 <xQueueReceive+0x78>
 800e872:	2300      	movs	r3, #0
 800e874:	2b00      	cmp	r3, #0
 800e876:	d10b      	bne.n	800e890 <xQueueReceive+0x94>
	__asm volatile
 800e878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e87c:	f383 8811 	msr	BASEPRI, r3
 800e880:	f3bf 8f6f 	isb	sy
 800e884:	f3bf 8f4f 	dsb	sy
 800e888:	61bb      	str	r3, [r7, #24]
}
 800e88a:	bf00      	nop
 800e88c:	bf00      	nop
 800e88e:	e7fd      	b.n	800e88c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e890:	f001 fa0a 	bl	800fca8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e898:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d01f      	beq.n	800e8e0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e8a0:	68b9      	ldr	r1, [r7, #8]
 800e8a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e8a4:	f000 f978 	bl	800eb98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8aa:	1e5a      	subs	r2, r3, #1
 800e8ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8ae:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e8b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8b2:	691b      	ldr	r3, [r3, #16]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d00f      	beq.n	800e8d8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e8b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8ba:	3310      	adds	r3, #16
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f000 fdf3 	bl	800f4a8 <xTaskRemoveFromEventList>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d007      	beq.n	800e8d8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e8c8:	4b3c      	ldr	r3, [pc, #240]	@ (800e9bc <xQueueReceive+0x1c0>)
 800e8ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e8ce:	601a      	str	r2, [r3, #0]
 800e8d0:	f3bf 8f4f 	dsb	sy
 800e8d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e8d8:	f001 fa18 	bl	800fd0c <vPortExitCritical>
				return pdPASS;
 800e8dc:	2301      	movs	r3, #1
 800e8de:	e069      	b.n	800e9b4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d103      	bne.n	800e8ee <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e8e6:	f001 fa11 	bl	800fd0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	e062      	b.n	800e9b4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e8ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d106      	bne.n	800e902 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e8f4:	f107 0310 	add.w	r3, r7, #16
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f000 fe39 	bl	800f570 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e8fe:	2301      	movs	r3, #1
 800e900:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e902:	f001 fa03 	bl	800fd0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e906:	f000 fbe7 	bl	800f0d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e90a:	f001 f9cd 	bl	800fca8 <vPortEnterCritical>
 800e90e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e910:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e914:	b25b      	sxtb	r3, r3
 800e916:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e91a:	d103      	bne.n	800e924 <xQueueReceive+0x128>
 800e91c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e91e:	2200      	movs	r2, #0
 800e920:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e926:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e92a:	b25b      	sxtb	r3, r3
 800e92c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e930:	d103      	bne.n	800e93a <xQueueReceive+0x13e>
 800e932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e934:	2200      	movs	r2, #0
 800e936:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e93a:	f001 f9e7 	bl	800fd0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e93e:	1d3a      	adds	r2, r7, #4
 800e940:	f107 0310 	add.w	r3, r7, #16
 800e944:	4611      	mov	r1, r2
 800e946:	4618      	mov	r0, r3
 800e948:	f000 fe28 	bl	800f59c <xTaskCheckForTimeOut>
 800e94c:	4603      	mov	r3, r0
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d123      	bne.n	800e99a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e952:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e954:	f000 f998 	bl	800ec88 <prvIsQueueEmpty>
 800e958:	4603      	mov	r3, r0
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d017      	beq.n	800e98e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e95e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e960:	3324      	adds	r3, #36	@ 0x24
 800e962:	687a      	ldr	r2, [r7, #4]
 800e964:	4611      	mov	r1, r2
 800e966:	4618      	mov	r0, r3
 800e968:	f000 fd78 	bl	800f45c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e96c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e96e:	f000 f939 	bl	800ebe4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e972:	f000 fbbf 	bl	800f0f4 <xTaskResumeAll>
 800e976:	4603      	mov	r3, r0
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d189      	bne.n	800e890 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800e97c:	4b0f      	ldr	r3, [pc, #60]	@ (800e9bc <xQueueReceive+0x1c0>)
 800e97e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e982:	601a      	str	r2, [r3, #0]
 800e984:	f3bf 8f4f 	dsb	sy
 800e988:	f3bf 8f6f 	isb	sy
 800e98c:	e780      	b.n	800e890 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e98e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e990:	f000 f928 	bl	800ebe4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e994:	f000 fbae 	bl	800f0f4 <xTaskResumeAll>
 800e998:	e77a      	b.n	800e890 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e99a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e99c:	f000 f922 	bl	800ebe4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e9a0:	f000 fba8 	bl	800f0f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e9a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9a6:	f000 f96f 	bl	800ec88 <prvIsQueueEmpty>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	f43f af6f 	beq.w	800e890 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e9b2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	3730      	adds	r7, #48	@ 0x30
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}
 800e9bc:	e000ed04 	.word	0xe000ed04

0800e9c0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b08e      	sub	sp, #56	@ 0x38
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	60f8      	str	r0, [r7, #12]
 800e9c8:	60b9      	str	r1, [r7, #8]
 800e9ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e9d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d10b      	bne.n	800e9ee <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800e9d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9da:	f383 8811 	msr	BASEPRI, r3
 800e9de:	f3bf 8f6f 	isb	sy
 800e9e2:	f3bf 8f4f 	dsb	sy
 800e9e6:	623b      	str	r3, [r7, #32]
}
 800e9e8:	bf00      	nop
 800e9ea:	bf00      	nop
 800e9ec:	e7fd      	b.n	800e9ea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d103      	bne.n	800e9fc <xQueueReceiveFromISR+0x3c>
 800e9f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d101      	bne.n	800ea00 <xQueueReceiveFromISR+0x40>
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	e000      	b.n	800ea02 <xQueueReceiveFromISR+0x42>
 800ea00:	2300      	movs	r3, #0
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d10b      	bne.n	800ea1e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800ea06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea0a:	f383 8811 	msr	BASEPRI, r3
 800ea0e:	f3bf 8f6f 	isb	sy
 800ea12:	f3bf 8f4f 	dsb	sy
 800ea16:	61fb      	str	r3, [r7, #28]
}
 800ea18:	bf00      	nop
 800ea1a:	bf00      	nop
 800ea1c:	e7fd      	b.n	800ea1a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ea1e:	f001 fa23 	bl	800fe68 <vPortValidateInterruptPriority>
	__asm volatile
 800ea22:	f3ef 8211 	mrs	r2, BASEPRI
 800ea26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea2a:	f383 8811 	msr	BASEPRI, r3
 800ea2e:	f3bf 8f6f 	isb	sy
 800ea32:	f3bf 8f4f 	dsb	sy
 800ea36:	61ba      	str	r2, [r7, #24]
 800ea38:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ea3a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ea3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ea3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea42:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ea44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d02f      	beq.n	800eaaa <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ea4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ea50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ea54:	68b9      	ldr	r1, [r7, #8]
 800ea56:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ea58:	f000 f89e 	bl	800eb98 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ea5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea5e:	1e5a      	subs	r2, r3, #1
 800ea60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea62:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ea64:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ea68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ea6c:	d112      	bne.n	800ea94 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ea6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea70:	691b      	ldr	r3, [r3, #16]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d016      	beq.n	800eaa4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ea76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea78:	3310      	adds	r3, #16
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f000 fd14 	bl	800f4a8 <xTaskRemoveFromEventList>
 800ea80:	4603      	mov	r3, r0
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d00e      	beq.n	800eaa4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d00b      	beq.n	800eaa4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2201      	movs	r2, #1
 800ea90:	601a      	str	r2, [r3, #0]
 800ea92:	e007      	b.n	800eaa4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ea94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ea98:	3301      	adds	r3, #1
 800ea9a:	b2db      	uxtb	r3, r3
 800ea9c:	b25a      	sxtb	r2, r3
 800ea9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	637b      	str	r3, [r7, #52]	@ 0x34
 800eaa8:	e001      	b.n	800eaae <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	637b      	str	r3, [r7, #52]	@ 0x34
 800eaae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eab0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800eab2:	693b      	ldr	r3, [r7, #16]
 800eab4:	f383 8811 	msr	BASEPRI, r3
}
 800eab8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eaba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800eabc:	4618      	mov	r0, r3
 800eabe:	3738      	adds	r7, #56	@ 0x38
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}

0800eac4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b086      	sub	sp, #24
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	60f8      	str	r0, [r7, #12]
 800eacc:	60b9      	str	r1, [r7, #8]
 800eace:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ead0:	2300      	movs	r3, #0
 800ead2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ead8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d10d      	bne.n	800eafe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d14d      	bne.n	800eb86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	689b      	ldr	r3, [r3, #8]
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f000 feb8 	bl	800f864 <xTaskPriorityDisinherit>
 800eaf4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	2200      	movs	r2, #0
 800eafa:	609a      	str	r2, [r3, #8]
 800eafc:	e043      	b.n	800eb86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d119      	bne.n	800eb38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	6858      	ldr	r0, [r3, #4]
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb0c:	461a      	mov	r2, r3
 800eb0e:	68b9      	ldr	r1, [r7, #8]
 800eb10:	f002 fe91 	bl	8011836 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	685a      	ldr	r2, [r3, #4]
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb1c:	441a      	add	r2, r3
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	685a      	ldr	r2, [r3, #4]
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	689b      	ldr	r3, [r3, #8]
 800eb2a:	429a      	cmp	r2, r3
 800eb2c:	d32b      	bcc.n	800eb86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	681a      	ldr	r2, [r3, #0]
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	605a      	str	r2, [r3, #4]
 800eb36:	e026      	b.n	800eb86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	68d8      	ldr	r0, [r3, #12]
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb40:	461a      	mov	r2, r3
 800eb42:	68b9      	ldr	r1, [r7, #8]
 800eb44:	f002 fe77 	bl	8011836 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	68da      	ldr	r2, [r3, #12]
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb50:	425b      	negs	r3, r3
 800eb52:	441a      	add	r2, r3
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	68da      	ldr	r2, [r3, #12]
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	429a      	cmp	r2, r3
 800eb62:	d207      	bcs.n	800eb74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	689a      	ldr	r2, [r3, #8]
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb6c:	425b      	negs	r3, r3
 800eb6e:	441a      	add	r2, r3
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2b02      	cmp	r3, #2
 800eb78:	d105      	bne.n	800eb86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eb7a:	693b      	ldr	r3, [r7, #16]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d002      	beq.n	800eb86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800eb80:	693b      	ldr	r3, [r7, #16]
 800eb82:	3b01      	subs	r3, #1
 800eb84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800eb86:	693b      	ldr	r3, [r7, #16]
 800eb88:	1c5a      	adds	r2, r3, #1
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800eb8e:	697b      	ldr	r3, [r7, #20]
}
 800eb90:	4618      	mov	r0, r3
 800eb92:	3718      	adds	r7, #24
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd80      	pop	{r7, pc}

0800eb98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b082      	sub	sp, #8
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d018      	beq.n	800ebdc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	68da      	ldr	r2, [r3, #12]
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebb2:	441a      	add	r2, r3
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	68da      	ldr	r2, [r3, #12]
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	689b      	ldr	r3, [r3, #8]
 800ebc0:	429a      	cmp	r2, r3
 800ebc2:	d303      	bcc.n	800ebcc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681a      	ldr	r2, [r3, #0]
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	68d9      	ldr	r1, [r3, #12]
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebd4:	461a      	mov	r2, r3
 800ebd6:	6838      	ldr	r0, [r7, #0]
 800ebd8:	f002 fe2d 	bl	8011836 <memcpy>
	}
}
 800ebdc:	bf00      	nop
 800ebde:	3708      	adds	r7, #8
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}

0800ebe4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b084      	sub	sp, #16
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ebec:	f001 f85c 	bl	800fca8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ebf6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ebf8:	e011      	b.n	800ec1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d012      	beq.n	800ec28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	3324      	adds	r3, #36	@ 0x24
 800ec06:	4618      	mov	r0, r3
 800ec08:	f000 fc4e 	bl	800f4a8 <xTaskRemoveFromEventList>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d001      	beq.n	800ec16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ec12:	f000 fd27 	bl	800f664 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ec16:	7bfb      	ldrb	r3, [r7, #15]
 800ec18:	3b01      	subs	r3, #1
 800ec1a:	b2db      	uxtb	r3, r3
 800ec1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ec1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	dce9      	bgt.n	800ebfa <prvUnlockQueue+0x16>
 800ec26:	e000      	b.n	800ec2a <prvUnlockQueue+0x46>
					break;
 800ec28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	22ff      	movs	r2, #255	@ 0xff
 800ec2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ec32:	f001 f86b 	bl	800fd0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ec36:	f001 f837 	bl	800fca8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ec40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ec42:	e011      	b.n	800ec68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	691b      	ldr	r3, [r3, #16]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d012      	beq.n	800ec72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	3310      	adds	r3, #16
 800ec50:	4618      	mov	r0, r3
 800ec52:	f000 fc29 	bl	800f4a8 <xTaskRemoveFromEventList>
 800ec56:	4603      	mov	r3, r0
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d001      	beq.n	800ec60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ec5c:	f000 fd02 	bl	800f664 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ec60:	7bbb      	ldrb	r3, [r7, #14]
 800ec62:	3b01      	subs	r3, #1
 800ec64:	b2db      	uxtb	r3, r3
 800ec66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ec68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	dce9      	bgt.n	800ec44 <prvUnlockQueue+0x60>
 800ec70:	e000      	b.n	800ec74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ec72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	22ff      	movs	r2, #255	@ 0xff
 800ec78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ec7c:	f001 f846 	bl	800fd0c <vPortExitCritical>
}
 800ec80:	bf00      	nop
 800ec82:	3710      	adds	r7, #16
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}

0800ec88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b084      	sub	sp, #16
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ec90:	f001 f80a 	bl	800fca8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d102      	bne.n	800eca2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ec9c:	2301      	movs	r3, #1
 800ec9e:	60fb      	str	r3, [r7, #12]
 800eca0:	e001      	b.n	800eca6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800eca2:	2300      	movs	r3, #0
 800eca4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eca6:	f001 f831 	bl	800fd0c <vPortExitCritical>

	return xReturn;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	3710      	adds	r7, #16
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}

0800ecb4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b084      	sub	sp, #16
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ecbc:	f000 fff4 	bl	800fca8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	d102      	bne.n	800ecd2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800eccc:	2301      	movs	r3, #1
 800ecce:	60fb      	str	r3, [r7, #12]
 800ecd0:	e001      	b.n	800ecd6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ecd6:	f001 f819 	bl	800fd0c <vPortExitCritical>

	return xReturn;
 800ecda:	68fb      	ldr	r3, [r7, #12]
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3710      	adds	r7, #16
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}

0800ece4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b08e      	sub	sp, #56	@ 0x38
 800ece8:	af04      	add	r7, sp, #16
 800ecea:	60f8      	str	r0, [r7, #12]
 800ecec:	60b9      	str	r1, [r7, #8]
 800ecee:	607a      	str	r2, [r7, #4]
 800ecf0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ecf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d10b      	bne.n	800ed10 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ecf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecfc:	f383 8811 	msr	BASEPRI, r3
 800ed00:	f3bf 8f6f 	isb	sy
 800ed04:	f3bf 8f4f 	dsb	sy
 800ed08:	623b      	str	r3, [r7, #32]
}
 800ed0a:	bf00      	nop
 800ed0c:	bf00      	nop
 800ed0e:	e7fd      	b.n	800ed0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ed10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d10b      	bne.n	800ed2e <xTaskCreateStatic+0x4a>
	__asm volatile
 800ed16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed1a:	f383 8811 	msr	BASEPRI, r3
 800ed1e:	f3bf 8f6f 	isb	sy
 800ed22:	f3bf 8f4f 	dsb	sy
 800ed26:	61fb      	str	r3, [r7, #28]
}
 800ed28:	bf00      	nop
 800ed2a:	bf00      	nop
 800ed2c:	e7fd      	b.n	800ed2a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ed2e:	2354      	movs	r3, #84	@ 0x54
 800ed30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ed32:	693b      	ldr	r3, [r7, #16]
 800ed34:	2b54      	cmp	r3, #84	@ 0x54
 800ed36:	d00b      	beq.n	800ed50 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ed38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed3c:	f383 8811 	msr	BASEPRI, r3
 800ed40:	f3bf 8f6f 	isb	sy
 800ed44:	f3bf 8f4f 	dsb	sy
 800ed48:	61bb      	str	r3, [r7, #24]
}
 800ed4a:	bf00      	nop
 800ed4c:	bf00      	nop
 800ed4e:	e7fd      	b.n	800ed4c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ed50:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ed52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d01e      	beq.n	800ed96 <xTaskCreateStatic+0xb2>
 800ed58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d01b      	beq.n	800ed96 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ed5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed60:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ed62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ed66:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ed68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed6a:	2202      	movs	r2, #2
 800ed6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ed70:	2300      	movs	r3, #0
 800ed72:	9303      	str	r3, [sp, #12]
 800ed74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed76:	9302      	str	r3, [sp, #8]
 800ed78:	f107 0314 	add.w	r3, r7, #20
 800ed7c:	9301      	str	r3, [sp, #4]
 800ed7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed80:	9300      	str	r3, [sp, #0]
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	687a      	ldr	r2, [r7, #4]
 800ed86:	68b9      	ldr	r1, [r7, #8]
 800ed88:	68f8      	ldr	r0, [r7, #12]
 800ed8a:	f000 f850 	bl	800ee2e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ed8e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ed90:	f000 f8d6 	bl	800ef40 <prvAddNewTaskToReadyList>
 800ed94:	e001      	b.n	800ed9a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ed96:	2300      	movs	r3, #0
 800ed98:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ed9a:	697b      	ldr	r3, [r7, #20]
	}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3728      	adds	r7, #40	@ 0x28
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}

0800eda4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b08c      	sub	sp, #48	@ 0x30
 800eda8:	af04      	add	r7, sp, #16
 800edaa:	60f8      	str	r0, [r7, #12]
 800edac:	60b9      	str	r1, [r7, #8]
 800edae:	603b      	str	r3, [r7, #0]
 800edb0:	4613      	mov	r3, r2
 800edb2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800edb4:	88fb      	ldrh	r3, [r7, #6]
 800edb6:	009b      	lsls	r3, r3, #2
 800edb8:	4618      	mov	r0, r3
 800edba:	f001 f897 	bl	800feec <pvPortMalloc>
 800edbe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d00e      	beq.n	800ede4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800edc6:	2054      	movs	r0, #84	@ 0x54
 800edc8:	f001 f890 	bl	800feec <pvPortMalloc>
 800edcc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800edce:	69fb      	ldr	r3, [r7, #28]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d003      	beq.n	800eddc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800edd4:	69fb      	ldr	r3, [r7, #28]
 800edd6:	697a      	ldr	r2, [r7, #20]
 800edd8:	631a      	str	r2, [r3, #48]	@ 0x30
 800edda:	e005      	b.n	800ede8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800eddc:	6978      	ldr	r0, [r7, #20]
 800edde:	f001 f953 	bl	8010088 <vPortFree>
 800ede2:	e001      	b.n	800ede8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ede4:	2300      	movs	r3, #0
 800ede6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ede8:	69fb      	ldr	r3, [r7, #28]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d017      	beq.n	800ee1e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800edee:	69fb      	ldr	r3, [r7, #28]
 800edf0:	2200      	movs	r2, #0
 800edf2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800edf6:	88fa      	ldrh	r2, [r7, #6]
 800edf8:	2300      	movs	r3, #0
 800edfa:	9303      	str	r3, [sp, #12]
 800edfc:	69fb      	ldr	r3, [r7, #28]
 800edfe:	9302      	str	r3, [sp, #8]
 800ee00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee02:	9301      	str	r3, [sp, #4]
 800ee04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee06:	9300      	str	r3, [sp, #0]
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	68b9      	ldr	r1, [r7, #8]
 800ee0c:	68f8      	ldr	r0, [r7, #12]
 800ee0e:	f000 f80e 	bl	800ee2e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ee12:	69f8      	ldr	r0, [r7, #28]
 800ee14:	f000 f894 	bl	800ef40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ee18:	2301      	movs	r3, #1
 800ee1a:	61bb      	str	r3, [r7, #24]
 800ee1c:	e002      	b.n	800ee24 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ee1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ee22:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ee24:	69bb      	ldr	r3, [r7, #24]
	}
 800ee26:	4618      	mov	r0, r3
 800ee28:	3720      	adds	r7, #32
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd80      	pop	{r7, pc}

0800ee2e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ee2e:	b580      	push	{r7, lr}
 800ee30:	b088      	sub	sp, #32
 800ee32:	af00      	add	r7, sp, #0
 800ee34:	60f8      	str	r0, [r7, #12]
 800ee36:	60b9      	str	r1, [r7, #8]
 800ee38:	607a      	str	r2, [r7, #4]
 800ee3a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ee3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee46:	3b01      	subs	r3, #1
 800ee48:	009b      	lsls	r3, r3, #2
 800ee4a:	4413      	add	r3, r2
 800ee4c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ee4e:	69bb      	ldr	r3, [r7, #24]
 800ee50:	f023 0307 	bic.w	r3, r3, #7
 800ee54:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ee56:	69bb      	ldr	r3, [r7, #24]
 800ee58:	f003 0307 	and.w	r3, r3, #7
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d00b      	beq.n	800ee78 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800ee60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee64:	f383 8811 	msr	BASEPRI, r3
 800ee68:	f3bf 8f6f 	isb	sy
 800ee6c:	f3bf 8f4f 	dsb	sy
 800ee70:	617b      	str	r3, [r7, #20]
}
 800ee72:	bf00      	nop
 800ee74:	bf00      	nop
 800ee76:	e7fd      	b.n	800ee74 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ee78:	68bb      	ldr	r3, [r7, #8]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d01f      	beq.n	800eebe <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ee7e:	2300      	movs	r3, #0
 800ee80:	61fb      	str	r3, [r7, #28]
 800ee82:	e012      	b.n	800eeaa <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ee84:	68ba      	ldr	r2, [r7, #8]
 800ee86:	69fb      	ldr	r3, [r7, #28]
 800ee88:	4413      	add	r3, r2
 800ee8a:	7819      	ldrb	r1, [r3, #0]
 800ee8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee8e:	69fb      	ldr	r3, [r7, #28]
 800ee90:	4413      	add	r3, r2
 800ee92:	3334      	adds	r3, #52	@ 0x34
 800ee94:	460a      	mov	r2, r1
 800ee96:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ee98:	68ba      	ldr	r2, [r7, #8]
 800ee9a:	69fb      	ldr	r3, [r7, #28]
 800ee9c:	4413      	add	r3, r2
 800ee9e:	781b      	ldrb	r3, [r3, #0]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d006      	beq.n	800eeb2 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eea4:	69fb      	ldr	r3, [r7, #28]
 800eea6:	3301      	adds	r3, #1
 800eea8:	61fb      	str	r3, [r7, #28]
 800eeaa:	69fb      	ldr	r3, [r7, #28]
 800eeac:	2b0f      	cmp	r3, #15
 800eeae:	d9e9      	bls.n	800ee84 <prvInitialiseNewTask+0x56>
 800eeb0:	e000      	b.n	800eeb4 <prvInitialiseNewTask+0x86>
			{
				break;
 800eeb2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800eeb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800eebc:	e003      	b.n	800eec6 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800eebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eec0:	2200      	movs	r2, #0
 800eec2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800eec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eec8:	2b06      	cmp	r3, #6
 800eeca:	d901      	bls.n	800eed0 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800eecc:	2306      	movs	r3, #6
 800eece:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800eed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eed2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eed4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800eed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eed8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eeda:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800eedc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eede:	2200      	movs	r2, #0
 800eee0:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800eee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eee4:	3304      	adds	r3, #4
 800eee6:	4618      	mov	r0, r3
 800eee8:	f7ff f912 	bl	800e110 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800eeec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eeee:	3318      	adds	r3, #24
 800eef0:	4618      	mov	r0, r3
 800eef2:	f7ff f90d 	bl	800e110 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800eef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eef8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eefa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eefc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eefe:	f1c3 0207 	rsb	r2, r3, #7
 800ef02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ef06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef0a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ef0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef0e:	2200      	movs	r2, #0
 800ef10:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ef12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef14:	2200      	movs	r2, #0
 800ef16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ef1a:	683a      	ldr	r2, [r7, #0]
 800ef1c:	68f9      	ldr	r1, [r7, #12]
 800ef1e:	69b8      	ldr	r0, [r7, #24]
 800ef20:	f000 fd8e 	bl	800fa40 <pxPortInitialiseStack>
 800ef24:	4602      	mov	r2, r0
 800ef26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef28:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ef2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d002      	beq.n	800ef36 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ef30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef36:	bf00      	nop
 800ef38:	3720      	adds	r7, #32
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}
	...

0800ef40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b082      	sub	sp, #8
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ef48:	f000 feae 	bl	800fca8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ef4c:	4b2a      	ldr	r3, [pc, #168]	@ (800eff8 <prvAddNewTaskToReadyList+0xb8>)
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	3301      	adds	r3, #1
 800ef52:	4a29      	ldr	r2, [pc, #164]	@ (800eff8 <prvAddNewTaskToReadyList+0xb8>)
 800ef54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ef56:	4b29      	ldr	r3, [pc, #164]	@ (800effc <prvAddNewTaskToReadyList+0xbc>)
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d109      	bne.n	800ef72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ef5e:	4a27      	ldr	r2, [pc, #156]	@ (800effc <prvAddNewTaskToReadyList+0xbc>)
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ef64:	4b24      	ldr	r3, [pc, #144]	@ (800eff8 <prvAddNewTaskToReadyList+0xb8>)
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	2b01      	cmp	r3, #1
 800ef6a:	d110      	bne.n	800ef8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ef6c:	f000 fb9e 	bl	800f6ac <prvInitialiseTaskLists>
 800ef70:	e00d      	b.n	800ef8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ef72:	4b23      	ldr	r3, [pc, #140]	@ (800f000 <prvAddNewTaskToReadyList+0xc0>)
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d109      	bne.n	800ef8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ef7a:	4b20      	ldr	r3, [pc, #128]	@ (800effc <prvAddNewTaskToReadyList+0xbc>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef84:	429a      	cmp	r2, r3
 800ef86:	d802      	bhi.n	800ef8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ef88:	4a1c      	ldr	r2, [pc, #112]	@ (800effc <prvAddNewTaskToReadyList+0xbc>)
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ef8e:	4b1d      	ldr	r3, [pc, #116]	@ (800f004 <prvAddNewTaskToReadyList+0xc4>)
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	3301      	adds	r3, #1
 800ef94:	4a1b      	ldr	r2, [pc, #108]	@ (800f004 <prvAddNewTaskToReadyList+0xc4>)
 800ef96:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef9c:	2201      	movs	r2, #1
 800ef9e:	409a      	lsls	r2, r3
 800efa0:	4b19      	ldr	r3, [pc, #100]	@ (800f008 <prvAddNewTaskToReadyList+0xc8>)
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	4313      	orrs	r3, r2
 800efa6:	4a18      	ldr	r2, [pc, #96]	@ (800f008 <prvAddNewTaskToReadyList+0xc8>)
 800efa8:	6013      	str	r3, [r2, #0]
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efae:	4613      	mov	r3, r2
 800efb0:	009b      	lsls	r3, r3, #2
 800efb2:	4413      	add	r3, r2
 800efb4:	009b      	lsls	r3, r3, #2
 800efb6:	4a15      	ldr	r2, [pc, #84]	@ (800f00c <prvAddNewTaskToReadyList+0xcc>)
 800efb8:	441a      	add	r2, r3
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	3304      	adds	r3, #4
 800efbe:	4619      	mov	r1, r3
 800efc0:	4610      	mov	r0, r2
 800efc2:	f7ff f8b2 	bl	800e12a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800efc6:	f000 fea1 	bl	800fd0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800efca:	4b0d      	ldr	r3, [pc, #52]	@ (800f000 <prvAddNewTaskToReadyList+0xc0>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d00e      	beq.n	800eff0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800efd2:	4b0a      	ldr	r3, [pc, #40]	@ (800effc <prvAddNewTaskToReadyList+0xbc>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efdc:	429a      	cmp	r2, r3
 800efde:	d207      	bcs.n	800eff0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800efe0:	4b0b      	ldr	r3, [pc, #44]	@ (800f010 <prvAddNewTaskToReadyList+0xd0>)
 800efe2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800efe6:	601a      	str	r2, [r3, #0]
 800efe8:	f3bf 8f4f 	dsb	sy
 800efec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eff0:	bf00      	nop
 800eff2:	3708      	adds	r7, #8
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}
 800eff8:	200261f0 	.word	0x200261f0
 800effc:	200260f0 	.word	0x200260f0
 800f000:	200261fc 	.word	0x200261fc
 800f004:	2002620c 	.word	0x2002620c
 800f008:	200261f8 	.word	0x200261f8
 800f00c:	200260f4 	.word	0x200260f4
 800f010:	e000ed04 	.word	0xe000ed04

0800f014 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b08a      	sub	sp, #40	@ 0x28
 800f018:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f01a:	2300      	movs	r3, #0
 800f01c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f01e:	2300      	movs	r3, #0
 800f020:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f022:	463a      	mov	r2, r7
 800f024:	1d39      	adds	r1, r7, #4
 800f026:	f107 0308 	add.w	r3, r7, #8
 800f02a:	4618      	mov	r0, r3
 800f02c:	f7f2 fb44 	bl	80016b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f030:	6839      	ldr	r1, [r7, #0]
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	68ba      	ldr	r2, [r7, #8]
 800f036:	9202      	str	r2, [sp, #8]
 800f038:	9301      	str	r3, [sp, #4]
 800f03a:	2300      	movs	r3, #0
 800f03c:	9300      	str	r3, [sp, #0]
 800f03e:	2300      	movs	r3, #0
 800f040:	460a      	mov	r2, r1
 800f042:	491f      	ldr	r1, [pc, #124]	@ (800f0c0 <vTaskStartScheduler+0xac>)
 800f044:	481f      	ldr	r0, [pc, #124]	@ (800f0c4 <vTaskStartScheduler+0xb0>)
 800f046:	f7ff fe4d 	bl	800ece4 <xTaskCreateStatic>
 800f04a:	4603      	mov	r3, r0
 800f04c:	4a1e      	ldr	r2, [pc, #120]	@ (800f0c8 <vTaskStartScheduler+0xb4>)
 800f04e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f050:	4b1d      	ldr	r3, [pc, #116]	@ (800f0c8 <vTaskStartScheduler+0xb4>)
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d002      	beq.n	800f05e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f058:	2301      	movs	r3, #1
 800f05a:	617b      	str	r3, [r7, #20]
 800f05c:	e001      	b.n	800f062 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f05e:	2300      	movs	r3, #0
 800f060:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f062:	697b      	ldr	r3, [r7, #20]
 800f064:	2b01      	cmp	r3, #1
 800f066:	d116      	bne.n	800f096 <vTaskStartScheduler+0x82>
	__asm volatile
 800f068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f06c:	f383 8811 	msr	BASEPRI, r3
 800f070:	f3bf 8f6f 	isb	sy
 800f074:	f3bf 8f4f 	dsb	sy
 800f078:	613b      	str	r3, [r7, #16]
}
 800f07a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f07c:	4b13      	ldr	r3, [pc, #76]	@ (800f0cc <vTaskStartScheduler+0xb8>)
 800f07e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f082:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f084:	4b12      	ldr	r3, [pc, #72]	@ (800f0d0 <vTaskStartScheduler+0xbc>)
 800f086:	2201      	movs	r2, #1
 800f088:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f08a:	4b12      	ldr	r3, [pc, #72]	@ (800f0d4 <vTaskStartScheduler+0xc0>)
 800f08c:	2200      	movs	r2, #0
 800f08e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f090:	f000 fd66 	bl	800fb60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f094:	e00f      	b.n	800f0b6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f096:	697b      	ldr	r3, [r7, #20]
 800f098:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f09c:	d10b      	bne.n	800f0b6 <vTaskStartScheduler+0xa2>
	__asm volatile
 800f09e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0a2:	f383 8811 	msr	BASEPRI, r3
 800f0a6:	f3bf 8f6f 	isb	sy
 800f0aa:	f3bf 8f4f 	dsb	sy
 800f0ae:	60fb      	str	r3, [r7, #12]
}
 800f0b0:	bf00      	nop
 800f0b2:	bf00      	nop
 800f0b4:	e7fd      	b.n	800f0b2 <vTaskStartScheduler+0x9e>
}
 800f0b6:	bf00      	nop
 800f0b8:	3718      	adds	r7, #24
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}
 800f0be:	bf00      	nop
 800f0c0:	08013418 	.word	0x08013418
 800f0c4:	0800f67d 	.word	0x0800f67d
 800f0c8:	20026214 	.word	0x20026214
 800f0cc:	20026210 	.word	0x20026210
 800f0d0:	200261fc 	.word	0x200261fc
 800f0d4:	200261f4 	.word	0x200261f4

0800f0d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f0d8:	b480      	push	{r7}
 800f0da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f0dc:	4b04      	ldr	r3, [pc, #16]	@ (800f0f0 <vTaskSuspendAll+0x18>)
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	3301      	adds	r3, #1
 800f0e2:	4a03      	ldr	r2, [pc, #12]	@ (800f0f0 <vTaskSuspendAll+0x18>)
 800f0e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f0e6:	bf00      	nop
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ee:	4770      	bx	lr
 800f0f0:	20026218 	.word	0x20026218

0800f0f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b084      	sub	sp, #16
 800f0f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f0fe:	2300      	movs	r3, #0
 800f100:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f102:	4b42      	ldr	r3, [pc, #264]	@ (800f20c <xTaskResumeAll+0x118>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d10b      	bne.n	800f122 <xTaskResumeAll+0x2e>
	__asm volatile
 800f10a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f10e:	f383 8811 	msr	BASEPRI, r3
 800f112:	f3bf 8f6f 	isb	sy
 800f116:	f3bf 8f4f 	dsb	sy
 800f11a:	603b      	str	r3, [r7, #0]
}
 800f11c:	bf00      	nop
 800f11e:	bf00      	nop
 800f120:	e7fd      	b.n	800f11e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f122:	f000 fdc1 	bl	800fca8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f126:	4b39      	ldr	r3, [pc, #228]	@ (800f20c <xTaskResumeAll+0x118>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	3b01      	subs	r3, #1
 800f12c:	4a37      	ldr	r2, [pc, #220]	@ (800f20c <xTaskResumeAll+0x118>)
 800f12e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f130:	4b36      	ldr	r3, [pc, #216]	@ (800f20c <xTaskResumeAll+0x118>)
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d161      	bne.n	800f1fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f138:	4b35      	ldr	r3, [pc, #212]	@ (800f210 <xTaskResumeAll+0x11c>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d05d      	beq.n	800f1fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f140:	e02e      	b.n	800f1a0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f142:	4b34      	ldr	r3, [pc, #208]	@ (800f214 <xTaskResumeAll+0x120>)
 800f144:	68db      	ldr	r3, [r3, #12]
 800f146:	68db      	ldr	r3, [r3, #12]
 800f148:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	3318      	adds	r3, #24
 800f14e:	4618      	mov	r0, r3
 800f150:	f7ff f848 	bl	800e1e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	3304      	adds	r3, #4
 800f158:	4618      	mov	r0, r3
 800f15a:	f7ff f843 	bl	800e1e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f162:	2201      	movs	r2, #1
 800f164:	409a      	lsls	r2, r3
 800f166:	4b2c      	ldr	r3, [pc, #176]	@ (800f218 <xTaskResumeAll+0x124>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	4313      	orrs	r3, r2
 800f16c:	4a2a      	ldr	r2, [pc, #168]	@ (800f218 <xTaskResumeAll+0x124>)
 800f16e:	6013      	str	r3, [r2, #0]
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f174:	4613      	mov	r3, r2
 800f176:	009b      	lsls	r3, r3, #2
 800f178:	4413      	add	r3, r2
 800f17a:	009b      	lsls	r3, r3, #2
 800f17c:	4a27      	ldr	r2, [pc, #156]	@ (800f21c <xTaskResumeAll+0x128>)
 800f17e:	441a      	add	r2, r3
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	3304      	adds	r3, #4
 800f184:	4619      	mov	r1, r3
 800f186:	4610      	mov	r0, r2
 800f188:	f7fe ffcf 	bl	800e12a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f190:	4b23      	ldr	r3, [pc, #140]	@ (800f220 <xTaskResumeAll+0x12c>)
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f196:	429a      	cmp	r2, r3
 800f198:	d302      	bcc.n	800f1a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f19a:	4b22      	ldr	r3, [pc, #136]	@ (800f224 <xTaskResumeAll+0x130>)
 800f19c:	2201      	movs	r2, #1
 800f19e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f1a0:	4b1c      	ldr	r3, [pc, #112]	@ (800f214 <xTaskResumeAll+0x120>)
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d1cc      	bne.n	800f142 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d001      	beq.n	800f1b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f1ae:	f000 fb1b 	bl	800f7e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f1b2:	4b1d      	ldr	r3, [pc, #116]	@ (800f228 <xTaskResumeAll+0x134>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d010      	beq.n	800f1e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f1be:	f000 f837 	bl	800f230 <xTaskIncrementTick>
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d002      	beq.n	800f1ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f1c8:	4b16      	ldr	r3, [pc, #88]	@ (800f224 <xTaskResumeAll+0x130>)
 800f1ca:	2201      	movs	r2, #1
 800f1cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	3b01      	subs	r3, #1
 800f1d2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d1f1      	bne.n	800f1be <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f1da:	4b13      	ldr	r3, [pc, #76]	@ (800f228 <xTaskResumeAll+0x134>)
 800f1dc:	2200      	movs	r2, #0
 800f1de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f1e0:	4b10      	ldr	r3, [pc, #64]	@ (800f224 <xTaskResumeAll+0x130>)
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d009      	beq.n	800f1fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f1ec:	4b0f      	ldr	r3, [pc, #60]	@ (800f22c <xTaskResumeAll+0x138>)
 800f1ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f1f2:	601a      	str	r2, [r3, #0]
 800f1f4:	f3bf 8f4f 	dsb	sy
 800f1f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f1fc:	f000 fd86 	bl	800fd0c <vPortExitCritical>

	return xAlreadyYielded;
 800f200:	68bb      	ldr	r3, [r7, #8]
}
 800f202:	4618      	mov	r0, r3
 800f204:	3710      	adds	r7, #16
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}
 800f20a:	bf00      	nop
 800f20c:	20026218 	.word	0x20026218
 800f210:	200261f0 	.word	0x200261f0
 800f214:	200261b0 	.word	0x200261b0
 800f218:	200261f8 	.word	0x200261f8
 800f21c:	200260f4 	.word	0x200260f4
 800f220:	200260f0 	.word	0x200260f0
 800f224:	20026204 	.word	0x20026204
 800f228:	20026200 	.word	0x20026200
 800f22c:	e000ed04 	.word	0xe000ed04

0800f230 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b086      	sub	sp, #24
 800f234:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f236:	2300      	movs	r3, #0
 800f238:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f23a:	4b4f      	ldr	r3, [pc, #316]	@ (800f378 <xTaskIncrementTick+0x148>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	f040 808f 	bne.w	800f362 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f244:	4b4d      	ldr	r3, [pc, #308]	@ (800f37c <xTaskIncrementTick+0x14c>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	3301      	adds	r3, #1
 800f24a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f24c:	4a4b      	ldr	r2, [pc, #300]	@ (800f37c <xTaskIncrementTick+0x14c>)
 800f24e:	693b      	ldr	r3, [r7, #16]
 800f250:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f252:	693b      	ldr	r3, [r7, #16]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d121      	bne.n	800f29c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800f258:	4b49      	ldr	r3, [pc, #292]	@ (800f380 <xTaskIncrementTick+0x150>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d00b      	beq.n	800f27a <xTaskIncrementTick+0x4a>
	__asm volatile
 800f262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f266:	f383 8811 	msr	BASEPRI, r3
 800f26a:	f3bf 8f6f 	isb	sy
 800f26e:	f3bf 8f4f 	dsb	sy
 800f272:	603b      	str	r3, [r7, #0]
}
 800f274:	bf00      	nop
 800f276:	bf00      	nop
 800f278:	e7fd      	b.n	800f276 <xTaskIncrementTick+0x46>
 800f27a:	4b41      	ldr	r3, [pc, #260]	@ (800f380 <xTaskIncrementTick+0x150>)
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	60fb      	str	r3, [r7, #12]
 800f280:	4b40      	ldr	r3, [pc, #256]	@ (800f384 <xTaskIncrementTick+0x154>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	4a3e      	ldr	r2, [pc, #248]	@ (800f380 <xTaskIncrementTick+0x150>)
 800f286:	6013      	str	r3, [r2, #0]
 800f288:	4a3e      	ldr	r2, [pc, #248]	@ (800f384 <xTaskIncrementTick+0x154>)
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	6013      	str	r3, [r2, #0]
 800f28e:	4b3e      	ldr	r3, [pc, #248]	@ (800f388 <xTaskIncrementTick+0x158>)
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	3301      	adds	r3, #1
 800f294:	4a3c      	ldr	r2, [pc, #240]	@ (800f388 <xTaskIncrementTick+0x158>)
 800f296:	6013      	str	r3, [r2, #0]
 800f298:	f000 faa6 	bl	800f7e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f29c:	4b3b      	ldr	r3, [pc, #236]	@ (800f38c <xTaskIncrementTick+0x15c>)
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	693a      	ldr	r2, [r7, #16]
 800f2a2:	429a      	cmp	r2, r3
 800f2a4:	d348      	bcc.n	800f338 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f2a6:	4b36      	ldr	r3, [pc, #216]	@ (800f380 <xTaskIncrementTick+0x150>)
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d104      	bne.n	800f2ba <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f2b0:	4b36      	ldr	r3, [pc, #216]	@ (800f38c <xTaskIncrementTick+0x15c>)
 800f2b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f2b6:	601a      	str	r2, [r3, #0]
					break;
 800f2b8:	e03e      	b.n	800f338 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f2ba:	4b31      	ldr	r3, [pc, #196]	@ (800f380 <xTaskIncrementTick+0x150>)
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	68db      	ldr	r3, [r3, #12]
 800f2c0:	68db      	ldr	r3, [r3, #12]
 800f2c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f2c4:	68bb      	ldr	r3, [r7, #8]
 800f2c6:	685b      	ldr	r3, [r3, #4]
 800f2c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f2ca:	693a      	ldr	r2, [r7, #16]
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	429a      	cmp	r2, r3
 800f2d0:	d203      	bcs.n	800f2da <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f2d2:	4a2e      	ldr	r2, [pc, #184]	@ (800f38c <xTaskIncrementTick+0x15c>)
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f2d8:	e02e      	b.n	800f338 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f2da:	68bb      	ldr	r3, [r7, #8]
 800f2dc:	3304      	adds	r3, #4
 800f2de:	4618      	mov	r0, r3
 800f2e0:	f7fe ff80 	bl	800e1e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f2e4:	68bb      	ldr	r3, [r7, #8]
 800f2e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d004      	beq.n	800f2f6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	3318      	adds	r3, #24
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f7fe ff77 	bl	800e1e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2fa:	2201      	movs	r2, #1
 800f2fc:	409a      	lsls	r2, r3
 800f2fe:	4b24      	ldr	r3, [pc, #144]	@ (800f390 <xTaskIncrementTick+0x160>)
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	4313      	orrs	r3, r2
 800f304:	4a22      	ldr	r2, [pc, #136]	@ (800f390 <xTaskIncrementTick+0x160>)
 800f306:	6013      	str	r3, [r2, #0]
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f30c:	4613      	mov	r3, r2
 800f30e:	009b      	lsls	r3, r3, #2
 800f310:	4413      	add	r3, r2
 800f312:	009b      	lsls	r3, r3, #2
 800f314:	4a1f      	ldr	r2, [pc, #124]	@ (800f394 <xTaskIncrementTick+0x164>)
 800f316:	441a      	add	r2, r3
 800f318:	68bb      	ldr	r3, [r7, #8]
 800f31a:	3304      	adds	r3, #4
 800f31c:	4619      	mov	r1, r3
 800f31e:	4610      	mov	r0, r2
 800f320:	f7fe ff03 	bl	800e12a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f324:	68bb      	ldr	r3, [r7, #8]
 800f326:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f328:	4b1b      	ldr	r3, [pc, #108]	@ (800f398 <xTaskIncrementTick+0x168>)
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f32e:	429a      	cmp	r2, r3
 800f330:	d3b9      	bcc.n	800f2a6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800f332:	2301      	movs	r3, #1
 800f334:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f336:	e7b6      	b.n	800f2a6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f338:	4b17      	ldr	r3, [pc, #92]	@ (800f398 <xTaskIncrementTick+0x168>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f33e:	4915      	ldr	r1, [pc, #84]	@ (800f394 <xTaskIncrementTick+0x164>)
 800f340:	4613      	mov	r3, r2
 800f342:	009b      	lsls	r3, r3, #2
 800f344:	4413      	add	r3, r2
 800f346:	009b      	lsls	r3, r3, #2
 800f348:	440b      	add	r3, r1
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	2b01      	cmp	r3, #1
 800f34e:	d901      	bls.n	800f354 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f350:	2301      	movs	r3, #1
 800f352:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f354:	4b11      	ldr	r3, [pc, #68]	@ (800f39c <xTaskIncrementTick+0x16c>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d007      	beq.n	800f36c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f35c:	2301      	movs	r3, #1
 800f35e:	617b      	str	r3, [r7, #20]
 800f360:	e004      	b.n	800f36c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f362:	4b0f      	ldr	r3, [pc, #60]	@ (800f3a0 <xTaskIncrementTick+0x170>)
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	3301      	adds	r3, #1
 800f368:	4a0d      	ldr	r2, [pc, #52]	@ (800f3a0 <xTaskIncrementTick+0x170>)
 800f36a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f36c:	697b      	ldr	r3, [r7, #20]
}
 800f36e:	4618      	mov	r0, r3
 800f370:	3718      	adds	r7, #24
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}
 800f376:	bf00      	nop
 800f378:	20026218 	.word	0x20026218
 800f37c:	200261f4 	.word	0x200261f4
 800f380:	200261a8 	.word	0x200261a8
 800f384:	200261ac 	.word	0x200261ac
 800f388:	20026208 	.word	0x20026208
 800f38c:	20026210 	.word	0x20026210
 800f390:	200261f8 	.word	0x200261f8
 800f394:	200260f4 	.word	0x200260f4
 800f398:	200260f0 	.word	0x200260f0
 800f39c:	20026204 	.word	0x20026204
 800f3a0:	20026200 	.word	0x20026200

0800f3a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f3a4:	b480      	push	{r7}
 800f3a6:	b087      	sub	sp, #28
 800f3a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f3aa:	4b27      	ldr	r3, [pc, #156]	@ (800f448 <vTaskSwitchContext+0xa4>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d003      	beq.n	800f3ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f3b2:	4b26      	ldr	r3, [pc, #152]	@ (800f44c <vTaskSwitchContext+0xa8>)
 800f3b4:	2201      	movs	r2, #1
 800f3b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f3b8:	e040      	b.n	800f43c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800f3ba:	4b24      	ldr	r3, [pc, #144]	@ (800f44c <vTaskSwitchContext+0xa8>)
 800f3bc:	2200      	movs	r2, #0
 800f3be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3c0:	4b23      	ldr	r3, [pc, #140]	@ (800f450 <vTaskSwitchContext+0xac>)
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	fab3 f383 	clz	r3, r3
 800f3cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f3ce:	7afb      	ldrb	r3, [r7, #11]
 800f3d0:	f1c3 031f 	rsb	r3, r3, #31
 800f3d4:	617b      	str	r3, [r7, #20]
 800f3d6:	491f      	ldr	r1, [pc, #124]	@ (800f454 <vTaskSwitchContext+0xb0>)
 800f3d8:	697a      	ldr	r2, [r7, #20]
 800f3da:	4613      	mov	r3, r2
 800f3dc:	009b      	lsls	r3, r3, #2
 800f3de:	4413      	add	r3, r2
 800f3e0:	009b      	lsls	r3, r3, #2
 800f3e2:	440b      	add	r3, r1
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d10b      	bne.n	800f402 <vTaskSwitchContext+0x5e>
	__asm volatile
 800f3ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3ee:	f383 8811 	msr	BASEPRI, r3
 800f3f2:	f3bf 8f6f 	isb	sy
 800f3f6:	f3bf 8f4f 	dsb	sy
 800f3fa:	607b      	str	r3, [r7, #4]
}
 800f3fc:	bf00      	nop
 800f3fe:	bf00      	nop
 800f400:	e7fd      	b.n	800f3fe <vTaskSwitchContext+0x5a>
 800f402:	697a      	ldr	r2, [r7, #20]
 800f404:	4613      	mov	r3, r2
 800f406:	009b      	lsls	r3, r3, #2
 800f408:	4413      	add	r3, r2
 800f40a:	009b      	lsls	r3, r3, #2
 800f40c:	4a11      	ldr	r2, [pc, #68]	@ (800f454 <vTaskSwitchContext+0xb0>)
 800f40e:	4413      	add	r3, r2
 800f410:	613b      	str	r3, [r7, #16]
 800f412:	693b      	ldr	r3, [r7, #16]
 800f414:	685b      	ldr	r3, [r3, #4]
 800f416:	685a      	ldr	r2, [r3, #4]
 800f418:	693b      	ldr	r3, [r7, #16]
 800f41a:	605a      	str	r2, [r3, #4]
 800f41c:	693b      	ldr	r3, [r7, #16]
 800f41e:	685a      	ldr	r2, [r3, #4]
 800f420:	693b      	ldr	r3, [r7, #16]
 800f422:	3308      	adds	r3, #8
 800f424:	429a      	cmp	r2, r3
 800f426:	d104      	bne.n	800f432 <vTaskSwitchContext+0x8e>
 800f428:	693b      	ldr	r3, [r7, #16]
 800f42a:	685b      	ldr	r3, [r3, #4]
 800f42c:	685a      	ldr	r2, [r3, #4]
 800f42e:	693b      	ldr	r3, [r7, #16]
 800f430:	605a      	str	r2, [r3, #4]
 800f432:	693b      	ldr	r3, [r7, #16]
 800f434:	685b      	ldr	r3, [r3, #4]
 800f436:	68db      	ldr	r3, [r3, #12]
 800f438:	4a07      	ldr	r2, [pc, #28]	@ (800f458 <vTaskSwitchContext+0xb4>)
 800f43a:	6013      	str	r3, [r2, #0]
}
 800f43c:	bf00      	nop
 800f43e:	371c      	adds	r7, #28
 800f440:	46bd      	mov	sp, r7
 800f442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f446:	4770      	bx	lr
 800f448:	20026218 	.word	0x20026218
 800f44c:	20026204 	.word	0x20026204
 800f450:	200261f8 	.word	0x200261f8
 800f454:	200260f4 	.word	0x200260f4
 800f458:	200260f0 	.word	0x200260f0

0800f45c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b084      	sub	sp, #16
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
 800f464:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d10b      	bne.n	800f484 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800f46c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f470:	f383 8811 	msr	BASEPRI, r3
 800f474:	f3bf 8f6f 	isb	sy
 800f478:	f3bf 8f4f 	dsb	sy
 800f47c:	60fb      	str	r3, [r7, #12]
}
 800f47e:	bf00      	nop
 800f480:	bf00      	nop
 800f482:	e7fd      	b.n	800f480 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f484:	4b07      	ldr	r3, [pc, #28]	@ (800f4a4 <vTaskPlaceOnEventList+0x48>)
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	3318      	adds	r3, #24
 800f48a:	4619      	mov	r1, r3
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f7fe fe70 	bl	800e172 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f492:	2101      	movs	r1, #1
 800f494:	6838      	ldr	r0, [r7, #0]
 800f496:	f000 fa6d 	bl	800f974 <prvAddCurrentTaskToDelayedList>
}
 800f49a:	bf00      	nop
 800f49c:	3710      	adds	r7, #16
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bd80      	pop	{r7, pc}
 800f4a2:	bf00      	nop
 800f4a4:	200260f0 	.word	0x200260f0

0800f4a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b086      	sub	sp, #24
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	68db      	ldr	r3, [r3, #12]
 800f4b4:	68db      	ldr	r3, [r3, #12]
 800f4b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f4b8:	693b      	ldr	r3, [r7, #16]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d10b      	bne.n	800f4d6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800f4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4c2:	f383 8811 	msr	BASEPRI, r3
 800f4c6:	f3bf 8f6f 	isb	sy
 800f4ca:	f3bf 8f4f 	dsb	sy
 800f4ce:	60fb      	str	r3, [r7, #12]
}
 800f4d0:	bf00      	nop
 800f4d2:	bf00      	nop
 800f4d4:	e7fd      	b.n	800f4d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f4d6:	693b      	ldr	r3, [r7, #16]
 800f4d8:	3318      	adds	r3, #24
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f7fe fe82 	bl	800e1e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f4e0:	4b1d      	ldr	r3, [pc, #116]	@ (800f558 <xTaskRemoveFromEventList+0xb0>)
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d11c      	bne.n	800f522 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f4e8:	693b      	ldr	r3, [r7, #16]
 800f4ea:	3304      	adds	r3, #4
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	f7fe fe79 	bl	800e1e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f4f2:	693b      	ldr	r3, [r7, #16]
 800f4f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4f6:	2201      	movs	r2, #1
 800f4f8:	409a      	lsls	r2, r3
 800f4fa:	4b18      	ldr	r3, [pc, #96]	@ (800f55c <xTaskRemoveFromEventList+0xb4>)
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	4313      	orrs	r3, r2
 800f500:	4a16      	ldr	r2, [pc, #88]	@ (800f55c <xTaskRemoveFromEventList+0xb4>)
 800f502:	6013      	str	r3, [r2, #0]
 800f504:	693b      	ldr	r3, [r7, #16]
 800f506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f508:	4613      	mov	r3, r2
 800f50a:	009b      	lsls	r3, r3, #2
 800f50c:	4413      	add	r3, r2
 800f50e:	009b      	lsls	r3, r3, #2
 800f510:	4a13      	ldr	r2, [pc, #76]	@ (800f560 <xTaskRemoveFromEventList+0xb8>)
 800f512:	441a      	add	r2, r3
 800f514:	693b      	ldr	r3, [r7, #16]
 800f516:	3304      	adds	r3, #4
 800f518:	4619      	mov	r1, r3
 800f51a:	4610      	mov	r0, r2
 800f51c:	f7fe fe05 	bl	800e12a <vListInsertEnd>
 800f520:	e005      	b.n	800f52e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f522:	693b      	ldr	r3, [r7, #16]
 800f524:	3318      	adds	r3, #24
 800f526:	4619      	mov	r1, r3
 800f528:	480e      	ldr	r0, [pc, #56]	@ (800f564 <xTaskRemoveFromEventList+0xbc>)
 800f52a:	f7fe fdfe 	bl	800e12a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f52e:	693b      	ldr	r3, [r7, #16]
 800f530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f532:	4b0d      	ldr	r3, [pc, #52]	@ (800f568 <xTaskRemoveFromEventList+0xc0>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f538:	429a      	cmp	r2, r3
 800f53a:	d905      	bls.n	800f548 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f53c:	2301      	movs	r3, #1
 800f53e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f540:	4b0a      	ldr	r3, [pc, #40]	@ (800f56c <xTaskRemoveFromEventList+0xc4>)
 800f542:	2201      	movs	r2, #1
 800f544:	601a      	str	r2, [r3, #0]
 800f546:	e001      	b.n	800f54c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f548:	2300      	movs	r3, #0
 800f54a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f54c:	697b      	ldr	r3, [r7, #20]
}
 800f54e:	4618      	mov	r0, r3
 800f550:	3718      	adds	r7, #24
 800f552:	46bd      	mov	sp, r7
 800f554:	bd80      	pop	{r7, pc}
 800f556:	bf00      	nop
 800f558:	20026218 	.word	0x20026218
 800f55c:	200261f8 	.word	0x200261f8
 800f560:	200260f4 	.word	0x200260f4
 800f564:	200261b0 	.word	0x200261b0
 800f568:	200260f0 	.word	0x200260f0
 800f56c:	20026204 	.word	0x20026204

0800f570 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f570:	b480      	push	{r7}
 800f572:	b083      	sub	sp, #12
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f578:	4b06      	ldr	r3, [pc, #24]	@ (800f594 <vTaskInternalSetTimeOutState+0x24>)
 800f57a:	681a      	ldr	r2, [r3, #0]
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f580:	4b05      	ldr	r3, [pc, #20]	@ (800f598 <vTaskInternalSetTimeOutState+0x28>)
 800f582:	681a      	ldr	r2, [r3, #0]
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	605a      	str	r2, [r3, #4]
}
 800f588:	bf00      	nop
 800f58a:	370c      	adds	r7, #12
 800f58c:	46bd      	mov	sp, r7
 800f58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f592:	4770      	bx	lr
 800f594:	20026208 	.word	0x20026208
 800f598:	200261f4 	.word	0x200261f4

0800f59c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b088      	sub	sp, #32
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
 800f5a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d10b      	bne.n	800f5c4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800f5ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5b0:	f383 8811 	msr	BASEPRI, r3
 800f5b4:	f3bf 8f6f 	isb	sy
 800f5b8:	f3bf 8f4f 	dsb	sy
 800f5bc:	613b      	str	r3, [r7, #16]
}
 800f5be:	bf00      	nop
 800f5c0:	bf00      	nop
 800f5c2:	e7fd      	b.n	800f5c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d10b      	bne.n	800f5e2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800f5ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5ce:	f383 8811 	msr	BASEPRI, r3
 800f5d2:	f3bf 8f6f 	isb	sy
 800f5d6:	f3bf 8f4f 	dsb	sy
 800f5da:	60fb      	str	r3, [r7, #12]
}
 800f5dc:	bf00      	nop
 800f5de:	bf00      	nop
 800f5e0:	e7fd      	b.n	800f5de <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800f5e2:	f000 fb61 	bl	800fca8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f5e6:	4b1d      	ldr	r3, [pc, #116]	@ (800f65c <xTaskCheckForTimeOut+0xc0>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	685b      	ldr	r3, [r3, #4]
 800f5f0:	69ba      	ldr	r2, [r7, #24]
 800f5f2:	1ad3      	subs	r3, r2, r3
 800f5f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f5fe:	d102      	bne.n	800f606 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f600:	2300      	movs	r3, #0
 800f602:	61fb      	str	r3, [r7, #28]
 800f604:	e023      	b.n	800f64e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	681a      	ldr	r2, [r3, #0]
 800f60a:	4b15      	ldr	r3, [pc, #84]	@ (800f660 <xTaskCheckForTimeOut+0xc4>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	429a      	cmp	r2, r3
 800f610:	d007      	beq.n	800f622 <xTaskCheckForTimeOut+0x86>
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	685b      	ldr	r3, [r3, #4]
 800f616:	69ba      	ldr	r2, [r7, #24]
 800f618:	429a      	cmp	r2, r3
 800f61a:	d302      	bcc.n	800f622 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f61c:	2301      	movs	r3, #1
 800f61e:	61fb      	str	r3, [r7, #28]
 800f620:	e015      	b.n	800f64e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f622:	683b      	ldr	r3, [r7, #0]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	697a      	ldr	r2, [r7, #20]
 800f628:	429a      	cmp	r2, r3
 800f62a:	d20b      	bcs.n	800f644 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	681a      	ldr	r2, [r3, #0]
 800f630:	697b      	ldr	r3, [r7, #20]
 800f632:	1ad2      	subs	r2, r2, r3
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f638:	6878      	ldr	r0, [r7, #4]
 800f63a:	f7ff ff99 	bl	800f570 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f63e:	2300      	movs	r3, #0
 800f640:	61fb      	str	r3, [r7, #28]
 800f642:	e004      	b.n	800f64e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	2200      	movs	r2, #0
 800f648:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f64a:	2301      	movs	r3, #1
 800f64c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f64e:	f000 fb5d 	bl	800fd0c <vPortExitCritical>

	return xReturn;
 800f652:	69fb      	ldr	r3, [r7, #28]
}
 800f654:	4618      	mov	r0, r3
 800f656:	3720      	adds	r7, #32
 800f658:	46bd      	mov	sp, r7
 800f65a:	bd80      	pop	{r7, pc}
 800f65c:	200261f4 	.word	0x200261f4
 800f660:	20026208 	.word	0x20026208

0800f664 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f664:	b480      	push	{r7}
 800f666:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f668:	4b03      	ldr	r3, [pc, #12]	@ (800f678 <vTaskMissedYield+0x14>)
 800f66a:	2201      	movs	r2, #1
 800f66c:	601a      	str	r2, [r3, #0]
}
 800f66e:	bf00      	nop
 800f670:	46bd      	mov	sp, r7
 800f672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f676:	4770      	bx	lr
 800f678:	20026204 	.word	0x20026204

0800f67c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b082      	sub	sp, #8
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f684:	f000 f852 	bl	800f72c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f688:	4b06      	ldr	r3, [pc, #24]	@ (800f6a4 <prvIdleTask+0x28>)
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	2b01      	cmp	r3, #1
 800f68e:	d9f9      	bls.n	800f684 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f690:	4b05      	ldr	r3, [pc, #20]	@ (800f6a8 <prvIdleTask+0x2c>)
 800f692:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f696:	601a      	str	r2, [r3, #0]
 800f698:	f3bf 8f4f 	dsb	sy
 800f69c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f6a0:	e7f0      	b.n	800f684 <prvIdleTask+0x8>
 800f6a2:	bf00      	nop
 800f6a4:	200260f4 	.word	0x200260f4
 800f6a8:	e000ed04 	.word	0xe000ed04

0800f6ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b082      	sub	sp, #8
 800f6b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	607b      	str	r3, [r7, #4]
 800f6b6:	e00c      	b.n	800f6d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f6b8:	687a      	ldr	r2, [r7, #4]
 800f6ba:	4613      	mov	r3, r2
 800f6bc:	009b      	lsls	r3, r3, #2
 800f6be:	4413      	add	r3, r2
 800f6c0:	009b      	lsls	r3, r3, #2
 800f6c2:	4a12      	ldr	r2, [pc, #72]	@ (800f70c <prvInitialiseTaskLists+0x60>)
 800f6c4:	4413      	add	r3, r2
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f7fe fd02 	bl	800e0d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	3301      	adds	r3, #1
 800f6d0:	607b      	str	r3, [r7, #4]
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	2b06      	cmp	r3, #6
 800f6d6:	d9ef      	bls.n	800f6b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f6d8:	480d      	ldr	r0, [pc, #52]	@ (800f710 <prvInitialiseTaskLists+0x64>)
 800f6da:	f7fe fcf9 	bl	800e0d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f6de:	480d      	ldr	r0, [pc, #52]	@ (800f714 <prvInitialiseTaskLists+0x68>)
 800f6e0:	f7fe fcf6 	bl	800e0d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f6e4:	480c      	ldr	r0, [pc, #48]	@ (800f718 <prvInitialiseTaskLists+0x6c>)
 800f6e6:	f7fe fcf3 	bl	800e0d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f6ea:	480c      	ldr	r0, [pc, #48]	@ (800f71c <prvInitialiseTaskLists+0x70>)
 800f6ec:	f7fe fcf0 	bl	800e0d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f6f0:	480b      	ldr	r0, [pc, #44]	@ (800f720 <prvInitialiseTaskLists+0x74>)
 800f6f2:	f7fe fced 	bl	800e0d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f6f6:	4b0b      	ldr	r3, [pc, #44]	@ (800f724 <prvInitialiseTaskLists+0x78>)
 800f6f8:	4a05      	ldr	r2, [pc, #20]	@ (800f710 <prvInitialiseTaskLists+0x64>)
 800f6fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f6fc:	4b0a      	ldr	r3, [pc, #40]	@ (800f728 <prvInitialiseTaskLists+0x7c>)
 800f6fe:	4a05      	ldr	r2, [pc, #20]	@ (800f714 <prvInitialiseTaskLists+0x68>)
 800f700:	601a      	str	r2, [r3, #0]
}
 800f702:	bf00      	nop
 800f704:	3708      	adds	r7, #8
 800f706:	46bd      	mov	sp, r7
 800f708:	bd80      	pop	{r7, pc}
 800f70a:	bf00      	nop
 800f70c:	200260f4 	.word	0x200260f4
 800f710:	20026180 	.word	0x20026180
 800f714:	20026194 	.word	0x20026194
 800f718:	200261b0 	.word	0x200261b0
 800f71c:	200261c4 	.word	0x200261c4
 800f720:	200261dc 	.word	0x200261dc
 800f724:	200261a8 	.word	0x200261a8
 800f728:	200261ac 	.word	0x200261ac

0800f72c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b082      	sub	sp, #8
 800f730:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f732:	e019      	b.n	800f768 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f734:	f000 fab8 	bl	800fca8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f738:	4b10      	ldr	r3, [pc, #64]	@ (800f77c <prvCheckTasksWaitingTermination+0x50>)
 800f73a:	68db      	ldr	r3, [r3, #12]
 800f73c:	68db      	ldr	r3, [r3, #12]
 800f73e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	3304      	adds	r3, #4
 800f744:	4618      	mov	r0, r3
 800f746:	f7fe fd4d 	bl	800e1e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f74a:	4b0d      	ldr	r3, [pc, #52]	@ (800f780 <prvCheckTasksWaitingTermination+0x54>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	3b01      	subs	r3, #1
 800f750:	4a0b      	ldr	r2, [pc, #44]	@ (800f780 <prvCheckTasksWaitingTermination+0x54>)
 800f752:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f754:	4b0b      	ldr	r3, [pc, #44]	@ (800f784 <prvCheckTasksWaitingTermination+0x58>)
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	3b01      	subs	r3, #1
 800f75a:	4a0a      	ldr	r2, [pc, #40]	@ (800f784 <prvCheckTasksWaitingTermination+0x58>)
 800f75c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f75e:	f000 fad5 	bl	800fd0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f762:	6878      	ldr	r0, [r7, #4]
 800f764:	f000 f810 	bl	800f788 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f768:	4b06      	ldr	r3, [pc, #24]	@ (800f784 <prvCheckTasksWaitingTermination+0x58>)
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d1e1      	bne.n	800f734 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f770:	bf00      	nop
 800f772:	bf00      	nop
 800f774:	3708      	adds	r7, #8
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}
 800f77a:	bf00      	nop
 800f77c:	200261c4 	.word	0x200261c4
 800f780:	200261f0 	.word	0x200261f0
 800f784:	200261d8 	.word	0x200261d8

0800f788 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b084      	sub	sp, #16
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f796:	2b00      	cmp	r3, #0
 800f798:	d108      	bne.n	800f7ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f000 fc72 	bl	8010088 <vPortFree>
				vPortFree( pxTCB );
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	f000 fc6f 	bl	8010088 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f7aa:	e019      	b.n	800f7e0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f7b2:	2b01      	cmp	r3, #1
 800f7b4:	d103      	bne.n	800f7be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f7b6:	6878      	ldr	r0, [r7, #4]
 800f7b8:	f000 fc66 	bl	8010088 <vPortFree>
	}
 800f7bc:	e010      	b.n	800f7e0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f7c4:	2b02      	cmp	r3, #2
 800f7c6:	d00b      	beq.n	800f7e0 <prvDeleteTCB+0x58>
	__asm volatile
 800f7c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7cc:	f383 8811 	msr	BASEPRI, r3
 800f7d0:	f3bf 8f6f 	isb	sy
 800f7d4:	f3bf 8f4f 	dsb	sy
 800f7d8:	60fb      	str	r3, [r7, #12]
}
 800f7da:	bf00      	nop
 800f7dc:	bf00      	nop
 800f7de:	e7fd      	b.n	800f7dc <prvDeleteTCB+0x54>
	}
 800f7e0:	bf00      	nop
 800f7e2:	3710      	adds	r7, #16
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	bd80      	pop	{r7, pc}

0800f7e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	b083      	sub	sp, #12
 800f7ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f7ee:	4b0c      	ldr	r3, [pc, #48]	@ (800f820 <prvResetNextTaskUnblockTime+0x38>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d104      	bne.n	800f802 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f7f8:	4b0a      	ldr	r3, [pc, #40]	@ (800f824 <prvResetNextTaskUnblockTime+0x3c>)
 800f7fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f7fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f800:	e008      	b.n	800f814 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f802:	4b07      	ldr	r3, [pc, #28]	@ (800f820 <prvResetNextTaskUnblockTime+0x38>)
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	68db      	ldr	r3, [r3, #12]
 800f808:	68db      	ldr	r3, [r3, #12]
 800f80a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	685b      	ldr	r3, [r3, #4]
 800f810:	4a04      	ldr	r2, [pc, #16]	@ (800f824 <prvResetNextTaskUnblockTime+0x3c>)
 800f812:	6013      	str	r3, [r2, #0]
}
 800f814:	bf00      	nop
 800f816:	370c      	adds	r7, #12
 800f818:	46bd      	mov	sp, r7
 800f81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81e:	4770      	bx	lr
 800f820:	200261a8 	.word	0x200261a8
 800f824:	20026210 	.word	0x20026210

0800f828 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f828:	b480      	push	{r7}
 800f82a:	b083      	sub	sp, #12
 800f82c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f82e:	4b0b      	ldr	r3, [pc, #44]	@ (800f85c <xTaskGetSchedulerState+0x34>)
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d102      	bne.n	800f83c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f836:	2301      	movs	r3, #1
 800f838:	607b      	str	r3, [r7, #4]
 800f83a:	e008      	b.n	800f84e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f83c:	4b08      	ldr	r3, [pc, #32]	@ (800f860 <xTaskGetSchedulerState+0x38>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d102      	bne.n	800f84a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f844:	2302      	movs	r3, #2
 800f846:	607b      	str	r3, [r7, #4]
 800f848:	e001      	b.n	800f84e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f84a:	2300      	movs	r3, #0
 800f84c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f84e:	687b      	ldr	r3, [r7, #4]
	}
 800f850:	4618      	mov	r0, r3
 800f852:	370c      	adds	r7, #12
 800f854:	46bd      	mov	sp, r7
 800f856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85a:	4770      	bx	lr
 800f85c:	200261fc 	.word	0x200261fc
 800f860:	20026218 	.word	0x20026218

0800f864 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f864:	b580      	push	{r7, lr}
 800f866:	b086      	sub	sp, #24
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f870:	2300      	movs	r3, #0
 800f872:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d070      	beq.n	800f95c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f87a:	4b3b      	ldr	r3, [pc, #236]	@ (800f968 <xTaskPriorityDisinherit+0x104>)
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	693a      	ldr	r2, [r7, #16]
 800f880:	429a      	cmp	r2, r3
 800f882:	d00b      	beq.n	800f89c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800f884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f888:	f383 8811 	msr	BASEPRI, r3
 800f88c:	f3bf 8f6f 	isb	sy
 800f890:	f3bf 8f4f 	dsb	sy
 800f894:	60fb      	str	r3, [r7, #12]
}
 800f896:	bf00      	nop
 800f898:	bf00      	nop
 800f89a:	e7fd      	b.n	800f898 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f89c:	693b      	ldr	r3, [r7, #16]
 800f89e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d10b      	bne.n	800f8bc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800f8a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8a8:	f383 8811 	msr	BASEPRI, r3
 800f8ac:	f3bf 8f6f 	isb	sy
 800f8b0:	f3bf 8f4f 	dsb	sy
 800f8b4:	60bb      	str	r3, [r7, #8]
}
 800f8b6:	bf00      	nop
 800f8b8:	bf00      	nop
 800f8ba:	e7fd      	b.n	800f8b8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800f8bc:	693b      	ldr	r3, [r7, #16]
 800f8be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f8c0:	1e5a      	subs	r2, r3, #1
 800f8c2:	693b      	ldr	r3, [r7, #16]
 800f8c4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f8c6:	693b      	ldr	r3, [r7, #16]
 800f8c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8ca:	693b      	ldr	r3, [r7, #16]
 800f8cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f8ce:	429a      	cmp	r2, r3
 800f8d0:	d044      	beq.n	800f95c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f8d2:	693b      	ldr	r3, [r7, #16]
 800f8d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d140      	bne.n	800f95c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f8da:	693b      	ldr	r3, [r7, #16]
 800f8dc:	3304      	adds	r3, #4
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f7fe fc80 	bl	800e1e4 <uxListRemove>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d115      	bne.n	800f916 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f8ea:	693b      	ldr	r3, [r7, #16]
 800f8ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8ee:	491f      	ldr	r1, [pc, #124]	@ (800f96c <xTaskPriorityDisinherit+0x108>)
 800f8f0:	4613      	mov	r3, r2
 800f8f2:	009b      	lsls	r3, r3, #2
 800f8f4:	4413      	add	r3, r2
 800f8f6:	009b      	lsls	r3, r3, #2
 800f8f8:	440b      	add	r3, r1
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d10a      	bne.n	800f916 <xTaskPriorityDisinherit+0xb2>
 800f900:	693b      	ldr	r3, [r7, #16]
 800f902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f904:	2201      	movs	r2, #1
 800f906:	fa02 f303 	lsl.w	r3, r2, r3
 800f90a:	43da      	mvns	r2, r3
 800f90c:	4b18      	ldr	r3, [pc, #96]	@ (800f970 <xTaskPriorityDisinherit+0x10c>)
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	4013      	ands	r3, r2
 800f912:	4a17      	ldr	r2, [pc, #92]	@ (800f970 <xTaskPriorityDisinherit+0x10c>)
 800f914:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f916:	693b      	ldr	r3, [r7, #16]
 800f918:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f91a:	693b      	ldr	r3, [r7, #16]
 800f91c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f91e:	693b      	ldr	r3, [r7, #16]
 800f920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f922:	f1c3 0207 	rsb	r2, r3, #7
 800f926:	693b      	ldr	r3, [r7, #16]
 800f928:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f92a:	693b      	ldr	r3, [r7, #16]
 800f92c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f92e:	2201      	movs	r2, #1
 800f930:	409a      	lsls	r2, r3
 800f932:	4b0f      	ldr	r3, [pc, #60]	@ (800f970 <xTaskPriorityDisinherit+0x10c>)
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	4313      	orrs	r3, r2
 800f938:	4a0d      	ldr	r2, [pc, #52]	@ (800f970 <xTaskPriorityDisinherit+0x10c>)
 800f93a:	6013      	str	r3, [r2, #0]
 800f93c:	693b      	ldr	r3, [r7, #16]
 800f93e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f940:	4613      	mov	r3, r2
 800f942:	009b      	lsls	r3, r3, #2
 800f944:	4413      	add	r3, r2
 800f946:	009b      	lsls	r3, r3, #2
 800f948:	4a08      	ldr	r2, [pc, #32]	@ (800f96c <xTaskPriorityDisinherit+0x108>)
 800f94a:	441a      	add	r2, r3
 800f94c:	693b      	ldr	r3, [r7, #16]
 800f94e:	3304      	adds	r3, #4
 800f950:	4619      	mov	r1, r3
 800f952:	4610      	mov	r0, r2
 800f954:	f7fe fbe9 	bl	800e12a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f958:	2301      	movs	r3, #1
 800f95a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f95c:	697b      	ldr	r3, [r7, #20]
	}
 800f95e:	4618      	mov	r0, r3
 800f960:	3718      	adds	r7, #24
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}
 800f966:	bf00      	nop
 800f968:	200260f0 	.word	0x200260f0
 800f96c:	200260f4 	.word	0x200260f4
 800f970:	200261f8 	.word	0x200261f8

0800f974 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b084      	sub	sp, #16
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
 800f97c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f97e:	4b29      	ldr	r3, [pc, #164]	@ (800fa24 <prvAddCurrentTaskToDelayedList+0xb0>)
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f984:	4b28      	ldr	r3, [pc, #160]	@ (800fa28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	3304      	adds	r3, #4
 800f98a:	4618      	mov	r0, r3
 800f98c:	f7fe fc2a 	bl	800e1e4 <uxListRemove>
 800f990:	4603      	mov	r3, r0
 800f992:	2b00      	cmp	r3, #0
 800f994:	d10b      	bne.n	800f9ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f996:	4b24      	ldr	r3, [pc, #144]	@ (800fa28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f99c:	2201      	movs	r2, #1
 800f99e:	fa02 f303 	lsl.w	r3, r2, r3
 800f9a2:	43da      	mvns	r2, r3
 800f9a4:	4b21      	ldr	r3, [pc, #132]	@ (800fa2c <prvAddCurrentTaskToDelayedList+0xb8>)
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	4013      	ands	r3, r2
 800f9aa:	4a20      	ldr	r2, [pc, #128]	@ (800fa2c <prvAddCurrentTaskToDelayedList+0xb8>)
 800f9ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f9b4:	d10a      	bne.n	800f9cc <prvAddCurrentTaskToDelayedList+0x58>
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d007      	beq.n	800f9cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f9bc:	4b1a      	ldr	r3, [pc, #104]	@ (800fa28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	3304      	adds	r3, #4
 800f9c2:	4619      	mov	r1, r3
 800f9c4:	481a      	ldr	r0, [pc, #104]	@ (800fa30 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f9c6:	f7fe fbb0 	bl	800e12a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f9ca:	e026      	b.n	800fa1a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f9cc:	68fa      	ldr	r2, [r7, #12]
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	4413      	add	r3, r2
 800f9d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f9d4:	4b14      	ldr	r3, [pc, #80]	@ (800fa28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	68ba      	ldr	r2, [r7, #8]
 800f9da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f9dc:	68ba      	ldr	r2, [r7, #8]
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	429a      	cmp	r2, r3
 800f9e2:	d209      	bcs.n	800f9f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f9e4:	4b13      	ldr	r3, [pc, #76]	@ (800fa34 <prvAddCurrentTaskToDelayedList+0xc0>)
 800f9e6:	681a      	ldr	r2, [r3, #0]
 800f9e8:	4b0f      	ldr	r3, [pc, #60]	@ (800fa28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	3304      	adds	r3, #4
 800f9ee:	4619      	mov	r1, r3
 800f9f0:	4610      	mov	r0, r2
 800f9f2:	f7fe fbbe 	bl	800e172 <vListInsert>
}
 800f9f6:	e010      	b.n	800fa1a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f9f8:	4b0f      	ldr	r3, [pc, #60]	@ (800fa38 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f9fa:	681a      	ldr	r2, [r3, #0]
 800f9fc:	4b0a      	ldr	r3, [pc, #40]	@ (800fa28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	3304      	adds	r3, #4
 800fa02:	4619      	mov	r1, r3
 800fa04:	4610      	mov	r0, r2
 800fa06:	f7fe fbb4 	bl	800e172 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fa0a:	4b0c      	ldr	r3, [pc, #48]	@ (800fa3c <prvAddCurrentTaskToDelayedList+0xc8>)
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	68ba      	ldr	r2, [r7, #8]
 800fa10:	429a      	cmp	r2, r3
 800fa12:	d202      	bcs.n	800fa1a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800fa14:	4a09      	ldr	r2, [pc, #36]	@ (800fa3c <prvAddCurrentTaskToDelayedList+0xc8>)
 800fa16:	68bb      	ldr	r3, [r7, #8]
 800fa18:	6013      	str	r3, [r2, #0]
}
 800fa1a:	bf00      	nop
 800fa1c:	3710      	adds	r7, #16
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bd80      	pop	{r7, pc}
 800fa22:	bf00      	nop
 800fa24:	200261f4 	.word	0x200261f4
 800fa28:	200260f0 	.word	0x200260f0
 800fa2c:	200261f8 	.word	0x200261f8
 800fa30:	200261dc 	.word	0x200261dc
 800fa34:	200261ac 	.word	0x200261ac
 800fa38:	200261a8 	.word	0x200261a8
 800fa3c:	20026210 	.word	0x20026210

0800fa40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fa40:	b480      	push	{r7}
 800fa42:	b085      	sub	sp, #20
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	60f8      	str	r0, [r7, #12]
 800fa48:	60b9      	str	r1, [r7, #8]
 800fa4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	3b04      	subs	r3, #4
 800fa50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800fa58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	3b04      	subs	r3, #4
 800fa5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fa60:	68bb      	ldr	r3, [r7, #8]
 800fa62:	f023 0201 	bic.w	r2, r3, #1
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	3b04      	subs	r3, #4
 800fa6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fa70:	4a0c      	ldr	r2, [pc, #48]	@ (800faa4 <pxPortInitialiseStack+0x64>)
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	3b14      	subs	r3, #20
 800fa7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fa7c:	687a      	ldr	r2, [r7, #4]
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	3b04      	subs	r3, #4
 800fa86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	f06f 0202 	mvn.w	r2, #2
 800fa8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	3b20      	subs	r3, #32
 800fa94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fa96:	68fb      	ldr	r3, [r7, #12]
}
 800fa98:	4618      	mov	r0, r3
 800fa9a:	3714      	adds	r7, #20
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa2:	4770      	bx	lr
 800faa4:	0800faa9 	.word	0x0800faa9

0800faa8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800faa8:	b480      	push	{r7}
 800faaa:	b085      	sub	sp, #20
 800faac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800faae:	2300      	movs	r3, #0
 800fab0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fab2:	4b13      	ldr	r3, [pc, #76]	@ (800fb00 <prvTaskExitError+0x58>)
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800faba:	d00b      	beq.n	800fad4 <prvTaskExitError+0x2c>
	__asm volatile
 800fabc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fac0:	f383 8811 	msr	BASEPRI, r3
 800fac4:	f3bf 8f6f 	isb	sy
 800fac8:	f3bf 8f4f 	dsb	sy
 800facc:	60fb      	str	r3, [r7, #12]
}
 800face:	bf00      	nop
 800fad0:	bf00      	nop
 800fad2:	e7fd      	b.n	800fad0 <prvTaskExitError+0x28>
	__asm volatile
 800fad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fad8:	f383 8811 	msr	BASEPRI, r3
 800fadc:	f3bf 8f6f 	isb	sy
 800fae0:	f3bf 8f4f 	dsb	sy
 800fae4:	60bb      	str	r3, [r7, #8]
}
 800fae6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fae8:	bf00      	nop
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d0fc      	beq.n	800faea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800faf0:	bf00      	nop
 800faf2:	bf00      	nop
 800faf4:	3714      	adds	r7, #20
 800faf6:	46bd      	mov	sp, r7
 800faf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafc:	4770      	bx	lr
 800fafe:	bf00      	nop
 800fb00:	20000034 	.word	0x20000034
	...

0800fb10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fb10:	4b07      	ldr	r3, [pc, #28]	@ (800fb30 <pxCurrentTCBConst2>)
 800fb12:	6819      	ldr	r1, [r3, #0]
 800fb14:	6808      	ldr	r0, [r1, #0]
 800fb16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb1a:	f380 8809 	msr	PSP, r0
 800fb1e:	f3bf 8f6f 	isb	sy
 800fb22:	f04f 0000 	mov.w	r0, #0
 800fb26:	f380 8811 	msr	BASEPRI, r0
 800fb2a:	4770      	bx	lr
 800fb2c:	f3af 8000 	nop.w

0800fb30 <pxCurrentTCBConst2>:
 800fb30:	200260f0 	.word	0x200260f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fb34:	bf00      	nop
 800fb36:	bf00      	nop

0800fb38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fb38:	4808      	ldr	r0, [pc, #32]	@ (800fb5c <prvPortStartFirstTask+0x24>)
 800fb3a:	6800      	ldr	r0, [r0, #0]
 800fb3c:	6800      	ldr	r0, [r0, #0]
 800fb3e:	f380 8808 	msr	MSP, r0
 800fb42:	f04f 0000 	mov.w	r0, #0
 800fb46:	f380 8814 	msr	CONTROL, r0
 800fb4a:	b662      	cpsie	i
 800fb4c:	b661      	cpsie	f
 800fb4e:	f3bf 8f4f 	dsb	sy
 800fb52:	f3bf 8f6f 	isb	sy
 800fb56:	df00      	svc	0
 800fb58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fb5a:	bf00      	nop
 800fb5c:	e000ed08 	.word	0xe000ed08

0800fb60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b086      	sub	sp, #24
 800fb64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fb66:	4b47      	ldr	r3, [pc, #284]	@ (800fc84 <xPortStartScheduler+0x124>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	4a47      	ldr	r2, [pc, #284]	@ (800fc88 <xPortStartScheduler+0x128>)
 800fb6c:	4293      	cmp	r3, r2
 800fb6e:	d10b      	bne.n	800fb88 <xPortStartScheduler+0x28>
	__asm volatile
 800fb70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb74:	f383 8811 	msr	BASEPRI, r3
 800fb78:	f3bf 8f6f 	isb	sy
 800fb7c:	f3bf 8f4f 	dsb	sy
 800fb80:	60fb      	str	r3, [r7, #12]
}
 800fb82:	bf00      	nop
 800fb84:	bf00      	nop
 800fb86:	e7fd      	b.n	800fb84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fb88:	4b3e      	ldr	r3, [pc, #248]	@ (800fc84 <xPortStartScheduler+0x124>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	4a3f      	ldr	r2, [pc, #252]	@ (800fc8c <xPortStartScheduler+0x12c>)
 800fb8e:	4293      	cmp	r3, r2
 800fb90:	d10b      	bne.n	800fbaa <xPortStartScheduler+0x4a>
	__asm volatile
 800fb92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb96:	f383 8811 	msr	BASEPRI, r3
 800fb9a:	f3bf 8f6f 	isb	sy
 800fb9e:	f3bf 8f4f 	dsb	sy
 800fba2:	613b      	str	r3, [r7, #16]
}
 800fba4:	bf00      	nop
 800fba6:	bf00      	nop
 800fba8:	e7fd      	b.n	800fba6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fbaa:	4b39      	ldr	r3, [pc, #228]	@ (800fc90 <xPortStartScheduler+0x130>)
 800fbac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fbae:	697b      	ldr	r3, [r7, #20]
 800fbb0:	781b      	ldrb	r3, [r3, #0]
 800fbb2:	b2db      	uxtb	r3, r3
 800fbb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fbb6:	697b      	ldr	r3, [r7, #20]
 800fbb8:	22ff      	movs	r2, #255	@ 0xff
 800fbba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fbbc:	697b      	ldr	r3, [r7, #20]
 800fbbe:	781b      	ldrb	r3, [r3, #0]
 800fbc0:	b2db      	uxtb	r3, r3
 800fbc2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fbc4:	78fb      	ldrb	r3, [r7, #3]
 800fbc6:	b2db      	uxtb	r3, r3
 800fbc8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800fbcc:	b2da      	uxtb	r2, r3
 800fbce:	4b31      	ldr	r3, [pc, #196]	@ (800fc94 <xPortStartScheduler+0x134>)
 800fbd0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fbd2:	4b31      	ldr	r3, [pc, #196]	@ (800fc98 <xPortStartScheduler+0x138>)
 800fbd4:	2207      	movs	r2, #7
 800fbd6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fbd8:	e009      	b.n	800fbee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800fbda:	4b2f      	ldr	r3, [pc, #188]	@ (800fc98 <xPortStartScheduler+0x138>)
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	3b01      	subs	r3, #1
 800fbe0:	4a2d      	ldr	r2, [pc, #180]	@ (800fc98 <xPortStartScheduler+0x138>)
 800fbe2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fbe4:	78fb      	ldrb	r3, [r7, #3]
 800fbe6:	b2db      	uxtb	r3, r3
 800fbe8:	005b      	lsls	r3, r3, #1
 800fbea:	b2db      	uxtb	r3, r3
 800fbec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fbee:	78fb      	ldrb	r3, [r7, #3]
 800fbf0:	b2db      	uxtb	r3, r3
 800fbf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fbf6:	2b80      	cmp	r3, #128	@ 0x80
 800fbf8:	d0ef      	beq.n	800fbda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fbfa:	4b27      	ldr	r3, [pc, #156]	@ (800fc98 <xPortStartScheduler+0x138>)
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	f1c3 0307 	rsb	r3, r3, #7
 800fc02:	2b04      	cmp	r3, #4
 800fc04:	d00b      	beq.n	800fc1e <xPortStartScheduler+0xbe>
	__asm volatile
 800fc06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc0a:	f383 8811 	msr	BASEPRI, r3
 800fc0e:	f3bf 8f6f 	isb	sy
 800fc12:	f3bf 8f4f 	dsb	sy
 800fc16:	60bb      	str	r3, [r7, #8]
}
 800fc18:	bf00      	nop
 800fc1a:	bf00      	nop
 800fc1c:	e7fd      	b.n	800fc1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fc1e:	4b1e      	ldr	r3, [pc, #120]	@ (800fc98 <xPortStartScheduler+0x138>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	021b      	lsls	r3, r3, #8
 800fc24:	4a1c      	ldr	r2, [pc, #112]	@ (800fc98 <xPortStartScheduler+0x138>)
 800fc26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fc28:	4b1b      	ldr	r3, [pc, #108]	@ (800fc98 <xPortStartScheduler+0x138>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fc30:	4a19      	ldr	r2, [pc, #100]	@ (800fc98 <xPortStartScheduler+0x138>)
 800fc32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	b2da      	uxtb	r2, r3
 800fc38:	697b      	ldr	r3, [r7, #20]
 800fc3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fc3c:	4b17      	ldr	r3, [pc, #92]	@ (800fc9c <xPortStartScheduler+0x13c>)
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	4a16      	ldr	r2, [pc, #88]	@ (800fc9c <xPortStartScheduler+0x13c>)
 800fc42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fc46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fc48:	4b14      	ldr	r3, [pc, #80]	@ (800fc9c <xPortStartScheduler+0x13c>)
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	4a13      	ldr	r2, [pc, #76]	@ (800fc9c <xPortStartScheduler+0x13c>)
 800fc4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fc52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fc54:	f000 f8da 	bl	800fe0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fc58:	4b11      	ldr	r3, [pc, #68]	@ (800fca0 <xPortStartScheduler+0x140>)
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fc5e:	f000 f8f9 	bl	800fe54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fc62:	4b10      	ldr	r3, [pc, #64]	@ (800fca4 <xPortStartScheduler+0x144>)
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	4a0f      	ldr	r2, [pc, #60]	@ (800fca4 <xPortStartScheduler+0x144>)
 800fc68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800fc6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fc6e:	f7ff ff63 	bl	800fb38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fc72:	f7ff fb97 	bl	800f3a4 <vTaskSwitchContext>
	prvTaskExitError();
 800fc76:	f7ff ff17 	bl	800faa8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fc7a:	2300      	movs	r3, #0
}
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	3718      	adds	r7, #24
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bd80      	pop	{r7, pc}
 800fc84:	e000ed00 	.word	0xe000ed00
 800fc88:	410fc271 	.word	0x410fc271
 800fc8c:	410fc270 	.word	0x410fc270
 800fc90:	e000e400 	.word	0xe000e400
 800fc94:	2002621c 	.word	0x2002621c
 800fc98:	20026220 	.word	0x20026220
 800fc9c:	e000ed20 	.word	0xe000ed20
 800fca0:	20000034 	.word	0x20000034
 800fca4:	e000ef34 	.word	0xe000ef34

0800fca8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fca8:	b480      	push	{r7}
 800fcaa:	b083      	sub	sp, #12
 800fcac:	af00      	add	r7, sp, #0
	__asm volatile
 800fcae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcb2:	f383 8811 	msr	BASEPRI, r3
 800fcb6:	f3bf 8f6f 	isb	sy
 800fcba:	f3bf 8f4f 	dsb	sy
 800fcbe:	607b      	str	r3, [r7, #4]
}
 800fcc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fcc2:	4b10      	ldr	r3, [pc, #64]	@ (800fd04 <vPortEnterCritical+0x5c>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	3301      	adds	r3, #1
 800fcc8:	4a0e      	ldr	r2, [pc, #56]	@ (800fd04 <vPortEnterCritical+0x5c>)
 800fcca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fccc:	4b0d      	ldr	r3, [pc, #52]	@ (800fd04 <vPortEnterCritical+0x5c>)
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	2b01      	cmp	r3, #1
 800fcd2:	d110      	bne.n	800fcf6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fcd4:	4b0c      	ldr	r3, [pc, #48]	@ (800fd08 <vPortEnterCritical+0x60>)
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	b2db      	uxtb	r3, r3
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d00b      	beq.n	800fcf6 <vPortEnterCritical+0x4e>
	__asm volatile
 800fcde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fce2:	f383 8811 	msr	BASEPRI, r3
 800fce6:	f3bf 8f6f 	isb	sy
 800fcea:	f3bf 8f4f 	dsb	sy
 800fcee:	603b      	str	r3, [r7, #0]
}
 800fcf0:	bf00      	nop
 800fcf2:	bf00      	nop
 800fcf4:	e7fd      	b.n	800fcf2 <vPortEnterCritical+0x4a>
	}
}
 800fcf6:	bf00      	nop
 800fcf8:	370c      	adds	r7, #12
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd00:	4770      	bx	lr
 800fd02:	bf00      	nop
 800fd04:	20000034 	.word	0x20000034
 800fd08:	e000ed04 	.word	0xe000ed04

0800fd0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fd0c:	b480      	push	{r7}
 800fd0e:	b083      	sub	sp, #12
 800fd10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fd12:	4b12      	ldr	r3, [pc, #72]	@ (800fd5c <vPortExitCritical+0x50>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d10b      	bne.n	800fd32 <vPortExitCritical+0x26>
	__asm volatile
 800fd1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd1e:	f383 8811 	msr	BASEPRI, r3
 800fd22:	f3bf 8f6f 	isb	sy
 800fd26:	f3bf 8f4f 	dsb	sy
 800fd2a:	607b      	str	r3, [r7, #4]
}
 800fd2c:	bf00      	nop
 800fd2e:	bf00      	nop
 800fd30:	e7fd      	b.n	800fd2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fd32:	4b0a      	ldr	r3, [pc, #40]	@ (800fd5c <vPortExitCritical+0x50>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	3b01      	subs	r3, #1
 800fd38:	4a08      	ldr	r2, [pc, #32]	@ (800fd5c <vPortExitCritical+0x50>)
 800fd3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fd3c:	4b07      	ldr	r3, [pc, #28]	@ (800fd5c <vPortExitCritical+0x50>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d105      	bne.n	800fd50 <vPortExitCritical+0x44>
 800fd44:	2300      	movs	r3, #0
 800fd46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	f383 8811 	msr	BASEPRI, r3
}
 800fd4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fd50:	bf00      	nop
 800fd52:	370c      	adds	r7, #12
 800fd54:	46bd      	mov	sp, r7
 800fd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5a:	4770      	bx	lr
 800fd5c:	20000034 	.word	0x20000034

0800fd60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fd60:	f3ef 8009 	mrs	r0, PSP
 800fd64:	f3bf 8f6f 	isb	sy
 800fd68:	4b15      	ldr	r3, [pc, #84]	@ (800fdc0 <pxCurrentTCBConst>)
 800fd6a:	681a      	ldr	r2, [r3, #0]
 800fd6c:	f01e 0f10 	tst.w	lr, #16
 800fd70:	bf08      	it	eq
 800fd72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fd76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd7a:	6010      	str	r0, [r2, #0]
 800fd7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fd80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fd84:	f380 8811 	msr	BASEPRI, r0
 800fd88:	f3bf 8f4f 	dsb	sy
 800fd8c:	f3bf 8f6f 	isb	sy
 800fd90:	f7ff fb08 	bl	800f3a4 <vTaskSwitchContext>
 800fd94:	f04f 0000 	mov.w	r0, #0
 800fd98:	f380 8811 	msr	BASEPRI, r0
 800fd9c:	bc09      	pop	{r0, r3}
 800fd9e:	6819      	ldr	r1, [r3, #0]
 800fda0:	6808      	ldr	r0, [r1, #0]
 800fda2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fda6:	f01e 0f10 	tst.w	lr, #16
 800fdaa:	bf08      	it	eq
 800fdac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fdb0:	f380 8809 	msr	PSP, r0
 800fdb4:	f3bf 8f6f 	isb	sy
 800fdb8:	4770      	bx	lr
 800fdba:	bf00      	nop
 800fdbc:	f3af 8000 	nop.w

0800fdc0 <pxCurrentTCBConst>:
 800fdc0:	200260f0 	.word	0x200260f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fdc4:	bf00      	nop
 800fdc6:	bf00      	nop

0800fdc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b082      	sub	sp, #8
 800fdcc:	af00      	add	r7, sp, #0
	__asm volatile
 800fdce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdd2:	f383 8811 	msr	BASEPRI, r3
 800fdd6:	f3bf 8f6f 	isb	sy
 800fdda:	f3bf 8f4f 	dsb	sy
 800fdde:	607b      	str	r3, [r7, #4]
}
 800fde0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fde2:	f7ff fa25 	bl	800f230 <xTaskIncrementTick>
 800fde6:	4603      	mov	r3, r0
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d003      	beq.n	800fdf4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fdec:	4b06      	ldr	r3, [pc, #24]	@ (800fe08 <SysTick_Handler+0x40>)
 800fdee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fdf2:	601a      	str	r2, [r3, #0]
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	f383 8811 	msr	BASEPRI, r3
}
 800fdfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fe00:	bf00      	nop
 800fe02:	3708      	adds	r7, #8
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}
 800fe08:	e000ed04 	.word	0xe000ed04

0800fe0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fe0c:	b480      	push	{r7}
 800fe0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fe10:	4b0b      	ldr	r3, [pc, #44]	@ (800fe40 <vPortSetupTimerInterrupt+0x34>)
 800fe12:	2200      	movs	r2, #0
 800fe14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fe16:	4b0b      	ldr	r3, [pc, #44]	@ (800fe44 <vPortSetupTimerInterrupt+0x38>)
 800fe18:	2200      	movs	r2, #0
 800fe1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fe1c:	4b0a      	ldr	r3, [pc, #40]	@ (800fe48 <vPortSetupTimerInterrupt+0x3c>)
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	4a0a      	ldr	r2, [pc, #40]	@ (800fe4c <vPortSetupTimerInterrupt+0x40>)
 800fe22:	fba2 2303 	umull	r2, r3, r2, r3
 800fe26:	099b      	lsrs	r3, r3, #6
 800fe28:	4a09      	ldr	r2, [pc, #36]	@ (800fe50 <vPortSetupTimerInterrupt+0x44>)
 800fe2a:	3b01      	subs	r3, #1
 800fe2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fe2e:	4b04      	ldr	r3, [pc, #16]	@ (800fe40 <vPortSetupTimerInterrupt+0x34>)
 800fe30:	2207      	movs	r2, #7
 800fe32:	601a      	str	r2, [r3, #0]
}
 800fe34:	bf00      	nop
 800fe36:	46bd      	mov	sp, r7
 800fe38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3c:	4770      	bx	lr
 800fe3e:	bf00      	nop
 800fe40:	e000e010 	.word	0xe000e010
 800fe44:	e000e018 	.word	0xe000e018
 800fe48:	20000008 	.word	0x20000008
 800fe4c:	10624dd3 	.word	0x10624dd3
 800fe50:	e000e014 	.word	0xe000e014

0800fe54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fe54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fe64 <vPortEnableVFP+0x10>
 800fe58:	6801      	ldr	r1, [r0, #0]
 800fe5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800fe5e:	6001      	str	r1, [r0, #0]
 800fe60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fe62:	bf00      	nop
 800fe64:	e000ed88 	.word	0xe000ed88

0800fe68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fe68:	b480      	push	{r7}
 800fe6a:	b085      	sub	sp, #20
 800fe6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fe6e:	f3ef 8305 	mrs	r3, IPSR
 800fe72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	2b0f      	cmp	r3, #15
 800fe78:	d915      	bls.n	800fea6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fe7a:	4a18      	ldr	r2, [pc, #96]	@ (800fedc <vPortValidateInterruptPriority+0x74>)
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	4413      	add	r3, r2
 800fe80:	781b      	ldrb	r3, [r3, #0]
 800fe82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fe84:	4b16      	ldr	r3, [pc, #88]	@ (800fee0 <vPortValidateInterruptPriority+0x78>)
 800fe86:	781b      	ldrb	r3, [r3, #0]
 800fe88:	7afa      	ldrb	r2, [r7, #11]
 800fe8a:	429a      	cmp	r2, r3
 800fe8c:	d20b      	bcs.n	800fea6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800fe8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe92:	f383 8811 	msr	BASEPRI, r3
 800fe96:	f3bf 8f6f 	isb	sy
 800fe9a:	f3bf 8f4f 	dsb	sy
 800fe9e:	607b      	str	r3, [r7, #4]
}
 800fea0:	bf00      	nop
 800fea2:	bf00      	nop
 800fea4:	e7fd      	b.n	800fea2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fea6:	4b0f      	ldr	r3, [pc, #60]	@ (800fee4 <vPortValidateInterruptPriority+0x7c>)
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800feae:	4b0e      	ldr	r3, [pc, #56]	@ (800fee8 <vPortValidateInterruptPriority+0x80>)
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	429a      	cmp	r2, r3
 800feb4:	d90b      	bls.n	800fece <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800feb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800feba:	f383 8811 	msr	BASEPRI, r3
 800febe:	f3bf 8f6f 	isb	sy
 800fec2:	f3bf 8f4f 	dsb	sy
 800fec6:	603b      	str	r3, [r7, #0]
}
 800fec8:	bf00      	nop
 800feca:	bf00      	nop
 800fecc:	e7fd      	b.n	800feca <vPortValidateInterruptPriority+0x62>
	}
 800fece:	bf00      	nop
 800fed0:	3714      	adds	r7, #20
 800fed2:	46bd      	mov	sp, r7
 800fed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed8:	4770      	bx	lr
 800feda:	bf00      	nop
 800fedc:	e000e3f0 	.word	0xe000e3f0
 800fee0:	2002621c 	.word	0x2002621c
 800fee4:	e000ed0c 	.word	0xe000ed0c
 800fee8:	20026220 	.word	0x20026220

0800feec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b08a      	sub	sp, #40	@ 0x28
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fef4:	2300      	movs	r3, #0
 800fef6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fef8:	f7ff f8ee 	bl	800f0d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fefc:	4b5c      	ldr	r3, [pc, #368]	@ (8010070 <pvPortMalloc+0x184>)
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d101      	bne.n	800ff08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ff04:	f000 f924 	bl	8010150 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ff08:	4b5a      	ldr	r3, [pc, #360]	@ (8010074 <pvPortMalloc+0x188>)
 800ff0a:	681a      	ldr	r2, [r3, #0]
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	4013      	ands	r3, r2
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	f040 8095 	bne.w	8010040 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d01e      	beq.n	800ff5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ff1c:	2208      	movs	r2, #8
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	4413      	add	r3, r2
 800ff22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	f003 0307 	and.w	r3, r3, #7
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d015      	beq.n	800ff5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	f023 0307 	bic.w	r3, r3, #7
 800ff34:	3308      	adds	r3, #8
 800ff36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f003 0307 	and.w	r3, r3, #7
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d00b      	beq.n	800ff5a <pvPortMalloc+0x6e>
	__asm volatile
 800ff42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff46:	f383 8811 	msr	BASEPRI, r3
 800ff4a:	f3bf 8f6f 	isb	sy
 800ff4e:	f3bf 8f4f 	dsb	sy
 800ff52:	617b      	str	r3, [r7, #20]
}
 800ff54:	bf00      	nop
 800ff56:	bf00      	nop
 800ff58:	e7fd      	b.n	800ff56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d06f      	beq.n	8010040 <pvPortMalloc+0x154>
 800ff60:	4b45      	ldr	r3, [pc, #276]	@ (8010078 <pvPortMalloc+0x18c>)
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	687a      	ldr	r2, [r7, #4]
 800ff66:	429a      	cmp	r2, r3
 800ff68:	d86a      	bhi.n	8010040 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ff6a:	4b44      	ldr	r3, [pc, #272]	@ (801007c <pvPortMalloc+0x190>)
 800ff6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ff6e:	4b43      	ldr	r3, [pc, #268]	@ (801007c <pvPortMalloc+0x190>)
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ff74:	e004      	b.n	800ff80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ff76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ff7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ff80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff82:	685b      	ldr	r3, [r3, #4]
 800ff84:	687a      	ldr	r2, [r7, #4]
 800ff86:	429a      	cmp	r2, r3
 800ff88:	d903      	bls.n	800ff92 <pvPortMalloc+0xa6>
 800ff8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d1f1      	bne.n	800ff76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ff92:	4b37      	ldr	r3, [pc, #220]	@ (8010070 <pvPortMalloc+0x184>)
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff98:	429a      	cmp	r2, r3
 800ff9a:	d051      	beq.n	8010040 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ff9c:	6a3b      	ldr	r3, [r7, #32]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	2208      	movs	r2, #8
 800ffa2:	4413      	add	r3, r2
 800ffa4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ffa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffa8:	681a      	ldr	r2, [r3, #0]
 800ffaa:	6a3b      	ldr	r3, [r7, #32]
 800ffac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ffae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffb0:	685a      	ldr	r2, [r3, #4]
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	1ad2      	subs	r2, r2, r3
 800ffb6:	2308      	movs	r3, #8
 800ffb8:	005b      	lsls	r3, r3, #1
 800ffba:	429a      	cmp	r2, r3
 800ffbc:	d920      	bls.n	8010000 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ffbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	4413      	add	r3, r2
 800ffc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ffc6:	69bb      	ldr	r3, [r7, #24]
 800ffc8:	f003 0307 	and.w	r3, r3, #7
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d00b      	beq.n	800ffe8 <pvPortMalloc+0xfc>
	__asm volatile
 800ffd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffd4:	f383 8811 	msr	BASEPRI, r3
 800ffd8:	f3bf 8f6f 	isb	sy
 800ffdc:	f3bf 8f4f 	dsb	sy
 800ffe0:	613b      	str	r3, [r7, #16]
}
 800ffe2:	bf00      	nop
 800ffe4:	bf00      	nop
 800ffe6:	e7fd      	b.n	800ffe4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ffe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffea:	685a      	ldr	r2, [r3, #4]
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	1ad2      	subs	r2, r2, r3
 800fff0:	69bb      	ldr	r3, [r7, #24]
 800fff2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fff6:	687a      	ldr	r2, [r7, #4]
 800fff8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fffa:	69b8      	ldr	r0, [r7, #24]
 800fffc:	f000 f90a 	bl	8010214 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010000:	4b1d      	ldr	r3, [pc, #116]	@ (8010078 <pvPortMalloc+0x18c>)
 8010002:	681a      	ldr	r2, [r3, #0]
 8010004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010006:	685b      	ldr	r3, [r3, #4]
 8010008:	1ad3      	subs	r3, r2, r3
 801000a:	4a1b      	ldr	r2, [pc, #108]	@ (8010078 <pvPortMalloc+0x18c>)
 801000c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801000e:	4b1a      	ldr	r3, [pc, #104]	@ (8010078 <pvPortMalloc+0x18c>)
 8010010:	681a      	ldr	r2, [r3, #0]
 8010012:	4b1b      	ldr	r3, [pc, #108]	@ (8010080 <pvPortMalloc+0x194>)
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	429a      	cmp	r2, r3
 8010018:	d203      	bcs.n	8010022 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801001a:	4b17      	ldr	r3, [pc, #92]	@ (8010078 <pvPortMalloc+0x18c>)
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	4a18      	ldr	r2, [pc, #96]	@ (8010080 <pvPortMalloc+0x194>)
 8010020:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010024:	685a      	ldr	r2, [r3, #4]
 8010026:	4b13      	ldr	r3, [pc, #76]	@ (8010074 <pvPortMalloc+0x188>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	431a      	orrs	r2, r3
 801002c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801002e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010032:	2200      	movs	r2, #0
 8010034:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010036:	4b13      	ldr	r3, [pc, #76]	@ (8010084 <pvPortMalloc+0x198>)
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	3301      	adds	r3, #1
 801003c:	4a11      	ldr	r2, [pc, #68]	@ (8010084 <pvPortMalloc+0x198>)
 801003e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010040:	f7ff f858 	bl	800f0f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010044:	69fb      	ldr	r3, [r7, #28]
 8010046:	f003 0307 	and.w	r3, r3, #7
 801004a:	2b00      	cmp	r3, #0
 801004c:	d00b      	beq.n	8010066 <pvPortMalloc+0x17a>
	__asm volatile
 801004e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010052:	f383 8811 	msr	BASEPRI, r3
 8010056:	f3bf 8f6f 	isb	sy
 801005a:	f3bf 8f4f 	dsb	sy
 801005e:	60fb      	str	r3, [r7, #12]
}
 8010060:	bf00      	nop
 8010062:	bf00      	nop
 8010064:	e7fd      	b.n	8010062 <pvPortMalloc+0x176>
	return pvReturn;
 8010066:	69fb      	ldr	r3, [r7, #28]
}
 8010068:	4618      	mov	r0, r3
 801006a:	3728      	adds	r7, #40	@ 0x28
 801006c:	46bd      	mov	sp, r7
 801006e:	bd80      	pop	{r7, pc}
 8010070:	20029e2c 	.word	0x20029e2c
 8010074:	20029e40 	.word	0x20029e40
 8010078:	20029e30 	.word	0x20029e30
 801007c:	20029e24 	.word	0x20029e24
 8010080:	20029e34 	.word	0x20029e34
 8010084:	20029e38 	.word	0x20029e38

08010088 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b086      	sub	sp, #24
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d04f      	beq.n	801013a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801009a:	2308      	movs	r3, #8
 801009c:	425b      	negs	r3, r3
 801009e:	697a      	ldr	r2, [r7, #20]
 80100a0:	4413      	add	r3, r2
 80100a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80100a4:	697b      	ldr	r3, [r7, #20]
 80100a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80100a8:	693b      	ldr	r3, [r7, #16]
 80100aa:	685a      	ldr	r2, [r3, #4]
 80100ac:	4b25      	ldr	r3, [pc, #148]	@ (8010144 <vPortFree+0xbc>)
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	4013      	ands	r3, r2
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d10b      	bne.n	80100ce <vPortFree+0x46>
	__asm volatile
 80100b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100ba:	f383 8811 	msr	BASEPRI, r3
 80100be:	f3bf 8f6f 	isb	sy
 80100c2:	f3bf 8f4f 	dsb	sy
 80100c6:	60fb      	str	r3, [r7, #12]
}
 80100c8:	bf00      	nop
 80100ca:	bf00      	nop
 80100cc:	e7fd      	b.n	80100ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80100ce:	693b      	ldr	r3, [r7, #16]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d00b      	beq.n	80100ee <vPortFree+0x66>
	__asm volatile
 80100d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100da:	f383 8811 	msr	BASEPRI, r3
 80100de:	f3bf 8f6f 	isb	sy
 80100e2:	f3bf 8f4f 	dsb	sy
 80100e6:	60bb      	str	r3, [r7, #8]
}
 80100e8:	bf00      	nop
 80100ea:	bf00      	nop
 80100ec:	e7fd      	b.n	80100ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80100ee:	693b      	ldr	r3, [r7, #16]
 80100f0:	685a      	ldr	r2, [r3, #4]
 80100f2:	4b14      	ldr	r3, [pc, #80]	@ (8010144 <vPortFree+0xbc>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	4013      	ands	r3, r2
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d01e      	beq.n	801013a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80100fc:	693b      	ldr	r3, [r7, #16]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d11a      	bne.n	801013a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010104:	693b      	ldr	r3, [r7, #16]
 8010106:	685a      	ldr	r2, [r3, #4]
 8010108:	4b0e      	ldr	r3, [pc, #56]	@ (8010144 <vPortFree+0xbc>)
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	43db      	mvns	r3, r3
 801010e:	401a      	ands	r2, r3
 8010110:	693b      	ldr	r3, [r7, #16]
 8010112:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010114:	f7fe ffe0 	bl	800f0d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010118:	693b      	ldr	r3, [r7, #16]
 801011a:	685a      	ldr	r2, [r3, #4]
 801011c:	4b0a      	ldr	r3, [pc, #40]	@ (8010148 <vPortFree+0xc0>)
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	4413      	add	r3, r2
 8010122:	4a09      	ldr	r2, [pc, #36]	@ (8010148 <vPortFree+0xc0>)
 8010124:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010126:	6938      	ldr	r0, [r7, #16]
 8010128:	f000 f874 	bl	8010214 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801012c:	4b07      	ldr	r3, [pc, #28]	@ (801014c <vPortFree+0xc4>)
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	3301      	adds	r3, #1
 8010132:	4a06      	ldr	r2, [pc, #24]	@ (801014c <vPortFree+0xc4>)
 8010134:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010136:	f7fe ffdd 	bl	800f0f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801013a:	bf00      	nop
 801013c:	3718      	adds	r7, #24
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}
 8010142:	bf00      	nop
 8010144:	20029e40 	.word	0x20029e40
 8010148:	20029e30 	.word	0x20029e30
 801014c:	20029e3c 	.word	0x20029e3c

08010150 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010150:	b480      	push	{r7}
 8010152:	b085      	sub	sp, #20
 8010154:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010156:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801015a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801015c:	4b27      	ldr	r3, [pc, #156]	@ (80101fc <prvHeapInit+0xac>)
 801015e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	f003 0307 	and.w	r3, r3, #7
 8010166:	2b00      	cmp	r3, #0
 8010168:	d00c      	beq.n	8010184 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	3307      	adds	r3, #7
 801016e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	f023 0307 	bic.w	r3, r3, #7
 8010176:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010178:	68ba      	ldr	r2, [r7, #8]
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	1ad3      	subs	r3, r2, r3
 801017e:	4a1f      	ldr	r2, [pc, #124]	@ (80101fc <prvHeapInit+0xac>)
 8010180:	4413      	add	r3, r2
 8010182:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010188:	4a1d      	ldr	r2, [pc, #116]	@ (8010200 <prvHeapInit+0xb0>)
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801018e:	4b1c      	ldr	r3, [pc, #112]	@ (8010200 <prvHeapInit+0xb0>)
 8010190:	2200      	movs	r2, #0
 8010192:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	68ba      	ldr	r2, [r7, #8]
 8010198:	4413      	add	r3, r2
 801019a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801019c:	2208      	movs	r2, #8
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	1a9b      	subs	r3, r3, r2
 80101a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	f023 0307 	bic.w	r3, r3, #7
 80101aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	4a15      	ldr	r2, [pc, #84]	@ (8010204 <prvHeapInit+0xb4>)
 80101b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80101b2:	4b14      	ldr	r3, [pc, #80]	@ (8010204 <prvHeapInit+0xb4>)
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	2200      	movs	r2, #0
 80101b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80101ba:	4b12      	ldr	r3, [pc, #72]	@ (8010204 <prvHeapInit+0xb4>)
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	2200      	movs	r2, #0
 80101c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80101c6:	683b      	ldr	r3, [r7, #0]
 80101c8:	68fa      	ldr	r2, [r7, #12]
 80101ca:	1ad2      	subs	r2, r2, r3
 80101cc:	683b      	ldr	r3, [r7, #0]
 80101ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80101d0:	4b0c      	ldr	r3, [pc, #48]	@ (8010204 <prvHeapInit+0xb4>)
 80101d2:	681a      	ldr	r2, [r3, #0]
 80101d4:	683b      	ldr	r3, [r7, #0]
 80101d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	685b      	ldr	r3, [r3, #4]
 80101dc:	4a0a      	ldr	r2, [pc, #40]	@ (8010208 <prvHeapInit+0xb8>)
 80101de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	685b      	ldr	r3, [r3, #4]
 80101e4:	4a09      	ldr	r2, [pc, #36]	@ (801020c <prvHeapInit+0xbc>)
 80101e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80101e8:	4b09      	ldr	r3, [pc, #36]	@ (8010210 <prvHeapInit+0xc0>)
 80101ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80101ee:	601a      	str	r2, [r3, #0]
}
 80101f0:	bf00      	nop
 80101f2:	3714      	adds	r7, #20
 80101f4:	46bd      	mov	sp, r7
 80101f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fa:	4770      	bx	lr
 80101fc:	20026224 	.word	0x20026224
 8010200:	20029e24 	.word	0x20029e24
 8010204:	20029e2c 	.word	0x20029e2c
 8010208:	20029e34 	.word	0x20029e34
 801020c:	20029e30 	.word	0x20029e30
 8010210:	20029e40 	.word	0x20029e40

08010214 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010214:	b480      	push	{r7}
 8010216:	b085      	sub	sp, #20
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801021c:	4b28      	ldr	r3, [pc, #160]	@ (80102c0 <prvInsertBlockIntoFreeList+0xac>)
 801021e:	60fb      	str	r3, [r7, #12]
 8010220:	e002      	b.n	8010228 <prvInsertBlockIntoFreeList+0x14>
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	60fb      	str	r3, [r7, #12]
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	687a      	ldr	r2, [r7, #4]
 801022e:	429a      	cmp	r2, r3
 8010230:	d8f7      	bhi.n	8010222 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	685b      	ldr	r3, [r3, #4]
 801023a:	68ba      	ldr	r2, [r7, #8]
 801023c:	4413      	add	r3, r2
 801023e:	687a      	ldr	r2, [r7, #4]
 8010240:	429a      	cmp	r2, r3
 8010242:	d108      	bne.n	8010256 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	685a      	ldr	r2, [r3, #4]
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	685b      	ldr	r3, [r3, #4]
 801024c:	441a      	add	r2, r3
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	685b      	ldr	r3, [r3, #4]
 801025e:	68ba      	ldr	r2, [r7, #8]
 8010260:	441a      	add	r2, r3
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	429a      	cmp	r2, r3
 8010268:	d118      	bne.n	801029c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	681a      	ldr	r2, [r3, #0]
 801026e:	4b15      	ldr	r3, [pc, #84]	@ (80102c4 <prvInsertBlockIntoFreeList+0xb0>)
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	429a      	cmp	r2, r3
 8010274:	d00d      	beq.n	8010292 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	685a      	ldr	r2, [r3, #4]
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	685b      	ldr	r3, [r3, #4]
 8010280:	441a      	add	r2, r3
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	681a      	ldr	r2, [r3, #0]
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	601a      	str	r2, [r3, #0]
 8010290:	e008      	b.n	80102a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010292:	4b0c      	ldr	r3, [pc, #48]	@ (80102c4 <prvInsertBlockIntoFreeList+0xb0>)
 8010294:	681a      	ldr	r2, [r3, #0]
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	601a      	str	r2, [r3, #0]
 801029a:	e003      	b.n	80102a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	681a      	ldr	r2, [r3, #0]
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80102a4:	68fa      	ldr	r2, [r7, #12]
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	429a      	cmp	r2, r3
 80102aa:	d002      	beq.n	80102b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	687a      	ldr	r2, [r7, #4]
 80102b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80102b2:	bf00      	nop
 80102b4:	3714      	adds	r7, #20
 80102b6:	46bd      	mov	sp, r7
 80102b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102bc:	4770      	bx	lr
 80102be:	bf00      	nop
 80102c0:	20029e24 	.word	0x20029e24
 80102c4:	20029e2c 	.word	0x20029e2c

080102c8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 80102cc:	2200      	movs	r2, #0
 80102ce:	490e      	ldr	r1, [pc, #56]	@ (8010308 <MX_USB_HOST_Init+0x40>)
 80102d0:	480e      	ldr	r0, [pc, #56]	@ (801030c <MX_USB_HOST_Init+0x44>)
 80102d2:	f7fb fe8b 	bl	800bfec <USBH_Init>
 80102d6:	4603      	mov	r3, r0
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d001      	beq.n	80102e0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80102dc:	f7f2 ff5e 	bl	800319c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 80102e0:	490b      	ldr	r1, [pc, #44]	@ (8010310 <MX_USB_HOST_Init+0x48>)
 80102e2:	480a      	ldr	r0, [pc, #40]	@ (801030c <MX_USB_HOST_Init+0x44>)
 80102e4:	f7fb ff57 	bl	800c196 <USBH_RegisterClass>
 80102e8:	4603      	mov	r3, r0
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d001      	beq.n	80102f2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80102ee:	f7f2 ff55 	bl	800319c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 80102f2:	4806      	ldr	r0, [pc, #24]	@ (801030c <MX_USB_HOST_Init+0x44>)
 80102f4:	f7fb ffdb 	bl	800c2ae <USBH_Start>
 80102f8:	4603      	mov	r3, r0
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d001      	beq.n	8010302 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80102fe:	f7f2 ff4d 	bl	800319c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8010302:	bf00      	nop
 8010304:	bd80      	pop	{r7, pc}
 8010306:	bf00      	nop
 8010308:	08010315 	.word	0x08010315
 801030c:	20029e44 	.word	0x20029e44
 8010310:	20000014 	.word	0x20000014

08010314 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010314:	b480      	push	{r7}
 8010316:	b083      	sub	sp, #12
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
 801031c:	460b      	mov	r3, r1
 801031e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010320:	78fb      	ldrb	r3, [r7, #3]
 8010322:	3b01      	subs	r3, #1
 8010324:	2b04      	cmp	r3, #4
 8010326:	d819      	bhi.n	801035c <USBH_UserProcess+0x48>
 8010328:	a201      	add	r2, pc, #4	@ (adr r2, 8010330 <USBH_UserProcess+0x1c>)
 801032a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801032e:	bf00      	nop
 8010330:	0801035d 	.word	0x0801035d
 8010334:	0801034d 	.word	0x0801034d
 8010338:	0801035d 	.word	0x0801035d
 801033c:	08010355 	.word	0x08010355
 8010340:	08010345 	.word	0x08010345
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010344:	4b09      	ldr	r3, [pc, #36]	@ (801036c <USBH_UserProcess+0x58>)
 8010346:	2203      	movs	r2, #3
 8010348:	701a      	strb	r2, [r3, #0]
  break;
 801034a:	e008      	b.n	801035e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801034c:	4b07      	ldr	r3, [pc, #28]	@ (801036c <USBH_UserProcess+0x58>)
 801034e:	2202      	movs	r2, #2
 8010350:	701a      	strb	r2, [r3, #0]
  break;
 8010352:	e004      	b.n	801035e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010354:	4b05      	ldr	r3, [pc, #20]	@ (801036c <USBH_UserProcess+0x58>)
 8010356:	2201      	movs	r2, #1
 8010358:	701a      	strb	r2, [r3, #0]
  break;
 801035a:	e000      	b.n	801035e <USBH_UserProcess+0x4a>

  default:
  break;
 801035c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801035e:	bf00      	nop
 8010360:	370c      	adds	r7, #12
 8010362:	46bd      	mov	sp, r7
 8010364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010368:	4770      	bx	lr
 801036a:	bf00      	nop
 801036c:	2002a228 	.word	0x2002a228

08010370 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b08a      	sub	sp, #40	@ 0x28
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010378:	f107 0314 	add.w	r3, r7, #20
 801037c:	2200      	movs	r2, #0
 801037e:	601a      	str	r2, [r3, #0]
 8010380:	605a      	str	r2, [r3, #4]
 8010382:	609a      	str	r2, [r3, #8]
 8010384:	60da      	str	r2, [r3, #12]
 8010386:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	4a24      	ldr	r2, [pc, #144]	@ (8010420 <HAL_HCD_MspInit+0xb0>)
 801038e:	4293      	cmp	r3, r2
 8010390:	d141      	bne.n	8010416 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010392:	2300      	movs	r3, #0
 8010394:	613b      	str	r3, [r7, #16]
 8010396:	4b23      	ldr	r3, [pc, #140]	@ (8010424 <HAL_HCD_MspInit+0xb4>)
 8010398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801039a:	4a22      	ldr	r2, [pc, #136]	@ (8010424 <HAL_HCD_MspInit+0xb4>)
 801039c:	f043 0302 	orr.w	r3, r3, #2
 80103a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80103a2:	4b20      	ldr	r3, [pc, #128]	@ (8010424 <HAL_HCD_MspInit+0xb4>)
 80103a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103a6:	f003 0302 	and.w	r3, r3, #2
 80103aa:	613b      	str	r3, [r7, #16]
 80103ac:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80103ae:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80103b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80103b4:	2302      	movs	r3, #2
 80103b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80103b8:	2300      	movs	r3, #0
 80103ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80103bc:	2300      	movs	r3, #0
 80103be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80103c0:	230c      	movs	r3, #12
 80103c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80103c4:	f107 0314 	add.w	r3, r7, #20
 80103c8:	4619      	mov	r1, r3
 80103ca:	4817      	ldr	r0, [pc, #92]	@ (8010428 <HAL_HCD_MspInit+0xb8>)
 80103cc:	f7f4 f998 	bl	8004700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80103d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80103d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80103d6:	2300      	movs	r3, #0
 80103d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80103da:	2300      	movs	r3, #0
 80103dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80103de:	f107 0314 	add.w	r3, r7, #20
 80103e2:	4619      	mov	r1, r3
 80103e4:	4810      	ldr	r0, [pc, #64]	@ (8010428 <HAL_HCD_MspInit+0xb8>)
 80103e6:	f7f4 f98b 	bl	8004700 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80103ea:	2300      	movs	r3, #0
 80103ec:	60fb      	str	r3, [r7, #12]
 80103ee:	4b0d      	ldr	r3, [pc, #52]	@ (8010424 <HAL_HCD_MspInit+0xb4>)
 80103f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103f2:	4a0c      	ldr	r2, [pc, #48]	@ (8010424 <HAL_HCD_MspInit+0xb4>)
 80103f4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80103f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80103fa:	4b0a      	ldr	r3, [pc, #40]	@ (8010424 <HAL_HCD_MspInit+0xb4>)
 80103fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010402:	60fb      	str	r3, [r7, #12]
 8010404:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8010406:	2200      	movs	r2, #0
 8010408:	2105      	movs	r1, #5
 801040a:	204d      	movs	r0, #77	@ 0x4d
 801040c:	f7f3 fbd6 	bl	8003bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8010410:	204d      	movs	r0, #77	@ 0x4d
 8010412:	f7f3 fbef 	bl	8003bf4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8010416:	bf00      	nop
 8010418:	3728      	adds	r7, #40	@ 0x28
 801041a:	46bd      	mov	sp, r7
 801041c:	bd80      	pop	{r7, pc}
 801041e:	bf00      	nop
 8010420:	40040000 	.word	0x40040000
 8010424:	40023800 	.word	0x40023800
 8010428:	40020400 	.word	0x40020400

0801042c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801042c:	b580      	push	{r7, lr}
 801042e:	b082      	sub	sp, #8
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801043a:	4618      	mov	r0, r3
 801043c:	f7fc fbe9 	bl	800cc12 <USBH_LL_IncTimer>
}
 8010440:	bf00      	nop
 8010442:	3708      	adds	r7, #8
 8010444:	46bd      	mov	sp, r7
 8010446:	bd80      	pop	{r7, pc}

08010448 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b082      	sub	sp, #8
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010456:	4618      	mov	r0, r3
 8010458:	f7fc fc2d 	bl	800ccb6 <USBH_LL_Connect>
}
 801045c:	bf00      	nop
 801045e:	3708      	adds	r7, #8
 8010460:	46bd      	mov	sp, r7
 8010462:	bd80      	pop	{r7, pc}

08010464 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b082      	sub	sp, #8
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010472:	4618      	mov	r0, r3
 8010474:	f7fc fc42 	bl	800ccfc <USBH_LL_Disconnect>
}
 8010478:	bf00      	nop
 801047a:	3708      	adds	r7, #8
 801047c:	46bd      	mov	sp, r7
 801047e:	bd80      	pop	{r7, pc}

08010480 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b082      	sub	sp, #8
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
 8010488:	460b      	mov	r3, r1
 801048a:	70fb      	strb	r3, [r7, #3]
 801048c:	4613      	mov	r3, r2
 801048e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010496:	4618      	mov	r0, r3
 8010498:	f7fc fc77 	bl	800cd8a <USBH_LL_NotifyURBChange>
#endif
}
 801049c:	bf00      	nop
 801049e:	3708      	adds	r7, #8
 80104a0:	46bd      	mov	sp, r7
 80104a2:	bd80      	pop	{r7, pc}

080104a4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b082      	sub	sp, #8
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80104b2:	4618      	mov	r0, r3
 80104b4:	f7fc fbd7 	bl	800cc66 <USBH_LL_PortEnabled>
}
 80104b8:	bf00      	nop
 80104ba:	3708      	adds	r7, #8
 80104bc:	46bd      	mov	sp, r7
 80104be:	bd80      	pop	{r7, pc}

080104c0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b082      	sub	sp, #8
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80104ce:	4618      	mov	r0, r3
 80104d0:	f7fc fbe3 	bl	800cc9a <USBH_LL_PortDisabled>
}
 80104d4:	bf00      	nop
 80104d6:	3708      	adds	r7, #8
 80104d8:	46bd      	mov	sp, r7
 80104da:	bd80      	pop	{r7, pc}

080104dc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b082      	sub	sp, #8
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d132      	bne.n	8010554 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 80104ee:	4a1c      	ldr	r2, [pc, #112]	@ (8010560 <USBH_LL_Init+0x84>)
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_HS;
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	4a19      	ldr	r2, [pc, #100]	@ (8010560 <USBH_LL_Init+0x84>)
 80104fa:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80104fe:	4b18      	ldr	r3, [pc, #96]	@ (8010560 <USBH_LL_Init+0x84>)
 8010500:	4a18      	ldr	r2, [pc, #96]	@ (8010564 <USBH_LL_Init+0x88>)
 8010502:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8010504:	4b16      	ldr	r3, [pc, #88]	@ (8010560 <USBH_LL_Init+0x84>)
 8010506:	220c      	movs	r2, #12
 8010508:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 801050a:	4b15      	ldr	r3, [pc, #84]	@ (8010560 <USBH_LL_Init+0x84>)
 801050c:	2201      	movs	r2, #1
 801050e:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8010510:	4b13      	ldr	r3, [pc, #76]	@ (8010560 <USBH_LL_Init+0x84>)
 8010512:	2200      	movs	r2, #0
 8010514:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8010516:	4b12      	ldr	r3, [pc, #72]	@ (8010560 <USBH_LL_Init+0x84>)
 8010518:	2202      	movs	r2, #2
 801051a:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801051c:	4b10      	ldr	r3, [pc, #64]	@ (8010560 <USBH_LL_Init+0x84>)
 801051e:	2200      	movs	r2, #0
 8010520:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8010522:	4b0f      	ldr	r3, [pc, #60]	@ (8010560 <USBH_LL_Init+0x84>)
 8010524:	2200      	movs	r2, #0
 8010526:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8010528:	4b0d      	ldr	r3, [pc, #52]	@ (8010560 <USBH_LL_Init+0x84>)
 801052a:	2200      	movs	r2, #0
 801052c:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801052e:	4b0c      	ldr	r3, [pc, #48]	@ (8010560 <USBH_LL_Init+0x84>)
 8010530:	2200      	movs	r2, #0
 8010532:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8010534:	480a      	ldr	r0, [pc, #40]	@ (8010560 <USBH_LL_Init+0x84>)
 8010536:	f7f4 faa8 	bl	8004a8a <HAL_HCD_Init>
 801053a:	4603      	mov	r3, r0
 801053c:	2b00      	cmp	r3, #0
 801053e:	d001      	beq.n	8010544 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 8010540:	f7f2 fe2c 	bl	800319c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8010544:	4806      	ldr	r0, [pc, #24]	@ (8010560 <USBH_LL_Init+0x84>)
 8010546:	f7f4 ff09 	bl	800535c <HAL_HCD_GetCurrentFrame>
 801054a:	4603      	mov	r3, r0
 801054c:	4619      	mov	r1, r3
 801054e:	6878      	ldr	r0, [r7, #4]
 8010550:	f7fc fb50 	bl	800cbf4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010554:	2300      	movs	r3, #0
}
 8010556:	4618      	mov	r0, r3
 8010558:	3708      	adds	r7, #8
 801055a:	46bd      	mov	sp, r7
 801055c:	bd80      	pop	{r7, pc}
 801055e:	bf00      	nop
 8010560:	2002a22c 	.word	0x2002a22c
 8010564:	40040000 	.word	0x40040000

08010568 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b084      	sub	sp, #16
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010570:	2300      	movs	r3, #0
 8010572:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010574:	2300      	movs	r3, #0
 8010576:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801057e:	4618      	mov	r0, r3
 8010580:	f7f4 fe74 	bl	800526c <HAL_HCD_Start>
 8010584:	4603      	mov	r3, r0
 8010586:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010588:	7bfb      	ldrb	r3, [r7, #15]
 801058a:	4618      	mov	r0, r3
 801058c:	f000 f95e 	bl	801084c <USBH_Get_USB_Status>
 8010590:	4603      	mov	r3, r0
 8010592:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010594:	7bbb      	ldrb	r3, [r7, #14]
}
 8010596:	4618      	mov	r0, r3
 8010598:	3710      	adds	r7, #16
 801059a:	46bd      	mov	sp, r7
 801059c:	bd80      	pop	{r7, pc}

0801059e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801059e:	b580      	push	{r7, lr}
 80105a0:	b084      	sub	sp, #16
 80105a2:	af00      	add	r7, sp, #0
 80105a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105a6:	2300      	movs	r3, #0
 80105a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80105aa:	2300      	movs	r3, #0
 80105ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80105b4:	4618      	mov	r0, r3
 80105b6:	f7f4 fe7c 	bl	80052b2 <HAL_HCD_Stop>
 80105ba:	4603      	mov	r3, r0
 80105bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80105be:	7bfb      	ldrb	r3, [r7, #15]
 80105c0:	4618      	mov	r0, r3
 80105c2:	f000 f943 	bl	801084c <USBH_Get_USB_Status>
 80105c6:	4603      	mov	r3, r0
 80105c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80105cc:	4618      	mov	r0, r3
 80105ce:	3710      	adds	r7, #16
 80105d0:	46bd      	mov	sp, r7
 80105d2:	bd80      	pop	{r7, pc}

080105d4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b084      	sub	sp, #16
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80105dc:	2301      	movs	r3, #1
 80105de:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80105e6:	4618      	mov	r0, r3
 80105e8:	f7f4 fec6 	bl	8005378 <HAL_HCD_GetCurrentSpeed>
 80105ec:	4603      	mov	r3, r0
 80105ee:	2b02      	cmp	r3, #2
 80105f0:	d00c      	beq.n	801060c <USBH_LL_GetSpeed+0x38>
 80105f2:	2b02      	cmp	r3, #2
 80105f4:	d80d      	bhi.n	8010612 <USBH_LL_GetSpeed+0x3e>
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d002      	beq.n	8010600 <USBH_LL_GetSpeed+0x2c>
 80105fa:	2b01      	cmp	r3, #1
 80105fc:	d003      	beq.n	8010606 <USBH_LL_GetSpeed+0x32>
 80105fe:	e008      	b.n	8010612 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010600:	2300      	movs	r3, #0
 8010602:	73fb      	strb	r3, [r7, #15]
    break;
 8010604:	e008      	b.n	8010618 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8010606:	2301      	movs	r3, #1
 8010608:	73fb      	strb	r3, [r7, #15]
    break;
 801060a:	e005      	b.n	8010618 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 801060c:	2302      	movs	r3, #2
 801060e:	73fb      	strb	r3, [r7, #15]
    break;
 8010610:	e002      	b.n	8010618 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8010612:	2301      	movs	r3, #1
 8010614:	73fb      	strb	r3, [r7, #15]
    break;
 8010616:	bf00      	nop
  }
  return  speed;
 8010618:	7bfb      	ldrb	r3, [r7, #15]
}
 801061a:	4618      	mov	r0, r3
 801061c:	3710      	adds	r7, #16
 801061e:	46bd      	mov	sp, r7
 8010620:	bd80      	pop	{r7, pc}

08010622 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010622:	b580      	push	{r7, lr}
 8010624:	b084      	sub	sp, #16
 8010626:	af00      	add	r7, sp, #0
 8010628:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801062a:	2300      	movs	r3, #0
 801062c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801062e:	2300      	movs	r3, #0
 8010630:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010638:	4618      	mov	r0, r3
 801063a:	f7f4 fe57 	bl	80052ec <HAL_HCD_ResetPort>
 801063e:	4603      	mov	r3, r0
 8010640:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010642:	7bfb      	ldrb	r3, [r7, #15]
 8010644:	4618      	mov	r0, r3
 8010646:	f000 f901 	bl	801084c <USBH_Get_USB_Status>
 801064a:	4603      	mov	r3, r0
 801064c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801064e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010650:	4618      	mov	r0, r3
 8010652:	3710      	adds	r7, #16
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}

08010658 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b082      	sub	sp, #8
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
 8010660:	460b      	mov	r3, r1
 8010662:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801066a:	78fa      	ldrb	r2, [r7, #3]
 801066c:	4611      	mov	r1, r2
 801066e:	4618      	mov	r0, r3
 8010670:	f7f4 fe5f 	bl	8005332 <HAL_HCD_HC_GetXferCount>
 8010674:	4603      	mov	r3, r0
}
 8010676:	4618      	mov	r0, r3
 8010678:	3708      	adds	r7, #8
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}

0801067e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801067e:	b590      	push	{r4, r7, lr}
 8010680:	b089      	sub	sp, #36	@ 0x24
 8010682:	af04      	add	r7, sp, #16
 8010684:	6078      	str	r0, [r7, #4]
 8010686:	4608      	mov	r0, r1
 8010688:	4611      	mov	r1, r2
 801068a:	461a      	mov	r2, r3
 801068c:	4603      	mov	r3, r0
 801068e:	70fb      	strb	r3, [r7, #3]
 8010690:	460b      	mov	r3, r1
 8010692:	70bb      	strb	r3, [r7, #2]
 8010694:	4613      	mov	r3, r2
 8010696:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010698:	2300      	movs	r3, #0
 801069a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801069c:	2300      	movs	r3, #0
 801069e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80106a6:	787c      	ldrb	r4, [r7, #1]
 80106a8:	78ba      	ldrb	r2, [r7, #2]
 80106aa:	78f9      	ldrb	r1, [r7, #3]
 80106ac:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80106ae:	9302      	str	r3, [sp, #8]
 80106b0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80106b4:	9301      	str	r3, [sp, #4]
 80106b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80106ba:	9300      	str	r3, [sp, #0]
 80106bc:	4623      	mov	r3, r4
 80106be:	f7f4 fa4b 	bl	8004b58 <HAL_HCD_HC_Init>
 80106c2:	4603      	mov	r3, r0
 80106c4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80106c6:	7bfb      	ldrb	r3, [r7, #15]
 80106c8:	4618      	mov	r0, r3
 80106ca:	f000 f8bf 	bl	801084c <USBH_Get_USB_Status>
 80106ce:	4603      	mov	r3, r0
 80106d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80106d4:	4618      	mov	r0, r3
 80106d6:	3714      	adds	r7, #20
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd90      	pop	{r4, r7, pc}

080106dc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b084      	sub	sp, #16
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
 80106e4:	460b      	mov	r3, r1
 80106e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106e8:	2300      	movs	r3, #0
 80106ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80106ec:	2300      	movs	r3, #0
 80106ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80106f6:	78fa      	ldrb	r2, [r7, #3]
 80106f8:	4611      	mov	r1, r2
 80106fa:	4618      	mov	r0, r3
 80106fc:	f7f4 fae4 	bl	8004cc8 <HAL_HCD_HC_Halt>
 8010700:	4603      	mov	r3, r0
 8010702:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010704:	7bfb      	ldrb	r3, [r7, #15]
 8010706:	4618      	mov	r0, r3
 8010708:	f000 f8a0 	bl	801084c <USBH_Get_USB_Status>
 801070c:	4603      	mov	r3, r0
 801070e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010710:	7bbb      	ldrb	r3, [r7, #14]
}
 8010712:	4618      	mov	r0, r3
 8010714:	3710      	adds	r7, #16
 8010716:	46bd      	mov	sp, r7
 8010718:	bd80      	pop	{r7, pc}

0801071a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801071a:	b590      	push	{r4, r7, lr}
 801071c:	b089      	sub	sp, #36	@ 0x24
 801071e:	af04      	add	r7, sp, #16
 8010720:	6078      	str	r0, [r7, #4]
 8010722:	4608      	mov	r0, r1
 8010724:	4611      	mov	r1, r2
 8010726:	461a      	mov	r2, r3
 8010728:	4603      	mov	r3, r0
 801072a:	70fb      	strb	r3, [r7, #3]
 801072c:	460b      	mov	r3, r1
 801072e:	70bb      	strb	r3, [r7, #2]
 8010730:	4613      	mov	r3, r2
 8010732:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010734:	2300      	movs	r3, #0
 8010736:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010738:	2300      	movs	r3, #0
 801073a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8010742:	787c      	ldrb	r4, [r7, #1]
 8010744:	78ba      	ldrb	r2, [r7, #2]
 8010746:	78f9      	ldrb	r1, [r7, #3]
 8010748:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801074c:	9303      	str	r3, [sp, #12]
 801074e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010750:	9302      	str	r3, [sp, #8]
 8010752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010754:	9301      	str	r3, [sp, #4]
 8010756:	f897 3020 	ldrb.w	r3, [r7, #32]
 801075a:	9300      	str	r3, [sp, #0]
 801075c:	4623      	mov	r3, r4
 801075e:	f7f4 fad7 	bl	8004d10 <HAL_HCD_HC_SubmitRequest>
 8010762:	4603      	mov	r3, r0
 8010764:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8010766:	7bfb      	ldrb	r3, [r7, #15]
 8010768:	4618      	mov	r0, r3
 801076a:	f000 f86f 	bl	801084c <USBH_Get_USB_Status>
 801076e:	4603      	mov	r3, r0
 8010770:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010772:	7bbb      	ldrb	r3, [r7, #14]
}
 8010774:	4618      	mov	r0, r3
 8010776:	3714      	adds	r7, #20
 8010778:	46bd      	mov	sp, r7
 801077a:	bd90      	pop	{r4, r7, pc}

0801077c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b082      	sub	sp, #8
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
 8010784:	460b      	mov	r3, r1
 8010786:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801078e:	78fa      	ldrb	r2, [r7, #3]
 8010790:	4611      	mov	r1, r2
 8010792:	4618      	mov	r0, r3
 8010794:	f7f4 fdb8 	bl	8005308 <HAL_HCD_HC_GetURBState>
 8010798:	4603      	mov	r3, r0
}
 801079a:	4618      	mov	r0, r3
 801079c:	3708      	adds	r7, #8
 801079e:	46bd      	mov	sp, r7
 80107a0:	bd80      	pop	{r7, pc}

080107a2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80107a2:	b580      	push	{r7, lr}
 80107a4:	b082      	sub	sp, #8
 80107a6:	af00      	add	r7, sp, #0
 80107a8:	6078      	str	r0, [r7, #4]
 80107aa:	460b      	mov	r3, r1
 80107ac:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d103      	bne.n	80107c0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 80107b8:	78fb      	ldrb	r3, [r7, #3]
 80107ba:	4618      	mov	r0, r3
 80107bc:	f000 f872 	bl	80108a4 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80107c0:	20c8      	movs	r0, #200	@ 0xc8
 80107c2:	f7f3 f91f 	bl	8003a04 <HAL_Delay>
  return USBH_OK;
 80107c6:	2300      	movs	r3, #0
}
 80107c8:	4618      	mov	r0, r3
 80107ca:	3708      	adds	r7, #8
 80107cc:	46bd      	mov	sp, r7
 80107ce:	bd80      	pop	{r7, pc}

080107d0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80107d0:	b480      	push	{r7}
 80107d2:	b085      	sub	sp, #20
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
 80107d8:	460b      	mov	r3, r1
 80107da:	70fb      	strb	r3, [r7, #3]
 80107dc:	4613      	mov	r3, r2
 80107de:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80107e6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80107e8:	78fa      	ldrb	r2, [r7, #3]
 80107ea:	68f9      	ldr	r1, [r7, #12]
 80107ec:	4613      	mov	r3, r2
 80107ee:	011b      	lsls	r3, r3, #4
 80107f0:	1a9b      	subs	r3, r3, r2
 80107f2:	009b      	lsls	r3, r3, #2
 80107f4:	440b      	add	r3, r1
 80107f6:	3317      	adds	r3, #23
 80107f8:	781b      	ldrb	r3, [r3, #0]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d00a      	beq.n	8010814 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80107fe:	78fa      	ldrb	r2, [r7, #3]
 8010800:	68f9      	ldr	r1, [r7, #12]
 8010802:	4613      	mov	r3, r2
 8010804:	011b      	lsls	r3, r3, #4
 8010806:	1a9b      	subs	r3, r3, r2
 8010808:	009b      	lsls	r3, r3, #2
 801080a:	440b      	add	r3, r1
 801080c:	333c      	adds	r3, #60	@ 0x3c
 801080e:	78ba      	ldrb	r2, [r7, #2]
 8010810:	701a      	strb	r2, [r3, #0]
 8010812:	e009      	b.n	8010828 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010814:	78fa      	ldrb	r2, [r7, #3]
 8010816:	68f9      	ldr	r1, [r7, #12]
 8010818:	4613      	mov	r3, r2
 801081a:	011b      	lsls	r3, r3, #4
 801081c:	1a9b      	subs	r3, r3, r2
 801081e:	009b      	lsls	r3, r3, #2
 8010820:	440b      	add	r3, r1
 8010822:	333d      	adds	r3, #61	@ 0x3d
 8010824:	78ba      	ldrb	r2, [r7, #2]
 8010826:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010828:	2300      	movs	r3, #0
}
 801082a:	4618      	mov	r0, r3
 801082c:	3714      	adds	r7, #20
 801082e:	46bd      	mov	sp, r7
 8010830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010834:	4770      	bx	lr

08010836 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010836:	b580      	push	{r7, lr}
 8010838:	b082      	sub	sp, #8
 801083a:	af00      	add	r7, sp, #0
 801083c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801083e:	6878      	ldr	r0, [r7, #4]
 8010840:	f7f3 f8e0 	bl	8003a04 <HAL_Delay>
}
 8010844:	bf00      	nop
 8010846:	3708      	adds	r7, #8
 8010848:	46bd      	mov	sp, r7
 801084a:	bd80      	pop	{r7, pc}

0801084c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801084c:	b480      	push	{r7}
 801084e:	b085      	sub	sp, #20
 8010850:	af00      	add	r7, sp, #0
 8010852:	4603      	mov	r3, r0
 8010854:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010856:	2300      	movs	r3, #0
 8010858:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801085a:	79fb      	ldrb	r3, [r7, #7]
 801085c:	2b03      	cmp	r3, #3
 801085e:	d817      	bhi.n	8010890 <USBH_Get_USB_Status+0x44>
 8010860:	a201      	add	r2, pc, #4	@ (adr r2, 8010868 <USBH_Get_USB_Status+0x1c>)
 8010862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010866:	bf00      	nop
 8010868:	08010879 	.word	0x08010879
 801086c:	0801087f 	.word	0x0801087f
 8010870:	08010885 	.word	0x08010885
 8010874:	0801088b 	.word	0x0801088b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010878:	2300      	movs	r3, #0
 801087a:	73fb      	strb	r3, [r7, #15]
    break;
 801087c:	e00b      	b.n	8010896 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801087e:	2302      	movs	r3, #2
 8010880:	73fb      	strb	r3, [r7, #15]
    break;
 8010882:	e008      	b.n	8010896 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010884:	2301      	movs	r3, #1
 8010886:	73fb      	strb	r3, [r7, #15]
    break;
 8010888:	e005      	b.n	8010896 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801088a:	2302      	movs	r3, #2
 801088c:	73fb      	strb	r3, [r7, #15]
    break;
 801088e:	e002      	b.n	8010896 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010890:	2302      	movs	r3, #2
 8010892:	73fb      	strb	r3, [r7, #15]
    break;
 8010894:	bf00      	nop
  }
  return usb_status;
 8010896:	7bfb      	ldrb	r3, [r7, #15]
}
 8010898:	4618      	mov	r0, r3
 801089a:	3714      	adds	r7, #20
 801089c:	46bd      	mov	sp, r7
 801089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a2:	4770      	bx	lr

080108a4 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b084      	sub	sp, #16
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	4603      	mov	r3, r0
 80108ac:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80108ae:	79fb      	ldrb	r3, [r7, #7]
 80108b0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 80108b2:	79fb      	ldrb	r3, [r7, #7]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d102      	bne.n	80108be <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80108b8:	2301      	movs	r3, #1
 80108ba:	73fb      	strb	r3, [r7, #15]
 80108bc:	e001      	b.n	80108c2 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80108be:	2300      	movs	r3, #0
 80108c0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 80108c2:	7bfb      	ldrb	r3, [r7, #15]
 80108c4:	461a      	mov	r2, r3
 80108c6:	2110      	movs	r1, #16
 80108c8:	4803      	ldr	r0, [pc, #12]	@ (80108d8 <MX_DriverVbusHS+0x34>)
 80108ca:	f7f4 f8c5 	bl	8004a58 <HAL_GPIO_WritePin>
}
 80108ce:	bf00      	nop
 80108d0:	3710      	adds	r7, #16
 80108d2:	46bd      	mov	sp, r7
 80108d4:	bd80      	pop	{r7, pc}
 80108d6:	bf00      	nop
 80108d8:	40020800 	.word	0x40020800

080108dc <malloc>:
 80108dc:	4b02      	ldr	r3, [pc, #8]	@ (80108e8 <malloc+0xc>)
 80108de:	4601      	mov	r1, r0
 80108e0:	6818      	ldr	r0, [r3, #0]
 80108e2:	f000 b82d 	b.w	8010940 <_malloc_r>
 80108e6:	bf00      	nop
 80108e8:	20000044 	.word	0x20000044

080108ec <free>:
 80108ec:	4b02      	ldr	r3, [pc, #8]	@ (80108f8 <free+0xc>)
 80108ee:	4601      	mov	r1, r0
 80108f0:	6818      	ldr	r0, [r3, #0]
 80108f2:	f001 be09 	b.w	8012508 <_free_r>
 80108f6:	bf00      	nop
 80108f8:	20000044 	.word	0x20000044

080108fc <sbrk_aligned>:
 80108fc:	b570      	push	{r4, r5, r6, lr}
 80108fe:	4e0f      	ldr	r6, [pc, #60]	@ (801093c <sbrk_aligned+0x40>)
 8010900:	460c      	mov	r4, r1
 8010902:	6831      	ldr	r1, [r6, #0]
 8010904:	4605      	mov	r5, r0
 8010906:	b911      	cbnz	r1, 801090e <sbrk_aligned+0x12>
 8010908:	f000 ff46 	bl	8011798 <_sbrk_r>
 801090c:	6030      	str	r0, [r6, #0]
 801090e:	4621      	mov	r1, r4
 8010910:	4628      	mov	r0, r5
 8010912:	f000 ff41 	bl	8011798 <_sbrk_r>
 8010916:	1c43      	adds	r3, r0, #1
 8010918:	d103      	bne.n	8010922 <sbrk_aligned+0x26>
 801091a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801091e:	4620      	mov	r0, r4
 8010920:	bd70      	pop	{r4, r5, r6, pc}
 8010922:	1cc4      	adds	r4, r0, #3
 8010924:	f024 0403 	bic.w	r4, r4, #3
 8010928:	42a0      	cmp	r0, r4
 801092a:	d0f8      	beq.n	801091e <sbrk_aligned+0x22>
 801092c:	1a21      	subs	r1, r4, r0
 801092e:	4628      	mov	r0, r5
 8010930:	f000 ff32 	bl	8011798 <_sbrk_r>
 8010934:	3001      	adds	r0, #1
 8010936:	d1f2      	bne.n	801091e <sbrk_aligned+0x22>
 8010938:	e7ef      	b.n	801091a <sbrk_aligned+0x1e>
 801093a:	bf00      	nop
 801093c:	2002a60c 	.word	0x2002a60c

08010940 <_malloc_r>:
 8010940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010944:	1ccd      	adds	r5, r1, #3
 8010946:	f025 0503 	bic.w	r5, r5, #3
 801094a:	3508      	adds	r5, #8
 801094c:	2d0c      	cmp	r5, #12
 801094e:	bf38      	it	cc
 8010950:	250c      	movcc	r5, #12
 8010952:	2d00      	cmp	r5, #0
 8010954:	4606      	mov	r6, r0
 8010956:	db01      	blt.n	801095c <_malloc_r+0x1c>
 8010958:	42a9      	cmp	r1, r5
 801095a:	d904      	bls.n	8010966 <_malloc_r+0x26>
 801095c:	230c      	movs	r3, #12
 801095e:	6033      	str	r3, [r6, #0]
 8010960:	2000      	movs	r0, #0
 8010962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010966:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010a3c <_malloc_r+0xfc>
 801096a:	f000 f869 	bl	8010a40 <__malloc_lock>
 801096e:	f8d8 3000 	ldr.w	r3, [r8]
 8010972:	461c      	mov	r4, r3
 8010974:	bb44      	cbnz	r4, 80109c8 <_malloc_r+0x88>
 8010976:	4629      	mov	r1, r5
 8010978:	4630      	mov	r0, r6
 801097a:	f7ff ffbf 	bl	80108fc <sbrk_aligned>
 801097e:	1c43      	adds	r3, r0, #1
 8010980:	4604      	mov	r4, r0
 8010982:	d158      	bne.n	8010a36 <_malloc_r+0xf6>
 8010984:	f8d8 4000 	ldr.w	r4, [r8]
 8010988:	4627      	mov	r7, r4
 801098a:	2f00      	cmp	r7, #0
 801098c:	d143      	bne.n	8010a16 <_malloc_r+0xd6>
 801098e:	2c00      	cmp	r4, #0
 8010990:	d04b      	beq.n	8010a2a <_malloc_r+0xea>
 8010992:	6823      	ldr	r3, [r4, #0]
 8010994:	4639      	mov	r1, r7
 8010996:	4630      	mov	r0, r6
 8010998:	eb04 0903 	add.w	r9, r4, r3
 801099c:	f000 fefc 	bl	8011798 <_sbrk_r>
 80109a0:	4581      	cmp	r9, r0
 80109a2:	d142      	bne.n	8010a2a <_malloc_r+0xea>
 80109a4:	6821      	ldr	r1, [r4, #0]
 80109a6:	1a6d      	subs	r5, r5, r1
 80109a8:	4629      	mov	r1, r5
 80109aa:	4630      	mov	r0, r6
 80109ac:	f7ff ffa6 	bl	80108fc <sbrk_aligned>
 80109b0:	3001      	adds	r0, #1
 80109b2:	d03a      	beq.n	8010a2a <_malloc_r+0xea>
 80109b4:	6823      	ldr	r3, [r4, #0]
 80109b6:	442b      	add	r3, r5
 80109b8:	6023      	str	r3, [r4, #0]
 80109ba:	f8d8 3000 	ldr.w	r3, [r8]
 80109be:	685a      	ldr	r2, [r3, #4]
 80109c0:	bb62      	cbnz	r2, 8010a1c <_malloc_r+0xdc>
 80109c2:	f8c8 7000 	str.w	r7, [r8]
 80109c6:	e00f      	b.n	80109e8 <_malloc_r+0xa8>
 80109c8:	6822      	ldr	r2, [r4, #0]
 80109ca:	1b52      	subs	r2, r2, r5
 80109cc:	d420      	bmi.n	8010a10 <_malloc_r+0xd0>
 80109ce:	2a0b      	cmp	r2, #11
 80109d0:	d917      	bls.n	8010a02 <_malloc_r+0xc2>
 80109d2:	1961      	adds	r1, r4, r5
 80109d4:	42a3      	cmp	r3, r4
 80109d6:	6025      	str	r5, [r4, #0]
 80109d8:	bf18      	it	ne
 80109da:	6059      	strne	r1, [r3, #4]
 80109dc:	6863      	ldr	r3, [r4, #4]
 80109de:	bf08      	it	eq
 80109e0:	f8c8 1000 	streq.w	r1, [r8]
 80109e4:	5162      	str	r2, [r4, r5]
 80109e6:	604b      	str	r3, [r1, #4]
 80109e8:	4630      	mov	r0, r6
 80109ea:	f000 f82f 	bl	8010a4c <__malloc_unlock>
 80109ee:	f104 000b 	add.w	r0, r4, #11
 80109f2:	1d23      	adds	r3, r4, #4
 80109f4:	f020 0007 	bic.w	r0, r0, #7
 80109f8:	1ac2      	subs	r2, r0, r3
 80109fa:	bf1c      	itt	ne
 80109fc:	1a1b      	subne	r3, r3, r0
 80109fe:	50a3      	strne	r3, [r4, r2]
 8010a00:	e7af      	b.n	8010962 <_malloc_r+0x22>
 8010a02:	6862      	ldr	r2, [r4, #4]
 8010a04:	42a3      	cmp	r3, r4
 8010a06:	bf0c      	ite	eq
 8010a08:	f8c8 2000 	streq.w	r2, [r8]
 8010a0c:	605a      	strne	r2, [r3, #4]
 8010a0e:	e7eb      	b.n	80109e8 <_malloc_r+0xa8>
 8010a10:	4623      	mov	r3, r4
 8010a12:	6864      	ldr	r4, [r4, #4]
 8010a14:	e7ae      	b.n	8010974 <_malloc_r+0x34>
 8010a16:	463c      	mov	r4, r7
 8010a18:	687f      	ldr	r7, [r7, #4]
 8010a1a:	e7b6      	b.n	801098a <_malloc_r+0x4a>
 8010a1c:	461a      	mov	r2, r3
 8010a1e:	685b      	ldr	r3, [r3, #4]
 8010a20:	42a3      	cmp	r3, r4
 8010a22:	d1fb      	bne.n	8010a1c <_malloc_r+0xdc>
 8010a24:	2300      	movs	r3, #0
 8010a26:	6053      	str	r3, [r2, #4]
 8010a28:	e7de      	b.n	80109e8 <_malloc_r+0xa8>
 8010a2a:	230c      	movs	r3, #12
 8010a2c:	6033      	str	r3, [r6, #0]
 8010a2e:	4630      	mov	r0, r6
 8010a30:	f000 f80c 	bl	8010a4c <__malloc_unlock>
 8010a34:	e794      	b.n	8010960 <_malloc_r+0x20>
 8010a36:	6005      	str	r5, [r0, #0]
 8010a38:	e7d6      	b.n	80109e8 <_malloc_r+0xa8>
 8010a3a:	bf00      	nop
 8010a3c:	2002a610 	.word	0x2002a610

08010a40 <__malloc_lock>:
 8010a40:	4801      	ldr	r0, [pc, #4]	@ (8010a48 <__malloc_lock+0x8>)
 8010a42:	f000 bef6 	b.w	8011832 <__retarget_lock_acquire_recursive>
 8010a46:	bf00      	nop
 8010a48:	2002a754 	.word	0x2002a754

08010a4c <__malloc_unlock>:
 8010a4c:	4801      	ldr	r0, [pc, #4]	@ (8010a54 <__malloc_unlock+0x8>)
 8010a4e:	f000 bef1 	b.w	8011834 <__retarget_lock_release_recursive>
 8010a52:	bf00      	nop
 8010a54:	2002a754 	.word	0x2002a754

08010a58 <__cvt>:
 8010a58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010a5c:	ec57 6b10 	vmov	r6, r7, d0
 8010a60:	2f00      	cmp	r7, #0
 8010a62:	460c      	mov	r4, r1
 8010a64:	4619      	mov	r1, r3
 8010a66:	463b      	mov	r3, r7
 8010a68:	bfbb      	ittet	lt
 8010a6a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8010a6e:	461f      	movlt	r7, r3
 8010a70:	2300      	movge	r3, #0
 8010a72:	232d      	movlt	r3, #45	@ 0x2d
 8010a74:	700b      	strb	r3, [r1, #0]
 8010a76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010a78:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010a7c:	4691      	mov	r9, r2
 8010a7e:	f023 0820 	bic.w	r8, r3, #32
 8010a82:	bfbc      	itt	lt
 8010a84:	4632      	movlt	r2, r6
 8010a86:	4616      	movlt	r6, r2
 8010a88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010a8c:	d005      	beq.n	8010a9a <__cvt+0x42>
 8010a8e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010a92:	d100      	bne.n	8010a96 <__cvt+0x3e>
 8010a94:	3401      	adds	r4, #1
 8010a96:	2102      	movs	r1, #2
 8010a98:	e000      	b.n	8010a9c <__cvt+0x44>
 8010a9a:	2103      	movs	r1, #3
 8010a9c:	ab03      	add	r3, sp, #12
 8010a9e:	9301      	str	r3, [sp, #4]
 8010aa0:	ab02      	add	r3, sp, #8
 8010aa2:	9300      	str	r3, [sp, #0]
 8010aa4:	ec47 6b10 	vmov	d0, r6, r7
 8010aa8:	4653      	mov	r3, sl
 8010aaa:	4622      	mov	r2, r4
 8010aac:	f000 ff5c 	bl	8011968 <_dtoa_r>
 8010ab0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8010ab4:	4605      	mov	r5, r0
 8010ab6:	d119      	bne.n	8010aec <__cvt+0x94>
 8010ab8:	f019 0f01 	tst.w	r9, #1
 8010abc:	d00e      	beq.n	8010adc <__cvt+0x84>
 8010abe:	eb00 0904 	add.w	r9, r0, r4
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	4630      	mov	r0, r6
 8010ac8:	4639      	mov	r1, r7
 8010aca:	f7f0 f80d 	bl	8000ae8 <__aeabi_dcmpeq>
 8010ace:	b108      	cbz	r0, 8010ad4 <__cvt+0x7c>
 8010ad0:	f8cd 900c 	str.w	r9, [sp, #12]
 8010ad4:	2230      	movs	r2, #48	@ 0x30
 8010ad6:	9b03      	ldr	r3, [sp, #12]
 8010ad8:	454b      	cmp	r3, r9
 8010ada:	d31e      	bcc.n	8010b1a <__cvt+0xc2>
 8010adc:	9b03      	ldr	r3, [sp, #12]
 8010ade:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010ae0:	1b5b      	subs	r3, r3, r5
 8010ae2:	4628      	mov	r0, r5
 8010ae4:	6013      	str	r3, [r2, #0]
 8010ae6:	b004      	add	sp, #16
 8010ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010aec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010af0:	eb00 0904 	add.w	r9, r0, r4
 8010af4:	d1e5      	bne.n	8010ac2 <__cvt+0x6a>
 8010af6:	7803      	ldrb	r3, [r0, #0]
 8010af8:	2b30      	cmp	r3, #48	@ 0x30
 8010afa:	d10a      	bne.n	8010b12 <__cvt+0xba>
 8010afc:	2200      	movs	r2, #0
 8010afe:	2300      	movs	r3, #0
 8010b00:	4630      	mov	r0, r6
 8010b02:	4639      	mov	r1, r7
 8010b04:	f7ef fff0 	bl	8000ae8 <__aeabi_dcmpeq>
 8010b08:	b918      	cbnz	r0, 8010b12 <__cvt+0xba>
 8010b0a:	f1c4 0401 	rsb	r4, r4, #1
 8010b0e:	f8ca 4000 	str.w	r4, [sl]
 8010b12:	f8da 3000 	ldr.w	r3, [sl]
 8010b16:	4499      	add	r9, r3
 8010b18:	e7d3      	b.n	8010ac2 <__cvt+0x6a>
 8010b1a:	1c59      	adds	r1, r3, #1
 8010b1c:	9103      	str	r1, [sp, #12]
 8010b1e:	701a      	strb	r2, [r3, #0]
 8010b20:	e7d9      	b.n	8010ad6 <__cvt+0x7e>

08010b22 <__exponent>:
 8010b22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b24:	2900      	cmp	r1, #0
 8010b26:	bfba      	itte	lt
 8010b28:	4249      	neglt	r1, r1
 8010b2a:	232d      	movlt	r3, #45	@ 0x2d
 8010b2c:	232b      	movge	r3, #43	@ 0x2b
 8010b2e:	2909      	cmp	r1, #9
 8010b30:	7002      	strb	r2, [r0, #0]
 8010b32:	7043      	strb	r3, [r0, #1]
 8010b34:	dd29      	ble.n	8010b8a <__exponent+0x68>
 8010b36:	f10d 0307 	add.w	r3, sp, #7
 8010b3a:	461d      	mov	r5, r3
 8010b3c:	270a      	movs	r7, #10
 8010b3e:	461a      	mov	r2, r3
 8010b40:	fbb1 f6f7 	udiv	r6, r1, r7
 8010b44:	fb07 1416 	mls	r4, r7, r6, r1
 8010b48:	3430      	adds	r4, #48	@ 0x30
 8010b4a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010b4e:	460c      	mov	r4, r1
 8010b50:	2c63      	cmp	r4, #99	@ 0x63
 8010b52:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8010b56:	4631      	mov	r1, r6
 8010b58:	dcf1      	bgt.n	8010b3e <__exponent+0x1c>
 8010b5a:	3130      	adds	r1, #48	@ 0x30
 8010b5c:	1e94      	subs	r4, r2, #2
 8010b5e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010b62:	1c41      	adds	r1, r0, #1
 8010b64:	4623      	mov	r3, r4
 8010b66:	42ab      	cmp	r3, r5
 8010b68:	d30a      	bcc.n	8010b80 <__exponent+0x5e>
 8010b6a:	f10d 0309 	add.w	r3, sp, #9
 8010b6e:	1a9b      	subs	r3, r3, r2
 8010b70:	42ac      	cmp	r4, r5
 8010b72:	bf88      	it	hi
 8010b74:	2300      	movhi	r3, #0
 8010b76:	3302      	adds	r3, #2
 8010b78:	4403      	add	r3, r0
 8010b7a:	1a18      	subs	r0, r3, r0
 8010b7c:	b003      	add	sp, #12
 8010b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b80:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010b84:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010b88:	e7ed      	b.n	8010b66 <__exponent+0x44>
 8010b8a:	2330      	movs	r3, #48	@ 0x30
 8010b8c:	3130      	adds	r1, #48	@ 0x30
 8010b8e:	7083      	strb	r3, [r0, #2]
 8010b90:	70c1      	strb	r1, [r0, #3]
 8010b92:	1d03      	adds	r3, r0, #4
 8010b94:	e7f1      	b.n	8010b7a <__exponent+0x58>
	...

08010b98 <_printf_float>:
 8010b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b9c:	b08d      	sub	sp, #52	@ 0x34
 8010b9e:	460c      	mov	r4, r1
 8010ba0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010ba4:	4616      	mov	r6, r2
 8010ba6:	461f      	mov	r7, r3
 8010ba8:	4605      	mov	r5, r0
 8010baa:	f000 fdbd 	bl	8011728 <_localeconv_r>
 8010bae:	6803      	ldr	r3, [r0, #0]
 8010bb0:	9304      	str	r3, [sp, #16]
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	f7ef fb6c 	bl	8000290 <strlen>
 8010bb8:	2300      	movs	r3, #0
 8010bba:	930a      	str	r3, [sp, #40]	@ 0x28
 8010bbc:	f8d8 3000 	ldr.w	r3, [r8]
 8010bc0:	9005      	str	r0, [sp, #20]
 8010bc2:	3307      	adds	r3, #7
 8010bc4:	f023 0307 	bic.w	r3, r3, #7
 8010bc8:	f103 0208 	add.w	r2, r3, #8
 8010bcc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010bd0:	f8d4 b000 	ldr.w	fp, [r4]
 8010bd4:	f8c8 2000 	str.w	r2, [r8]
 8010bd8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010bdc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8010be0:	9307      	str	r3, [sp, #28]
 8010be2:	f8cd 8018 	str.w	r8, [sp, #24]
 8010be6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8010bea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010bee:	4b9c      	ldr	r3, [pc, #624]	@ (8010e60 <_printf_float+0x2c8>)
 8010bf0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010bf4:	f7ef ffaa 	bl	8000b4c <__aeabi_dcmpun>
 8010bf8:	bb70      	cbnz	r0, 8010c58 <_printf_float+0xc0>
 8010bfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010bfe:	4b98      	ldr	r3, [pc, #608]	@ (8010e60 <_printf_float+0x2c8>)
 8010c00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010c04:	f7ef ff84 	bl	8000b10 <__aeabi_dcmple>
 8010c08:	bb30      	cbnz	r0, 8010c58 <_printf_float+0xc0>
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	4640      	mov	r0, r8
 8010c10:	4649      	mov	r1, r9
 8010c12:	f7ef ff73 	bl	8000afc <__aeabi_dcmplt>
 8010c16:	b110      	cbz	r0, 8010c1e <_printf_float+0x86>
 8010c18:	232d      	movs	r3, #45	@ 0x2d
 8010c1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010c1e:	4a91      	ldr	r2, [pc, #580]	@ (8010e64 <_printf_float+0x2cc>)
 8010c20:	4b91      	ldr	r3, [pc, #580]	@ (8010e68 <_printf_float+0x2d0>)
 8010c22:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010c26:	bf8c      	ite	hi
 8010c28:	4690      	movhi	r8, r2
 8010c2a:	4698      	movls	r8, r3
 8010c2c:	2303      	movs	r3, #3
 8010c2e:	6123      	str	r3, [r4, #16]
 8010c30:	f02b 0304 	bic.w	r3, fp, #4
 8010c34:	6023      	str	r3, [r4, #0]
 8010c36:	f04f 0900 	mov.w	r9, #0
 8010c3a:	9700      	str	r7, [sp, #0]
 8010c3c:	4633      	mov	r3, r6
 8010c3e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010c40:	4621      	mov	r1, r4
 8010c42:	4628      	mov	r0, r5
 8010c44:	f000 f9d2 	bl	8010fec <_printf_common>
 8010c48:	3001      	adds	r0, #1
 8010c4a:	f040 808d 	bne.w	8010d68 <_printf_float+0x1d0>
 8010c4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010c52:	b00d      	add	sp, #52	@ 0x34
 8010c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c58:	4642      	mov	r2, r8
 8010c5a:	464b      	mov	r3, r9
 8010c5c:	4640      	mov	r0, r8
 8010c5e:	4649      	mov	r1, r9
 8010c60:	f7ef ff74 	bl	8000b4c <__aeabi_dcmpun>
 8010c64:	b140      	cbz	r0, 8010c78 <_printf_float+0xe0>
 8010c66:	464b      	mov	r3, r9
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	bfbc      	itt	lt
 8010c6c:	232d      	movlt	r3, #45	@ 0x2d
 8010c6e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010c72:	4a7e      	ldr	r2, [pc, #504]	@ (8010e6c <_printf_float+0x2d4>)
 8010c74:	4b7e      	ldr	r3, [pc, #504]	@ (8010e70 <_printf_float+0x2d8>)
 8010c76:	e7d4      	b.n	8010c22 <_printf_float+0x8a>
 8010c78:	6863      	ldr	r3, [r4, #4]
 8010c7a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8010c7e:	9206      	str	r2, [sp, #24]
 8010c80:	1c5a      	adds	r2, r3, #1
 8010c82:	d13b      	bne.n	8010cfc <_printf_float+0x164>
 8010c84:	2306      	movs	r3, #6
 8010c86:	6063      	str	r3, [r4, #4]
 8010c88:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	6022      	str	r2, [r4, #0]
 8010c90:	9303      	str	r3, [sp, #12]
 8010c92:	ab0a      	add	r3, sp, #40	@ 0x28
 8010c94:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010c98:	ab09      	add	r3, sp, #36	@ 0x24
 8010c9a:	9300      	str	r3, [sp, #0]
 8010c9c:	6861      	ldr	r1, [r4, #4]
 8010c9e:	ec49 8b10 	vmov	d0, r8, r9
 8010ca2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010ca6:	4628      	mov	r0, r5
 8010ca8:	f7ff fed6 	bl	8010a58 <__cvt>
 8010cac:	9b06      	ldr	r3, [sp, #24]
 8010cae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010cb0:	2b47      	cmp	r3, #71	@ 0x47
 8010cb2:	4680      	mov	r8, r0
 8010cb4:	d129      	bne.n	8010d0a <_printf_float+0x172>
 8010cb6:	1cc8      	adds	r0, r1, #3
 8010cb8:	db02      	blt.n	8010cc0 <_printf_float+0x128>
 8010cba:	6863      	ldr	r3, [r4, #4]
 8010cbc:	4299      	cmp	r1, r3
 8010cbe:	dd41      	ble.n	8010d44 <_printf_float+0x1ac>
 8010cc0:	f1aa 0a02 	sub.w	sl, sl, #2
 8010cc4:	fa5f fa8a 	uxtb.w	sl, sl
 8010cc8:	3901      	subs	r1, #1
 8010cca:	4652      	mov	r2, sl
 8010ccc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010cd0:	9109      	str	r1, [sp, #36]	@ 0x24
 8010cd2:	f7ff ff26 	bl	8010b22 <__exponent>
 8010cd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010cd8:	1813      	adds	r3, r2, r0
 8010cda:	2a01      	cmp	r2, #1
 8010cdc:	4681      	mov	r9, r0
 8010cde:	6123      	str	r3, [r4, #16]
 8010ce0:	dc02      	bgt.n	8010ce8 <_printf_float+0x150>
 8010ce2:	6822      	ldr	r2, [r4, #0]
 8010ce4:	07d2      	lsls	r2, r2, #31
 8010ce6:	d501      	bpl.n	8010cec <_printf_float+0x154>
 8010ce8:	3301      	adds	r3, #1
 8010cea:	6123      	str	r3, [r4, #16]
 8010cec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d0a2      	beq.n	8010c3a <_printf_float+0xa2>
 8010cf4:	232d      	movs	r3, #45	@ 0x2d
 8010cf6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010cfa:	e79e      	b.n	8010c3a <_printf_float+0xa2>
 8010cfc:	9a06      	ldr	r2, [sp, #24]
 8010cfe:	2a47      	cmp	r2, #71	@ 0x47
 8010d00:	d1c2      	bne.n	8010c88 <_printf_float+0xf0>
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d1c0      	bne.n	8010c88 <_printf_float+0xf0>
 8010d06:	2301      	movs	r3, #1
 8010d08:	e7bd      	b.n	8010c86 <_printf_float+0xee>
 8010d0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010d0e:	d9db      	bls.n	8010cc8 <_printf_float+0x130>
 8010d10:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8010d14:	d118      	bne.n	8010d48 <_printf_float+0x1b0>
 8010d16:	2900      	cmp	r1, #0
 8010d18:	6863      	ldr	r3, [r4, #4]
 8010d1a:	dd0b      	ble.n	8010d34 <_printf_float+0x19c>
 8010d1c:	6121      	str	r1, [r4, #16]
 8010d1e:	b913      	cbnz	r3, 8010d26 <_printf_float+0x18e>
 8010d20:	6822      	ldr	r2, [r4, #0]
 8010d22:	07d0      	lsls	r0, r2, #31
 8010d24:	d502      	bpl.n	8010d2c <_printf_float+0x194>
 8010d26:	3301      	adds	r3, #1
 8010d28:	440b      	add	r3, r1
 8010d2a:	6123      	str	r3, [r4, #16]
 8010d2c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010d2e:	f04f 0900 	mov.w	r9, #0
 8010d32:	e7db      	b.n	8010cec <_printf_float+0x154>
 8010d34:	b913      	cbnz	r3, 8010d3c <_printf_float+0x1a4>
 8010d36:	6822      	ldr	r2, [r4, #0]
 8010d38:	07d2      	lsls	r2, r2, #31
 8010d3a:	d501      	bpl.n	8010d40 <_printf_float+0x1a8>
 8010d3c:	3302      	adds	r3, #2
 8010d3e:	e7f4      	b.n	8010d2a <_printf_float+0x192>
 8010d40:	2301      	movs	r3, #1
 8010d42:	e7f2      	b.n	8010d2a <_printf_float+0x192>
 8010d44:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8010d48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010d4a:	4299      	cmp	r1, r3
 8010d4c:	db05      	blt.n	8010d5a <_printf_float+0x1c2>
 8010d4e:	6823      	ldr	r3, [r4, #0]
 8010d50:	6121      	str	r1, [r4, #16]
 8010d52:	07d8      	lsls	r0, r3, #31
 8010d54:	d5ea      	bpl.n	8010d2c <_printf_float+0x194>
 8010d56:	1c4b      	adds	r3, r1, #1
 8010d58:	e7e7      	b.n	8010d2a <_printf_float+0x192>
 8010d5a:	2900      	cmp	r1, #0
 8010d5c:	bfd4      	ite	le
 8010d5e:	f1c1 0202 	rsble	r2, r1, #2
 8010d62:	2201      	movgt	r2, #1
 8010d64:	4413      	add	r3, r2
 8010d66:	e7e0      	b.n	8010d2a <_printf_float+0x192>
 8010d68:	6823      	ldr	r3, [r4, #0]
 8010d6a:	055a      	lsls	r2, r3, #21
 8010d6c:	d407      	bmi.n	8010d7e <_printf_float+0x1e6>
 8010d6e:	6923      	ldr	r3, [r4, #16]
 8010d70:	4642      	mov	r2, r8
 8010d72:	4631      	mov	r1, r6
 8010d74:	4628      	mov	r0, r5
 8010d76:	47b8      	blx	r7
 8010d78:	3001      	adds	r0, #1
 8010d7a:	d12b      	bne.n	8010dd4 <_printf_float+0x23c>
 8010d7c:	e767      	b.n	8010c4e <_printf_float+0xb6>
 8010d7e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010d82:	f240 80dd 	bls.w	8010f40 <_printf_float+0x3a8>
 8010d86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	2300      	movs	r3, #0
 8010d8e:	f7ef feab 	bl	8000ae8 <__aeabi_dcmpeq>
 8010d92:	2800      	cmp	r0, #0
 8010d94:	d033      	beq.n	8010dfe <_printf_float+0x266>
 8010d96:	4a37      	ldr	r2, [pc, #220]	@ (8010e74 <_printf_float+0x2dc>)
 8010d98:	2301      	movs	r3, #1
 8010d9a:	4631      	mov	r1, r6
 8010d9c:	4628      	mov	r0, r5
 8010d9e:	47b8      	blx	r7
 8010da0:	3001      	adds	r0, #1
 8010da2:	f43f af54 	beq.w	8010c4e <_printf_float+0xb6>
 8010da6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8010daa:	4543      	cmp	r3, r8
 8010dac:	db02      	blt.n	8010db4 <_printf_float+0x21c>
 8010dae:	6823      	ldr	r3, [r4, #0]
 8010db0:	07d8      	lsls	r0, r3, #31
 8010db2:	d50f      	bpl.n	8010dd4 <_printf_float+0x23c>
 8010db4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010db8:	4631      	mov	r1, r6
 8010dba:	4628      	mov	r0, r5
 8010dbc:	47b8      	blx	r7
 8010dbe:	3001      	adds	r0, #1
 8010dc0:	f43f af45 	beq.w	8010c4e <_printf_float+0xb6>
 8010dc4:	f04f 0900 	mov.w	r9, #0
 8010dc8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8010dcc:	f104 0a1a 	add.w	sl, r4, #26
 8010dd0:	45c8      	cmp	r8, r9
 8010dd2:	dc09      	bgt.n	8010de8 <_printf_float+0x250>
 8010dd4:	6823      	ldr	r3, [r4, #0]
 8010dd6:	079b      	lsls	r3, r3, #30
 8010dd8:	f100 8103 	bmi.w	8010fe2 <_printf_float+0x44a>
 8010ddc:	68e0      	ldr	r0, [r4, #12]
 8010dde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010de0:	4298      	cmp	r0, r3
 8010de2:	bfb8      	it	lt
 8010de4:	4618      	movlt	r0, r3
 8010de6:	e734      	b.n	8010c52 <_printf_float+0xba>
 8010de8:	2301      	movs	r3, #1
 8010dea:	4652      	mov	r2, sl
 8010dec:	4631      	mov	r1, r6
 8010dee:	4628      	mov	r0, r5
 8010df0:	47b8      	blx	r7
 8010df2:	3001      	adds	r0, #1
 8010df4:	f43f af2b 	beq.w	8010c4e <_printf_float+0xb6>
 8010df8:	f109 0901 	add.w	r9, r9, #1
 8010dfc:	e7e8      	b.n	8010dd0 <_printf_float+0x238>
 8010dfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	dc39      	bgt.n	8010e78 <_printf_float+0x2e0>
 8010e04:	4a1b      	ldr	r2, [pc, #108]	@ (8010e74 <_printf_float+0x2dc>)
 8010e06:	2301      	movs	r3, #1
 8010e08:	4631      	mov	r1, r6
 8010e0a:	4628      	mov	r0, r5
 8010e0c:	47b8      	blx	r7
 8010e0e:	3001      	adds	r0, #1
 8010e10:	f43f af1d 	beq.w	8010c4e <_printf_float+0xb6>
 8010e14:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010e18:	ea59 0303 	orrs.w	r3, r9, r3
 8010e1c:	d102      	bne.n	8010e24 <_printf_float+0x28c>
 8010e1e:	6823      	ldr	r3, [r4, #0]
 8010e20:	07d9      	lsls	r1, r3, #31
 8010e22:	d5d7      	bpl.n	8010dd4 <_printf_float+0x23c>
 8010e24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010e28:	4631      	mov	r1, r6
 8010e2a:	4628      	mov	r0, r5
 8010e2c:	47b8      	blx	r7
 8010e2e:	3001      	adds	r0, #1
 8010e30:	f43f af0d 	beq.w	8010c4e <_printf_float+0xb6>
 8010e34:	f04f 0a00 	mov.w	sl, #0
 8010e38:	f104 0b1a 	add.w	fp, r4, #26
 8010e3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e3e:	425b      	negs	r3, r3
 8010e40:	4553      	cmp	r3, sl
 8010e42:	dc01      	bgt.n	8010e48 <_printf_float+0x2b0>
 8010e44:	464b      	mov	r3, r9
 8010e46:	e793      	b.n	8010d70 <_printf_float+0x1d8>
 8010e48:	2301      	movs	r3, #1
 8010e4a:	465a      	mov	r2, fp
 8010e4c:	4631      	mov	r1, r6
 8010e4e:	4628      	mov	r0, r5
 8010e50:	47b8      	blx	r7
 8010e52:	3001      	adds	r0, #1
 8010e54:	f43f aefb 	beq.w	8010c4e <_printf_float+0xb6>
 8010e58:	f10a 0a01 	add.w	sl, sl, #1
 8010e5c:	e7ee      	b.n	8010e3c <_printf_float+0x2a4>
 8010e5e:	bf00      	nop
 8010e60:	7fefffff 	.word	0x7fefffff
 8010e64:	080134b0 	.word	0x080134b0
 8010e68:	080134ac 	.word	0x080134ac
 8010e6c:	080134b8 	.word	0x080134b8
 8010e70:	080134b4 	.word	0x080134b4
 8010e74:	080134bc 	.word	0x080134bc
 8010e78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010e7a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010e7e:	4553      	cmp	r3, sl
 8010e80:	bfa8      	it	ge
 8010e82:	4653      	movge	r3, sl
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	4699      	mov	r9, r3
 8010e88:	dc36      	bgt.n	8010ef8 <_printf_float+0x360>
 8010e8a:	f04f 0b00 	mov.w	fp, #0
 8010e8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010e92:	f104 021a 	add.w	r2, r4, #26
 8010e96:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010e98:	9306      	str	r3, [sp, #24]
 8010e9a:	eba3 0309 	sub.w	r3, r3, r9
 8010e9e:	455b      	cmp	r3, fp
 8010ea0:	dc31      	bgt.n	8010f06 <_printf_float+0x36e>
 8010ea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ea4:	459a      	cmp	sl, r3
 8010ea6:	dc3a      	bgt.n	8010f1e <_printf_float+0x386>
 8010ea8:	6823      	ldr	r3, [r4, #0]
 8010eaa:	07da      	lsls	r2, r3, #31
 8010eac:	d437      	bmi.n	8010f1e <_printf_float+0x386>
 8010eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010eb0:	ebaa 0903 	sub.w	r9, sl, r3
 8010eb4:	9b06      	ldr	r3, [sp, #24]
 8010eb6:	ebaa 0303 	sub.w	r3, sl, r3
 8010eba:	4599      	cmp	r9, r3
 8010ebc:	bfa8      	it	ge
 8010ebe:	4699      	movge	r9, r3
 8010ec0:	f1b9 0f00 	cmp.w	r9, #0
 8010ec4:	dc33      	bgt.n	8010f2e <_printf_float+0x396>
 8010ec6:	f04f 0800 	mov.w	r8, #0
 8010eca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010ece:	f104 0b1a 	add.w	fp, r4, #26
 8010ed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ed4:	ebaa 0303 	sub.w	r3, sl, r3
 8010ed8:	eba3 0309 	sub.w	r3, r3, r9
 8010edc:	4543      	cmp	r3, r8
 8010ede:	f77f af79 	ble.w	8010dd4 <_printf_float+0x23c>
 8010ee2:	2301      	movs	r3, #1
 8010ee4:	465a      	mov	r2, fp
 8010ee6:	4631      	mov	r1, r6
 8010ee8:	4628      	mov	r0, r5
 8010eea:	47b8      	blx	r7
 8010eec:	3001      	adds	r0, #1
 8010eee:	f43f aeae 	beq.w	8010c4e <_printf_float+0xb6>
 8010ef2:	f108 0801 	add.w	r8, r8, #1
 8010ef6:	e7ec      	b.n	8010ed2 <_printf_float+0x33a>
 8010ef8:	4642      	mov	r2, r8
 8010efa:	4631      	mov	r1, r6
 8010efc:	4628      	mov	r0, r5
 8010efe:	47b8      	blx	r7
 8010f00:	3001      	adds	r0, #1
 8010f02:	d1c2      	bne.n	8010e8a <_printf_float+0x2f2>
 8010f04:	e6a3      	b.n	8010c4e <_printf_float+0xb6>
 8010f06:	2301      	movs	r3, #1
 8010f08:	4631      	mov	r1, r6
 8010f0a:	4628      	mov	r0, r5
 8010f0c:	9206      	str	r2, [sp, #24]
 8010f0e:	47b8      	blx	r7
 8010f10:	3001      	adds	r0, #1
 8010f12:	f43f ae9c 	beq.w	8010c4e <_printf_float+0xb6>
 8010f16:	9a06      	ldr	r2, [sp, #24]
 8010f18:	f10b 0b01 	add.w	fp, fp, #1
 8010f1c:	e7bb      	b.n	8010e96 <_printf_float+0x2fe>
 8010f1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010f22:	4631      	mov	r1, r6
 8010f24:	4628      	mov	r0, r5
 8010f26:	47b8      	blx	r7
 8010f28:	3001      	adds	r0, #1
 8010f2a:	d1c0      	bne.n	8010eae <_printf_float+0x316>
 8010f2c:	e68f      	b.n	8010c4e <_printf_float+0xb6>
 8010f2e:	9a06      	ldr	r2, [sp, #24]
 8010f30:	464b      	mov	r3, r9
 8010f32:	4442      	add	r2, r8
 8010f34:	4631      	mov	r1, r6
 8010f36:	4628      	mov	r0, r5
 8010f38:	47b8      	blx	r7
 8010f3a:	3001      	adds	r0, #1
 8010f3c:	d1c3      	bne.n	8010ec6 <_printf_float+0x32e>
 8010f3e:	e686      	b.n	8010c4e <_printf_float+0xb6>
 8010f40:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010f44:	f1ba 0f01 	cmp.w	sl, #1
 8010f48:	dc01      	bgt.n	8010f4e <_printf_float+0x3b6>
 8010f4a:	07db      	lsls	r3, r3, #31
 8010f4c:	d536      	bpl.n	8010fbc <_printf_float+0x424>
 8010f4e:	2301      	movs	r3, #1
 8010f50:	4642      	mov	r2, r8
 8010f52:	4631      	mov	r1, r6
 8010f54:	4628      	mov	r0, r5
 8010f56:	47b8      	blx	r7
 8010f58:	3001      	adds	r0, #1
 8010f5a:	f43f ae78 	beq.w	8010c4e <_printf_float+0xb6>
 8010f5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010f62:	4631      	mov	r1, r6
 8010f64:	4628      	mov	r0, r5
 8010f66:	47b8      	blx	r7
 8010f68:	3001      	adds	r0, #1
 8010f6a:	f43f ae70 	beq.w	8010c4e <_printf_float+0xb6>
 8010f6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010f72:	2200      	movs	r2, #0
 8010f74:	2300      	movs	r3, #0
 8010f76:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8010f7a:	f7ef fdb5 	bl	8000ae8 <__aeabi_dcmpeq>
 8010f7e:	b9c0      	cbnz	r0, 8010fb2 <_printf_float+0x41a>
 8010f80:	4653      	mov	r3, sl
 8010f82:	f108 0201 	add.w	r2, r8, #1
 8010f86:	4631      	mov	r1, r6
 8010f88:	4628      	mov	r0, r5
 8010f8a:	47b8      	blx	r7
 8010f8c:	3001      	adds	r0, #1
 8010f8e:	d10c      	bne.n	8010faa <_printf_float+0x412>
 8010f90:	e65d      	b.n	8010c4e <_printf_float+0xb6>
 8010f92:	2301      	movs	r3, #1
 8010f94:	465a      	mov	r2, fp
 8010f96:	4631      	mov	r1, r6
 8010f98:	4628      	mov	r0, r5
 8010f9a:	47b8      	blx	r7
 8010f9c:	3001      	adds	r0, #1
 8010f9e:	f43f ae56 	beq.w	8010c4e <_printf_float+0xb6>
 8010fa2:	f108 0801 	add.w	r8, r8, #1
 8010fa6:	45d0      	cmp	r8, sl
 8010fa8:	dbf3      	blt.n	8010f92 <_printf_float+0x3fa>
 8010faa:	464b      	mov	r3, r9
 8010fac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010fb0:	e6df      	b.n	8010d72 <_printf_float+0x1da>
 8010fb2:	f04f 0800 	mov.w	r8, #0
 8010fb6:	f104 0b1a 	add.w	fp, r4, #26
 8010fba:	e7f4      	b.n	8010fa6 <_printf_float+0x40e>
 8010fbc:	2301      	movs	r3, #1
 8010fbe:	4642      	mov	r2, r8
 8010fc0:	e7e1      	b.n	8010f86 <_printf_float+0x3ee>
 8010fc2:	2301      	movs	r3, #1
 8010fc4:	464a      	mov	r2, r9
 8010fc6:	4631      	mov	r1, r6
 8010fc8:	4628      	mov	r0, r5
 8010fca:	47b8      	blx	r7
 8010fcc:	3001      	adds	r0, #1
 8010fce:	f43f ae3e 	beq.w	8010c4e <_printf_float+0xb6>
 8010fd2:	f108 0801 	add.w	r8, r8, #1
 8010fd6:	68e3      	ldr	r3, [r4, #12]
 8010fd8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010fda:	1a5b      	subs	r3, r3, r1
 8010fdc:	4543      	cmp	r3, r8
 8010fde:	dcf0      	bgt.n	8010fc2 <_printf_float+0x42a>
 8010fe0:	e6fc      	b.n	8010ddc <_printf_float+0x244>
 8010fe2:	f04f 0800 	mov.w	r8, #0
 8010fe6:	f104 0919 	add.w	r9, r4, #25
 8010fea:	e7f4      	b.n	8010fd6 <_printf_float+0x43e>

08010fec <_printf_common>:
 8010fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ff0:	4616      	mov	r6, r2
 8010ff2:	4698      	mov	r8, r3
 8010ff4:	688a      	ldr	r2, [r1, #8]
 8010ff6:	690b      	ldr	r3, [r1, #16]
 8010ff8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010ffc:	4293      	cmp	r3, r2
 8010ffe:	bfb8      	it	lt
 8011000:	4613      	movlt	r3, r2
 8011002:	6033      	str	r3, [r6, #0]
 8011004:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011008:	4607      	mov	r7, r0
 801100a:	460c      	mov	r4, r1
 801100c:	b10a      	cbz	r2, 8011012 <_printf_common+0x26>
 801100e:	3301      	adds	r3, #1
 8011010:	6033      	str	r3, [r6, #0]
 8011012:	6823      	ldr	r3, [r4, #0]
 8011014:	0699      	lsls	r1, r3, #26
 8011016:	bf42      	ittt	mi
 8011018:	6833      	ldrmi	r3, [r6, #0]
 801101a:	3302      	addmi	r3, #2
 801101c:	6033      	strmi	r3, [r6, #0]
 801101e:	6825      	ldr	r5, [r4, #0]
 8011020:	f015 0506 	ands.w	r5, r5, #6
 8011024:	d106      	bne.n	8011034 <_printf_common+0x48>
 8011026:	f104 0a19 	add.w	sl, r4, #25
 801102a:	68e3      	ldr	r3, [r4, #12]
 801102c:	6832      	ldr	r2, [r6, #0]
 801102e:	1a9b      	subs	r3, r3, r2
 8011030:	42ab      	cmp	r3, r5
 8011032:	dc26      	bgt.n	8011082 <_printf_common+0x96>
 8011034:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011038:	6822      	ldr	r2, [r4, #0]
 801103a:	3b00      	subs	r3, #0
 801103c:	bf18      	it	ne
 801103e:	2301      	movne	r3, #1
 8011040:	0692      	lsls	r2, r2, #26
 8011042:	d42b      	bmi.n	801109c <_printf_common+0xb0>
 8011044:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011048:	4641      	mov	r1, r8
 801104a:	4638      	mov	r0, r7
 801104c:	47c8      	blx	r9
 801104e:	3001      	adds	r0, #1
 8011050:	d01e      	beq.n	8011090 <_printf_common+0xa4>
 8011052:	6823      	ldr	r3, [r4, #0]
 8011054:	6922      	ldr	r2, [r4, #16]
 8011056:	f003 0306 	and.w	r3, r3, #6
 801105a:	2b04      	cmp	r3, #4
 801105c:	bf02      	ittt	eq
 801105e:	68e5      	ldreq	r5, [r4, #12]
 8011060:	6833      	ldreq	r3, [r6, #0]
 8011062:	1aed      	subeq	r5, r5, r3
 8011064:	68a3      	ldr	r3, [r4, #8]
 8011066:	bf0c      	ite	eq
 8011068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801106c:	2500      	movne	r5, #0
 801106e:	4293      	cmp	r3, r2
 8011070:	bfc4      	itt	gt
 8011072:	1a9b      	subgt	r3, r3, r2
 8011074:	18ed      	addgt	r5, r5, r3
 8011076:	2600      	movs	r6, #0
 8011078:	341a      	adds	r4, #26
 801107a:	42b5      	cmp	r5, r6
 801107c:	d11a      	bne.n	80110b4 <_printf_common+0xc8>
 801107e:	2000      	movs	r0, #0
 8011080:	e008      	b.n	8011094 <_printf_common+0xa8>
 8011082:	2301      	movs	r3, #1
 8011084:	4652      	mov	r2, sl
 8011086:	4641      	mov	r1, r8
 8011088:	4638      	mov	r0, r7
 801108a:	47c8      	blx	r9
 801108c:	3001      	adds	r0, #1
 801108e:	d103      	bne.n	8011098 <_printf_common+0xac>
 8011090:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011098:	3501      	adds	r5, #1
 801109a:	e7c6      	b.n	801102a <_printf_common+0x3e>
 801109c:	18e1      	adds	r1, r4, r3
 801109e:	1c5a      	adds	r2, r3, #1
 80110a0:	2030      	movs	r0, #48	@ 0x30
 80110a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80110a6:	4422      	add	r2, r4
 80110a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80110ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80110b0:	3302      	adds	r3, #2
 80110b2:	e7c7      	b.n	8011044 <_printf_common+0x58>
 80110b4:	2301      	movs	r3, #1
 80110b6:	4622      	mov	r2, r4
 80110b8:	4641      	mov	r1, r8
 80110ba:	4638      	mov	r0, r7
 80110bc:	47c8      	blx	r9
 80110be:	3001      	adds	r0, #1
 80110c0:	d0e6      	beq.n	8011090 <_printf_common+0xa4>
 80110c2:	3601      	adds	r6, #1
 80110c4:	e7d9      	b.n	801107a <_printf_common+0x8e>
	...

080110c8 <_printf_i>:
 80110c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80110cc:	7e0f      	ldrb	r7, [r1, #24]
 80110ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80110d0:	2f78      	cmp	r7, #120	@ 0x78
 80110d2:	4691      	mov	r9, r2
 80110d4:	4680      	mov	r8, r0
 80110d6:	460c      	mov	r4, r1
 80110d8:	469a      	mov	sl, r3
 80110da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80110de:	d807      	bhi.n	80110f0 <_printf_i+0x28>
 80110e0:	2f62      	cmp	r7, #98	@ 0x62
 80110e2:	d80a      	bhi.n	80110fa <_printf_i+0x32>
 80110e4:	2f00      	cmp	r7, #0
 80110e6:	f000 80d1 	beq.w	801128c <_printf_i+0x1c4>
 80110ea:	2f58      	cmp	r7, #88	@ 0x58
 80110ec:	f000 80b8 	beq.w	8011260 <_printf_i+0x198>
 80110f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80110f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80110f8:	e03a      	b.n	8011170 <_printf_i+0xa8>
 80110fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80110fe:	2b15      	cmp	r3, #21
 8011100:	d8f6      	bhi.n	80110f0 <_printf_i+0x28>
 8011102:	a101      	add	r1, pc, #4	@ (adr r1, 8011108 <_printf_i+0x40>)
 8011104:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011108:	08011161 	.word	0x08011161
 801110c:	08011175 	.word	0x08011175
 8011110:	080110f1 	.word	0x080110f1
 8011114:	080110f1 	.word	0x080110f1
 8011118:	080110f1 	.word	0x080110f1
 801111c:	080110f1 	.word	0x080110f1
 8011120:	08011175 	.word	0x08011175
 8011124:	080110f1 	.word	0x080110f1
 8011128:	080110f1 	.word	0x080110f1
 801112c:	080110f1 	.word	0x080110f1
 8011130:	080110f1 	.word	0x080110f1
 8011134:	08011273 	.word	0x08011273
 8011138:	0801119f 	.word	0x0801119f
 801113c:	0801122d 	.word	0x0801122d
 8011140:	080110f1 	.word	0x080110f1
 8011144:	080110f1 	.word	0x080110f1
 8011148:	08011295 	.word	0x08011295
 801114c:	080110f1 	.word	0x080110f1
 8011150:	0801119f 	.word	0x0801119f
 8011154:	080110f1 	.word	0x080110f1
 8011158:	080110f1 	.word	0x080110f1
 801115c:	08011235 	.word	0x08011235
 8011160:	6833      	ldr	r3, [r6, #0]
 8011162:	1d1a      	adds	r2, r3, #4
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	6032      	str	r2, [r6, #0]
 8011168:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801116c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011170:	2301      	movs	r3, #1
 8011172:	e09c      	b.n	80112ae <_printf_i+0x1e6>
 8011174:	6833      	ldr	r3, [r6, #0]
 8011176:	6820      	ldr	r0, [r4, #0]
 8011178:	1d19      	adds	r1, r3, #4
 801117a:	6031      	str	r1, [r6, #0]
 801117c:	0606      	lsls	r6, r0, #24
 801117e:	d501      	bpl.n	8011184 <_printf_i+0xbc>
 8011180:	681d      	ldr	r5, [r3, #0]
 8011182:	e003      	b.n	801118c <_printf_i+0xc4>
 8011184:	0645      	lsls	r5, r0, #25
 8011186:	d5fb      	bpl.n	8011180 <_printf_i+0xb8>
 8011188:	f9b3 5000 	ldrsh.w	r5, [r3]
 801118c:	2d00      	cmp	r5, #0
 801118e:	da03      	bge.n	8011198 <_printf_i+0xd0>
 8011190:	232d      	movs	r3, #45	@ 0x2d
 8011192:	426d      	negs	r5, r5
 8011194:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011198:	4858      	ldr	r0, [pc, #352]	@ (80112fc <_printf_i+0x234>)
 801119a:	230a      	movs	r3, #10
 801119c:	e011      	b.n	80111c2 <_printf_i+0xfa>
 801119e:	6821      	ldr	r1, [r4, #0]
 80111a0:	6833      	ldr	r3, [r6, #0]
 80111a2:	0608      	lsls	r0, r1, #24
 80111a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80111a8:	d402      	bmi.n	80111b0 <_printf_i+0xe8>
 80111aa:	0649      	lsls	r1, r1, #25
 80111ac:	bf48      	it	mi
 80111ae:	b2ad      	uxthmi	r5, r5
 80111b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80111b2:	4852      	ldr	r0, [pc, #328]	@ (80112fc <_printf_i+0x234>)
 80111b4:	6033      	str	r3, [r6, #0]
 80111b6:	bf14      	ite	ne
 80111b8:	230a      	movne	r3, #10
 80111ba:	2308      	moveq	r3, #8
 80111bc:	2100      	movs	r1, #0
 80111be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80111c2:	6866      	ldr	r6, [r4, #4]
 80111c4:	60a6      	str	r6, [r4, #8]
 80111c6:	2e00      	cmp	r6, #0
 80111c8:	db05      	blt.n	80111d6 <_printf_i+0x10e>
 80111ca:	6821      	ldr	r1, [r4, #0]
 80111cc:	432e      	orrs	r6, r5
 80111ce:	f021 0104 	bic.w	r1, r1, #4
 80111d2:	6021      	str	r1, [r4, #0]
 80111d4:	d04b      	beq.n	801126e <_printf_i+0x1a6>
 80111d6:	4616      	mov	r6, r2
 80111d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80111dc:	fb03 5711 	mls	r7, r3, r1, r5
 80111e0:	5dc7      	ldrb	r7, [r0, r7]
 80111e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80111e6:	462f      	mov	r7, r5
 80111e8:	42bb      	cmp	r3, r7
 80111ea:	460d      	mov	r5, r1
 80111ec:	d9f4      	bls.n	80111d8 <_printf_i+0x110>
 80111ee:	2b08      	cmp	r3, #8
 80111f0:	d10b      	bne.n	801120a <_printf_i+0x142>
 80111f2:	6823      	ldr	r3, [r4, #0]
 80111f4:	07df      	lsls	r7, r3, #31
 80111f6:	d508      	bpl.n	801120a <_printf_i+0x142>
 80111f8:	6923      	ldr	r3, [r4, #16]
 80111fa:	6861      	ldr	r1, [r4, #4]
 80111fc:	4299      	cmp	r1, r3
 80111fe:	bfde      	ittt	le
 8011200:	2330      	movle	r3, #48	@ 0x30
 8011202:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011206:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801120a:	1b92      	subs	r2, r2, r6
 801120c:	6122      	str	r2, [r4, #16]
 801120e:	f8cd a000 	str.w	sl, [sp]
 8011212:	464b      	mov	r3, r9
 8011214:	aa03      	add	r2, sp, #12
 8011216:	4621      	mov	r1, r4
 8011218:	4640      	mov	r0, r8
 801121a:	f7ff fee7 	bl	8010fec <_printf_common>
 801121e:	3001      	adds	r0, #1
 8011220:	d14a      	bne.n	80112b8 <_printf_i+0x1f0>
 8011222:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011226:	b004      	add	sp, #16
 8011228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801122c:	6823      	ldr	r3, [r4, #0]
 801122e:	f043 0320 	orr.w	r3, r3, #32
 8011232:	6023      	str	r3, [r4, #0]
 8011234:	4832      	ldr	r0, [pc, #200]	@ (8011300 <_printf_i+0x238>)
 8011236:	2778      	movs	r7, #120	@ 0x78
 8011238:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801123c:	6823      	ldr	r3, [r4, #0]
 801123e:	6831      	ldr	r1, [r6, #0]
 8011240:	061f      	lsls	r7, r3, #24
 8011242:	f851 5b04 	ldr.w	r5, [r1], #4
 8011246:	d402      	bmi.n	801124e <_printf_i+0x186>
 8011248:	065f      	lsls	r7, r3, #25
 801124a:	bf48      	it	mi
 801124c:	b2ad      	uxthmi	r5, r5
 801124e:	6031      	str	r1, [r6, #0]
 8011250:	07d9      	lsls	r1, r3, #31
 8011252:	bf44      	itt	mi
 8011254:	f043 0320 	orrmi.w	r3, r3, #32
 8011258:	6023      	strmi	r3, [r4, #0]
 801125a:	b11d      	cbz	r5, 8011264 <_printf_i+0x19c>
 801125c:	2310      	movs	r3, #16
 801125e:	e7ad      	b.n	80111bc <_printf_i+0xf4>
 8011260:	4826      	ldr	r0, [pc, #152]	@ (80112fc <_printf_i+0x234>)
 8011262:	e7e9      	b.n	8011238 <_printf_i+0x170>
 8011264:	6823      	ldr	r3, [r4, #0]
 8011266:	f023 0320 	bic.w	r3, r3, #32
 801126a:	6023      	str	r3, [r4, #0]
 801126c:	e7f6      	b.n	801125c <_printf_i+0x194>
 801126e:	4616      	mov	r6, r2
 8011270:	e7bd      	b.n	80111ee <_printf_i+0x126>
 8011272:	6833      	ldr	r3, [r6, #0]
 8011274:	6825      	ldr	r5, [r4, #0]
 8011276:	6961      	ldr	r1, [r4, #20]
 8011278:	1d18      	adds	r0, r3, #4
 801127a:	6030      	str	r0, [r6, #0]
 801127c:	062e      	lsls	r6, r5, #24
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	d501      	bpl.n	8011286 <_printf_i+0x1be>
 8011282:	6019      	str	r1, [r3, #0]
 8011284:	e002      	b.n	801128c <_printf_i+0x1c4>
 8011286:	0668      	lsls	r0, r5, #25
 8011288:	d5fb      	bpl.n	8011282 <_printf_i+0x1ba>
 801128a:	8019      	strh	r1, [r3, #0]
 801128c:	2300      	movs	r3, #0
 801128e:	6123      	str	r3, [r4, #16]
 8011290:	4616      	mov	r6, r2
 8011292:	e7bc      	b.n	801120e <_printf_i+0x146>
 8011294:	6833      	ldr	r3, [r6, #0]
 8011296:	1d1a      	adds	r2, r3, #4
 8011298:	6032      	str	r2, [r6, #0]
 801129a:	681e      	ldr	r6, [r3, #0]
 801129c:	6862      	ldr	r2, [r4, #4]
 801129e:	2100      	movs	r1, #0
 80112a0:	4630      	mov	r0, r6
 80112a2:	f7ee ffa5 	bl	80001f0 <memchr>
 80112a6:	b108      	cbz	r0, 80112ac <_printf_i+0x1e4>
 80112a8:	1b80      	subs	r0, r0, r6
 80112aa:	6060      	str	r0, [r4, #4]
 80112ac:	6863      	ldr	r3, [r4, #4]
 80112ae:	6123      	str	r3, [r4, #16]
 80112b0:	2300      	movs	r3, #0
 80112b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80112b6:	e7aa      	b.n	801120e <_printf_i+0x146>
 80112b8:	6923      	ldr	r3, [r4, #16]
 80112ba:	4632      	mov	r2, r6
 80112bc:	4649      	mov	r1, r9
 80112be:	4640      	mov	r0, r8
 80112c0:	47d0      	blx	sl
 80112c2:	3001      	adds	r0, #1
 80112c4:	d0ad      	beq.n	8011222 <_printf_i+0x15a>
 80112c6:	6823      	ldr	r3, [r4, #0]
 80112c8:	079b      	lsls	r3, r3, #30
 80112ca:	d413      	bmi.n	80112f4 <_printf_i+0x22c>
 80112cc:	68e0      	ldr	r0, [r4, #12]
 80112ce:	9b03      	ldr	r3, [sp, #12]
 80112d0:	4298      	cmp	r0, r3
 80112d2:	bfb8      	it	lt
 80112d4:	4618      	movlt	r0, r3
 80112d6:	e7a6      	b.n	8011226 <_printf_i+0x15e>
 80112d8:	2301      	movs	r3, #1
 80112da:	4632      	mov	r2, r6
 80112dc:	4649      	mov	r1, r9
 80112de:	4640      	mov	r0, r8
 80112e0:	47d0      	blx	sl
 80112e2:	3001      	adds	r0, #1
 80112e4:	d09d      	beq.n	8011222 <_printf_i+0x15a>
 80112e6:	3501      	adds	r5, #1
 80112e8:	68e3      	ldr	r3, [r4, #12]
 80112ea:	9903      	ldr	r1, [sp, #12]
 80112ec:	1a5b      	subs	r3, r3, r1
 80112ee:	42ab      	cmp	r3, r5
 80112f0:	dcf2      	bgt.n	80112d8 <_printf_i+0x210>
 80112f2:	e7eb      	b.n	80112cc <_printf_i+0x204>
 80112f4:	2500      	movs	r5, #0
 80112f6:	f104 0619 	add.w	r6, r4, #25
 80112fa:	e7f5      	b.n	80112e8 <_printf_i+0x220>
 80112fc:	080134be 	.word	0x080134be
 8011300:	080134cf 	.word	0x080134cf

08011304 <std>:
 8011304:	2300      	movs	r3, #0
 8011306:	b510      	push	{r4, lr}
 8011308:	4604      	mov	r4, r0
 801130a:	e9c0 3300 	strd	r3, r3, [r0]
 801130e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011312:	6083      	str	r3, [r0, #8]
 8011314:	8181      	strh	r1, [r0, #12]
 8011316:	6643      	str	r3, [r0, #100]	@ 0x64
 8011318:	81c2      	strh	r2, [r0, #14]
 801131a:	6183      	str	r3, [r0, #24]
 801131c:	4619      	mov	r1, r3
 801131e:	2208      	movs	r2, #8
 8011320:	305c      	adds	r0, #92	@ 0x5c
 8011322:	f000 f9f9 	bl	8011718 <memset>
 8011326:	4b0d      	ldr	r3, [pc, #52]	@ (801135c <std+0x58>)
 8011328:	6263      	str	r3, [r4, #36]	@ 0x24
 801132a:	4b0d      	ldr	r3, [pc, #52]	@ (8011360 <std+0x5c>)
 801132c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801132e:	4b0d      	ldr	r3, [pc, #52]	@ (8011364 <std+0x60>)
 8011330:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011332:	4b0d      	ldr	r3, [pc, #52]	@ (8011368 <std+0x64>)
 8011334:	6323      	str	r3, [r4, #48]	@ 0x30
 8011336:	4b0d      	ldr	r3, [pc, #52]	@ (801136c <std+0x68>)
 8011338:	6224      	str	r4, [r4, #32]
 801133a:	429c      	cmp	r4, r3
 801133c:	d006      	beq.n	801134c <std+0x48>
 801133e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011342:	4294      	cmp	r4, r2
 8011344:	d002      	beq.n	801134c <std+0x48>
 8011346:	33d0      	adds	r3, #208	@ 0xd0
 8011348:	429c      	cmp	r4, r3
 801134a:	d105      	bne.n	8011358 <std+0x54>
 801134c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011354:	f000 ba6c 	b.w	8011830 <__retarget_lock_init_recursive>
 8011358:	bd10      	pop	{r4, pc}
 801135a:	bf00      	nop
 801135c:	08011569 	.word	0x08011569
 8011360:	0801158b 	.word	0x0801158b
 8011364:	080115c3 	.word	0x080115c3
 8011368:	080115e7 	.word	0x080115e7
 801136c:	2002a614 	.word	0x2002a614

08011370 <stdio_exit_handler>:
 8011370:	4a02      	ldr	r2, [pc, #8]	@ (801137c <stdio_exit_handler+0xc>)
 8011372:	4903      	ldr	r1, [pc, #12]	@ (8011380 <stdio_exit_handler+0x10>)
 8011374:	4803      	ldr	r0, [pc, #12]	@ (8011384 <stdio_exit_handler+0x14>)
 8011376:	f000 b869 	b.w	801144c <_fwalk_sglue>
 801137a:	bf00      	nop
 801137c:	20000038 	.word	0x20000038
 8011380:	0801301d 	.word	0x0801301d
 8011384:	20000048 	.word	0x20000048

08011388 <cleanup_stdio>:
 8011388:	6841      	ldr	r1, [r0, #4]
 801138a:	4b0c      	ldr	r3, [pc, #48]	@ (80113bc <cleanup_stdio+0x34>)
 801138c:	4299      	cmp	r1, r3
 801138e:	b510      	push	{r4, lr}
 8011390:	4604      	mov	r4, r0
 8011392:	d001      	beq.n	8011398 <cleanup_stdio+0x10>
 8011394:	f001 fe42 	bl	801301c <_fflush_r>
 8011398:	68a1      	ldr	r1, [r4, #8]
 801139a:	4b09      	ldr	r3, [pc, #36]	@ (80113c0 <cleanup_stdio+0x38>)
 801139c:	4299      	cmp	r1, r3
 801139e:	d002      	beq.n	80113a6 <cleanup_stdio+0x1e>
 80113a0:	4620      	mov	r0, r4
 80113a2:	f001 fe3b 	bl	801301c <_fflush_r>
 80113a6:	68e1      	ldr	r1, [r4, #12]
 80113a8:	4b06      	ldr	r3, [pc, #24]	@ (80113c4 <cleanup_stdio+0x3c>)
 80113aa:	4299      	cmp	r1, r3
 80113ac:	d004      	beq.n	80113b8 <cleanup_stdio+0x30>
 80113ae:	4620      	mov	r0, r4
 80113b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113b4:	f001 be32 	b.w	801301c <_fflush_r>
 80113b8:	bd10      	pop	{r4, pc}
 80113ba:	bf00      	nop
 80113bc:	2002a614 	.word	0x2002a614
 80113c0:	2002a67c 	.word	0x2002a67c
 80113c4:	2002a6e4 	.word	0x2002a6e4

080113c8 <global_stdio_init.part.0>:
 80113c8:	b510      	push	{r4, lr}
 80113ca:	4b0b      	ldr	r3, [pc, #44]	@ (80113f8 <global_stdio_init.part.0+0x30>)
 80113cc:	4c0b      	ldr	r4, [pc, #44]	@ (80113fc <global_stdio_init.part.0+0x34>)
 80113ce:	4a0c      	ldr	r2, [pc, #48]	@ (8011400 <global_stdio_init.part.0+0x38>)
 80113d0:	601a      	str	r2, [r3, #0]
 80113d2:	4620      	mov	r0, r4
 80113d4:	2200      	movs	r2, #0
 80113d6:	2104      	movs	r1, #4
 80113d8:	f7ff ff94 	bl	8011304 <std>
 80113dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80113e0:	2201      	movs	r2, #1
 80113e2:	2109      	movs	r1, #9
 80113e4:	f7ff ff8e 	bl	8011304 <std>
 80113e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80113ec:	2202      	movs	r2, #2
 80113ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113f2:	2112      	movs	r1, #18
 80113f4:	f7ff bf86 	b.w	8011304 <std>
 80113f8:	2002a74c 	.word	0x2002a74c
 80113fc:	2002a614 	.word	0x2002a614
 8011400:	08011371 	.word	0x08011371

08011404 <__sfp_lock_acquire>:
 8011404:	4801      	ldr	r0, [pc, #4]	@ (801140c <__sfp_lock_acquire+0x8>)
 8011406:	f000 ba14 	b.w	8011832 <__retarget_lock_acquire_recursive>
 801140a:	bf00      	nop
 801140c:	2002a755 	.word	0x2002a755

08011410 <__sfp_lock_release>:
 8011410:	4801      	ldr	r0, [pc, #4]	@ (8011418 <__sfp_lock_release+0x8>)
 8011412:	f000 ba0f 	b.w	8011834 <__retarget_lock_release_recursive>
 8011416:	bf00      	nop
 8011418:	2002a755 	.word	0x2002a755

0801141c <__sinit>:
 801141c:	b510      	push	{r4, lr}
 801141e:	4604      	mov	r4, r0
 8011420:	f7ff fff0 	bl	8011404 <__sfp_lock_acquire>
 8011424:	6a23      	ldr	r3, [r4, #32]
 8011426:	b11b      	cbz	r3, 8011430 <__sinit+0x14>
 8011428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801142c:	f7ff bff0 	b.w	8011410 <__sfp_lock_release>
 8011430:	4b04      	ldr	r3, [pc, #16]	@ (8011444 <__sinit+0x28>)
 8011432:	6223      	str	r3, [r4, #32]
 8011434:	4b04      	ldr	r3, [pc, #16]	@ (8011448 <__sinit+0x2c>)
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d1f5      	bne.n	8011428 <__sinit+0xc>
 801143c:	f7ff ffc4 	bl	80113c8 <global_stdio_init.part.0>
 8011440:	e7f2      	b.n	8011428 <__sinit+0xc>
 8011442:	bf00      	nop
 8011444:	08011389 	.word	0x08011389
 8011448:	2002a74c 	.word	0x2002a74c

0801144c <_fwalk_sglue>:
 801144c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011450:	4607      	mov	r7, r0
 8011452:	4688      	mov	r8, r1
 8011454:	4614      	mov	r4, r2
 8011456:	2600      	movs	r6, #0
 8011458:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801145c:	f1b9 0901 	subs.w	r9, r9, #1
 8011460:	d505      	bpl.n	801146e <_fwalk_sglue+0x22>
 8011462:	6824      	ldr	r4, [r4, #0]
 8011464:	2c00      	cmp	r4, #0
 8011466:	d1f7      	bne.n	8011458 <_fwalk_sglue+0xc>
 8011468:	4630      	mov	r0, r6
 801146a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801146e:	89ab      	ldrh	r3, [r5, #12]
 8011470:	2b01      	cmp	r3, #1
 8011472:	d907      	bls.n	8011484 <_fwalk_sglue+0x38>
 8011474:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011478:	3301      	adds	r3, #1
 801147a:	d003      	beq.n	8011484 <_fwalk_sglue+0x38>
 801147c:	4629      	mov	r1, r5
 801147e:	4638      	mov	r0, r7
 8011480:	47c0      	blx	r8
 8011482:	4306      	orrs	r6, r0
 8011484:	3568      	adds	r5, #104	@ 0x68
 8011486:	e7e9      	b.n	801145c <_fwalk_sglue+0x10>

08011488 <iprintf>:
 8011488:	b40f      	push	{r0, r1, r2, r3}
 801148a:	b507      	push	{r0, r1, r2, lr}
 801148c:	4906      	ldr	r1, [pc, #24]	@ (80114a8 <iprintf+0x20>)
 801148e:	ab04      	add	r3, sp, #16
 8011490:	6808      	ldr	r0, [r1, #0]
 8011492:	f853 2b04 	ldr.w	r2, [r3], #4
 8011496:	6881      	ldr	r1, [r0, #8]
 8011498:	9301      	str	r3, [sp, #4]
 801149a:	f001 fc23 	bl	8012ce4 <_vfiprintf_r>
 801149e:	b003      	add	sp, #12
 80114a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80114a4:	b004      	add	sp, #16
 80114a6:	4770      	bx	lr
 80114a8:	20000044 	.word	0x20000044

080114ac <_puts_r>:
 80114ac:	6a03      	ldr	r3, [r0, #32]
 80114ae:	b570      	push	{r4, r5, r6, lr}
 80114b0:	6884      	ldr	r4, [r0, #8]
 80114b2:	4605      	mov	r5, r0
 80114b4:	460e      	mov	r6, r1
 80114b6:	b90b      	cbnz	r3, 80114bc <_puts_r+0x10>
 80114b8:	f7ff ffb0 	bl	801141c <__sinit>
 80114bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80114be:	07db      	lsls	r3, r3, #31
 80114c0:	d405      	bmi.n	80114ce <_puts_r+0x22>
 80114c2:	89a3      	ldrh	r3, [r4, #12]
 80114c4:	0598      	lsls	r0, r3, #22
 80114c6:	d402      	bmi.n	80114ce <_puts_r+0x22>
 80114c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80114ca:	f000 f9b2 	bl	8011832 <__retarget_lock_acquire_recursive>
 80114ce:	89a3      	ldrh	r3, [r4, #12]
 80114d0:	0719      	lsls	r1, r3, #28
 80114d2:	d502      	bpl.n	80114da <_puts_r+0x2e>
 80114d4:	6923      	ldr	r3, [r4, #16]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d135      	bne.n	8011546 <_puts_r+0x9a>
 80114da:	4621      	mov	r1, r4
 80114dc:	4628      	mov	r0, r5
 80114de:	f000 f8c5 	bl	801166c <__swsetup_r>
 80114e2:	b380      	cbz	r0, 8011546 <_puts_r+0x9a>
 80114e4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80114e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80114ea:	07da      	lsls	r2, r3, #31
 80114ec:	d405      	bmi.n	80114fa <_puts_r+0x4e>
 80114ee:	89a3      	ldrh	r3, [r4, #12]
 80114f0:	059b      	lsls	r3, r3, #22
 80114f2:	d402      	bmi.n	80114fa <_puts_r+0x4e>
 80114f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80114f6:	f000 f99d 	bl	8011834 <__retarget_lock_release_recursive>
 80114fa:	4628      	mov	r0, r5
 80114fc:	bd70      	pop	{r4, r5, r6, pc}
 80114fe:	2b00      	cmp	r3, #0
 8011500:	da04      	bge.n	801150c <_puts_r+0x60>
 8011502:	69a2      	ldr	r2, [r4, #24]
 8011504:	429a      	cmp	r2, r3
 8011506:	dc17      	bgt.n	8011538 <_puts_r+0x8c>
 8011508:	290a      	cmp	r1, #10
 801150a:	d015      	beq.n	8011538 <_puts_r+0x8c>
 801150c:	6823      	ldr	r3, [r4, #0]
 801150e:	1c5a      	adds	r2, r3, #1
 8011510:	6022      	str	r2, [r4, #0]
 8011512:	7019      	strb	r1, [r3, #0]
 8011514:	68a3      	ldr	r3, [r4, #8]
 8011516:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801151a:	3b01      	subs	r3, #1
 801151c:	60a3      	str	r3, [r4, #8]
 801151e:	2900      	cmp	r1, #0
 8011520:	d1ed      	bne.n	80114fe <_puts_r+0x52>
 8011522:	2b00      	cmp	r3, #0
 8011524:	da11      	bge.n	801154a <_puts_r+0x9e>
 8011526:	4622      	mov	r2, r4
 8011528:	210a      	movs	r1, #10
 801152a:	4628      	mov	r0, r5
 801152c:	f000 f85f 	bl	80115ee <__swbuf_r>
 8011530:	3001      	adds	r0, #1
 8011532:	d0d7      	beq.n	80114e4 <_puts_r+0x38>
 8011534:	250a      	movs	r5, #10
 8011536:	e7d7      	b.n	80114e8 <_puts_r+0x3c>
 8011538:	4622      	mov	r2, r4
 801153a:	4628      	mov	r0, r5
 801153c:	f000 f857 	bl	80115ee <__swbuf_r>
 8011540:	3001      	adds	r0, #1
 8011542:	d1e7      	bne.n	8011514 <_puts_r+0x68>
 8011544:	e7ce      	b.n	80114e4 <_puts_r+0x38>
 8011546:	3e01      	subs	r6, #1
 8011548:	e7e4      	b.n	8011514 <_puts_r+0x68>
 801154a:	6823      	ldr	r3, [r4, #0]
 801154c:	1c5a      	adds	r2, r3, #1
 801154e:	6022      	str	r2, [r4, #0]
 8011550:	220a      	movs	r2, #10
 8011552:	701a      	strb	r2, [r3, #0]
 8011554:	e7ee      	b.n	8011534 <_puts_r+0x88>
	...

08011558 <puts>:
 8011558:	4b02      	ldr	r3, [pc, #8]	@ (8011564 <puts+0xc>)
 801155a:	4601      	mov	r1, r0
 801155c:	6818      	ldr	r0, [r3, #0]
 801155e:	f7ff bfa5 	b.w	80114ac <_puts_r>
 8011562:	bf00      	nop
 8011564:	20000044 	.word	0x20000044

08011568 <__sread>:
 8011568:	b510      	push	{r4, lr}
 801156a:	460c      	mov	r4, r1
 801156c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011570:	f000 f900 	bl	8011774 <_read_r>
 8011574:	2800      	cmp	r0, #0
 8011576:	bfab      	itete	ge
 8011578:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801157a:	89a3      	ldrhlt	r3, [r4, #12]
 801157c:	181b      	addge	r3, r3, r0
 801157e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011582:	bfac      	ite	ge
 8011584:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011586:	81a3      	strhlt	r3, [r4, #12]
 8011588:	bd10      	pop	{r4, pc}

0801158a <__swrite>:
 801158a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801158e:	461f      	mov	r7, r3
 8011590:	898b      	ldrh	r3, [r1, #12]
 8011592:	05db      	lsls	r3, r3, #23
 8011594:	4605      	mov	r5, r0
 8011596:	460c      	mov	r4, r1
 8011598:	4616      	mov	r6, r2
 801159a:	d505      	bpl.n	80115a8 <__swrite+0x1e>
 801159c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115a0:	2302      	movs	r3, #2
 80115a2:	2200      	movs	r2, #0
 80115a4:	f000 f8d4 	bl	8011750 <_lseek_r>
 80115a8:	89a3      	ldrh	r3, [r4, #12]
 80115aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80115ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80115b2:	81a3      	strh	r3, [r4, #12]
 80115b4:	4632      	mov	r2, r6
 80115b6:	463b      	mov	r3, r7
 80115b8:	4628      	mov	r0, r5
 80115ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115be:	f000 b8fb 	b.w	80117b8 <_write_r>

080115c2 <__sseek>:
 80115c2:	b510      	push	{r4, lr}
 80115c4:	460c      	mov	r4, r1
 80115c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115ca:	f000 f8c1 	bl	8011750 <_lseek_r>
 80115ce:	1c43      	adds	r3, r0, #1
 80115d0:	89a3      	ldrh	r3, [r4, #12]
 80115d2:	bf15      	itete	ne
 80115d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80115d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80115da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80115de:	81a3      	strheq	r3, [r4, #12]
 80115e0:	bf18      	it	ne
 80115e2:	81a3      	strhne	r3, [r4, #12]
 80115e4:	bd10      	pop	{r4, pc}

080115e6 <__sclose>:
 80115e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115ea:	f000 b8a1 	b.w	8011730 <_close_r>

080115ee <__swbuf_r>:
 80115ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115f0:	460e      	mov	r6, r1
 80115f2:	4614      	mov	r4, r2
 80115f4:	4605      	mov	r5, r0
 80115f6:	b118      	cbz	r0, 8011600 <__swbuf_r+0x12>
 80115f8:	6a03      	ldr	r3, [r0, #32]
 80115fa:	b90b      	cbnz	r3, 8011600 <__swbuf_r+0x12>
 80115fc:	f7ff ff0e 	bl	801141c <__sinit>
 8011600:	69a3      	ldr	r3, [r4, #24]
 8011602:	60a3      	str	r3, [r4, #8]
 8011604:	89a3      	ldrh	r3, [r4, #12]
 8011606:	071a      	lsls	r2, r3, #28
 8011608:	d501      	bpl.n	801160e <__swbuf_r+0x20>
 801160a:	6923      	ldr	r3, [r4, #16]
 801160c:	b943      	cbnz	r3, 8011620 <__swbuf_r+0x32>
 801160e:	4621      	mov	r1, r4
 8011610:	4628      	mov	r0, r5
 8011612:	f000 f82b 	bl	801166c <__swsetup_r>
 8011616:	b118      	cbz	r0, 8011620 <__swbuf_r+0x32>
 8011618:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801161c:	4638      	mov	r0, r7
 801161e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011620:	6823      	ldr	r3, [r4, #0]
 8011622:	6922      	ldr	r2, [r4, #16]
 8011624:	1a98      	subs	r0, r3, r2
 8011626:	6963      	ldr	r3, [r4, #20]
 8011628:	b2f6      	uxtb	r6, r6
 801162a:	4283      	cmp	r3, r0
 801162c:	4637      	mov	r7, r6
 801162e:	dc05      	bgt.n	801163c <__swbuf_r+0x4e>
 8011630:	4621      	mov	r1, r4
 8011632:	4628      	mov	r0, r5
 8011634:	f001 fcf2 	bl	801301c <_fflush_r>
 8011638:	2800      	cmp	r0, #0
 801163a:	d1ed      	bne.n	8011618 <__swbuf_r+0x2a>
 801163c:	68a3      	ldr	r3, [r4, #8]
 801163e:	3b01      	subs	r3, #1
 8011640:	60a3      	str	r3, [r4, #8]
 8011642:	6823      	ldr	r3, [r4, #0]
 8011644:	1c5a      	adds	r2, r3, #1
 8011646:	6022      	str	r2, [r4, #0]
 8011648:	701e      	strb	r6, [r3, #0]
 801164a:	6962      	ldr	r2, [r4, #20]
 801164c:	1c43      	adds	r3, r0, #1
 801164e:	429a      	cmp	r2, r3
 8011650:	d004      	beq.n	801165c <__swbuf_r+0x6e>
 8011652:	89a3      	ldrh	r3, [r4, #12]
 8011654:	07db      	lsls	r3, r3, #31
 8011656:	d5e1      	bpl.n	801161c <__swbuf_r+0x2e>
 8011658:	2e0a      	cmp	r6, #10
 801165a:	d1df      	bne.n	801161c <__swbuf_r+0x2e>
 801165c:	4621      	mov	r1, r4
 801165e:	4628      	mov	r0, r5
 8011660:	f001 fcdc 	bl	801301c <_fflush_r>
 8011664:	2800      	cmp	r0, #0
 8011666:	d0d9      	beq.n	801161c <__swbuf_r+0x2e>
 8011668:	e7d6      	b.n	8011618 <__swbuf_r+0x2a>
	...

0801166c <__swsetup_r>:
 801166c:	b538      	push	{r3, r4, r5, lr}
 801166e:	4b29      	ldr	r3, [pc, #164]	@ (8011714 <__swsetup_r+0xa8>)
 8011670:	4605      	mov	r5, r0
 8011672:	6818      	ldr	r0, [r3, #0]
 8011674:	460c      	mov	r4, r1
 8011676:	b118      	cbz	r0, 8011680 <__swsetup_r+0x14>
 8011678:	6a03      	ldr	r3, [r0, #32]
 801167a:	b90b      	cbnz	r3, 8011680 <__swsetup_r+0x14>
 801167c:	f7ff fece 	bl	801141c <__sinit>
 8011680:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011684:	0719      	lsls	r1, r3, #28
 8011686:	d422      	bmi.n	80116ce <__swsetup_r+0x62>
 8011688:	06da      	lsls	r2, r3, #27
 801168a:	d407      	bmi.n	801169c <__swsetup_r+0x30>
 801168c:	2209      	movs	r2, #9
 801168e:	602a      	str	r2, [r5, #0]
 8011690:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011694:	81a3      	strh	r3, [r4, #12]
 8011696:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801169a:	e033      	b.n	8011704 <__swsetup_r+0x98>
 801169c:	0758      	lsls	r0, r3, #29
 801169e:	d512      	bpl.n	80116c6 <__swsetup_r+0x5a>
 80116a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80116a2:	b141      	cbz	r1, 80116b6 <__swsetup_r+0x4a>
 80116a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80116a8:	4299      	cmp	r1, r3
 80116aa:	d002      	beq.n	80116b2 <__swsetup_r+0x46>
 80116ac:	4628      	mov	r0, r5
 80116ae:	f000 ff2b 	bl	8012508 <_free_r>
 80116b2:	2300      	movs	r3, #0
 80116b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80116b6:	89a3      	ldrh	r3, [r4, #12]
 80116b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80116bc:	81a3      	strh	r3, [r4, #12]
 80116be:	2300      	movs	r3, #0
 80116c0:	6063      	str	r3, [r4, #4]
 80116c2:	6923      	ldr	r3, [r4, #16]
 80116c4:	6023      	str	r3, [r4, #0]
 80116c6:	89a3      	ldrh	r3, [r4, #12]
 80116c8:	f043 0308 	orr.w	r3, r3, #8
 80116cc:	81a3      	strh	r3, [r4, #12]
 80116ce:	6923      	ldr	r3, [r4, #16]
 80116d0:	b94b      	cbnz	r3, 80116e6 <__swsetup_r+0x7a>
 80116d2:	89a3      	ldrh	r3, [r4, #12]
 80116d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80116d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80116dc:	d003      	beq.n	80116e6 <__swsetup_r+0x7a>
 80116de:	4621      	mov	r1, r4
 80116e0:	4628      	mov	r0, r5
 80116e2:	f001 fce9 	bl	80130b8 <__smakebuf_r>
 80116e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80116ea:	f013 0201 	ands.w	r2, r3, #1
 80116ee:	d00a      	beq.n	8011706 <__swsetup_r+0x9a>
 80116f0:	2200      	movs	r2, #0
 80116f2:	60a2      	str	r2, [r4, #8]
 80116f4:	6962      	ldr	r2, [r4, #20]
 80116f6:	4252      	negs	r2, r2
 80116f8:	61a2      	str	r2, [r4, #24]
 80116fa:	6922      	ldr	r2, [r4, #16]
 80116fc:	b942      	cbnz	r2, 8011710 <__swsetup_r+0xa4>
 80116fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011702:	d1c5      	bne.n	8011690 <__swsetup_r+0x24>
 8011704:	bd38      	pop	{r3, r4, r5, pc}
 8011706:	0799      	lsls	r1, r3, #30
 8011708:	bf58      	it	pl
 801170a:	6962      	ldrpl	r2, [r4, #20]
 801170c:	60a2      	str	r2, [r4, #8]
 801170e:	e7f4      	b.n	80116fa <__swsetup_r+0x8e>
 8011710:	2000      	movs	r0, #0
 8011712:	e7f7      	b.n	8011704 <__swsetup_r+0x98>
 8011714:	20000044 	.word	0x20000044

08011718 <memset>:
 8011718:	4402      	add	r2, r0
 801171a:	4603      	mov	r3, r0
 801171c:	4293      	cmp	r3, r2
 801171e:	d100      	bne.n	8011722 <memset+0xa>
 8011720:	4770      	bx	lr
 8011722:	f803 1b01 	strb.w	r1, [r3], #1
 8011726:	e7f9      	b.n	801171c <memset+0x4>

08011728 <_localeconv_r>:
 8011728:	4800      	ldr	r0, [pc, #0]	@ (801172c <_localeconv_r+0x4>)
 801172a:	4770      	bx	lr
 801172c:	20000184 	.word	0x20000184

08011730 <_close_r>:
 8011730:	b538      	push	{r3, r4, r5, lr}
 8011732:	4d06      	ldr	r5, [pc, #24]	@ (801174c <_close_r+0x1c>)
 8011734:	2300      	movs	r3, #0
 8011736:	4604      	mov	r4, r0
 8011738:	4608      	mov	r0, r1
 801173a:	602b      	str	r3, [r5, #0]
 801173c:	f7f1 ff44 	bl	80035c8 <_close>
 8011740:	1c43      	adds	r3, r0, #1
 8011742:	d102      	bne.n	801174a <_close_r+0x1a>
 8011744:	682b      	ldr	r3, [r5, #0]
 8011746:	b103      	cbz	r3, 801174a <_close_r+0x1a>
 8011748:	6023      	str	r3, [r4, #0]
 801174a:	bd38      	pop	{r3, r4, r5, pc}
 801174c:	2002a750 	.word	0x2002a750

08011750 <_lseek_r>:
 8011750:	b538      	push	{r3, r4, r5, lr}
 8011752:	4d07      	ldr	r5, [pc, #28]	@ (8011770 <_lseek_r+0x20>)
 8011754:	4604      	mov	r4, r0
 8011756:	4608      	mov	r0, r1
 8011758:	4611      	mov	r1, r2
 801175a:	2200      	movs	r2, #0
 801175c:	602a      	str	r2, [r5, #0]
 801175e:	461a      	mov	r2, r3
 8011760:	f7f1 ff59 	bl	8003616 <_lseek>
 8011764:	1c43      	adds	r3, r0, #1
 8011766:	d102      	bne.n	801176e <_lseek_r+0x1e>
 8011768:	682b      	ldr	r3, [r5, #0]
 801176a:	b103      	cbz	r3, 801176e <_lseek_r+0x1e>
 801176c:	6023      	str	r3, [r4, #0]
 801176e:	bd38      	pop	{r3, r4, r5, pc}
 8011770:	2002a750 	.word	0x2002a750

08011774 <_read_r>:
 8011774:	b538      	push	{r3, r4, r5, lr}
 8011776:	4d07      	ldr	r5, [pc, #28]	@ (8011794 <_read_r+0x20>)
 8011778:	4604      	mov	r4, r0
 801177a:	4608      	mov	r0, r1
 801177c:	4611      	mov	r1, r2
 801177e:	2200      	movs	r2, #0
 8011780:	602a      	str	r2, [r5, #0]
 8011782:	461a      	mov	r2, r3
 8011784:	f7f1 ff03 	bl	800358e <_read>
 8011788:	1c43      	adds	r3, r0, #1
 801178a:	d102      	bne.n	8011792 <_read_r+0x1e>
 801178c:	682b      	ldr	r3, [r5, #0]
 801178e:	b103      	cbz	r3, 8011792 <_read_r+0x1e>
 8011790:	6023      	str	r3, [r4, #0]
 8011792:	bd38      	pop	{r3, r4, r5, pc}
 8011794:	2002a750 	.word	0x2002a750

08011798 <_sbrk_r>:
 8011798:	b538      	push	{r3, r4, r5, lr}
 801179a:	4d06      	ldr	r5, [pc, #24]	@ (80117b4 <_sbrk_r+0x1c>)
 801179c:	2300      	movs	r3, #0
 801179e:	4604      	mov	r4, r0
 80117a0:	4608      	mov	r0, r1
 80117a2:	602b      	str	r3, [r5, #0]
 80117a4:	f7f1 ff44 	bl	8003630 <_sbrk>
 80117a8:	1c43      	adds	r3, r0, #1
 80117aa:	d102      	bne.n	80117b2 <_sbrk_r+0x1a>
 80117ac:	682b      	ldr	r3, [r5, #0]
 80117ae:	b103      	cbz	r3, 80117b2 <_sbrk_r+0x1a>
 80117b0:	6023      	str	r3, [r4, #0]
 80117b2:	bd38      	pop	{r3, r4, r5, pc}
 80117b4:	2002a750 	.word	0x2002a750

080117b8 <_write_r>:
 80117b8:	b538      	push	{r3, r4, r5, lr}
 80117ba:	4d07      	ldr	r5, [pc, #28]	@ (80117d8 <_write_r+0x20>)
 80117bc:	4604      	mov	r4, r0
 80117be:	4608      	mov	r0, r1
 80117c0:	4611      	mov	r1, r2
 80117c2:	2200      	movs	r2, #0
 80117c4:	602a      	str	r2, [r5, #0]
 80117c6:	461a      	mov	r2, r3
 80117c8:	f7f0 f8de 	bl	8001988 <_write>
 80117cc:	1c43      	adds	r3, r0, #1
 80117ce:	d102      	bne.n	80117d6 <_write_r+0x1e>
 80117d0:	682b      	ldr	r3, [r5, #0]
 80117d2:	b103      	cbz	r3, 80117d6 <_write_r+0x1e>
 80117d4:	6023      	str	r3, [r4, #0]
 80117d6:	bd38      	pop	{r3, r4, r5, pc}
 80117d8:	2002a750 	.word	0x2002a750

080117dc <__errno>:
 80117dc:	4b01      	ldr	r3, [pc, #4]	@ (80117e4 <__errno+0x8>)
 80117de:	6818      	ldr	r0, [r3, #0]
 80117e0:	4770      	bx	lr
 80117e2:	bf00      	nop
 80117e4:	20000044 	.word	0x20000044

080117e8 <__libc_init_array>:
 80117e8:	b570      	push	{r4, r5, r6, lr}
 80117ea:	4d0d      	ldr	r5, [pc, #52]	@ (8011820 <__libc_init_array+0x38>)
 80117ec:	4c0d      	ldr	r4, [pc, #52]	@ (8011824 <__libc_init_array+0x3c>)
 80117ee:	1b64      	subs	r4, r4, r5
 80117f0:	10a4      	asrs	r4, r4, #2
 80117f2:	2600      	movs	r6, #0
 80117f4:	42a6      	cmp	r6, r4
 80117f6:	d109      	bne.n	801180c <__libc_init_array+0x24>
 80117f8:	4d0b      	ldr	r5, [pc, #44]	@ (8011828 <__libc_init_array+0x40>)
 80117fa:	4c0c      	ldr	r4, [pc, #48]	@ (801182c <__libc_init_array+0x44>)
 80117fc:	f001 fd6a 	bl	80132d4 <_init>
 8011800:	1b64      	subs	r4, r4, r5
 8011802:	10a4      	asrs	r4, r4, #2
 8011804:	2600      	movs	r6, #0
 8011806:	42a6      	cmp	r6, r4
 8011808:	d105      	bne.n	8011816 <__libc_init_array+0x2e>
 801180a:	bd70      	pop	{r4, r5, r6, pc}
 801180c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011810:	4798      	blx	r3
 8011812:	3601      	adds	r6, #1
 8011814:	e7ee      	b.n	80117f4 <__libc_init_array+0xc>
 8011816:	f855 3b04 	ldr.w	r3, [r5], #4
 801181a:	4798      	blx	r3
 801181c:	3601      	adds	r6, #1
 801181e:	e7f2      	b.n	8011806 <__libc_init_array+0x1e>
 8011820:	0801382c 	.word	0x0801382c
 8011824:	0801382c 	.word	0x0801382c
 8011828:	0801382c 	.word	0x0801382c
 801182c:	08013830 	.word	0x08013830

08011830 <__retarget_lock_init_recursive>:
 8011830:	4770      	bx	lr

08011832 <__retarget_lock_acquire_recursive>:
 8011832:	4770      	bx	lr

08011834 <__retarget_lock_release_recursive>:
 8011834:	4770      	bx	lr

08011836 <memcpy>:
 8011836:	440a      	add	r2, r1
 8011838:	4291      	cmp	r1, r2
 801183a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801183e:	d100      	bne.n	8011842 <memcpy+0xc>
 8011840:	4770      	bx	lr
 8011842:	b510      	push	{r4, lr}
 8011844:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011848:	f803 4f01 	strb.w	r4, [r3, #1]!
 801184c:	4291      	cmp	r1, r2
 801184e:	d1f9      	bne.n	8011844 <memcpy+0xe>
 8011850:	bd10      	pop	{r4, pc}

08011852 <quorem>:
 8011852:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011856:	6903      	ldr	r3, [r0, #16]
 8011858:	690c      	ldr	r4, [r1, #16]
 801185a:	42a3      	cmp	r3, r4
 801185c:	4607      	mov	r7, r0
 801185e:	db7e      	blt.n	801195e <quorem+0x10c>
 8011860:	3c01      	subs	r4, #1
 8011862:	f101 0814 	add.w	r8, r1, #20
 8011866:	00a3      	lsls	r3, r4, #2
 8011868:	f100 0514 	add.w	r5, r0, #20
 801186c:	9300      	str	r3, [sp, #0]
 801186e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011872:	9301      	str	r3, [sp, #4]
 8011874:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011878:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801187c:	3301      	adds	r3, #1
 801187e:	429a      	cmp	r2, r3
 8011880:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011884:	fbb2 f6f3 	udiv	r6, r2, r3
 8011888:	d32e      	bcc.n	80118e8 <quorem+0x96>
 801188a:	f04f 0a00 	mov.w	sl, #0
 801188e:	46c4      	mov	ip, r8
 8011890:	46ae      	mov	lr, r5
 8011892:	46d3      	mov	fp, sl
 8011894:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011898:	b298      	uxth	r0, r3
 801189a:	fb06 a000 	mla	r0, r6, r0, sl
 801189e:	0c02      	lsrs	r2, r0, #16
 80118a0:	0c1b      	lsrs	r3, r3, #16
 80118a2:	fb06 2303 	mla	r3, r6, r3, r2
 80118a6:	f8de 2000 	ldr.w	r2, [lr]
 80118aa:	b280      	uxth	r0, r0
 80118ac:	b292      	uxth	r2, r2
 80118ae:	1a12      	subs	r2, r2, r0
 80118b0:	445a      	add	r2, fp
 80118b2:	f8de 0000 	ldr.w	r0, [lr]
 80118b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80118ba:	b29b      	uxth	r3, r3
 80118bc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80118c0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80118c4:	b292      	uxth	r2, r2
 80118c6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80118ca:	45e1      	cmp	r9, ip
 80118cc:	f84e 2b04 	str.w	r2, [lr], #4
 80118d0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80118d4:	d2de      	bcs.n	8011894 <quorem+0x42>
 80118d6:	9b00      	ldr	r3, [sp, #0]
 80118d8:	58eb      	ldr	r3, [r5, r3]
 80118da:	b92b      	cbnz	r3, 80118e8 <quorem+0x96>
 80118dc:	9b01      	ldr	r3, [sp, #4]
 80118de:	3b04      	subs	r3, #4
 80118e0:	429d      	cmp	r5, r3
 80118e2:	461a      	mov	r2, r3
 80118e4:	d32f      	bcc.n	8011946 <quorem+0xf4>
 80118e6:	613c      	str	r4, [r7, #16]
 80118e8:	4638      	mov	r0, r7
 80118ea:	f001 f8c9 	bl	8012a80 <__mcmp>
 80118ee:	2800      	cmp	r0, #0
 80118f0:	db25      	blt.n	801193e <quorem+0xec>
 80118f2:	4629      	mov	r1, r5
 80118f4:	2000      	movs	r0, #0
 80118f6:	f858 2b04 	ldr.w	r2, [r8], #4
 80118fa:	f8d1 c000 	ldr.w	ip, [r1]
 80118fe:	fa1f fe82 	uxth.w	lr, r2
 8011902:	fa1f f38c 	uxth.w	r3, ip
 8011906:	eba3 030e 	sub.w	r3, r3, lr
 801190a:	4403      	add	r3, r0
 801190c:	0c12      	lsrs	r2, r2, #16
 801190e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011912:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011916:	b29b      	uxth	r3, r3
 8011918:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801191c:	45c1      	cmp	r9, r8
 801191e:	f841 3b04 	str.w	r3, [r1], #4
 8011922:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011926:	d2e6      	bcs.n	80118f6 <quorem+0xa4>
 8011928:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801192c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011930:	b922      	cbnz	r2, 801193c <quorem+0xea>
 8011932:	3b04      	subs	r3, #4
 8011934:	429d      	cmp	r5, r3
 8011936:	461a      	mov	r2, r3
 8011938:	d30b      	bcc.n	8011952 <quorem+0x100>
 801193a:	613c      	str	r4, [r7, #16]
 801193c:	3601      	adds	r6, #1
 801193e:	4630      	mov	r0, r6
 8011940:	b003      	add	sp, #12
 8011942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011946:	6812      	ldr	r2, [r2, #0]
 8011948:	3b04      	subs	r3, #4
 801194a:	2a00      	cmp	r2, #0
 801194c:	d1cb      	bne.n	80118e6 <quorem+0x94>
 801194e:	3c01      	subs	r4, #1
 8011950:	e7c6      	b.n	80118e0 <quorem+0x8e>
 8011952:	6812      	ldr	r2, [r2, #0]
 8011954:	3b04      	subs	r3, #4
 8011956:	2a00      	cmp	r2, #0
 8011958:	d1ef      	bne.n	801193a <quorem+0xe8>
 801195a:	3c01      	subs	r4, #1
 801195c:	e7ea      	b.n	8011934 <quorem+0xe2>
 801195e:	2000      	movs	r0, #0
 8011960:	e7ee      	b.n	8011940 <quorem+0xee>
 8011962:	0000      	movs	r0, r0
 8011964:	0000      	movs	r0, r0
	...

08011968 <_dtoa_r>:
 8011968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801196c:	69c7      	ldr	r7, [r0, #28]
 801196e:	b097      	sub	sp, #92	@ 0x5c
 8011970:	ed8d 0b04 	vstr	d0, [sp, #16]
 8011974:	ec55 4b10 	vmov	r4, r5, d0
 8011978:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801197a:	9107      	str	r1, [sp, #28]
 801197c:	4681      	mov	r9, r0
 801197e:	920c      	str	r2, [sp, #48]	@ 0x30
 8011980:	9311      	str	r3, [sp, #68]	@ 0x44
 8011982:	b97f      	cbnz	r7, 80119a4 <_dtoa_r+0x3c>
 8011984:	2010      	movs	r0, #16
 8011986:	f7fe ffa9 	bl	80108dc <malloc>
 801198a:	4602      	mov	r2, r0
 801198c:	f8c9 001c 	str.w	r0, [r9, #28]
 8011990:	b920      	cbnz	r0, 801199c <_dtoa_r+0x34>
 8011992:	4ba9      	ldr	r3, [pc, #676]	@ (8011c38 <_dtoa_r+0x2d0>)
 8011994:	21ef      	movs	r1, #239	@ 0xef
 8011996:	48a9      	ldr	r0, [pc, #676]	@ (8011c3c <_dtoa_r+0x2d4>)
 8011998:	f001 fbec 	bl	8013174 <__assert_func>
 801199c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80119a0:	6007      	str	r7, [r0, #0]
 80119a2:	60c7      	str	r7, [r0, #12]
 80119a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80119a8:	6819      	ldr	r1, [r3, #0]
 80119aa:	b159      	cbz	r1, 80119c4 <_dtoa_r+0x5c>
 80119ac:	685a      	ldr	r2, [r3, #4]
 80119ae:	604a      	str	r2, [r1, #4]
 80119b0:	2301      	movs	r3, #1
 80119b2:	4093      	lsls	r3, r2
 80119b4:	608b      	str	r3, [r1, #8]
 80119b6:	4648      	mov	r0, r9
 80119b8:	f000 fe30 	bl	801261c <_Bfree>
 80119bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80119c0:	2200      	movs	r2, #0
 80119c2:	601a      	str	r2, [r3, #0]
 80119c4:	1e2b      	subs	r3, r5, #0
 80119c6:	bfb9      	ittee	lt
 80119c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80119cc:	9305      	strlt	r3, [sp, #20]
 80119ce:	2300      	movge	r3, #0
 80119d0:	6033      	strge	r3, [r6, #0]
 80119d2:	9f05      	ldr	r7, [sp, #20]
 80119d4:	4b9a      	ldr	r3, [pc, #616]	@ (8011c40 <_dtoa_r+0x2d8>)
 80119d6:	bfbc      	itt	lt
 80119d8:	2201      	movlt	r2, #1
 80119da:	6032      	strlt	r2, [r6, #0]
 80119dc:	43bb      	bics	r3, r7
 80119de:	d112      	bne.n	8011a06 <_dtoa_r+0x9e>
 80119e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80119e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80119e6:	6013      	str	r3, [r2, #0]
 80119e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80119ec:	4323      	orrs	r3, r4
 80119ee:	f000 855a 	beq.w	80124a6 <_dtoa_r+0xb3e>
 80119f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80119f4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8011c54 <_dtoa_r+0x2ec>
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	f000 855c 	beq.w	80124b6 <_dtoa_r+0xb4e>
 80119fe:	f10a 0303 	add.w	r3, sl, #3
 8011a02:	f000 bd56 	b.w	80124b2 <_dtoa_r+0xb4a>
 8011a06:	ed9d 7b04 	vldr	d7, [sp, #16]
 8011a0a:	2200      	movs	r2, #0
 8011a0c:	ec51 0b17 	vmov	r0, r1, d7
 8011a10:	2300      	movs	r3, #0
 8011a12:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8011a16:	f7ef f867 	bl	8000ae8 <__aeabi_dcmpeq>
 8011a1a:	4680      	mov	r8, r0
 8011a1c:	b158      	cbz	r0, 8011a36 <_dtoa_r+0xce>
 8011a1e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011a20:	2301      	movs	r3, #1
 8011a22:	6013      	str	r3, [r2, #0]
 8011a24:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011a26:	b113      	cbz	r3, 8011a2e <_dtoa_r+0xc6>
 8011a28:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011a2a:	4b86      	ldr	r3, [pc, #536]	@ (8011c44 <_dtoa_r+0x2dc>)
 8011a2c:	6013      	str	r3, [r2, #0]
 8011a2e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8011c58 <_dtoa_r+0x2f0>
 8011a32:	f000 bd40 	b.w	80124b6 <_dtoa_r+0xb4e>
 8011a36:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8011a3a:	aa14      	add	r2, sp, #80	@ 0x50
 8011a3c:	a915      	add	r1, sp, #84	@ 0x54
 8011a3e:	4648      	mov	r0, r9
 8011a40:	f001 f8ce 	bl	8012be0 <__d2b>
 8011a44:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8011a48:	9002      	str	r0, [sp, #8]
 8011a4a:	2e00      	cmp	r6, #0
 8011a4c:	d078      	beq.n	8011b40 <_dtoa_r+0x1d8>
 8011a4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011a50:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8011a54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011a58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8011a5c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011a60:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8011a64:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011a68:	4619      	mov	r1, r3
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	4b76      	ldr	r3, [pc, #472]	@ (8011c48 <_dtoa_r+0x2e0>)
 8011a6e:	f7ee fc1b 	bl	80002a8 <__aeabi_dsub>
 8011a72:	a36b      	add	r3, pc, #428	@ (adr r3, 8011c20 <_dtoa_r+0x2b8>)
 8011a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a78:	f7ee fdce 	bl	8000618 <__aeabi_dmul>
 8011a7c:	a36a      	add	r3, pc, #424	@ (adr r3, 8011c28 <_dtoa_r+0x2c0>)
 8011a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a82:	f7ee fc13 	bl	80002ac <__adddf3>
 8011a86:	4604      	mov	r4, r0
 8011a88:	4630      	mov	r0, r6
 8011a8a:	460d      	mov	r5, r1
 8011a8c:	f7ee fd5a 	bl	8000544 <__aeabi_i2d>
 8011a90:	a367      	add	r3, pc, #412	@ (adr r3, 8011c30 <_dtoa_r+0x2c8>)
 8011a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a96:	f7ee fdbf 	bl	8000618 <__aeabi_dmul>
 8011a9a:	4602      	mov	r2, r0
 8011a9c:	460b      	mov	r3, r1
 8011a9e:	4620      	mov	r0, r4
 8011aa0:	4629      	mov	r1, r5
 8011aa2:	f7ee fc03 	bl	80002ac <__adddf3>
 8011aa6:	4604      	mov	r4, r0
 8011aa8:	460d      	mov	r5, r1
 8011aaa:	f7ef f865 	bl	8000b78 <__aeabi_d2iz>
 8011aae:	2200      	movs	r2, #0
 8011ab0:	4607      	mov	r7, r0
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	4620      	mov	r0, r4
 8011ab6:	4629      	mov	r1, r5
 8011ab8:	f7ef f820 	bl	8000afc <__aeabi_dcmplt>
 8011abc:	b140      	cbz	r0, 8011ad0 <_dtoa_r+0x168>
 8011abe:	4638      	mov	r0, r7
 8011ac0:	f7ee fd40 	bl	8000544 <__aeabi_i2d>
 8011ac4:	4622      	mov	r2, r4
 8011ac6:	462b      	mov	r3, r5
 8011ac8:	f7ef f80e 	bl	8000ae8 <__aeabi_dcmpeq>
 8011acc:	b900      	cbnz	r0, 8011ad0 <_dtoa_r+0x168>
 8011ace:	3f01      	subs	r7, #1
 8011ad0:	2f16      	cmp	r7, #22
 8011ad2:	d852      	bhi.n	8011b7a <_dtoa_r+0x212>
 8011ad4:	4b5d      	ldr	r3, [pc, #372]	@ (8011c4c <_dtoa_r+0x2e4>)
 8011ad6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ade:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8011ae2:	f7ef f80b 	bl	8000afc <__aeabi_dcmplt>
 8011ae6:	2800      	cmp	r0, #0
 8011ae8:	d049      	beq.n	8011b7e <_dtoa_r+0x216>
 8011aea:	3f01      	subs	r7, #1
 8011aec:	2300      	movs	r3, #0
 8011aee:	9310      	str	r3, [sp, #64]	@ 0x40
 8011af0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011af2:	1b9b      	subs	r3, r3, r6
 8011af4:	1e5a      	subs	r2, r3, #1
 8011af6:	bf45      	ittet	mi
 8011af8:	f1c3 0301 	rsbmi	r3, r3, #1
 8011afc:	9300      	strmi	r3, [sp, #0]
 8011afe:	2300      	movpl	r3, #0
 8011b00:	2300      	movmi	r3, #0
 8011b02:	9206      	str	r2, [sp, #24]
 8011b04:	bf54      	ite	pl
 8011b06:	9300      	strpl	r3, [sp, #0]
 8011b08:	9306      	strmi	r3, [sp, #24]
 8011b0a:	2f00      	cmp	r7, #0
 8011b0c:	db39      	blt.n	8011b82 <_dtoa_r+0x21a>
 8011b0e:	9b06      	ldr	r3, [sp, #24]
 8011b10:	970d      	str	r7, [sp, #52]	@ 0x34
 8011b12:	443b      	add	r3, r7
 8011b14:	9306      	str	r3, [sp, #24]
 8011b16:	2300      	movs	r3, #0
 8011b18:	9308      	str	r3, [sp, #32]
 8011b1a:	9b07      	ldr	r3, [sp, #28]
 8011b1c:	2b09      	cmp	r3, #9
 8011b1e:	d863      	bhi.n	8011be8 <_dtoa_r+0x280>
 8011b20:	2b05      	cmp	r3, #5
 8011b22:	bfc4      	itt	gt
 8011b24:	3b04      	subgt	r3, #4
 8011b26:	9307      	strgt	r3, [sp, #28]
 8011b28:	9b07      	ldr	r3, [sp, #28]
 8011b2a:	f1a3 0302 	sub.w	r3, r3, #2
 8011b2e:	bfcc      	ite	gt
 8011b30:	2400      	movgt	r4, #0
 8011b32:	2401      	movle	r4, #1
 8011b34:	2b03      	cmp	r3, #3
 8011b36:	d863      	bhi.n	8011c00 <_dtoa_r+0x298>
 8011b38:	e8df f003 	tbb	[pc, r3]
 8011b3c:	2b375452 	.word	0x2b375452
 8011b40:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8011b44:	441e      	add	r6, r3
 8011b46:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011b4a:	2b20      	cmp	r3, #32
 8011b4c:	bfc1      	itttt	gt
 8011b4e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011b52:	409f      	lslgt	r7, r3
 8011b54:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8011b58:	fa24 f303 	lsrgt.w	r3, r4, r3
 8011b5c:	bfd6      	itet	le
 8011b5e:	f1c3 0320 	rsble	r3, r3, #32
 8011b62:	ea47 0003 	orrgt.w	r0, r7, r3
 8011b66:	fa04 f003 	lslle.w	r0, r4, r3
 8011b6a:	f7ee fcdb 	bl	8000524 <__aeabi_ui2d>
 8011b6e:	2201      	movs	r2, #1
 8011b70:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8011b74:	3e01      	subs	r6, #1
 8011b76:	9212      	str	r2, [sp, #72]	@ 0x48
 8011b78:	e776      	b.n	8011a68 <_dtoa_r+0x100>
 8011b7a:	2301      	movs	r3, #1
 8011b7c:	e7b7      	b.n	8011aee <_dtoa_r+0x186>
 8011b7e:	9010      	str	r0, [sp, #64]	@ 0x40
 8011b80:	e7b6      	b.n	8011af0 <_dtoa_r+0x188>
 8011b82:	9b00      	ldr	r3, [sp, #0]
 8011b84:	1bdb      	subs	r3, r3, r7
 8011b86:	9300      	str	r3, [sp, #0]
 8011b88:	427b      	negs	r3, r7
 8011b8a:	9308      	str	r3, [sp, #32]
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	930d      	str	r3, [sp, #52]	@ 0x34
 8011b90:	e7c3      	b.n	8011b1a <_dtoa_r+0x1b2>
 8011b92:	2301      	movs	r3, #1
 8011b94:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011b98:	eb07 0b03 	add.w	fp, r7, r3
 8011b9c:	f10b 0301 	add.w	r3, fp, #1
 8011ba0:	2b01      	cmp	r3, #1
 8011ba2:	9303      	str	r3, [sp, #12]
 8011ba4:	bfb8      	it	lt
 8011ba6:	2301      	movlt	r3, #1
 8011ba8:	e006      	b.n	8011bb8 <_dtoa_r+0x250>
 8011baa:	2301      	movs	r3, #1
 8011bac:	9309      	str	r3, [sp, #36]	@ 0x24
 8011bae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	dd28      	ble.n	8011c06 <_dtoa_r+0x29e>
 8011bb4:	469b      	mov	fp, r3
 8011bb6:	9303      	str	r3, [sp, #12]
 8011bb8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8011bbc:	2100      	movs	r1, #0
 8011bbe:	2204      	movs	r2, #4
 8011bc0:	f102 0514 	add.w	r5, r2, #20
 8011bc4:	429d      	cmp	r5, r3
 8011bc6:	d926      	bls.n	8011c16 <_dtoa_r+0x2ae>
 8011bc8:	6041      	str	r1, [r0, #4]
 8011bca:	4648      	mov	r0, r9
 8011bcc:	f000 fce6 	bl	801259c <_Balloc>
 8011bd0:	4682      	mov	sl, r0
 8011bd2:	2800      	cmp	r0, #0
 8011bd4:	d142      	bne.n	8011c5c <_dtoa_r+0x2f4>
 8011bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8011c50 <_dtoa_r+0x2e8>)
 8011bd8:	4602      	mov	r2, r0
 8011bda:	f240 11af 	movw	r1, #431	@ 0x1af
 8011bde:	e6da      	b.n	8011996 <_dtoa_r+0x2e>
 8011be0:	2300      	movs	r3, #0
 8011be2:	e7e3      	b.n	8011bac <_dtoa_r+0x244>
 8011be4:	2300      	movs	r3, #0
 8011be6:	e7d5      	b.n	8011b94 <_dtoa_r+0x22c>
 8011be8:	2401      	movs	r4, #1
 8011bea:	2300      	movs	r3, #0
 8011bec:	9307      	str	r3, [sp, #28]
 8011bee:	9409      	str	r4, [sp, #36]	@ 0x24
 8011bf0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8011bf4:	2200      	movs	r2, #0
 8011bf6:	f8cd b00c 	str.w	fp, [sp, #12]
 8011bfa:	2312      	movs	r3, #18
 8011bfc:	920c      	str	r2, [sp, #48]	@ 0x30
 8011bfe:	e7db      	b.n	8011bb8 <_dtoa_r+0x250>
 8011c00:	2301      	movs	r3, #1
 8011c02:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c04:	e7f4      	b.n	8011bf0 <_dtoa_r+0x288>
 8011c06:	f04f 0b01 	mov.w	fp, #1
 8011c0a:	f8cd b00c 	str.w	fp, [sp, #12]
 8011c0e:	465b      	mov	r3, fp
 8011c10:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8011c14:	e7d0      	b.n	8011bb8 <_dtoa_r+0x250>
 8011c16:	3101      	adds	r1, #1
 8011c18:	0052      	lsls	r2, r2, #1
 8011c1a:	e7d1      	b.n	8011bc0 <_dtoa_r+0x258>
 8011c1c:	f3af 8000 	nop.w
 8011c20:	636f4361 	.word	0x636f4361
 8011c24:	3fd287a7 	.word	0x3fd287a7
 8011c28:	8b60c8b3 	.word	0x8b60c8b3
 8011c2c:	3fc68a28 	.word	0x3fc68a28
 8011c30:	509f79fb 	.word	0x509f79fb
 8011c34:	3fd34413 	.word	0x3fd34413
 8011c38:	080134ed 	.word	0x080134ed
 8011c3c:	08013504 	.word	0x08013504
 8011c40:	7ff00000 	.word	0x7ff00000
 8011c44:	080134bd 	.word	0x080134bd
 8011c48:	3ff80000 	.word	0x3ff80000
 8011c4c:	08013658 	.word	0x08013658
 8011c50:	0801355c 	.word	0x0801355c
 8011c54:	080134e9 	.word	0x080134e9
 8011c58:	080134bc 	.word	0x080134bc
 8011c5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011c60:	6018      	str	r0, [r3, #0]
 8011c62:	9b03      	ldr	r3, [sp, #12]
 8011c64:	2b0e      	cmp	r3, #14
 8011c66:	f200 80a1 	bhi.w	8011dac <_dtoa_r+0x444>
 8011c6a:	2c00      	cmp	r4, #0
 8011c6c:	f000 809e 	beq.w	8011dac <_dtoa_r+0x444>
 8011c70:	2f00      	cmp	r7, #0
 8011c72:	dd33      	ble.n	8011cdc <_dtoa_r+0x374>
 8011c74:	4b9c      	ldr	r3, [pc, #624]	@ (8011ee8 <_dtoa_r+0x580>)
 8011c76:	f007 020f 	and.w	r2, r7, #15
 8011c7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011c7e:	ed93 7b00 	vldr	d7, [r3]
 8011c82:	05f8      	lsls	r0, r7, #23
 8011c84:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8011c88:	ea4f 1427 	mov.w	r4, r7, asr #4
 8011c8c:	d516      	bpl.n	8011cbc <_dtoa_r+0x354>
 8011c8e:	4b97      	ldr	r3, [pc, #604]	@ (8011eec <_dtoa_r+0x584>)
 8011c90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8011c94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011c98:	f7ee fde8 	bl	800086c <__aeabi_ddiv>
 8011c9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011ca0:	f004 040f 	and.w	r4, r4, #15
 8011ca4:	2603      	movs	r6, #3
 8011ca6:	4d91      	ldr	r5, [pc, #580]	@ (8011eec <_dtoa_r+0x584>)
 8011ca8:	b954      	cbnz	r4, 8011cc0 <_dtoa_r+0x358>
 8011caa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011cae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011cb2:	f7ee fddb 	bl	800086c <__aeabi_ddiv>
 8011cb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011cba:	e028      	b.n	8011d0e <_dtoa_r+0x3a6>
 8011cbc:	2602      	movs	r6, #2
 8011cbe:	e7f2      	b.n	8011ca6 <_dtoa_r+0x33e>
 8011cc0:	07e1      	lsls	r1, r4, #31
 8011cc2:	d508      	bpl.n	8011cd6 <_dtoa_r+0x36e>
 8011cc4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011cc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011ccc:	f7ee fca4 	bl	8000618 <__aeabi_dmul>
 8011cd0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011cd4:	3601      	adds	r6, #1
 8011cd6:	1064      	asrs	r4, r4, #1
 8011cd8:	3508      	adds	r5, #8
 8011cda:	e7e5      	b.n	8011ca8 <_dtoa_r+0x340>
 8011cdc:	f000 80af 	beq.w	8011e3e <_dtoa_r+0x4d6>
 8011ce0:	427c      	negs	r4, r7
 8011ce2:	4b81      	ldr	r3, [pc, #516]	@ (8011ee8 <_dtoa_r+0x580>)
 8011ce4:	4d81      	ldr	r5, [pc, #516]	@ (8011eec <_dtoa_r+0x584>)
 8011ce6:	f004 020f 	and.w	r2, r4, #15
 8011cea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cf2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8011cf6:	f7ee fc8f 	bl	8000618 <__aeabi_dmul>
 8011cfa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011cfe:	1124      	asrs	r4, r4, #4
 8011d00:	2300      	movs	r3, #0
 8011d02:	2602      	movs	r6, #2
 8011d04:	2c00      	cmp	r4, #0
 8011d06:	f040 808f 	bne.w	8011e28 <_dtoa_r+0x4c0>
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d1d3      	bne.n	8011cb6 <_dtoa_r+0x34e>
 8011d0e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011d10:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	f000 8094 	beq.w	8011e42 <_dtoa_r+0x4da>
 8011d1a:	4b75      	ldr	r3, [pc, #468]	@ (8011ef0 <_dtoa_r+0x588>)
 8011d1c:	2200      	movs	r2, #0
 8011d1e:	4620      	mov	r0, r4
 8011d20:	4629      	mov	r1, r5
 8011d22:	f7ee feeb 	bl	8000afc <__aeabi_dcmplt>
 8011d26:	2800      	cmp	r0, #0
 8011d28:	f000 808b 	beq.w	8011e42 <_dtoa_r+0x4da>
 8011d2c:	9b03      	ldr	r3, [sp, #12]
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	f000 8087 	beq.w	8011e42 <_dtoa_r+0x4da>
 8011d34:	f1bb 0f00 	cmp.w	fp, #0
 8011d38:	dd34      	ble.n	8011da4 <_dtoa_r+0x43c>
 8011d3a:	4620      	mov	r0, r4
 8011d3c:	4b6d      	ldr	r3, [pc, #436]	@ (8011ef4 <_dtoa_r+0x58c>)
 8011d3e:	2200      	movs	r2, #0
 8011d40:	4629      	mov	r1, r5
 8011d42:	f7ee fc69 	bl	8000618 <__aeabi_dmul>
 8011d46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011d4a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8011d4e:	3601      	adds	r6, #1
 8011d50:	465c      	mov	r4, fp
 8011d52:	4630      	mov	r0, r6
 8011d54:	f7ee fbf6 	bl	8000544 <__aeabi_i2d>
 8011d58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011d5c:	f7ee fc5c 	bl	8000618 <__aeabi_dmul>
 8011d60:	4b65      	ldr	r3, [pc, #404]	@ (8011ef8 <_dtoa_r+0x590>)
 8011d62:	2200      	movs	r2, #0
 8011d64:	f7ee faa2 	bl	80002ac <__adddf3>
 8011d68:	4605      	mov	r5, r0
 8011d6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011d6e:	2c00      	cmp	r4, #0
 8011d70:	d16a      	bne.n	8011e48 <_dtoa_r+0x4e0>
 8011d72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011d76:	4b61      	ldr	r3, [pc, #388]	@ (8011efc <_dtoa_r+0x594>)
 8011d78:	2200      	movs	r2, #0
 8011d7a:	f7ee fa95 	bl	80002a8 <__aeabi_dsub>
 8011d7e:	4602      	mov	r2, r0
 8011d80:	460b      	mov	r3, r1
 8011d82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011d86:	462a      	mov	r2, r5
 8011d88:	4633      	mov	r3, r6
 8011d8a:	f7ee fed5 	bl	8000b38 <__aeabi_dcmpgt>
 8011d8e:	2800      	cmp	r0, #0
 8011d90:	f040 8298 	bne.w	80122c4 <_dtoa_r+0x95c>
 8011d94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011d98:	462a      	mov	r2, r5
 8011d9a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011d9e:	f7ee fead 	bl	8000afc <__aeabi_dcmplt>
 8011da2:	bb38      	cbnz	r0, 8011df4 <_dtoa_r+0x48c>
 8011da4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8011da8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8011dac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	f2c0 8157 	blt.w	8012062 <_dtoa_r+0x6fa>
 8011db4:	2f0e      	cmp	r7, #14
 8011db6:	f300 8154 	bgt.w	8012062 <_dtoa_r+0x6fa>
 8011dba:	4b4b      	ldr	r3, [pc, #300]	@ (8011ee8 <_dtoa_r+0x580>)
 8011dbc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011dc0:	ed93 7b00 	vldr	d7, [r3]
 8011dc4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	ed8d 7b00 	vstr	d7, [sp]
 8011dcc:	f280 80e5 	bge.w	8011f9a <_dtoa_r+0x632>
 8011dd0:	9b03      	ldr	r3, [sp, #12]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	f300 80e1 	bgt.w	8011f9a <_dtoa_r+0x632>
 8011dd8:	d10c      	bne.n	8011df4 <_dtoa_r+0x48c>
 8011dda:	4b48      	ldr	r3, [pc, #288]	@ (8011efc <_dtoa_r+0x594>)
 8011ddc:	2200      	movs	r2, #0
 8011dde:	ec51 0b17 	vmov	r0, r1, d7
 8011de2:	f7ee fc19 	bl	8000618 <__aeabi_dmul>
 8011de6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011dea:	f7ee fe9b 	bl	8000b24 <__aeabi_dcmpge>
 8011dee:	2800      	cmp	r0, #0
 8011df0:	f000 8266 	beq.w	80122c0 <_dtoa_r+0x958>
 8011df4:	2400      	movs	r4, #0
 8011df6:	4625      	mov	r5, r4
 8011df8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011dfa:	4656      	mov	r6, sl
 8011dfc:	ea6f 0803 	mvn.w	r8, r3
 8011e00:	2700      	movs	r7, #0
 8011e02:	4621      	mov	r1, r4
 8011e04:	4648      	mov	r0, r9
 8011e06:	f000 fc09 	bl	801261c <_Bfree>
 8011e0a:	2d00      	cmp	r5, #0
 8011e0c:	f000 80bd 	beq.w	8011f8a <_dtoa_r+0x622>
 8011e10:	b12f      	cbz	r7, 8011e1e <_dtoa_r+0x4b6>
 8011e12:	42af      	cmp	r7, r5
 8011e14:	d003      	beq.n	8011e1e <_dtoa_r+0x4b6>
 8011e16:	4639      	mov	r1, r7
 8011e18:	4648      	mov	r0, r9
 8011e1a:	f000 fbff 	bl	801261c <_Bfree>
 8011e1e:	4629      	mov	r1, r5
 8011e20:	4648      	mov	r0, r9
 8011e22:	f000 fbfb 	bl	801261c <_Bfree>
 8011e26:	e0b0      	b.n	8011f8a <_dtoa_r+0x622>
 8011e28:	07e2      	lsls	r2, r4, #31
 8011e2a:	d505      	bpl.n	8011e38 <_dtoa_r+0x4d0>
 8011e2c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011e30:	f7ee fbf2 	bl	8000618 <__aeabi_dmul>
 8011e34:	3601      	adds	r6, #1
 8011e36:	2301      	movs	r3, #1
 8011e38:	1064      	asrs	r4, r4, #1
 8011e3a:	3508      	adds	r5, #8
 8011e3c:	e762      	b.n	8011d04 <_dtoa_r+0x39c>
 8011e3e:	2602      	movs	r6, #2
 8011e40:	e765      	b.n	8011d0e <_dtoa_r+0x3a6>
 8011e42:	9c03      	ldr	r4, [sp, #12]
 8011e44:	46b8      	mov	r8, r7
 8011e46:	e784      	b.n	8011d52 <_dtoa_r+0x3ea>
 8011e48:	4b27      	ldr	r3, [pc, #156]	@ (8011ee8 <_dtoa_r+0x580>)
 8011e4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011e4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011e50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011e54:	4454      	add	r4, sl
 8011e56:	2900      	cmp	r1, #0
 8011e58:	d054      	beq.n	8011f04 <_dtoa_r+0x59c>
 8011e5a:	4929      	ldr	r1, [pc, #164]	@ (8011f00 <_dtoa_r+0x598>)
 8011e5c:	2000      	movs	r0, #0
 8011e5e:	f7ee fd05 	bl	800086c <__aeabi_ddiv>
 8011e62:	4633      	mov	r3, r6
 8011e64:	462a      	mov	r2, r5
 8011e66:	f7ee fa1f 	bl	80002a8 <__aeabi_dsub>
 8011e6a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011e6e:	4656      	mov	r6, sl
 8011e70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011e74:	f7ee fe80 	bl	8000b78 <__aeabi_d2iz>
 8011e78:	4605      	mov	r5, r0
 8011e7a:	f7ee fb63 	bl	8000544 <__aeabi_i2d>
 8011e7e:	4602      	mov	r2, r0
 8011e80:	460b      	mov	r3, r1
 8011e82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011e86:	f7ee fa0f 	bl	80002a8 <__aeabi_dsub>
 8011e8a:	3530      	adds	r5, #48	@ 0x30
 8011e8c:	4602      	mov	r2, r0
 8011e8e:	460b      	mov	r3, r1
 8011e90:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011e94:	f806 5b01 	strb.w	r5, [r6], #1
 8011e98:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011e9c:	f7ee fe2e 	bl	8000afc <__aeabi_dcmplt>
 8011ea0:	2800      	cmp	r0, #0
 8011ea2:	d172      	bne.n	8011f8a <_dtoa_r+0x622>
 8011ea4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011ea8:	4911      	ldr	r1, [pc, #68]	@ (8011ef0 <_dtoa_r+0x588>)
 8011eaa:	2000      	movs	r0, #0
 8011eac:	f7ee f9fc 	bl	80002a8 <__aeabi_dsub>
 8011eb0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011eb4:	f7ee fe22 	bl	8000afc <__aeabi_dcmplt>
 8011eb8:	2800      	cmp	r0, #0
 8011eba:	f040 80b4 	bne.w	8012026 <_dtoa_r+0x6be>
 8011ebe:	42a6      	cmp	r6, r4
 8011ec0:	f43f af70 	beq.w	8011da4 <_dtoa_r+0x43c>
 8011ec4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8011ef4 <_dtoa_r+0x58c>)
 8011eca:	2200      	movs	r2, #0
 8011ecc:	f7ee fba4 	bl	8000618 <__aeabi_dmul>
 8011ed0:	4b08      	ldr	r3, [pc, #32]	@ (8011ef4 <_dtoa_r+0x58c>)
 8011ed2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011edc:	f7ee fb9c 	bl	8000618 <__aeabi_dmul>
 8011ee0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011ee4:	e7c4      	b.n	8011e70 <_dtoa_r+0x508>
 8011ee6:	bf00      	nop
 8011ee8:	08013658 	.word	0x08013658
 8011eec:	08013630 	.word	0x08013630
 8011ef0:	3ff00000 	.word	0x3ff00000
 8011ef4:	40240000 	.word	0x40240000
 8011ef8:	401c0000 	.word	0x401c0000
 8011efc:	40140000 	.word	0x40140000
 8011f00:	3fe00000 	.word	0x3fe00000
 8011f04:	4631      	mov	r1, r6
 8011f06:	4628      	mov	r0, r5
 8011f08:	f7ee fb86 	bl	8000618 <__aeabi_dmul>
 8011f0c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011f10:	9413      	str	r4, [sp, #76]	@ 0x4c
 8011f12:	4656      	mov	r6, sl
 8011f14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011f18:	f7ee fe2e 	bl	8000b78 <__aeabi_d2iz>
 8011f1c:	4605      	mov	r5, r0
 8011f1e:	f7ee fb11 	bl	8000544 <__aeabi_i2d>
 8011f22:	4602      	mov	r2, r0
 8011f24:	460b      	mov	r3, r1
 8011f26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011f2a:	f7ee f9bd 	bl	80002a8 <__aeabi_dsub>
 8011f2e:	3530      	adds	r5, #48	@ 0x30
 8011f30:	f806 5b01 	strb.w	r5, [r6], #1
 8011f34:	4602      	mov	r2, r0
 8011f36:	460b      	mov	r3, r1
 8011f38:	42a6      	cmp	r6, r4
 8011f3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011f3e:	f04f 0200 	mov.w	r2, #0
 8011f42:	d124      	bne.n	8011f8e <_dtoa_r+0x626>
 8011f44:	4baf      	ldr	r3, [pc, #700]	@ (8012204 <_dtoa_r+0x89c>)
 8011f46:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011f4a:	f7ee f9af 	bl	80002ac <__adddf3>
 8011f4e:	4602      	mov	r2, r0
 8011f50:	460b      	mov	r3, r1
 8011f52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011f56:	f7ee fdef 	bl	8000b38 <__aeabi_dcmpgt>
 8011f5a:	2800      	cmp	r0, #0
 8011f5c:	d163      	bne.n	8012026 <_dtoa_r+0x6be>
 8011f5e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011f62:	49a8      	ldr	r1, [pc, #672]	@ (8012204 <_dtoa_r+0x89c>)
 8011f64:	2000      	movs	r0, #0
 8011f66:	f7ee f99f 	bl	80002a8 <__aeabi_dsub>
 8011f6a:	4602      	mov	r2, r0
 8011f6c:	460b      	mov	r3, r1
 8011f6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011f72:	f7ee fdc3 	bl	8000afc <__aeabi_dcmplt>
 8011f76:	2800      	cmp	r0, #0
 8011f78:	f43f af14 	beq.w	8011da4 <_dtoa_r+0x43c>
 8011f7c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8011f7e:	1e73      	subs	r3, r6, #1
 8011f80:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011f82:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011f86:	2b30      	cmp	r3, #48	@ 0x30
 8011f88:	d0f8      	beq.n	8011f7c <_dtoa_r+0x614>
 8011f8a:	4647      	mov	r7, r8
 8011f8c:	e03b      	b.n	8012006 <_dtoa_r+0x69e>
 8011f8e:	4b9e      	ldr	r3, [pc, #632]	@ (8012208 <_dtoa_r+0x8a0>)
 8011f90:	f7ee fb42 	bl	8000618 <__aeabi_dmul>
 8011f94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011f98:	e7bc      	b.n	8011f14 <_dtoa_r+0x5ac>
 8011f9a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8011f9e:	4656      	mov	r6, sl
 8011fa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011fa4:	4620      	mov	r0, r4
 8011fa6:	4629      	mov	r1, r5
 8011fa8:	f7ee fc60 	bl	800086c <__aeabi_ddiv>
 8011fac:	f7ee fde4 	bl	8000b78 <__aeabi_d2iz>
 8011fb0:	4680      	mov	r8, r0
 8011fb2:	f7ee fac7 	bl	8000544 <__aeabi_i2d>
 8011fb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011fba:	f7ee fb2d 	bl	8000618 <__aeabi_dmul>
 8011fbe:	4602      	mov	r2, r0
 8011fc0:	460b      	mov	r3, r1
 8011fc2:	4620      	mov	r0, r4
 8011fc4:	4629      	mov	r1, r5
 8011fc6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8011fca:	f7ee f96d 	bl	80002a8 <__aeabi_dsub>
 8011fce:	f806 4b01 	strb.w	r4, [r6], #1
 8011fd2:	9d03      	ldr	r5, [sp, #12]
 8011fd4:	eba6 040a 	sub.w	r4, r6, sl
 8011fd8:	42a5      	cmp	r5, r4
 8011fda:	4602      	mov	r2, r0
 8011fdc:	460b      	mov	r3, r1
 8011fde:	d133      	bne.n	8012048 <_dtoa_r+0x6e0>
 8011fe0:	f7ee f964 	bl	80002ac <__adddf3>
 8011fe4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011fe8:	4604      	mov	r4, r0
 8011fea:	460d      	mov	r5, r1
 8011fec:	f7ee fda4 	bl	8000b38 <__aeabi_dcmpgt>
 8011ff0:	b9c0      	cbnz	r0, 8012024 <_dtoa_r+0x6bc>
 8011ff2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011ff6:	4620      	mov	r0, r4
 8011ff8:	4629      	mov	r1, r5
 8011ffa:	f7ee fd75 	bl	8000ae8 <__aeabi_dcmpeq>
 8011ffe:	b110      	cbz	r0, 8012006 <_dtoa_r+0x69e>
 8012000:	f018 0f01 	tst.w	r8, #1
 8012004:	d10e      	bne.n	8012024 <_dtoa_r+0x6bc>
 8012006:	9902      	ldr	r1, [sp, #8]
 8012008:	4648      	mov	r0, r9
 801200a:	f000 fb07 	bl	801261c <_Bfree>
 801200e:	2300      	movs	r3, #0
 8012010:	7033      	strb	r3, [r6, #0]
 8012012:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012014:	3701      	adds	r7, #1
 8012016:	601f      	str	r7, [r3, #0]
 8012018:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801201a:	2b00      	cmp	r3, #0
 801201c:	f000 824b 	beq.w	80124b6 <_dtoa_r+0xb4e>
 8012020:	601e      	str	r6, [r3, #0]
 8012022:	e248      	b.n	80124b6 <_dtoa_r+0xb4e>
 8012024:	46b8      	mov	r8, r7
 8012026:	4633      	mov	r3, r6
 8012028:	461e      	mov	r6, r3
 801202a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801202e:	2a39      	cmp	r2, #57	@ 0x39
 8012030:	d106      	bne.n	8012040 <_dtoa_r+0x6d8>
 8012032:	459a      	cmp	sl, r3
 8012034:	d1f8      	bne.n	8012028 <_dtoa_r+0x6c0>
 8012036:	2230      	movs	r2, #48	@ 0x30
 8012038:	f108 0801 	add.w	r8, r8, #1
 801203c:	f88a 2000 	strb.w	r2, [sl]
 8012040:	781a      	ldrb	r2, [r3, #0]
 8012042:	3201      	adds	r2, #1
 8012044:	701a      	strb	r2, [r3, #0]
 8012046:	e7a0      	b.n	8011f8a <_dtoa_r+0x622>
 8012048:	4b6f      	ldr	r3, [pc, #444]	@ (8012208 <_dtoa_r+0x8a0>)
 801204a:	2200      	movs	r2, #0
 801204c:	f7ee fae4 	bl	8000618 <__aeabi_dmul>
 8012050:	2200      	movs	r2, #0
 8012052:	2300      	movs	r3, #0
 8012054:	4604      	mov	r4, r0
 8012056:	460d      	mov	r5, r1
 8012058:	f7ee fd46 	bl	8000ae8 <__aeabi_dcmpeq>
 801205c:	2800      	cmp	r0, #0
 801205e:	d09f      	beq.n	8011fa0 <_dtoa_r+0x638>
 8012060:	e7d1      	b.n	8012006 <_dtoa_r+0x69e>
 8012062:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012064:	2a00      	cmp	r2, #0
 8012066:	f000 80ea 	beq.w	801223e <_dtoa_r+0x8d6>
 801206a:	9a07      	ldr	r2, [sp, #28]
 801206c:	2a01      	cmp	r2, #1
 801206e:	f300 80cd 	bgt.w	801220c <_dtoa_r+0x8a4>
 8012072:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8012074:	2a00      	cmp	r2, #0
 8012076:	f000 80c1 	beq.w	80121fc <_dtoa_r+0x894>
 801207a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801207e:	9c08      	ldr	r4, [sp, #32]
 8012080:	9e00      	ldr	r6, [sp, #0]
 8012082:	9a00      	ldr	r2, [sp, #0]
 8012084:	441a      	add	r2, r3
 8012086:	9200      	str	r2, [sp, #0]
 8012088:	9a06      	ldr	r2, [sp, #24]
 801208a:	2101      	movs	r1, #1
 801208c:	441a      	add	r2, r3
 801208e:	4648      	mov	r0, r9
 8012090:	9206      	str	r2, [sp, #24]
 8012092:	f000 fb77 	bl	8012784 <__i2b>
 8012096:	4605      	mov	r5, r0
 8012098:	b166      	cbz	r6, 80120b4 <_dtoa_r+0x74c>
 801209a:	9b06      	ldr	r3, [sp, #24]
 801209c:	2b00      	cmp	r3, #0
 801209e:	dd09      	ble.n	80120b4 <_dtoa_r+0x74c>
 80120a0:	42b3      	cmp	r3, r6
 80120a2:	9a00      	ldr	r2, [sp, #0]
 80120a4:	bfa8      	it	ge
 80120a6:	4633      	movge	r3, r6
 80120a8:	1ad2      	subs	r2, r2, r3
 80120aa:	9200      	str	r2, [sp, #0]
 80120ac:	9a06      	ldr	r2, [sp, #24]
 80120ae:	1af6      	subs	r6, r6, r3
 80120b0:	1ad3      	subs	r3, r2, r3
 80120b2:	9306      	str	r3, [sp, #24]
 80120b4:	9b08      	ldr	r3, [sp, #32]
 80120b6:	b30b      	cbz	r3, 80120fc <_dtoa_r+0x794>
 80120b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	f000 80c6 	beq.w	801224c <_dtoa_r+0x8e4>
 80120c0:	2c00      	cmp	r4, #0
 80120c2:	f000 80c0 	beq.w	8012246 <_dtoa_r+0x8de>
 80120c6:	4629      	mov	r1, r5
 80120c8:	4622      	mov	r2, r4
 80120ca:	4648      	mov	r0, r9
 80120cc:	f000 fc12 	bl	80128f4 <__pow5mult>
 80120d0:	9a02      	ldr	r2, [sp, #8]
 80120d2:	4601      	mov	r1, r0
 80120d4:	4605      	mov	r5, r0
 80120d6:	4648      	mov	r0, r9
 80120d8:	f000 fb6a 	bl	80127b0 <__multiply>
 80120dc:	9902      	ldr	r1, [sp, #8]
 80120de:	4680      	mov	r8, r0
 80120e0:	4648      	mov	r0, r9
 80120e2:	f000 fa9b 	bl	801261c <_Bfree>
 80120e6:	9b08      	ldr	r3, [sp, #32]
 80120e8:	1b1b      	subs	r3, r3, r4
 80120ea:	9308      	str	r3, [sp, #32]
 80120ec:	f000 80b1 	beq.w	8012252 <_dtoa_r+0x8ea>
 80120f0:	9a08      	ldr	r2, [sp, #32]
 80120f2:	4641      	mov	r1, r8
 80120f4:	4648      	mov	r0, r9
 80120f6:	f000 fbfd 	bl	80128f4 <__pow5mult>
 80120fa:	9002      	str	r0, [sp, #8]
 80120fc:	2101      	movs	r1, #1
 80120fe:	4648      	mov	r0, r9
 8012100:	f000 fb40 	bl	8012784 <__i2b>
 8012104:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012106:	4604      	mov	r4, r0
 8012108:	2b00      	cmp	r3, #0
 801210a:	f000 81d8 	beq.w	80124be <_dtoa_r+0xb56>
 801210e:	461a      	mov	r2, r3
 8012110:	4601      	mov	r1, r0
 8012112:	4648      	mov	r0, r9
 8012114:	f000 fbee 	bl	80128f4 <__pow5mult>
 8012118:	9b07      	ldr	r3, [sp, #28]
 801211a:	2b01      	cmp	r3, #1
 801211c:	4604      	mov	r4, r0
 801211e:	f300 809f 	bgt.w	8012260 <_dtoa_r+0x8f8>
 8012122:	9b04      	ldr	r3, [sp, #16]
 8012124:	2b00      	cmp	r3, #0
 8012126:	f040 8097 	bne.w	8012258 <_dtoa_r+0x8f0>
 801212a:	9b05      	ldr	r3, [sp, #20]
 801212c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012130:	2b00      	cmp	r3, #0
 8012132:	f040 8093 	bne.w	801225c <_dtoa_r+0x8f4>
 8012136:	9b05      	ldr	r3, [sp, #20]
 8012138:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801213c:	0d1b      	lsrs	r3, r3, #20
 801213e:	051b      	lsls	r3, r3, #20
 8012140:	b133      	cbz	r3, 8012150 <_dtoa_r+0x7e8>
 8012142:	9b00      	ldr	r3, [sp, #0]
 8012144:	3301      	adds	r3, #1
 8012146:	9300      	str	r3, [sp, #0]
 8012148:	9b06      	ldr	r3, [sp, #24]
 801214a:	3301      	adds	r3, #1
 801214c:	9306      	str	r3, [sp, #24]
 801214e:	2301      	movs	r3, #1
 8012150:	9308      	str	r3, [sp, #32]
 8012152:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012154:	2b00      	cmp	r3, #0
 8012156:	f000 81b8 	beq.w	80124ca <_dtoa_r+0xb62>
 801215a:	6923      	ldr	r3, [r4, #16]
 801215c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012160:	6918      	ldr	r0, [r3, #16]
 8012162:	f000 fac3 	bl	80126ec <__hi0bits>
 8012166:	f1c0 0020 	rsb	r0, r0, #32
 801216a:	9b06      	ldr	r3, [sp, #24]
 801216c:	4418      	add	r0, r3
 801216e:	f010 001f 	ands.w	r0, r0, #31
 8012172:	f000 8082 	beq.w	801227a <_dtoa_r+0x912>
 8012176:	f1c0 0320 	rsb	r3, r0, #32
 801217a:	2b04      	cmp	r3, #4
 801217c:	dd73      	ble.n	8012266 <_dtoa_r+0x8fe>
 801217e:	9b00      	ldr	r3, [sp, #0]
 8012180:	f1c0 001c 	rsb	r0, r0, #28
 8012184:	4403      	add	r3, r0
 8012186:	9300      	str	r3, [sp, #0]
 8012188:	9b06      	ldr	r3, [sp, #24]
 801218a:	4403      	add	r3, r0
 801218c:	4406      	add	r6, r0
 801218e:	9306      	str	r3, [sp, #24]
 8012190:	9b00      	ldr	r3, [sp, #0]
 8012192:	2b00      	cmp	r3, #0
 8012194:	dd05      	ble.n	80121a2 <_dtoa_r+0x83a>
 8012196:	9902      	ldr	r1, [sp, #8]
 8012198:	461a      	mov	r2, r3
 801219a:	4648      	mov	r0, r9
 801219c:	f000 fc04 	bl	80129a8 <__lshift>
 80121a0:	9002      	str	r0, [sp, #8]
 80121a2:	9b06      	ldr	r3, [sp, #24]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	dd05      	ble.n	80121b4 <_dtoa_r+0x84c>
 80121a8:	4621      	mov	r1, r4
 80121aa:	461a      	mov	r2, r3
 80121ac:	4648      	mov	r0, r9
 80121ae:	f000 fbfb 	bl	80129a8 <__lshift>
 80121b2:	4604      	mov	r4, r0
 80121b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d061      	beq.n	801227e <_dtoa_r+0x916>
 80121ba:	9802      	ldr	r0, [sp, #8]
 80121bc:	4621      	mov	r1, r4
 80121be:	f000 fc5f 	bl	8012a80 <__mcmp>
 80121c2:	2800      	cmp	r0, #0
 80121c4:	da5b      	bge.n	801227e <_dtoa_r+0x916>
 80121c6:	2300      	movs	r3, #0
 80121c8:	9902      	ldr	r1, [sp, #8]
 80121ca:	220a      	movs	r2, #10
 80121cc:	4648      	mov	r0, r9
 80121ce:	f000 fa47 	bl	8012660 <__multadd>
 80121d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121d4:	9002      	str	r0, [sp, #8]
 80121d6:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80121da:	2b00      	cmp	r3, #0
 80121dc:	f000 8177 	beq.w	80124ce <_dtoa_r+0xb66>
 80121e0:	4629      	mov	r1, r5
 80121e2:	2300      	movs	r3, #0
 80121e4:	220a      	movs	r2, #10
 80121e6:	4648      	mov	r0, r9
 80121e8:	f000 fa3a 	bl	8012660 <__multadd>
 80121ec:	f1bb 0f00 	cmp.w	fp, #0
 80121f0:	4605      	mov	r5, r0
 80121f2:	dc6f      	bgt.n	80122d4 <_dtoa_r+0x96c>
 80121f4:	9b07      	ldr	r3, [sp, #28]
 80121f6:	2b02      	cmp	r3, #2
 80121f8:	dc49      	bgt.n	801228e <_dtoa_r+0x926>
 80121fa:	e06b      	b.n	80122d4 <_dtoa_r+0x96c>
 80121fc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80121fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8012202:	e73c      	b.n	801207e <_dtoa_r+0x716>
 8012204:	3fe00000 	.word	0x3fe00000
 8012208:	40240000 	.word	0x40240000
 801220c:	9b03      	ldr	r3, [sp, #12]
 801220e:	1e5c      	subs	r4, r3, #1
 8012210:	9b08      	ldr	r3, [sp, #32]
 8012212:	42a3      	cmp	r3, r4
 8012214:	db09      	blt.n	801222a <_dtoa_r+0x8c2>
 8012216:	1b1c      	subs	r4, r3, r4
 8012218:	9b03      	ldr	r3, [sp, #12]
 801221a:	2b00      	cmp	r3, #0
 801221c:	f6bf af30 	bge.w	8012080 <_dtoa_r+0x718>
 8012220:	9b00      	ldr	r3, [sp, #0]
 8012222:	9a03      	ldr	r2, [sp, #12]
 8012224:	1a9e      	subs	r6, r3, r2
 8012226:	2300      	movs	r3, #0
 8012228:	e72b      	b.n	8012082 <_dtoa_r+0x71a>
 801222a:	9b08      	ldr	r3, [sp, #32]
 801222c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801222e:	9408      	str	r4, [sp, #32]
 8012230:	1ae3      	subs	r3, r4, r3
 8012232:	441a      	add	r2, r3
 8012234:	9e00      	ldr	r6, [sp, #0]
 8012236:	9b03      	ldr	r3, [sp, #12]
 8012238:	920d      	str	r2, [sp, #52]	@ 0x34
 801223a:	2400      	movs	r4, #0
 801223c:	e721      	b.n	8012082 <_dtoa_r+0x71a>
 801223e:	9c08      	ldr	r4, [sp, #32]
 8012240:	9e00      	ldr	r6, [sp, #0]
 8012242:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8012244:	e728      	b.n	8012098 <_dtoa_r+0x730>
 8012246:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801224a:	e751      	b.n	80120f0 <_dtoa_r+0x788>
 801224c:	9a08      	ldr	r2, [sp, #32]
 801224e:	9902      	ldr	r1, [sp, #8]
 8012250:	e750      	b.n	80120f4 <_dtoa_r+0x78c>
 8012252:	f8cd 8008 	str.w	r8, [sp, #8]
 8012256:	e751      	b.n	80120fc <_dtoa_r+0x794>
 8012258:	2300      	movs	r3, #0
 801225a:	e779      	b.n	8012150 <_dtoa_r+0x7e8>
 801225c:	9b04      	ldr	r3, [sp, #16]
 801225e:	e777      	b.n	8012150 <_dtoa_r+0x7e8>
 8012260:	2300      	movs	r3, #0
 8012262:	9308      	str	r3, [sp, #32]
 8012264:	e779      	b.n	801215a <_dtoa_r+0x7f2>
 8012266:	d093      	beq.n	8012190 <_dtoa_r+0x828>
 8012268:	9a00      	ldr	r2, [sp, #0]
 801226a:	331c      	adds	r3, #28
 801226c:	441a      	add	r2, r3
 801226e:	9200      	str	r2, [sp, #0]
 8012270:	9a06      	ldr	r2, [sp, #24]
 8012272:	441a      	add	r2, r3
 8012274:	441e      	add	r6, r3
 8012276:	9206      	str	r2, [sp, #24]
 8012278:	e78a      	b.n	8012190 <_dtoa_r+0x828>
 801227a:	4603      	mov	r3, r0
 801227c:	e7f4      	b.n	8012268 <_dtoa_r+0x900>
 801227e:	9b03      	ldr	r3, [sp, #12]
 8012280:	2b00      	cmp	r3, #0
 8012282:	46b8      	mov	r8, r7
 8012284:	dc20      	bgt.n	80122c8 <_dtoa_r+0x960>
 8012286:	469b      	mov	fp, r3
 8012288:	9b07      	ldr	r3, [sp, #28]
 801228a:	2b02      	cmp	r3, #2
 801228c:	dd1e      	ble.n	80122cc <_dtoa_r+0x964>
 801228e:	f1bb 0f00 	cmp.w	fp, #0
 8012292:	f47f adb1 	bne.w	8011df8 <_dtoa_r+0x490>
 8012296:	4621      	mov	r1, r4
 8012298:	465b      	mov	r3, fp
 801229a:	2205      	movs	r2, #5
 801229c:	4648      	mov	r0, r9
 801229e:	f000 f9df 	bl	8012660 <__multadd>
 80122a2:	4601      	mov	r1, r0
 80122a4:	4604      	mov	r4, r0
 80122a6:	9802      	ldr	r0, [sp, #8]
 80122a8:	f000 fbea 	bl	8012a80 <__mcmp>
 80122ac:	2800      	cmp	r0, #0
 80122ae:	f77f ada3 	ble.w	8011df8 <_dtoa_r+0x490>
 80122b2:	4656      	mov	r6, sl
 80122b4:	2331      	movs	r3, #49	@ 0x31
 80122b6:	f806 3b01 	strb.w	r3, [r6], #1
 80122ba:	f108 0801 	add.w	r8, r8, #1
 80122be:	e59f      	b.n	8011e00 <_dtoa_r+0x498>
 80122c0:	9c03      	ldr	r4, [sp, #12]
 80122c2:	46b8      	mov	r8, r7
 80122c4:	4625      	mov	r5, r4
 80122c6:	e7f4      	b.n	80122b2 <_dtoa_r+0x94a>
 80122c8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80122cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	f000 8101 	beq.w	80124d6 <_dtoa_r+0xb6e>
 80122d4:	2e00      	cmp	r6, #0
 80122d6:	dd05      	ble.n	80122e4 <_dtoa_r+0x97c>
 80122d8:	4629      	mov	r1, r5
 80122da:	4632      	mov	r2, r6
 80122dc:	4648      	mov	r0, r9
 80122de:	f000 fb63 	bl	80129a8 <__lshift>
 80122e2:	4605      	mov	r5, r0
 80122e4:	9b08      	ldr	r3, [sp, #32]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d05c      	beq.n	80123a4 <_dtoa_r+0xa3c>
 80122ea:	6869      	ldr	r1, [r5, #4]
 80122ec:	4648      	mov	r0, r9
 80122ee:	f000 f955 	bl	801259c <_Balloc>
 80122f2:	4606      	mov	r6, r0
 80122f4:	b928      	cbnz	r0, 8012302 <_dtoa_r+0x99a>
 80122f6:	4b82      	ldr	r3, [pc, #520]	@ (8012500 <_dtoa_r+0xb98>)
 80122f8:	4602      	mov	r2, r0
 80122fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80122fe:	f7ff bb4a 	b.w	8011996 <_dtoa_r+0x2e>
 8012302:	692a      	ldr	r2, [r5, #16]
 8012304:	3202      	adds	r2, #2
 8012306:	0092      	lsls	r2, r2, #2
 8012308:	f105 010c 	add.w	r1, r5, #12
 801230c:	300c      	adds	r0, #12
 801230e:	f7ff fa92 	bl	8011836 <memcpy>
 8012312:	2201      	movs	r2, #1
 8012314:	4631      	mov	r1, r6
 8012316:	4648      	mov	r0, r9
 8012318:	f000 fb46 	bl	80129a8 <__lshift>
 801231c:	f10a 0301 	add.w	r3, sl, #1
 8012320:	9300      	str	r3, [sp, #0]
 8012322:	eb0a 030b 	add.w	r3, sl, fp
 8012326:	9308      	str	r3, [sp, #32]
 8012328:	9b04      	ldr	r3, [sp, #16]
 801232a:	f003 0301 	and.w	r3, r3, #1
 801232e:	462f      	mov	r7, r5
 8012330:	9306      	str	r3, [sp, #24]
 8012332:	4605      	mov	r5, r0
 8012334:	9b00      	ldr	r3, [sp, #0]
 8012336:	9802      	ldr	r0, [sp, #8]
 8012338:	4621      	mov	r1, r4
 801233a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 801233e:	f7ff fa88 	bl	8011852 <quorem>
 8012342:	4603      	mov	r3, r0
 8012344:	3330      	adds	r3, #48	@ 0x30
 8012346:	9003      	str	r0, [sp, #12]
 8012348:	4639      	mov	r1, r7
 801234a:	9802      	ldr	r0, [sp, #8]
 801234c:	9309      	str	r3, [sp, #36]	@ 0x24
 801234e:	f000 fb97 	bl	8012a80 <__mcmp>
 8012352:	462a      	mov	r2, r5
 8012354:	9004      	str	r0, [sp, #16]
 8012356:	4621      	mov	r1, r4
 8012358:	4648      	mov	r0, r9
 801235a:	f000 fbad 	bl	8012ab8 <__mdiff>
 801235e:	68c2      	ldr	r2, [r0, #12]
 8012360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012362:	4606      	mov	r6, r0
 8012364:	bb02      	cbnz	r2, 80123a8 <_dtoa_r+0xa40>
 8012366:	4601      	mov	r1, r0
 8012368:	9802      	ldr	r0, [sp, #8]
 801236a:	f000 fb89 	bl	8012a80 <__mcmp>
 801236e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012370:	4602      	mov	r2, r0
 8012372:	4631      	mov	r1, r6
 8012374:	4648      	mov	r0, r9
 8012376:	920c      	str	r2, [sp, #48]	@ 0x30
 8012378:	9309      	str	r3, [sp, #36]	@ 0x24
 801237a:	f000 f94f 	bl	801261c <_Bfree>
 801237e:	9b07      	ldr	r3, [sp, #28]
 8012380:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012382:	9e00      	ldr	r6, [sp, #0]
 8012384:	ea42 0103 	orr.w	r1, r2, r3
 8012388:	9b06      	ldr	r3, [sp, #24]
 801238a:	4319      	orrs	r1, r3
 801238c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801238e:	d10d      	bne.n	80123ac <_dtoa_r+0xa44>
 8012390:	2b39      	cmp	r3, #57	@ 0x39
 8012392:	d027      	beq.n	80123e4 <_dtoa_r+0xa7c>
 8012394:	9a04      	ldr	r2, [sp, #16]
 8012396:	2a00      	cmp	r2, #0
 8012398:	dd01      	ble.n	801239e <_dtoa_r+0xa36>
 801239a:	9b03      	ldr	r3, [sp, #12]
 801239c:	3331      	adds	r3, #49	@ 0x31
 801239e:	f88b 3000 	strb.w	r3, [fp]
 80123a2:	e52e      	b.n	8011e02 <_dtoa_r+0x49a>
 80123a4:	4628      	mov	r0, r5
 80123a6:	e7b9      	b.n	801231c <_dtoa_r+0x9b4>
 80123a8:	2201      	movs	r2, #1
 80123aa:	e7e2      	b.n	8012372 <_dtoa_r+0xa0a>
 80123ac:	9904      	ldr	r1, [sp, #16]
 80123ae:	2900      	cmp	r1, #0
 80123b0:	db04      	blt.n	80123bc <_dtoa_r+0xa54>
 80123b2:	9807      	ldr	r0, [sp, #28]
 80123b4:	4301      	orrs	r1, r0
 80123b6:	9806      	ldr	r0, [sp, #24]
 80123b8:	4301      	orrs	r1, r0
 80123ba:	d120      	bne.n	80123fe <_dtoa_r+0xa96>
 80123bc:	2a00      	cmp	r2, #0
 80123be:	ddee      	ble.n	801239e <_dtoa_r+0xa36>
 80123c0:	9902      	ldr	r1, [sp, #8]
 80123c2:	9300      	str	r3, [sp, #0]
 80123c4:	2201      	movs	r2, #1
 80123c6:	4648      	mov	r0, r9
 80123c8:	f000 faee 	bl	80129a8 <__lshift>
 80123cc:	4621      	mov	r1, r4
 80123ce:	9002      	str	r0, [sp, #8]
 80123d0:	f000 fb56 	bl	8012a80 <__mcmp>
 80123d4:	2800      	cmp	r0, #0
 80123d6:	9b00      	ldr	r3, [sp, #0]
 80123d8:	dc02      	bgt.n	80123e0 <_dtoa_r+0xa78>
 80123da:	d1e0      	bne.n	801239e <_dtoa_r+0xa36>
 80123dc:	07da      	lsls	r2, r3, #31
 80123de:	d5de      	bpl.n	801239e <_dtoa_r+0xa36>
 80123e0:	2b39      	cmp	r3, #57	@ 0x39
 80123e2:	d1da      	bne.n	801239a <_dtoa_r+0xa32>
 80123e4:	2339      	movs	r3, #57	@ 0x39
 80123e6:	f88b 3000 	strb.w	r3, [fp]
 80123ea:	4633      	mov	r3, r6
 80123ec:	461e      	mov	r6, r3
 80123ee:	3b01      	subs	r3, #1
 80123f0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80123f4:	2a39      	cmp	r2, #57	@ 0x39
 80123f6:	d04e      	beq.n	8012496 <_dtoa_r+0xb2e>
 80123f8:	3201      	adds	r2, #1
 80123fa:	701a      	strb	r2, [r3, #0]
 80123fc:	e501      	b.n	8011e02 <_dtoa_r+0x49a>
 80123fe:	2a00      	cmp	r2, #0
 8012400:	dd03      	ble.n	801240a <_dtoa_r+0xaa2>
 8012402:	2b39      	cmp	r3, #57	@ 0x39
 8012404:	d0ee      	beq.n	80123e4 <_dtoa_r+0xa7c>
 8012406:	3301      	adds	r3, #1
 8012408:	e7c9      	b.n	801239e <_dtoa_r+0xa36>
 801240a:	9a00      	ldr	r2, [sp, #0]
 801240c:	9908      	ldr	r1, [sp, #32]
 801240e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012412:	428a      	cmp	r2, r1
 8012414:	d028      	beq.n	8012468 <_dtoa_r+0xb00>
 8012416:	9902      	ldr	r1, [sp, #8]
 8012418:	2300      	movs	r3, #0
 801241a:	220a      	movs	r2, #10
 801241c:	4648      	mov	r0, r9
 801241e:	f000 f91f 	bl	8012660 <__multadd>
 8012422:	42af      	cmp	r7, r5
 8012424:	9002      	str	r0, [sp, #8]
 8012426:	f04f 0300 	mov.w	r3, #0
 801242a:	f04f 020a 	mov.w	r2, #10
 801242e:	4639      	mov	r1, r7
 8012430:	4648      	mov	r0, r9
 8012432:	d107      	bne.n	8012444 <_dtoa_r+0xadc>
 8012434:	f000 f914 	bl	8012660 <__multadd>
 8012438:	4607      	mov	r7, r0
 801243a:	4605      	mov	r5, r0
 801243c:	9b00      	ldr	r3, [sp, #0]
 801243e:	3301      	adds	r3, #1
 8012440:	9300      	str	r3, [sp, #0]
 8012442:	e777      	b.n	8012334 <_dtoa_r+0x9cc>
 8012444:	f000 f90c 	bl	8012660 <__multadd>
 8012448:	4629      	mov	r1, r5
 801244a:	4607      	mov	r7, r0
 801244c:	2300      	movs	r3, #0
 801244e:	220a      	movs	r2, #10
 8012450:	4648      	mov	r0, r9
 8012452:	f000 f905 	bl	8012660 <__multadd>
 8012456:	4605      	mov	r5, r0
 8012458:	e7f0      	b.n	801243c <_dtoa_r+0xad4>
 801245a:	f1bb 0f00 	cmp.w	fp, #0
 801245e:	bfcc      	ite	gt
 8012460:	465e      	movgt	r6, fp
 8012462:	2601      	movle	r6, #1
 8012464:	4456      	add	r6, sl
 8012466:	2700      	movs	r7, #0
 8012468:	9902      	ldr	r1, [sp, #8]
 801246a:	9300      	str	r3, [sp, #0]
 801246c:	2201      	movs	r2, #1
 801246e:	4648      	mov	r0, r9
 8012470:	f000 fa9a 	bl	80129a8 <__lshift>
 8012474:	4621      	mov	r1, r4
 8012476:	9002      	str	r0, [sp, #8]
 8012478:	f000 fb02 	bl	8012a80 <__mcmp>
 801247c:	2800      	cmp	r0, #0
 801247e:	dcb4      	bgt.n	80123ea <_dtoa_r+0xa82>
 8012480:	d102      	bne.n	8012488 <_dtoa_r+0xb20>
 8012482:	9b00      	ldr	r3, [sp, #0]
 8012484:	07db      	lsls	r3, r3, #31
 8012486:	d4b0      	bmi.n	80123ea <_dtoa_r+0xa82>
 8012488:	4633      	mov	r3, r6
 801248a:	461e      	mov	r6, r3
 801248c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012490:	2a30      	cmp	r2, #48	@ 0x30
 8012492:	d0fa      	beq.n	801248a <_dtoa_r+0xb22>
 8012494:	e4b5      	b.n	8011e02 <_dtoa_r+0x49a>
 8012496:	459a      	cmp	sl, r3
 8012498:	d1a8      	bne.n	80123ec <_dtoa_r+0xa84>
 801249a:	2331      	movs	r3, #49	@ 0x31
 801249c:	f108 0801 	add.w	r8, r8, #1
 80124a0:	f88a 3000 	strb.w	r3, [sl]
 80124a4:	e4ad      	b.n	8011e02 <_dtoa_r+0x49a>
 80124a6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80124a8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8012504 <_dtoa_r+0xb9c>
 80124ac:	b11b      	cbz	r3, 80124b6 <_dtoa_r+0xb4e>
 80124ae:	f10a 0308 	add.w	r3, sl, #8
 80124b2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80124b4:	6013      	str	r3, [r2, #0]
 80124b6:	4650      	mov	r0, sl
 80124b8:	b017      	add	sp, #92	@ 0x5c
 80124ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124be:	9b07      	ldr	r3, [sp, #28]
 80124c0:	2b01      	cmp	r3, #1
 80124c2:	f77f ae2e 	ble.w	8012122 <_dtoa_r+0x7ba>
 80124c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80124c8:	9308      	str	r3, [sp, #32]
 80124ca:	2001      	movs	r0, #1
 80124cc:	e64d      	b.n	801216a <_dtoa_r+0x802>
 80124ce:	f1bb 0f00 	cmp.w	fp, #0
 80124d2:	f77f aed9 	ble.w	8012288 <_dtoa_r+0x920>
 80124d6:	4656      	mov	r6, sl
 80124d8:	9802      	ldr	r0, [sp, #8]
 80124da:	4621      	mov	r1, r4
 80124dc:	f7ff f9b9 	bl	8011852 <quorem>
 80124e0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80124e4:	f806 3b01 	strb.w	r3, [r6], #1
 80124e8:	eba6 020a 	sub.w	r2, r6, sl
 80124ec:	4593      	cmp	fp, r2
 80124ee:	ddb4      	ble.n	801245a <_dtoa_r+0xaf2>
 80124f0:	9902      	ldr	r1, [sp, #8]
 80124f2:	2300      	movs	r3, #0
 80124f4:	220a      	movs	r2, #10
 80124f6:	4648      	mov	r0, r9
 80124f8:	f000 f8b2 	bl	8012660 <__multadd>
 80124fc:	9002      	str	r0, [sp, #8]
 80124fe:	e7eb      	b.n	80124d8 <_dtoa_r+0xb70>
 8012500:	0801355c 	.word	0x0801355c
 8012504:	080134e0 	.word	0x080134e0

08012508 <_free_r>:
 8012508:	b538      	push	{r3, r4, r5, lr}
 801250a:	4605      	mov	r5, r0
 801250c:	2900      	cmp	r1, #0
 801250e:	d041      	beq.n	8012594 <_free_r+0x8c>
 8012510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012514:	1f0c      	subs	r4, r1, #4
 8012516:	2b00      	cmp	r3, #0
 8012518:	bfb8      	it	lt
 801251a:	18e4      	addlt	r4, r4, r3
 801251c:	f7fe fa90 	bl	8010a40 <__malloc_lock>
 8012520:	4a1d      	ldr	r2, [pc, #116]	@ (8012598 <_free_r+0x90>)
 8012522:	6813      	ldr	r3, [r2, #0]
 8012524:	b933      	cbnz	r3, 8012534 <_free_r+0x2c>
 8012526:	6063      	str	r3, [r4, #4]
 8012528:	6014      	str	r4, [r2, #0]
 801252a:	4628      	mov	r0, r5
 801252c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012530:	f7fe ba8c 	b.w	8010a4c <__malloc_unlock>
 8012534:	42a3      	cmp	r3, r4
 8012536:	d908      	bls.n	801254a <_free_r+0x42>
 8012538:	6820      	ldr	r0, [r4, #0]
 801253a:	1821      	adds	r1, r4, r0
 801253c:	428b      	cmp	r3, r1
 801253e:	bf01      	itttt	eq
 8012540:	6819      	ldreq	r1, [r3, #0]
 8012542:	685b      	ldreq	r3, [r3, #4]
 8012544:	1809      	addeq	r1, r1, r0
 8012546:	6021      	streq	r1, [r4, #0]
 8012548:	e7ed      	b.n	8012526 <_free_r+0x1e>
 801254a:	461a      	mov	r2, r3
 801254c:	685b      	ldr	r3, [r3, #4]
 801254e:	b10b      	cbz	r3, 8012554 <_free_r+0x4c>
 8012550:	42a3      	cmp	r3, r4
 8012552:	d9fa      	bls.n	801254a <_free_r+0x42>
 8012554:	6811      	ldr	r1, [r2, #0]
 8012556:	1850      	adds	r0, r2, r1
 8012558:	42a0      	cmp	r0, r4
 801255a:	d10b      	bne.n	8012574 <_free_r+0x6c>
 801255c:	6820      	ldr	r0, [r4, #0]
 801255e:	4401      	add	r1, r0
 8012560:	1850      	adds	r0, r2, r1
 8012562:	4283      	cmp	r3, r0
 8012564:	6011      	str	r1, [r2, #0]
 8012566:	d1e0      	bne.n	801252a <_free_r+0x22>
 8012568:	6818      	ldr	r0, [r3, #0]
 801256a:	685b      	ldr	r3, [r3, #4]
 801256c:	6053      	str	r3, [r2, #4]
 801256e:	4408      	add	r0, r1
 8012570:	6010      	str	r0, [r2, #0]
 8012572:	e7da      	b.n	801252a <_free_r+0x22>
 8012574:	d902      	bls.n	801257c <_free_r+0x74>
 8012576:	230c      	movs	r3, #12
 8012578:	602b      	str	r3, [r5, #0]
 801257a:	e7d6      	b.n	801252a <_free_r+0x22>
 801257c:	6820      	ldr	r0, [r4, #0]
 801257e:	1821      	adds	r1, r4, r0
 8012580:	428b      	cmp	r3, r1
 8012582:	bf04      	itt	eq
 8012584:	6819      	ldreq	r1, [r3, #0]
 8012586:	685b      	ldreq	r3, [r3, #4]
 8012588:	6063      	str	r3, [r4, #4]
 801258a:	bf04      	itt	eq
 801258c:	1809      	addeq	r1, r1, r0
 801258e:	6021      	streq	r1, [r4, #0]
 8012590:	6054      	str	r4, [r2, #4]
 8012592:	e7ca      	b.n	801252a <_free_r+0x22>
 8012594:	bd38      	pop	{r3, r4, r5, pc}
 8012596:	bf00      	nop
 8012598:	2002a610 	.word	0x2002a610

0801259c <_Balloc>:
 801259c:	b570      	push	{r4, r5, r6, lr}
 801259e:	69c6      	ldr	r6, [r0, #28]
 80125a0:	4604      	mov	r4, r0
 80125a2:	460d      	mov	r5, r1
 80125a4:	b976      	cbnz	r6, 80125c4 <_Balloc+0x28>
 80125a6:	2010      	movs	r0, #16
 80125a8:	f7fe f998 	bl	80108dc <malloc>
 80125ac:	4602      	mov	r2, r0
 80125ae:	61e0      	str	r0, [r4, #28]
 80125b0:	b920      	cbnz	r0, 80125bc <_Balloc+0x20>
 80125b2:	4b18      	ldr	r3, [pc, #96]	@ (8012614 <_Balloc+0x78>)
 80125b4:	4818      	ldr	r0, [pc, #96]	@ (8012618 <_Balloc+0x7c>)
 80125b6:	216b      	movs	r1, #107	@ 0x6b
 80125b8:	f000 fddc 	bl	8013174 <__assert_func>
 80125bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80125c0:	6006      	str	r6, [r0, #0]
 80125c2:	60c6      	str	r6, [r0, #12]
 80125c4:	69e6      	ldr	r6, [r4, #28]
 80125c6:	68f3      	ldr	r3, [r6, #12]
 80125c8:	b183      	cbz	r3, 80125ec <_Balloc+0x50>
 80125ca:	69e3      	ldr	r3, [r4, #28]
 80125cc:	68db      	ldr	r3, [r3, #12]
 80125ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80125d2:	b9b8      	cbnz	r0, 8012604 <_Balloc+0x68>
 80125d4:	2101      	movs	r1, #1
 80125d6:	fa01 f605 	lsl.w	r6, r1, r5
 80125da:	1d72      	adds	r2, r6, #5
 80125dc:	0092      	lsls	r2, r2, #2
 80125de:	4620      	mov	r0, r4
 80125e0:	f000 fde6 	bl	80131b0 <_calloc_r>
 80125e4:	b160      	cbz	r0, 8012600 <_Balloc+0x64>
 80125e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80125ea:	e00e      	b.n	801260a <_Balloc+0x6e>
 80125ec:	2221      	movs	r2, #33	@ 0x21
 80125ee:	2104      	movs	r1, #4
 80125f0:	4620      	mov	r0, r4
 80125f2:	f000 fddd 	bl	80131b0 <_calloc_r>
 80125f6:	69e3      	ldr	r3, [r4, #28]
 80125f8:	60f0      	str	r0, [r6, #12]
 80125fa:	68db      	ldr	r3, [r3, #12]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d1e4      	bne.n	80125ca <_Balloc+0x2e>
 8012600:	2000      	movs	r0, #0
 8012602:	bd70      	pop	{r4, r5, r6, pc}
 8012604:	6802      	ldr	r2, [r0, #0]
 8012606:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801260a:	2300      	movs	r3, #0
 801260c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012610:	e7f7      	b.n	8012602 <_Balloc+0x66>
 8012612:	bf00      	nop
 8012614:	080134ed 	.word	0x080134ed
 8012618:	0801356d 	.word	0x0801356d

0801261c <_Bfree>:
 801261c:	b570      	push	{r4, r5, r6, lr}
 801261e:	69c6      	ldr	r6, [r0, #28]
 8012620:	4605      	mov	r5, r0
 8012622:	460c      	mov	r4, r1
 8012624:	b976      	cbnz	r6, 8012644 <_Bfree+0x28>
 8012626:	2010      	movs	r0, #16
 8012628:	f7fe f958 	bl	80108dc <malloc>
 801262c:	4602      	mov	r2, r0
 801262e:	61e8      	str	r0, [r5, #28]
 8012630:	b920      	cbnz	r0, 801263c <_Bfree+0x20>
 8012632:	4b09      	ldr	r3, [pc, #36]	@ (8012658 <_Bfree+0x3c>)
 8012634:	4809      	ldr	r0, [pc, #36]	@ (801265c <_Bfree+0x40>)
 8012636:	218f      	movs	r1, #143	@ 0x8f
 8012638:	f000 fd9c 	bl	8013174 <__assert_func>
 801263c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012640:	6006      	str	r6, [r0, #0]
 8012642:	60c6      	str	r6, [r0, #12]
 8012644:	b13c      	cbz	r4, 8012656 <_Bfree+0x3a>
 8012646:	69eb      	ldr	r3, [r5, #28]
 8012648:	6862      	ldr	r2, [r4, #4]
 801264a:	68db      	ldr	r3, [r3, #12]
 801264c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012650:	6021      	str	r1, [r4, #0]
 8012652:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012656:	bd70      	pop	{r4, r5, r6, pc}
 8012658:	080134ed 	.word	0x080134ed
 801265c:	0801356d 	.word	0x0801356d

08012660 <__multadd>:
 8012660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012664:	690d      	ldr	r5, [r1, #16]
 8012666:	4607      	mov	r7, r0
 8012668:	460c      	mov	r4, r1
 801266a:	461e      	mov	r6, r3
 801266c:	f101 0c14 	add.w	ip, r1, #20
 8012670:	2000      	movs	r0, #0
 8012672:	f8dc 3000 	ldr.w	r3, [ip]
 8012676:	b299      	uxth	r1, r3
 8012678:	fb02 6101 	mla	r1, r2, r1, r6
 801267c:	0c1e      	lsrs	r6, r3, #16
 801267e:	0c0b      	lsrs	r3, r1, #16
 8012680:	fb02 3306 	mla	r3, r2, r6, r3
 8012684:	b289      	uxth	r1, r1
 8012686:	3001      	adds	r0, #1
 8012688:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801268c:	4285      	cmp	r5, r0
 801268e:	f84c 1b04 	str.w	r1, [ip], #4
 8012692:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012696:	dcec      	bgt.n	8012672 <__multadd+0x12>
 8012698:	b30e      	cbz	r6, 80126de <__multadd+0x7e>
 801269a:	68a3      	ldr	r3, [r4, #8]
 801269c:	42ab      	cmp	r3, r5
 801269e:	dc19      	bgt.n	80126d4 <__multadd+0x74>
 80126a0:	6861      	ldr	r1, [r4, #4]
 80126a2:	4638      	mov	r0, r7
 80126a4:	3101      	adds	r1, #1
 80126a6:	f7ff ff79 	bl	801259c <_Balloc>
 80126aa:	4680      	mov	r8, r0
 80126ac:	b928      	cbnz	r0, 80126ba <__multadd+0x5a>
 80126ae:	4602      	mov	r2, r0
 80126b0:	4b0c      	ldr	r3, [pc, #48]	@ (80126e4 <__multadd+0x84>)
 80126b2:	480d      	ldr	r0, [pc, #52]	@ (80126e8 <__multadd+0x88>)
 80126b4:	21ba      	movs	r1, #186	@ 0xba
 80126b6:	f000 fd5d 	bl	8013174 <__assert_func>
 80126ba:	6922      	ldr	r2, [r4, #16]
 80126bc:	3202      	adds	r2, #2
 80126be:	f104 010c 	add.w	r1, r4, #12
 80126c2:	0092      	lsls	r2, r2, #2
 80126c4:	300c      	adds	r0, #12
 80126c6:	f7ff f8b6 	bl	8011836 <memcpy>
 80126ca:	4621      	mov	r1, r4
 80126cc:	4638      	mov	r0, r7
 80126ce:	f7ff ffa5 	bl	801261c <_Bfree>
 80126d2:	4644      	mov	r4, r8
 80126d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80126d8:	3501      	adds	r5, #1
 80126da:	615e      	str	r6, [r3, #20]
 80126dc:	6125      	str	r5, [r4, #16]
 80126de:	4620      	mov	r0, r4
 80126e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126e4:	0801355c 	.word	0x0801355c
 80126e8:	0801356d 	.word	0x0801356d

080126ec <__hi0bits>:
 80126ec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80126f0:	4603      	mov	r3, r0
 80126f2:	bf36      	itet	cc
 80126f4:	0403      	lslcc	r3, r0, #16
 80126f6:	2000      	movcs	r0, #0
 80126f8:	2010      	movcc	r0, #16
 80126fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80126fe:	bf3c      	itt	cc
 8012700:	021b      	lslcc	r3, r3, #8
 8012702:	3008      	addcc	r0, #8
 8012704:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012708:	bf3c      	itt	cc
 801270a:	011b      	lslcc	r3, r3, #4
 801270c:	3004      	addcc	r0, #4
 801270e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012712:	bf3c      	itt	cc
 8012714:	009b      	lslcc	r3, r3, #2
 8012716:	3002      	addcc	r0, #2
 8012718:	2b00      	cmp	r3, #0
 801271a:	db05      	blt.n	8012728 <__hi0bits+0x3c>
 801271c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012720:	f100 0001 	add.w	r0, r0, #1
 8012724:	bf08      	it	eq
 8012726:	2020      	moveq	r0, #32
 8012728:	4770      	bx	lr

0801272a <__lo0bits>:
 801272a:	6803      	ldr	r3, [r0, #0]
 801272c:	4602      	mov	r2, r0
 801272e:	f013 0007 	ands.w	r0, r3, #7
 8012732:	d00b      	beq.n	801274c <__lo0bits+0x22>
 8012734:	07d9      	lsls	r1, r3, #31
 8012736:	d421      	bmi.n	801277c <__lo0bits+0x52>
 8012738:	0798      	lsls	r0, r3, #30
 801273a:	bf49      	itett	mi
 801273c:	085b      	lsrmi	r3, r3, #1
 801273e:	089b      	lsrpl	r3, r3, #2
 8012740:	2001      	movmi	r0, #1
 8012742:	6013      	strmi	r3, [r2, #0]
 8012744:	bf5c      	itt	pl
 8012746:	6013      	strpl	r3, [r2, #0]
 8012748:	2002      	movpl	r0, #2
 801274a:	4770      	bx	lr
 801274c:	b299      	uxth	r1, r3
 801274e:	b909      	cbnz	r1, 8012754 <__lo0bits+0x2a>
 8012750:	0c1b      	lsrs	r3, r3, #16
 8012752:	2010      	movs	r0, #16
 8012754:	b2d9      	uxtb	r1, r3
 8012756:	b909      	cbnz	r1, 801275c <__lo0bits+0x32>
 8012758:	3008      	adds	r0, #8
 801275a:	0a1b      	lsrs	r3, r3, #8
 801275c:	0719      	lsls	r1, r3, #28
 801275e:	bf04      	itt	eq
 8012760:	091b      	lsreq	r3, r3, #4
 8012762:	3004      	addeq	r0, #4
 8012764:	0799      	lsls	r1, r3, #30
 8012766:	bf04      	itt	eq
 8012768:	089b      	lsreq	r3, r3, #2
 801276a:	3002      	addeq	r0, #2
 801276c:	07d9      	lsls	r1, r3, #31
 801276e:	d403      	bmi.n	8012778 <__lo0bits+0x4e>
 8012770:	085b      	lsrs	r3, r3, #1
 8012772:	f100 0001 	add.w	r0, r0, #1
 8012776:	d003      	beq.n	8012780 <__lo0bits+0x56>
 8012778:	6013      	str	r3, [r2, #0]
 801277a:	4770      	bx	lr
 801277c:	2000      	movs	r0, #0
 801277e:	4770      	bx	lr
 8012780:	2020      	movs	r0, #32
 8012782:	4770      	bx	lr

08012784 <__i2b>:
 8012784:	b510      	push	{r4, lr}
 8012786:	460c      	mov	r4, r1
 8012788:	2101      	movs	r1, #1
 801278a:	f7ff ff07 	bl	801259c <_Balloc>
 801278e:	4602      	mov	r2, r0
 8012790:	b928      	cbnz	r0, 801279e <__i2b+0x1a>
 8012792:	4b05      	ldr	r3, [pc, #20]	@ (80127a8 <__i2b+0x24>)
 8012794:	4805      	ldr	r0, [pc, #20]	@ (80127ac <__i2b+0x28>)
 8012796:	f240 1145 	movw	r1, #325	@ 0x145
 801279a:	f000 fceb 	bl	8013174 <__assert_func>
 801279e:	2301      	movs	r3, #1
 80127a0:	6144      	str	r4, [r0, #20]
 80127a2:	6103      	str	r3, [r0, #16]
 80127a4:	bd10      	pop	{r4, pc}
 80127a6:	bf00      	nop
 80127a8:	0801355c 	.word	0x0801355c
 80127ac:	0801356d 	.word	0x0801356d

080127b0 <__multiply>:
 80127b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127b4:	4617      	mov	r7, r2
 80127b6:	690a      	ldr	r2, [r1, #16]
 80127b8:	693b      	ldr	r3, [r7, #16]
 80127ba:	429a      	cmp	r2, r3
 80127bc:	bfa8      	it	ge
 80127be:	463b      	movge	r3, r7
 80127c0:	4689      	mov	r9, r1
 80127c2:	bfa4      	itt	ge
 80127c4:	460f      	movge	r7, r1
 80127c6:	4699      	movge	r9, r3
 80127c8:	693d      	ldr	r5, [r7, #16]
 80127ca:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80127ce:	68bb      	ldr	r3, [r7, #8]
 80127d0:	6879      	ldr	r1, [r7, #4]
 80127d2:	eb05 060a 	add.w	r6, r5, sl
 80127d6:	42b3      	cmp	r3, r6
 80127d8:	b085      	sub	sp, #20
 80127da:	bfb8      	it	lt
 80127dc:	3101      	addlt	r1, #1
 80127de:	f7ff fedd 	bl	801259c <_Balloc>
 80127e2:	b930      	cbnz	r0, 80127f2 <__multiply+0x42>
 80127e4:	4602      	mov	r2, r0
 80127e6:	4b41      	ldr	r3, [pc, #260]	@ (80128ec <__multiply+0x13c>)
 80127e8:	4841      	ldr	r0, [pc, #260]	@ (80128f0 <__multiply+0x140>)
 80127ea:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80127ee:	f000 fcc1 	bl	8013174 <__assert_func>
 80127f2:	f100 0414 	add.w	r4, r0, #20
 80127f6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80127fa:	4623      	mov	r3, r4
 80127fc:	2200      	movs	r2, #0
 80127fe:	4573      	cmp	r3, lr
 8012800:	d320      	bcc.n	8012844 <__multiply+0x94>
 8012802:	f107 0814 	add.w	r8, r7, #20
 8012806:	f109 0114 	add.w	r1, r9, #20
 801280a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801280e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8012812:	9302      	str	r3, [sp, #8]
 8012814:	1beb      	subs	r3, r5, r7
 8012816:	3b15      	subs	r3, #21
 8012818:	f023 0303 	bic.w	r3, r3, #3
 801281c:	3304      	adds	r3, #4
 801281e:	3715      	adds	r7, #21
 8012820:	42bd      	cmp	r5, r7
 8012822:	bf38      	it	cc
 8012824:	2304      	movcc	r3, #4
 8012826:	9301      	str	r3, [sp, #4]
 8012828:	9b02      	ldr	r3, [sp, #8]
 801282a:	9103      	str	r1, [sp, #12]
 801282c:	428b      	cmp	r3, r1
 801282e:	d80c      	bhi.n	801284a <__multiply+0x9a>
 8012830:	2e00      	cmp	r6, #0
 8012832:	dd03      	ble.n	801283c <__multiply+0x8c>
 8012834:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8012838:	2b00      	cmp	r3, #0
 801283a:	d055      	beq.n	80128e8 <__multiply+0x138>
 801283c:	6106      	str	r6, [r0, #16]
 801283e:	b005      	add	sp, #20
 8012840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012844:	f843 2b04 	str.w	r2, [r3], #4
 8012848:	e7d9      	b.n	80127fe <__multiply+0x4e>
 801284a:	f8b1 a000 	ldrh.w	sl, [r1]
 801284e:	f1ba 0f00 	cmp.w	sl, #0
 8012852:	d01f      	beq.n	8012894 <__multiply+0xe4>
 8012854:	46c4      	mov	ip, r8
 8012856:	46a1      	mov	r9, r4
 8012858:	2700      	movs	r7, #0
 801285a:	f85c 2b04 	ldr.w	r2, [ip], #4
 801285e:	f8d9 3000 	ldr.w	r3, [r9]
 8012862:	fa1f fb82 	uxth.w	fp, r2
 8012866:	b29b      	uxth	r3, r3
 8012868:	fb0a 330b 	mla	r3, sl, fp, r3
 801286c:	443b      	add	r3, r7
 801286e:	f8d9 7000 	ldr.w	r7, [r9]
 8012872:	0c12      	lsrs	r2, r2, #16
 8012874:	0c3f      	lsrs	r7, r7, #16
 8012876:	fb0a 7202 	mla	r2, sl, r2, r7
 801287a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801287e:	b29b      	uxth	r3, r3
 8012880:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012884:	4565      	cmp	r5, ip
 8012886:	f849 3b04 	str.w	r3, [r9], #4
 801288a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801288e:	d8e4      	bhi.n	801285a <__multiply+0xaa>
 8012890:	9b01      	ldr	r3, [sp, #4]
 8012892:	50e7      	str	r7, [r4, r3]
 8012894:	9b03      	ldr	r3, [sp, #12]
 8012896:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801289a:	3104      	adds	r1, #4
 801289c:	f1b9 0f00 	cmp.w	r9, #0
 80128a0:	d020      	beq.n	80128e4 <__multiply+0x134>
 80128a2:	6823      	ldr	r3, [r4, #0]
 80128a4:	4647      	mov	r7, r8
 80128a6:	46a4      	mov	ip, r4
 80128a8:	f04f 0a00 	mov.w	sl, #0
 80128ac:	f8b7 b000 	ldrh.w	fp, [r7]
 80128b0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80128b4:	fb09 220b 	mla	r2, r9, fp, r2
 80128b8:	4452      	add	r2, sl
 80128ba:	b29b      	uxth	r3, r3
 80128bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80128c0:	f84c 3b04 	str.w	r3, [ip], #4
 80128c4:	f857 3b04 	ldr.w	r3, [r7], #4
 80128c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80128cc:	f8bc 3000 	ldrh.w	r3, [ip]
 80128d0:	fb09 330a 	mla	r3, r9, sl, r3
 80128d4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80128d8:	42bd      	cmp	r5, r7
 80128da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80128de:	d8e5      	bhi.n	80128ac <__multiply+0xfc>
 80128e0:	9a01      	ldr	r2, [sp, #4]
 80128e2:	50a3      	str	r3, [r4, r2]
 80128e4:	3404      	adds	r4, #4
 80128e6:	e79f      	b.n	8012828 <__multiply+0x78>
 80128e8:	3e01      	subs	r6, #1
 80128ea:	e7a1      	b.n	8012830 <__multiply+0x80>
 80128ec:	0801355c 	.word	0x0801355c
 80128f0:	0801356d 	.word	0x0801356d

080128f4 <__pow5mult>:
 80128f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80128f8:	4615      	mov	r5, r2
 80128fa:	f012 0203 	ands.w	r2, r2, #3
 80128fe:	4607      	mov	r7, r0
 8012900:	460e      	mov	r6, r1
 8012902:	d007      	beq.n	8012914 <__pow5mult+0x20>
 8012904:	4c25      	ldr	r4, [pc, #148]	@ (801299c <__pow5mult+0xa8>)
 8012906:	3a01      	subs	r2, #1
 8012908:	2300      	movs	r3, #0
 801290a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801290e:	f7ff fea7 	bl	8012660 <__multadd>
 8012912:	4606      	mov	r6, r0
 8012914:	10ad      	asrs	r5, r5, #2
 8012916:	d03d      	beq.n	8012994 <__pow5mult+0xa0>
 8012918:	69fc      	ldr	r4, [r7, #28]
 801291a:	b97c      	cbnz	r4, 801293c <__pow5mult+0x48>
 801291c:	2010      	movs	r0, #16
 801291e:	f7fd ffdd 	bl	80108dc <malloc>
 8012922:	4602      	mov	r2, r0
 8012924:	61f8      	str	r0, [r7, #28]
 8012926:	b928      	cbnz	r0, 8012934 <__pow5mult+0x40>
 8012928:	4b1d      	ldr	r3, [pc, #116]	@ (80129a0 <__pow5mult+0xac>)
 801292a:	481e      	ldr	r0, [pc, #120]	@ (80129a4 <__pow5mult+0xb0>)
 801292c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012930:	f000 fc20 	bl	8013174 <__assert_func>
 8012934:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012938:	6004      	str	r4, [r0, #0]
 801293a:	60c4      	str	r4, [r0, #12]
 801293c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012940:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012944:	b94c      	cbnz	r4, 801295a <__pow5mult+0x66>
 8012946:	f240 2171 	movw	r1, #625	@ 0x271
 801294a:	4638      	mov	r0, r7
 801294c:	f7ff ff1a 	bl	8012784 <__i2b>
 8012950:	2300      	movs	r3, #0
 8012952:	f8c8 0008 	str.w	r0, [r8, #8]
 8012956:	4604      	mov	r4, r0
 8012958:	6003      	str	r3, [r0, #0]
 801295a:	f04f 0900 	mov.w	r9, #0
 801295e:	07eb      	lsls	r3, r5, #31
 8012960:	d50a      	bpl.n	8012978 <__pow5mult+0x84>
 8012962:	4631      	mov	r1, r6
 8012964:	4622      	mov	r2, r4
 8012966:	4638      	mov	r0, r7
 8012968:	f7ff ff22 	bl	80127b0 <__multiply>
 801296c:	4631      	mov	r1, r6
 801296e:	4680      	mov	r8, r0
 8012970:	4638      	mov	r0, r7
 8012972:	f7ff fe53 	bl	801261c <_Bfree>
 8012976:	4646      	mov	r6, r8
 8012978:	106d      	asrs	r5, r5, #1
 801297a:	d00b      	beq.n	8012994 <__pow5mult+0xa0>
 801297c:	6820      	ldr	r0, [r4, #0]
 801297e:	b938      	cbnz	r0, 8012990 <__pow5mult+0x9c>
 8012980:	4622      	mov	r2, r4
 8012982:	4621      	mov	r1, r4
 8012984:	4638      	mov	r0, r7
 8012986:	f7ff ff13 	bl	80127b0 <__multiply>
 801298a:	6020      	str	r0, [r4, #0]
 801298c:	f8c0 9000 	str.w	r9, [r0]
 8012990:	4604      	mov	r4, r0
 8012992:	e7e4      	b.n	801295e <__pow5mult+0x6a>
 8012994:	4630      	mov	r0, r6
 8012996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801299a:	bf00      	nop
 801299c:	08013620 	.word	0x08013620
 80129a0:	080134ed 	.word	0x080134ed
 80129a4:	0801356d 	.word	0x0801356d

080129a8 <__lshift>:
 80129a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80129ac:	460c      	mov	r4, r1
 80129ae:	6849      	ldr	r1, [r1, #4]
 80129b0:	6923      	ldr	r3, [r4, #16]
 80129b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80129b6:	68a3      	ldr	r3, [r4, #8]
 80129b8:	4607      	mov	r7, r0
 80129ba:	4691      	mov	r9, r2
 80129bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80129c0:	f108 0601 	add.w	r6, r8, #1
 80129c4:	42b3      	cmp	r3, r6
 80129c6:	db0b      	blt.n	80129e0 <__lshift+0x38>
 80129c8:	4638      	mov	r0, r7
 80129ca:	f7ff fde7 	bl	801259c <_Balloc>
 80129ce:	4605      	mov	r5, r0
 80129d0:	b948      	cbnz	r0, 80129e6 <__lshift+0x3e>
 80129d2:	4602      	mov	r2, r0
 80129d4:	4b28      	ldr	r3, [pc, #160]	@ (8012a78 <__lshift+0xd0>)
 80129d6:	4829      	ldr	r0, [pc, #164]	@ (8012a7c <__lshift+0xd4>)
 80129d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80129dc:	f000 fbca 	bl	8013174 <__assert_func>
 80129e0:	3101      	adds	r1, #1
 80129e2:	005b      	lsls	r3, r3, #1
 80129e4:	e7ee      	b.n	80129c4 <__lshift+0x1c>
 80129e6:	2300      	movs	r3, #0
 80129e8:	f100 0114 	add.w	r1, r0, #20
 80129ec:	f100 0210 	add.w	r2, r0, #16
 80129f0:	4618      	mov	r0, r3
 80129f2:	4553      	cmp	r3, sl
 80129f4:	db33      	blt.n	8012a5e <__lshift+0xb6>
 80129f6:	6920      	ldr	r0, [r4, #16]
 80129f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80129fc:	f104 0314 	add.w	r3, r4, #20
 8012a00:	f019 091f 	ands.w	r9, r9, #31
 8012a04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012a08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012a0c:	d02b      	beq.n	8012a66 <__lshift+0xbe>
 8012a0e:	f1c9 0e20 	rsb	lr, r9, #32
 8012a12:	468a      	mov	sl, r1
 8012a14:	2200      	movs	r2, #0
 8012a16:	6818      	ldr	r0, [r3, #0]
 8012a18:	fa00 f009 	lsl.w	r0, r0, r9
 8012a1c:	4310      	orrs	r0, r2
 8012a1e:	f84a 0b04 	str.w	r0, [sl], #4
 8012a22:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a26:	459c      	cmp	ip, r3
 8012a28:	fa22 f20e 	lsr.w	r2, r2, lr
 8012a2c:	d8f3      	bhi.n	8012a16 <__lshift+0x6e>
 8012a2e:	ebac 0304 	sub.w	r3, ip, r4
 8012a32:	3b15      	subs	r3, #21
 8012a34:	f023 0303 	bic.w	r3, r3, #3
 8012a38:	3304      	adds	r3, #4
 8012a3a:	f104 0015 	add.w	r0, r4, #21
 8012a3e:	4560      	cmp	r0, ip
 8012a40:	bf88      	it	hi
 8012a42:	2304      	movhi	r3, #4
 8012a44:	50ca      	str	r2, [r1, r3]
 8012a46:	b10a      	cbz	r2, 8012a4c <__lshift+0xa4>
 8012a48:	f108 0602 	add.w	r6, r8, #2
 8012a4c:	3e01      	subs	r6, #1
 8012a4e:	4638      	mov	r0, r7
 8012a50:	612e      	str	r6, [r5, #16]
 8012a52:	4621      	mov	r1, r4
 8012a54:	f7ff fde2 	bl	801261c <_Bfree>
 8012a58:	4628      	mov	r0, r5
 8012a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a5e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012a62:	3301      	adds	r3, #1
 8012a64:	e7c5      	b.n	80129f2 <__lshift+0x4a>
 8012a66:	3904      	subs	r1, #4
 8012a68:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a6c:	f841 2f04 	str.w	r2, [r1, #4]!
 8012a70:	459c      	cmp	ip, r3
 8012a72:	d8f9      	bhi.n	8012a68 <__lshift+0xc0>
 8012a74:	e7ea      	b.n	8012a4c <__lshift+0xa4>
 8012a76:	bf00      	nop
 8012a78:	0801355c 	.word	0x0801355c
 8012a7c:	0801356d 	.word	0x0801356d

08012a80 <__mcmp>:
 8012a80:	690a      	ldr	r2, [r1, #16]
 8012a82:	4603      	mov	r3, r0
 8012a84:	6900      	ldr	r0, [r0, #16]
 8012a86:	1a80      	subs	r0, r0, r2
 8012a88:	b530      	push	{r4, r5, lr}
 8012a8a:	d10e      	bne.n	8012aaa <__mcmp+0x2a>
 8012a8c:	3314      	adds	r3, #20
 8012a8e:	3114      	adds	r1, #20
 8012a90:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012a94:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012a98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012a9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012aa0:	4295      	cmp	r5, r2
 8012aa2:	d003      	beq.n	8012aac <__mcmp+0x2c>
 8012aa4:	d205      	bcs.n	8012ab2 <__mcmp+0x32>
 8012aa6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012aaa:	bd30      	pop	{r4, r5, pc}
 8012aac:	42a3      	cmp	r3, r4
 8012aae:	d3f3      	bcc.n	8012a98 <__mcmp+0x18>
 8012ab0:	e7fb      	b.n	8012aaa <__mcmp+0x2a>
 8012ab2:	2001      	movs	r0, #1
 8012ab4:	e7f9      	b.n	8012aaa <__mcmp+0x2a>
	...

08012ab8 <__mdiff>:
 8012ab8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012abc:	4689      	mov	r9, r1
 8012abe:	4606      	mov	r6, r0
 8012ac0:	4611      	mov	r1, r2
 8012ac2:	4648      	mov	r0, r9
 8012ac4:	4614      	mov	r4, r2
 8012ac6:	f7ff ffdb 	bl	8012a80 <__mcmp>
 8012aca:	1e05      	subs	r5, r0, #0
 8012acc:	d112      	bne.n	8012af4 <__mdiff+0x3c>
 8012ace:	4629      	mov	r1, r5
 8012ad0:	4630      	mov	r0, r6
 8012ad2:	f7ff fd63 	bl	801259c <_Balloc>
 8012ad6:	4602      	mov	r2, r0
 8012ad8:	b928      	cbnz	r0, 8012ae6 <__mdiff+0x2e>
 8012ada:	4b3f      	ldr	r3, [pc, #252]	@ (8012bd8 <__mdiff+0x120>)
 8012adc:	f240 2137 	movw	r1, #567	@ 0x237
 8012ae0:	483e      	ldr	r0, [pc, #248]	@ (8012bdc <__mdiff+0x124>)
 8012ae2:	f000 fb47 	bl	8013174 <__assert_func>
 8012ae6:	2301      	movs	r3, #1
 8012ae8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012aec:	4610      	mov	r0, r2
 8012aee:	b003      	add	sp, #12
 8012af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012af4:	bfbc      	itt	lt
 8012af6:	464b      	movlt	r3, r9
 8012af8:	46a1      	movlt	r9, r4
 8012afa:	4630      	mov	r0, r6
 8012afc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012b00:	bfba      	itte	lt
 8012b02:	461c      	movlt	r4, r3
 8012b04:	2501      	movlt	r5, #1
 8012b06:	2500      	movge	r5, #0
 8012b08:	f7ff fd48 	bl	801259c <_Balloc>
 8012b0c:	4602      	mov	r2, r0
 8012b0e:	b918      	cbnz	r0, 8012b18 <__mdiff+0x60>
 8012b10:	4b31      	ldr	r3, [pc, #196]	@ (8012bd8 <__mdiff+0x120>)
 8012b12:	f240 2145 	movw	r1, #581	@ 0x245
 8012b16:	e7e3      	b.n	8012ae0 <__mdiff+0x28>
 8012b18:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012b1c:	6926      	ldr	r6, [r4, #16]
 8012b1e:	60c5      	str	r5, [r0, #12]
 8012b20:	f109 0310 	add.w	r3, r9, #16
 8012b24:	f109 0514 	add.w	r5, r9, #20
 8012b28:	f104 0e14 	add.w	lr, r4, #20
 8012b2c:	f100 0b14 	add.w	fp, r0, #20
 8012b30:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012b34:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012b38:	9301      	str	r3, [sp, #4]
 8012b3a:	46d9      	mov	r9, fp
 8012b3c:	f04f 0c00 	mov.w	ip, #0
 8012b40:	9b01      	ldr	r3, [sp, #4]
 8012b42:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012b46:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012b4a:	9301      	str	r3, [sp, #4]
 8012b4c:	fa1f f38a 	uxth.w	r3, sl
 8012b50:	4619      	mov	r1, r3
 8012b52:	b283      	uxth	r3, r0
 8012b54:	1acb      	subs	r3, r1, r3
 8012b56:	0c00      	lsrs	r0, r0, #16
 8012b58:	4463      	add	r3, ip
 8012b5a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012b5e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012b62:	b29b      	uxth	r3, r3
 8012b64:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012b68:	4576      	cmp	r6, lr
 8012b6a:	f849 3b04 	str.w	r3, [r9], #4
 8012b6e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012b72:	d8e5      	bhi.n	8012b40 <__mdiff+0x88>
 8012b74:	1b33      	subs	r3, r6, r4
 8012b76:	3b15      	subs	r3, #21
 8012b78:	f023 0303 	bic.w	r3, r3, #3
 8012b7c:	3415      	adds	r4, #21
 8012b7e:	3304      	adds	r3, #4
 8012b80:	42a6      	cmp	r6, r4
 8012b82:	bf38      	it	cc
 8012b84:	2304      	movcc	r3, #4
 8012b86:	441d      	add	r5, r3
 8012b88:	445b      	add	r3, fp
 8012b8a:	461e      	mov	r6, r3
 8012b8c:	462c      	mov	r4, r5
 8012b8e:	4544      	cmp	r4, r8
 8012b90:	d30e      	bcc.n	8012bb0 <__mdiff+0xf8>
 8012b92:	f108 0103 	add.w	r1, r8, #3
 8012b96:	1b49      	subs	r1, r1, r5
 8012b98:	f021 0103 	bic.w	r1, r1, #3
 8012b9c:	3d03      	subs	r5, #3
 8012b9e:	45a8      	cmp	r8, r5
 8012ba0:	bf38      	it	cc
 8012ba2:	2100      	movcc	r1, #0
 8012ba4:	440b      	add	r3, r1
 8012ba6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012baa:	b191      	cbz	r1, 8012bd2 <__mdiff+0x11a>
 8012bac:	6117      	str	r7, [r2, #16]
 8012bae:	e79d      	b.n	8012aec <__mdiff+0x34>
 8012bb0:	f854 1b04 	ldr.w	r1, [r4], #4
 8012bb4:	46e6      	mov	lr, ip
 8012bb6:	0c08      	lsrs	r0, r1, #16
 8012bb8:	fa1c fc81 	uxtah	ip, ip, r1
 8012bbc:	4471      	add	r1, lr
 8012bbe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012bc2:	b289      	uxth	r1, r1
 8012bc4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012bc8:	f846 1b04 	str.w	r1, [r6], #4
 8012bcc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012bd0:	e7dd      	b.n	8012b8e <__mdiff+0xd6>
 8012bd2:	3f01      	subs	r7, #1
 8012bd4:	e7e7      	b.n	8012ba6 <__mdiff+0xee>
 8012bd6:	bf00      	nop
 8012bd8:	0801355c 	.word	0x0801355c
 8012bdc:	0801356d 	.word	0x0801356d

08012be0 <__d2b>:
 8012be0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012be4:	460f      	mov	r7, r1
 8012be6:	2101      	movs	r1, #1
 8012be8:	ec59 8b10 	vmov	r8, r9, d0
 8012bec:	4616      	mov	r6, r2
 8012bee:	f7ff fcd5 	bl	801259c <_Balloc>
 8012bf2:	4604      	mov	r4, r0
 8012bf4:	b930      	cbnz	r0, 8012c04 <__d2b+0x24>
 8012bf6:	4602      	mov	r2, r0
 8012bf8:	4b23      	ldr	r3, [pc, #140]	@ (8012c88 <__d2b+0xa8>)
 8012bfa:	4824      	ldr	r0, [pc, #144]	@ (8012c8c <__d2b+0xac>)
 8012bfc:	f240 310f 	movw	r1, #783	@ 0x30f
 8012c00:	f000 fab8 	bl	8013174 <__assert_func>
 8012c04:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012c08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012c0c:	b10d      	cbz	r5, 8012c12 <__d2b+0x32>
 8012c0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012c12:	9301      	str	r3, [sp, #4]
 8012c14:	f1b8 0300 	subs.w	r3, r8, #0
 8012c18:	d023      	beq.n	8012c62 <__d2b+0x82>
 8012c1a:	4668      	mov	r0, sp
 8012c1c:	9300      	str	r3, [sp, #0]
 8012c1e:	f7ff fd84 	bl	801272a <__lo0bits>
 8012c22:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012c26:	b1d0      	cbz	r0, 8012c5e <__d2b+0x7e>
 8012c28:	f1c0 0320 	rsb	r3, r0, #32
 8012c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8012c30:	430b      	orrs	r3, r1
 8012c32:	40c2      	lsrs	r2, r0
 8012c34:	6163      	str	r3, [r4, #20]
 8012c36:	9201      	str	r2, [sp, #4]
 8012c38:	9b01      	ldr	r3, [sp, #4]
 8012c3a:	61a3      	str	r3, [r4, #24]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	bf0c      	ite	eq
 8012c40:	2201      	moveq	r2, #1
 8012c42:	2202      	movne	r2, #2
 8012c44:	6122      	str	r2, [r4, #16]
 8012c46:	b1a5      	cbz	r5, 8012c72 <__d2b+0x92>
 8012c48:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012c4c:	4405      	add	r5, r0
 8012c4e:	603d      	str	r5, [r7, #0]
 8012c50:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012c54:	6030      	str	r0, [r6, #0]
 8012c56:	4620      	mov	r0, r4
 8012c58:	b003      	add	sp, #12
 8012c5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c5e:	6161      	str	r1, [r4, #20]
 8012c60:	e7ea      	b.n	8012c38 <__d2b+0x58>
 8012c62:	a801      	add	r0, sp, #4
 8012c64:	f7ff fd61 	bl	801272a <__lo0bits>
 8012c68:	9b01      	ldr	r3, [sp, #4]
 8012c6a:	6163      	str	r3, [r4, #20]
 8012c6c:	3020      	adds	r0, #32
 8012c6e:	2201      	movs	r2, #1
 8012c70:	e7e8      	b.n	8012c44 <__d2b+0x64>
 8012c72:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012c76:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012c7a:	6038      	str	r0, [r7, #0]
 8012c7c:	6918      	ldr	r0, [r3, #16]
 8012c7e:	f7ff fd35 	bl	80126ec <__hi0bits>
 8012c82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012c86:	e7e5      	b.n	8012c54 <__d2b+0x74>
 8012c88:	0801355c 	.word	0x0801355c
 8012c8c:	0801356d 	.word	0x0801356d

08012c90 <__sfputc_r>:
 8012c90:	6893      	ldr	r3, [r2, #8]
 8012c92:	3b01      	subs	r3, #1
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	b410      	push	{r4}
 8012c98:	6093      	str	r3, [r2, #8]
 8012c9a:	da08      	bge.n	8012cae <__sfputc_r+0x1e>
 8012c9c:	6994      	ldr	r4, [r2, #24]
 8012c9e:	42a3      	cmp	r3, r4
 8012ca0:	db01      	blt.n	8012ca6 <__sfputc_r+0x16>
 8012ca2:	290a      	cmp	r1, #10
 8012ca4:	d103      	bne.n	8012cae <__sfputc_r+0x1e>
 8012ca6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012caa:	f7fe bca0 	b.w	80115ee <__swbuf_r>
 8012cae:	6813      	ldr	r3, [r2, #0]
 8012cb0:	1c58      	adds	r0, r3, #1
 8012cb2:	6010      	str	r0, [r2, #0]
 8012cb4:	7019      	strb	r1, [r3, #0]
 8012cb6:	4608      	mov	r0, r1
 8012cb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012cbc:	4770      	bx	lr

08012cbe <__sfputs_r>:
 8012cbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cc0:	4606      	mov	r6, r0
 8012cc2:	460f      	mov	r7, r1
 8012cc4:	4614      	mov	r4, r2
 8012cc6:	18d5      	adds	r5, r2, r3
 8012cc8:	42ac      	cmp	r4, r5
 8012cca:	d101      	bne.n	8012cd0 <__sfputs_r+0x12>
 8012ccc:	2000      	movs	r0, #0
 8012cce:	e007      	b.n	8012ce0 <__sfputs_r+0x22>
 8012cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cd4:	463a      	mov	r2, r7
 8012cd6:	4630      	mov	r0, r6
 8012cd8:	f7ff ffda 	bl	8012c90 <__sfputc_r>
 8012cdc:	1c43      	adds	r3, r0, #1
 8012cde:	d1f3      	bne.n	8012cc8 <__sfputs_r+0xa>
 8012ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012ce4 <_vfiprintf_r>:
 8012ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ce8:	460d      	mov	r5, r1
 8012cea:	b09d      	sub	sp, #116	@ 0x74
 8012cec:	4614      	mov	r4, r2
 8012cee:	4698      	mov	r8, r3
 8012cf0:	4606      	mov	r6, r0
 8012cf2:	b118      	cbz	r0, 8012cfc <_vfiprintf_r+0x18>
 8012cf4:	6a03      	ldr	r3, [r0, #32]
 8012cf6:	b90b      	cbnz	r3, 8012cfc <_vfiprintf_r+0x18>
 8012cf8:	f7fe fb90 	bl	801141c <__sinit>
 8012cfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012cfe:	07d9      	lsls	r1, r3, #31
 8012d00:	d405      	bmi.n	8012d0e <_vfiprintf_r+0x2a>
 8012d02:	89ab      	ldrh	r3, [r5, #12]
 8012d04:	059a      	lsls	r2, r3, #22
 8012d06:	d402      	bmi.n	8012d0e <_vfiprintf_r+0x2a>
 8012d08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012d0a:	f7fe fd92 	bl	8011832 <__retarget_lock_acquire_recursive>
 8012d0e:	89ab      	ldrh	r3, [r5, #12]
 8012d10:	071b      	lsls	r3, r3, #28
 8012d12:	d501      	bpl.n	8012d18 <_vfiprintf_r+0x34>
 8012d14:	692b      	ldr	r3, [r5, #16]
 8012d16:	b99b      	cbnz	r3, 8012d40 <_vfiprintf_r+0x5c>
 8012d18:	4629      	mov	r1, r5
 8012d1a:	4630      	mov	r0, r6
 8012d1c:	f7fe fca6 	bl	801166c <__swsetup_r>
 8012d20:	b170      	cbz	r0, 8012d40 <_vfiprintf_r+0x5c>
 8012d22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012d24:	07dc      	lsls	r4, r3, #31
 8012d26:	d504      	bpl.n	8012d32 <_vfiprintf_r+0x4e>
 8012d28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012d2c:	b01d      	add	sp, #116	@ 0x74
 8012d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d32:	89ab      	ldrh	r3, [r5, #12]
 8012d34:	0598      	lsls	r0, r3, #22
 8012d36:	d4f7      	bmi.n	8012d28 <_vfiprintf_r+0x44>
 8012d38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012d3a:	f7fe fd7b 	bl	8011834 <__retarget_lock_release_recursive>
 8012d3e:	e7f3      	b.n	8012d28 <_vfiprintf_r+0x44>
 8012d40:	2300      	movs	r3, #0
 8012d42:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d44:	2320      	movs	r3, #32
 8012d46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012d4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8012d4e:	2330      	movs	r3, #48	@ 0x30
 8012d50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012f00 <_vfiprintf_r+0x21c>
 8012d54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012d58:	f04f 0901 	mov.w	r9, #1
 8012d5c:	4623      	mov	r3, r4
 8012d5e:	469a      	mov	sl, r3
 8012d60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012d64:	b10a      	cbz	r2, 8012d6a <_vfiprintf_r+0x86>
 8012d66:	2a25      	cmp	r2, #37	@ 0x25
 8012d68:	d1f9      	bne.n	8012d5e <_vfiprintf_r+0x7a>
 8012d6a:	ebba 0b04 	subs.w	fp, sl, r4
 8012d6e:	d00b      	beq.n	8012d88 <_vfiprintf_r+0xa4>
 8012d70:	465b      	mov	r3, fp
 8012d72:	4622      	mov	r2, r4
 8012d74:	4629      	mov	r1, r5
 8012d76:	4630      	mov	r0, r6
 8012d78:	f7ff ffa1 	bl	8012cbe <__sfputs_r>
 8012d7c:	3001      	adds	r0, #1
 8012d7e:	f000 80a7 	beq.w	8012ed0 <_vfiprintf_r+0x1ec>
 8012d82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012d84:	445a      	add	r2, fp
 8012d86:	9209      	str	r2, [sp, #36]	@ 0x24
 8012d88:	f89a 3000 	ldrb.w	r3, [sl]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	f000 809f 	beq.w	8012ed0 <_vfiprintf_r+0x1ec>
 8012d92:	2300      	movs	r3, #0
 8012d94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012d98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012d9c:	f10a 0a01 	add.w	sl, sl, #1
 8012da0:	9304      	str	r3, [sp, #16]
 8012da2:	9307      	str	r3, [sp, #28]
 8012da4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012da8:	931a      	str	r3, [sp, #104]	@ 0x68
 8012daa:	4654      	mov	r4, sl
 8012dac:	2205      	movs	r2, #5
 8012dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012db2:	4853      	ldr	r0, [pc, #332]	@ (8012f00 <_vfiprintf_r+0x21c>)
 8012db4:	f7ed fa1c 	bl	80001f0 <memchr>
 8012db8:	9a04      	ldr	r2, [sp, #16]
 8012dba:	b9d8      	cbnz	r0, 8012df4 <_vfiprintf_r+0x110>
 8012dbc:	06d1      	lsls	r1, r2, #27
 8012dbe:	bf44      	itt	mi
 8012dc0:	2320      	movmi	r3, #32
 8012dc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012dc6:	0713      	lsls	r3, r2, #28
 8012dc8:	bf44      	itt	mi
 8012dca:	232b      	movmi	r3, #43	@ 0x2b
 8012dcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012dd0:	f89a 3000 	ldrb.w	r3, [sl]
 8012dd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8012dd6:	d015      	beq.n	8012e04 <_vfiprintf_r+0x120>
 8012dd8:	9a07      	ldr	r2, [sp, #28]
 8012dda:	4654      	mov	r4, sl
 8012ddc:	2000      	movs	r0, #0
 8012dde:	f04f 0c0a 	mov.w	ip, #10
 8012de2:	4621      	mov	r1, r4
 8012de4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012de8:	3b30      	subs	r3, #48	@ 0x30
 8012dea:	2b09      	cmp	r3, #9
 8012dec:	d94b      	bls.n	8012e86 <_vfiprintf_r+0x1a2>
 8012dee:	b1b0      	cbz	r0, 8012e1e <_vfiprintf_r+0x13a>
 8012df0:	9207      	str	r2, [sp, #28]
 8012df2:	e014      	b.n	8012e1e <_vfiprintf_r+0x13a>
 8012df4:	eba0 0308 	sub.w	r3, r0, r8
 8012df8:	fa09 f303 	lsl.w	r3, r9, r3
 8012dfc:	4313      	orrs	r3, r2
 8012dfe:	9304      	str	r3, [sp, #16]
 8012e00:	46a2      	mov	sl, r4
 8012e02:	e7d2      	b.n	8012daa <_vfiprintf_r+0xc6>
 8012e04:	9b03      	ldr	r3, [sp, #12]
 8012e06:	1d19      	adds	r1, r3, #4
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	9103      	str	r1, [sp, #12]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	bfbb      	ittet	lt
 8012e10:	425b      	neglt	r3, r3
 8012e12:	f042 0202 	orrlt.w	r2, r2, #2
 8012e16:	9307      	strge	r3, [sp, #28]
 8012e18:	9307      	strlt	r3, [sp, #28]
 8012e1a:	bfb8      	it	lt
 8012e1c:	9204      	strlt	r2, [sp, #16]
 8012e1e:	7823      	ldrb	r3, [r4, #0]
 8012e20:	2b2e      	cmp	r3, #46	@ 0x2e
 8012e22:	d10a      	bne.n	8012e3a <_vfiprintf_r+0x156>
 8012e24:	7863      	ldrb	r3, [r4, #1]
 8012e26:	2b2a      	cmp	r3, #42	@ 0x2a
 8012e28:	d132      	bne.n	8012e90 <_vfiprintf_r+0x1ac>
 8012e2a:	9b03      	ldr	r3, [sp, #12]
 8012e2c:	1d1a      	adds	r2, r3, #4
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	9203      	str	r2, [sp, #12]
 8012e32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012e36:	3402      	adds	r4, #2
 8012e38:	9305      	str	r3, [sp, #20]
 8012e3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012f10 <_vfiprintf_r+0x22c>
 8012e3e:	7821      	ldrb	r1, [r4, #0]
 8012e40:	2203      	movs	r2, #3
 8012e42:	4650      	mov	r0, sl
 8012e44:	f7ed f9d4 	bl	80001f0 <memchr>
 8012e48:	b138      	cbz	r0, 8012e5a <_vfiprintf_r+0x176>
 8012e4a:	9b04      	ldr	r3, [sp, #16]
 8012e4c:	eba0 000a 	sub.w	r0, r0, sl
 8012e50:	2240      	movs	r2, #64	@ 0x40
 8012e52:	4082      	lsls	r2, r0
 8012e54:	4313      	orrs	r3, r2
 8012e56:	3401      	adds	r4, #1
 8012e58:	9304      	str	r3, [sp, #16]
 8012e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e5e:	4829      	ldr	r0, [pc, #164]	@ (8012f04 <_vfiprintf_r+0x220>)
 8012e60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012e64:	2206      	movs	r2, #6
 8012e66:	f7ed f9c3 	bl	80001f0 <memchr>
 8012e6a:	2800      	cmp	r0, #0
 8012e6c:	d03f      	beq.n	8012eee <_vfiprintf_r+0x20a>
 8012e6e:	4b26      	ldr	r3, [pc, #152]	@ (8012f08 <_vfiprintf_r+0x224>)
 8012e70:	bb1b      	cbnz	r3, 8012eba <_vfiprintf_r+0x1d6>
 8012e72:	9b03      	ldr	r3, [sp, #12]
 8012e74:	3307      	adds	r3, #7
 8012e76:	f023 0307 	bic.w	r3, r3, #7
 8012e7a:	3308      	adds	r3, #8
 8012e7c:	9303      	str	r3, [sp, #12]
 8012e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e80:	443b      	add	r3, r7
 8012e82:	9309      	str	r3, [sp, #36]	@ 0x24
 8012e84:	e76a      	b.n	8012d5c <_vfiprintf_r+0x78>
 8012e86:	fb0c 3202 	mla	r2, ip, r2, r3
 8012e8a:	460c      	mov	r4, r1
 8012e8c:	2001      	movs	r0, #1
 8012e8e:	e7a8      	b.n	8012de2 <_vfiprintf_r+0xfe>
 8012e90:	2300      	movs	r3, #0
 8012e92:	3401      	adds	r4, #1
 8012e94:	9305      	str	r3, [sp, #20]
 8012e96:	4619      	mov	r1, r3
 8012e98:	f04f 0c0a 	mov.w	ip, #10
 8012e9c:	4620      	mov	r0, r4
 8012e9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012ea2:	3a30      	subs	r2, #48	@ 0x30
 8012ea4:	2a09      	cmp	r2, #9
 8012ea6:	d903      	bls.n	8012eb0 <_vfiprintf_r+0x1cc>
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d0c6      	beq.n	8012e3a <_vfiprintf_r+0x156>
 8012eac:	9105      	str	r1, [sp, #20]
 8012eae:	e7c4      	b.n	8012e3a <_vfiprintf_r+0x156>
 8012eb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8012eb4:	4604      	mov	r4, r0
 8012eb6:	2301      	movs	r3, #1
 8012eb8:	e7f0      	b.n	8012e9c <_vfiprintf_r+0x1b8>
 8012eba:	ab03      	add	r3, sp, #12
 8012ebc:	9300      	str	r3, [sp, #0]
 8012ebe:	462a      	mov	r2, r5
 8012ec0:	4b12      	ldr	r3, [pc, #72]	@ (8012f0c <_vfiprintf_r+0x228>)
 8012ec2:	a904      	add	r1, sp, #16
 8012ec4:	4630      	mov	r0, r6
 8012ec6:	f7fd fe67 	bl	8010b98 <_printf_float>
 8012eca:	4607      	mov	r7, r0
 8012ecc:	1c78      	adds	r0, r7, #1
 8012ece:	d1d6      	bne.n	8012e7e <_vfiprintf_r+0x19a>
 8012ed0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012ed2:	07d9      	lsls	r1, r3, #31
 8012ed4:	d405      	bmi.n	8012ee2 <_vfiprintf_r+0x1fe>
 8012ed6:	89ab      	ldrh	r3, [r5, #12]
 8012ed8:	059a      	lsls	r2, r3, #22
 8012eda:	d402      	bmi.n	8012ee2 <_vfiprintf_r+0x1fe>
 8012edc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012ede:	f7fe fca9 	bl	8011834 <__retarget_lock_release_recursive>
 8012ee2:	89ab      	ldrh	r3, [r5, #12]
 8012ee4:	065b      	lsls	r3, r3, #25
 8012ee6:	f53f af1f 	bmi.w	8012d28 <_vfiprintf_r+0x44>
 8012eea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012eec:	e71e      	b.n	8012d2c <_vfiprintf_r+0x48>
 8012eee:	ab03      	add	r3, sp, #12
 8012ef0:	9300      	str	r3, [sp, #0]
 8012ef2:	462a      	mov	r2, r5
 8012ef4:	4b05      	ldr	r3, [pc, #20]	@ (8012f0c <_vfiprintf_r+0x228>)
 8012ef6:	a904      	add	r1, sp, #16
 8012ef8:	4630      	mov	r0, r6
 8012efa:	f7fe f8e5 	bl	80110c8 <_printf_i>
 8012efe:	e7e4      	b.n	8012eca <_vfiprintf_r+0x1e6>
 8012f00:	080135c6 	.word	0x080135c6
 8012f04:	080135d0 	.word	0x080135d0
 8012f08:	08010b99 	.word	0x08010b99
 8012f0c:	08012cbf 	.word	0x08012cbf
 8012f10:	080135cc 	.word	0x080135cc

08012f14 <__sflush_r>:
 8012f14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f1c:	0716      	lsls	r6, r2, #28
 8012f1e:	4605      	mov	r5, r0
 8012f20:	460c      	mov	r4, r1
 8012f22:	d454      	bmi.n	8012fce <__sflush_r+0xba>
 8012f24:	684b      	ldr	r3, [r1, #4]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	dc02      	bgt.n	8012f30 <__sflush_r+0x1c>
 8012f2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	dd48      	ble.n	8012fc2 <__sflush_r+0xae>
 8012f30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012f32:	2e00      	cmp	r6, #0
 8012f34:	d045      	beq.n	8012fc2 <__sflush_r+0xae>
 8012f36:	2300      	movs	r3, #0
 8012f38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012f3c:	682f      	ldr	r7, [r5, #0]
 8012f3e:	6a21      	ldr	r1, [r4, #32]
 8012f40:	602b      	str	r3, [r5, #0]
 8012f42:	d030      	beq.n	8012fa6 <__sflush_r+0x92>
 8012f44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012f46:	89a3      	ldrh	r3, [r4, #12]
 8012f48:	0759      	lsls	r1, r3, #29
 8012f4a:	d505      	bpl.n	8012f58 <__sflush_r+0x44>
 8012f4c:	6863      	ldr	r3, [r4, #4]
 8012f4e:	1ad2      	subs	r2, r2, r3
 8012f50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012f52:	b10b      	cbz	r3, 8012f58 <__sflush_r+0x44>
 8012f54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012f56:	1ad2      	subs	r2, r2, r3
 8012f58:	2300      	movs	r3, #0
 8012f5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012f5c:	6a21      	ldr	r1, [r4, #32]
 8012f5e:	4628      	mov	r0, r5
 8012f60:	47b0      	blx	r6
 8012f62:	1c43      	adds	r3, r0, #1
 8012f64:	89a3      	ldrh	r3, [r4, #12]
 8012f66:	d106      	bne.n	8012f76 <__sflush_r+0x62>
 8012f68:	6829      	ldr	r1, [r5, #0]
 8012f6a:	291d      	cmp	r1, #29
 8012f6c:	d82b      	bhi.n	8012fc6 <__sflush_r+0xb2>
 8012f6e:	4a2a      	ldr	r2, [pc, #168]	@ (8013018 <__sflush_r+0x104>)
 8012f70:	40ca      	lsrs	r2, r1
 8012f72:	07d6      	lsls	r6, r2, #31
 8012f74:	d527      	bpl.n	8012fc6 <__sflush_r+0xb2>
 8012f76:	2200      	movs	r2, #0
 8012f78:	6062      	str	r2, [r4, #4]
 8012f7a:	04d9      	lsls	r1, r3, #19
 8012f7c:	6922      	ldr	r2, [r4, #16]
 8012f7e:	6022      	str	r2, [r4, #0]
 8012f80:	d504      	bpl.n	8012f8c <__sflush_r+0x78>
 8012f82:	1c42      	adds	r2, r0, #1
 8012f84:	d101      	bne.n	8012f8a <__sflush_r+0x76>
 8012f86:	682b      	ldr	r3, [r5, #0]
 8012f88:	b903      	cbnz	r3, 8012f8c <__sflush_r+0x78>
 8012f8a:	6560      	str	r0, [r4, #84]	@ 0x54
 8012f8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012f8e:	602f      	str	r7, [r5, #0]
 8012f90:	b1b9      	cbz	r1, 8012fc2 <__sflush_r+0xae>
 8012f92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012f96:	4299      	cmp	r1, r3
 8012f98:	d002      	beq.n	8012fa0 <__sflush_r+0x8c>
 8012f9a:	4628      	mov	r0, r5
 8012f9c:	f7ff fab4 	bl	8012508 <_free_r>
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	6363      	str	r3, [r4, #52]	@ 0x34
 8012fa4:	e00d      	b.n	8012fc2 <__sflush_r+0xae>
 8012fa6:	2301      	movs	r3, #1
 8012fa8:	4628      	mov	r0, r5
 8012faa:	47b0      	blx	r6
 8012fac:	4602      	mov	r2, r0
 8012fae:	1c50      	adds	r0, r2, #1
 8012fb0:	d1c9      	bne.n	8012f46 <__sflush_r+0x32>
 8012fb2:	682b      	ldr	r3, [r5, #0]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d0c6      	beq.n	8012f46 <__sflush_r+0x32>
 8012fb8:	2b1d      	cmp	r3, #29
 8012fba:	d001      	beq.n	8012fc0 <__sflush_r+0xac>
 8012fbc:	2b16      	cmp	r3, #22
 8012fbe:	d11e      	bne.n	8012ffe <__sflush_r+0xea>
 8012fc0:	602f      	str	r7, [r5, #0]
 8012fc2:	2000      	movs	r0, #0
 8012fc4:	e022      	b.n	801300c <__sflush_r+0xf8>
 8012fc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012fca:	b21b      	sxth	r3, r3
 8012fcc:	e01b      	b.n	8013006 <__sflush_r+0xf2>
 8012fce:	690f      	ldr	r7, [r1, #16]
 8012fd0:	2f00      	cmp	r7, #0
 8012fd2:	d0f6      	beq.n	8012fc2 <__sflush_r+0xae>
 8012fd4:	0793      	lsls	r3, r2, #30
 8012fd6:	680e      	ldr	r6, [r1, #0]
 8012fd8:	bf08      	it	eq
 8012fda:	694b      	ldreq	r3, [r1, #20]
 8012fdc:	600f      	str	r7, [r1, #0]
 8012fde:	bf18      	it	ne
 8012fe0:	2300      	movne	r3, #0
 8012fe2:	eba6 0807 	sub.w	r8, r6, r7
 8012fe6:	608b      	str	r3, [r1, #8]
 8012fe8:	f1b8 0f00 	cmp.w	r8, #0
 8012fec:	dde9      	ble.n	8012fc2 <__sflush_r+0xae>
 8012fee:	6a21      	ldr	r1, [r4, #32]
 8012ff0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012ff2:	4643      	mov	r3, r8
 8012ff4:	463a      	mov	r2, r7
 8012ff6:	4628      	mov	r0, r5
 8012ff8:	47b0      	blx	r6
 8012ffa:	2800      	cmp	r0, #0
 8012ffc:	dc08      	bgt.n	8013010 <__sflush_r+0xfc>
 8012ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013002:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013006:	81a3      	strh	r3, [r4, #12]
 8013008:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801300c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013010:	4407      	add	r7, r0
 8013012:	eba8 0800 	sub.w	r8, r8, r0
 8013016:	e7e7      	b.n	8012fe8 <__sflush_r+0xd4>
 8013018:	20400001 	.word	0x20400001

0801301c <_fflush_r>:
 801301c:	b538      	push	{r3, r4, r5, lr}
 801301e:	690b      	ldr	r3, [r1, #16]
 8013020:	4605      	mov	r5, r0
 8013022:	460c      	mov	r4, r1
 8013024:	b913      	cbnz	r3, 801302c <_fflush_r+0x10>
 8013026:	2500      	movs	r5, #0
 8013028:	4628      	mov	r0, r5
 801302a:	bd38      	pop	{r3, r4, r5, pc}
 801302c:	b118      	cbz	r0, 8013036 <_fflush_r+0x1a>
 801302e:	6a03      	ldr	r3, [r0, #32]
 8013030:	b90b      	cbnz	r3, 8013036 <_fflush_r+0x1a>
 8013032:	f7fe f9f3 	bl	801141c <__sinit>
 8013036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d0f3      	beq.n	8013026 <_fflush_r+0xa>
 801303e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013040:	07d0      	lsls	r0, r2, #31
 8013042:	d404      	bmi.n	801304e <_fflush_r+0x32>
 8013044:	0599      	lsls	r1, r3, #22
 8013046:	d402      	bmi.n	801304e <_fflush_r+0x32>
 8013048:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801304a:	f7fe fbf2 	bl	8011832 <__retarget_lock_acquire_recursive>
 801304e:	4628      	mov	r0, r5
 8013050:	4621      	mov	r1, r4
 8013052:	f7ff ff5f 	bl	8012f14 <__sflush_r>
 8013056:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013058:	07da      	lsls	r2, r3, #31
 801305a:	4605      	mov	r5, r0
 801305c:	d4e4      	bmi.n	8013028 <_fflush_r+0xc>
 801305e:	89a3      	ldrh	r3, [r4, #12]
 8013060:	059b      	lsls	r3, r3, #22
 8013062:	d4e1      	bmi.n	8013028 <_fflush_r+0xc>
 8013064:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013066:	f7fe fbe5 	bl	8011834 <__retarget_lock_release_recursive>
 801306a:	e7dd      	b.n	8013028 <_fflush_r+0xc>

0801306c <__swhatbuf_r>:
 801306c:	b570      	push	{r4, r5, r6, lr}
 801306e:	460c      	mov	r4, r1
 8013070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013074:	2900      	cmp	r1, #0
 8013076:	b096      	sub	sp, #88	@ 0x58
 8013078:	4615      	mov	r5, r2
 801307a:	461e      	mov	r6, r3
 801307c:	da0d      	bge.n	801309a <__swhatbuf_r+0x2e>
 801307e:	89a3      	ldrh	r3, [r4, #12]
 8013080:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013084:	f04f 0100 	mov.w	r1, #0
 8013088:	bf14      	ite	ne
 801308a:	2340      	movne	r3, #64	@ 0x40
 801308c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013090:	2000      	movs	r0, #0
 8013092:	6031      	str	r1, [r6, #0]
 8013094:	602b      	str	r3, [r5, #0]
 8013096:	b016      	add	sp, #88	@ 0x58
 8013098:	bd70      	pop	{r4, r5, r6, pc}
 801309a:	466a      	mov	r2, sp
 801309c:	f000 f848 	bl	8013130 <_fstat_r>
 80130a0:	2800      	cmp	r0, #0
 80130a2:	dbec      	blt.n	801307e <__swhatbuf_r+0x12>
 80130a4:	9901      	ldr	r1, [sp, #4]
 80130a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80130aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80130ae:	4259      	negs	r1, r3
 80130b0:	4159      	adcs	r1, r3
 80130b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80130b6:	e7eb      	b.n	8013090 <__swhatbuf_r+0x24>

080130b8 <__smakebuf_r>:
 80130b8:	898b      	ldrh	r3, [r1, #12]
 80130ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80130bc:	079d      	lsls	r5, r3, #30
 80130be:	4606      	mov	r6, r0
 80130c0:	460c      	mov	r4, r1
 80130c2:	d507      	bpl.n	80130d4 <__smakebuf_r+0x1c>
 80130c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80130c8:	6023      	str	r3, [r4, #0]
 80130ca:	6123      	str	r3, [r4, #16]
 80130cc:	2301      	movs	r3, #1
 80130ce:	6163      	str	r3, [r4, #20]
 80130d0:	b003      	add	sp, #12
 80130d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130d4:	ab01      	add	r3, sp, #4
 80130d6:	466a      	mov	r2, sp
 80130d8:	f7ff ffc8 	bl	801306c <__swhatbuf_r>
 80130dc:	9f00      	ldr	r7, [sp, #0]
 80130de:	4605      	mov	r5, r0
 80130e0:	4639      	mov	r1, r7
 80130e2:	4630      	mov	r0, r6
 80130e4:	f7fd fc2c 	bl	8010940 <_malloc_r>
 80130e8:	b948      	cbnz	r0, 80130fe <__smakebuf_r+0x46>
 80130ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80130ee:	059a      	lsls	r2, r3, #22
 80130f0:	d4ee      	bmi.n	80130d0 <__smakebuf_r+0x18>
 80130f2:	f023 0303 	bic.w	r3, r3, #3
 80130f6:	f043 0302 	orr.w	r3, r3, #2
 80130fa:	81a3      	strh	r3, [r4, #12]
 80130fc:	e7e2      	b.n	80130c4 <__smakebuf_r+0xc>
 80130fe:	89a3      	ldrh	r3, [r4, #12]
 8013100:	6020      	str	r0, [r4, #0]
 8013102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013106:	81a3      	strh	r3, [r4, #12]
 8013108:	9b01      	ldr	r3, [sp, #4]
 801310a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801310e:	b15b      	cbz	r3, 8013128 <__smakebuf_r+0x70>
 8013110:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013114:	4630      	mov	r0, r6
 8013116:	f000 f81d 	bl	8013154 <_isatty_r>
 801311a:	b128      	cbz	r0, 8013128 <__smakebuf_r+0x70>
 801311c:	89a3      	ldrh	r3, [r4, #12]
 801311e:	f023 0303 	bic.w	r3, r3, #3
 8013122:	f043 0301 	orr.w	r3, r3, #1
 8013126:	81a3      	strh	r3, [r4, #12]
 8013128:	89a3      	ldrh	r3, [r4, #12]
 801312a:	431d      	orrs	r5, r3
 801312c:	81a5      	strh	r5, [r4, #12]
 801312e:	e7cf      	b.n	80130d0 <__smakebuf_r+0x18>

08013130 <_fstat_r>:
 8013130:	b538      	push	{r3, r4, r5, lr}
 8013132:	4d07      	ldr	r5, [pc, #28]	@ (8013150 <_fstat_r+0x20>)
 8013134:	2300      	movs	r3, #0
 8013136:	4604      	mov	r4, r0
 8013138:	4608      	mov	r0, r1
 801313a:	4611      	mov	r1, r2
 801313c:	602b      	str	r3, [r5, #0]
 801313e:	f7f0 fa4f 	bl	80035e0 <_fstat>
 8013142:	1c43      	adds	r3, r0, #1
 8013144:	d102      	bne.n	801314c <_fstat_r+0x1c>
 8013146:	682b      	ldr	r3, [r5, #0]
 8013148:	b103      	cbz	r3, 801314c <_fstat_r+0x1c>
 801314a:	6023      	str	r3, [r4, #0]
 801314c:	bd38      	pop	{r3, r4, r5, pc}
 801314e:	bf00      	nop
 8013150:	2002a750 	.word	0x2002a750

08013154 <_isatty_r>:
 8013154:	b538      	push	{r3, r4, r5, lr}
 8013156:	4d06      	ldr	r5, [pc, #24]	@ (8013170 <_isatty_r+0x1c>)
 8013158:	2300      	movs	r3, #0
 801315a:	4604      	mov	r4, r0
 801315c:	4608      	mov	r0, r1
 801315e:	602b      	str	r3, [r5, #0]
 8013160:	f7f0 fa4e 	bl	8003600 <_isatty>
 8013164:	1c43      	adds	r3, r0, #1
 8013166:	d102      	bne.n	801316e <_isatty_r+0x1a>
 8013168:	682b      	ldr	r3, [r5, #0]
 801316a:	b103      	cbz	r3, 801316e <_isatty_r+0x1a>
 801316c:	6023      	str	r3, [r4, #0]
 801316e:	bd38      	pop	{r3, r4, r5, pc}
 8013170:	2002a750 	.word	0x2002a750

08013174 <__assert_func>:
 8013174:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013176:	4614      	mov	r4, r2
 8013178:	461a      	mov	r2, r3
 801317a:	4b09      	ldr	r3, [pc, #36]	@ (80131a0 <__assert_func+0x2c>)
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	4605      	mov	r5, r0
 8013180:	68d8      	ldr	r0, [r3, #12]
 8013182:	b14c      	cbz	r4, 8013198 <__assert_func+0x24>
 8013184:	4b07      	ldr	r3, [pc, #28]	@ (80131a4 <__assert_func+0x30>)
 8013186:	9100      	str	r1, [sp, #0]
 8013188:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801318c:	4906      	ldr	r1, [pc, #24]	@ (80131a8 <__assert_func+0x34>)
 801318e:	462b      	mov	r3, r5
 8013190:	f000 f842 	bl	8013218 <fiprintf>
 8013194:	f000 f852 	bl	801323c <abort>
 8013198:	4b04      	ldr	r3, [pc, #16]	@ (80131ac <__assert_func+0x38>)
 801319a:	461c      	mov	r4, r3
 801319c:	e7f3      	b.n	8013186 <__assert_func+0x12>
 801319e:	bf00      	nop
 80131a0:	20000044 	.word	0x20000044
 80131a4:	080135e1 	.word	0x080135e1
 80131a8:	080135ee 	.word	0x080135ee
 80131ac:	0801361c 	.word	0x0801361c

080131b0 <_calloc_r>:
 80131b0:	b570      	push	{r4, r5, r6, lr}
 80131b2:	fba1 5402 	umull	r5, r4, r1, r2
 80131b6:	b934      	cbnz	r4, 80131c6 <_calloc_r+0x16>
 80131b8:	4629      	mov	r1, r5
 80131ba:	f7fd fbc1 	bl	8010940 <_malloc_r>
 80131be:	4606      	mov	r6, r0
 80131c0:	b928      	cbnz	r0, 80131ce <_calloc_r+0x1e>
 80131c2:	4630      	mov	r0, r6
 80131c4:	bd70      	pop	{r4, r5, r6, pc}
 80131c6:	220c      	movs	r2, #12
 80131c8:	6002      	str	r2, [r0, #0]
 80131ca:	2600      	movs	r6, #0
 80131cc:	e7f9      	b.n	80131c2 <_calloc_r+0x12>
 80131ce:	462a      	mov	r2, r5
 80131d0:	4621      	mov	r1, r4
 80131d2:	f7fe faa1 	bl	8011718 <memset>
 80131d6:	e7f4      	b.n	80131c2 <_calloc_r+0x12>

080131d8 <__ascii_mbtowc>:
 80131d8:	b082      	sub	sp, #8
 80131da:	b901      	cbnz	r1, 80131de <__ascii_mbtowc+0x6>
 80131dc:	a901      	add	r1, sp, #4
 80131de:	b142      	cbz	r2, 80131f2 <__ascii_mbtowc+0x1a>
 80131e0:	b14b      	cbz	r3, 80131f6 <__ascii_mbtowc+0x1e>
 80131e2:	7813      	ldrb	r3, [r2, #0]
 80131e4:	600b      	str	r3, [r1, #0]
 80131e6:	7812      	ldrb	r2, [r2, #0]
 80131e8:	1e10      	subs	r0, r2, #0
 80131ea:	bf18      	it	ne
 80131ec:	2001      	movne	r0, #1
 80131ee:	b002      	add	sp, #8
 80131f0:	4770      	bx	lr
 80131f2:	4610      	mov	r0, r2
 80131f4:	e7fb      	b.n	80131ee <__ascii_mbtowc+0x16>
 80131f6:	f06f 0001 	mvn.w	r0, #1
 80131fa:	e7f8      	b.n	80131ee <__ascii_mbtowc+0x16>

080131fc <__ascii_wctomb>:
 80131fc:	4603      	mov	r3, r0
 80131fe:	4608      	mov	r0, r1
 8013200:	b141      	cbz	r1, 8013214 <__ascii_wctomb+0x18>
 8013202:	2aff      	cmp	r2, #255	@ 0xff
 8013204:	d904      	bls.n	8013210 <__ascii_wctomb+0x14>
 8013206:	228a      	movs	r2, #138	@ 0x8a
 8013208:	601a      	str	r2, [r3, #0]
 801320a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801320e:	4770      	bx	lr
 8013210:	700a      	strb	r2, [r1, #0]
 8013212:	2001      	movs	r0, #1
 8013214:	4770      	bx	lr
	...

08013218 <fiprintf>:
 8013218:	b40e      	push	{r1, r2, r3}
 801321a:	b503      	push	{r0, r1, lr}
 801321c:	4601      	mov	r1, r0
 801321e:	ab03      	add	r3, sp, #12
 8013220:	4805      	ldr	r0, [pc, #20]	@ (8013238 <fiprintf+0x20>)
 8013222:	f853 2b04 	ldr.w	r2, [r3], #4
 8013226:	6800      	ldr	r0, [r0, #0]
 8013228:	9301      	str	r3, [sp, #4]
 801322a:	f7ff fd5b 	bl	8012ce4 <_vfiprintf_r>
 801322e:	b002      	add	sp, #8
 8013230:	f85d eb04 	ldr.w	lr, [sp], #4
 8013234:	b003      	add	sp, #12
 8013236:	4770      	bx	lr
 8013238:	20000044 	.word	0x20000044

0801323c <abort>:
 801323c:	b508      	push	{r3, lr}
 801323e:	2006      	movs	r0, #6
 8013240:	f000 f82c 	bl	801329c <raise>
 8013244:	2001      	movs	r0, #1
 8013246:	f7f0 f997 	bl	8003578 <_exit>

0801324a <_raise_r>:
 801324a:	291f      	cmp	r1, #31
 801324c:	b538      	push	{r3, r4, r5, lr}
 801324e:	4605      	mov	r5, r0
 8013250:	460c      	mov	r4, r1
 8013252:	d904      	bls.n	801325e <_raise_r+0x14>
 8013254:	2316      	movs	r3, #22
 8013256:	6003      	str	r3, [r0, #0]
 8013258:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801325c:	bd38      	pop	{r3, r4, r5, pc}
 801325e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013260:	b112      	cbz	r2, 8013268 <_raise_r+0x1e>
 8013262:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013266:	b94b      	cbnz	r3, 801327c <_raise_r+0x32>
 8013268:	4628      	mov	r0, r5
 801326a:	f000 f831 	bl	80132d0 <_getpid_r>
 801326e:	4622      	mov	r2, r4
 8013270:	4601      	mov	r1, r0
 8013272:	4628      	mov	r0, r5
 8013274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013278:	f000 b818 	b.w	80132ac <_kill_r>
 801327c:	2b01      	cmp	r3, #1
 801327e:	d00a      	beq.n	8013296 <_raise_r+0x4c>
 8013280:	1c59      	adds	r1, r3, #1
 8013282:	d103      	bne.n	801328c <_raise_r+0x42>
 8013284:	2316      	movs	r3, #22
 8013286:	6003      	str	r3, [r0, #0]
 8013288:	2001      	movs	r0, #1
 801328a:	e7e7      	b.n	801325c <_raise_r+0x12>
 801328c:	2100      	movs	r1, #0
 801328e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013292:	4620      	mov	r0, r4
 8013294:	4798      	blx	r3
 8013296:	2000      	movs	r0, #0
 8013298:	e7e0      	b.n	801325c <_raise_r+0x12>
	...

0801329c <raise>:
 801329c:	4b02      	ldr	r3, [pc, #8]	@ (80132a8 <raise+0xc>)
 801329e:	4601      	mov	r1, r0
 80132a0:	6818      	ldr	r0, [r3, #0]
 80132a2:	f7ff bfd2 	b.w	801324a <_raise_r>
 80132a6:	bf00      	nop
 80132a8:	20000044 	.word	0x20000044

080132ac <_kill_r>:
 80132ac:	b538      	push	{r3, r4, r5, lr}
 80132ae:	4d07      	ldr	r5, [pc, #28]	@ (80132cc <_kill_r+0x20>)
 80132b0:	2300      	movs	r3, #0
 80132b2:	4604      	mov	r4, r0
 80132b4:	4608      	mov	r0, r1
 80132b6:	4611      	mov	r1, r2
 80132b8:	602b      	str	r3, [r5, #0]
 80132ba:	f7f0 f94d 	bl	8003558 <_kill>
 80132be:	1c43      	adds	r3, r0, #1
 80132c0:	d102      	bne.n	80132c8 <_kill_r+0x1c>
 80132c2:	682b      	ldr	r3, [r5, #0]
 80132c4:	b103      	cbz	r3, 80132c8 <_kill_r+0x1c>
 80132c6:	6023      	str	r3, [r4, #0]
 80132c8:	bd38      	pop	{r3, r4, r5, pc}
 80132ca:	bf00      	nop
 80132cc:	2002a750 	.word	0x2002a750

080132d0 <_getpid_r>:
 80132d0:	f7f0 b93a 	b.w	8003548 <_getpid>

080132d4 <_init>:
 80132d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132d6:	bf00      	nop
 80132d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80132da:	bc08      	pop	{r3}
 80132dc:	469e      	mov	lr, r3
 80132de:	4770      	bx	lr

080132e0 <_fini>:
 80132e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132e2:	bf00      	nop
 80132e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80132e6:	bc08      	pop	{r3}
 80132e8:	469e      	mov	lr, r3
 80132ea:	4770      	bx	lr
