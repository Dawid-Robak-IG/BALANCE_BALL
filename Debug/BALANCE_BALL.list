
BALANCE_BALL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e52c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  0800e6e0  0800e6e0  0000f6e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec00  0800ec00  000101dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ec00  0800ec00  0000fc00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec08  0800ec08  000101dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec08  0800ec08  0000fc08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ec0c  0800ec0c  0000fc0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800ec10  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000101dc  2**0
                  CONTENTS
 10 .bss          00026278  200001dc  200001dc  000101dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20026454  20026454  000101dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000101dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000294c1  00000000  00000000  0001020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006708  00000000  00000000  000396cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002358  00000000  00000000  0003fdd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b3e  00000000  00000000  00042130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bbaa  00000000  00000000  00043c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e455  00000000  00000000  0006f818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6bf1  00000000  00000000  0009dc6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0019485e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a730  00000000  00000000  001948a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0019efd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e6c4 	.word	0x0800e6c4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	0800e6c4 	.word	0x0800e6c4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b988 	b.w	8000f90 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	468e      	mov	lr, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	4688      	mov	r8, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4617      	mov	r7, r2
 8000cac:	d962      	bls.n	8000d74 <__udivmoddi4+0xdc>
 8000cae:	fab2 f682 	clz	r6, r2
 8000cb2:	b14e      	cbz	r6, 8000cc8 <__udivmoddi4+0x30>
 8000cb4:	f1c6 0320 	rsb	r3, r6, #32
 8000cb8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cbc:	fa20 f303 	lsr.w	r3, r0, r3
 8000cc0:	40b7      	lsls	r7, r6
 8000cc2:	ea43 0808 	orr.w	r8, r3, r8
 8000cc6:	40b4      	lsls	r4, r6
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	fa1f fc87 	uxth.w	ip, r7
 8000cd0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cd4:	0c23      	lsrs	r3, r4, #16
 8000cd6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cda:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cde:	fb01 f20c 	mul.w	r2, r1, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cec:	f080 80ea 	bcs.w	8000ec4 <__udivmoddi4+0x22c>
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	f240 80e7 	bls.w	8000ec4 <__udivmoddi4+0x22c>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	443b      	add	r3, r7
 8000cfa:	1a9a      	subs	r2, r3, r2
 8000cfc:	b2a3      	uxth	r3, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d0a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0e:	459c      	cmp	ip, r3
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x8e>
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d18:	f080 80d6 	bcs.w	8000ec8 <__udivmoddi4+0x230>
 8000d1c:	459c      	cmp	ip, r3
 8000d1e:	f240 80d3 	bls.w	8000ec8 <__udivmoddi4+0x230>
 8000d22:	443b      	add	r3, r7
 8000d24:	3802      	subs	r0, #2
 8000d26:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2a:	eba3 030c 	sub.w	r3, r3, ip
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11d      	cbz	r5, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40f3      	lsrs	r3, r6
 8000d34:	2200      	movs	r2, #0
 8000d36:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d905      	bls.n	8000d4e <__udivmoddi4+0xb6>
 8000d42:	b10d      	cbz	r5, 8000d48 <__udivmoddi4+0xb0>
 8000d44:	e9c5 0100 	strd	r0, r1, [r5]
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e7f5      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d4e:	fab3 f183 	clz	r1, r3
 8000d52:	2900      	cmp	r1, #0
 8000d54:	d146      	bne.n	8000de4 <__udivmoddi4+0x14c>
 8000d56:	4573      	cmp	r3, lr
 8000d58:	d302      	bcc.n	8000d60 <__udivmoddi4+0xc8>
 8000d5a:	4282      	cmp	r2, r0
 8000d5c:	f200 8105 	bhi.w	8000f6a <__udivmoddi4+0x2d2>
 8000d60:	1a84      	subs	r4, r0, r2
 8000d62:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d66:	2001      	movs	r0, #1
 8000d68:	4690      	mov	r8, r2
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d0e5      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d6e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d72:	e7e2      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f000 8090 	beq.w	8000e9a <__udivmoddi4+0x202>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	f040 80a4 	bne.w	8000ecc <__udivmoddi4+0x234>
 8000d84:	1a8a      	subs	r2, r1, r2
 8000d86:	0c03      	lsrs	r3, r0, #16
 8000d88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8c:	b280      	uxth	r0, r0
 8000d8e:	b2bc      	uxth	r4, r7
 8000d90:	2101      	movs	r1, #1
 8000d92:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d96:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d9e:	fb04 f20c 	mul.w	r2, r4, ip
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x11e>
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dac:	d202      	bcs.n	8000db4 <__udivmoddi4+0x11c>
 8000dae:	429a      	cmp	r2, r3
 8000db0:	f200 80e0 	bhi.w	8000f74 <__udivmoddi4+0x2dc>
 8000db4:	46c4      	mov	ip, r8
 8000db6:	1a9b      	subs	r3, r3, r2
 8000db8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dbc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dc0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dc4:	fb02 f404 	mul.w	r4, r2, r4
 8000dc8:	429c      	cmp	r4, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x144>
 8000dcc:	18fb      	adds	r3, r7, r3
 8000dce:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x142>
 8000dd4:	429c      	cmp	r4, r3
 8000dd6:	f200 80ca 	bhi.w	8000f6e <__udivmoddi4+0x2d6>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	1b1b      	subs	r3, r3, r4
 8000dde:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000de2:	e7a5      	b.n	8000d30 <__udivmoddi4+0x98>
 8000de4:	f1c1 0620 	rsb	r6, r1, #32
 8000de8:	408b      	lsls	r3, r1
 8000dea:	fa22 f706 	lsr.w	r7, r2, r6
 8000dee:	431f      	orrs	r7, r3
 8000df0:	fa0e f401 	lsl.w	r4, lr, r1
 8000df4:	fa20 f306 	lsr.w	r3, r0, r6
 8000df8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dfc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e00:	4323      	orrs	r3, r4
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	fa1f fc87 	uxth.w	ip, r7
 8000e0a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e0e:	0c1c      	lsrs	r4, r3, #16
 8000e10:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e14:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e18:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e1c:	45a6      	cmp	lr, r4
 8000e1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e22:	d909      	bls.n	8000e38 <__udivmoddi4+0x1a0>
 8000e24:	193c      	adds	r4, r7, r4
 8000e26:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e2a:	f080 809c 	bcs.w	8000f66 <__udivmoddi4+0x2ce>
 8000e2e:	45a6      	cmp	lr, r4
 8000e30:	f240 8099 	bls.w	8000f66 <__udivmoddi4+0x2ce>
 8000e34:	3802      	subs	r0, #2
 8000e36:	443c      	add	r4, r7
 8000e38:	eba4 040e 	sub.w	r4, r4, lr
 8000e3c:	fa1f fe83 	uxth.w	lr, r3
 8000e40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e44:	fb09 4413 	mls	r4, r9, r3, r4
 8000e48:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e4c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e50:	45a4      	cmp	ip, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x1ce>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e5a:	f080 8082 	bcs.w	8000f62 <__udivmoddi4+0x2ca>
 8000e5e:	45a4      	cmp	ip, r4
 8000e60:	d97f      	bls.n	8000f62 <__udivmoddi4+0x2ca>
 8000e62:	3b02      	subs	r3, #2
 8000e64:	443c      	add	r4, r7
 8000e66:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e6a:	eba4 040c 	sub.w	r4, r4, ip
 8000e6e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e72:	4564      	cmp	r4, ip
 8000e74:	4673      	mov	r3, lr
 8000e76:	46e1      	mov	r9, ip
 8000e78:	d362      	bcc.n	8000f40 <__udivmoddi4+0x2a8>
 8000e7a:	d05f      	beq.n	8000f3c <__udivmoddi4+0x2a4>
 8000e7c:	b15d      	cbz	r5, 8000e96 <__udivmoddi4+0x1fe>
 8000e7e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e82:	eb64 0409 	sbc.w	r4, r4, r9
 8000e86:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e8e:	431e      	orrs	r6, r3
 8000e90:	40cc      	lsrs	r4, r1
 8000e92:	e9c5 6400 	strd	r6, r4, [r5]
 8000e96:	2100      	movs	r1, #0
 8000e98:	e74f      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000e9a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e9e:	0c01      	lsrs	r1, r0, #16
 8000ea0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ea4:	b280      	uxth	r0, r0
 8000ea6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eaa:	463b      	mov	r3, r7
 8000eac:	4638      	mov	r0, r7
 8000eae:	463c      	mov	r4, r7
 8000eb0:	46b8      	mov	r8, r7
 8000eb2:	46be      	mov	lr, r7
 8000eb4:	2620      	movs	r6, #32
 8000eb6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eba:	eba2 0208 	sub.w	r2, r2, r8
 8000ebe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ec2:	e766      	b.n	8000d92 <__udivmoddi4+0xfa>
 8000ec4:	4601      	mov	r1, r0
 8000ec6:	e718      	b.n	8000cfa <__udivmoddi4+0x62>
 8000ec8:	4610      	mov	r0, r2
 8000eca:	e72c      	b.n	8000d26 <__udivmoddi4+0x8e>
 8000ecc:	f1c6 0220 	rsb	r2, r6, #32
 8000ed0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ed4:	40b7      	lsls	r7, r6
 8000ed6:	40b1      	lsls	r1, r6
 8000ed8:	fa20 f202 	lsr.w	r2, r0, r2
 8000edc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ee6:	b2bc      	uxth	r4, r7
 8000ee8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb08 f904 	mul.w	r9, r8, r4
 8000ef6:	40b0      	lsls	r0, r6
 8000ef8:	4589      	cmp	r9, r1
 8000efa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000efe:	b280      	uxth	r0, r0
 8000f00:	d93e      	bls.n	8000f80 <__udivmoddi4+0x2e8>
 8000f02:	1879      	adds	r1, r7, r1
 8000f04:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f08:	d201      	bcs.n	8000f0e <__udivmoddi4+0x276>
 8000f0a:	4589      	cmp	r9, r1
 8000f0c:	d81f      	bhi.n	8000f4e <__udivmoddi4+0x2b6>
 8000f0e:	eba1 0109 	sub.w	r1, r1, r9
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	b292      	uxth	r2, r2
 8000f20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f24:	4542      	cmp	r2, r8
 8000f26:	d229      	bcs.n	8000f7c <__udivmoddi4+0x2e4>
 8000f28:	18ba      	adds	r2, r7, r2
 8000f2a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f2e:	d2c4      	bcs.n	8000eba <__udivmoddi4+0x222>
 8000f30:	4542      	cmp	r2, r8
 8000f32:	d2c2      	bcs.n	8000eba <__udivmoddi4+0x222>
 8000f34:	f1a9 0102 	sub.w	r1, r9, #2
 8000f38:	443a      	add	r2, r7
 8000f3a:	e7be      	b.n	8000eba <__udivmoddi4+0x222>
 8000f3c:	45f0      	cmp	r8, lr
 8000f3e:	d29d      	bcs.n	8000e7c <__udivmoddi4+0x1e4>
 8000f40:	ebbe 0302 	subs.w	r3, lr, r2
 8000f44:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f48:	3801      	subs	r0, #1
 8000f4a:	46e1      	mov	r9, ip
 8000f4c:	e796      	b.n	8000e7c <__udivmoddi4+0x1e4>
 8000f4e:	eba7 0909 	sub.w	r9, r7, r9
 8000f52:	4449      	add	r1, r9
 8000f54:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f58:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f5c:	fb09 f804 	mul.w	r8, r9, r4
 8000f60:	e7db      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f62:	4673      	mov	r3, lr
 8000f64:	e77f      	b.n	8000e66 <__udivmoddi4+0x1ce>
 8000f66:	4650      	mov	r0, sl
 8000f68:	e766      	b.n	8000e38 <__udivmoddi4+0x1a0>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e6fd      	b.n	8000d6a <__udivmoddi4+0xd2>
 8000f6e:	443b      	add	r3, r7
 8000f70:	3a02      	subs	r2, #2
 8000f72:	e733      	b.n	8000ddc <__udivmoddi4+0x144>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	443b      	add	r3, r7
 8000f7a:	e71c      	b.n	8000db6 <__udivmoddi4+0x11e>
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	e79c      	b.n	8000eba <__udivmoddi4+0x222>
 8000f80:	eba1 0109 	sub.w	r1, r1, r9
 8000f84:	46c4      	mov	ip, r8
 8000f86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8a:	fb09 f804 	mul.w	r8, r9, r4
 8000f8e:	e7c4      	b.n	8000f1a <__udivmoddi4+0x282>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f98:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <MX_CRC_Init+0x20>)
 8000f9a:	4a07      	ldr	r2, [pc, #28]	@ (8000fb8 <MX_CRC_Init+0x24>)
 8000f9c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f9e:	4805      	ldr	r0, [pc, #20]	@ (8000fb4 <MX_CRC_Init+0x20>)
 8000fa0:	f002 f920 	bl	80031e4 <HAL_CRC_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000faa:	f001 fc3d 	bl	8002828 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200001f8 	.word	0x200001f8
 8000fb8:	40023000 	.word	0x40023000

08000fbc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ff8 <HAL_CRC_MspInit+0x3c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d10d      	bne.n	8000fea <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ffc <HAL_CRC_MspInit+0x40>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	4a09      	ldr	r2, [pc, #36]	@ (8000ffc <HAL_CRC_MspInit+0x40>)
 8000fd8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fde:	4b07      	ldr	r3, [pc, #28]	@ (8000ffc <HAL_CRC_MspInit+0x40>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40023000 	.word	0x40023000
 8000ffc:	40023800 	.word	0x40023800

08001000 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	4b0c      	ldr	r3, [pc, #48]	@ (800103c <MX_DMA_Init+0x3c>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	4a0b      	ldr	r2, [pc, #44]	@ (800103c <MX_DMA_Init+0x3c>)
 8001010:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001014:	6313      	str	r3, [r2, #48]	@ 0x30
 8001016:	4b09      	ldr	r3, [pc, #36]	@ (800103c <MX_DMA_Init+0x3c>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	2105      	movs	r1, #5
 8001026:	203c      	movs	r0, #60	@ 0x3c
 8001028:	f002 f8b2 	bl	8003190 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800102c:	203c      	movs	r0, #60	@ 0x3c
 800102e:	f002 f8cb 	bl	80031c8 <HAL_NVIC_EnableIRQ>

}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40023800 	.word	0x40023800

08001040 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001044:	4b15      	ldr	r3, [pc, #84]	@ (800109c <MX_DMA2D_Init+0x5c>)
 8001046:	4a16      	ldr	r2, [pc, #88]	@ (80010a0 <MX_DMA2D_Init+0x60>)
 8001048:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800104a:	4b14      	ldr	r3, [pc, #80]	@ (800109c <MX_DMA2D_Init+0x5c>)
 800104c:	2200      	movs	r2, #0
 800104e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001050:	4b12      	ldr	r3, [pc, #72]	@ (800109c <MX_DMA2D_Init+0x5c>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001056:	4b11      	ldr	r3, [pc, #68]	@ (800109c <MX_DMA2D_Init+0x5c>)
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800105c:	4b0f      	ldr	r3, [pc, #60]	@ (800109c <MX_DMA2D_Init+0x5c>)
 800105e:	2200      	movs	r2, #0
 8001060:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001062:	4b0e      	ldr	r3, [pc, #56]	@ (800109c <MX_DMA2D_Init+0x5c>)
 8001064:	2200      	movs	r2, #0
 8001066:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001068:	4b0c      	ldr	r3, [pc, #48]	@ (800109c <MX_DMA2D_Init+0x5c>)
 800106a:	2200      	movs	r2, #0
 800106c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800106e:	4b0b      	ldr	r3, [pc, #44]	@ (800109c <MX_DMA2D_Init+0x5c>)
 8001070:	2200      	movs	r2, #0
 8001072:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001074:	4809      	ldr	r0, [pc, #36]	@ (800109c <MX_DMA2D_Init+0x5c>)
 8001076:	f002 fc41 	bl	80038fc <HAL_DMA2D_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001080:	f001 fbd2 	bl	8002828 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001084:	2101      	movs	r1, #1
 8001086:	4805      	ldr	r0, [pc, #20]	@ (800109c <MX_DMA2D_Init+0x5c>)
 8001088:	f002 fd92 	bl	8003bb0 <HAL_DMA2D_ConfigLayer>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001092:	f001 fbc9 	bl	8002828 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000200 	.word	0x20000200
 80010a0:	4002b000 	.word	0x4002b000

080010a4 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0e      	ldr	r2, [pc, #56]	@ (80010ec <HAL_DMA2D_MspInit+0x48>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d115      	bne.n	80010e2 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b0d      	ldr	r3, [pc, #52]	@ (80010f0 <HAL_DMA2D_MspInit+0x4c>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	4a0c      	ldr	r2, [pc, #48]	@ (80010f0 <HAL_DMA2D_MspInit+0x4c>)
 80010c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80010c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c6:	4b0a      	ldr	r3, [pc, #40]	@ (80010f0 <HAL_DMA2D_MspInit+0x4c>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2105      	movs	r1, #5
 80010d6:	205a      	movs	r0, #90	@ 0x5a
 80010d8:	f002 f85a 	bl	8003190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80010dc:	205a      	movs	r0, #90	@ 0x5a
 80010de:	f002 f873 	bl	80031c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	4002b000 	.word	0x4002b000
 80010f0:	40023800 	.word	0x40023800

080010f4 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
 8001108:	615a      	str	r2, [r3, #20]
 800110a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800110c:	4b1f      	ldr	r3, [pc, #124]	@ (800118c <MX_FMC_Init+0x98>)
 800110e:	4a20      	ldr	r2, [pc, #128]	@ (8001190 <MX_FMC_Init+0x9c>)
 8001110:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001112:	4b1e      	ldr	r3, [pc, #120]	@ (800118c <MX_FMC_Init+0x98>)
 8001114:	2201      	movs	r2, #1
 8001116:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001118:	4b1c      	ldr	r3, [pc, #112]	@ (800118c <MX_FMC_Init+0x98>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800111e:	4b1b      	ldr	r3, [pc, #108]	@ (800118c <MX_FMC_Init+0x98>)
 8001120:	2204      	movs	r2, #4
 8001122:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001124:	4b19      	ldr	r3, [pc, #100]	@ (800118c <MX_FMC_Init+0x98>)
 8001126:	2210      	movs	r2, #16
 8001128:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800112a:	4b18      	ldr	r3, [pc, #96]	@ (800118c <MX_FMC_Init+0x98>)
 800112c:	2240      	movs	r2, #64	@ 0x40
 800112e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001130:	4b16      	ldr	r3, [pc, #88]	@ (800118c <MX_FMC_Init+0x98>)
 8001132:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001136:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001138:	4b14      	ldr	r3, [pc, #80]	@ (800118c <MX_FMC_Init+0x98>)
 800113a:	2200      	movs	r2, #0
 800113c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800113e:	4b13      	ldr	r3, [pc, #76]	@ (800118c <MX_FMC_Init+0x98>)
 8001140:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001144:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001146:	4b11      	ldr	r3, [pc, #68]	@ (800118c <MX_FMC_Init+0x98>)
 8001148:	2200      	movs	r2, #0
 800114a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800114c:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <MX_FMC_Init+0x98>)
 800114e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001152:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001154:	2302      	movs	r3, #2
 8001156:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001158:	2307      	movs	r3, #7
 800115a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800115c:	2304      	movs	r3, #4
 800115e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001160:	2307      	movs	r3, #7
 8001162:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001164:	2303      	movs	r3, #3
 8001166:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001168:	2302      	movs	r3, #2
 800116a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800116c:	2302      	movs	r3, #2
 800116e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	4619      	mov	r1, r3
 8001174:	4805      	ldr	r0, [pc, #20]	@ (800118c <MX_FMC_Init+0x98>)
 8001176:	f006 f8cb 	bl	8007310 <HAL_SDRAM_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001180:	f001 fb52 	bl	8002828 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001184:	bf00      	nop
 8001186:	3720      	adds	r7, #32
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000240 	.word	0x20000240
 8001190:	a0000140 	.word	0xa0000140

08001194 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80011a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001298 <HAL_FMC_MspInit+0x104>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d16f      	bne.n	8001290 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80011b0:	4b39      	ldr	r3, [pc, #228]	@ (8001298 <HAL_FMC_MspInit+0x104>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	603b      	str	r3, [r7, #0]
 80011ba:	4b38      	ldr	r3, [pc, #224]	@ (800129c <HAL_FMC_MspInit+0x108>)
 80011bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011be:	4a37      	ldr	r2, [pc, #220]	@ (800129c <HAL_FMC_MspInit+0x108>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6393      	str	r3, [r2, #56]	@ 0x38
 80011c6:	4b35      	ldr	r3, [pc, #212]	@ (800129c <HAL_FMC_MspInit+0x108>)
 80011c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	603b      	str	r3, [r7, #0]
 80011d0:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80011d2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80011d6:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e0:	2303      	movs	r3, #3
 80011e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011e4:	230c      	movs	r3, #12
 80011e6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	4619      	mov	r1, r3
 80011ec:	482c      	ldr	r0, [pc, #176]	@ (80012a0 <HAL_FMC_MspInit+0x10c>)
 80011ee:	f002 fd71 	bl	8003cd4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80011f2:	2301      	movs	r3, #1
 80011f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fe:	2303      	movs	r3, #3
 8001200:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001202:	230c      	movs	r3, #12
 8001204:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	4619      	mov	r1, r3
 800120a:	4826      	ldr	r0, [pc, #152]	@ (80012a4 <HAL_FMC_MspInit+0x110>)
 800120c:	f002 fd62 	bl	8003cd4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001210:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001214:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121e:	2303      	movs	r3, #3
 8001220:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001222:	230c      	movs	r3, #12
 8001224:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	4619      	mov	r1, r3
 800122a:	481f      	ldr	r0, [pc, #124]	@ (80012a8 <HAL_FMC_MspInit+0x114>)
 800122c:	f002 fd52 	bl	8003cd4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001230:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001234:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123e:	2303      	movs	r3, #3
 8001240:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001242:	230c      	movs	r3, #12
 8001244:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	4619      	mov	r1, r3
 800124a:	4818      	ldr	r0, [pc, #96]	@ (80012ac <HAL_FMC_MspInit+0x118>)
 800124c:	f002 fd42 	bl	8003cd4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001250:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001254:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125e:	2303      	movs	r3, #3
 8001260:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001262:	230c      	movs	r3, #12
 8001264:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	4619      	mov	r1, r3
 800126a:	4811      	ldr	r0, [pc, #68]	@ (80012b0 <HAL_FMC_MspInit+0x11c>)
 800126c:	f002 fd32 	bl	8003cd4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001270:	2360      	movs	r3, #96	@ 0x60
 8001272:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001280:	230c      	movs	r3, #12
 8001282:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	4619      	mov	r1, r3
 8001288:	480a      	ldr	r0, [pc, #40]	@ (80012b4 <HAL_FMC_MspInit+0x120>)
 800128a:	f002 fd23 	bl	8003cd4 <HAL_GPIO_Init>
 800128e:	e000      	b.n	8001292 <HAL_FMC_MspInit+0xfe>
    return;
 8001290:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000274 	.word	0x20000274
 800129c:	40023800 	.word	0x40023800
 80012a0:	40021400 	.word	0x40021400
 80012a4:	40020800 	.word	0x40020800
 80012a8:	40021800 	.word	0x40021800
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40020c00 	.word	0x40020c00
 80012b4:	40020400 	.word	0x40020400

080012b8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80012c0:	f7ff ff68 	bl	8001194 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08e      	sub	sp, #56	@ 0x38
 80012d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
 80012e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	623b      	str	r3, [r7, #32]
 80012e6:	4b88      	ldr	r3, [pc, #544]	@ (8001508 <MX_GPIO_Init+0x23c>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	4a87      	ldr	r2, [pc, #540]	@ (8001508 <MX_GPIO_Init+0x23c>)
 80012ec:	f043 0304 	orr.w	r3, r3, #4
 80012f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f2:	4b85      	ldr	r3, [pc, #532]	@ (8001508 <MX_GPIO_Init+0x23c>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	623b      	str	r3, [r7, #32]
 80012fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
 8001302:	4b81      	ldr	r3, [pc, #516]	@ (8001508 <MX_GPIO_Init+0x23c>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	4a80      	ldr	r2, [pc, #512]	@ (8001508 <MX_GPIO_Init+0x23c>)
 8001308:	f043 0320 	orr.w	r3, r3, #32
 800130c:	6313      	str	r3, [r2, #48]	@ 0x30
 800130e:	4b7e      	ldr	r3, [pc, #504]	@ (8001508 <MX_GPIO_Init+0x23c>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	f003 0320 	and.w	r3, r3, #32
 8001316:	61fb      	str	r3, [r7, #28]
 8001318:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	61bb      	str	r3, [r7, #24]
 800131e:	4b7a      	ldr	r3, [pc, #488]	@ (8001508 <MX_GPIO_Init+0x23c>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	4a79      	ldr	r2, [pc, #484]	@ (8001508 <MX_GPIO_Init+0x23c>)
 8001324:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001328:	6313      	str	r3, [r2, #48]	@ 0x30
 800132a:	4b77      	ldr	r3, [pc, #476]	@ (8001508 <MX_GPIO_Init+0x23c>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001332:	61bb      	str	r3, [r7, #24]
 8001334:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
 800133a:	4b73      	ldr	r3, [pc, #460]	@ (8001508 <MX_GPIO_Init+0x23c>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	4a72      	ldr	r2, [pc, #456]	@ (8001508 <MX_GPIO_Init+0x23c>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6313      	str	r3, [r2, #48]	@ 0x30
 8001346:	4b70      	ldr	r3, [pc, #448]	@ (8001508 <MX_GPIO_Init+0x23c>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	4b6c      	ldr	r3, [pc, #432]	@ (8001508 <MX_GPIO_Init+0x23c>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	4a6b      	ldr	r2, [pc, #428]	@ (8001508 <MX_GPIO_Init+0x23c>)
 800135c:	f043 0302 	orr.w	r3, r3, #2
 8001360:	6313      	str	r3, [r2, #48]	@ 0x30
 8001362:	4b69      	ldr	r3, [pc, #420]	@ (8001508 <MX_GPIO_Init+0x23c>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b65      	ldr	r3, [pc, #404]	@ (8001508 <MX_GPIO_Init+0x23c>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	4a64      	ldr	r2, [pc, #400]	@ (8001508 <MX_GPIO_Init+0x23c>)
 8001378:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800137c:	6313      	str	r3, [r2, #48]	@ 0x30
 800137e:	4b62      	ldr	r3, [pc, #392]	@ (8001508 <MX_GPIO_Init+0x23c>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	4b5e      	ldr	r3, [pc, #376]	@ (8001508 <MX_GPIO_Init+0x23c>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	4a5d      	ldr	r2, [pc, #372]	@ (8001508 <MX_GPIO_Init+0x23c>)
 8001394:	f043 0310 	orr.w	r3, r3, #16
 8001398:	6313      	str	r3, [r2, #48]	@ 0x30
 800139a:	4b5b      	ldr	r3, [pc, #364]	@ (8001508 <MX_GPIO_Init+0x23c>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	f003 0310 	and.w	r3, r3, #16
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	4b57      	ldr	r3, [pc, #348]	@ (8001508 <MX_GPIO_Init+0x23c>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	4a56      	ldr	r2, [pc, #344]	@ (8001508 <MX_GPIO_Init+0x23c>)
 80013b0:	f043 0308 	orr.w	r3, r3, #8
 80013b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b6:	4b54      	ldr	r3, [pc, #336]	@ (8001508 <MX_GPIO_Init+0x23c>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	f003 0308 	and.w	r3, r3, #8
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2116      	movs	r1, #22
 80013c6:	4851      	ldr	r0, [pc, #324]	@ (800150c <MX_GPIO_Init+0x240>)
 80013c8:	f002 fe30 	bl	800402c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2180      	movs	r1, #128	@ 0x80
 80013d0:	484f      	ldr	r0, [pc, #316]	@ (8001510 <MX_GPIO_Init+0x244>)
 80013d2:	f002 fe2b 	bl	800402c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80013dc:	484d      	ldr	r0, [pc, #308]	@ (8001514 <MX_GPIO_Init+0x248>)
 80013de:	f002 fe25 	bl	800402c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80013e8:	484b      	ldr	r0, [pc, #300]	@ (8001518 <MX_GPIO_Init+0x24c>)
 80013ea:	f002 fe1f 	bl	800402c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NCS_MEMS_SPI_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin;
 80013ee:	2302      	movs	r3, #2
 80013f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f2:	2301      	movs	r3, #1
 80013f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013f6:	2301      	movs	r3, #1
 80013f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(NCS_MEMS_SPI_GPIO_Port, &GPIO_InitStruct);
 80013fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001402:	4619      	mov	r1, r3
 8001404:	4841      	ldr	r0, [pc, #260]	@ (800150c <MX_GPIO_Init+0x240>)
 8001406:	f002 fc65 	bl	8003cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = CSX_Pin|OTG_FS_PSO_Pin;
 800140a:	2314      	movs	r3, #20
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140e:	2301      	movs	r3, #1
 8001410:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	2300      	movs	r3, #0
 8001418:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800141e:	4619      	mov	r1, r3
 8001420:	483a      	ldr	r0, [pc, #232]	@ (800150c <MX_GPIO_Init+0x240>)
 8001422:	f002 fc57 	bl	8003cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8001426:	2301      	movs	r3, #1
 8001428:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800142a:	2300      	movs	r3, #0
 800142c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8001432:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001436:	4619      	mov	r1, r3
 8001438:	4835      	ldr	r0, [pc, #212]	@ (8001510 <MX_GPIO_Init+0x244>)
 800143a:	f002 fc4b 	bl	8003cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800143e:	f248 0306 	movw	r3, #32774	@ 0x8006
 8001442:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001444:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001448:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001452:	4619      	mov	r1, r3
 8001454:	482e      	ldr	r0, [pc, #184]	@ (8001510 <MX_GPIO_Init+0x244>)
 8001456:	f002 fc3d 	bl	8003cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800145a:	2380      	movs	r3, #128	@ 0x80
 800145c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145e:	2301      	movs	r3, #1
 8001460:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800146a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800146e:	4619      	mov	r1, r3
 8001470:	4827      	ldr	r0, [pc, #156]	@ (8001510 <MX_GPIO_Init+0x244>)
 8001472:	f002 fc2f 	bl	8003cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001476:	2320      	movs	r3, #32
 8001478:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800147a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800147e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001484:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001488:	4619      	mov	r1, r3
 800148a:	4820      	ldr	r0, [pc, #128]	@ (800150c <MX_GPIO_Init+0x240>)
 800148c:	f002 fc22 	bl	8003cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001490:	2304      	movs	r3, #4
 8001492:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001494:	2300      	movs	r3, #0
 8001496:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800149c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014a0:	4619      	mov	r1, r3
 80014a2:	481e      	ldr	r0, [pc, #120]	@ (800151c <MX_GPIO_Init+0x250>)
 80014a4:	f002 fc16 	bl	8003cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80014a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ae:	2300      	movs	r3, #0
 80014b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80014b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ba:	4619      	mov	r1, r3
 80014bc:	4815      	ldr	r0, [pc, #84]	@ (8001514 <MX_GPIO_Init+0x248>)
 80014be:	f002 fc09 	bl	8003cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80014c2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80014c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c8:	2301      	movs	r3, #1
 80014ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014d8:	4619      	mov	r1, r3
 80014da:	480e      	ldr	r0, [pc, #56]	@ (8001514 <MX_GPIO_Init+0x248>)
 80014dc:	f002 fbfa 	bl	8003cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80014e0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80014e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e6:	2301      	movs	r3, #1
 80014e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014f6:	4619      	mov	r1, r3
 80014f8:	4807      	ldr	r0, [pc, #28]	@ (8001518 <MX_GPIO_Init+0x24c>)
 80014fa:	f002 fbeb 	bl	8003cd4 <HAL_GPIO_Init>

}
 80014fe:	bf00      	nop
 8001500:	3738      	adds	r7, #56	@ 0x38
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800
 800150c:	40020800 	.word	0x40020800
 8001510:	40020000 	.word	0x40020000
 8001514:	40020c00 	.word	0x40020c00
 8001518:	40021800 	.word	0x40021800
 800151c:	40020400 	.word	0x40020400

08001520 <_write>:
static int16_t x_data[MOVING_AVERAGE_WINDOW];
static int16_t y_data[MOVING_AVERAGE_WINDOW];
static int16_t z_data[MOVING_AVERAGE_WINDOW];
static uint8_t data_index = 0;

ssize_t _write(int file, const char *data, size_t len) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) data, len, HAL_MAX_DELAY); // Wysyłanie danych przez UART
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	b29a      	uxth	r2, r3
 8001530:	f04f 33ff 	mov.w	r3, #4294967295
 8001534:	68b9      	ldr	r1, [r7, #8]
 8001536:	4804      	ldr	r0, [pc, #16]	@ (8001548 <_write+0x28>)
 8001538:	f007 fafe 	bl	8008b38 <HAL_UART_Transmit>
return len;
 800153c:	687b      	ldr	r3, [r7, #4]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20025df0 	.word	0x20025df0

0800154c <gyro_set_sensitivity>:

void gyro_set_sensitivity() {
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
	uint8_t configData[2] = { CTRL_REG4, SENSITIVITY };
 8001552:	f243 0323 	movw	r3, #12323	@ 0x3023
 8001556:	80bb      	strh	r3, [r7, #4]

	if (!spi5_acquire()) return;
 8001558:	f001 f96c 	bl	8002834 <spi5_acquire>
 800155c:	4603      	mov	r3, r0
 800155e:	f083 0301 	eor.w	r3, r3, #1
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d112      	bne.n	800158e <gyro_set_sensitivity+0x42>

	GYRO_CS_LOW();
 8001568:	2200      	movs	r2, #0
 800156a:	2102      	movs	r1, #2
 800156c:	480a      	ldr	r0, [pc, #40]	@ (8001598 <gyro_set_sensitivity+0x4c>)
 800156e:	f002 fd5d 	bl	800402c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, configData, 2, 100);
 8001572:	1d39      	adds	r1, r7, #4
 8001574:	2364      	movs	r3, #100	@ 0x64
 8001576:	2202      	movs	r2, #2
 8001578:	4808      	ldr	r0, [pc, #32]	@ (800159c <gyro_set_sensitivity+0x50>)
 800157a:	f005 ff86 	bl	800748a <HAL_SPI_Transmit>
	GYRO_CS_HIGH();
 800157e:	2201      	movs	r2, #1
 8001580:	2102      	movs	r1, #2
 8001582:	4805      	ldr	r0, [pc, #20]	@ (8001598 <gyro_set_sensitivity+0x4c>)
 8001584:	f002 fd52 	bl	800402c <HAL_GPIO_WritePin>

	spi5_release();
 8001588:	f001 f968 	bl	800285c <spi5_release>
 800158c:	e000      	b.n	8001590 <gyro_set_sensitivity+0x44>
	if (!spi5_acquire()) return;
 800158e:	bf00      	nop
}
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40020800 	.word	0x40020800
 800159c:	20025ca4 	.word	0x20025ca4

080015a0 <gyro_init>:

void gyro_init(void) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
	uint8_t configData[2] = { CTRL_REG1, 0x0F }; // PD=1, Zen=1, Yen=1, Xen=;
 80015a6:	f44f 6372 	mov.w	r3, #3872	@ 0xf20
 80015aa:	80bb      	strh	r3, [r7, #4]

	if (!spi5_acquire()) return;
 80015ac:	f001 f942 	bl	8002834 <spi5_acquire>
 80015b0:	4603      	mov	r3, r0
 80015b2:	f083 0301 	eor.w	r3, r3, #1
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d116      	bne.n	80015ea <gyro_init+0x4a>

	GYRO_CS_LOW();
 80015bc:	2200      	movs	r2, #0
 80015be:	2102      	movs	r1, #2
 80015c0:	480c      	ldr	r0, [pc, #48]	@ (80015f4 <gyro_init+0x54>)
 80015c2:	f002 fd33 	bl	800402c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, configData, 2, 100);
 80015c6:	1d39      	adds	r1, r7, #4
 80015c8:	2364      	movs	r3, #100	@ 0x64
 80015ca:	2202      	movs	r2, #2
 80015cc:	480a      	ldr	r0, [pc, #40]	@ (80015f8 <gyro_init+0x58>)
 80015ce:	f005 ff5c 	bl	800748a <HAL_SPI_Transmit>
	GYRO_CS_HIGH();
 80015d2:	2201      	movs	r2, #1
 80015d4:	2102      	movs	r1, #2
 80015d6:	4807      	ldr	r0, [pc, #28]	@ (80015f4 <gyro_init+0x54>)
 80015d8:	f002 fd28 	bl	800402c <HAL_GPIO_WritePin>

	spi5_release();
 80015dc:	f001 f93e 	bl	800285c <spi5_release>

	gyro_set_sensitivity();
 80015e0:	f7ff ffb4 	bl	800154c <gyro_set_sensitivity>

	// Weryfikacja połączenia
	gyro_ReadWhoAmI();
 80015e4:	f000 f8a8 	bl	8001738 <gyro_ReadWhoAmI>
 80015e8:	e000      	b.n	80015ec <gyro_init+0x4c>
	if (!spi5_acquire()) return;
 80015ea:	bf00      	nop
}
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40020800 	.word	0x40020800
 80015f8:	20025ca4 	.word	0x20025ca4

080015fc <gyro_get_filtered_data>:

void gyro_get_filtered_data(int16_t *x, int16_t *y, int16_t *z) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	@ 0x28
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
	int16_t x_raw, y_raw, z_raw;
	int32_t x_sum = 0, y_sum = 0, z_sum = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	627b      	str	r3, [r7, #36]	@ 0x24
 800160c:	2300      	movs	r3, #0
 800160e:	623b      	str	r3, [r7, #32]
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]

	// Bufory do filtracji
	memset(x_data, 0, sizeof(x_data));
 8001614:	2214      	movs	r2, #20
 8001616:	2100      	movs	r1, #0
 8001618:	4842      	ldr	r0, [pc, #264]	@ (8001724 <gyro_get_filtered_data+0x128>)
 800161a:	f00a fb17 	bl	800bc4c <memset>
	memset(y_data, 0, sizeof(y_data));
 800161e:	2214      	movs	r2, #20
 8001620:	2100      	movs	r1, #0
 8001622:	4841      	ldr	r0, [pc, #260]	@ (8001728 <gyro_get_filtered_data+0x12c>)
 8001624:	f00a fb12 	bl	800bc4c <memset>
	memset(z_data, 0, sizeof(z_data));
 8001628:	2214      	movs	r2, #20
 800162a:	2100      	movs	r1, #0
 800162c:	483f      	ldr	r0, [pc, #252]	@ (800172c <gyro_get_filtered_data+0x130>)
 800162e:	f00a fb0d 	bl	800bc4c <memset>
	data_index = 0;
 8001632:	4b3f      	ldr	r3, [pc, #252]	@ (8001730 <gyro_get_filtered_data+0x134>)
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]


	gyro_get_data(&x_raw, &y_raw, &z_raw);
 8001638:	f107 0214 	add.w	r2, r7, #20
 800163c:	f107 0116 	add.w	r1, r7, #22
 8001640:	f107 0318 	add.w	r3, r7, #24
 8001644:	4618      	mov	r0, r3
 8001646:	f000 f8b9 	bl	80017bc <gyro_get_data>

	// Aktualizacja bufora
	x_data[data_index] = x_raw;
 800164a:	4b39      	ldr	r3, [pc, #228]	@ (8001730 <gyro_get_filtered_data+0x134>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	461a      	mov	r2, r3
 8001650:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 8001654:	4b33      	ldr	r3, [pc, #204]	@ (8001724 <gyro_get_filtered_data+0x128>)
 8001656:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	y_data[data_index] = y_raw;
 800165a:	4b35      	ldr	r3, [pc, #212]	@ (8001730 <gyro_get_filtered_data+0x134>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	461a      	mov	r2, r3
 8001660:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8001664:	4b30      	ldr	r3, [pc, #192]	@ (8001728 <gyro_get_filtered_data+0x12c>)
 8001666:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	z_data[data_index] = z_raw;
 800166a:	4b31      	ldr	r3, [pc, #196]	@ (8001730 <gyro_get_filtered_data+0x134>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	461a      	mov	r2, r3
 8001670:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8001674:	4b2d      	ldr	r3, [pc, #180]	@ (800172c <gyro_get_filtered_data+0x130>)
 8001676:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	//Średnia
	for (uint8_t i = 0; i < MOVING_AVERAGE_WINDOW; i++) {
 800167a:	2300      	movs	r3, #0
 800167c:	76fb      	strb	r3, [r7, #27]
 800167e:	e01a      	b.n	80016b6 <gyro_get_filtered_data+0xba>
		x_sum += x_data[i];
 8001680:	7efb      	ldrb	r3, [r7, #27]
 8001682:	4a28      	ldr	r2, [pc, #160]	@ (8001724 <gyro_get_filtered_data+0x128>)
 8001684:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001688:	461a      	mov	r2, r3
 800168a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168c:	4413      	add	r3, r2
 800168e:	627b      	str	r3, [r7, #36]	@ 0x24
		y_sum += y_data[i];
 8001690:	7efb      	ldrb	r3, [r7, #27]
 8001692:	4a25      	ldr	r2, [pc, #148]	@ (8001728 <gyro_get_filtered_data+0x12c>)
 8001694:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001698:	461a      	mov	r2, r3
 800169a:	6a3b      	ldr	r3, [r7, #32]
 800169c:	4413      	add	r3, r2
 800169e:	623b      	str	r3, [r7, #32]
		z_sum += z_data[i];
 80016a0:	7efb      	ldrb	r3, [r7, #27]
 80016a2:	4a22      	ldr	r2, [pc, #136]	@ (800172c <gyro_get_filtered_data+0x130>)
 80016a4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80016a8:	461a      	mov	r2, r3
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	4413      	add	r3, r2
 80016ae:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < MOVING_AVERAGE_WINDOW; i++) {
 80016b0:	7efb      	ldrb	r3, [r7, #27]
 80016b2:	3301      	adds	r3, #1
 80016b4:	76fb      	strb	r3, [r7, #27]
 80016b6:	7efb      	ldrb	r3, [r7, #27]
 80016b8:	2b09      	cmp	r3, #9
 80016ba:	d9e1      	bls.n	8001680 <gyro_get_filtered_data+0x84>
	}

	*x = x_sum / MOVING_AVERAGE_WINDOW;
 80016bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016be:	4a1d      	ldr	r2, [pc, #116]	@ (8001734 <gyro_get_filtered_data+0x138>)
 80016c0:	fb82 1203 	smull	r1, r2, r2, r3
 80016c4:	1092      	asrs	r2, r2, #2
 80016c6:	17db      	asrs	r3, r3, #31
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	b21a      	sxth	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	801a      	strh	r2, [r3, #0]
	*y = y_sum / MOVING_AVERAGE_WINDOW;
 80016d0:	6a3b      	ldr	r3, [r7, #32]
 80016d2:	4a18      	ldr	r2, [pc, #96]	@ (8001734 <gyro_get_filtered_data+0x138>)
 80016d4:	fb82 1203 	smull	r1, r2, r2, r3
 80016d8:	1092      	asrs	r2, r2, #2
 80016da:	17db      	asrs	r3, r3, #31
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	b21a      	sxth	r2, r3
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	801a      	strh	r2, [r3, #0]
	*z = z_sum / MOVING_AVERAGE_WINDOW;
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	4a13      	ldr	r2, [pc, #76]	@ (8001734 <gyro_get_filtered_data+0x138>)
 80016e8:	fb82 1203 	smull	r1, r2, r2, r3
 80016ec:	1092      	asrs	r2, r2, #2
 80016ee:	17db      	asrs	r3, r3, #31
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	b21a      	sxth	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	801a      	strh	r2, [r3, #0]

	// Aktualizuj indeks
	data_index = (data_index + 1) % MOVING_AVERAGE_WINDOW;
 80016f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001730 <gyro_get_filtered_data+0x134>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	1c5a      	adds	r2, r3, #1
 80016fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001734 <gyro_get_filtered_data+0x138>)
 8001700:	fb83 1302 	smull	r1, r3, r3, r2
 8001704:	1099      	asrs	r1, r3, #2
 8001706:	17d3      	asrs	r3, r2, #31
 8001708:	1ac9      	subs	r1, r1, r3
 800170a:	460b      	mov	r3, r1
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	440b      	add	r3, r1
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	1ad1      	subs	r1, r2, r3
 8001714:	b2ca      	uxtb	r2, r1
 8001716:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <gyro_get_filtered_data+0x134>)
 8001718:	701a      	strb	r2, [r3, #0]
}
 800171a:	bf00      	nop
 800171c:	3728      	adds	r7, #40	@ 0x28
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000278 	.word	0x20000278
 8001728:	2000028c 	.word	0x2000028c
 800172c:	200002a0 	.word	0x200002a0
 8001730:	200002b4 	.word	0x200002b4
 8001734:	66666667 	.word	0x66666667

08001738 <gyro_ReadWhoAmI>:

void gyro_ReadWhoAmI(void) {
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
	uint8_t tx = WHO_AM_I | 0x80;
 800173e:	238f      	movs	r3, #143	@ 0x8f
 8001740:	71fb      	strb	r3, [r7, #7]
	uint8_t rx = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	71bb      	strb	r3, [r7, #6]

	if (!spi5_acquire())return;
 8001746:	f001 f875 	bl	8002834 <spi5_acquire>
 800174a:	4603      	mov	r3, r0
 800174c:	f083 0301 	eor.w	r3, r3, #1
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d126      	bne.n	80017a4 <gyro_ReadWhoAmI+0x6c>

	GYRO_CS_LOW();
 8001756:	2200      	movs	r2, #0
 8001758:	2102      	movs	r1, #2
 800175a:	4814      	ldr	r0, [pc, #80]	@ (80017ac <gyro_ReadWhoAmI+0x74>)
 800175c:	f002 fc66 	bl	800402c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &tx, 1, 10);
 8001760:	1df9      	adds	r1, r7, #7
 8001762:	230a      	movs	r3, #10
 8001764:	2201      	movs	r2, #1
 8001766:	4812      	ldr	r0, [pc, #72]	@ (80017b0 <gyro_ReadWhoAmI+0x78>)
 8001768:	f005 fe8f 	bl	800748a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi5, &rx, 1, 10);
 800176c:	1db9      	adds	r1, r7, #6
 800176e:	230a      	movs	r3, #10
 8001770:	2201      	movs	r2, #1
 8001772:	480f      	ldr	r0, [pc, #60]	@ (80017b0 <gyro_ReadWhoAmI+0x78>)
 8001774:	f005 ffcd 	bl	8007712 <HAL_SPI_Receive>
	GYRO_CS_HIGH();
 8001778:	2201      	movs	r2, #1
 800177a:	2102      	movs	r1, #2
 800177c:	480b      	ldr	r0, [pc, #44]	@ (80017ac <gyro_ReadWhoAmI+0x74>)
 800177e:	f002 fc55 	bl	800402c <HAL_GPIO_WritePin>

	spi5_release();
 8001782:	f001 f86b 	bl	800285c <spi5_release>

	if (rx != 0xD3) {
 8001786:	79bb      	ldrb	r3, [r7, #6]
 8001788:	2bd3      	cmp	r3, #211	@ 0xd3
 800178a:	d005      	beq.n	8001798 <gyro_ReadWhoAmI+0x60>
		printf("WHO_AM_I error: 0x%02X (expected 0xD3)\r\n", rx);
 800178c:	79bb      	ldrb	r3, [r7, #6]
 800178e:	4619      	mov	r1, r3
 8001790:	4808      	ldr	r0, [pc, #32]	@ (80017b4 <gyro_ReadWhoAmI+0x7c>)
 8001792:	f00a f913 	bl	800b9bc <iprintf>
 8001796:	e006      	b.n	80017a6 <gyro_ReadWhoAmI+0x6e>
	} else {
		printf("WHO_AM_I OK: 0x%02X\r\n", rx);
 8001798:	79bb      	ldrb	r3, [r7, #6]
 800179a:	4619      	mov	r1, r3
 800179c:	4806      	ldr	r0, [pc, #24]	@ (80017b8 <gyro_ReadWhoAmI+0x80>)
 800179e:	f00a f90d 	bl	800b9bc <iprintf>
 80017a2:	e000      	b.n	80017a6 <gyro_ReadWhoAmI+0x6e>
	if (!spi5_acquire())return;
 80017a4:	bf00      	nop
	}
}
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40020800 	.word	0x40020800
 80017b0:	20025ca4 	.word	0x20025ca4
 80017b4:	0800e6e0 	.word	0x0800e6e0
 80017b8:	0800e70c 	.word	0x0800e70c

080017bc <gyro_get_data>:

void gyro_get_data(int16_t *x, int16_t *y, int16_t *z) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]

	uint8_t tx = OUT_X_L | 0x80 | 0x40;
 80017c8:	23e8      	movs	r3, #232	@ 0xe8
 80017ca:	75fb      	strb	r3, [r7, #23]
	uint8_t rx[6];
	if (!gyro_is_data_ready()) {
 80017cc:	f000 f852 	bl	8001874 <gyro_is_data_ready>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d103      	bne.n	80017de <gyro_get_data+0x22>
		printf("Data not ready\r\n");
 80017d6:	4824      	ldr	r0, [pc, #144]	@ (8001868 <gyro_get_data+0xac>)
 80017d8:	f00a f958 	bl	800ba8c <puts>
		return;
 80017dc:	e041      	b.n	8001862 <gyro_get_data+0xa6>
	}

	if (!spi5_acquire()) return;
 80017de:	f001 f829 	bl	8002834 <spi5_acquire>
 80017e2:	4603      	mov	r3, r0
 80017e4:	f083 0301 	eor.w	r3, r3, #1
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d138      	bne.n	8001860 <gyro_get_data+0xa4>

	GYRO_CS_LOW();
 80017ee:	2200      	movs	r2, #0
 80017f0:	2102      	movs	r1, #2
 80017f2:	481e      	ldr	r0, [pc, #120]	@ (800186c <gyro_get_data+0xb0>)
 80017f4:	f002 fc1a 	bl	800402c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &tx, 1, 10);
 80017f8:	f107 0117 	add.w	r1, r7, #23
 80017fc:	230a      	movs	r3, #10
 80017fe:	2201      	movs	r2, #1
 8001800:	481b      	ldr	r0, [pc, #108]	@ (8001870 <gyro_get_data+0xb4>)
 8001802:	f005 fe42 	bl	800748a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi5, rx, 6, 10);
 8001806:	f107 0110 	add.w	r1, r7, #16
 800180a:	230a      	movs	r3, #10
 800180c:	2206      	movs	r2, #6
 800180e:	4818      	ldr	r0, [pc, #96]	@ (8001870 <gyro_get_data+0xb4>)
 8001810:	f005 ff7f 	bl	8007712 <HAL_SPI_Receive>
	GYRO_CS_HIGH();
 8001814:	2201      	movs	r2, #1
 8001816:	2102      	movs	r1, #2
 8001818:	4814      	ldr	r0, [pc, #80]	@ (800186c <gyro_get_data+0xb0>)
 800181a:	f002 fc07 	bl	800402c <HAL_GPIO_WritePin>

	spi5_release();
 800181e:	f001 f81d 	bl	800285c <spi5_release>

	*x = (int16_t) (rx[1] << 8 | rx[0]);
 8001822:	7c7b      	ldrb	r3, [r7, #17]
 8001824:	b21b      	sxth	r3, r3
 8001826:	021b      	lsls	r3, r3, #8
 8001828:	b21a      	sxth	r2, r3
 800182a:	7c3b      	ldrb	r3, [r7, #16]
 800182c:	b21b      	sxth	r3, r3
 800182e:	4313      	orrs	r3, r2
 8001830:	b21a      	sxth	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	801a      	strh	r2, [r3, #0]
	*y = (int16_t) (rx[3] << 8 | rx[2]);
 8001836:	7cfb      	ldrb	r3, [r7, #19]
 8001838:	b21b      	sxth	r3, r3
 800183a:	021b      	lsls	r3, r3, #8
 800183c:	b21a      	sxth	r2, r3
 800183e:	7cbb      	ldrb	r3, [r7, #18]
 8001840:	b21b      	sxth	r3, r3
 8001842:	4313      	orrs	r3, r2
 8001844:	b21a      	sxth	r2, r3
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	801a      	strh	r2, [r3, #0]
	*z = (int16_t) (rx[5] << 8 | rx[4]);
 800184a:	7d7b      	ldrb	r3, [r7, #21]
 800184c:	b21b      	sxth	r3, r3
 800184e:	021b      	lsls	r3, r3, #8
 8001850:	b21a      	sxth	r2, r3
 8001852:	7d3b      	ldrb	r3, [r7, #20]
 8001854:	b21b      	sxth	r3, r3
 8001856:	4313      	orrs	r3, r2
 8001858:	b21a      	sxth	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	801a      	strh	r2, [r3, #0]
 800185e:	e000      	b.n	8001862 <gyro_get_data+0xa6>
	if (!spi5_acquire()) return;
 8001860:	bf00      	nop

}
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	0800e724 	.word	0x0800e724
 800186c:	40020800 	.word	0x40020800
 8001870:	20025ca4 	.word	0x20025ca4

08001874 <gyro_is_data_ready>:

uint8_t gyro_is_data_ready(void) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
	uint8_t tx = STATUS_REG | 0x80;
 800187a:	23a7      	movs	r3, #167	@ 0xa7
 800187c:	71fb      	strb	r3, [r7, #7]
	uint8_t rx = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	71bb      	strb	r3, [r7, #6]

	if (!spi5_acquire()) return 0;
 8001882:	f000 ffd7 	bl	8002834 <spi5_acquire>
 8001886:	4603      	mov	r3, r0
 8001888:	f083 0301 	eor.w	r3, r3, #1
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <gyro_is_data_ready+0x22>
 8001892:	2300      	movs	r3, #0
 8001894:	e01d      	b.n	80018d2 <gyro_is_data_ready+0x5e>

	GYRO_CS_LOW();
 8001896:	2200      	movs	r2, #0
 8001898:	2102      	movs	r1, #2
 800189a:	4810      	ldr	r0, [pc, #64]	@ (80018dc <gyro_is_data_ready+0x68>)
 800189c:	f002 fbc6 	bl	800402c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &tx, 1, 10);
 80018a0:	1df9      	adds	r1, r7, #7
 80018a2:	230a      	movs	r3, #10
 80018a4:	2201      	movs	r2, #1
 80018a6:	480e      	ldr	r0, [pc, #56]	@ (80018e0 <gyro_is_data_ready+0x6c>)
 80018a8:	f005 fdef 	bl	800748a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi5, &rx, 1, 10);
 80018ac:	1db9      	adds	r1, r7, #6
 80018ae:	230a      	movs	r3, #10
 80018b0:	2201      	movs	r2, #1
 80018b2:	480b      	ldr	r0, [pc, #44]	@ (80018e0 <gyro_is_data_ready+0x6c>)
 80018b4:	f005 ff2d 	bl	8007712 <HAL_SPI_Receive>
	GYRO_CS_HIGH();
 80018b8:	2201      	movs	r2, #1
 80018ba:	2102      	movs	r1, #2
 80018bc:	4807      	ldr	r0, [pc, #28]	@ (80018dc <gyro_is_data_ready+0x68>)
 80018be:	f002 fbb5 	bl	800402c <HAL_GPIO_WritePin>

	spi5_release();
 80018c2:	f000 ffcb 	bl	800285c <spi5_release>

	return (rx & 0x08) ? 1 : 0;
 80018c6:	79bb      	ldrb	r3, [r7, #6]
 80018c8:	10db      	asrs	r3, r3, #3
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	b2db      	uxtb	r3, r3
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40020800 	.word	0x40020800
 80018e0:	20025ca4 	.word	0x20025ca4

080018e4 <gyro_calibration>:

void gyro_calibration(int16_t *offset_x, int16_t *offset_y, int16_t *offset_z) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	@ 0x28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
	int32_t sum_x = 0, sum_y = 0, sum_z = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80018f4:	2300      	movs	r3, #0
 80018f6:	623b      	str	r3, [r7, #32]
 80018f8:	2300      	movs	r3, #0
 80018fa:	61fb      	str	r3, [r7, #28]
	const uint16_t samples = 500;
 80018fc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001900:	833b      	strh	r3, [r7, #24]
	int16_t x, y, z;

	printf("Starting calibration...\r\n");
 8001902:	4830      	ldr	r0, [pc, #192]	@ (80019c4 <gyro_calibration+0xe0>)
 8001904:	f00a f8c2 	bl	800ba8c <puts>

	for (uint16_t i = 0; i < samples; i++) {
 8001908:	2300      	movs	r3, #0
 800190a:	837b      	strh	r3, [r7, #26]
 800190c:	e02f      	b.n	800196e <gyro_calibration+0x8a>
		gyro_get_data(&x, &y, &z);
 800190e:	f107 0212 	add.w	r2, r7, #18
 8001912:	f107 0114 	add.w	r1, r7, #20
 8001916:	f107 0316 	add.w	r3, r7, #22
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff ff4e 	bl	80017bc <gyro_get_data>
		sum_x += x;
 8001920:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001924:	461a      	mov	r2, r3
 8001926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001928:	4413      	add	r3, r2
 800192a:	627b      	str	r3, [r7, #36]	@ 0x24
		sum_y += y;
 800192c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001930:	461a      	mov	r2, r3
 8001932:	6a3b      	ldr	r3, [r7, #32]
 8001934:	4413      	add	r3, r2
 8001936:	623b      	str	r3, [r7, #32]
		sum_z += z;
 8001938:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800193c:	461a      	mov	r2, r3
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	4413      	add	r3, r2
 8001942:	61fb      	str	r3, [r7, #28]
		HAL_Delay(10);
 8001944:	200a      	movs	r0, #10
 8001946:	f001 fb47 	bl	8002fd8 <HAL_Delay>

		if (i % 100 == 0)
 800194a:	8b7b      	ldrh	r3, [r7, #26]
 800194c:	4a1e      	ldr	r2, [pc, #120]	@ (80019c8 <gyro_calibration+0xe4>)
 800194e:	fba2 1203 	umull	r1, r2, r2, r3
 8001952:	0952      	lsrs	r2, r2, #5
 8001954:	2164      	movs	r1, #100	@ 0x64
 8001956:	fb01 f202 	mul.w	r2, r1, r2
 800195a:	1a9b      	subs	r3, r3, r2
 800195c:	b29b      	uxth	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d102      	bne.n	8001968 <gyro_calibration+0x84>
			printf(".\r\n");
 8001962:	481a      	ldr	r0, [pc, #104]	@ (80019cc <gyro_calibration+0xe8>)
 8001964:	f00a f892 	bl	800ba8c <puts>
	for (uint16_t i = 0; i < samples; i++) {
 8001968:	8b7b      	ldrh	r3, [r7, #26]
 800196a:	3301      	adds	r3, #1
 800196c:	837b      	strh	r3, [r7, #26]
 800196e:	8b7a      	ldrh	r2, [r7, #26]
 8001970:	8b3b      	ldrh	r3, [r7, #24]
 8001972:	429a      	cmp	r2, r3
 8001974:	d3cb      	bcc.n	800190e <gyro_calibration+0x2a>
	}

	*offset_x = sum_x / samples;
 8001976:	8b3b      	ldrh	r3, [r7, #24]
 8001978:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800197a:	fb92 f3f3 	sdiv	r3, r2, r3
 800197e:	b21a      	sxth	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	801a      	strh	r2, [r3, #0]
	*offset_y = sum_y / samples;
 8001984:	8b3b      	ldrh	r3, [r7, #24]
 8001986:	6a3a      	ldr	r2, [r7, #32]
 8001988:	fb92 f3f3 	sdiv	r3, r2, r3
 800198c:	b21a      	sxth	r2, r3
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	801a      	strh	r2, [r3, #0]
	*offset_z = sum_z / samples;
 8001992:	8b3b      	ldrh	r3, [r7, #24]
 8001994:	69fa      	ldr	r2, [r7, #28]
 8001996:	fb92 f3f3 	sdiv	r3, r2, r3
 800199a:	b21a      	sxth	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	801a      	strh	r2, [r3, #0]

	printf("\nCalibration complete. Offsets: X=%d, Y=%d, Z=%d\r\n", *offset_x,
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a6:	4619      	mov	r1, r3
			*offset_y, *offset_z);
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	f9b3 3000 	ldrsh.w	r3, [r3]
	printf("\nCalibration complete. Offsets: X=%d, Y=%d, Z=%d\r\n", *offset_x,
 80019ae:	461a      	mov	r2, r3
			*offset_y, *offset_z);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f9b3 3000 	ldrsh.w	r3, [r3]
	printf("\nCalibration complete. Offsets: X=%d, Y=%d, Z=%d\r\n", *offset_x,
 80019b6:	4806      	ldr	r0, [pc, #24]	@ (80019d0 <gyro_calibration+0xec>)
 80019b8:	f00a f800 	bl	800b9bc <iprintf>
}
 80019bc:	bf00      	nop
 80019be:	3728      	adds	r7, #40	@ 0x28
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	0800e734 	.word	0x0800e734
 80019c8:	51eb851f 	.word	0x51eb851f
 80019cc:	0800e750 	.word	0x0800e750
 80019d0:	0800e754 	.word	0x0800e754

080019d4 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80019d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a48 <MX_I2C3_Init+0x74>)
 80019da:	4a1c      	ldr	r2, [pc, #112]	@ (8001a4c <MX_I2C3_Init+0x78>)
 80019dc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80019de:	4b1a      	ldr	r3, [pc, #104]	@ (8001a48 <MX_I2C3_Init+0x74>)
 80019e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001a50 <MX_I2C3_Init+0x7c>)
 80019e2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019e4:	4b18      	ldr	r3, [pc, #96]	@ (8001a48 <MX_I2C3_Init+0x74>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80019ea:	4b17      	ldr	r3, [pc, #92]	@ (8001a48 <MX_I2C3_Init+0x74>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019f0:	4b15      	ldr	r3, [pc, #84]	@ (8001a48 <MX_I2C3_Init+0x74>)
 80019f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019f6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019f8:	4b13      	ldr	r3, [pc, #76]	@ (8001a48 <MX_I2C3_Init+0x74>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80019fe:	4b12      	ldr	r3, [pc, #72]	@ (8001a48 <MX_I2C3_Init+0x74>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a04:	4b10      	ldr	r3, [pc, #64]	@ (8001a48 <MX_I2C3_Init+0x74>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a48 <MX_I2C3_Init+0x74>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a10:	480d      	ldr	r0, [pc, #52]	@ (8001a48 <MX_I2C3_Init+0x74>)
 8001a12:	f004 f8cb 	bl	8005bac <HAL_I2C_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001a1c:	f000 ff04 	bl	8002828 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a20:	2100      	movs	r1, #0
 8001a22:	4809      	ldr	r0, [pc, #36]	@ (8001a48 <MX_I2C3_Init+0x74>)
 8001a24:	f004 fa06 	bl	8005e34 <HAL_I2CEx_ConfigAnalogFilter>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001a2e:	f000 fefb 	bl	8002828 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001a32:	2100      	movs	r1, #0
 8001a34:	4804      	ldr	r0, [pc, #16]	@ (8001a48 <MX_I2C3_Init+0x74>)
 8001a36:	f004 fa39 	bl	8005eac <HAL_I2CEx_ConfigDigitalFilter>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001a40:	f000 fef2 	bl	8002828 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	200002b8 	.word	0x200002b8
 8001a4c:	40005c00 	.word	0x40005c00
 8001a50:	000186a0 	.word	0x000186a0

08001a54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	@ 0x28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a29      	ldr	r2, [pc, #164]	@ (8001b18 <HAL_I2C_MspInit+0xc4>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d14b      	bne.n	8001b0e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	4b28      	ldr	r3, [pc, #160]	@ (8001b1c <HAL_I2C_MspInit+0xc8>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	4a27      	ldr	r2, [pc, #156]	@ (8001b1c <HAL_I2C_MspInit+0xc8>)
 8001a80:	f043 0304 	orr.w	r3, r3, #4
 8001a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a86:	4b25      	ldr	r3, [pc, #148]	@ (8001b1c <HAL_I2C_MspInit+0xc8>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	f003 0304 	and.w	r3, r3, #4
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	4b21      	ldr	r3, [pc, #132]	@ (8001b1c <HAL_I2C_MspInit+0xc8>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	4a20      	ldr	r2, [pc, #128]	@ (8001b1c <HAL_I2C_MspInit+0xc8>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b1c <HAL_I2C_MspInit+0xc8>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001aae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ab4:	2312      	movs	r3, #18
 8001ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abc:	2300      	movs	r3, #0
 8001abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ac0:	2304      	movs	r3, #4
 8001ac2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4815      	ldr	r0, [pc, #84]	@ (8001b20 <HAL_I2C_MspInit+0xcc>)
 8001acc:	f002 f902 	bl	8003cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001ad0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ad6:	2312      	movs	r3, #18
 8001ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ada:	2301      	movs	r3, #1
 8001adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ae2:	2304      	movs	r3, #4
 8001ae4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001ae6:	f107 0314 	add.w	r3, r7, #20
 8001aea:	4619      	mov	r1, r3
 8001aec:	480d      	ldr	r0, [pc, #52]	@ (8001b24 <HAL_I2C_MspInit+0xd0>)
 8001aee:	f002 f8f1 	bl	8003cd4 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	4b09      	ldr	r3, [pc, #36]	@ (8001b1c <HAL_I2C_MspInit+0xc8>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afa:	4a08      	ldr	r2, [pc, #32]	@ (8001b1c <HAL_I2C_MspInit+0xc8>)
 8001afc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b02:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <HAL_I2C_MspInit+0xc8>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001b0e:	bf00      	nop
 8001b10:	3728      	adds	r7, #40	@ 0x28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40005c00 	.word	0x40005c00
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40020800 	.word	0x40020800
 8001b24:	40020000 	.word	0x40020000

08001b28 <lcd_cmd>:
		CMD(COLMOD), 0x05, // chosen 16-bit, R5, G6, B5
		CMD(MAC), 0x48, //in documentation this means BGR but it turned out to be RGB, also it set (0,0) to up left corner
		CMD(POS_GAMMA_COR), 0x1F, 0x1A, 0x18, 0x0A, 0x0F, 0x06, 0x45, 0x87, 0x32, 0x0A, 0x07, 0x02, 0x07, 0x05, 0x00,
		CMD(NEG_GAMMA_COR), 0x00, 0x25, 0x27, 0x05, 0x10, 0x09, 0x3A, 0x56, 0x4C, 0x05, 0x0D, 0x0C, 0x2E, 0x2F, 0x0F,
};
static void lcd_cmd(uint8_t cmd){
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	71fb      	strb	r3, [r7, #7]

	 if (!spi5_acquire()) return;  // SPI jest zajęte, zwróć
 8001b32:	f000 fe7f 	bl	8002834 <spi5_acquire>
 8001b36:	4603      	mov	r3, r0
 8001b38:	f083 0301 	eor.w	r3, r3, #1
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d119      	bne.n	8001b76 <lcd_cmd+0x4e>

	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_RESET); //teraz komendy
 8001b42:	2200      	movs	r2, #0
 8001b44:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b48:	480d      	ldr	r0, [pc, #52]	@ (8001b80 <lcd_cmd+0x58>)
 8001b4a:	f002 fa6f 	bl	800402c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2104      	movs	r1, #4
 8001b52:	480c      	ldr	r0, [pc, #48]	@ (8001b84 <lcd_cmd+0x5c>)
 8001b54:	f002 fa6a 	bl	800402c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &cmd, 1, HAL_MAX_DELAY);
 8001b58:	1df9      	adds	r1, r7, #7
 8001b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5e:	2201      	movs	r2, #1
 8001b60:	4809      	ldr	r0, [pc, #36]	@ (8001b88 <lcd_cmd+0x60>)
 8001b62:	f005 fc92 	bl	800748a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_SET);
 8001b66:	2201      	movs	r2, #1
 8001b68:	2104      	movs	r1, #4
 8001b6a:	4806      	ldr	r0, [pc, #24]	@ (8001b84 <lcd_cmd+0x5c>)
 8001b6c:	f002 fa5e 	bl	800402c <HAL_GPIO_WritePin>

	spi5_release();
 8001b70:	f000 fe74 	bl	800285c <spi5_release>
 8001b74:	e000      	b.n	8001b78 <lcd_cmd+0x50>
	 if (!spi5_acquire()) return;  // SPI jest zajęte, zwróć
 8001b76:	bf00      	nop

}
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40020c00 	.word	0x40020c00
 8001b84:	40020800 	.word	0x40020800
 8001b88:	20025ca4 	.word	0x20025ca4

08001b8c <lcd_data>:
static void lcd_data(uint8_t data){
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_SET); //teraz dane
 8001b96:	2201      	movs	r2, #1
 8001b98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b9c:	480b      	ldr	r0, [pc, #44]	@ (8001bcc <lcd_data+0x40>)
 8001b9e:	f002 fa45 	bl	800402c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2104      	movs	r1, #4
 8001ba6:	480a      	ldr	r0, [pc, #40]	@ (8001bd0 <lcd_data+0x44>)
 8001ba8:	f002 fa40 	bl	800402c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &data, 1, HAL_MAX_DELAY);
 8001bac:	1df9      	adds	r1, r7, #7
 8001bae:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	4807      	ldr	r0, [pc, #28]	@ (8001bd4 <lcd_data+0x48>)
 8001bb6:	f005 fc68 	bl	800748a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_SET);
 8001bba:	2201      	movs	r2, #1
 8001bbc:	2104      	movs	r1, #4
 8001bbe:	4804      	ldr	r0, [pc, #16]	@ (8001bd0 <lcd_data+0x44>)
 8001bc0:	f002 fa34 	bl	800402c <HAL_GPIO_WritePin>
}
 8001bc4:	bf00      	nop
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40020c00 	.word	0x40020c00
 8001bd0:	40020800 	.word	0x40020800
 8001bd4:	20025ca4 	.word	0x20025ca4

08001bd8 <lcd_data16>:
static void lcd_data16(uint16_t value){
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff ffce 	bl	8001b8c <lcd_data>
	lcd_data(value);
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ffc9 	bl	8001b8c <lcd_data>
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <lcd_send>:
static void lcd_send(uint16_t value){
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	4603      	mov	r3, r0
 8001c0a:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d005      	beq.n	8001c22 <lcd_send+0x20>
		lcd_cmd(value);
 8001c16:	88fb      	ldrh	r3, [r7, #6]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff ff84 	bl	8001b28 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 8001c20:	e004      	b.n	8001c2c <lcd_send+0x2a>
		lcd_data(value);
 8001c22:	88fb      	ldrh	r3, [r7, #6]
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff ffb0 	bl	8001b8c <lcd_data>
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <lcd_init>:
void lcd_init(void){
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
  chunk_size = (LCD_HEIGHT * LCD_WIDTH) / how_many_chunks;
 8001c3a:	4b23      	ldr	r3, [pc, #140]	@ (8001cc8 <lcd_init+0x94>)
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8001c44:	fb93 f3f2 	sdiv	r3, r3, r2
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	4b20      	ldr	r3, [pc, #128]	@ (8001ccc <lcd_init+0x98>)
 8001c4c:	801a      	strh	r2, [r3, #0]
  y_per_chunk = LCD_HEIGHT / how_many_chunks;
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc8 <lcd_init+0x94>)
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	461a      	mov	r2, r3
 8001c54:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001c58:	fb93 f3f2 	sdiv	r3, r3, r2
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd0 <lcd_init+0x9c>)
 8001c60:	801a      	strh	r2, [r3, #0]

  int i;
  HAL_GPIO_WritePin(RDX_GPIO_Port, RDX_Pin, GPIO_PIN_RESET);
 8001c62:	2200      	movs	r2, #0
 8001c64:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c68:	481a      	ldr	r0, [pc, #104]	@ (8001cd4 <lcd_init+0xa0>)
 8001c6a:	f002 f9df 	bl	800402c <HAL_GPIO_WritePin>
  HAL_Delay(100); // w nocie 10 mikro sec
 8001c6e:	2064      	movs	r0, #100	@ 0x64
 8001c70:	f001 f9b2 	bl	8002fd8 <HAL_Delay>
  HAL_GPIO_WritePin(RDX_GPIO_Port, RDX_Pin, GPIO_PIN_SET);
 8001c74:	2201      	movs	r2, #1
 8001c76:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c7a:	4816      	ldr	r0, [pc, #88]	@ (8001cd4 <lcd_init+0xa0>)
 8001c7c:	f002 f9d6 	bl	800402c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001c80:	2064      	movs	r0, #100	@ 0x64
 8001c82:	f001 f9a9 	bl	8002fd8 <HAL_Delay>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001c86:	2300      	movs	r3, #0
 8001c88:	607b      	str	r3, [r7, #4]
 8001c8a:	e009      	b.n	8001ca0 <lcd_init+0x6c>
    lcd_send(init_table[i]);
 8001c8c:	4a12      	ldr	r2, [pc, #72]	@ (8001cd8 <lcd_init+0xa4>)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ffb4 	bl	8001c02 <lcd_send>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	607b      	str	r3, [r7, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b35      	cmp	r3, #53	@ 0x35
 8001ca4:	d9f2      	bls.n	8001c8c <lcd_init+0x58>
  }
  HAL_Delay(200);
 8001ca6:	20c8      	movs	r0, #200	@ 0xc8
 8001ca8:	f001 f996 	bl	8002fd8 <HAL_Delay>
  lcd_cmd(SLEEP_OUT);
 8001cac:	2011      	movs	r0, #17
 8001cae:	f7ff ff3b 	bl	8001b28 <lcd_cmd>
  HAL_Delay(120);
 8001cb2:	2078      	movs	r0, #120	@ 0x78
 8001cb4:	f001 f990 	bl	8002fd8 <HAL_Delay>
  lcd_cmd(DISPLAY_ON);
 8001cb8:	2029      	movs	r0, #41	@ 0x29
 8001cba:	f7ff ff35 	bl	8001b28 <lcd_cmd>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	20025be6 	.word	0x20025be6
 8001cd0:	20025be8 	.word	0x20025be8
 8001cd4:	40020c00 	.word	0x40020c00
 8001cd8:	0800e7bc 	.word	0x0800e7bc

08001cdc <lcd_set_window>:

static void lcd_set_window(int x, int y, int width, int height){
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
 8001ce8:	603b      	str	r3, [r7, #0]
	lcd_cmd(COL_ADR_SET);
 8001cea:	202a      	movs	r0, #42	@ 0x2a
 8001cec:	f7ff ff1c 	bl	8001b28 <lcd_cmd>
	lcd_data16(x);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff6f 	bl	8001bd8 <lcd_data16>
	lcd_data16(x+width-1);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	4413      	add	r3, r2
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	3b01      	subs	r3, #1
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff ff64 	bl	8001bd8 <lcd_data16>
	lcd_cmd(PAGE_ADR_SET);
 8001d10:	202b      	movs	r0, #43	@ 0x2b
 8001d12:	f7ff ff09 	bl	8001b28 <lcd_cmd>
	lcd_data16(y);
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff ff5c 	bl	8001bd8 <lcd_data16>
	lcd_data16(y+height-1);
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	4413      	add	r3, r2
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff ff51 	bl	8001bd8 <lcd_data16>
}
 8001d36:	bf00      	nop
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <lcd_update_rectangle>:
void lcd_update_rectangle(uint16_t idx,int x,int y,int width,int height,uint16_t color){
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
 8001d4a:	603b      	str	r3, [r7, #0]
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	81fb      	strh	r3, [r7, #14]
	rects[idx].x = x;
 8001d50:	89fa      	ldrh	r2, [r7, #14]
 8001d52:	491b      	ldr	r1, [pc, #108]	@ (8001dc0 <lcd_update_rectangle+0x80>)
 8001d54:	4613      	mov	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	601a      	str	r2, [r3, #0]
	rects[idx].y = y;
 8001d62:	89fa      	ldrh	r2, [r7, #14]
 8001d64:	4916      	ldr	r1, [pc, #88]	@ (8001dc0 <lcd_update_rectangle+0x80>)
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	440b      	add	r3, r1
 8001d70:	3304      	adds	r3, #4
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	601a      	str	r2, [r3, #0]
	rects[idx].width = width;
 8001d76:	89fa      	ldrh	r2, [r7, #14]
 8001d78:	4911      	ldr	r1, [pc, #68]	@ (8001dc0 <lcd_update_rectangle+0x80>)
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	440b      	add	r3, r1
 8001d84:	3308      	adds	r3, #8
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	601a      	str	r2, [r3, #0]
	rects[idx].height = height;
 8001d8a:	89fa      	ldrh	r2, [r7, #14]
 8001d8c:	490c      	ldr	r1, [pc, #48]	@ (8001dc0 <lcd_update_rectangle+0x80>)
 8001d8e:	4613      	mov	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	440b      	add	r3, r1
 8001d98:	330c      	adds	r3, #12
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	601a      	str	r2, [r3, #0]
	rects[idx].color = color;
 8001d9e:	89fa      	ldrh	r2, [r7, #14]
 8001da0:	4907      	ldr	r1, [pc, #28]	@ (8001dc0 <lcd_update_rectangle+0x80>)
 8001da2:	4613      	mov	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	440b      	add	r3, r1
 8001dac:	3310      	adds	r3, #16
 8001dae:	8bba      	ldrh	r2, [r7, #28]
 8001db0:	801a      	strh	r2, [r3, #0]
}
 8001db2:	bf00      	nop
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	2000030c 	.word	0x2000030c

08001dc4 <lcd_update_circle>:
void lcd_update_circle(int x,int y,int radius,uint16_t color){
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
 8001dd0:	807b      	strh	r3, [r7, #2]
	player.x = x;
 8001dd2:	4a09      	ldr	r2, [pc, #36]	@ (8001df8 <lcd_update_circle+0x34>)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6013      	str	r3, [r2, #0]
	player.y = y;
 8001dd8:	4a07      	ldr	r2, [pc, #28]	@ (8001df8 <lcd_update_circle+0x34>)
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	6053      	str	r3, [r2, #4]
	player.radius = radius;
 8001dde:	4a06      	ldr	r2, [pc, #24]	@ (8001df8 <lcd_update_circle+0x34>)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6093      	str	r3, [r2, #8]
	player.color = color;
 8001de4:	4a04      	ldr	r2, [pc, #16]	@ (8001df8 <lcd_update_circle+0x34>)
 8001de6:	887b      	ldrh	r3, [r7, #2]
 8001de8:	8193      	strh	r3, [r2, #12]
}
 8001dea:	bf00      	nop
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	200003d4 	.word	0x200003d4

08001dfc <lcd_put_pixel>:

void lcd_put_pixel(int x, int y, uint16_t color){
 8001dfc:	b480      	push	{r7}
 8001dfe:	b087      	sub	sp, #28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	4613      	mov	r3, r2
 8001e08:	80fb      	strh	r3, [r7, #6]
	screen_buffer[ (LCD_WIDTH*y) + x] = __REV16(color); //to make send most significant bit first
 8001e0a:	88fb      	ldrh	r3, [r7, #6]
 8001e0c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	ba5b      	rev16	r3, r3
 8001e12:	613b      	str	r3, [r7, #16]
  return result;
 8001e14:	6939      	ldr	r1, [r7, #16]
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	011b      	lsls	r3, r3, #4
 8001e1c:	1a9b      	subs	r3, r3, r2
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	461a      	mov	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4413      	add	r3, r2
 8001e26:	b289      	uxth	r1, r1
 8001e28:	4a04      	ldr	r2, [pc, #16]	@ (8001e3c <lcd_put_pixel+0x40>)
 8001e2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8001e2e:	bf00      	nop
 8001e30:	371c      	adds	r7, #28
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	200003e4 	.word	0x200003e4

08001e40 <lcd_put_rect_to_buffer>:
static void lcd_put_rect_to_buffer(Rectangle rect){
 8001e40:	b084      	sub	sp, #16
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	f107 0c10 	add.w	ip, r7, #16
 8001e4c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for(int y=rect.y;y<rect.y+rect.height;y++){
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	e021      	b.n	8001e9a <lcd_put_rect_to_buffer+0x5a>
		for(int x=rect.x;x<rect.x+rect.width;x++){
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	603b      	str	r3, [r7, #0]
 8001e5a:	e015      	b.n	8001e88 <lcd_put_rect_to_buffer+0x48>
			if(x>=0 && x<LCD_WIDTH && y>=0 && y<LCD_HEIGHT){
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	db0f      	blt.n	8001e82 <lcd_put_rect_to_buffer+0x42>
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	2bef      	cmp	r3, #239	@ 0xef
 8001e66:	dc0c      	bgt.n	8001e82 <lcd_put_rect_to_buffer+0x42>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	db09      	blt.n	8001e82 <lcd_put_rect_to_buffer+0x42>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001e74:	da05      	bge.n	8001e82 <lcd_put_rect_to_buffer+0x42>
				lcd_put_pixel(x, y, rect.color);
 8001e76:	8c3b      	ldrh	r3, [r7, #32]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	6838      	ldr	r0, [r7, #0]
 8001e7e:	f7ff ffbd 	bl	8001dfc <lcd_put_pixel>
		for(int x=rect.x;x<rect.x+rect.width;x++){
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	3301      	adds	r3, #1
 8001e86:	603b      	str	r3, [r7, #0]
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	dbe3      	blt.n	8001e5c <lcd_put_rect_to_buffer+0x1c>
	for(int y=rect.y;y<rect.y+rect.height;y++){
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3301      	adds	r3, #1
 8001e98:	607b      	str	r3, [r7, #4]
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	dbd7      	blt.n	8001e56 <lcd_put_rect_to_buffer+0x16>
			}
		}
	}
}
 8001ea6:	bf00      	nop
 8001ea8:	bf00      	nop
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001eb2:	b004      	add	sp, #16
 8001eb4:	4770      	bx	lr
	...

08001eb8 <lcd_put_circ_to_buffer>:
static void lcd_put_circ_to_buffer(Circle circle){
 8001eb8:	b5b0      	push	{r4, r5, r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	463c      	mov	r4, r7
 8001ec0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for(int y=circle.y-circle.radius;y<circle.y+circle.radius;y++){
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	e060      	b.n	8001f90 <lcd_put_circ_to_buffer+0xd8>
		for(int x=circle.x-circle.radius;x<circle.x+circle.radius;x++){
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	e052      	b.n	8001f7e <lcd_put_circ_to_buffer+0xc6>
			if(x>=0 && x<LCD_WIDTH && y>=0 && y<LCD_HEIGHT){
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	db4c      	blt.n	8001f78 <lcd_put_circ_to_buffer+0xc0>
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	2bef      	cmp	r3, #239	@ 0xef
 8001ee2:	dc49      	bgt.n	8001f78 <lcd_put_circ_to_buffer+0xc0>
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	db46      	blt.n	8001f78 <lcd_put_circ_to_buffer+0xc0>
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001ef0:	da42      	bge.n	8001f78 <lcd_put_circ_to_buffer+0xc0>
				if ((pow(x - circle.x, 2) + pow(y - circle.y, 2)) <= pow(circle.radius, 2)){
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7fe fb23 	bl	8000544 <__aeabi_i2d>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	ed9f 1b29 	vldr	d1, [pc, #164]	@ 8001fa8 <lcd_put_circ_to_buffer+0xf0>
 8001f06:	ec43 2b10 	vmov	d0, r2, r3
 8001f0a:	f00b fc7b 	bl	800d804 <pow>
 8001f0e:	ec55 4b10 	vmov	r4, r5, d0
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7fe fb13 	bl	8000544 <__aeabi_i2d>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8001fa8 <lcd_put_circ_to_buffer+0xf0>
 8001f26:	ec43 2b10 	vmov	d0, r2, r3
 8001f2a:	f00b fc6b 	bl	800d804 <pow>
 8001f2e:	ec53 2b10 	vmov	r2, r3, d0
 8001f32:	4620      	mov	r0, r4
 8001f34:	4629      	mov	r1, r5
 8001f36:	f7fe f9b9 	bl	80002ac <__adddf3>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4614      	mov	r4, r2
 8001f40:	461d      	mov	r5, r3
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe fafd 	bl	8000544 <__aeabi_i2d>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	ed9f 1b16 	vldr	d1, [pc, #88]	@ 8001fa8 <lcd_put_circ_to_buffer+0xf0>
 8001f52:	ec43 2b10 	vmov	d0, r2, r3
 8001f56:	f00b fc55 	bl	800d804 <pow>
 8001f5a:	ec53 2b10 	vmov	r2, r3, d0
 8001f5e:	4620      	mov	r0, r4
 8001f60:	4629      	mov	r1, r5
 8001f62:	f7fe fdd5 	bl	8000b10 <__aeabi_dcmple>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <lcd_put_circ_to_buffer+0xc0>
					lcd_put_pixel(x, y, circle.color);
 8001f6c:	89bb      	ldrh	r3, [r7, #12]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	6979      	ldr	r1, [r7, #20]
 8001f72:	6938      	ldr	r0, [r7, #16]
 8001f74:	f7ff ff42 	bl	8001dfc <lcd_put_pixel>
		for(int x=circle.x-circle.radius;x<circle.x+circle.radius;x++){
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	4413      	add	r3, r2
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	dba6      	blt.n	8001ed8 <lcd_put_circ_to_buffer+0x20>
	for(int y=circle.y-circle.radius;y<circle.y+circle.radius;y++){
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	4413      	add	r3, r2
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	db98      	blt.n	8001ece <lcd_put_circ_to_buffer+0x16>
				}
			}
		}
	}
}
 8001f9c:	bf00      	nop
 8001f9e:	bf00      	nop
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bdb0      	pop	{r4, r5, r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	00000000 	.word	0x00000000
 8001fac:	40000000 	.word	0x40000000

08001fb0 <put_figures_to_buffer>:
static void put_figures_to_buffer(void){
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af02      	add	r7, sp, #8
	for(int i=0;i<RECTS_AMOUNT;i++){
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	607b      	str	r3, [r7, #4]
 8001fba:	e00e      	b.n	8001fda <put_figures_to_buffer+0x2a>
		lcd_put_rect_to_buffer(rects[i]);
 8001fbc:	490c      	ldr	r1, [pc, #48]	@ (8001ff0 <put_figures_to_buffer+0x40>)
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	9200      	str	r2, [sp, #0]
 8001fce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fd0:	f7ff ff36 	bl	8001e40 <lcd_put_rect_to_buffer>
	for(int i=0;i<RECTS_AMOUNT;i++){
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	607b      	str	r3, [r7, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b09      	cmp	r3, #9
 8001fde:	dded      	ble.n	8001fbc <put_figures_to_buffer+0xc>
	}
	lcd_put_circ_to_buffer(player);
 8001fe0:	4b04      	ldr	r3, [pc, #16]	@ (8001ff4 <put_figures_to_buffer+0x44>)
 8001fe2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fe4:	f7ff ff68 	bl	8001eb8 <lcd_put_circ_to_buffer>
}
 8001fe8:	bf00      	nop
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	2000030c 	.word	0x2000030c
 8001ff4:	200003d4 	.word	0x200003d4

08001ff8 <lcd_update>:
void lcd_update(void){
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
	put_figures_to_buffer();
 8001ffc:	f7ff ffd8 	bl	8001fb0 <put_figures_to_buffer>

	current_chunk = 0;
 8002000:	4b20      	ldr	r3, [pc, #128]	@ (8002084 <lcd_update+0x8c>)
 8002002:	2200      	movs	r2, #0
 8002004:	801a      	strh	r2, [r3, #0]
	lcd_set_window(0, current_chunk*y_per_chunk, LCD_WIDTH, LCD_HEIGHT/how_many_chunks);
 8002006:	4b1f      	ldr	r3, [pc, #124]	@ (8002084 <lcd_update+0x8c>)
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	4b1e      	ldr	r3, [pc, #120]	@ (8002088 <lcd_update+0x90>)
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	fb03 f102 	mul.w	r1, r3, r2
 8002014:	4b1d      	ldr	r3, [pc, #116]	@ (800208c <lcd_update+0x94>)
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	461a      	mov	r2, r3
 800201a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800201e:	fb93 f3f2 	sdiv	r3, r3, r2
 8002022:	22f0      	movs	r2, #240	@ 0xf0
 8002024:	2000      	movs	r0, #0
 8002026:	f7ff fe59 	bl	8001cdc <lcd_set_window>
	lcd_cmd(MEM_WRITE);
 800202a:	202c      	movs	r0, #44	@ 0x2c
 800202c:	f7ff fd7c 	bl	8001b28 <lcd_cmd>
	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_SET);
 8002030:	2201      	movs	r2, #1
 8002032:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002036:	4816      	ldr	r0, [pc, #88]	@ (8002090 <lcd_update+0x98>)
 8002038:	f001 fff8 	bl	800402c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 800203c:	2200      	movs	r2, #0
 800203e:	2104      	movs	r1, #4
 8002040:	4814      	ldr	r0, [pc, #80]	@ (8002094 <lcd_update+0x9c>)
 8002042:	f001 fff3 	bl	800402c <HAL_GPIO_WritePin>

	if (!spi5_acquire()) return;
 8002046:	f000 fbf5 	bl	8002834 <spi5_acquire>
 800204a:	4603      	mov	r3, r0
 800204c:	f083 0301 	eor.w	r3, r3, #1
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d114      	bne.n	8002080 <lcd_update+0x88>

	HAL_SPI_Transmit_DMA(&hspi5, (uint8_t*)(screen_buffer + (current_chunk * chunk_size)), 2*chunk_size);
 8002056:	4b0b      	ldr	r3, [pc, #44]	@ (8002084 <lcd_update+0x8c>)
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	4b0e      	ldr	r3, [pc, #56]	@ (8002098 <lcd_update+0xa0>)
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	fb02 f303 	mul.w	r3, r2, r3
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	4a0d      	ldr	r2, [pc, #52]	@ (800209c <lcd_update+0xa4>)
 8002068:	1899      	adds	r1, r3, r2
 800206a:	4b0b      	ldr	r3, [pc, #44]	@ (8002098 <lcd_update+0xa0>)
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	b29b      	uxth	r3, r3
 8002072:	461a      	mov	r2, r3
 8002074:	480a      	ldr	r0, [pc, #40]	@ (80020a0 <lcd_update+0xa8>)
 8002076:	f005 fe0f 	bl	8007c98 <HAL_SPI_Transmit_DMA>

	spi5_release();
 800207a:	f000 fbef 	bl	800285c <spi5_release>
 800207e:	e000      	b.n	8002082 <lcd_update+0x8a>
	if (!spi5_acquire()) return;
 8002080:	bf00      	nop
}
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20025be4 	.word	0x20025be4
 8002088:	20025be8 	.word	0x20025be8
 800208c:	20000000 	.word	0x20000000
 8002090:	40020c00 	.word	0x40020c00
 8002094:	40020800 	.word	0x40020800
 8002098:	20025be6 	.word	0x20025be6
 800209c:	200003e4 	.word	0x200003e4
 80020a0:	20025ca4 	.word	0x20025ca4

080020a4 <lcd_transfer_done>:
void lcd_transfer_done(void){
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_SET);
 80020a8:	2201      	movs	r2, #1
 80020aa:	2104      	movs	r1, #4
 80020ac:	4802      	ldr	r0, [pc, #8]	@ (80020b8 <lcd_transfer_done+0x14>)
 80020ae:	f001 ffbd 	bl	800402c <HAL_GPIO_WritePin>
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40020800 	.word	0x40020800

080020bc <send_next_chunk>:
bool lcd_is_busy(void){
	if (HAL_SPI_GetState(&hspi5) == HAL_SPI_STATE_BUSY) return true;
	else return false;
}
static void send_next_chunk(void){
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
	lcd_set_window(0, current_chunk*y_per_chunk, LCD_WIDTH, LCD_HEIGHT/how_many_chunks);
 80020c0:	4b20      	ldr	r3, [pc, #128]	@ (8002144 <send_next_chunk+0x88>)
 80020c2:	881b      	ldrh	r3, [r3, #0]
 80020c4:	461a      	mov	r2, r3
 80020c6:	4b20      	ldr	r3, [pc, #128]	@ (8002148 <send_next_chunk+0x8c>)
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	fb03 f102 	mul.w	r1, r3, r2
 80020ce:	4b1f      	ldr	r3, [pc, #124]	@ (800214c <send_next_chunk+0x90>)
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	461a      	mov	r2, r3
 80020d4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80020d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80020dc:	22f0      	movs	r2, #240	@ 0xf0
 80020de:	2000      	movs	r0, #0
 80020e0:	f7ff fdfc 	bl	8001cdc <lcd_set_window>
	lcd_cmd(MEM_WRITE);
 80020e4:	202c      	movs	r0, #44	@ 0x2c
 80020e6:	f7ff fd1f 	bl	8001b28 <lcd_cmd>
	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_SET);
 80020ea:	2201      	movs	r2, #1
 80020ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020f0:	4817      	ldr	r0, [pc, #92]	@ (8002150 <send_next_chunk+0x94>)
 80020f2:	f001 ff9b 	bl	800402c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 80020f6:	2200      	movs	r2, #0
 80020f8:	2104      	movs	r1, #4
 80020fa:	4816      	ldr	r0, [pc, #88]	@ (8002154 <send_next_chunk+0x98>)
 80020fc:	f001 ff96 	bl	800402c <HAL_GPIO_WritePin>
	lcd_ready = false;
 8002100:	4b15      	ldr	r3, [pc, #84]	@ (8002158 <send_next_chunk+0x9c>)
 8002102:	2200      	movs	r2, #0
 8002104:	701a      	strb	r2, [r3, #0]
	if (!spi5_acquire()) return;
 8002106:	f000 fb95 	bl	8002834 <spi5_acquire>
 800210a:	4603      	mov	r3, r0
 800210c:	f083 0301 	eor.w	r3, r3, #1
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d114      	bne.n	8002140 <send_next_chunk+0x84>
	HAL_SPI_Transmit_DMA(&hspi5, (uint8_t*)(screen_buffer + (current_chunk * chunk_size)), 2*chunk_size);
 8002116:	4b0b      	ldr	r3, [pc, #44]	@ (8002144 <send_next_chunk+0x88>)
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	4b0f      	ldr	r3, [pc, #60]	@ (800215c <send_next_chunk+0xa0>)
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	fb02 f303 	mul.w	r3, r2, r3
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	4a0e      	ldr	r2, [pc, #56]	@ (8002160 <send_next_chunk+0xa4>)
 8002128:	1899      	adds	r1, r3, r2
 800212a:	4b0c      	ldr	r3, [pc, #48]	@ (800215c <send_next_chunk+0xa0>)
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	b29b      	uxth	r3, r3
 8002132:	461a      	mov	r2, r3
 8002134:	480b      	ldr	r0, [pc, #44]	@ (8002164 <send_next_chunk+0xa8>)
 8002136:	f005 fdaf 	bl	8007c98 <HAL_SPI_Transmit_DMA>

	spi5_release();
 800213a:	f000 fb8f 	bl	800285c <spi5_release>
 800213e:	e000      	b.n	8002142 <send_next_chunk+0x86>
	if (!spi5_acquire()) return;
 8002140:	bf00      	nop
}
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20025be4 	.word	0x20025be4
 8002148:	20025be8 	.word	0x20025be8
 800214c:	20000000 	.word	0x20000000
 8002150:	40020c00 	.word	0x40020c00
 8002154:	40020800 	.word	0x40020800
 8002158:	20000002 	.word	0x20000002
 800215c:	20025be6 	.word	0x20025be6
 8002160:	200003e4 	.word	0x200003e4
 8002164:	20025ca4 	.word	0x20025ca4

08002168 <go_for_next_chunk>:
void go_for_next_chunk(void){
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
	current_chunk++;
 800216c:	4b0a      	ldr	r3, [pc, #40]	@ (8002198 <go_for_next_chunk+0x30>)
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	3301      	adds	r3, #1
 8002172:	b29a      	uxth	r2, r3
 8002174:	4b08      	ldr	r3, [pc, #32]	@ (8002198 <go_for_next_chunk+0x30>)
 8002176:	801a      	strh	r2, [r3, #0]
	if (current_chunk < how_many_chunks) {
 8002178:	4b07      	ldr	r3, [pc, #28]	@ (8002198 <go_for_next_chunk+0x30>)
 800217a:	881a      	ldrh	r2, [r3, #0]
 800217c:	4b07      	ldr	r3, [pc, #28]	@ (800219c <go_for_next_chunk+0x34>)
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d202      	bcs.n	800218a <go_for_next_chunk+0x22>
		send_next_chunk();
 8002184:	f7ff ff9a 	bl	80020bc <send_next_chunk>
	}
	else {
		lcd_ready=true;
		lcd_transfer_done();
	}
}
 8002188:	e004      	b.n	8002194 <go_for_next_chunk+0x2c>
		lcd_ready=true;
 800218a:	4b05      	ldr	r3, [pc, #20]	@ (80021a0 <go_for_next_chunk+0x38>)
 800218c:	2201      	movs	r2, #1
 800218e:	701a      	strb	r2, [r3, #0]
		lcd_transfer_done();
 8002190:	f7ff ff88 	bl	80020a4 <lcd_transfer_done>
}
 8002194:	bf00      	nop
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20025be4 	.word	0x20025be4
 800219c:	20000000 	.word	0x20000000
 80021a0:	20000002 	.word	0x20000002

080021a4 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08e      	sub	sp, #56	@ 0x38
 80021a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80021aa:	1d3b      	adds	r3, r7, #4
 80021ac:	2234      	movs	r2, #52	@ 0x34
 80021ae:	2100      	movs	r1, #0
 80021b0:	4618      	mov	r0, r3
 80021b2:	f009 fd4b 	bl	800bc4c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80021b6:	4b39      	ldr	r3, [pc, #228]	@ (800229c <MX_LTDC_Init+0xf8>)
 80021b8:	4a39      	ldr	r2, [pc, #228]	@ (80022a0 <MX_LTDC_Init+0xfc>)
 80021ba:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80021bc:	4b37      	ldr	r3, [pc, #220]	@ (800229c <MX_LTDC_Init+0xf8>)
 80021be:	2200      	movs	r2, #0
 80021c0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80021c2:	4b36      	ldr	r3, [pc, #216]	@ (800229c <MX_LTDC_Init+0xf8>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80021c8:	4b34      	ldr	r3, [pc, #208]	@ (800229c <MX_LTDC_Init+0xf8>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80021ce:	4b33      	ldr	r3, [pc, #204]	@ (800229c <MX_LTDC_Init+0xf8>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80021d4:	4b31      	ldr	r3, [pc, #196]	@ (800229c <MX_LTDC_Init+0xf8>)
 80021d6:	2209      	movs	r2, #9
 80021d8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80021da:	4b30      	ldr	r3, [pc, #192]	@ (800229c <MX_LTDC_Init+0xf8>)
 80021dc:	2201      	movs	r2, #1
 80021de:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80021e0:	4b2e      	ldr	r3, [pc, #184]	@ (800229c <MX_LTDC_Init+0xf8>)
 80021e2:	221d      	movs	r2, #29
 80021e4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80021e6:	4b2d      	ldr	r3, [pc, #180]	@ (800229c <MX_LTDC_Init+0xf8>)
 80021e8:	2203      	movs	r2, #3
 80021ea:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80021ec:	4b2b      	ldr	r3, [pc, #172]	@ (800229c <MX_LTDC_Init+0xf8>)
 80021ee:	f240 120d 	movw	r2, #269	@ 0x10d
 80021f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80021f4:	4b29      	ldr	r3, [pc, #164]	@ (800229c <MX_LTDC_Init+0xf8>)
 80021f6:	f240 1243 	movw	r2, #323	@ 0x143
 80021fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 80021fc:	4b27      	ldr	r3, [pc, #156]	@ (800229c <MX_LTDC_Init+0xf8>)
 80021fe:	f240 1217 	movw	r2, #279	@ 0x117
 8002202:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 8002204:	4b25      	ldr	r3, [pc, #148]	@ (800229c <MX_LTDC_Init+0xf8>)
 8002206:	f240 1247 	movw	r2, #327	@ 0x147
 800220a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800220c:	4b23      	ldr	r3, [pc, #140]	@ (800229c <MX_LTDC_Init+0xf8>)
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002214:	4b21      	ldr	r3, [pc, #132]	@ (800229c <MX_LTDC_Init+0xf8>)
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800221c:	4b1f      	ldr	r3, [pc, #124]	@ (800229c <MX_LTDC_Init+0xf8>)
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002224:	481d      	ldr	r0, [pc, #116]	@ (800229c <MX_LTDC_Init+0xf8>)
 8002226:	f003 fe81 	bl	8005f2c <HAL_LTDC_Init>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8002230:	f000 fafa 	bl	8002828 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8002238:	23f0      	movs	r3, #240	@ 0xf0
 800223a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800223c:	2300      	movs	r3, #0
 800223e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8002240:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002244:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002246:	2302      	movs	r3, #2
 8002248:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800224a:	23ff      	movs	r3, #255	@ 0xff
 800224c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002252:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002256:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002258:	2307      	movs	r3, #7
 800225a:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800225c:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8002260:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 8002262:	23f0      	movs	r3, #240	@ 0xf0
 8002264:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 8002266:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800226a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002272:	2300      	movs	r3, #0
 8002274:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800227e:	1d3b      	adds	r3, r7, #4
 8002280:	2200      	movs	r2, #0
 8002282:	4619      	mov	r1, r3
 8002284:	4805      	ldr	r0, [pc, #20]	@ (800229c <MX_LTDC_Init+0xf8>)
 8002286:	f003 ffe3 	bl	8006250 <HAL_LTDC_ConfigLayer>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8002290:	f000 faca 	bl	8002828 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002294:	bf00      	nop
 8002296:	3738      	adds	r7, #56	@ 0x38
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20025bec 	.word	0x20025bec
 80022a0:	40016800 	.word	0x40016800

080022a4 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b09a      	sub	sp, #104	@ 0x68
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022c0:	2230      	movs	r2, #48	@ 0x30
 80022c2:	2100      	movs	r1, #0
 80022c4:	4618      	mov	r0, r3
 80022c6:	f009 fcc1 	bl	800bc4c <memset>
  if(ltdcHandle->Instance==LTDC)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a85      	ldr	r2, [pc, #532]	@ (80024e4 <HAL_LTDC_MspInit+0x240>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	f040 8102 	bne.w	80024da <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80022d6:	2308      	movs	r3, #8
 80022d8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80022da:	2332      	movs	r3, #50	@ 0x32
 80022dc:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80022de:	2302      	movs	r3, #2
 80022e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80022e2:	2300      	movs	r3, #0
 80022e4:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022ea:	4618      	mov	r0, r3
 80022ec:	f004 fe50 	bl	8006f90 <HAL_RCCEx_PeriphCLKConfig>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80022f6:	f000 fa97 	bl	8002828 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	623b      	str	r3, [r7, #32]
 80022fe:	4b7a      	ldr	r3, [pc, #488]	@ (80024e8 <HAL_LTDC_MspInit+0x244>)
 8002300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002302:	4a79      	ldr	r2, [pc, #484]	@ (80024e8 <HAL_LTDC_MspInit+0x244>)
 8002304:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002308:	6453      	str	r3, [r2, #68]	@ 0x44
 800230a:	4b77      	ldr	r3, [pc, #476]	@ (80024e8 <HAL_LTDC_MspInit+0x244>)
 800230c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002312:	623b      	str	r3, [r7, #32]
 8002314:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
 800231a:	4b73      	ldr	r3, [pc, #460]	@ (80024e8 <HAL_LTDC_MspInit+0x244>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231e:	4a72      	ldr	r2, [pc, #456]	@ (80024e8 <HAL_LTDC_MspInit+0x244>)
 8002320:	f043 0320 	orr.w	r3, r3, #32
 8002324:	6313      	str	r3, [r2, #48]	@ 0x30
 8002326:	4b70      	ldr	r3, [pc, #448]	@ (80024e8 <HAL_LTDC_MspInit+0x244>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232a:	f003 0320 	and.w	r3, r3, #32
 800232e:	61fb      	str	r3, [r7, #28]
 8002330:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	61bb      	str	r3, [r7, #24]
 8002336:	4b6c      	ldr	r3, [pc, #432]	@ (80024e8 <HAL_LTDC_MspInit+0x244>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233a:	4a6b      	ldr	r2, [pc, #428]	@ (80024e8 <HAL_LTDC_MspInit+0x244>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6313      	str	r3, [r2, #48]	@ 0x30
 8002342:	4b69      	ldr	r3, [pc, #420]	@ (80024e8 <HAL_LTDC_MspInit+0x244>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	61bb      	str	r3, [r7, #24]
 800234c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
 8002352:	4b65      	ldr	r3, [pc, #404]	@ (80024e8 <HAL_LTDC_MspInit+0x244>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002356:	4a64      	ldr	r2, [pc, #400]	@ (80024e8 <HAL_LTDC_MspInit+0x244>)
 8002358:	f043 0302 	orr.w	r3, r3, #2
 800235c:	6313      	str	r3, [r2, #48]	@ 0x30
 800235e:	4b62      	ldr	r3, [pc, #392]	@ (80024e8 <HAL_LTDC_MspInit+0x244>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	617b      	str	r3, [r7, #20]
 8002368:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	4b5e      	ldr	r3, [pc, #376]	@ (80024e8 <HAL_LTDC_MspInit+0x244>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	4a5d      	ldr	r2, [pc, #372]	@ (80024e8 <HAL_LTDC_MspInit+0x244>)
 8002374:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002378:	6313      	str	r3, [r2, #48]	@ 0x30
 800237a:	4b5b      	ldr	r3, [pc, #364]	@ (80024e8 <HAL_LTDC_MspInit+0x244>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002382:	613b      	str	r3, [r7, #16]
 8002384:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	4b57      	ldr	r3, [pc, #348]	@ (80024e8 <HAL_LTDC_MspInit+0x244>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	4a56      	ldr	r2, [pc, #344]	@ (80024e8 <HAL_LTDC_MspInit+0x244>)
 8002390:	f043 0304 	orr.w	r3, r3, #4
 8002394:	6313      	str	r3, [r2, #48]	@ 0x30
 8002396:	4b54      	ldr	r3, [pc, #336]	@ (80024e8 <HAL_LTDC_MspInit+0x244>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	4b50      	ldr	r3, [pc, #320]	@ (80024e8 <HAL_LTDC_MspInit+0x244>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023aa:	4a4f      	ldr	r2, [pc, #316]	@ (80024e8 <HAL_LTDC_MspInit+0x244>)
 80023ac:	f043 0308 	orr.w	r3, r3, #8
 80023b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023b2:	4b4d      	ldr	r3, [pc, #308]	@ (80024e8 <HAL_LTDC_MspInit+0x244>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80023be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023c2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c4:	2302      	movs	r3, #2
 80023c6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023cc:	2300      	movs	r3, #0
 80023ce:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80023d0:	230e      	movs	r3, #14
 80023d2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80023d4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80023d8:	4619      	mov	r1, r3
 80023da:	4844      	ldr	r0, [pc, #272]	@ (80024ec <HAL_LTDC_MspInit+0x248>)
 80023dc:	f001 fc7a 	bl	8003cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80023e0:	f641 0358 	movw	r3, #6232	@ 0x1858
 80023e4:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e6:	2302      	movs	r3, #2
 80023e8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ee:	2300      	movs	r3, #0
 80023f0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80023f2:	230e      	movs	r3, #14
 80023f4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80023fa:	4619      	mov	r1, r3
 80023fc:	483c      	ldr	r0, [pc, #240]	@ (80024f0 <HAL_LTDC_MspInit+0x24c>)
 80023fe:	f001 fc69 	bl	8003cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002402:	2303      	movs	r3, #3
 8002404:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002406:	2302      	movs	r3, #2
 8002408:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240a:	2300      	movs	r3, #0
 800240c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240e:	2300      	movs	r3, #0
 8002410:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002412:	2309      	movs	r3, #9
 8002414:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002416:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800241a:	4619      	mov	r1, r3
 800241c:	4835      	ldr	r0, [pc, #212]	@ (80024f4 <HAL_LTDC_MspInit+0x250>)
 800241e:	f001 fc59 	bl	8003cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002422:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002426:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002428:	2302      	movs	r3, #2
 800242a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242c:	2300      	movs	r3, #0
 800242e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002430:	2300      	movs	r3, #0
 8002432:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002434:	230e      	movs	r3, #14
 8002436:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002438:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800243c:	4619      	mov	r1, r3
 800243e:	482d      	ldr	r0, [pc, #180]	@ (80024f4 <HAL_LTDC_MspInit+0x250>)
 8002440:	f001 fc48 	bl	8003cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002444:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002448:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244a:	2302      	movs	r3, #2
 800244c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244e:	2300      	movs	r3, #0
 8002450:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002452:	2300      	movs	r3, #0
 8002454:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002456:	230e      	movs	r3, #14
 8002458:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800245a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800245e:	4619      	mov	r1, r3
 8002460:	4825      	ldr	r0, [pc, #148]	@ (80024f8 <HAL_LTDC_MspInit+0x254>)
 8002462:	f001 fc37 	bl	8003cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002466:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800246a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246c:	2302      	movs	r3, #2
 800246e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002474:	2300      	movs	r3, #0
 8002476:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002478:	230e      	movs	r3, #14
 800247a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800247c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002480:	4619      	mov	r1, r3
 8002482:	481e      	ldr	r0, [pc, #120]	@ (80024fc <HAL_LTDC_MspInit+0x258>)
 8002484:	f001 fc26 	bl	8003cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2D6_Pin;
 8002488:	2348      	movs	r3, #72	@ 0x48
 800248a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248c:	2302      	movs	r3, #2
 800248e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002490:	2300      	movs	r3, #0
 8002492:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002494:	2300      	movs	r3, #0
 8002496:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002498:	230e      	movs	r3, #14
 800249a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800249c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024a0:	4619      	mov	r1, r3
 80024a2:	4817      	ldr	r0, [pc, #92]	@ (8002500 <HAL_LTDC_MspInit+0x25c>)
 80024a4:	f001 fc16 	bl	8003cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80024a8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80024ac:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ae:	2302      	movs	r3, #2
 80024b0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b6:	2300      	movs	r3, #0
 80024b8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80024ba:	2309      	movs	r3, #9
 80024bc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024be:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024c2:	4619      	mov	r1, r3
 80024c4:	480c      	ldr	r0, [pc, #48]	@ (80024f8 <HAL_LTDC_MspInit+0x254>)
 80024c6:	f001 fc05 	bl	8003cd4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80024ca:	2200      	movs	r2, #0
 80024cc:	2105      	movs	r1, #5
 80024ce:	2058      	movs	r0, #88	@ 0x58
 80024d0:	f000 fe5e 	bl	8003190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80024d4:	2058      	movs	r0, #88	@ 0x58
 80024d6:	f000 fe77 	bl	80031c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80024da:	bf00      	nop
 80024dc:	3768      	adds	r7, #104	@ 0x68
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40016800 	.word	0x40016800
 80024e8:	40023800 	.word	0x40023800
 80024ec:	40021400 	.word	0x40021400
 80024f0:	40020000 	.word	0x40020000
 80024f4:	40020400 	.word	0x40020400
 80024f8:	40021800 	.word	0x40021800
 80024fc:	40020800 	.word	0x40020800
 8002500:	40020c00 	.word	0x40020c00

08002504 <HAL_SPI_TxCpltCallback>:
		clicked=0;
	}
}


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi5){
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a0b      	ldr	r2, [pc, #44]	@ (800253c <HAL_SPI_TxCpltCallback+0x38>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d10e      	bne.n	8002532 <HAL_SPI_TxCpltCallback+0x2e>
	 go_for_next_chunk();
 8002514:	f7ff fe28 	bl	8002168 <go_for_next_chunk>
		 if(lcd_ready){
 8002518:	4b09      	ldr	r3, [pc, #36]	@ (8002540 <HAL_SPI_TxCpltCallback+0x3c>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d007      	beq.n	8002532 <HAL_SPI_TxCpltCallback+0x2e>
			 printf("LCD ready\r\n");
 8002522:	4808      	ldr	r0, [pc, #32]	@ (8002544 <HAL_SPI_TxCpltCallback+0x40>)
 8002524:	f009 fab2 	bl	800ba8c <puts>
			 gyro_get_filtered_data(&gyro_x, &gyro_y, &gyro_z);
 8002528:	4a07      	ldr	r2, [pc, #28]	@ (8002548 <HAL_SPI_TxCpltCallback+0x44>)
 800252a:	4908      	ldr	r1, [pc, #32]	@ (800254c <HAL_SPI_TxCpltCallback+0x48>)
 800252c:	4808      	ldr	r0, [pc, #32]	@ (8002550 <HAL_SPI_TxCpltCallback+0x4c>)
 800252e:	f7ff f865 	bl	80015fc <gyro_get_filtered_data>
		 }
	}
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20025ca4 	.word	0x20025ca4
 8002540:	20000002 	.word	0x20000002
 8002544:	0800e788 	.word	0x0800e788
 8002548:	20025c98 	.word	0x20025c98
 800254c:	20025c96 	.word	0x20025c96
 8002550:	20025c94 	.word	0x20025c94

08002554 <set_new_figs>:

void set_new_figs(void){
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af02      	add	r7, sp, #8
	lcd_update_rectangle(0, 0, 0, 100, 100, RED);
 800255a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800255e:	9301      	str	r3, [sp, #4]
 8002560:	2364      	movs	r3, #100	@ 0x64
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	2364      	movs	r3, #100	@ 0x64
 8002566:	2200      	movs	r2, #0
 8002568:	2100      	movs	r1, #0
 800256a:	2000      	movs	r0, #0
 800256c:	f7ff fbe8 	bl	8001d40 <lcd_update_rectangle>
	lcd_update_circle(100, 100, 20, GREEN);
 8002570:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002574:	2214      	movs	r2, #20
 8002576:	2164      	movs	r1, #100	@ 0x64
 8002578:	2064      	movs	r0, #100	@ 0x64
 800257a:	f7ff fc23 	bl	8001dc4 <lcd_update_circle>
}
 800257e:	bf00      	nop
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002584:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002588:	b08a      	sub	sp, #40	@ 0x28
 800258a:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800258c:	f000 fce2 	bl	8002f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002590:	f000 f8ce 	bl	8002730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002594:	f7fe fe9a 	bl	80012cc <MX_GPIO_Init>
  MX_DMA_Init();
 8002598:	f7fe fd32 	bl	8001000 <MX_DMA_Init>
  MX_CRC_Init();
 800259c:	f7fe fcfa 	bl	8000f94 <MX_CRC_Init>
  MX_DMA2D_Init();
 80025a0:	f7fe fd4e 	bl	8001040 <MX_DMA2D_Init>
  MX_FMC_Init();
 80025a4:	f7fe fda6 	bl	80010f4 <MX_FMC_Init>
  MX_I2C3_Init();
 80025a8:	f7ff fa14 	bl	80019d4 <MX_I2C3_Init>
  MX_LTDC_Init();
 80025ac:	f7ff fdfa 	bl	80021a4 <MX_LTDC_Init>
  MX_SPI5_Init();
 80025b0:	f000 f960 	bl	8002874 <MX_SPI5_Init>
  MX_TIM1_Init();
 80025b4:	f000 fbc0 	bl	8002d38 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80025b8:	f000 fc30 	bl	8002e1c <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


 lcd_init();
 80025bc:	f7ff fb3a 	bl	8001c34 <lcd_init>
  for (int y = 0; y < LCD_HEIGHT; y++) {
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	e010      	b.n	80025e8 <main+0x64>
    for (int x = 0; x < LCD_WIDTH; x++) {
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	e007      	b.n	80025dc <main+0x58>
      lcd_put_pixel(x, y, BLUE);
 80025cc:	221f      	movs	r2, #31
 80025ce:	6979      	ldr	r1, [r7, #20]
 80025d0:	6938      	ldr	r0, [r7, #16]
 80025d2:	f7ff fc13 	bl	8001dfc <lcd_put_pixel>
    for (int x = 0; x < LCD_WIDTH; x++) {
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	3301      	adds	r3, #1
 80025da:	613b      	str	r3, [r7, #16]
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	2bef      	cmp	r3, #239	@ 0xef
 80025e0:	ddf4      	ble.n	80025cc <main+0x48>
  for (int y = 0; y < LCD_HEIGHT; y++) {
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	3301      	adds	r3, #1
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80025ee:	dbea      	blt.n	80025c6 <main+0x42>
    }
  }
  set_new_figs();
 80025f0:	f7ff ffb0 	bl	8002554 <set_new_figs>
 lcd_update();
 80025f4:	f7ff fd00 	bl	8001ff8 <lcd_update>
//

 HAL_Delay(500);
 80025f8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80025fc:	f000 fcec 	bl	8002fd8 <HAL_Delay>
 gyro_init();
 8002600:	f7fe ffce 	bl	80015a0 <gyro_init>
 //gyro_ReadWhoAmI();
 gyro_calibration(&offset_x, &offset_y, &offset_z);
 8002604:	4a42      	ldr	r2, [pc, #264]	@ (8002710 <main+0x18c>)
 8002606:	4943      	ldr	r1, [pc, #268]	@ (8002714 <main+0x190>)
 8002608:	4843      	ldr	r0, [pc, #268]	@ (8002718 <main+0x194>)
 800260a:	f7ff f96b 	bl	80018e4 <gyro_calibration>


  while (1)
  {

	  lcd_update();
 800260e:	f7ff fcf3 	bl	8001ff8 <lcd_update>
	//  gyro_get_filtered_data(&gyro_x, &gyro_y, &gyro_z);

	         // uwzględenienie kalibracji
	         gyro_x -= offset_x;
 8002612:	4b42      	ldr	r3, [pc, #264]	@ (800271c <main+0x198>)
 8002614:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002618:	b29a      	uxth	r2, r3
 800261a:	4b3f      	ldr	r3, [pc, #252]	@ (8002718 <main+0x194>)
 800261c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002620:	b29b      	uxth	r3, r3
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	b29b      	uxth	r3, r3
 8002626:	b21a      	sxth	r2, r3
 8002628:	4b3c      	ldr	r3, [pc, #240]	@ (800271c <main+0x198>)
 800262a:	801a      	strh	r2, [r3, #0]
	         gyro_y -= offset_y;
 800262c:	4b3c      	ldr	r3, [pc, #240]	@ (8002720 <main+0x19c>)
 800262e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002632:	b29a      	uxth	r2, r3
 8002634:	4b37      	ldr	r3, [pc, #220]	@ (8002714 <main+0x190>)
 8002636:	f9b3 3000 	ldrsh.w	r3, [r3]
 800263a:	b29b      	uxth	r3, r3
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	b29b      	uxth	r3, r3
 8002640:	b21a      	sxth	r2, r3
 8002642:	4b37      	ldr	r3, [pc, #220]	@ (8002720 <main+0x19c>)
 8002644:	801a      	strh	r2, [r3, #0]
	         gyro_z -= offset_z;
 8002646:	4b37      	ldr	r3, [pc, #220]	@ (8002724 <main+0x1a0>)
 8002648:	f9b3 3000 	ldrsh.w	r3, [r3]
 800264c:	b29a      	uxth	r2, r3
 800264e:	4b30      	ldr	r3, [pc, #192]	@ (8002710 <main+0x18c>)
 8002650:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002654:	b29b      	uxth	r3, r3
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	b29b      	uxth	r3, r3
 800265a:	b21a      	sxth	r2, r3
 800265c:	4b31      	ldr	r3, [pc, #196]	@ (8002724 <main+0x1a0>)
 800265e:	801a      	strh	r2, [r3, #0]

	         // Konwersja do dps (dla skali 2000dps)
	         float dps_x = gyro_x * (2000.0 / 32768.0);
 8002660:	4b2e      	ldr	r3, [pc, #184]	@ (800271c <main+0x198>)
 8002662:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002666:	4618      	mov	r0, r3
 8002668:	f7fd ff6c 	bl	8000544 <__aeabi_i2d>
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	4b2d      	ldr	r3, [pc, #180]	@ (8002728 <main+0x1a4>)
 8002672:	f7fd ffd1 	bl	8000618 <__aeabi_dmul>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	4610      	mov	r0, r2
 800267c:	4619      	mov	r1, r3
 800267e:	f7fe faa3 	bl	8000bc8 <__aeabi_d2f>
 8002682:	4603      	mov	r3, r0
 8002684:	60fb      	str	r3, [r7, #12]
	         float dps_y = gyro_y * (2000.0 / 32768.0);
 8002686:	4b26      	ldr	r3, [pc, #152]	@ (8002720 <main+0x19c>)
 8002688:	f9b3 3000 	ldrsh.w	r3, [r3]
 800268c:	4618      	mov	r0, r3
 800268e:	f7fd ff59 	bl	8000544 <__aeabi_i2d>
 8002692:	f04f 0200 	mov.w	r2, #0
 8002696:	4b24      	ldr	r3, [pc, #144]	@ (8002728 <main+0x1a4>)
 8002698:	f7fd ffbe 	bl	8000618 <__aeabi_dmul>
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	4610      	mov	r0, r2
 80026a2:	4619      	mov	r1, r3
 80026a4:	f7fe fa90 	bl	8000bc8 <__aeabi_d2f>
 80026a8:	4603      	mov	r3, r0
 80026aa:	60bb      	str	r3, [r7, #8]
	         float dps_z = gyro_z * (2000.0 / 32768.0);
 80026ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002724 <main+0x1a0>)
 80026ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fd ff46 	bl	8000544 <__aeabi_i2d>
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002728 <main+0x1a4>)
 80026be:	f7fd ffab 	bl	8000618 <__aeabi_dmul>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4610      	mov	r0, r2
 80026c8:	4619      	mov	r1, r3
 80026ca:	f7fe fa7d 	bl	8000bc8 <__aeabi_d2f>
 80026ce:	4603      	mov	r3, r0
 80026d0:	607b      	str	r3, [r7, #4]

	         printf("X: %.2f dps, Y: %.2f dps, Z: %.2f dps\r\n", dps_x, dps_y, dps_z);
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f7fd ff48 	bl	8000568 <__aeabi_f2d>
 80026d8:	4680      	mov	r8, r0
 80026da:	4689      	mov	r9, r1
 80026dc:	68b8      	ldr	r0, [r7, #8]
 80026de:	f7fd ff43 	bl	8000568 <__aeabi_f2d>
 80026e2:	4604      	mov	r4, r0
 80026e4:	460d      	mov	r5, r1
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7fd ff3e 	bl	8000568 <__aeabi_f2d>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80026f4:	e9cd 4500 	strd	r4, r5, [sp]
 80026f8:	4642      	mov	r2, r8
 80026fa:	464b      	mov	r3, r9
 80026fc:	480b      	ldr	r0, [pc, #44]	@ (800272c <main+0x1a8>)
 80026fe:	f009 f95d 	bl	800b9bc <iprintf>

	         HAL_Delay(500);  // Odczyt z częstotliwością ~20Hz
 8002702:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002706:	f000 fc67 	bl	8002fd8 <HAL_Delay>
  {
 800270a:	bf00      	nop
 800270c:	e77f      	b.n	800260e <main+0x8a>
 800270e:	bf00      	nop
 8002710:	20025c9e 	.word	0x20025c9e
 8002714:	20025c9c 	.word	0x20025c9c
 8002718:	20025c9a 	.word	0x20025c9a
 800271c:	20025c94 	.word	0x20025c94
 8002720:	20025c96 	.word	0x20025c96
 8002724:	20025c98 	.word	0x20025c98
 8002728:	3faf4000 	.word	0x3faf4000
 800272c:	0800e794 	.word	0x0800e794

08002730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b094      	sub	sp, #80	@ 0x50
 8002734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002736:	f107 0320 	add.w	r3, r7, #32
 800273a:	2230      	movs	r2, #48	@ 0x30
 800273c:	2100      	movs	r1, #0
 800273e:	4618      	mov	r0, r3
 8002740:	f009 fa84 	bl	800bc4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002744:	f107 030c 	add.w	r3, r7, #12
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	60da      	str	r2, [r3, #12]
 8002752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002754:	2300      	movs	r3, #0
 8002756:	60bb      	str	r3, [r7, #8]
 8002758:	4b28      	ldr	r3, [pc, #160]	@ (80027fc <SystemClock_Config+0xcc>)
 800275a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275c:	4a27      	ldr	r2, [pc, #156]	@ (80027fc <SystemClock_Config+0xcc>)
 800275e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002762:	6413      	str	r3, [r2, #64]	@ 0x40
 8002764:	4b25      	ldr	r3, [pc, #148]	@ (80027fc <SystemClock_Config+0xcc>)
 8002766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002770:	2300      	movs	r3, #0
 8002772:	607b      	str	r3, [r7, #4]
 8002774:	4b22      	ldr	r3, [pc, #136]	@ (8002800 <SystemClock_Config+0xd0>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800277c:	4a20      	ldr	r2, [pc, #128]	@ (8002800 <SystemClock_Config+0xd0>)
 800277e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	4b1e      	ldr	r3, [pc, #120]	@ (8002800 <SystemClock_Config+0xd0>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800278c:	607b      	str	r3, [r7, #4]
 800278e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002790:	2301      	movs	r3, #1
 8002792:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002794:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002798:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800279a:	2302      	movs	r3, #2
 800279c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800279e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80027a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80027a4:	2304      	movs	r3, #4
 80027a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80027a8:	2348      	movs	r3, #72	@ 0x48
 80027aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027ac:	2302      	movs	r3, #2
 80027ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80027b0:	2303      	movs	r3, #3
 80027b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027b4:	f107 0320 	add.w	r3, r7, #32
 80027b8:	4618      	mov	r0, r3
 80027ba:	f003 ff1f 	bl	80065fc <HAL_RCC_OscConfig>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80027c4:	f000 f830 	bl	8002828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027c8:	230f      	movs	r3, #15
 80027ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027cc:	2302      	movs	r3, #2
 80027ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027de:	f107 030c 	add.w	r3, r7, #12
 80027e2:	2102      	movs	r1, #2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f004 f981 	bl	8006aec <HAL_RCC_ClockConfig>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80027f0:	f000 f81a 	bl	8002828 <Error_Handler>
  }
}
 80027f4:	bf00      	nop
 80027f6:	3750      	adds	r7, #80	@ 0x50
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40023800 	.word	0x40023800
 8002800:	40007000 	.word	0x40007000

08002804 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a04      	ldr	r2, [pc, #16]	@ (8002824 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d101      	bne.n	800281a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002816:	f000 fbbf 	bl	8002f98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40001000 	.word	0x40001000

08002828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800282c:	b672      	cpsid	i
}
 800282e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002830:	bf00      	nop
 8002832:	e7fd      	b.n	8002830 <Error_Handler+0x8>

08002834 <spi5_acquire>:
/* USER CODE BEGIN 0 */


static volatile bool spi5_busy = false;  //flaga informująca czy SPI5 jest zajęte

bool spi5_acquire(void) {  //zajmij SPI, gdy jest wolne
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0

	if (spi5_busy) return false;
 8002838:	4b07      	ldr	r3, [pc, #28]	@ (8002858 <spi5_acquire+0x24>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <spi5_acquire+0x12>
 8002842:	2300      	movs	r3, #0
 8002844:	e003      	b.n	800284e <spi5_acquire+0x1a>

    spi5_busy = true;
 8002846:	4b04      	ldr	r3, [pc, #16]	@ (8002858 <spi5_acquire+0x24>)
 8002848:	2201      	movs	r2, #1
 800284a:	701a      	strb	r2, [r3, #0]
    return true;
 800284c:	2301      	movs	r3, #1
}
 800284e:	4618      	mov	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	20025ca0 	.word	0x20025ca0

0800285c <spi5_release>:

void spi5_release(void) { //zwolnij SPI
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
    spi5_busy = false;
 8002860:	4b03      	ldr	r3, [pc, #12]	@ (8002870 <spi5_release+0x14>)
 8002862:	2200      	movs	r2, #0
 8002864:	701a      	strb	r2, [r3, #0]
}
 8002866:	bf00      	nop
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	20025ca0 	.word	0x20025ca0

08002874 <MX_SPI5_Init>:
SPI_HandleTypeDef hspi5;
DMA_HandleTypeDef hdma_spi5_tx;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8002878:	4b17      	ldr	r3, [pc, #92]	@ (80028d8 <MX_SPI5_Init+0x64>)
 800287a:	4a18      	ldr	r2, [pc, #96]	@ (80028dc <MX_SPI5_Init+0x68>)
 800287c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800287e:	4b16      	ldr	r3, [pc, #88]	@ (80028d8 <MX_SPI5_Init+0x64>)
 8002880:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002884:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002886:	4b14      	ldr	r3, [pc, #80]	@ (80028d8 <MX_SPI5_Init+0x64>)
 8002888:	2200      	movs	r2, #0
 800288a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800288c:	4b12      	ldr	r3, [pc, #72]	@ (80028d8 <MX_SPI5_Init+0x64>)
 800288e:	2200      	movs	r2, #0
 8002890:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002892:	4b11      	ldr	r3, [pc, #68]	@ (80028d8 <MX_SPI5_Init+0x64>)
 8002894:	2200      	movs	r2, #0
 8002896:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002898:	4b0f      	ldr	r3, [pc, #60]	@ (80028d8 <MX_SPI5_Init+0x64>)
 800289a:	2200      	movs	r2, #0
 800289c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800289e:	4b0e      	ldr	r3, [pc, #56]	@ (80028d8 <MX_SPI5_Init+0x64>)
 80028a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028a4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80028a6:	4b0c      	ldr	r3, [pc, #48]	@ (80028d8 <MX_SPI5_Init+0x64>)
 80028a8:	2218      	movs	r2, #24
 80028aa:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028ac:	4b0a      	ldr	r3, [pc, #40]	@ (80028d8 <MX_SPI5_Init+0x64>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80028b2:	4b09      	ldr	r3, [pc, #36]	@ (80028d8 <MX_SPI5_Init+0x64>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028b8:	4b07      	ldr	r3, [pc, #28]	@ (80028d8 <MX_SPI5_Init+0x64>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80028be:	4b06      	ldr	r3, [pc, #24]	@ (80028d8 <MX_SPI5_Init+0x64>)
 80028c0:	220a      	movs	r2, #10
 80028c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80028c4:	4804      	ldr	r0, [pc, #16]	@ (80028d8 <MX_SPI5_Init+0x64>)
 80028c6:	f004 fd57 	bl	8007378 <HAL_SPI_Init>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80028d0:	f7ff ffaa 	bl	8002828 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80028d4:	bf00      	nop
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	20025ca4 	.word	0x20025ca4
 80028dc:	40015000 	.word	0x40015000

080028e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08a      	sub	sp, #40	@ 0x28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e8:	f107 0314 	add.w	r3, r7, #20
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	609a      	str	r2, [r3, #8]
 80028f4:	60da      	str	r2, [r3, #12]
 80028f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a30      	ldr	r2, [pc, #192]	@ (80029c0 <HAL_SPI_MspInit+0xe0>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d15a      	bne.n	80029b8 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	613b      	str	r3, [r7, #16]
 8002906:	4b2f      	ldr	r3, [pc, #188]	@ (80029c4 <HAL_SPI_MspInit+0xe4>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290a:	4a2e      	ldr	r2, [pc, #184]	@ (80029c4 <HAL_SPI_MspInit+0xe4>)
 800290c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002910:	6453      	str	r3, [r2, #68]	@ 0x44
 8002912:	4b2c      	ldr	r3, [pc, #176]	@ (80029c4 <HAL_SPI_MspInit+0xe4>)
 8002914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002916:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800291a:	613b      	str	r3, [r7, #16]
 800291c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	4b28      	ldr	r3, [pc, #160]	@ (80029c4 <HAL_SPI_MspInit+0xe4>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002926:	4a27      	ldr	r2, [pc, #156]	@ (80029c4 <HAL_SPI_MspInit+0xe4>)
 8002928:	f043 0320 	orr.w	r3, r3, #32
 800292c:	6313      	str	r3, [r2, #48]	@ 0x30
 800292e:	4b25      	ldr	r3, [pc, #148]	@ (80029c4 <HAL_SPI_MspInit+0xe4>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002932:	f003 0320 	and.w	r3, r3, #32
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800293a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800293e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002940:	2302      	movs	r3, #2
 8002942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002948:	2300      	movs	r3, #0
 800294a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800294c:	2305      	movs	r3, #5
 800294e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002950:	f107 0314 	add.w	r3, r7, #20
 8002954:	4619      	mov	r1, r3
 8002956:	481c      	ldr	r0, [pc, #112]	@ (80029c8 <HAL_SPI_MspInit+0xe8>)
 8002958:	f001 f9bc 	bl	8003cd4 <HAL_GPIO_Init>

    /* SPI5 DMA Init */
    /* SPI5_TX Init */
    hdma_spi5_tx.Instance = DMA2_Stream4;
 800295c:	4b1b      	ldr	r3, [pc, #108]	@ (80029cc <HAL_SPI_MspInit+0xec>)
 800295e:	4a1c      	ldr	r2, [pc, #112]	@ (80029d0 <HAL_SPI_MspInit+0xf0>)
 8002960:	601a      	str	r2, [r3, #0]
    hdma_spi5_tx.Init.Channel = DMA_CHANNEL_2;
 8002962:	4b1a      	ldr	r3, [pc, #104]	@ (80029cc <HAL_SPI_MspInit+0xec>)
 8002964:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002968:	605a      	str	r2, [r3, #4]
    hdma_spi5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800296a:	4b18      	ldr	r3, [pc, #96]	@ (80029cc <HAL_SPI_MspInit+0xec>)
 800296c:	2240      	movs	r2, #64	@ 0x40
 800296e:	609a      	str	r2, [r3, #8]
    hdma_spi5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002970:	4b16      	ldr	r3, [pc, #88]	@ (80029cc <HAL_SPI_MspInit+0xec>)
 8002972:	2200      	movs	r2, #0
 8002974:	60da      	str	r2, [r3, #12]
    hdma_spi5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002976:	4b15      	ldr	r3, [pc, #84]	@ (80029cc <HAL_SPI_MspInit+0xec>)
 8002978:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800297c:	611a      	str	r2, [r3, #16]
    hdma_spi5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800297e:	4b13      	ldr	r3, [pc, #76]	@ (80029cc <HAL_SPI_MspInit+0xec>)
 8002980:	2200      	movs	r2, #0
 8002982:	615a      	str	r2, [r3, #20]
    hdma_spi5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002984:	4b11      	ldr	r3, [pc, #68]	@ (80029cc <HAL_SPI_MspInit+0xec>)
 8002986:	2200      	movs	r2, #0
 8002988:	619a      	str	r2, [r3, #24]
    hdma_spi5_tx.Init.Mode = DMA_NORMAL;
 800298a:	4b10      	ldr	r3, [pc, #64]	@ (80029cc <HAL_SPI_MspInit+0xec>)
 800298c:	2200      	movs	r2, #0
 800298e:	61da      	str	r2, [r3, #28]
    hdma_spi5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002990:	4b0e      	ldr	r3, [pc, #56]	@ (80029cc <HAL_SPI_MspInit+0xec>)
 8002992:	2200      	movs	r2, #0
 8002994:	621a      	str	r2, [r3, #32]
    hdma_spi5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002996:	4b0d      	ldr	r3, [pc, #52]	@ (80029cc <HAL_SPI_MspInit+0xec>)
 8002998:	2200      	movs	r2, #0
 800299a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi5_tx) != HAL_OK)
 800299c:	480b      	ldr	r0, [pc, #44]	@ (80029cc <HAL_SPI_MspInit+0xec>)
 800299e:	f000 fc3d 	bl	800321c <HAL_DMA_Init>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80029a8:	f7ff ff3e 	bl	8002828 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi5_tx);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a07      	ldr	r2, [pc, #28]	@ (80029cc <HAL_SPI_MspInit+0xec>)
 80029b0:	649a      	str	r2, [r3, #72]	@ 0x48
 80029b2:	4a06      	ldr	r2, [pc, #24]	@ (80029cc <HAL_SPI_MspInit+0xec>)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80029b8:	bf00      	nop
 80029ba:	3728      	adds	r7, #40	@ 0x28
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40015000 	.word	0x40015000
 80029c4:	40023800 	.word	0x40023800
 80029c8:	40021400 	.word	0x40021400
 80029cc:	20025cfc 	.word	0x20025cfc
 80029d0:	40026470 	.word	0x40026470

080029d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	607b      	str	r3, [r7, #4]
 80029de:	4b12      	ldr	r3, [pc, #72]	@ (8002a28 <HAL_MspInit+0x54>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e2:	4a11      	ldr	r2, [pc, #68]	@ (8002a28 <HAL_MspInit+0x54>)
 80029e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80029ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002a28 <HAL_MspInit+0x54>)
 80029ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029f2:	607b      	str	r3, [r7, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	603b      	str	r3, [r7, #0]
 80029fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002a28 <HAL_MspInit+0x54>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002a28 <HAL_MspInit+0x54>)
 8002a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a06:	4b08      	ldr	r3, [pc, #32]	@ (8002a28 <HAL_MspInit+0x54>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a12:	2200      	movs	r2, #0
 8002a14:	210f      	movs	r1, #15
 8002a16:	f06f 0001 	mvn.w	r0, #1
 8002a1a:	f000 fbb9 	bl	8003190 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40023800 	.word	0x40023800

08002a2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b08e      	sub	sp, #56	@ 0x38
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	4b33      	ldr	r3, [pc, #204]	@ (8002b10 <HAL_InitTick+0xe4>)
 8002a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a44:	4a32      	ldr	r2, [pc, #200]	@ (8002b10 <HAL_InitTick+0xe4>)
 8002a46:	f043 0310 	orr.w	r3, r3, #16
 8002a4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a4c:	4b30      	ldr	r3, [pc, #192]	@ (8002b10 <HAL_InitTick+0xe4>)
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a50:	f003 0310 	and.w	r3, r3, #16
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a58:	f107 0210 	add.w	r2, r7, #16
 8002a5c:	f107 0314 	add.w	r3, r7, #20
 8002a60:	4611      	mov	r1, r2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f004 fa62 	bl	8006f2c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002a68:	6a3b      	ldr	r3, [r7, #32]
 8002a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d103      	bne.n	8002a7a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002a72:	f004 fa33 	bl	8006edc <HAL_RCC_GetPCLK1Freq>
 8002a76:	6378      	str	r0, [r7, #52]	@ 0x34
 8002a78:	e004      	b.n	8002a84 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002a7a:	f004 fa2f 	bl	8006edc <HAL_RCC_GetPCLK1Freq>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a86:	4a23      	ldr	r2, [pc, #140]	@ (8002b14 <HAL_InitTick+0xe8>)
 8002a88:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8c:	0c9b      	lsrs	r3, r3, #18
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002a92:	4b21      	ldr	r3, [pc, #132]	@ (8002b18 <HAL_InitTick+0xec>)
 8002a94:	4a21      	ldr	r2, [pc, #132]	@ (8002b1c <HAL_InitTick+0xf0>)
 8002a96:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002a98:	4b1f      	ldr	r3, [pc, #124]	@ (8002b18 <HAL_InitTick+0xec>)
 8002a9a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002a9e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8002b18 <HAL_InitTick+0xec>)
 8002aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8002b18 <HAL_InitTick+0xec>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aac:	4b1a      	ldr	r3, [pc, #104]	@ (8002b18 <HAL_InitTick+0xec>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ab2:	4b19      	ldr	r3, [pc, #100]	@ (8002b18 <HAL_InitTick+0xec>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002ab8:	4817      	ldr	r0, [pc, #92]	@ (8002b18 <HAL_InitTick+0xec>)
 8002aba:	f005 fb77 	bl	80081ac <HAL_TIM_Base_Init>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002ac4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d11b      	bne.n	8002b04 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002acc:	4812      	ldr	r0, [pc, #72]	@ (8002b18 <HAL_InitTick+0xec>)
 8002ace:	f005 fbbd 	bl	800824c <HAL_TIM_Base_Start_IT>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002ad8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d111      	bne.n	8002b04 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ae0:	2036      	movs	r0, #54	@ 0x36
 8002ae2:	f000 fb71 	bl	80031c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b0f      	cmp	r3, #15
 8002aea:	d808      	bhi.n	8002afe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002aec:	2200      	movs	r2, #0
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	2036      	movs	r0, #54	@ 0x36
 8002af2:	f000 fb4d 	bl	8003190 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002af6:	4a0a      	ldr	r2, [pc, #40]	@ (8002b20 <HAL_InitTick+0xf4>)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	e002      	b.n	8002b04 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002b04:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3738      	adds	r7, #56	@ 0x38
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40023800 	.word	0x40023800
 8002b14:	431bde83 	.word	0x431bde83
 8002b18:	20025d5c 	.word	0x20025d5c
 8002b1c:	40001000 	.word	0x40001000
 8002b20:	20000008 	.word	0x20000008

08002b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b28:	bf00      	nop
 8002b2a:	e7fd      	b.n	8002b28 <NMI_Handler+0x4>

08002b2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b30:	bf00      	nop
 8002b32:	e7fd      	b.n	8002b30 <HardFault_Handler+0x4>

08002b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b38:	bf00      	nop
 8002b3a:	e7fd      	b.n	8002b38 <MemManage_Handler+0x4>

08002b3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b40:	bf00      	nop
 8002b42:	e7fd      	b.n	8002b40 <BusFault_Handler+0x4>

08002b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b48:	bf00      	nop
 8002b4a:	e7fd      	b.n	8002b48 <UsageFault_Handler+0x4>

08002b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b50:	bf00      	nop
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
	...

08002b5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b60:	4802      	ldr	r0, [pc, #8]	@ (8002b6c <TIM6_DAC_IRQHandler+0x10>)
 8002b62:	f005 fbe3 	bl	800832c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20025d5c 	.word	0x20025d5c

08002b70 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_tx);
 8002b74:	4802      	ldr	r0, [pc, #8]	@ (8002b80 <DMA2_Stream4_IRQHandler+0x10>)
 8002b76:	f000 fc57 	bl	8003428 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20025cfc 	.word	0x20025cfc

08002b84 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8002b88:	4802      	ldr	r0, [pc, #8]	@ (8002b94 <OTG_HS_IRQHandler+0x10>)
 8002b8a:	f001 fa68 	bl	800405e <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20025f28 	.word	0x20025f28

08002b98 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002b9c:	4802      	ldr	r0, [pc, #8]	@ (8002ba8 <LTDC_IRQHandler+0x10>)
 8002b9e:	f003 fa95 	bl	80060cc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002ba2:	bf00      	nop
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20025bec 	.word	0x20025bec

08002bac <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002bb0:	4802      	ldr	r0, [pc, #8]	@ (8002bbc <DMA2D_IRQHandler+0x10>)
 8002bb2:	f000 feec 	bl	800398e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000200 	.word	0x20000200

08002bc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return 1;
 8002bc4:	2301      	movs	r3, #1
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <_kill>:

int _kill(int pid, int sig)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bda:	f009 f899 	bl	800bd10 <__errno>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2216      	movs	r2, #22
 8002be2:	601a      	str	r2, [r3, #0]
  return -1;
 8002be4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <_exit>:

void _exit (int status)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7ff ffe7 	bl	8002bd0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c02:	bf00      	nop
 8002c04:	e7fd      	b.n	8002c02 <_exit+0x12>

08002c06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b086      	sub	sp, #24
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	60f8      	str	r0, [r7, #12]
 8002c0e:	60b9      	str	r1, [r7, #8]
 8002c10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c12:	2300      	movs	r3, #0
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	e00a      	b.n	8002c2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c18:	f3af 8000 	nop.w
 8002c1c:	4601      	mov	r1, r0
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	60ba      	str	r2, [r7, #8]
 8002c24:	b2ca      	uxtb	r2, r1
 8002c26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	dbf0      	blt.n	8002c18 <_read+0x12>
  }

  return len;
 8002c36:	687b      	ldr	r3, [r7, #4]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c68:	605a      	str	r2, [r3, #4]
  return 0;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <_isatty>:

int _isatty(int file)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c80:	2301      	movs	r3, #1
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b085      	sub	sp, #20
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	60f8      	str	r0, [r7, #12]
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cb0:	4a14      	ldr	r2, [pc, #80]	@ (8002d04 <_sbrk+0x5c>)
 8002cb2:	4b15      	ldr	r3, [pc, #84]	@ (8002d08 <_sbrk+0x60>)
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cbc:	4b13      	ldr	r3, [pc, #76]	@ (8002d0c <_sbrk+0x64>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d102      	bne.n	8002cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cc4:	4b11      	ldr	r3, [pc, #68]	@ (8002d0c <_sbrk+0x64>)
 8002cc6:	4a12      	ldr	r2, [pc, #72]	@ (8002d10 <_sbrk+0x68>)
 8002cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cca:	4b10      	ldr	r3, [pc, #64]	@ (8002d0c <_sbrk+0x64>)
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d207      	bcs.n	8002ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cd8:	f009 f81a 	bl	800bd10 <__errno>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	220c      	movs	r2, #12
 8002ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce6:	e009      	b.n	8002cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ce8:	4b08      	ldr	r3, [pc, #32]	@ (8002d0c <_sbrk+0x64>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cee:	4b07      	ldr	r3, [pc, #28]	@ (8002d0c <_sbrk+0x64>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	4a05      	ldr	r2, [pc, #20]	@ (8002d0c <_sbrk+0x64>)
 8002cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20030000 	.word	0x20030000
 8002d08:	00000400 	.word	0x00000400
 8002d0c:	20025da4 	.word	0x20025da4
 8002d10:	20026458 	.word	0x20026458

08002d14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d18:	4b06      	ldr	r3, [pc, #24]	@ (8002d34 <SystemInit+0x20>)
 8002d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d1e:	4a05      	ldr	r2, [pc, #20]	@ (8002d34 <SystemInit+0x20>)
 8002d20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d28:	bf00      	nop
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	e000ed00 	.word	0xe000ed00

08002d38 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d3e:	f107 0308 	add.w	r3, r7, #8
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	605a      	str	r2, [r3, #4]
 8002d48:	609a      	str	r2, [r3, #8]
 8002d4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d4c:	463b      	mov	r3, r7
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d54:	4b1e      	ldr	r3, [pc, #120]	@ (8002dd0 <MX_TIM1_Init+0x98>)
 8002d56:	4a1f      	ldr	r2, [pc, #124]	@ (8002dd4 <MX_TIM1_Init+0x9c>)
 8002d58:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd0 <MX_TIM1_Init+0x98>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d60:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd0 <MX_TIM1_Init+0x98>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002d66:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd0 <MX_TIM1_Init+0x98>)
 8002d68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d6c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d6e:	4b18      	ldr	r3, [pc, #96]	@ (8002dd0 <MX_TIM1_Init+0x98>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d74:	4b16      	ldr	r3, [pc, #88]	@ (8002dd0 <MX_TIM1_Init+0x98>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d7a:	4b15      	ldr	r3, [pc, #84]	@ (8002dd0 <MX_TIM1_Init+0x98>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d80:	4813      	ldr	r0, [pc, #76]	@ (8002dd0 <MX_TIM1_Init+0x98>)
 8002d82:	f005 fa13 	bl	80081ac <HAL_TIM_Base_Init>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002d8c:	f7ff fd4c 	bl	8002828 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002d96:	f107 0308 	add.w	r3, r7, #8
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	480c      	ldr	r0, [pc, #48]	@ (8002dd0 <MX_TIM1_Init+0x98>)
 8002d9e:	f005 fbb5 	bl	800850c <HAL_TIM_ConfigClockSource>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002da8:	f7ff fd3e 	bl	8002828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dac:	2300      	movs	r3, #0
 8002dae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002db0:	2300      	movs	r3, #0
 8002db2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002db4:	463b      	mov	r3, r7
 8002db6:	4619      	mov	r1, r3
 8002db8:	4805      	ldr	r0, [pc, #20]	@ (8002dd0 <MX_TIM1_Init+0x98>)
 8002dba:	f005 fddd 	bl	8008978 <HAL_TIMEx_MasterConfigSynchronization>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002dc4:	f7ff fd30 	bl	8002828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002dc8:	bf00      	nop
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	20025da8 	.word	0x20025da8
 8002dd4:	40010000 	.word	0x40010000

08002dd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a0b      	ldr	r2, [pc, #44]	@ (8002e14 <HAL_TIM_Base_MspInit+0x3c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d10d      	bne.n	8002e06 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	4b0a      	ldr	r3, [pc, #40]	@ (8002e18 <HAL_TIM_Base_MspInit+0x40>)
 8002df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df2:	4a09      	ldr	r2, [pc, #36]	@ (8002e18 <HAL_TIM_Base_MspInit+0x40>)
 8002df4:	f043 0301 	orr.w	r3, r3, #1
 8002df8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dfa:	4b07      	ldr	r3, [pc, #28]	@ (8002e18 <HAL_TIM_Base_MspInit+0x40>)
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002e06:	bf00      	nop
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40010000 	.word	0x40010000
 8002e18:	40023800 	.word	0x40023800

08002e1c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e20:	4b11      	ldr	r3, [pc, #68]	@ (8002e68 <MX_USART1_UART_Init+0x4c>)
 8002e22:	4a12      	ldr	r2, [pc, #72]	@ (8002e6c <MX_USART1_UART_Init+0x50>)
 8002e24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e26:	4b10      	ldr	r3, [pc, #64]	@ (8002e68 <MX_USART1_UART_Init+0x4c>)
 8002e28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e68 <MX_USART1_UART_Init+0x4c>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e34:	4b0c      	ldr	r3, [pc, #48]	@ (8002e68 <MX_USART1_UART_Init+0x4c>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e68 <MX_USART1_UART_Init+0x4c>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e40:	4b09      	ldr	r3, [pc, #36]	@ (8002e68 <MX_USART1_UART_Init+0x4c>)
 8002e42:	220c      	movs	r2, #12
 8002e44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e46:	4b08      	ldr	r3, [pc, #32]	@ (8002e68 <MX_USART1_UART_Init+0x4c>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e4c:	4b06      	ldr	r3, [pc, #24]	@ (8002e68 <MX_USART1_UART_Init+0x4c>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e52:	4805      	ldr	r0, [pc, #20]	@ (8002e68 <MX_USART1_UART_Init+0x4c>)
 8002e54:	f005 fe20 	bl	8008a98 <HAL_UART_Init>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002e5e:	f7ff fce3 	bl	8002828 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e62:	bf00      	nop
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20025df0 	.word	0x20025df0
 8002e6c:	40011000 	.word	0x40011000

08002e70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08a      	sub	sp, #40	@ 0x28
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e78:	f107 0314 	add.w	r3, r7, #20
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	60da      	str	r2, [r3, #12]
 8002e86:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a19      	ldr	r2, [pc, #100]	@ (8002ef4 <HAL_UART_MspInit+0x84>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d12c      	bne.n	8002eec <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	4b18      	ldr	r3, [pc, #96]	@ (8002ef8 <HAL_UART_MspInit+0x88>)
 8002e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9a:	4a17      	ldr	r2, [pc, #92]	@ (8002ef8 <HAL_UART_MspInit+0x88>)
 8002e9c:	f043 0310 	orr.w	r3, r3, #16
 8002ea0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ea2:	4b15      	ldr	r3, [pc, #84]	@ (8002ef8 <HAL_UART_MspInit+0x88>)
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea6:	f003 0310 	and.w	r3, r3, #16
 8002eaa:	613b      	str	r3, [r7, #16]
 8002eac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	4b11      	ldr	r3, [pc, #68]	@ (8002ef8 <HAL_UART_MspInit+0x88>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb6:	4a10      	ldr	r2, [pc, #64]	@ (8002ef8 <HAL_UART_MspInit+0x88>)
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8002ef8 <HAL_UART_MspInit+0x88>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002eca:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002edc:	2307      	movs	r3, #7
 8002ede:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee0:	f107 0314 	add.w	r3, r7, #20
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4805      	ldr	r0, [pc, #20]	@ (8002efc <HAL_UART_MspInit+0x8c>)
 8002ee8:	f000 fef4 	bl	8003cd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002eec:	bf00      	nop
 8002eee:	3728      	adds	r7, #40	@ 0x28
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40011000 	.word	0x40011000
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	40020000 	.word	0x40020000

08002f00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002f00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f38 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f04:	f7ff ff06 	bl	8002d14 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f08:	480c      	ldr	r0, [pc, #48]	@ (8002f3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f0a:	490d      	ldr	r1, [pc, #52]	@ (8002f40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002f44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f10:	e002      	b.n	8002f18 <LoopCopyDataInit>

08002f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f16:	3304      	adds	r3, #4

08002f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f1c:	d3f9      	bcc.n	8002f12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f20:	4c0a      	ldr	r4, [pc, #40]	@ (8002f4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f24:	e001      	b.n	8002f2a <LoopFillZerobss>

08002f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f28:	3204      	adds	r2, #4

08002f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f2c:	d3fb      	bcc.n	8002f26 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002f2e:	f008 fef5 	bl	800bd1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f32:	f7ff fb27 	bl	8002584 <main>
  bx  lr    
 8002f36:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002f38:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f40:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002f44:	0800ec10 	.word	0x0800ec10
  ldr r2, =_sbss
 8002f48:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002f4c:	20026454 	.word	0x20026454

08002f50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f50:	e7fe      	b.n	8002f50 <ADC_IRQHandler>
	...

08002f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f58:	4b0e      	ldr	r3, [pc, #56]	@ (8002f94 <HAL_Init+0x40>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8002f94 <HAL_Init+0x40>)
 8002f5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f64:	4b0b      	ldr	r3, [pc, #44]	@ (8002f94 <HAL_Init+0x40>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a0a      	ldr	r2, [pc, #40]	@ (8002f94 <HAL_Init+0x40>)
 8002f6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f70:	4b08      	ldr	r3, [pc, #32]	@ (8002f94 <HAL_Init+0x40>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a07      	ldr	r2, [pc, #28]	@ (8002f94 <HAL_Init+0x40>)
 8002f76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f7c:	2003      	movs	r0, #3
 8002f7e:	f000 f8fc 	bl	800317a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f82:	200f      	movs	r0, #15
 8002f84:	f7ff fd52 	bl	8002a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f88:	f7ff fd24 	bl	80029d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40023c00 	.word	0x40023c00

08002f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f9c:	4b06      	ldr	r3, [pc, #24]	@ (8002fb8 <HAL_IncTick+0x20>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4b06      	ldr	r3, [pc, #24]	@ (8002fbc <HAL_IncTick+0x24>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	4a04      	ldr	r2, [pc, #16]	@ (8002fbc <HAL_IncTick+0x24>)
 8002faa:	6013      	str	r3, [r2, #0]
}
 8002fac:	bf00      	nop
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	2000000c 	.word	0x2000000c
 8002fbc:	20025e38 	.word	0x20025e38

08002fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fc4:	4b03      	ldr	r3, [pc, #12]	@ (8002fd4 <HAL_GetTick+0x14>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	20025e38 	.word	0x20025e38

08002fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fe0:	f7ff ffee 	bl	8002fc0 <HAL_GetTick>
 8002fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff0:	d005      	beq.n	8002ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800301c <HAL_Delay+0x44>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ffe:	bf00      	nop
 8003000:	f7ff ffde 	bl	8002fc0 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	429a      	cmp	r2, r3
 800300e:	d8f7      	bhi.n	8003000 <HAL_Delay+0x28>
  {
  }
}
 8003010:	bf00      	nop
 8003012:	bf00      	nop
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	2000000c 	.word	0x2000000c

08003020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003030:	4b0c      	ldr	r3, [pc, #48]	@ (8003064 <__NVIC_SetPriorityGrouping+0x44>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800303c:	4013      	ands	r3, r2
 800303e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003048:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800304c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003052:	4a04      	ldr	r2, [pc, #16]	@ (8003064 <__NVIC_SetPriorityGrouping+0x44>)
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	60d3      	str	r3, [r2, #12]
}
 8003058:	bf00      	nop
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	e000ed00 	.word	0xe000ed00

08003068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800306c:	4b04      	ldr	r3, [pc, #16]	@ (8003080 <__NVIC_GetPriorityGrouping+0x18>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	0a1b      	lsrs	r3, r3, #8
 8003072:	f003 0307 	and.w	r3, r3, #7
}
 8003076:	4618      	mov	r0, r3
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	e000ed00 	.word	0xe000ed00

08003084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800308e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003092:	2b00      	cmp	r3, #0
 8003094:	db0b      	blt.n	80030ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003096:	79fb      	ldrb	r3, [r7, #7]
 8003098:	f003 021f 	and.w	r2, r3, #31
 800309c:	4907      	ldr	r1, [pc, #28]	@ (80030bc <__NVIC_EnableIRQ+0x38>)
 800309e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a2:	095b      	lsrs	r3, r3, #5
 80030a4:	2001      	movs	r0, #1
 80030a6:	fa00 f202 	lsl.w	r2, r0, r2
 80030aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	e000e100 	.word	0xe000e100

080030c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	6039      	str	r1, [r7, #0]
 80030ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	db0a      	blt.n	80030ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	490c      	ldr	r1, [pc, #48]	@ (800310c <__NVIC_SetPriority+0x4c>)
 80030da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030de:	0112      	lsls	r2, r2, #4
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	440b      	add	r3, r1
 80030e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030e8:	e00a      	b.n	8003100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	4908      	ldr	r1, [pc, #32]	@ (8003110 <__NVIC_SetPriority+0x50>)
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	3b04      	subs	r3, #4
 80030f8:	0112      	lsls	r2, r2, #4
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	440b      	add	r3, r1
 80030fe:	761a      	strb	r2, [r3, #24]
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	e000e100 	.word	0xe000e100
 8003110:	e000ed00 	.word	0xe000ed00

08003114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003114:	b480      	push	{r7}
 8003116:	b089      	sub	sp, #36	@ 0x24
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f1c3 0307 	rsb	r3, r3, #7
 800312e:	2b04      	cmp	r3, #4
 8003130:	bf28      	it	cs
 8003132:	2304      	movcs	r3, #4
 8003134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	3304      	adds	r3, #4
 800313a:	2b06      	cmp	r3, #6
 800313c:	d902      	bls.n	8003144 <NVIC_EncodePriority+0x30>
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3b03      	subs	r3, #3
 8003142:	e000      	b.n	8003146 <NVIC_EncodePriority+0x32>
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003148:	f04f 32ff 	mov.w	r2, #4294967295
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	43da      	mvns	r2, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	401a      	ands	r2, r3
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800315c:	f04f 31ff 	mov.w	r1, #4294967295
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	fa01 f303 	lsl.w	r3, r1, r3
 8003166:	43d9      	mvns	r1, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800316c:	4313      	orrs	r3, r2
         );
}
 800316e:	4618      	mov	r0, r3
 8003170:	3724      	adds	r7, #36	@ 0x24
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b082      	sub	sp, #8
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7ff ff4c 	bl	8003020 <__NVIC_SetPriorityGrouping>
}
 8003188:	bf00      	nop
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
 800319c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800319e:	2300      	movs	r3, #0
 80031a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031a2:	f7ff ff61 	bl	8003068 <__NVIC_GetPriorityGrouping>
 80031a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	68b9      	ldr	r1, [r7, #8]
 80031ac:	6978      	ldr	r0, [r7, #20]
 80031ae:	f7ff ffb1 	bl	8003114 <NVIC_EncodePriority>
 80031b2:	4602      	mov	r2, r0
 80031b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031b8:	4611      	mov	r1, r2
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff ff80 	bl	80030c0 <__NVIC_SetPriority>
}
 80031c0:	bf00      	nop
 80031c2:	3718      	adds	r7, #24
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff ff54 	bl	8003084 <__NVIC_EnableIRQ>
}
 80031dc:	bf00      	nop
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e00e      	b.n	8003214 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	795b      	ldrb	r3, [r3, #5]
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d105      	bne.n	800320c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7fd fed8 	bl	8000fbc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003228:	f7ff feca 	bl	8002fc0 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e099      	b.n	800336c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0201 	bic.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003258:	e00f      	b.n	800327a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800325a:	f7ff feb1 	bl	8002fc0 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b05      	cmp	r3, #5
 8003266:	d908      	bls.n	800327a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2220      	movs	r2, #32
 800326c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2203      	movs	r2, #3
 8003272:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e078      	b.n	800336c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1e8      	bne.n	800325a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	4b38      	ldr	r3, [pc, #224]	@ (8003374 <HAL_DMA_Init+0x158>)
 8003294:	4013      	ands	r3, r2
 8003296:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d0:	2b04      	cmp	r3, #4
 80032d2:	d107      	bne.n	80032e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032dc:	4313      	orrs	r3, r2
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f023 0307 	bic.w	r3, r3, #7
 80032fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	4313      	orrs	r3, r2
 8003304:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330a:	2b04      	cmp	r3, #4
 800330c:	d117      	bne.n	800333e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	4313      	orrs	r3, r2
 8003316:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00e      	beq.n	800333e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 fa6f 	bl	8003804 <DMA_CheckFifoParam>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d008      	beq.n	800333e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2240      	movs	r2, #64	@ 0x40
 8003330:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800333a:	2301      	movs	r3, #1
 800333c:	e016      	b.n	800336c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 fa26 	bl	8003798 <DMA_CalcBaseAndBitshift>
 800334c:	4603      	mov	r3, r0
 800334e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003354:	223f      	movs	r2, #63	@ 0x3f
 8003356:	409a      	lsls	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	f010803f 	.word	0xf010803f

08003378 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
 8003384:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003386:	2300      	movs	r3, #0
 8003388:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003396:	2b01      	cmp	r3, #1
 8003398:	d101      	bne.n	800339e <HAL_DMA_Start_IT+0x26>
 800339a:	2302      	movs	r3, #2
 800339c:	e040      	b.n	8003420 <HAL_DMA_Start_IT+0xa8>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d12f      	bne.n	8003412 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2202      	movs	r2, #2
 80033b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	68b9      	ldr	r1, [r7, #8]
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f9b8 	bl	800373c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d0:	223f      	movs	r2, #63	@ 0x3f
 80033d2:	409a      	lsls	r2, r3
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0216 	orr.w	r2, r2, #22
 80033e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d007      	beq.n	8003400 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0208 	orr.w	r2, r2, #8
 80033fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0201 	orr.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	e005      	b.n	800341e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800341a:	2302      	movs	r3, #2
 800341c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800341e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003420:	4618      	mov	r0, r3
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003434:	4b8e      	ldr	r3, [pc, #568]	@ (8003670 <HAL_DMA_IRQHandler+0x248>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a8e      	ldr	r2, [pc, #568]	@ (8003674 <HAL_DMA_IRQHandler+0x24c>)
 800343a:	fba2 2303 	umull	r2, r3, r2, r3
 800343e:	0a9b      	lsrs	r3, r3, #10
 8003440:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003446:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003452:	2208      	movs	r2, #8
 8003454:	409a      	lsls	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	4013      	ands	r3, r2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d01a      	beq.n	8003494 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	d013      	beq.n	8003494 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0204 	bic.w	r2, r2, #4
 800347a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003480:	2208      	movs	r2, #8
 8003482:	409a      	lsls	r2, r3
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800348c:	f043 0201 	orr.w	r2, r3, #1
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003498:	2201      	movs	r2, #1
 800349a:	409a      	lsls	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4013      	ands	r3, r2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d012      	beq.n	80034ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00b      	beq.n	80034ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b6:	2201      	movs	r2, #1
 80034b8:	409a      	lsls	r2, r3
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c2:	f043 0202 	orr.w	r2, r3, #2
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ce:	2204      	movs	r2, #4
 80034d0:	409a      	lsls	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	4013      	ands	r3, r2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d012      	beq.n	8003500 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00b      	beq.n	8003500 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ec:	2204      	movs	r2, #4
 80034ee:	409a      	lsls	r2, r3
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f8:	f043 0204 	orr.w	r2, r3, #4
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003504:	2210      	movs	r2, #16
 8003506:	409a      	lsls	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	4013      	ands	r3, r2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d043      	beq.n	8003598 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	2b00      	cmp	r3, #0
 800351c:	d03c      	beq.n	8003598 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003522:	2210      	movs	r2, #16
 8003524:	409a      	lsls	r2, r3
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d018      	beq.n	800356a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d108      	bne.n	8003558 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354a:	2b00      	cmp	r3, #0
 800354c:	d024      	beq.n	8003598 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	4798      	blx	r3
 8003556:	e01f      	b.n	8003598 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800355c:	2b00      	cmp	r3, #0
 800355e:	d01b      	beq.n	8003598 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	4798      	blx	r3
 8003568:	e016      	b.n	8003598 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003574:	2b00      	cmp	r3, #0
 8003576:	d107      	bne.n	8003588 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0208 	bic.w	r2, r2, #8
 8003586:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800359c:	2220      	movs	r2, #32
 800359e:	409a      	lsls	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4013      	ands	r3, r2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 808f 	beq.w	80036c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0310 	and.w	r3, r3, #16
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 8087 	beq.w	80036c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035be:	2220      	movs	r2, #32
 80035c0:	409a      	lsls	r2, r3
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b05      	cmp	r3, #5
 80035d0:	d136      	bne.n	8003640 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0216 	bic.w	r2, r2, #22
 80035e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695a      	ldr	r2, [r3, #20]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d103      	bne.n	8003602 <HAL_DMA_IRQHandler+0x1da>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d007      	beq.n	8003612 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0208 	bic.w	r2, r2, #8
 8003610:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003616:	223f      	movs	r2, #63	@ 0x3f
 8003618:	409a      	lsls	r2, r3
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003632:	2b00      	cmp	r3, #0
 8003634:	d07e      	beq.n	8003734 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	4798      	blx	r3
        }
        return;
 800363e:	e079      	b.n	8003734 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d01d      	beq.n	800368a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10d      	bne.n	8003678 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003660:	2b00      	cmp	r3, #0
 8003662:	d031      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	4798      	blx	r3
 800366c:	e02c      	b.n	80036c8 <HAL_DMA_IRQHandler+0x2a0>
 800366e:	bf00      	nop
 8003670:	20000004 	.word	0x20000004
 8003674:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800367c:	2b00      	cmp	r3, #0
 800367e:	d023      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	4798      	blx	r3
 8003688:	e01e      	b.n	80036c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10f      	bne.n	80036b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0210 	bic.w	r2, r2, #16
 80036a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d032      	beq.n	8003736 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d022      	beq.n	8003722 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2205      	movs	r2, #5
 80036e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0201 	bic.w	r2, r2, #1
 80036f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	3301      	adds	r3, #1
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d307      	bcc.n	8003710 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f2      	bne.n	80036f4 <HAL_DMA_IRQHandler+0x2cc>
 800370e:	e000      	b.n	8003712 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003710:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003726:	2b00      	cmp	r3, #0
 8003728:	d005      	beq.n	8003736 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	4798      	blx	r3
 8003732:	e000      	b.n	8003736 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003734:	bf00      	nop
    }
  }
}
 8003736:	3718      	adds	r7, #24
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
 8003748:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003758:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	2b40      	cmp	r3, #64	@ 0x40
 8003768:	d108      	bne.n	800377c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800377a:	e007      	b.n	800378c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	60da      	str	r2, [r3, #12]
}
 800378c:	bf00      	nop
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	3b10      	subs	r3, #16
 80037a8:	4a14      	ldr	r2, [pc, #80]	@ (80037fc <DMA_CalcBaseAndBitshift+0x64>)
 80037aa:	fba2 2303 	umull	r2, r3, r2, r3
 80037ae:	091b      	lsrs	r3, r3, #4
 80037b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037b2:	4a13      	ldr	r2, [pc, #76]	@ (8003800 <DMA_CalcBaseAndBitshift+0x68>)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4413      	add	r3, r2
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	461a      	mov	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2b03      	cmp	r3, #3
 80037c4:	d909      	bls.n	80037da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80037ce:	f023 0303 	bic.w	r3, r3, #3
 80037d2:	1d1a      	adds	r2, r3, #4
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	659a      	str	r2, [r3, #88]	@ 0x58
 80037d8:	e007      	b.n	80037ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80037e2:	f023 0303 	bic.w	r3, r3, #3
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	aaaaaaab 	.word	0xaaaaaaab
 8003800:	0800e840 	.word	0x0800e840

08003804 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800380c:	2300      	movs	r3, #0
 800380e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003814:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d11f      	bne.n	800385e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b03      	cmp	r3, #3
 8003822:	d856      	bhi.n	80038d2 <DMA_CheckFifoParam+0xce>
 8003824:	a201      	add	r2, pc, #4	@ (adr r2, 800382c <DMA_CheckFifoParam+0x28>)
 8003826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382a:	bf00      	nop
 800382c:	0800383d 	.word	0x0800383d
 8003830:	0800384f 	.word	0x0800384f
 8003834:	0800383d 	.word	0x0800383d
 8003838:	080038d3 	.word	0x080038d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003840:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d046      	beq.n	80038d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800384c:	e043      	b.n	80038d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003852:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003856:	d140      	bne.n	80038da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800385c:	e03d      	b.n	80038da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003866:	d121      	bne.n	80038ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2b03      	cmp	r3, #3
 800386c:	d837      	bhi.n	80038de <DMA_CheckFifoParam+0xda>
 800386e:	a201      	add	r2, pc, #4	@ (adr r2, 8003874 <DMA_CheckFifoParam+0x70>)
 8003870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003874:	08003885 	.word	0x08003885
 8003878:	0800388b 	.word	0x0800388b
 800387c:	08003885 	.word	0x08003885
 8003880:	0800389d 	.word	0x0800389d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	73fb      	strb	r3, [r7, #15]
      break;
 8003888:	e030      	b.n	80038ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800388e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d025      	beq.n	80038e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800389a:	e022      	b.n	80038e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80038a4:	d11f      	bne.n	80038e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038aa:	e01c      	b.n	80038e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d903      	bls.n	80038ba <DMA_CheckFifoParam+0xb6>
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	2b03      	cmp	r3, #3
 80038b6:	d003      	beq.n	80038c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038b8:	e018      	b.n	80038ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	73fb      	strb	r3, [r7, #15]
      break;
 80038be:	e015      	b.n	80038ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00e      	beq.n	80038ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	73fb      	strb	r3, [r7, #15]
      break;
 80038d0:	e00b      	b.n	80038ea <DMA_CheckFifoParam+0xe6>
      break;
 80038d2:	bf00      	nop
 80038d4:	e00a      	b.n	80038ec <DMA_CheckFifoParam+0xe8>
      break;
 80038d6:	bf00      	nop
 80038d8:	e008      	b.n	80038ec <DMA_CheckFifoParam+0xe8>
      break;
 80038da:	bf00      	nop
 80038dc:	e006      	b.n	80038ec <DMA_CheckFifoParam+0xe8>
      break;
 80038de:	bf00      	nop
 80038e0:	e004      	b.n	80038ec <DMA_CheckFifoParam+0xe8>
      break;
 80038e2:	bf00      	nop
 80038e4:	e002      	b.n	80038ec <DMA_CheckFifoParam+0xe8>
      break;   
 80038e6:	bf00      	nop
 80038e8:	e000      	b.n	80038ec <DMA_CheckFifoParam+0xe8>
      break;
 80038ea:	bf00      	nop
    }
  } 
  
  return status; 
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3714      	adds	r7, #20
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop

080038fc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e03b      	b.n	8003986 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d106      	bne.n	8003928 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7fd fbbe 	bl	80010a4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2202      	movs	r2, #2
 800392c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800394c:	f023 0107 	bic.w	r1, r3, #7
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003962:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003966:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	68d1      	ldr	r1, [r2, #12]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6812      	ldr	r2, [r2, #0]
 8003972:	430b      	orrs	r3, r1
 8003974:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b084      	sub	sp, #16
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d026      	beq.n	80039fe <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d021      	beq.n	80039fe <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039c8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ce:	f043 0201 	orr.w	r2, r3, #1
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2201      	movs	r2, #1
 80039dc:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2204      	movs	r2, #4
 80039e2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f003 0320 	and.w	r3, r3, #32
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d026      	beq.n	8003a56 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d021      	beq.n	8003a56 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a20:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2220      	movs	r2, #32
 8003a28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a2e:	f043 0202 	orr.w	r2, r3, #2
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2204      	movs	r2, #4
 8003a3a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f003 0308 	and.w	r3, r3, #8
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d026      	beq.n	8003aae <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d021      	beq.n	8003aae <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a78:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2208      	movs	r2, #8
 8003a80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a86:	f043 0204 	orr.w	r2, r3, #4
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2204      	movs	r2, #4
 8003a92:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d013      	beq.n	8003ae0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00e      	beq.n	8003ae0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ad0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2204      	movs	r2, #4
 8003ad8:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f853 	bl	8003b86 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d024      	beq.n	8003b34 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d01f      	beq.n	8003b34 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003b02:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2202      	movs	r2, #2
 8003b0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f003 0310 	and.w	r3, r3, #16
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d01f      	beq.n	8003b7e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d01a      	beq.n	8003b7e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b56:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f80e 	bl	8003b9a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003b7e:	bf00      	nop
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
	...

08003bb0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d101      	bne.n	8003bd0 <HAL_DMA2D_ConfigLayer+0x20>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	e079      	b.n	8003cc4 <HAL_DMA2D_ConfigLayer+0x114>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	011b      	lsls	r3, r3, #4
 8003be4:	3318      	adds	r3, #24
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	4413      	add	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	041b      	lsls	r3, r3, #16
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003bfa:	4b35      	ldr	r3, [pc, #212]	@ (8003cd0 <HAL_DMA2D_ConfigLayer+0x120>)
 8003bfc:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b0a      	cmp	r3, #10
 8003c04:	d003      	beq.n	8003c0e <HAL_DMA2D_ConfigLayer+0x5e>
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b09      	cmp	r3, #9
 8003c0c:	d107      	bne.n	8003c1e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]
 8003c1c:	e005      	b.n	8003c2a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	061b      	lsls	r3, r3, #24
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d120      	bne.n	8003c72 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	ea02 0103 	and.w	r1, r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	6812      	ldr	r2, [r2, #0]
 8003c50:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2b0a      	cmp	r3, #10
 8003c58:	d003      	beq.n	8003c62 <HAL_DMA2D_ConfigLayer+0xb2>
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b09      	cmp	r3, #9
 8003c60:	d127      	bne.n	8003cb2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003c6e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c70:	e01f      	b.n	8003cb2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	69da      	ldr	r2, [r3, #28]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	43db      	mvns	r3, r3
 8003c7c:	ea02 0103 	and.w	r1, r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	6812      	ldr	r2, [r2, #0]
 8003c92:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	2b0a      	cmp	r3, #10
 8003c9a:	d003      	beq.n	8003ca4 <HAL_DMA2D_ConfigLayer+0xf4>
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	2b09      	cmp	r3, #9
 8003ca2:	d106      	bne.n	8003cb2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003cb0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	371c      	adds	r7, #28
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	ff03000f 	.word	0xff03000f

08003cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b089      	sub	sp, #36	@ 0x24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cea:	2300      	movs	r3, #0
 8003cec:	61fb      	str	r3, [r7, #28]
 8003cee:	e177      	b.n	8003fe0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	4013      	ands	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	f040 8166 	bne.w	8003fda <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d005      	beq.n	8003d26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d130      	bne.n	8003d88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	2203      	movs	r2, #3
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	43db      	mvns	r3, r3
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	43db      	mvns	r3, r3
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	091b      	lsrs	r3, r3, #4
 8003d72:	f003 0201 	and.w	r2, r3, #1
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f003 0303 	and.w	r3, r3, #3
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d017      	beq.n	8003dc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	2203      	movs	r2, #3
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	43db      	mvns	r3, r3
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	4013      	ands	r3, r2
 8003daa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f003 0303 	and.w	r3, r3, #3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d123      	bne.n	8003e18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	08da      	lsrs	r2, r3, #3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3208      	adds	r2, #8
 8003dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	220f      	movs	r2, #15
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	43db      	mvns	r3, r3
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	4013      	ands	r3, r2
 8003df2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	691a      	ldr	r2, [r3, #16]
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f003 0307 	and.w	r3, r3, #7
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	08da      	lsrs	r2, r3, #3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	3208      	adds	r2, #8
 8003e12:	69b9      	ldr	r1, [r7, #24]
 8003e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	2203      	movs	r2, #3
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	43db      	mvns	r3, r3
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f003 0203 	and.w	r2, r3, #3
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 80c0 	beq.w	8003fda <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	4b66      	ldr	r3, [pc, #408]	@ (8003ff8 <HAL_GPIO_Init+0x324>)
 8003e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e62:	4a65      	ldr	r2, [pc, #404]	@ (8003ff8 <HAL_GPIO_Init+0x324>)
 8003e64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e68:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e6a:	4b63      	ldr	r3, [pc, #396]	@ (8003ff8 <HAL_GPIO_Init+0x324>)
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e76:	4a61      	ldr	r2, [pc, #388]	@ (8003ffc <HAL_GPIO_Init+0x328>)
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	089b      	lsrs	r3, r3, #2
 8003e7c:	3302      	adds	r3, #2
 8003e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f003 0303 	and.w	r3, r3, #3
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	220f      	movs	r2, #15
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	43db      	mvns	r3, r3
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	4013      	ands	r3, r2
 8003e98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a58      	ldr	r2, [pc, #352]	@ (8004000 <HAL_GPIO_Init+0x32c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d037      	beq.n	8003f12 <HAL_GPIO_Init+0x23e>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a57      	ldr	r2, [pc, #348]	@ (8004004 <HAL_GPIO_Init+0x330>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d031      	beq.n	8003f0e <HAL_GPIO_Init+0x23a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a56      	ldr	r2, [pc, #344]	@ (8004008 <HAL_GPIO_Init+0x334>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d02b      	beq.n	8003f0a <HAL_GPIO_Init+0x236>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a55      	ldr	r2, [pc, #340]	@ (800400c <HAL_GPIO_Init+0x338>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d025      	beq.n	8003f06 <HAL_GPIO_Init+0x232>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a54      	ldr	r2, [pc, #336]	@ (8004010 <HAL_GPIO_Init+0x33c>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d01f      	beq.n	8003f02 <HAL_GPIO_Init+0x22e>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a53      	ldr	r2, [pc, #332]	@ (8004014 <HAL_GPIO_Init+0x340>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d019      	beq.n	8003efe <HAL_GPIO_Init+0x22a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a52      	ldr	r2, [pc, #328]	@ (8004018 <HAL_GPIO_Init+0x344>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d013      	beq.n	8003efa <HAL_GPIO_Init+0x226>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a51      	ldr	r2, [pc, #324]	@ (800401c <HAL_GPIO_Init+0x348>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d00d      	beq.n	8003ef6 <HAL_GPIO_Init+0x222>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a50      	ldr	r2, [pc, #320]	@ (8004020 <HAL_GPIO_Init+0x34c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d007      	beq.n	8003ef2 <HAL_GPIO_Init+0x21e>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a4f      	ldr	r2, [pc, #316]	@ (8004024 <HAL_GPIO_Init+0x350>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d101      	bne.n	8003eee <HAL_GPIO_Init+0x21a>
 8003eea:	2309      	movs	r3, #9
 8003eec:	e012      	b.n	8003f14 <HAL_GPIO_Init+0x240>
 8003eee:	230a      	movs	r3, #10
 8003ef0:	e010      	b.n	8003f14 <HAL_GPIO_Init+0x240>
 8003ef2:	2308      	movs	r3, #8
 8003ef4:	e00e      	b.n	8003f14 <HAL_GPIO_Init+0x240>
 8003ef6:	2307      	movs	r3, #7
 8003ef8:	e00c      	b.n	8003f14 <HAL_GPIO_Init+0x240>
 8003efa:	2306      	movs	r3, #6
 8003efc:	e00a      	b.n	8003f14 <HAL_GPIO_Init+0x240>
 8003efe:	2305      	movs	r3, #5
 8003f00:	e008      	b.n	8003f14 <HAL_GPIO_Init+0x240>
 8003f02:	2304      	movs	r3, #4
 8003f04:	e006      	b.n	8003f14 <HAL_GPIO_Init+0x240>
 8003f06:	2303      	movs	r3, #3
 8003f08:	e004      	b.n	8003f14 <HAL_GPIO_Init+0x240>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	e002      	b.n	8003f14 <HAL_GPIO_Init+0x240>
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e000      	b.n	8003f14 <HAL_GPIO_Init+0x240>
 8003f12:	2300      	movs	r3, #0
 8003f14:	69fa      	ldr	r2, [r7, #28]
 8003f16:	f002 0203 	and.w	r2, r2, #3
 8003f1a:	0092      	lsls	r2, r2, #2
 8003f1c:	4093      	lsls	r3, r2
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f24:	4935      	ldr	r1, [pc, #212]	@ (8003ffc <HAL_GPIO_Init+0x328>)
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	089b      	lsrs	r3, r3, #2
 8003f2a:	3302      	adds	r3, #2
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f32:	4b3d      	ldr	r3, [pc, #244]	@ (8004028 <HAL_GPIO_Init+0x354>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	43db      	mvns	r3, r3
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f56:	4a34      	ldr	r2, [pc, #208]	@ (8004028 <HAL_GPIO_Init+0x354>)
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f5c:	4b32      	ldr	r3, [pc, #200]	@ (8004028 <HAL_GPIO_Init+0x354>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	43db      	mvns	r3, r3
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f80:	4a29      	ldr	r2, [pc, #164]	@ (8004028 <HAL_GPIO_Init+0x354>)
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f86:	4b28      	ldr	r3, [pc, #160]	@ (8004028 <HAL_GPIO_Init+0x354>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	43db      	mvns	r3, r3
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	4013      	ands	r3, r2
 8003f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003faa:	4a1f      	ldr	r2, [pc, #124]	@ (8004028 <HAL_GPIO_Init+0x354>)
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8004028 <HAL_GPIO_Init+0x354>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d003      	beq.n	8003fd4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fd4:	4a14      	ldr	r2, [pc, #80]	@ (8004028 <HAL_GPIO_Init+0x354>)
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	61fb      	str	r3, [r7, #28]
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	2b0f      	cmp	r3, #15
 8003fe4:	f67f ae84 	bls.w	8003cf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003fe8:	bf00      	nop
 8003fea:	bf00      	nop
 8003fec:	3724      	adds	r7, #36	@ 0x24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	40013800 	.word	0x40013800
 8004000:	40020000 	.word	0x40020000
 8004004:	40020400 	.word	0x40020400
 8004008:	40020800 	.word	0x40020800
 800400c:	40020c00 	.word	0x40020c00
 8004010:	40021000 	.word	0x40021000
 8004014:	40021400 	.word	0x40021400
 8004018:	40021800 	.word	0x40021800
 800401c:	40021c00 	.word	0x40021c00
 8004020:	40022000 	.word	0x40022000
 8004024:	40022400 	.word	0x40022400
 8004028:	40013c00 	.word	0x40013c00

0800402c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	460b      	mov	r3, r1
 8004036:	807b      	strh	r3, [r7, #2]
 8004038:	4613      	mov	r3, r2
 800403a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800403c:	787b      	ldrb	r3, [r7, #1]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004042:	887a      	ldrh	r2, [r7, #2]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004048:	e003      	b.n	8004052 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800404a:	887b      	ldrh	r3, [r7, #2]
 800404c:	041a      	lsls	r2, r3, #16
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	619a      	str	r2, [r3, #24]
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b086      	sub	sp, #24
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4618      	mov	r0, r3
 8004076:	f005 faef 	bl	8009658 <USB_GetMode>
 800407a:	4603      	mov	r3, r0
 800407c:	2b01      	cmp	r3, #1
 800407e:	f040 80fb 	bne.w	8004278 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4618      	mov	r0, r3
 8004088:	f005 fab2 	bl	80095f0 <USB_ReadInterrupts>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 80f1 	beq.w	8004276 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4618      	mov	r0, r3
 800409a:	f005 faa9 	bl	80095f0 <USB_ReadInterrupts>
 800409e:	4603      	mov	r3, r0
 80040a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80040a8:	d104      	bne.n	80040b4 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80040b2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f005 fa99 	bl	80095f0 <USB_ReadInterrupts>
 80040be:	4603      	mov	r3, r0
 80040c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040c8:	d104      	bne.n	80040d4 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80040d2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f005 fa89 	bl	80095f0 <USB_ReadInterrupts>
 80040de:	4603      	mov	r3, r0
 80040e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80040e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040e8:	d104      	bne.n	80040f4 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80040f2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f005 fa79 	bl	80095f0 <USB_ReadInterrupts>
 80040fe:	4603      	mov	r3, r0
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b02      	cmp	r3, #2
 8004106:	d103      	bne.n	8004110 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2202      	movs	r2, #2
 800410e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4618      	mov	r0, r3
 8004116:	f005 fa6b 	bl	80095f0 <USB_ReadInterrupts>
 800411a:	4603      	mov	r3, r0
 800411c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004120:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004124:	d120      	bne.n	8004168 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800412e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b00      	cmp	r3, #0
 800413e:	d113      	bne.n	8004168 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004140:	2110      	movs	r1, #16
 8004142:	6938      	ldr	r0, [r7, #16]
 8004144:	f005 f99c 	bl	8009480 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004148:	6938      	ldr	r0, [r7, #16]
 800414a:	f005 f9cb 	bl	80094e4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	7a5b      	ldrb	r3, [r3, #9]
 8004152:	2b02      	cmp	r3, #2
 8004154:	d105      	bne.n	8004162 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2101      	movs	r1, #1
 800415c:	4618      	mov	r0, r3
 800415e:	f005 fa89 	bl	8009674 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f006 fdd8 	bl	800ad18 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4618      	mov	r0, r3
 800416e:	f005 fa3f 	bl	80095f0 <USB_ReadInterrupts>
 8004172:	4603      	mov	r3, r0
 8004174:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004178:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800417c:	d102      	bne.n	8004184 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f001 fca1 	bl	8005ac6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4618      	mov	r0, r3
 800418a:	f005 fa31 	bl	80095f0 <USB_ReadInterrupts>
 800418e:	4603      	mov	r3, r0
 8004190:	f003 0308 	and.w	r3, r3, #8
 8004194:	2b08      	cmp	r3, #8
 8004196:	d106      	bne.n	80041a6 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f006 fda1 	bl	800ace0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2208      	movs	r2, #8
 80041a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f005 fa20 	bl	80095f0 <USB_ReadInterrupts>
 80041b0:	4603      	mov	r3, r0
 80041b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80041ba:	d139      	bne.n	8004230 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f005 fa94 	bl	80096ee <USB_HC_ReadInterrupt>
 80041c6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80041c8:	2300      	movs	r3, #0
 80041ca:	617b      	str	r3, [r7, #20]
 80041cc:	e025      	b.n	800421a <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f003 030f 	and.w	r3, r3, #15
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	fa22 f303 	lsr.w	r3, r2, r3
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d018      	beq.n	8004214 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	015a      	lsls	r2, r3, #5
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041f8:	d106      	bne.n	8004208 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	4619      	mov	r1, r3
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 f859 	bl	80042b8 <HCD_HC_IN_IRQHandler>
 8004206:	e005      	b.n	8004214 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	b2db      	uxtb	r3, r3
 800420c:	4619      	mov	r1, r3
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 febb 	bl	8004f8a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	3301      	adds	r3, #1
 8004218:	617b      	str	r3, [r7, #20]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	795b      	ldrb	r3, [r3, #5]
 800421e:	461a      	mov	r2, r3
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	4293      	cmp	r3, r2
 8004224:	d3d3      	bcc.n	80041ce <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800422e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4618      	mov	r0, r3
 8004236:	f005 f9db 	bl	80095f0 <USB_ReadInterrupts>
 800423a:	4603      	mov	r3, r0
 800423c:	f003 0310 	and.w	r3, r3, #16
 8004240:	2b10      	cmp	r3, #16
 8004242:	d101      	bne.n	8004248 <HAL_HCD_IRQHandler+0x1ea>
 8004244:	2301      	movs	r3, #1
 8004246:	e000      	b.n	800424a <HAL_HCD_IRQHandler+0x1ec>
 8004248:	2300      	movs	r3, #0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d014      	beq.n	8004278 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	699a      	ldr	r2, [r3, #24]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 0210 	bic.w	r2, r2, #16
 800425c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f001 fb52 	bl	8005908 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699a      	ldr	r2, [r3, #24]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0210 	orr.w	r2, r2, #16
 8004272:	619a      	str	r2, [r3, #24]
 8004274:	e000      	b.n	8004278 <HAL_HCD_IRQHandler+0x21a>
      return;
 8004276:	bf00      	nop
    }
  }
}
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b082      	sub	sp, #8
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800428c:	2b01      	cmp	r3, #1
 800428e:	d101      	bne.n	8004294 <HAL_HCD_Stop+0x16>
 8004290:	2302      	movs	r3, #2
 8004292:	e00d      	b.n	80042b0 <HAL_HCD_Stop+0x32>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f005 fb55 	bl	8009950 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	460b      	mov	r3, r1
 80042c2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	78fa      	ldrb	r2, [r7, #3]
 80042d4:	4611      	mov	r1, r2
 80042d6:	4618      	mov	r0, r3
 80042d8:	f005 f99d 	bl	8009616 <USB_ReadChInterrupts>
 80042dc:	4603      	mov	r3, r0
 80042de:	f003 0304 	and.w	r3, r3, #4
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d11a      	bne.n	800431c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80042e6:	78fb      	ldrb	r3, [r7, #3]
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042f2:	461a      	mov	r2, r3
 80042f4:	2304      	movs	r3, #4
 80042f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80042f8:	78fa      	ldrb	r2, [r7, #3]
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	4613      	mov	r3, r2
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	1a9b      	subs	r3, r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	334d      	adds	r3, #77	@ 0x4d
 8004308:	2207      	movs	r2, #7
 800430a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	78fa      	ldrb	r2, [r7, #3]
 8004312:	4611      	mov	r1, r2
 8004314:	4618      	mov	r0, r3
 8004316:	f005 f9fb 	bl	8009710 <USB_HC_Halt>
 800431a:	e09e      	b.n	800445a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	78fa      	ldrb	r2, [r7, #3]
 8004322:	4611      	mov	r1, r2
 8004324:	4618      	mov	r0, r3
 8004326:	f005 f976 	bl	8009616 <USB_ReadChInterrupts>
 800432a:	4603      	mov	r3, r0
 800432c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004330:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004334:	d11b      	bne.n	800436e <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004336:	78fb      	ldrb	r3, [r7, #3]
 8004338:	015a      	lsls	r2, r3, #5
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	4413      	add	r3, r2
 800433e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004342:	461a      	mov	r2, r3
 8004344:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004348:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800434a:	78fa      	ldrb	r2, [r7, #3]
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	4613      	mov	r3, r2
 8004350:	011b      	lsls	r3, r3, #4
 8004352:	1a9b      	subs	r3, r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	440b      	add	r3, r1
 8004358:	334d      	adds	r3, #77	@ 0x4d
 800435a:	2208      	movs	r2, #8
 800435c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	78fa      	ldrb	r2, [r7, #3]
 8004364:	4611      	mov	r1, r2
 8004366:	4618      	mov	r0, r3
 8004368:	f005 f9d2 	bl	8009710 <USB_HC_Halt>
 800436c:	e075      	b.n	800445a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	78fa      	ldrb	r2, [r7, #3]
 8004374:	4611      	mov	r1, r2
 8004376:	4618      	mov	r0, r3
 8004378:	f005 f94d 	bl	8009616 <USB_ReadChInterrupts>
 800437c:	4603      	mov	r3, r0
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b08      	cmp	r3, #8
 8004384:	d11a      	bne.n	80043bc <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004386:	78fb      	ldrb	r3, [r7, #3]
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	4413      	add	r3, r2
 800438e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004392:	461a      	mov	r2, r3
 8004394:	2308      	movs	r3, #8
 8004396:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004398:	78fa      	ldrb	r2, [r7, #3]
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	4613      	mov	r3, r2
 800439e:	011b      	lsls	r3, r3, #4
 80043a0:	1a9b      	subs	r3, r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	440b      	add	r3, r1
 80043a6:	334d      	adds	r3, #77	@ 0x4d
 80043a8:	2206      	movs	r2, #6
 80043aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	78fa      	ldrb	r2, [r7, #3]
 80043b2:	4611      	mov	r1, r2
 80043b4:	4618      	mov	r0, r3
 80043b6:	f005 f9ab 	bl	8009710 <USB_HC_Halt>
 80043ba:	e04e      	b.n	800445a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	78fa      	ldrb	r2, [r7, #3]
 80043c2:	4611      	mov	r1, r2
 80043c4:	4618      	mov	r0, r3
 80043c6:	f005 f926 	bl	8009616 <USB_ReadChInterrupts>
 80043ca:	4603      	mov	r3, r0
 80043cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043d4:	d11b      	bne.n	800440e <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80043d6:	78fb      	ldrb	r3, [r7, #3]
 80043d8:	015a      	lsls	r2, r3, #5
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	4413      	add	r3, r2
 80043de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043e2:	461a      	mov	r2, r3
 80043e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80043e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80043ea:	78fa      	ldrb	r2, [r7, #3]
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	4613      	mov	r3, r2
 80043f0:	011b      	lsls	r3, r3, #4
 80043f2:	1a9b      	subs	r3, r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	440b      	add	r3, r1
 80043f8:	334d      	adds	r3, #77	@ 0x4d
 80043fa:	2209      	movs	r2, #9
 80043fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	78fa      	ldrb	r2, [r7, #3]
 8004404:	4611      	mov	r1, r2
 8004406:	4618      	mov	r0, r3
 8004408:	f005 f982 	bl	8009710 <USB_HC_Halt>
 800440c:	e025      	b.n	800445a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	78fa      	ldrb	r2, [r7, #3]
 8004414:	4611      	mov	r1, r2
 8004416:	4618      	mov	r0, r3
 8004418:	f005 f8fd 	bl	8009616 <USB_ReadChInterrupts>
 800441c:	4603      	mov	r3, r0
 800441e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004422:	2b80      	cmp	r3, #128	@ 0x80
 8004424:	d119      	bne.n	800445a <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004426:	78fb      	ldrb	r3, [r7, #3]
 8004428:	015a      	lsls	r2, r3, #5
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	4413      	add	r3, r2
 800442e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004432:	461a      	mov	r2, r3
 8004434:	2380      	movs	r3, #128	@ 0x80
 8004436:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004438:	78fa      	ldrb	r2, [r7, #3]
 800443a:	6879      	ldr	r1, [r7, #4]
 800443c:	4613      	mov	r3, r2
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	1a9b      	subs	r3, r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	334d      	adds	r3, #77	@ 0x4d
 8004448:	2207      	movs	r2, #7
 800444a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	78fa      	ldrb	r2, [r7, #3]
 8004452:	4611      	mov	r1, r2
 8004454:	4618      	mov	r0, r3
 8004456:	f005 f95b 	bl	8009710 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	78fa      	ldrb	r2, [r7, #3]
 8004460:	4611      	mov	r1, r2
 8004462:	4618      	mov	r0, r3
 8004464:	f005 f8d7 	bl	8009616 <USB_ReadChInterrupts>
 8004468:	4603      	mov	r3, r0
 800446a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800446e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004472:	d112      	bne.n	800449a <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	78fa      	ldrb	r2, [r7, #3]
 800447a:	4611      	mov	r1, r2
 800447c:	4618      	mov	r0, r3
 800447e:	f005 f947 	bl	8009710 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004482:	78fb      	ldrb	r3, [r7, #3]
 8004484:	015a      	lsls	r2, r3, #5
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	4413      	add	r3, r2
 800448a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800448e:	461a      	mov	r2, r3
 8004490:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004494:	6093      	str	r3, [r2, #8]
 8004496:	f000 bd75 	b.w	8004f84 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	78fa      	ldrb	r2, [r7, #3]
 80044a0:	4611      	mov	r1, r2
 80044a2:	4618      	mov	r0, r3
 80044a4:	f005 f8b7 	bl	8009616 <USB_ReadChInterrupts>
 80044a8:	4603      	mov	r3, r0
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	f040 8128 	bne.w	8004704 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80044b4:	78fb      	ldrb	r3, [r7, #3]
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044c0:	461a      	mov	r2, r3
 80044c2:	2320      	movs	r3, #32
 80044c4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80044c6:	78fa      	ldrb	r2, [r7, #3]
 80044c8:	6879      	ldr	r1, [r7, #4]
 80044ca:	4613      	mov	r3, r2
 80044cc:	011b      	lsls	r3, r3, #4
 80044ce:	1a9b      	subs	r3, r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	440b      	add	r3, r1
 80044d4:	331b      	adds	r3, #27
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d119      	bne.n	8004510 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80044dc:	78fa      	ldrb	r2, [r7, #3]
 80044de:	6879      	ldr	r1, [r7, #4]
 80044e0:	4613      	mov	r3, r2
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	1a9b      	subs	r3, r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	440b      	add	r3, r1
 80044ea:	331b      	adds	r3, #27
 80044ec:	2200      	movs	r2, #0
 80044ee:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80044f0:	78fb      	ldrb	r3, [r7, #3]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	78fa      	ldrb	r2, [r7, #3]
 8004500:	0151      	lsls	r1, r2, #5
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	440a      	add	r2, r1
 8004506:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800450a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800450e:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	799b      	ldrb	r3, [r3, #6]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d01b      	beq.n	8004550 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004518:	78fa      	ldrb	r2, [r7, #3]
 800451a:	6879      	ldr	r1, [r7, #4]
 800451c:	4613      	mov	r3, r2
 800451e:	011b      	lsls	r3, r3, #4
 8004520:	1a9b      	subs	r3, r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	440b      	add	r3, r1
 8004526:	3330      	adds	r3, #48	@ 0x30
 8004528:	6819      	ldr	r1, [r3, #0]
 800452a:	78fb      	ldrb	r3, [r7, #3]
 800452c:	015a      	lsls	r2, r3, #5
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	4413      	add	r3, r2
 8004532:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800453c:	78fa      	ldrb	r2, [r7, #3]
 800453e:	1ac9      	subs	r1, r1, r3
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	4613      	mov	r3, r2
 8004544:	011b      	lsls	r3, r3, #4
 8004546:	1a9b      	subs	r3, r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4403      	add	r3, r0
 800454c:	3338      	adds	r3, #56	@ 0x38
 800454e:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8004550:	78fa      	ldrb	r2, [r7, #3]
 8004552:	6879      	ldr	r1, [r7, #4]
 8004554:	4613      	mov	r3, r2
 8004556:	011b      	lsls	r3, r3, #4
 8004558:	1a9b      	subs	r3, r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	440b      	add	r3, r1
 800455e:	334d      	adds	r3, #77	@ 0x4d
 8004560:	2201      	movs	r2, #1
 8004562:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004564:	78fa      	ldrb	r2, [r7, #3]
 8004566:	6879      	ldr	r1, [r7, #4]
 8004568:	4613      	mov	r3, r2
 800456a:	011b      	lsls	r3, r3, #4
 800456c:	1a9b      	subs	r3, r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	440b      	add	r3, r1
 8004572:	3344      	adds	r3, #68	@ 0x44
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004578:	78fb      	ldrb	r3, [r7, #3]
 800457a:	015a      	lsls	r2, r3, #5
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	4413      	add	r3, r2
 8004580:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004584:	461a      	mov	r2, r3
 8004586:	2301      	movs	r3, #1
 8004588:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800458a:	78fa      	ldrb	r2, [r7, #3]
 800458c:	6879      	ldr	r1, [r7, #4]
 800458e:	4613      	mov	r3, r2
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	1a9b      	subs	r3, r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	440b      	add	r3, r1
 8004598:	3326      	adds	r3, #38	@ 0x26
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00a      	beq.n	80045b6 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80045a0:	78fa      	ldrb	r2, [r7, #3]
 80045a2:	6879      	ldr	r1, [r7, #4]
 80045a4:	4613      	mov	r3, r2
 80045a6:	011b      	lsls	r3, r3, #4
 80045a8:	1a9b      	subs	r3, r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	440b      	add	r3, r1
 80045ae:	3326      	adds	r3, #38	@ 0x26
 80045b0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d110      	bne.n	80045d8 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	78fa      	ldrb	r2, [r7, #3]
 80045bc:	4611      	mov	r1, r2
 80045be:	4618      	mov	r0, r3
 80045c0:	f005 f8a6 	bl	8009710 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80045c4:	78fb      	ldrb	r3, [r7, #3]
 80045c6:	015a      	lsls	r2, r3, #5
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	4413      	add	r3, r2
 80045cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045d0:	461a      	mov	r2, r3
 80045d2:	2310      	movs	r3, #16
 80045d4:	6093      	str	r3, [r2, #8]
 80045d6:	e03d      	b.n	8004654 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80045d8:	78fa      	ldrb	r2, [r7, #3]
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	4613      	mov	r3, r2
 80045de:	011b      	lsls	r3, r3, #4
 80045e0:	1a9b      	subs	r3, r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	440b      	add	r3, r1
 80045e6:	3326      	adds	r3, #38	@ 0x26
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	2b03      	cmp	r3, #3
 80045ec:	d00a      	beq.n	8004604 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80045ee:	78fa      	ldrb	r2, [r7, #3]
 80045f0:	6879      	ldr	r1, [r7, #4]
 80045f2:	4613      	mov	r3, r2
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	1a9b      	subs	r3, r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	440b      	add	r3, r1
 80045fc:	3326      	adds	r3, #38	@ 0x26
 80045fe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004600:	2b01      	cmp	r3, #1
 8004602:	d127      	bne.n	8004654 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004604:	78fb      	ldrb	r3, [r7, #3]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	4413      	add	r3, r2
 800460c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	78fa      	ldrb	r2, [r7, #3]
 8004614:	0151      	lsls	r1, r2, #5
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	440a      	add	r2, r1
 800461a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800461e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004622:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004624:	78fa      	ldrb	r2, [r7, #3]
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	4613      	mov	r3, r2
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	1a9b      	subs	r3, r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	334c      	adds	r3, #76	@ 0x4c
 8004634:	2201      	movs	r2, #1
 8004636:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004638:	78fa      	ldrb	r2, [r7, #3]
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	4613      	mov	r3, r2
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	1a9b      	subs	r3, r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	440b      	add	r3, r1
 8004646:	334c      	adds	r3, #76	@ 0x4c
 8004648:	781a      	ldrb	r2, [r3, #0]
 800464a:	78fb      	ldrb	r3, [r7, #3]
 800464c:	4619      	mov	r1, r3
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f006 fb70 	bl	800ad34 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	799b      	ldrb	r3, [r3, #6]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d13b      	bne.n	80046d4 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800465c:	78fa      	ldrb	r2, [r7, #3]
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	4613      	mov	r3, r2
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	1a9b      	subs	r3, r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	440b      	add	r3, r1
 800466a:	3338      	adds	r3, #56	@ 0x38
 800466c:	6819      	ldr	r1, [r3, #0]
 800466e:	78fa      	ldrb	r2, [r7, #3]
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	4613      	mov	r3, r2
 8004674:	011b      	lsls	r3, r3, #4
 8004676:	1a9b      	subs	r3, r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4403      	add	r3, r0
 800467c:	3328      	adds	r3, #40	@ 0x28
 800467e:	881b      	ldrh	r3, [r3, #0]
 8004680:	440b      	add	r3, r1
 8004682:	1e59      	subs	r1, r3, #1
 8004684:	78fa      	ldrb	r2, [r7, #3]
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	4613      	mov	r3, r2
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	1a9b      	subs	r3, r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4403      	add	r3, r0
 8004692:	3328      	adds	r3, #40	@ 0x28
 8004694:	881b      	ldrh	r3, [r3, #0]
 8004696:	fbb1 f3f3 	udiv	r3, r1, r3
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 8470 	beq.w	8004f84 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80046a4:	78fa      	ldrb	r2, [r7, #3]
 80046a6:	6879      	ldr	r1, [r7, #4]
 80046a8:	4613      	mov	r3, r2
 80046aa:	011b      	lsls	r3, r3, #4
 80046ac:	1a9b      	subs	r3, r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	440b      	add	r3, r1
 80046b2:	333c      	adds	r3, #60	@ 0x3c
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	78fa      	ldrb	r2, [r7, #3]
 80046b8:	f083 0301 	eor.w	r3, r3, #1
 80046bc:	b2d8      	uxtb	r0, r3
 80046be:	6879      	ldr	r1, [r7, #4]
 80046c0:	4613      	mov	r3, r2
 80046c2:	011b      	lsls	r3, r3, #4
 80046c4:	1a9b      	subs	r3, r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	440b      	add	r3, r1
 80046ca:	333c      	adds	r3, #60	@ 0x3c
 80046cc:	4602      	mov	r2, r0
 80046ce:	701a      	strb	r2, [r3, #0]
 80046d0:	f000 bc58 	b.w	8004f84 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80046d4:	78fa      	ldrb	r2, [r7, #3]
 80046d6:	6879      	ldr	r1, [r7, #4]
 80046d8:	4613      	mov	r3, r2
 80046da:	011b      	lsls	r3, r3, #4
 80046dc:	1a9b      	subs	r3, r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	440b      	add	r3, r1
 80046e2:	333c      	adds	r3, #60	@ 0x3c
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	78fa      	ldrb	r2, [r7, #3]
 80046e8:	f083 0301 	eor.w	r3, r3, #1
 80046ec:	b2d8      	uxtb	r0, r3
 80046ee:	6879      	ldr	r1, [r7, #4]
 80046f0:	4613      	mov	r3, r2
 80046f2:	011b      	lsls	r3, r3, #4
 80046f4:	1a9b      	subs	r3, r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	440b      	add	r3, r1
 80046fa:	333c      	adds	r3, #60	@ 0x3c
 80046fc:	4602      	mov	r2, r0
 80046fe:	701a      	strb	r2, [r3, #0]
 8004700:	f000 bc40 	b.w	8004f84 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	78fa      	ldrb	r2, [r7, #3]
 800470a:	4611      	mov	r1, r2
 800470c:	4618      	mov	r0, r3
 800470e:	f004 ff82 	bl	8009616 <USB_ReadChInterrupts>
 8004712:	4603      	mov	r3, r0
 8004714:	f003 0320 	and.w	r3, r3, #32
 8004718:	2b20      	cmp	r3, #32
 800471a:	d131      	bne.n	8004780 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800471c:	78fb      	ldrb	r3, [r7, #3]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	4413      	add	r3, r2
 8004724:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004728:	461a      	mov	r2, r3
 800472a:	2320      	movs	r3, #32
 800472c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800472e:	78fa      	ldrb	r2, [r7, #3]
 8004730:	6879      	ldr	r1, [r7, #4]
 8004732:	4613      	mov	r3, r2
 8004734:	011b      	lsls	r3, r3, #4
 8004736:	1a9b      	subs	r3, r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	440b      	add	r3, r1
 800473c:	331a      	adds	r3, #26
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	2b01      	cmp	r3, #1
 8004742:	f040 841f 	bne.w	8004f84 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004746:	78fa      	ldrb	r2, [r7, #3]
 8004748:	6879      	ldr	r1, [r7, #4]
 800474a:	4613      	mov	r3, r2
 800474c:	011b      	lsls	r3, r3, #4
 800474e:	1a9b      	subs	r3, r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	440b      	add	r3, r1
 8004754:	331b      	adds	r3, #27
 8004756:	2201      	movs	r2, #1
 8004758:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800475a:	78fa      	ldrb	r2, [r7, #3]
 800475c:	6879      	ldr	r1, [r7, #4]
 800475e:	4613      	mov	r3, r2
 8004760:	011b      	lsls	r3, r3, #4
 8004762:	1a9b      	subs	r3, r3, r2
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	440b      	add	r3, r1
 8004768:	334d      	adds	r3, #77	@ 0x4d
 800476a:	2203      	movs	r2, #3
 800476c:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	78fa      	ldrb	r2, [r7, #3]
 8004774:	4611      	mov	r1, r2
 8004776:	4618      	mov	r0, r3
 8004778:	f004 ffca 	bl	8009710 <USB_HC_Halt>
 800477c:	f000 bc02 	b.w	8004f84 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	78fa      	ldrb	r2, [r7, #3]
 8004786:	4611      	mov	r1, r2
 8004788:	4618      	mov	r0, r3
 800478a:	f004 ff44 	bl	8009616 <USB_ReadChInterrupts>
 800478e:	4603      	mov	r3, r0
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b02      	cmp	r3, #2
 8004796:	f040 8305 	bne.w	8004da4 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800479a:	78fb      	ldrb	r3, [r7, #3]
 800479c:	015a      	lsls	r2, r3, #5
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	4413      	add	r3, r2
 80047a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047a6:	461a      	mov	r2, r3
 80047a8:	2302      	movs	r3, #2
 80047aa:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80047ac:	78fa      	ldrb	r2, [r7, #3]
 80047ae:	6879      	ldr	r1, [r7, #4]
 80047b0:	4613      	mov	r3, r2
 80047b2:	011b      	lsls	r3, r3, #4
 80047b4:	1a9b      	subs	r3, r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	440b      	add	r3, r1
 80047ba:	334d      	adds	r3, #77	@ 0x4d
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d114      	bne.n	80047ec <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80047c2:	78fa      	ldrb	r2, [r7, #3]
 80047c4:	6879      	ldr	r1, [r7, #4]
 80047c6:	4613      	mov	r3, r2
 80047c8:	011b      	lsls	r3, r3, #4
 80047ca:	1a9b      	subs	r3, r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	440b      	add	r3, r1
 80047d0:	334d      	adds	r3, #77	@ 0x4d
 80047d2:	2202      	movs	r2, #2
 80047d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80047d6:	78fa      	ldrb	r2, [r7, #3]
 80047d8:	6879      	ldr	r1, [r7, #4]
 80047da:	4613      	mov	r3, r2
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	1a9b      	subs	r3, r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	440b      	add	r3, r1
 80047e4:	334c      	adds	r3, #76	@ 0x4c
 80047e6:	2201      	movs	r2, #1
 80047e8:	701a      	strb	r2, [r3, #0]
 80047ea:	e2cc      	b.n	8004d86 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80047ec:	78fa      	ldrb	r2, [r7, #3]
 80047ee:	6879      	ldr	r1, [r7, #4]
 80047f0:	4613      	mov	r3, r2
 80047f2:	011b      	lsls	r3, r3, #4
 80047f4:	1a9b      	subs	r3, r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	440b      	add	r3, r1
 80047fa:	334d      	adds	r3, #77	@ 0x4d
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	2b06      	cmp	r3, #6
 8004800:	d114      	bne.n	800482c <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004802:	78fa      	ldrb	r2, [r7, #3]
 8004804:	6879      	ldr	r1, [r7, #4]
 8004806:	4613      	mov	r3, r2
 8004808:	011b      	lsls	r3, r3, #4
 800480a:	1a9b      	subs	r3, r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	440b      	add	r3, r1
 8004810:	334d      	adds	r3, #77	@ 0x4d
 8004812:	2202      	movs	r2, #2
 8004814:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004816:	78fa      	ldrb	r2, [r7, #3]
 8004818:	6879      	ldr	r1, [r7, #4]
 800481a:	4613      	mov	r3, r2
 800481c:	011b      	lsls	r3, r3, #4
 800481e:	1a9b      	subs	r3, r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	440b      	add	r3, r1
 8004824:	334c      	adds	r3, #76	@ 0x4c
 8004826:	2205      	movs	r2, #5
 8004828:	701a      	strb	r2, [r3, #0]
 800482a:	e2ac      	b.n	8004d86 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800482c:	78fa      	ldrb	r2, [r7, #3]
 800482e:	6879      	ldr	r1, [r7, #4]
 8004830:	4613      	mov	r3, r2
 8004832:	011b      	lsls	r3, r3, #4
 8004834:	1a9b      	subs	r3, r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	440b      	add	r3, r1
 800483a:	334d      	adds	r3, #77	@ 0x4d
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	2b07      	cmp	r3, #7
 8004840:	d00b      	beq.n	800485a <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004842:	78fa      	ldrb	r2, [r7, #3]
 8004844:	6879      	ldr	r1, [r7, #4]
 8004846:	4613      	mov	r3, r2
 8004848:	011b      	lsls	r3, r3, #4
 800484a:	1a9b      	subs	r3, r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	440b      	add	r3, r1
 8004850:	334d      	adds	r3, #77	@ 0x4d
 8004852:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004854:	2b09      	cmp	r3, #9
 8004856:	f040 80a6 	bne.w	80049a6 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800485a:	78fa      	ldrb	r2, [r7, #3]
 800485c:	6879      	ldr	r1, [r7, #4]
 800485e:	4613      	mov	r3, r2
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	1a9b      	subs	r3, r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	440b      	add	r3, r1
 8004868:	334d      	adds	r3, #77	@ 0x4d
 800486a:	2202      	movs	r2, #2
 800486c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800486e:	78fa      	ldrb	r2, [r7, #3]
 8004870:	6879      	ldr	r1, [r7, #4]
 8004872:	4613      	mov	r3, r2
 8004874:	011b      	lsls	r3, r3, #4
 8004876:	1a9b      	subs	r3, r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	440b      	add	r3, r1
 800487c:	3344      	adds	r3, #68	@ 0x44
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	1c59      	adds	r1, r3, #1
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	4613      	mov	r3, r2
 8004886:	011b      	lsls	r3, r3, #4
 8004888:	1a9b      	subs	r3, r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4403      	add	r3, r0
 800488e:	3344      	adds	r3, #68	@ 0x44
 8004890:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004892:	78fa      	ldrb	r2, [r7, #3]
 8004894:	6879      	ldr	r1, [r7, #4]
 8004896:	4613      	mov	r3, r2
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	1a9b      	subs	r3, r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	440b      	add	r3, r1
 80048a0:	3344      	adds	r3, #68	@ 0x44
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d943      	bls.n	8004930 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80048a8:	78fa      	ldrb	r2, [r7, #3]
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	4613      	mov	r3, r2
 80048ae:	011b      	lsls	r3, r3, #4
 80048b0:	1a9b      	subs	r3, r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	440b      	add	r3, r1
 80048b6:	3344      	adds	r3, #68	@ 0x44
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80048bc:	78fa      	ldrb	r2, [r7, #3]
 80048be:	6879      	ldr	r1, [r7, #4]
 80048c0:	4613      	mov	r3, r2
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	1a9b      	subs	r3, r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	440b      	add	r3, r1
 80048ca:	331a      	adds	r3, #26
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d123      	bne.n	800491a <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80048d2:	78fa      	ldrb	r2, [r7, #3]
 80048d4:	6879      	ldr	r1, [r7, #4]
 80048d6:	4613      	mov	r3, r2
 80048d8:	011b      	lsls	r3, r3, #4
 80048da:	1a9b      	subs	r3, r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	440b      	add	r3, r1
 80048e0:	331b      	adds	r3, #27
 80048e2:	2200      	movs	r2, #0
 80048e4:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80048e6:	78fa      	ldrb	r2, [r7, #3]
 80048e8:	6879      	ldr	r1, [r7, #4]
 80048ea:	4613      	mov	r3, r2
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	1a9b      	subs	r3, r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	440b      	add	r3, r1
 80048f4:	331c      	adds	r3, #28
 80048f6:	2200      	movs	r2, #0
 80048f8:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80048fa:	78fb      	ldrb	r3, [r7, #3]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	4413      	add	r3, r2
 8004902:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	78fa      	ldrb	r2, [r7, #3]
 800490a:	0151      	lsls	r1, r2, #5
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	440a      	add	r2, r1
 8004910:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004914:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004918:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800491a:	78fa      	ldrb	r2, [r7, #3]
 800491c:	6879      	ldr	r1, [r7, #4]
 800491e:	4613      	mov	r3, r2
 8004920:	011b      	lsls	r3, r3, #4
 8004922:	1a9b      	subs	r3, r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	440b      	add	r3, r1
 8004928:	334c      	adds	r3, #76	@ 0x4c
 800492a:	2204      	movs	r2, #4
 800492c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800492e:	e229      	b.n	8004d84 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004930:	78fa      	ldrb	r2, [r7, #3]
 8004932:	6879      	ldr	r1, [r7, #4]
 8004934:	4613      	mov	r3, r2
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	1a9b      	subs	r3, r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	440b      	add	r3, r1
 800493e:	334c      	adds	r3, #76	@ 0x4c
 8004940:	2202      	movs	r2, #2
 8004942:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004944:	78fa      	ldrb	r2, [r7, #3]
 8004946:	6879      	ldr	r1, [r7, #4]
 8004948:	4613      	mov	r3, r2
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	1a9b      	subs	r3, r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	440b      	add	r3, r1
 8004952:	3326      	adds	r3, #38	@ 0x26
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00b      	beq.n	8004972 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800495a:	78fa      	ldrb	r2, [r7, #3]
 800495c:	6879      	ldr	r1, [r7, #4]
 800495e:	4613      	mov	r3, r2
 8004960:	011b      	lsls	r3, r3, #4
 8004962:	1a9b      	subs	r3, r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	440b      	add	r3, r1
 8004968:	3326      	adds	r3, #38	@ 0x26
 800496a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800496c:	2b02      	cmp	r3, #2
 800496e:	f040 8209 	bne.w	8004d84 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004972:	78fb      	ldrb	r3, [r7, #3]
 8004974:	015a      	lsls	r2, r3, #5
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	4413      	add	r3, r2
 800497a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004988:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004990:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004992:	78fb      	ldrb	r3, [r7, #3]
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	4413      	add	r3, r2
 800499a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800499e:	461a      	mov	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80049a4:	e1ee      	b.n	8004d84 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80049a6:	78fa      	ldrb	r2, [r7, #3]
 80049a8:	6879      	ldr	r1, [r7, #4]
 80049aa:	4613      	mov	r3, r2
 80049ac:	011b      	lsls	r3, r3, #4
 80049ae:	1a9b      	subs	r3, r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	440b      	add	r3, r1
 80049b4:	334d      	adds	r3, #77	@ 0x4d
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	2b05      	cmp	r3, #5
 80049ba:	f040 80c8 	bne.w	8004b4e <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80049be:	78fa      	ldrb	r2, [r7, #3]
 80049c0:	6879      	ldr	r1, [r7, #4]
 80049c2:	4613      	mov	r3, r2
 80049c4:	011b      	lsls	r3, r3, #4
 80049c6:	1a9b      	subs	r3, r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	440b      	add	r3, r1
 80049cc:	334d      	adds	r3, #77	@ 0x4d
 80049ce:	2202      	movs	r2, #2
 80049d0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80049d2:	78fa      	ldrb	r2, [r7, #3]
 80049d4:	6879      	ldr	r1, [r7, #4]
 80049d6:	4613      	mov	r3, r2
 80049d8:	011b      	lsls	r3, r3, #4
 80049da:	1a9b      	subs	r3, r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	440b      	add	r3, r1
 80049e0:	331b      	adds	r3, #27
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	f040 81ce 	bne.w	8004d86 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80049ea:	78fa      	ldrb	r2, [r7, #3]
 80049ec:	6879      	ldr	r1, [r7, #4]
 80049ee:	4613      	mov	r3, r2
 80049f0:	011b      	lsls	r3, r3, #4
 80049f2:	1a9b      	subs	r3, r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	440b      	add	r3, r1
 80049f8:	3326      	adds	r3, #38	@ 0x26
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	2b03      	cmp	r3, #3
 80049fe:	d16b      	bne.n	8004ad8 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004a00:	78fa      	ldrb	r2, [r7, #3]
 8004a02:	6879      	ldr	r1, [r7, #4]
 8004a04:	4613      	mov	r3, r2
 8004a06:	011b      	lsls	r3, r3, #4
 8004a08:	1a9b      	subs	r3, r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	440b      	add	r3, r1
 8004a0e:	3348      	adds	r3, #72	@ 0x48
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	1c59      	adds	r1, r3, #1
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	4613      	mov	r3, r2
 8004a18:	011b      	lsls	r3, r3, #4
 8004a1a:	1a9b      	subs	r3, r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4403      	add	r3, r0
 8004a20:	3348      	adds	r3, #72	@ 0x48
 8004a22:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004a24:	78fa      	ldrb	r2, [r7, #3]
 8004a26:	6879      	ldr	r1, [r7, #4]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	011b      	lsls	r3, r3, #4
 8004a2c:	1a9b      	subs	r3, r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	440b      	add	r3, r1
 8004a32:	3348      	adds	r3, #72	@ 0x48
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d943      	bls.n	8004ac2 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004a3a:	78fa      	ldrb	r2, [r7, #3]
 8004a3c:	6879      	ldr	r1, [r7, #4]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	011b      	lsls	r3, r3, #4
 8004a42:	1a9b      	subs	r3, r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	440b      	add	r3, r1
 8004a48:	3348      	adds	r3, #72	@ 0x48
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004a4e:	78fa      	ldrb	r2, [r7, #3]
 8004a50:	6879      	ldr	r1, [r7, #4]
 8004a52:	4613      	mov	r3, r2
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	1a9b      	subs	r3, r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	440b      	add	r3, r1
 8004a5c:	331b      	adds	r3, #27
 8004a5e:	2200      	movs	r2, #0
 8004a60:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004a62:	78fa      	ldrb	r2, [r7, #3]
 8004a64:	6879      	ldr	r1, [r7, #4]
 8004a66:	4613      	mov	r3, r2
 8004a68:	011b      	lsls	r3, r3, #4
 8004a6a:	1a9b      	subs	r3, r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	440b      	add	r3, r1
 8004a70:	3344      	adds	r3, #68	@ 0x44
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d809      	bhi.n	8004a8c <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8004a78:	78fa      	ldrb	r2, [r7, #3]
 8004a7a:	6879      	ldr	r1, [r7, #4]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	1a9b      	subs	r3, r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	440b      	add	r3, r1
 8004a86:	331c      	adds	r3, #28
 8004a88:	2201      	movs	r2, #1
 8004a8a:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004a8c:	78fb      	ldrb	r3, [r7, #3]
 8004a8e:	015a      	lsls	r2, r3, #5
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	78fa      	ldrb	r2, [r7, #3]
 8004a9c:	0151      	lsls	r1, r2, #5
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	440a      	add	r2, r1
 8004aa2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004aa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aaa:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004aac:	78fa      	ldrb	r2, [r7, #3]
 8004aae:	6879      	ldr	r1, [r7, #4]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	011b      	lsls	r3, r3, #4
 8004ab4:	1a9b      	subs	r3, r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	440b      	add	r3, r1
 8004aba:	334c      	adds	r3, #76	@ 0x4c
 8004abc:	2204      	movs	r2, #4
 8004abe:	701a      	strb	r2, [r3, #0]
 8004ac0:	e014      	b.n	8004aec <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004ac2:	78fa      	ldrb	r2, [r7, #3]
 8004ac4:	6879      	ldr	r1, [r7, #4]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	011b      	lsls	r3, r3, #4
 8004aca:	1a9b      	subs	r3, r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	440b      	add	r3, r1
 8004ad0:	334c      	adds	r3, #76	@ 0x4c
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	701a      	strb	r2, [r3, #0]
 8004ad6:	e009      	b.n	8004aec <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004ad8:	78fa      	ldrb	r2, [r7, #3]
 8004ada:	6879      	ldr	r1, [r7, #4]
 8004adc:	4613      	mov	r3, r2
 8004ade:	011b      	lsls	r3, r3, #4
 8004ae0:	1a9b      	subs	r3, r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	440b      	add	r3, r1
 8004ae6:	334c      	adds	r3, #76	@ 0x4c
 8004ae8:	2202      	movs	r2, #2
 8004aea:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004aec:	78fa      	ldrb	r2, [r7, #3]
 8004aee:	6879      	ldr	r1, [r7, #4]
 8004af0:	4613      	mov	r3, r2
 8004af2:	011b      	lsls	r3, r3, #4
 8004af4:	1a9b      	subs	r3, r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	440b      	add	r3, r1
 8004afa:	3326      	adds	r3, #38	@ 0x26
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00b      	beq.n	8004b1a <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004b02:	78fa      	ldrb	r2, [r7, #3]
 8004b04:	6879      	ldr	r1, [r7, #4]
 8004b06:	4613      	mov	r3, r2
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	1a9b      	subs	r3, r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	440b      	add	r3, r1
 8004b10:	3326      	adds	r3, #38	@ 0x26
 8004b12:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	f040 8136 	bne.w	8004d86 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004b1a:	78fb      	ldrb	r3, [r7, #3]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004b30:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b38:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004b3a:	78fb      	ldrb	r3, [r7, #3]
 8004b3c:	015a      	lsls	r2, r3, #5
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	4413      	add	r3, r2
 8004b42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b46:	461a      	mov	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6013      	str	r3, [r2, #0]
 8004b4c:	e11b      	b.n	8004d86 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004b4e:	78fa      	ldrb	r2, [r7, #3]
 8004b50:	6879      	ldr	r1, [r7, #4]
 8004b52:	4613      	mov	r3, r2
 8004b54:	011b      	lsls	r3, r3, #4
 8004b56:	1a9b      	subs	r3, r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	440b      	add	r3, r1
 8004b5c:	334d      	adds	r3, #77	@ 0x4d
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	2b03      	cmp	r3, #3
 8004b62:	f040 8081 	bne.w	8004c68 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b66:	78fa      	ldrb	r2, [r7, #3]
 8004b68:	6879      	ldr	r1, [r7, #4]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	011b      	lsls	r3, r3, #4
 8004b6e:	1a9b      	subs	r3, r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	440b      	add	r3, r1
 8004b74:	334d      	adds	r3, #77	@ 0x4d
 8004b76:	2202      	movs	r2, #2
 8004b78:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004b7a:	78fa      	ldrb	r2, [r7, #3]
 8004b7c:	6879      	ldr	r1, [r7, #4]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	011b      	lsls	r3, r3, #4
 8004b82:	1a9b      	subs	r3, r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	440b      	add	r3, r1
 8004b88:	331b      	adds	r3, #27
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	f040 80fa 	bne.w	8004d86 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004b92:	78fa      	ldrb	r2, [r7, #3]
 8004b94:	6879      	ldr	r1, [r7, #4]
 8004b96:	4613      	mov	r3, r2
 8004b98:	011b      	lsls	r3, r3, #4
 8004b9a:	1a9b      	subs	r3, r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	440b      	add	r3, r1
 8004ba0:	334c      	adds	r3, #76	@ 0x4c
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004ba6:	78fb      	ldrb	r3, [r7, #3]
 8004ba8:	015a      	lsls	r2, r3, #5
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	4413      	add	r3, r2
 8004bae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	78fa      	ldrb	r2, [r7, #3]
 8004bb6:	0151      	lsls	r1, r2, #5
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	440a      	add	r2, r1
 8004bbc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004bc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bc4:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004bc6:	78fb      	ldrb	r3, [r7, #3]
 8004bc8:	015a      	lsls	r2, r3, #5
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	78fa      	ldrb	r2, [r7, #3]
 8004bd6:	0151      	lsls	r1, r2, #5
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	440a      	add	r2, r1
 8004bdc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004be0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004be4:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004be6:	78fb      	ldrb	r3, [r7, #3]
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	78fa      	ldrb	r2, [r7, #3]
 8004bf6:	0151      	lsls	r1, r2, #5
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	440a      	add	r2, r1
 8004bfc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c00:	f023 0320 	bic.w	r3, r3, #32
 8004c04:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c06:	78fa      	ldrb	r2, [r7, #3]
 8004c08:	6879      	ldr	r1, [r7, #4]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	011b      	lsls	r3, r3, #4
 8004c0e:	1a9b      	subs	r3, r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	440b      	add	r3, r1
 8004c14:	3326      	adds	r3, #38	@ 0x26
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00b      	beq.n	8004c34 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004c1c:	78fa      	ldrb	r2, [r7, #3]
 8004c1e:	6879      	ldr	r1, [r7, #4]
 8004c20:	4613      	mov	r3, r2
 8004c22:	011b      	lsls	r3, r3, #4
 8004c24:	1a9b      	subs	r3, r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	440b      	add	r3, r1
 8004c2a:	3326      	adds	r3, #38	@ 0x26
 8004c2c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	f040 80a9 	bne.w	8004d86 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004c34:	78fb      	ldrb	r3, [r7, #3]
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004c4a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004c52:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004c54:	78fb      	ldrb	r3, [r7, #3]
 8004c56:	015a      	lsls	r2, r3, #5
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c60:	461a      	mov	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6013      	str	r3, [r2, #0]
 8004c66:	e08e      	b.n	8004d86 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004c68:	78fa      	ldrb	r2, [r7, #3]
 8004c6a:	6879      	ldr	r1, [r7, #4]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	011b      	lsls	r3, r3, #4
 8004c70:	1a9b      	subs	r3, r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	440b      	add	r3, r1
 8004c76:	334d      	adds	r3, #77	@ 0x4d
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	2b04      	cmp	r3, #4
 8004c7c:	d143      	bne.n	8004d06 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c7e:	78fa      	ldrb	r2, [r7, #3]
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	4613      	mov	r3, r2
 8004c84:	011b      	lsls	r3, r3, #4
 8004c86:	1a9b      	subs	r3, r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	440b      	add	r3, r1
 8004c8c:	334d      	adds	r3, #77	@ 0x4d
 8004c8e:	2202      	movs	r2, #2
 8004c90:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004c92:	78fa      	ldrb	r2, [r7, #3]
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	4613      	mov	r3, r2
 8004c98:	011b      	lsls	r3, r3, #4
 8004c9a:	1a9b      	subs	r3, r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	440b      	add	r3, r1
 8004ca0:	334c      	adds	r3, #76	@ 0x4c
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004ca6:	78fa      	ldrb	r2, [r7, #3]
 8004ca8:	6879      	ldr	r1, [r7, #4]
 8004caa:	4613      	mov	r3, r2
 8004cac:	011b      	lsls	r3, r3, #4
 8004cae:	1a9b      	subs	r3, r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	440b      	add	r3, r1
 8004cb4:	3326      	adds	r3, #38	@ 0x26
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00a      	beq.n	8004cd2 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004cbc:	78fa      	ldrb	r2, [r7, #3]
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	011b      	lsls	r3, r3, #4
 8004cc4:	1a9b      	subs	r3, r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	440b      	add	r3, r1
 8004cca:	3326      	adds	r3, #38	@ 0x26
 8004ccc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d159      	bne.n	8004d86 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004cd2:	78fb      	ldrb	r3, [r7, #3]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004ce8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004cf0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004cf2:	78fb      	ldrb	r3, [r7, #3]
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cfe:	461a      	mov	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6013      	str	r3, [r2, #0]
 8004d04:	e03f      	b.n	8004d86 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004d06:	78fa      	ldrb	r2, [r7, #3]
 8004d08:	6879      	ldr	r1, [r7, #4]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	011b      	lsls	r3, r3, #4
 8004d0e:	1a9b      	subs	r3, r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	440b      	add	r3, r1
 8004d14:	334d      	adds	r3, #77	@ 0x4d
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d126      	bne.n	8004d6a <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004d1c:	78fa      	ldrb	r2, [r7, #3]
 8004d1e:	6879      	ldr	r1, [r7, #4]
 8004d20:	4613      	mov	r3, r2
 8004d22:	011b      	lsls	r3, r3, #4
 8004d24:	1a9b      	subs	r3, r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	440b      	add	r3, r1
 8004d2a:	334d      	adds	r3, #77	@ 0x4d
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004d30:	78fa      	ldrb	r2, [r7, #3]
 8004d32:	6879      	ldr	r1, [r7, #4]
 8004d34:	4613      	mov	r3, r2
 8004d36:	011b      	lsls	r3, r3, #4
 8004d38:	1a9b      	subs	r3, r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	440b      	add	r3, r1
 8004d3e:	3344      	adds	r3, #68	@ 0x44
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	1c59      	adds	r1, r3, #1
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	4613      	mov	r3, r2
 8004d48:	011b      	lsls	r3, r3, #4
 8004d4a:	1a9b      	subs	r3, r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4403      	add	r3, r0
 8004d50:	3344      	adds	r3, #68	@ 0x44
 8004d52:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004d54:	78fa      	ldrb	r2, [r7, #3]
 8004d56:	6879      	ldr	r1, [r7, #4]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	011b      	lsls	r3, r3, #4
 8004d5c:	1a9b      	subs	r3, r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	440b      	add	r3, r1
 8004d62:	334c      	adds	r3, #76	@ 0x4c
 8004d64:	2204      	movs	r2, #4
 8004d66:	701a      	strb	r2, [r3, #0]
 8004d68:	e00d      	b.n	8004d86 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004d6a:	78fa      	ldrb	r2, [r7, #3]
 8004d6c:	6879      	ldr	r1, [r7, #4]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	011b      	lsls	r3, r3, #4
 8004d72:	1a9b      	subs	r3, r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	440b      	add	r3, r1
 8004d78:	334d      	adds	r3, #77	@ 0x4d
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	f000 8100 	beq.w	8004f82 <HCD_HC_IN_IRQHandler+0xcca>
 8004d82:	e000      	b.n	8004d86 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004d84:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004d86:	78fa      	ldrb	r2, [r7, #3]
 8004d88:	6879      	ldr	r1, [r7, #4]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	011b      	lsls	r3, r3, #4
 8004d8e:	1a9b      	subs	r3, r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	440b      	add	r3, r1
 8004d94:	334c      	adds	r3, #76	@ 0x4c
 8004d96:	781a      	ldrb	r2, [r3, #0]
 8004d98:	78fb      	ldrb	r3, [r7, #3]
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f005 ffc9 	bl	800ad34 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004da2:	e0ef      	b.n	8004f84 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	78fa      	ldrb	r2, [r7, #3]
 8004daa:	4611      	mov	r1, r2
 8004dac:	4618      	mov	r0, r3
 8004dae:	f004 fc32 	bl	8009616 <USB_ReadChInterrupts>
 8004db2:	4603      	mov	r3, r0
 8004db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004db8:	2b40      	cmp	r3, #64	@ 0x40
 8004dba:	d12f      	bne.n	8004e1c <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004dbc:	78fb      	ldrb	r3, [r7, #3]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dc8:	461a      	mov	r2, r3
 8004dca:	2340      	movs	r3, #64	@ 0x40
 8004dcc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004dce:	78fa      	ldrb	r2, [r7, #3]
 8004dd0:	6879      	ldr	r1, [r7, #4]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	1a9b      	subs	r3, r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	440b      	add	r3, r1
 8004ddc:	334d      	adds	r3, #77	@ 0x4d
 8004dde:	2205      	movs	r2, #5
 8004de0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004de2:	78fa      	ldrb	r2, [r7, #3]
 8004de4:	6879      	ldr	r1, [r7, #4]
 8004de6:	4613      	mov	r3, r2
 8004de8:	011b      	lsls	r3, r3, #4
 8004dea:	1a9b      	subs	r3, r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	440b      	add	r3, r1
 8004df0:	331a      	adds	r3, #26
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d109      	bne.n	8004e0c <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004df8:	78fa      	ldrb	r2, [r7, #3]
 8004dfa:	6879      	ldr	r1, [r7, #4]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	011b      	lsls	r3, r3, #4
 8004e00:	1a9b      	subs	r3, r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	440b      	add	r3, r1
 8004e06:	3344      	adds	r3, #68	@ 0x44
 8004e08:	2200      	movs	r2, #0
 8004e0a:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	78fa      	ldrb	r2, [r7, #3]
 8004e12:	4611      	mov	r1, r2
 8004e14:	4618      	mov	r0, r3
 8004e16:	f004 fc7b 	bl	8009710 <USB_HC_Halt>
 8004e1a:	e0b3      	b.n	8004f84 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	78fa      	ldrb	r2, [r7, #3]
 8004e22:	4611      	mov	r1, r2
 8004e24:	4618      	mov	r0, r3
 8004e26:	f004 fbf6 	bl	8009616 <USB_ReadChInterrupts>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	f003 0310 	and.w	r3, r3, #16
 8004e30:	2b10      	cmp	r3, #16
 8004e32:	f040 80a7 	bne.w	8004f84 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004e36:	78fa      	ldrb	r2, [r7, #3]
 8004e38:	6879      	ldr	r1, [r7, #4]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	011b      	lsls	r3, r3, #4
 8004e3e:	1a9b      	subs	r3, r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	440b      	add	r3, r1
 8004e44:	3326      	adds	r3, #38	@ 0x26
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	2b03      	cmp	r3, #3
 8004e4a:	d11b      	bne.n	8004e84 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004e4c:	78fa      	ldrb	r2, [r7, #3]
 8004e4e:	6879      	ldr	r1, [r7, #4]
 8004e50:	4613      	mov	r3, r2
 8004e52:	011b      	lsls	r3, r3, #4
 8004e54:	1a9b      	subs	r3, r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	440b      	add	r3, r1
 8004e5a:	3344      	adds	r3, #68	@ 0x44
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004e60:	78fa      	ldrb	r2, [r7, #3]
 8004e62:	6879      	ldr	r1, [r7, #4]
 8004e64:	4613      	mov	r3, r2
 8004e66:	011b      	lsls	r3, r3, #4
 8004e68:	1a9b      	subs	r3, r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	440b      	add	r3, r1
 8004e6e:	334d      	adds	r3, #77	@ 0x4d
 8004e70:	2204      	movs	r2, #4
 8004e72:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	78fa      	ldrb	r2, [r7, #3]
 8004e7a:	4611      	mov	r1, r2
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f004 fc47 	bl	8009710 <USB_HC_Halt>
 8004e82:	e03f      	b.n	8004f04 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004e84:	78fa      	ldrb	r2, [r7, #3]
 8004e86:	6879      	ldr	r1, [r7, #4]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	011b      	lsls	r3, r3, #4
 8004e8c:	1a9b      	subs	r3, r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	440b      	add	r3, r1
 8004e92:	3326      	adds	r3, #38	@ 0x26
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00a      	beq.n	8004eb0 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004e9a:	78fa      	ldrb	r2, [r7, #3]
 8004e9c:	6879      	ldr	r1, [r7, #4]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	011b      	lsls	r3, r3, #4
 8004ea2:	1a9b      	subs	r3, r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	440b      	add	r3, r1
 8004ea8:	3326      	adds	r3, #38	@ 0x26
 8004eaa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d129      	bne.n	8004f04 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004eb0:	78fa      	ldrb	r2, [r7, #3]
 8004eb2:	6879      	ldr	r1, [r7, #4]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	1a9b      	subs	r3, r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	440b      	add	r3, r1
 8004ebe:	3344      	adds	r3, #68	@ 0x44
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	799b      	ldrb	r3, [r3, #6]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00a      	beq.n	8004ee2 <HCD_HC_IN_IRQHandler+0xc2a>
 8004ecc:	78fa      	ldrb	r2, [r7, #3]
 8004ece:	6879      	ldr	r1, [r7, #4]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	011b      	lsls	r3, r3, #4
 8004ed4:	1a9b      	subs	r3, r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	440b      	add	r3, r1
 8004eda:	331b      	adds	r3, #27
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d110      	bne.n	8004f04 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004ee2:	78fa      	ldrb	r2, [r7, #3]
 8004ee4:	6879      	ldr	r1, [r7, #4]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	011b      	lsls	r3, r3, #4
 8004eea:	1a9b      	subs	r3, r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	440b      	add	r3, r1
 8004ef0:	334d      	adds	r3, #77	@ 0x4d
 8004ef2:	2204      	movs	r2, #4
 8004ef4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	78fa      	ldrb	r2, [r7, #3]
 8004efc:	4611      	mov	r1, r2
 8004efe:	4618      	mov	r0, r3
 8004f00:	f004 fc06 	bl	8009710 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004f04:	78fa      	ldrb	r2, [r7, #3]
 8004f06:	6879      	ldr	r1, [r7, #4]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	011b      	lsls	r3, r3, #4
 8004f0c:	1a9b      	subs	r3, r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	440b      	add	r3, r1
 8004f12:	331b      	adds	r3, #27
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d129      	bne.n	8004f6e <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004f1a:	78fa      	ldrb	r2, [r7, #3]
 8004f1c:	6879      	ldr	r1, [r7, #4]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	011b      	lsls	r3, r3, #4
 8004f22:	1a9b      	subs	r3, r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	440b      	add	r3, r1
 8004f28:	331b      	adds	r3, #27
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004f2e:	78fb      	ldrb	r3, [r7, #3]
 8004f30:	015a      	lsls	r2, r3, #5
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	78fa      	ldrb	r2, [r7, #3]
 8004f3e:	0151      	lsls	r1, r2, #5
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	440a      	add	r2, r1
 8004f44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f4c:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004f4e:	78fb      	ldrb	r3, [r7, #3]
 8004f50:	015a      	lsls	r2, r3, #5
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	4413      	add	r3, r2
 8004f56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	78fa      	ldrb	r2, [r7, #3]
 8004f5e:	0151      	lsls	r1, r2, #5
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	440a      	add	r2, r1
 8004f64:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f68:	f043 0320 	orr.w	r3, r3, #32
 8004f6c:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004f6e:	78fb      	ldrb	r3, [r7, #3]
 8004f70:	015a      	lsls	r2, r3, #5
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	4413      	add	r3, r2
 8004f76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	2310      	movs	r3, #16
 8004f7e:	6093      	str	r3, [r2, #8]
 8004f80:	e000      	b.n	8004f84 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004f82:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004f84:	3718      	adds	r7, #24
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b086      	sub	sp, #24
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
 8004f92:	460b      	mov	r3, r1
 8004f94:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	78fa      	ldrb	r2, [r7, #3]
 8004fa6:	4611      	mov	r1, r2
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f004 fb34 	bl	8009616 <USB_ReadChInterrupts>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	f003 0304 	and.w	r3, r3, #4
 8004fb4:	2b04      	cmp	r3, #4
 8004fb6:	d11b      	bne.n	8004ff0 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004fb8:	78fb      	ldrb	r3, [r7, #3]
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	2304      	movs	r3, #4
 8004fc8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004fca:	78fa      	ldrb	r2, [r7, #3]
 8004fcc:	6879      	ldr	r1, [r7, #4]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	011b      	lsls	r3, r3, #4
 8004fd2:	1a9b      	subs	r3, r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	440b      	add	r3, r1
 8004fd8:	334d      	adds	r3, #77	@ 0x4d
 8004fda:	2207      	movs	r2, #7
 8004fdc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	78fa      	ldrb	r2, [r7, #3]
 8004fe4:	4611      	mov	r1, r2
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f004 fb92 	bl	8009710 <USB_HC_Halt>
 8004fec:	f000 bc89 	b.w	8005902 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	78fa      	ldrb	r2, [r7, #3]
 8004ff6:	4611      	mov	r1, r2
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f004 fb0c 	bl	8009616 <USB_ReadChInterrupts>
 8004ffe:	4603      	mov	r3, r0
 8005000:	f003 0320 	and.w	r3, r3, #32
 8005004:	2b20      	cmp	r3, #32
 8005006:	f040 8082 	bne.w	800510e <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800500a:	78fb      	ldrb	r3, [r7, #3]
 800500c:	015a      	lsls	r2, r3, #5
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	4413      	add	r3, r2
 8005012:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005016:	461a      	mov	r2, r3
 8005018:	2320      	movs	r3, #32
 800501a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800501c:	78fa      	ldrb	r2, [r7, #3]
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	4613      	mov	r3, r2
 8005022:	011b      	lsls	r3, r3, #4
 8005024:	1a9b      	subs	r3, r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	440b      	add	r3, r1
 800502a:	3319      	adds	r3, #25
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d124      	bne.n	800507c <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8005032:	78fa      	ldrb	r2, [r7, #3]
 8005034:	6879      	ldr	r1, [r7, #4]
 8005036:	4613      	mov	r3, r2
 8005038:	011b      	lsls	r3, r3, #4
 800503a:	1a9b      	subs	r3, r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	440b      	add	r3, r1
 8005040:	3319      	adds	r3, #25
 8005042:	2200      	movs	r2, #0
 8005044:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005046:	78fa      	ldrb	r2, [r7, #3]
 8005048:	6879      	ldr	r1, [r7, #4]
 800504a:	4613      	mov	r3, r2
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	1a9b      	subs	r3, r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	440b      	add	r3, r1
 8005054:	334c      	adds	r3, #76	@ 0x4c
 8005056:	2202      	movs	r2, #2
 8005058:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800505a:	78fa      	ldrb	r2, [r7, #3]
 800505c:	6879      	ldr	r1, [r7, #4]
 800505e:	4613      	mov	r3, r2
 8005060:	011b      	lsls	r3, r3, #4
 8005062:	1a9b      	subs	r3, r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	440b      	add	r3, r1
 8005068:	334d      	adds	r3, #77	@ 0x4d
 800506a:	2203      	movs	r2, #3
 800506c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	78fa      	ldrb	r2, [r7, #3]
 8005074:	4611      	mov	r1, r2
 8005076:	4618      	mov	r0, r3
 8005078:	f004 fb4a 	bl	8009710 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800507c:	78fa      	ldrb	r2, [r7, #3]
 800507e:	6879      	ldr	r1, [r7, #4]
 8005080:	4613      	mov	r3, r2
 8005082:	011b      	lsls	r3, r3, #4
 8005084:	1a9b      	subs	r3, r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	440b      	add	r3, r1
 800508a:	331a      	adds	r3, #26
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	2b01      	cmp	r3, #1
 8005090:	f040 8437 	bne.w	8005902 <HCD_HC_OUT_IRQHandler+0x978>
 8005094:	78fa      	ldrb	r2, [r7, #3]
 8005096:	6879      	ldr	r1, [r7, #4]
 8005098:	4613      	mov	r3, r2
 800509a:	011b      	lsls	r3, r3, #4
 800509c:	1a9b      	subs	r3, r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	440b      	add	r3, r1
 80050a2:	331b      	adds	r3, #27
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f040 842b 	bne.w	8005902 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80050ac:	78fa      	ldrb	r2, [r7, #3]
 80050ae:	6879      	ldr	r1, [r7, #4]
 80050b0:	4613      	mov	r3, r2
 80050b2:	011b      	lsls	r3, r3, #4
 80050b4:	1a9b      	subs	r3, r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	440b      	add	r3, r1
 80050ba:	3326      	adds	r3, #38	@ 0x26
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d009      	beq.n	80050d6 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80050c2:	78fa      	ldrb	r2, [r7, #3]
 80050c4:	6879      	ldr	r1, [r7, #4]
 80050c6:	4613      	mov	r3, r2
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	1a9b      	subs	r3, r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	440b      	add	r3, r1
 80050d0:	331b      	adds	r3, #27
 80050d2:	2201      	movs	r2, #1
 80050d4:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80050d6:	78fa      	ldrb	r2, [r7, #3]
 80050d8:	6879      	ldr	r1, [r7, #4]
 80050da:	4613      	mov	r3, r2
 80050dc:	011b      	lsls	r3, r3, #4
 80050de:	1a9b      	subs	r3, r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	440b      	add	r3, r1
 80050e4:	334d      	adds	r3, #77	@ 0x4d
 80050e6:	2203      	movs	r2, #3
 80050e8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	78fa      	ldrb	r2, [r7, #3]
 80050f0:	4611      	mov	r1, r2
 80050f2:	4618      	mov	r0, r3
 80050f4:	f004 fb0c 	bl	8009710 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80050f8:	78fa      	ldrb	r2, [r7, #3]
 80050fa:	6879      	ldr	r1, [r7, #4]
 80050fc:	4613      	mov	r3, r2
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	1a9b      	subs	r3, r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	440b      	add	r3, r1
 8005106:	3344      	adds	r3, #68	@ 0x44
 8005108:	2200      	movs	r2, #0
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	e3f9      	b.n	8005902 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	78fa      	ldrb	r2, [r7, #3]
 8005114:	4611      	mov	r1, r2
 8005116:	4618      	mov	r0, r3
 8005118:	f004 fa7d 	bl	8009616 <USB_ReadChInterrupts>
 800511c:	4603      	mov	r3, r0
 800511e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005122:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005126:	d111      	bne.n	800514c <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005128:	78fb      	ldrb	r3, [r7, #3]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	4413      	add	r3, r2
 8005130:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005134:	461a      	mov	r2, r3
 8005136:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800513a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	78fa      	ldrb	r2, [r7, #3]
 8005142:	4611      	mov	r1, r2
 8005144:	4618      	mov	r0, r3
 8005146:	f004 fae3 	bl	8009710 <USB_HC_Halt>
 800514a:	e3da      	b.n	8005902 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	78fa      	ldrb	r2, [r7, #3]
 8005152:	4611      	mov	r1, r2
 8005154:	4618      	mov	r0, r3
 8005156:	f004 fa5e 	bl	8009616 <USB_ReadChInterrupts>
 800515a:	4603      	mov	r3, r0
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b01      	cmp	r3, #1
 8005162:	d168      	bne.n	8005236 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005164:	78fa      	ldrb	r2, [r7, #3]
 8005166:	6879      	ldr	r1, [r7, #4]
 8005168:	4613      	mov	r3, r2
 800516a:	011b      	lsls	r3, r3, #4
 800516c:	1a9b      	subs	r3, r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	440b      	add	r3, r1
 8005172:	3344      	adds	r3, #68	@ 0x44
 8005174:	2200      	movs	r2, #0
 8005176:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	78fa      	ldrb	r2, [r7, #3]
 800517e:	4611      	mov	r1, r2
 8005180:	4618      	mov	r0, r3
 8005182:	f004 fa48 	bl	8009616 <USB_ReadChInterrupts>
 8005186:	4603      	mov	r3, r0
 8005188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800518c:	2b40      	cmp	r3, #64	@ 0x40
 800518e:	d112      	bne.n	80051b6 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005190:	78fa      	ldrb	r2, [r7, #3]
 8005192:	6879      	ldr	r1, [r7, #4]
 8005194:	4613      	mov	r3, r2
 8005196:	011b      	lsls	r3, r3, #4
 8005198:	1a9b      	subs	r3, r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	440b      	add	r3, r1
 800519e:	3319      	adds	r3, #25
 80051a0:	2201      	movs	r2, #1
 80051a2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80051a4:	78fb      	ldrb	r3, [r7, #3]
 80051a6:	015a      	lsls	r2, r3, #5
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	4413      	add	r3, r2
 80051ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051b0:	461a      	mov	r2, r3
 80051b2:	2340      	movs	r3, #64	@ 0x40
 80051b4:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80051b6:	78fa      	ldrb	r2, [r7, #3]
 80051b8:	6879      	ldr	r1, [r7, #4]
 80051ba:	4613      	mov	r3, r2
 80051bc:	011b      	lsls	r3, r3, #4
 80051be:	1a9b      	subs	r3, r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	440b      	add	r3, r1
 80051c4:	331b      	adds	r3, #27
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d019      	beq.n	8005200 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80051cc:	78fa      	ldrb	r2, [r7, #3]
 80051ce:	6879      	ldr	r1, [r7, #4]
 80051d0:	4613      	mov	r3, r2
 80051d2:	011b      	lsls	r3, r3, #4
 80051d4:	1a9b      	subs	r3, r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	440b      	add	r3, r1
 80051da:	331b      	adds	r3, #27
 80051dc:	2200      	movs	r2, #0
 80051de:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80051e0:	78fb      	ldrb	r3, [r7, #3]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	78fa      	ldrb	r2, [r7, #3]
 80051f0:	0151      	lsls	r1, r2, #5
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	440a      	add	r2, r1
 80051f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80051fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051fe:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005200:	78fb      	ldrb	r3, [r7, #3]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	4413      	add	r3, r2
 8005208:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800520c:	461a      	mov	r2, r3
 800520e:	2301      	movs	r3, #1
 8005210:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8005212:	78fa      	ldrb	r2, [r7, #3]
 8005214:	6879      	ldr	r1, [r7, #4]
 8005216:	4613      	mov	r3, r2
 8005218:	011b      	lsls	r3, r3, #4
 800521a:	1a9b      	subs	r3, r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	440b      	add	r3, r1
 8005220:	334d      	adds	r3, #77	@ 0x4d
 8005222:	2201      	movs	r2, #1
 8005224:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	78fa      	ldrb	r2, [r7, #3]
 800522c:	4611      	mov	r1, r2
 800522e:	4618      	mov	r0, r3
 8005230:	f004 fa6e 	bl	8009710 <USB_HC_Halt>
 8005234:	e365      	b.n	8005902 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	78fa      	ldrb	r2, [r7, #3]
 800523c:	4611      	mov	r1, r2
 800523e:	4618      	mov	r0, r3
 8005240:	f004 f9e9 	bl	8009616 <USB_ReadChInterrupts>
 8005244:	4603      	mov	r3, r0
 8005246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800524a:	2b40      	cmp	r3, #64	@ 0x40
 800524c:	d139      	bne.n	80052c2 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800524e:	78fa      	ldrb	r2, [r7, #3]
 8005250:	6879      	ldr	r1, [r7, #4]
 8005252:	4613      	mov	r3, r2
 8005254:	011b      	lsls	r3, r3, #4
 8005256:	1a9b      	subs	r3, r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	440b      	add	r3, r1
 800525c:	334d      	adds	r3, #77	@ 0x4d
 800525e:	2205      	movs	r2, #5
 8005260:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005262:	78fa      	ldrb	r2, [r7, #3]
 8005264:	6879      	ldr	r1, [r7, #4]
 8005266:	4613      	mov	r3, r2
 8005268:	011b      	lsls	r3, r3, #4
 800526a:	1a9b      	subs	r3, r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	440b      	add	r3, r1
 8005270:	331a      	adds	r3, #26
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d109      	bne.n	800528c <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005278:	78fa      	ldrb	r2, [r7, #3]
 800527a:	6879      	ldr	r1, [r7, #4]
 800527c:	4613      	mov	r3, r2
 800527e:	011b      	lsls	r3, r3, #4
 8005280:	1a9b      	subs	r3, r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	3319      	adds	r3, #25
 8005288:	2201      	movs	r2, #1
 800528a:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800528c:	78fa      	ldrb	r2, [r7, #3]
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	4613      	mov	r3, r2
 8005292:	011b      	lsls	r3, r3, #4
 8005294:	1a9b      	subs	r3, r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	440b      	add	r3, r1
 800529a:	3344      	adds	r3, #68	@ 0x44
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	78fa      	ldrb	r2, [r7, #3]
 80052a6:	4611      	mov	r1, r2
 80052a8:	4618      	mov	r0, r3
 80052aa:	f004 fa31 	bl	8009710 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80052ae:	78fb      	ldrb	r3, [r7, #3]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052ba:	461a      	mov	r2, r3
 80052bc:	2340      	movs	r3, #64	@ 0x40
 80052be:	6093      	str	r3, [r2, #8]
 80052c0:	e31f      	b.n	8005902 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	78fa      	ldrb	r2, [r7, #3]
 80052c8:	4611      	mov	r1, r2
 80052ca:	4618      	mov	r0, r3
 80052cc:	f004 f9a3 	bl	8009616 <USB_ReadChInterrupts>
 80052d0:	4603      	mov	r3, r0
 80052d2:	f003 0308 	and.w	r3, r3, #8
 80052d6:	2b08      	cmp	r3, #8
 80052d8:	d11a      	bne.n	8005310 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80052da:	78fb      	ldrb	r3, [r7, #3]
 80052dc:	015a      	lsls	r2, r3, #5
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	4413      	add	r3, r2
 80052e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052e6:	461a      	mov	r2, r3
 80052e8:	2308      	movs	r3, #8
 80052ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80052ec:	78fa      	ldrb	r2, [r7, #3]
 80052ee:	6879      	ldr	r1, [r7, #4]
 80052f0:	4613      	mov	r3, r2
 80052f2:	011b      	lsls	r3, r3, #4
 80052f4:	1a9b      	subs	r3, r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	440b      	add	r3, r1
 80052fa:	334d      	adds	r3, #77	@ 0x4d
 80052fc:	2206      	movs	r2, #6
 80052fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	78fa      	ldrb	r2, [r7, #3]
 8005306:	4611      	mov	r1, r2
 8005308:	4618      	mov	r0, r3
 800530a:	f004 fa01 	bl	8009710 <USB_HC_Halt>
 800530e:	e2f8      	b.n	8005902 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	78fa      	ldrb	r2, [r7, #3]
 8005316:	4611      	mov	r1, r2
 8005318:	4618      	mov	r0, r3
 800531a:	f004 f97c 	bl	8009616 <USB_ReadChInterrupts>
 800531e:	4603      	mov	r3, r0
 8005320:	f003 0310 	and.w	r3, r3, #16
 8005324:	2b10      	cmp	r3, #16
 8005326:	d144      	bne.n	80053b2 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005328:	78fa      	ldrb	r2, [r7, #3]
 800532a:	6879      	ldr	r1, [r7, #4]
 800532c:	4613      	mov	r3, r2
 800532e:	011b      	lsls	r3, r3, #4
 8005330:	1a9b      	subs	r3, r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	440b      	add	r3, r1
 8005336:	3344      	adds	r3, #68	@ 0x44
 8005338:	2200      	movs	r2, #0
 800533a:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800533c:	78fa      	ldrb	r2, [r7, #3]
 800533e:	6879      	ldr	r1, [r7, #4]
 8005340:	4613      	mov	r3, r2
 8005342:	011b      	lsls	r3, r3, #4
 8005344:	1a9b      	subs	r3, r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	440b      	add	r3, r1
 800534a:	334d      	adds	r3, #77	@ 0x4d
 800534c:	2204      	movs	r2, #4
 800534e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8005350:	78fa      	ldrb	r2, [r7, #3]
 8005352:	6879      	ldr	r1, [r7, #4]
 8005354:	4613      	mov	r3, r2
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	1a9b      	subs	r3, r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	440b      	add	r3, r1
 800535e:	3319      	adds	r3, #25
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d114      	bne.n	8005390 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8005366:	78fa      	ldrb	r2, [r7, #3]
 8005368:	6879      	ldr	r1, [r7, #4]
 800536a:	4613      	mov	r3, r2
 800536c:	011b      	lsls	r3, r3, #4
 800536e:	1a9b      	subs	r3, r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	440b      	add	r3, r1
 8005374:	3318      	adds	r3, #24
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d109      	bne.n	8005390 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800537c:	78fa      	ldrb	r2, [r7, #3]
 800537e:	6879      	ldr	r1, [r7, #4]
 8005380:	4613      	mov	r3, r2
 8005382:	011b      	lsls	r3, r3, #4
 8005384:	1a9b      	subs	r3, r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	440b      	add	r3, r1
 800538a:	3319      	adds	r3, #25
 800538c:	2201      	movs	r2, #1
 800538e:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	78fa      	ldrb	r2, [r7, #3]
 8005396:	4611      	mov	r1, r2
 8005398:	4618      	mov	r0, r3
 800539a:	f004 f9b9 	bl	8009710 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800539e:	78fb      	ldrb	r3, [r7, #3]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053aa:	461a      	mov	r2, r3
 80053ac:	2310      	movs	r3, #16
 80053ae:	6093      	str	r3, [r2, #8]
 80053b0:	e2a7      	b.n	8005902 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	78fa      	ldrb	r2, [r7, #3]
 80053b8:	4611      	mov	r1, r2
 80053ba:	4618      	mov	r0, r3
 80053bc:	f004 f92b 	bl	8009616 <USB_ReadChInterrupts>
 80053c0:	4603      	mov	r3, r0
 80053c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053c6:	2b80      	cmp	r3, #128	@ 0x80
 80053c8:	f040 8083 	bne.w	80054d2 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	799b      	ldrb	r3, [r3, #6]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d111      	bne.n	80053f8 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80053d4:	78fa      	ldrb	r2, [r7, #3]
 80053d6:	6879      	ldr	r1, [r7, #4]
 80053d8:	4613      	mov	r3, r2
 80053da:	011b      	lsls	r3, r3, #4
 80053dc:	1a9b      	subs	r3, r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	440b      	add	r3, r1
 80053e2:	334d      	adds	r3, #77	@ 0x4d
 80053e4:	2207      	movs	r2, #7
 80053e6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	78fa      	ldrb	r2, [r7, #3]
 80053ee:	4611      	mov	r1, r2
 80053f0:	4618      	mov	r0, r3
 80053f2:	f004 f98d 	bl	8009710 <USB_HC_Halt>
 80053f6:	e062      	b.n	80054be <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80053f8:	78fa      	ldrb	r2, [r7, #3]
 80053fa:	6879      	ldr	r1, [r7, #4]
 80053fc:	4613      	mov	r3, r2
 80053fe:	011b      	lsls	r3, r3, #4
 8005400:	1a9b      	subs	r3, r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	440b      	add	r3, r1
 8005406:	3344      	adds	r3, #68	@ 0x44
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	1c59      	adds	r1, r3, #1
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	4613      	mov	r3, r2
 8005410:	011b      	lsls	r3, r3, #4
 8005412:	1a9b      	subs	r3, r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4403      	add	r3, r0
 8005418:	3344      	adds	r3, #68	@ 0x44
 800541a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800541c:	78fa      	ldrb	r2, [r7, #3]
 800541e:	6879      	ldr	r1, [r7, #4]
 8005420:	4613      	mov	r3, r2
 8005422:	011b      	lsls	r3, r3, #4
 8005424:	1a9b      	subs	r3, r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	440b      	add	r3, r1
 800542a:	3344      	adds	r3, #68	@ 0x44
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2b02      	cmp	r3, #2
 8005430:	d922      	bls.n	8005478 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005432:	78fa      	ldrb	r2, [r7, #3]
 8005434:	6879      	ldr	r1, [r7, #4]
 8005436:	4613      	mov	r3, r2
 8005438:	011b      	lsls	r3, r3, #4
 800543a:	1a9b      	subs	r3, r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	440b      	add	r3, r1
 8005440:	3344      	adds	r3, #68	@ 0x44
 8005442:	2200      	movs	r2, #0
 8005444:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005446:	78fa      	ldrb	r2, [r7, #3]
 8005448:	6879      	ldr	r1, [r7, #4]
 800544a:	4613      	mov	r3, r2
 800544c:	011b      	lsls	r3, r3, #4
 800544e:	1a9b      	subs	r3, r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	440b      	add	r3, r1
 8005454:	334c      	adds	r3, #76	@ 0x4c
 8005456:	2204      	movs	r2, #4
 8005458:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800545a:	78fa      	ldrb	r2, [r7, #3]
 800545c:	6879      	ldr	r1, [r7, #4]
 800545e:	4613      	mov	r3, r2
 8005460:	011b      	lsls	r3, r3, #4
 8005462:	1a9b      	subs	r3, r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	440b      	add	r3, r1
 8005468:	334c      	adds	r3, #76	@ 0x4c
 800546a:	781a      	ldrb	r2, [r3, #0]
 800546c:	78fb      	ldrb	r3, [r7, #3]
 800546e:	4619      	mov	r1, r3
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f005 fc5f 	bl	800ad34 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005476:	e022      	b.n	80054be <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005478:	78fa      	ldrb	r2, [r7, #3]
 800547a:	6879      	ldr	r1, [r7, #4]
 800547c:	4613      	mov	r3, r2
 800547e:	011b      	lsls	r3, r3, #4
 8005480:	1a9b      	subs	r3, r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	440b      	add	r3, r1
 8005486:	334c      	adds	r3, #76	@ 0x4c
 8005488:	2202      	movs	r2, #2
 800548a:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800548c:	78fb      	ldrb	r3, [r7, #3]
 800548e:	015a      	lsls	r2, r3, #5
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	4413      	add	r3, r2
 8005494:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80054a2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80054aa:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80054ac:	78fb      	ldrb	r3, [r7, #3]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054b8:	461a      	mov	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80054be:	78fb      	ldrb	r3, [r7, #3]
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054ca:	461a      	mov	r2, r3
 80054cc:	2380      	movs	r3, #128	@ 0x80
 80054ce:	6093      	str	r3, [r2, #8]
 80054d0:	e217      	b.n	8005902 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	78fa      	ldrb	r2, [r7, #3]
 80054d8:	4611      	mov	r1, r2
 80054da:	4618      	mov	r0, r3
 80054dc:	f004 f89b 	bl	8009616 <USB_ReadChInterrupts>
 80054e0:	4603      	mov	r3, r0
 80054e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054ea:	d11b      	bne.n	8005524 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80054ec:	78fa      	ldrb	r2, [r7, #3]
 80054ee:	6879      	ldr	r1, [r7, #4]
 80054f0:	4613      	mov	r3, r2
 80054f2:	011b      	lsls	r3, r3, #4
 80054f4:	1a9b      	subs	r3, r3, r2
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	440b      	add	r3, r1
 80054fa:	334d      	adds	r3, #77	@ 0x4d
 80054fc:	2209      	movs	r2, #9
 80054fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	78fa      	ldrb	r2, [r7, #3]
 8005506:	4611      	mov	r1, r2
 8005508:	4618      	mov	r0, r3
 800550a:	f004 f901 	bl	8009710 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800550e:	78fb      	ldrb	r3, [r7, #3]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	4413      	add	r3, r2
 8005516:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800551a:	461a      	mov	r2, r3
 800551c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005520:	6093      	str	r3, [r2, #8]
 8005522:	e1ee      	b.n	8005902 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	78fa      	ldrb	r2, [r7, #3]
 800552a:	4611      	mov	r1, r2
 800552c:	4618      	mov	r0, r3
 800552e:	f004 f872 	bl	8009616 <USB_ReadChInterrupts>
 8005532:	4603      	mov	r3, r0
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b02      	cmp	r3, #2
 800553a:	f040 81df 	bne.w	80058fc <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800553e:	78fb      	ldrb	r3, [r7, #3]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	4413      	add	r3, r2
 8005546:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800554a:	461a      	mov	r2, r3
 800554c:	2302      	movs	r3, #2
 800554e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005550:	78fa      	ldrb	r2, [r7, #3]
 8005552:	6879      	ldr	r1, [r7, #4]
 8005554:	4613      	mov	r3, r2
 8005556:	011b      	lsls	r3, r3, #4
 8005558:	1a9b      	subs	r3, r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	440b      	add	r3, r1
 800555e:	334d      	adds	r3, #77	@ 0x4d
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	2b01      	cmp	r3, #1
 8005564:	f040 8093 	bne.w	800568e <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005568:	78fa      	ldrb	r2, [r7, #3]
 800556a:	6879      	ldr	r1, [r7, #4]
 800556c:	4613      	mov	r3, r2
 800556e:	011b      	lsls	r3, r3, #4
 8005570:	1a9b      	subs	r3, r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	440b      	add	r3, r1
 8005576:	334d      	adds	r3, #77	@ 0x4d
 8005578:	2202      	movs	r2, #2
 800557a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800557c:	78fa      	ldrb	r2, [r7, #3]
 800557e:	6879      	ldr	r1, [r7, #4]
 8005580:	4613      	mov	r3, r2
 8005582:	011b      	lsls	r3, r3, #4
 8005584:	1a9b      	subs	r3, r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	440b      	add	r3, r1
 800558a:	334c      	adds	r3, #76	@ 0x4c
 800558c:	2201      	movs	r2, #1
 800558e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005590:	78fa      	ldrb	r2, [r7, #3]
 8005592:	6879      	ldr	r1, [r7, #4]
 8005594:	4613      	mov	r3, r2
 8005596:	011b      	lsls	r3, r3, #4
 8005598:	1a9b      	subs	r3, r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	440b      	add	r3, r1
 800559e:	3326      	adds	r3, #38	@ 0x26
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d00b      	beq.n	80055be <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80055a6:	78fa      	ldrb	r2, [r7, #3]
 80055a8:	6879      	ldr	r1, [r7, #4]
 80055aa:	4613      	mov	r3, r2
 80055ac:	011b      	lsls	r3, r3, #4
 80055ae:	1a9b      	subs	r3, r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	440b      	add	r3, r1
 80055b4:	3326      	adds	r3, #38	@ 0x26
 80055b6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80055b8:	2b03      	cmp	r3, #3
 80055ba:	f040 8190 	bne.w	80058de <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	799b      	ldrb	r3, [r3, #6]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d115      	bne.n	80055f2 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80055c6:	78fa      	ldrb	r2, [r7, #3]
 80055c8:	6879      	ldr	r1, [r7, #4]
 80055ca:	4613      	mov	r3, r2
 80055cc:	011b      	lsls	r3, r3, #4
 80055ce:	1a9b      	subs	r3, r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	440b      	add	r3, r1
 80055d4:	333d      	adds	r3, #61	@ 0x3d
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	78fa      	ldrb	r2, [r7, #3]
 80055da:	f083 0301 	eor.w	r3, r3, #1
 80055de:	b2d8      	uxtb	r0, r3
 80055e0:	6879      	ldr	r1, [r7, #4]
 80055e2:	4613      	mov	r3, r2
 80055e4:	011b      	lsls	r3, r3, #4
 80055e6:	1a9b      	subs	r3, r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	440b      	add	r3, r1
 80055ec:	333d      	adds	r3, #61	@ 0x3d
 80055ee:	4602      	mov	r2, r0
 80055f0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	799b      	ldrb	r3, [r3, #6]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	f040 8171 	bne.w	80058de <HCD_HC_OUT_IRQHandler+0x954>
 80055fc:	78fa      	ldrb	r2, [r7, #3]
 80055fe:	6879      	ldr	r1, [r7, #4]
 8005600:	4613      	mov	r3, r2
 8005602:	011b      	lsls	r3, r3, #4
 8005604:	1a9b      	subs	r3, r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	440b      	add	r3, r1
 800560a:	3334      	adds	r3, #52	@ 0x34
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	f000 8165 	beq.w	80058de <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005614:	78fa      	ldrb	r2, [r7, #3]
 8005616:	6879      	ldr	r1, [r7, #4]
 8005618:	4613      	mov	r3, r2
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	1a9b      	subs	r3, r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	440b      	add	r3, r1
 8005622:	3334      	adds	r3, #52	@ 0x34
 8005624:	6819      	ldr	r1, [r3, #0]
 8005626:	78fa      	ldrb	r2, [r7, #3]
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	4613      	mov	r3, r2
 800562c:	011b      	lsls	r3, r3, #4
 800562e:	1a9b      	subs	r3, r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4403      	add	r3, r0
 8005634:	3328      	adds	r3, #40	@ 0x28
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	440b      	add	r3, r1
 800563a:	1e59      	subs	r1, r3, #1
 800563c:	78fa      	ldrb	r2, [r7, #3]
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	4613      	mov	r3, r2
 8005642:	011b      	lsls	r3, r3, #4
 8005644:	1a9b      	subs	r3, r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	4403      	add	r3, r0
 800564a:	3328      	adds	r3, #40	@ 0x28
 800564c:	881b      	ldrh	r3, [r3, #0]
 800564e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005652:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b00      	cmp	r3, #0
 800565c:	f000 813f 	beq.w	80058de <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005660:	78fa      	ldrb	r2, [r7, #3]
 8005662:	6879      	ldr	r1, [r7, #4]
 8005664:	4613      	mov	r3, r2
 8005666:	011b      	lsls	r3, r3, #4
 8005668:	1a9b      	subs	r3, r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	440b      	add	r3, r1
 800566e:	333d      	adds	r3, #61	@ 0x3d
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	78fa      	ldrb	r2, [r7, #3]
 8005674:	f083 0301 	eor.w	r3, r3, #1
 8005678:	b2d8      	uxtb	r0, r3
 800567a:	6879      	ldr	r1, [r7, #4]
 800567c:	4613      	mov	r3, r2
 800567e:	011b      	lsls	r3, r3, #4
 8005680:	1a9b      	subs	r3, r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	440b      	add	r3, r1
 8005686:	333d      	adds	r3, #61	@ 0x3d
 8005688:	4602      	mov	r2, r0
 800568a:	701a      	strb	r2, [r3, #0]
 800568c:	e127      	b.n	80058de <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800568e:	78fa      	ldrb	r2, [r7, #3]
 8005690:	6879      	ldr	r1, [r7, #4]
 8005692:	4613      	mov	r3, r2
 8005694:	011b      	lsls	r3, r3, #4
 8005696:	1a9b      	subs	r3, r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	440b      	add	r3, r1
 800569c:	334d      	adds	r3, #77	@ 0x4d
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	2b03      	cmp	r3, #3
 80056a2:	d120      	bne.n	80056e6 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80056a4:	78fa      	ldrb	r2, [r7, #3]
 80056a6:	6879      	ldr	r1, [r7, #4]
 80056a8:	4613      	mov	r3, r2
 80056aa:	011b      	lsls	r3, r3, #4
 80056ac:	1a9b      	subs	r3, r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	440b      	add	r3, r1
 80056b2:	334d      	adds	r3, #77	@ 0x4d
 80056b4:	2202      	movs	r2, #2
 80056b6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80056b8:	78fa      	ldrb	r2, [r7, #3]
 80056ba:	6879      	ldr	r1, [r7, #4]
 80056bc:	4613      	mov	r3, r2
 80056be:	011b      	lsls	r3, r3, #4
 80056c0:	1a9b      	subs	r3, r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	440b      	add	r3, r1
 80056c6:	331b      	adds	r3, #27
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	f040 8107 	bne.w	80058de <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80056d0:	78fa      	ldrb	r2, [r7, #3]
 80056d2:	6879      	ldr	r1, [r7, #4]
 80056d4:	4613      	mov	r3, r2
 80056d6:	011b      	lsls	r3, r3, #4
 80056d8:	1a9b      	subs	r3, r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	440b      	add	r3, r1
 80056de:	334c      	adds	r3, #76	@ 0x4c
 80056e0:	2202      	movs	r2, #2
 80056e2:	701a      	strb	r2, [r3, #0]
 80056e4:	e0fb      	b.n	80058de <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80056e6:	78fa      	ldrb	r2, [r7, #3]
 80056e8:	6879      	ldr	r1, [r7, #4]
 80056ea:	4613      	mov	r3, r2
 80056ec:	011b      	lsls	r3, r3, #4
 80056ee:	1a9b      	subs	r3, r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	440b      	add	r3, r1
 80056f4:	334d      	adds	r3, #77	@ 0x4d
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	2b04      	cmp	r3, #4
 80056fa:	d13a      	bne.n	8005772 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80056fc:	78fa      	ldrb	r2, [r7, #3]
 80056fe:	6879      	ldr	r1, [r7, #4]
 8005700:	4613      	mov	r3, r2
 8005702:	011b      	lsls	r3, r3, #4
 8005704:	1a9b      	subs	r3, r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	440b      	add	r3, r1
 800570a:	334d      	adds	r3, #77	@ 0x4d
 800570c:	2202      	movs	r2, #2
 800570e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005710:	78fa      	ldrb	r2, [r7, #3]
 8005712:	6879      	ldr	r1, [r7, #4]
 8005714:	4613      	mov	r3, r2
 8005716:	011b      	lsls	r3, r3, #4
 8005718:	1a9b      	subs	r3, r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	440b      	add	r3, r1
 800571e:	334c      	adds	r3, #76	@ 0x4c
 8005720:	2202      	movs	r2, #2
 8005722:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005724:	78fa      	ldrb	r2, [r7, #3]
 8005726:	6879      	ldr	r1, [r7, #4]
 8005728:	4613      	mov	r3, r2
 800572a:	011b      	lsls	r3, r3, #4
 800572c:	1a9b      	subs	r3, r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	440b      	add	r3, r1
 8005732:	331b      	adds	r3, #27
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	2b01      	cmp	r3, #1
 8005738:	f040 80d1 	bne.w	80058de <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800573c:	78fa      	ldrb	r2, [r7, #3]
 800573e:	6879      	ldr	r1, [r7, #4]
 8005740:	4613      	mov	r3, r2
 8005742:	011b      	lsls	r3, r3, #4
 8005744:	1a9b      	subs	r3, r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	440b      	add	r3, r1
 800574a:	331b      	adds	r3, #27
 800574c:	2200      	movs	r2, #0
 800574e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005750:	78fb      	ldrb	r3, [r7, #3]
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	4413      	add	r3, r2
 8005758:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	78fa      	ldrb	r2, [r7, #3]
 8005760:	0151      	lsls	r1, r2, #5
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	440a      	add	r2, r1
 8005766:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800576a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800576e:	6053      	str	r3, [r2, #4]
 8005770:	e0b5      	b.n	80058de <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005772:	78fa      	ldrb	r2, [r7, #3]
 8005774:	6879      	ldr	r1, [r7, #4]
 8005776:	4613      	mov	r3, r2
 8005778:	011b      	lsls	r3, r3, #4
 800577a:	1a9b      	subs	r3, r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	440b      	add	r3, r1
 8005780:	334d      	adds	r3, #77	@ 0x4d
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	2b05      	cmp	r3, #5
 8005786:	d114      	bne.n	80057b2 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005788:	78fa      	ldrb	r2, [r7, #3]
 800578a:	6879      	ldr	r1, [r7, #4]
 800578c:	4613      	mov	r3, r2
 800578e:	011b      	lsls	r3, r3, #4
 8005790:	1a9b      	subs	r3, r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	440b      	add	r3, r1
 8005796:	334d      	adds	r3, #77	@ 0x4d
 8005798:	2202      	movs	r2, #2
 800579a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800579c:	78fa      	ldrb	r2, [r7, #3]
 800579e:	6879      	ldr	r1, [r7, #4]
 80057a0:	4613      	mov	r3, r2
 80057a2:	011b      	lsls	r3, r3, #4
 80057a4:	1a9b      	subs	r3, r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	440b      	add	r3, r1
 80057aa:	334c      	adds	r3, #76	@ 0x4c
 80057ac:	2202      	movs	r2, #2
 80057ae:	701a      	strb	r2, [r3, #0]
 80057b0:	e095      	b.n	80058de <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80057b2:	78fa      	ldrb	r2, [r7, #3]
 80057b4:	6879      	ldr	r1, [r7, #4]
 80057b6:	4613      	mov	r3, r2
 80057b8:	011b      	lsls	r3, r3, #4
 80057ba:	1a9b      	subs	r3, r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	440b      	add	r3, r1
 80057c0:	334d      	adds	r3, #77	@ 0x4d
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	2b06      	cmp	r3, #6
 80057c6:	d114      	bne.n	80057f2 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80057c8:	78fa      	ldrb	r2, [r7, #3]
 80057ca:	6879      	ldr	r1, [r7, #4]
 80057cc:	4613      	mov	r3, r2
 80057ce:	011b      	lsls	r3, r3, #4
 80057d0:	1a9b      	subs	r3, r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	440b      	add	r3, r1
 80057d6:	334d      	adds	r3, #77	@ 0x4d
 80057d8:	2202      	movs	r2, #2
 80057da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80057dc:	78fa      	ldrb	r2, [r7, #3]
 80057de:	6879      	ldr	r1, [r7, #4]
 80057e0:	4613      	mov	r3, r2
 80057e2:	011b      	lsls	r3, r3, #4
 80057e4:	1a9b      	subs	r3, r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	440b      	add	r3, r1
 80057ea:	334c      	adds	r3, #76	@ 0x4c
 80057ec:	2205      	movs	r2, #5
 80057ee:	701a      	strb	r2, [r3, #0]
 80057f0:	e075      	b.n	80058de <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80057f2:	78fa      	ldrb	r2, [r7, #3]
 80057f4:	6879      	ldr	r1, [r7, #4]
 80057f6:	4613      	mov	r3, r2
 80057f8:	011b      	lsls	r3, r3, #4
 80057fa:	1a9b      	subs	r3, r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	440b      	add	r3, r1
 8005800:	334d      	adds	r3, #77	@ 0x4d
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	2b07      	cmp	r3, #7
 8005806:	d00a      	beq.n	800581e <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005808:	78fa      	ldrb	r2, [r7, #3]
 800580a:	6879      	ldr	r1, [r7, #4]
 800580c:	4613      	mov	r3, r2
 800580e:	011b      	lsls	r3, r3, #4
 8005810:	1a9b      	subs	r3, r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	440b      	add	r3, r1
 8005816:	334d      	adds	r3, #77	@ 0x4d
 8005818:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800581a:	2b09      	cmp	r3, #9
 800581c:	d170      	bne.n	8005900 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800581e:	78fa      	ldrb	r2, [r7, #3]
 8005820:	6879      	ldr	r1, [r7, #4]
 8005822:	4613      	mov	r3, r2
 8005824:	011b      	lsls	r3, r3, #4
 8005826:	1a9b      	subs	r3, r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	440b      	add	r3, r1
 800582c:	334d      	adds	r3, #77	@ 0x4d
 800582e:	2202      	movs	r2, #2
 8005830:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005832:	78fa      	ldrb	r2, [r7, #3]
 8005834:	6879      	ldr	r1, [r7, #4]
 8005836:	4613      	mov	r3, r2
 8005838:	011b      	lsls	r3, r3, #4
 800583a:	1a9b      	subs	r3, r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	440b      	add	r3, r1
 8005840:	3344      	adds	r3, #68	@ 0x44
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	1c59      	adds	r1, r3, #1
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	4613      	mov	r3, r2
 800584a:	011b      	lsls	r3, r3, #4
 800584c:	1a9b      	subs	r3, r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4403      	add	r3, r0
 8005852:	3344      	adds	r3, #68	@ 0x44
 8005854:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005856:	78fa      	ldrb	r2, [r7, #3]
 8005858:	6879      	ldr	r1, [r7, #4]
 800585a:	4613      	mov	r3, r2
 800585c:	011b      	lsls	r3, r3, #4
 800585e:	1a9b      	subs	r3, r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	440b      	add	r3, r1
 8005864:	3344      	adds	r3, #68	@ 0x44
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2b02      	cmp	r3, #2
 800586a:	d914      	bls.n	8005896 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800586c:	78fa      	ldrb	r2, [r7, #3]
 800586e:	6879      	ldr	r1, [r7, #4]
 8005870:	4613      	mov	r3, r2
 8005872:	011b      	lsls	r3, r3, #4
 8005874:	1a9b      	subs	r3, r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	440b      	add	r3, r1
 800587a:	3344      	adds	r3, #68	@ 0x44
 800587c:	2200      	movs	r2, #0
 800587e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005880:	78fa      	ldrb	r2, [r7, #3]
 8005882:	6879      	ldr	r1, [r7, #4]
 8005884:	4613      	mov	r3, r2
 8005886:	011b      	lsls	r3, r3, #4
 8005888:	1a9b      	subs	r3, r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	440b      	add	r3, r1
 800588e:	334c      	adds	r3, #76	@ 0x4c
 8005890:	2204      	movs	r2, #4
 8005892:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005894:	e022      	b.n	80058dc <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005896:	78fa      	ldrb	r2, [r7, #3]
 8005898:	6879      	ldr	r1, [r7, #4]
 800589a:	4613      	mov	r3, r2
 800589c:	011b      	lsls	r3, r3, #4
 800589e:	1a9b      	subs	r3, r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	440b      	add	r3, r1
 80058a4:	334c      	adds	r3, #76	@ 0x4c
 80058a6:	2202      	movs	r2, #2
 80058a8:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80058aa:	78fb      	ldrb	r3, [r7, #3]
 80058ac:	015a      	lsls	r2, r3, #5
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	4413      	add	r3, r2
 80058b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80058c0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80058c8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80058ca:	78fb      	ldrb	r3, [r7, #3]
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058d6:	461a      	mov	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80058dc:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80058de:	78fa      	ldrb	r2, [r7, #3]
 80058e0:	6879      	ldr	r1, [r7, #4]
 80058e2:	4613      	mov	r3, r2
 80058e4:	011b      	lsls	r3, r3, #4
 80058e6:	1a9b      	subs	r3, r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	440b      	add	r3, r1
 80058ec:	334c      	adds	r3, #76	@ 0x4c
 80058ee:	781a      	ldrb	r2, [r3, #0]
 80058f0:	78fb      	ldrb	r3, [r7, #3]
 80058f2:	4619      	mov	r1, r3
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f005 fa1d 	bl	800ad34 <HAL_HCD_HC_NotifyURBChange_Callback>
 80058fa:	e002      	b.n	8005902 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80058fc:	bf00      	nop
 80058fe:	e000      	b.n	8005902 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8005900:	bf00      	nop
  }
}
 8005902:	3718      	adds	r7, #24
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b08a      	sub	sp, #40	@ 0x28
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005918:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	f003 030f 	and.w	r3, r3, #15
 8005928:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	0c5b      	lsrs	r3, r3, #17
 800592e:	f003 030f 	and.w	r3, r3, #15
 8005932:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	091b      	lsrs	r3, r3, #4
 8005938:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800593c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2b02      	cmp	r3, #2
 8005942:	d004      	beq.n	800594e <HCD_RXQLVL_IRQHandler+0x46>
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	2b05      	cmp	r3, #5
 8005948:	f000 80b6 	beq.w	8005ab8 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800594c:	e0b7      	b.n	8005abe <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	2b00      	cmp	r3, #0
 8005952:	f000 80b3 	beq.w	8005abc <HCD_RXQLVL_IRQHandler+0x1b4>
 8005956:	6879      	ldr	r1, [r7, #4]
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	4613      	mov	r3, r2
 800595c:	011b      	lsls	r3, r3, #4
 800595e:	1a9b      	subs	r3, r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	440b      	add	r3, r1
 8005964:	332c      	adds	r3, #44	@ 0x2c
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 80a7 	beq.w	8005abc <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800596e:	6879      	ldr	r1, [r7, #4]
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	4613      	mov	r3, r2
 8005974:	011b      	lsls	r3, r3, #4
 8005976:	1a9b      	subs	r3, r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	440b      	add	r3, r1
 800597c:	3338      	adds	r3, #56	@ 0x38
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	18d1      	adds	r1, r2, r3
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	4613      	mov	r3, r2
 800598a:	011b      	lsls	r3, r3, #4
 800598c:	1a9b      	subs	r3, r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4403      	add	r3, r0
 8005992:	3334      	adds	r3, #52	@ 0x34
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4299      	cmp	r1, r3
 8005998:	f200 8083 	bhi.w	8005aa2 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6818      	ldr	r0, [r3, #0]
 80059a0:	6879      	ldr	r1, [r7, #4]
 80059a2:	69ba      	ldr	r2, [r7, #24]
 80059a4:	4613      	mov	r3, r2
 80059a6:	011b      	lsls	r3, r3, #4
 80059a8:	1a9b      	subs	r3, r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	440b      	add	r3, r1
 80059ae:	332c      	adds	r3, #44	@ 0x2c
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	b292      	uxth	r2, r2
 80059b6:	4619      	mov	r1, r3
 80059b8:	f003 fdc2 	bl	8009540 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80059bc:	6879      	ldr	r1, [r7, #4]
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	4613      	mov	r3, r2
 80059c2:	011b      	lsls	r3, r3, #4
 80059c4:	1a9b      	subs	r3, r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	440b      	add	r3, r1
 80059ca:	332c      	adds	r3, #44	@ 0x2c
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	18d1      	adds	r1, r2, r3
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	4613      	mov	r3, r2
 80059d8:	011b      	lsls	r3, r3, #4
 80059da:	1a9b      	subs	r3, r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4403      	add	r3, r0
 80059e0:	332c      	adds	r3, #44	@ 0x2c
 80059e2:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80059e4:	6879      	ldr	r1, [r7, #4]
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	4613      	mov	r3, r2
 80059ea:	011b      	lsls	r3, r3, #4
 80059ec:	1a9b      	subs	r3, r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	440b      	add	r3, r1
 80059f2:	3338      	adds	r3, #56	@ 0x38
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	18d1      	adds	r1, r2, r3
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	4613      	mov	r3, r2
 8005a00:	011b      	lsls	r3, r3, #4
 8005a02:	1a9b      	subs	r3, r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4403      	add	r3, r0
 8005a08:	3338      	adds	r3, #56	@ 0x38
 8005a0a:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	6a3b      	ldr	r3, [r7, #32]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	0cdb      	lsrs	r3, r3, #19
 8005a1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a20:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005a22:	6879      	ldr	r1, [r7, #4]
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	4613      	mov	r3, r2
 8005a28:	011b      	lsls	r3, r3, #4
 8005a2a:	1a9b      	subs	r3, r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	440b      	add	r3, r1
 8005a30:	3328      	adds	r3, #40	@ 0x28
 8005a32:	881b      	ldrh	r3, [r3, #0]
 8005a34:	461a      	mov	r2, r3
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d13f      	bne.n	8005abc <HCD_RXQLVL_IRQHandler+0x1b4>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d03c      	beq.n	8005abc <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	015a      	lsls	r2, r3, #5
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	4413      	add	r3, r2
 8005a4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005a58:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005a60:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	015a      	lsls	r2, r3, #5
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a6e:	461a      	mov	r2, r3
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005a74:	6879      	ldr	r1, [r7, #4]
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	011b      	lsls	r3, r3, #4
 8005a7c:	1a9b      	subs	r3, r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	440b      	add	r3, r1
 8005a82:	333c      	adds	r3, #60	@ 0x3c
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	f083 0301 	eor.w	r3, r3, #1
 8005a8a:	b2d8      	uxtb	r0, r3
 8005a8c:	6879      	ldr	r1, [r7, #4]
 8005a8e:	69ba      	ldr	r2, [r7, #24]
 8005a90:	4613      	mov	r3, r2
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	1a9b      	subs	r3, r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	440b      	add	r3, r1
 8005a9a:	333c      	adds	r3, #60	@ 0x3c
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	701a      	strb	r2, [r3, #0]
      break;
 8005aa0:	e00c      	b.n	8005abc <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005aa2:	6879      	ldr	r1, [r7, #4]
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	011b      	lsls	r3, r3, #4
 8005aaa:	1a9b      	subs	r3, r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	440b      	add	r3, r1
 8005ab0:	334c      	adds	r3, #76	@ 0x4c
 8005ab2:	2204      	movs	r2, #4
 8005ab4:	701a      	strb	r2, [r3, #0]
      break;
 8005ab6:	e001      	b.n	8005abc <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8005ab8:	bf00      	nop
 8005aba:	e000      	b.n	8005abe <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005abc:	bf00      	nop
  }
}
 8005abe:	bf00      	nop
 8005ac0:	3728      	adds	r7, #40	@ 0x28
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b086      	sub	sp, #24
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005af2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d10b      	bne.n	8005b16 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d102      	bne.n	8005b0e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f005 f8f7 	bl	800acfc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	f043 0302 	orr.w	r3, r3, #2
 8005b14:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f003 0308 	and.w	r3, r3, #8
 8005b1c:	2b08      	cmp	r3, #8
 8005b1e:	d132      	bne.n	8005b86 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f043 0308 	orr.w	r3, r3, #8
 8005b26:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f003 0304 	and.w	r3, r3, #4
 8005b2e:	2b04      	cmp	r3, #4
 8005b30:	d126      	bne.n	8005b80 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	7a5b      	ldrb	r3, [r3, #9]
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d113      	bne.n	8005b62 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005b40:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b44:	d106      	bne.n	8005b54 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2102      	movs	r1, #2
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f003 fd91 	bl	8009674 <USB_InitFSLSPClkSel>
 8005b52:	e011      	b.n	8005b78 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2101      	movs	r1, #1
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f003 fd8a 	bl	8009674 <USB_InitFSLSPClkSel>
 8005b60:	e00a      	b.n	8005b78 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	79db      	ldrb	r3, [r3, #7]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d106      	bne.n	8005b78 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b70:	461a      	mov	r2, r3
 8005b72:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005b76:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f005 f8ed 	bl	800ad58 <HAL_HCD_PortEnabled_Callback>
 8005b7e:	e002      	b.n	8005b86 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f005 f8f7 	bl	800ad74 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f003 0320 	and.w	r3, r3, #32
 8005b8c:	2b20      	cmp	r3, #32
 8005b8e:	d103      	bne.n	8005b98 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	f043 0320 	orr.w	r3, r3, #32
 8005b96:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	6013      	str	r3, [r2, #0]
}
 8005ba4:	bf00      	nop
 8005ba6:	3718      	adds	r7, #24
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e12b      	b.n	8005e16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d106      	bne.n	8005bd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f7fb ff3e 	bl	8001a54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2224      	movs	r2, #36	@ 0x24
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f022 0201 	bic.w	r2, r2, #1
 8005bee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005bfe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c10:	f001 f964 	bl	8006edc <HAL_RCC_GetPCLK1Freq>
 8005c14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	4a81      	ldr	r2, [pc, #516]	@ (8005e20 <HAL_I2C_Init+0x274>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d807      	bhi.n	8005c30 <HAL_I2C_Init+0x84>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	4a80      	ldr	r2, [pc, #512]	@ (8005e24 <HAL_I2C_Init+0x278>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	bf94      	ite	ls
 8005c28:	2301      	movls	r3, #1
 8005c2a:	2300      	movhi	r3, #0
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	e006      	b.n	8005c3e <HAL_I2C_Init+0x92>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4a7d      	ldr	r2, [pc, #500]	@ (8005e28 <HAL_I2C_Init+0x27c>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	bf94      	ite	ls
 8005c38:	2301      	movls	r3, #1
 8005c3a:	2300      	movhi	r3, #0
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e0e7      	b.n	8005e16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	4a78      	ldr	r2, [pc, #480]	@ (8005e2c <HAL_I2C_Init+0x280>)
 8005c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4e:	0c9b      	lsrs	r3, r3, #18
 8005c50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	430a      	orrs	r2, r1
 8005c64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6a1b      	ldr	r3, [r3, #32]
 8005c6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	4a6a      	ldr	r2, [pc, #424]	@ (8005e20 <HAL_I2C_Init+0x274>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d802      	bhi.n	8005c80 <HAL_I2C_Init+0xd4>
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	e009      	b.n	8005c94 <HAL_I2C_Init+0xe8>
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005c86:	fb02 f303 	mul.w	r3, r2, r3
 8005c8a:	4a69      	ldr	r2, [pc, #420]	@ (8005e30 <HAL_I2C_Init+0x284>)
 8005c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c90:	099b      	lsrs	r3, r3, #6
 8005c92:	3301      	adds	r3, #1
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	6812      	ldr	r2, [r2, #0]
 8005c98:	430b      	orrs	r3, r1
 8005c9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005ca6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	495c      	ldr	r1, [pc, #368]	@ (8005e20 <HAL_I2C_Init+0x274>)
 8005cb0:	428b      	cmp	r3, r1
 8005cb2:	d819      	bhi.n	8005ce8 <HAL_I2C_Init+0x13c>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	1e59      	subs	r1, r3, #1
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cc2:	1c59      	adds	r1, r3, #1
 8005cc4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005cc8:	400b      	ands	r3, r1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00a      	beq.n	8005ce4 <HAL_I2C_Init+0x138>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	1e59      	subs	r1, r3, #1
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cdc:	3301      	adds	r3, #1
 8005cde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ce2:	e051      	b.n	8005d88 <HAL_I2C_Init+0x1dc>
 8005ce4:	2304      	movs	r3, #4
 8005ce6:	e04f      	b.n	8005d88 <HAL_I2C_Init+0x1dc>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d111      	bne.n	8005d14 <HAL_I2C_Init+0x168>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	1e58      	subs	r0, r3, #1
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6859      	ldr	r1, [r3, #4]
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	005b      	lsls	r3, r3, #1
 8005cfc:	440b      	add	r3, r1
 8005cfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d02:	3301      	adds	r3, #1
 8005d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	bf0c      	ite	eq
 8005d0c:	2301      	moveq	r3, #1
 8005d0e:	2300      	movne	r3, #0
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	e012      	b.n	8005d3a <HAL_I2C_Init+0x18e>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	1e58      	subs	r0, r3, #1
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6859      	ldr	r1, [r3, #4]
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	440b      	add	r3, r1
 8005d22:	0099      	lsls	r1, r3, #2
 8005d24:	440b      	add	r3, r1
 8005d26:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	bf0c      	ite	eq
 8005d34:	2301      	moveq	r3, #1
 8005d36:	2300      	movne	r3, #0
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <HAL_I2C_Init+0x196>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e022      	b.n	8005d88 <HAL_I2C_Init+0x1dc>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10e      	bne.n	8005d68 <HAL_I2C_Init+0x1bc>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	1e58      	subs	r0, r3, #1
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6859      	ldr	r1, [r3, #4]
 8005d52:	460b      	mov	r3, r1
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	440b      	add	r3, r1
 8005d58:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d66:	e00f      	b.n	8005d88 <HAL_I2C_Init+0x1dc>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	1e58      	subs	r0, r3, #1
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6859      	ldr	r1, [r3, #4]
 8005d70:	460b      	mov	r3, r1
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	440b      	add	r3, r1
 8005d76:	0099      	lsls	r1, r3, #2
 8005d78:	440b      	add	r3, r1
 8005d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d7e:	3301      	adds	r3, #1
 8005d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d88:	6879      	ldr	r1, [r7, #4]
 8005d8a:	6809      	ldr	r1, [r1, #0]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	69da      	ldr	r2, [r3, #28]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	431a      	orrs	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	430a      	orrs	r2, r1
 8005daa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005db6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	6911      	ldr	r1, [r2, #16]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	68d2      	ldr	r2, [r2, #12]
 8005dc2:	4311      	orrs	r1, r2
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	6812      	ldr	r2, [r2, #0]
 8005dc8:	430b      	orrs	r3, r1
 8005dca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	695a      	ldr	r2, [r3, #20]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	431a      	orrs	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	430a      	orrs	r2, r1
 8005de6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f042 0201 	orr.w	r2, r2, #1
 8005df6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2220      	movs	r2, #32
 8005e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	000186a0 	.word	0x000186a0
 8005e24:	001e847f 	.word	0x001e847f
 8005e28:	003d08ff 	.word	0x003d08ff
 8005e2c:	431bde83 	.word	0x431bde83
 8005e30:	10624dd3 	.word	0x10624dd3

08005e34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b20      	cmp	r3, #32
 8005e48:	d129      	bne.n	8005e9e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2224      	movs	r2, #36	@ 0x24
 8005e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 0201 	bic.w	r2, r2, #1
 8005e60:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 0210 	bic.w	r2, r2, #16
 8005e70:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f042 0201 	orr.w	r2, r2, #1
 8005e90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2220      	movs	r2, #32
 8005e96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	e000      	b.n	8005ea0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005e9e:	2302      	movs	r3, #2
  }
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b20      	cmp	r3, #32
 8005ec4:	d12a      	bne.n	8005f1c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2224      	movs	r2, #36	@ 0x24
 8005eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f022 0201 	bic.w	r2, r2, #1
 8005edc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005ee6:	89fb      	ldrh	r3, [r7, #14]
 8005ee8:	f023 030f 	bic.w	r3, r3, #15
 8005eec:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	89fb      	ldrh	r3, [r7, #14]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	89fa      	ldrh	r2, [r7, #14]
 8005efe:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f042 0201 	orr.w	r2, r2, #1
 8005f0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2220      	movs	r2, #32
 8005f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	e000      	b.n	8005f1e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005f1c:	2302      	movs	r3, #2
  }
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3714      	adds	r7, #20
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
	...

08005f2c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e0bf      	b.n	80060be <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d106      	bne.n	8005f58 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7fc f9a6 	bl	80022a4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	699a      	ldr	r2, [r3, #24]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005f6e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6999      	ldr	r1, [r3, #24]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f84:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	6899      	ldr	r1, [r3, #8]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	4b4a      	ldr	r3, [pc, #296]	@ (80060c8 <HAL_LTDC_Init+0x19c>)
 8005fa0:	400b      	ands	r3, r1
 8005fa2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	041b      	lsls	r3, r3, #16
 8005faa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6899      	ldr	r1, [r3, #8]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	699a      	ldr	r2, [r3, #24]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	431a      	orrs	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68d9      	ldr	r1, [r3, #12]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	4b3e      	ldr	r3, [pc, #248]	@ (80060c8 <HAL_LTDC_Init+0x19c>)
 8005fce:	400b      	ands	r3, r1
 8005fd0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	041b      	lsls	r3, r3, #16
 8005fd8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68d9      	ldr	r1, [r3, #12]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a1a      	ldr	r2, [r3, #32]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	430a      	orrs	r2, r1
 8005fee:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6919      	ldr	r1, [r3, #16]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	4b33      	ldr	r3, [pc, #204]	@ (80060c8 <HAL_LTDC_Init+0x19c>)
 8005ffc:	400b      	ands	r3, r1
 8005ffe:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006004:	041b      	lsls	r3, r3, #16
 8006006:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6919      	ldr	r1, [r3, #16]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	431a      	orrs	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	430a      	orrs	r2, r1
 800601c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	6959      	ldr	r1, [r3, #20]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	4b27      	ldr	r3, [pc, #156]	@ (80060c8 <HAL_LTDC_Init+0x19c>)
 800602a:	400b      	ands	r3, r1
 800602c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006032:	041b      	lsls	r3, r3, #16
 8006034:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6959      	ldr	r1, [r3, #20]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	431a      	orrs	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	430a      	orrs	r2, r1
 800604a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006052:	021b      	lsls	r3, r3, #8
 8006054:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800605c:	041b      	lsls	r3, r3, #16
 800605e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800606e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	4313      	orrs	r3, r2
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8006082:	431a      	orrs	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	430a      	orrs	r2, r1
 800608a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f042 0206 	orr.w	r2, r2, #6
 800609a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	699a      	ldr	r2, [r3, #24]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f042 0201 	orr.w	r2, r2, #1
 80060aa:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	f000f800 	.word	0xf000f800

080060cc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060da:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060e2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f003 0304 	and.w	r3, r3, #4
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d023      	beq.n	8006136 <HAL_LTDC_IRQHandler+0x6a>
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	f003 0304 	and.w	r3, r3, #4
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d01e      	beq.n	8006136 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 0204 	bic.w	r2, r2, #4
 8006106:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2204      	movs	r2, #4
 800610e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006116:	f043 0201 	orr.w	r2, r3, #1
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2204      	movs	r2, #4
 8006124:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 f86f 	bl	8006214 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f003 0302 	and.w	r3, r3, #2
 800613c:	2b00      	cmp	r3, #0
 800613e:	d023      	beq.n	8006188 <HAL_LTDC_IRQHandler+0xbc>
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f003 0302 	and.w	r3, r3, #2
 8006146:	2b00      	cmp	r3, #0
 8006148:	d01e      	beq.n	8006188 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f022 0202 	bic.w	r2, r2, #2
 8006158:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2202      	movs	r2, #2
 8006160:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006168:	f043 0202 	orr.w	r2, r3, #2
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2204      	movs	r2, #4
 8006176:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f846 	bl	8006214 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	2b00      	cmp	r3, #0
 8006190:	d01b      	beq.n	80061ca <HAL_LTDC_IRQHandler+0xfe>
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	2b00      	cmp	r3, #0
 800619a:	d016      	beq.n	80061ca <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f022 0201 	bic.w	r2, r2, #1
 80061aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2201      	movs	r2, #1
 80061b2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 f82f 	bl	8006228 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f003 0308 	and.w	r3, r3, #8
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d01b      	beq.n	800620c <HAL_LTDC_IRQHandler+0x140>
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	f003 0308 	and.w	r3, r3, #8
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d016      	beq.n	800620c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f022 0208 	bic.w	r2, r2, #8
 80061ec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2208      	movs	r2, #8
 80061f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f818 	bl	800623c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800620c:	bf00      	nop
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006250:	b5b0      	push	{r4, r5, r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006262:	2b01      	cmp	r3, #1
 8006264:	d101      	bne.n	800626a <HAL_LTDC_ConfigLayer+0x1a>
 8006266:	2302      	movs	r3, #2
 8006268:	e02c      	b.n	80062c4 <HAL_LTDC_ConfigLayer+0x74>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2202      	movs	r2, #2
 8006276:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2134      	movs	r1, #52	@ 0x34
 8006280:	fb01 f303 	mul.w	r3, r1, r3
 8006284:	4413      	add	r3, r2
 8006286:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	4614      	mov	r4, r2
 800628e:	461d      	mov	r5, r3
 8006290:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006294:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006296:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006298:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800629a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800629c:	682b      	ldr	r3, [r5, #0]
 800629e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	68b9      	ldr	r1, [r7, #8]
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f000 f811 	bl	80062cc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2201      	movs	r2, #1
 80062b0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bdb0      	pop	{r4, r5, r7, pc}

080062cc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b089      	sub	sp, #36	@ 0x24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	685a      	ldr	r2, [r3, #4]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	0c1b      	lsrs	r3, r3, #16
 80062e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062e8:	4413      	add	r3, r2
 80062ea:	041b      	lsls	r3, r3, #16
 80062ec:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	461a      	mov	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	01db      	lsls	r3, r3, #7
 80062f8:	4413      	add	r3, r2
 80062fa:	3384      	adds	r3, #132	@ 0x84
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	6812      	ldr	r2, [r2, #0]
 8006302:	4611      	mov	r1, r2
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	01d2      	lsls	r2, r2, #7
 8006308:	440a      	add	r2, r1
 800630a:	3284      	adds	r2, #132	@ 0x84
 800630c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006310:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	0c1b      	lsrs	r3, r3, #16
 800631e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006322:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006324:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4619      	mov	r1, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	01db      	lsls	r3, r3, #7
 8006330:	440b      	add	r3, r1
 8006332:	3384      	adds	r3, #132	@ 0x84
 8006334:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800633a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	68da      	ldr	r2, [r3, #12]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800634a:	4413      	add	r3, r2
 800634c:	041b      	lsls	r3, r3, #16
 800634e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	461a      	mov	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	01db      	lsls	r3, r3, #7
 800635a:	4413      	add	r3, r2
 800635c:	3384      	adds	r3, #132	@ 0x84
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	6812      	ldr	r2, [r2, #0]
 8006364:	4611      	mov	r1, r2
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	01d2      	lsls	r2, r2, #7
 800636a:	440a      	add	r2, r1
 800636c:	3284      	adds	r2, #132	@ 0x84
 800636e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006372:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	689a      	ldr	r2, [r3, #8]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006382:	4413      	add	r3, r2
 8006384:	1c5a      	adds	r2, r3, #1
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4619      	mov	r1, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	01db      	lsls	r3, r3, #7
 8006390:	440b      	add	r3, r1
 8006392:	3384      	adds	r3, #132	@ 0x84
 8006394:	4619      	mov	r1, r3
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	4313      	orrs	r3, r2
 800639a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	461a      	mov	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	01db      	lsls	r3, r3, #7
 80063a6:	4413      	add	r3, r2
 80063a8:	3384      	adds	r3, #132	@ 0x84
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	6812      	ldr	r2, [r2, #0]
 80063b0:	4611      	mov	r1, r2
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	01d2      	lsls	r2, r2, #7
 80063b6:	440a      	add	r2, r1
 80063b8:	3284      	adds	r2, #132	@ 0x84
 80063ba:	f023 0307 	bic.w	r3, r3, #7
 80063be:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	461a      	mov	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	01db      	lsls	r3, r3, #7
 80063ca:	4413      	add	r3, r2
 80063cc:	3384      	adds	r3, #132	@ 0x84
 80063ce:	461a      	mov	r2, r3
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80063dc:	021b      	lsls	r3, r3, #8
 80063de:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80063e6:	041b      	lsls	r3, r3, #16
 80063e8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	061b      	lsls	r3, r3, #24
 80063f0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	461a      	mov	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	01db      	lsls	r3, r3, #7
 80063fc:	4413      	add	r3, r2
 80063fe:	3384      	adds	r3, #132	@ 0x84
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	461a      	mov	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	01db      	lsls	r3, r3, #7
 800640c:	4413      	add	r3, r2
 800640e:	3384      	adds	r3, #132	@ 0x84
 8006410:	461a      	mov	r2, r3
 8006412:	2300      	movs	r3, #0
 8006414:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800641c:	461a      	mov	r2, r3
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	431a      	orrs	r2, r3
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	431a      	orrs	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4619      	mov	r1, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	01db      	lsls	r3, r3, #7
 8006430:	440b      	add	r3, r1
 8006432:	3384      	adds	r3, #132	@ 0x84
 8006434:	4619      	mov	r1, r3
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	4313      	orrs	r3, r2
 800643a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	461a      	mov	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	01db      	lsls	r3, r3, #7
 8006446:	4413      	add	r3, r2
 8006448:	3384      	adds	r3, #132	@ 0x84
 800644a:	695b      	ldr	r3, [r3, #20]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	6812      	ldr	r2, [r2, #0]
 8006450:	4611      	mov	r1, r2
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	01d2      	lsls	r2, r2, #7
 8006456:	440a      	add	r2, r1
 8006458:	3284      	adds	r2, #132	@ 0x84
 800645a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800645e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	461a      	mov	r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	01db      	lsls	r3, r3, #7
 800646a:	4413      	add	r3, r2
 800646c:	3384      	adds	r3, #132	@ 0x84
 800646e:	461a      	mov	r2, r3
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	461a      	mov	r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	01db      	lsls	r3, r3, #7
 8006480:	4413      	add	r3, r2
 8006482:	3384      	adds	r3, #132	@ 0x84
 8006484:	69db      	ldr	r3, [r3, #28]
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	6812      	ldr	r2, [r2, #0]
 800648a:	4611      	mov	r1, r2
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	01d2      	lsls	r2, r2, #7
 8006490:	440a      	add	r2, r1
 8006492:	3284      	adds	r2, #132	@ 0x84
 8006494:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006498:	f023 0307 	bic.w	r3, r3, #7
 800649c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	69da      	ldr	r2, [r3, #28]
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	68f9      	ldr	r1, [r7, #12]
 80064a8:	6809      	ldr	r1, [r1, #0]
 80064aa:	4608      	mov	r0, r1
 80064ac:	6879      	ldr	r1, [r7, #4]
 80064ae:	01c9      	lsls	r1, r1, #7
 80064b0:	4401      	add	r1, r0
 80064b2:	3184      	adds	r1, #132	@ 0x84
 80064b4:	4313      	orrs	r3, r2
 80064b6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	461a      	mov	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	01db      	lsls	r3, r3, #7
 80064c2:	4413      	add	r3, r2
 80064c4:	3384      	adds	r3, #132	@ 0x84
 80064c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	461a      	mov	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	01db      	lsls	r3, r3, #7
 80064d2:	4413      	add	r3, r2
 80064d4:	3384      	adds	r3, #132	@ 0x84
 80064d6:	461a      	mov	r2, r3
 80064d8:	2300      	movs	r3, #0
 80064da:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	461a      	mov	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	01db      	lsls	r3, r3, #7
 80064e6:	4413      	add	r3, r2
 80064e8:	3384      	adds	r3, #132	@ 0x84
 80064ea:	461a      	mov	r2, r3
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f0:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d102      	bne.n	8006500 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80064fa:	2304      	movs	r3, #4
 80064fc:	61fb      	str	r3, [r7, #28]
 80064fe:	e01b      	b.n	8006538 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d102      	bne.n	800650e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006508:	2303      	movs	r3, #3
 800650a:	61fb      	str	r3, [r7, #28]
 800650c:	e014      	b.n	8006538 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	2b04      	cmp	r3, #4
 8006514:	d00b      	beq.n	800652e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800651a:	2b02      	cmp	r3, #2
 800651c:	d007      	beq.n	800652e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006522:	2b03      	cmp	r3, #3
 8006524:	d003      	beq.n	800652e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800652a:	2b07      	cmp	r3, #7
 800652c:	d102      	bne.n	8006534 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800652e:	2302      	movs	r3, #2
 8006530:	61fb      	str	r3, [r7, #28]
 8006532:	e001      	b.n	8006538 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006534:	2301      	movs	r3, #1
 8006536:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	461a      	mov	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	01db      	lsls	r3, r3, #7
 8006542:	4413      	add	r3, r2
 8006544:	3384      	adds	r3, #132	@ 0x84
 8006546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	6812      	ldr	r2, [r2, #0]
 800654c:	4611      	mov	r1, r2
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	01d2      	lsls	r2, r2, #7
 8006552:	440a      	add	r2, r1
 8006554:	3284      	adds	r2, #132	@ 0x84
 8006556:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800655a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006560:	69fa      	ldr	r2, [r7, #28]
 8006562:	fb02 f303 	mul.w	r3, r2, r3
 8006566:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	6859      	ldr	r1, [r3, #4]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	1acb      	subs	r3, r1, r3
 8006572:	69f9      	ldr	r1, [r7, #28]
 8006574:	fb01 f303 	mul.w	r3, r1, r3
 8006578:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800657a:	68f9      	ldr	r1, [r7, #12]
 800657c:	6809      	ldr	r1, [r1, #0]
 800657e:	4608      	mov	r0, r1
 8006580:	6879      	ldr	r1, [r7, #4]
 8006582:	01c9      	lsls	r1, r1, #7
 8006584:	4401      	add	r1, r0
 8006586:	3184      	adds	r1, #132	@ 0x84
 8006588:	4313      	orrs	r3, r2
 800658a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	461a      	mov	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	01db      	lsls	r3, r3, #7
 8006596:	4413      	add	r3, r2
 8006598:	3384      	adds	r3, #132	@ 0x84
 800659a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	6812      	ldr	r2, [r2, #0]
 80065a0:	4611      	mov	r1, r2
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	01d2      	lsls	r2, r2, #7
 80065a6:	440a      	add	r2, r1
 80065a8:	3284      	adds	r2, #132	@ 0x84
 80065aa:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80065ae:	f023 0307 	bic.w	r3, r3, #7
 80065b2:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	461a      	mov	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	01db      	lsls	r3, r3, #7
 80065be:	4413      	add	r3, r2
 80065c0:	3384      	adds	r3, #132	@ 0x84
 80065c2:	461a      	mov	r2, r3
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	461a      	mov	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	01db      	lsls	r3, r3, #7
 80065d4:	4413      	add	r3, r2
 80065d6:	3384      	adds	r3, #132	@ 0x84
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	6812      	ldr	r2, [r2, #0]
 80065de:	4611      	mov	r1, r2
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	01d2      	lsls	r2, r2, #7
 80065e4:	440a      	add	r2, r1
 80065e6:	3284      	adds	r2, #132	@ 0x84
 80065e8:	f043 0301 	orr.w	r3, r3, #1
 80065ec:	6013      	str	r3, [r2, #0]
}
 80065ee:	bf00      	nop
 80065f0:	3724      	adds	r7, #36	@ 0x24
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
	...

080065fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d101      	bne.n	800660e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e267      	b.n	8006ade <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	2b00      	cmp	r3, #0
 8006618:	d075      	beq.n	8006706 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800661a:	4b88      	ldr	r3, [pc, #544]	@ (800683c <HAL_RCC_OscConfig+0x240>)
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f003 030c 	and.w	r3, r3, #12
 8006622:	2b04      	cmp	r3, #4
 8006624:	d00c      	beq.n	8006640 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006626:	4b85      	ldr	r3, [pc, #532]	@ (800683c <HAL_RCC_OscConfig+0x240>)
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800662e:	2b08      	cmp	r3, #8
 8006630:	d112      	bne.n	8006658 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006632:	4b82      	ldr	r3, [pc, #520]	@ (800683c <HAL_RCC_OscConfig+0x240>)
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800663a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800663e:	d10b      	bne.n	8006658 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006640:	4b7e      	ldr	r3, [pc, #504]	@ (800683c <HAL_RCC_OscConfig+0x240>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d05b      	beq.n	8006704 <HAL_RCC_OscConfig+0x108>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d157      	bne.n	8006704 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e242      	b.n	8006ade <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006660:	d106      	bne.n	8006670 <HAL_RCC_OscConfig+0x74>
 8006662:	4b76      	ldr	r3, [pc, #472]	@ (800683c <HAL_RCC_OscConfig+0x240>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a75      	ldr	r2, [pc, #468]	@ (800683c <HAL_RCC_OscConfig+0x240>)
 8006668:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800666c:	6013      	str	r3, [r2, #0]
 800666e:	e01d      	b.n	80066ac <HAL_RCC_OscConfig+0xb0>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006678:	d10c      	bne.n	8006694 <HAL_RCC_OscConfig+0x98>
 800667a:	4b70      	ldr	r3, [pc, #448]	@ (800683c <HAL_RCC_OscConfig+0x240>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a6f      	ldr	r2, [pc, #444]	@ (800683c <HAL_RCC_OscConfig+0x240>)
 8006680:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006684:	6013      	str	r3, [r2, #0]
 8006686:	4b6d      	ldr	r3, [pc, #436]	@ (800683c <HAL_RCC_OscConfig+0x240>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a6c      	ldr	r2, [pc, #432]	@ (800683c <HAL_RCC_OscConfig+0x240>)
 800668c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006690:	6013      	str	r3, [r2, #0]
 8006692:	e00b      	b.n	80066ac <HAL_RCC_OscConfig+0xb0>
 8006694:	4b69      	ldr	r3, [pc, #420]	@ (800683c <HAL_RCC_OscConfig+0x240>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a68      	ldr	r2, [pc, #416]	@ (800683c <HAL_RCC_OscConfig+0x240>)
 800669a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800669e:	6013      	str	r3, [r2, #0]
 80066a0:	4b66      	ldr	r3, [pc, #408]	@ (800683c <HAL_RCC_OscConfig+0x240>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a65      	ldr	r2, [pc, #404]	@ (800683c <HAL_RCC_OscConfig+0x240>)
 80066a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d013      	beq.n	80066dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066b4:	f7fc fc84 	bl	8002fc0 <HAL_GetTick>
 80066b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066ba:	e008      	b.n	80066ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066bc:	f7fc fc80 	bl	8002fc0 <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	2b64      	cmp	r3, #100	@ 0x64
 80066c8:	d901      	bls.n	80066ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e207      	b.n	8006ade <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066ce:	4b5b      	ldr	r3, [pc, #364]	@ (800683c <HAL_RCC_OscConfig+0x240>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d0f0      	beq.n	80066bc <HAL_RCC_OscConfig+0xc0>
 80066da:	e014      	b.n	8006706 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066dc:	f7fc fc70 	bl	8002fc0 <HAL_GetTick>
 80066e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066e2:	e008      	b.n	80066f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066e4:	f7fc fc6c 	bl	8002fc0 <HAL_GetTick>
 80066e8:	4602      	mov	r2, r0
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	2b64      	cmp	r3, #100	@ 0x64
 80066f0:	d901      	bls.n	80066f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e1f3      	b.n	8006ade <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066f6:	4b51      	ldr	r3, [pc, #324]	@ (800683c <HAL_RCC_OscConfig+0x240>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1f0      	bne.n	80066e4 <HAL_RCC_OscConfig+0xe8>
 8006702:	e000      	b.n	8006706 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0302 	and.w	r3, r3, #2
 800670e:	2b00      	cmp	r3, #0
 8006710:	d063      	beq.n	80067da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006712:	4b4a      	ldr	r3, [pc, #296]	@ (800683c <HAL_RCC_OscConfig+0x240>)
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f003 030c 	and.w	r3, r3, #12
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00b      	beq.n	8006736 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800671e:	4b47      	ldr	r3, [pc, #284]	@ (800683c <HAL_RCC_OscConfig+0x240>)
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006726:	2b08      	cmp	r3, #8
 8006728:	d11c      	bne.n	8006764 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800672a:	4b44      	ldr	r3, [pc, #272]	@ (800683c <HAL_RCC_OscConfig+0x240>)
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d116      	bne.n	8006764 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006736:	4b41      	ldr	r3, [pc, #260]	@ (800683c <HAL_RCC_OscConfig+0x240>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0302 	and.w	r3, r3, #2
 800673e:	2b00      	cmp	r3, #0
 8006740:	d005      	beq.n	800674e <HAL_RCC_OscConfig+0x152>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	2b01      	cmp	r3, #1
 8006748:	d001      	beq.n	800674e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e1c7      	b.n	8006ade <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800674e:	4b3b      	ldr	r3, [pc, #236]	@ (800683c <HAL_RCC_OscConfig+0x240>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	00db      	lsls	r3, r3, #3
 800675c:	4937      	ldr	r1, [pc, #220]	@ (800683c <HAL_RCC_OscConfig+0x240>)
 800675e:	4313      	orrs	r3, r2
 8006760:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006762:	e03a      	b.n	80067da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d020      	beq.n	80067ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800676c:	4b34      	ldr	r3, [pc, #208]	@ (8006840 <HAL_RCC_OscConfig+0x244>)
 800676e:	2201      	movs	r2, #1
 8006770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006772:	f7fc fc25 	bl	8002fc0 <HAL_GetTick>
 8006776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006778:	e008      	b.n	800678c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800677a:	f7fc fc21 	bl	8002fc0 <HAL_GetTick>
 800677e:	4602      	mov	r2, r0
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	2b02      	cmp	r3, #2
 8006786:	d901      	bls.n	800678c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e1a8      	b.n	8006ade <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800678c:	4b2b      	ldr	r3, [pc, #172]	@ (800683c <HAL_RCC_OscConfig+0x240>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0302 	and.w	r3, r3, #2
 8006794:	2b00      	cmp	r3, #0
 8006796:	d0f0      	beq.n	800677a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006798:	4b28      	ldr	r3, [pc, #160]	@ (800683c <HAL_RCC_OscConfig+0x240>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	00db      	lsls	r3, r3, #3
 80067a6:	4925      	ldr	r1, [pc, #148]	@ (800683c <HAL_RCC_OscConfig+0x240>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	600b      	str	r3, [r1, #0]
 80067ac:	e015      	b.n	80067da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067ae:	4b24      	ldr	r3, [pc, #144]	@ (8006840 <HAL_RCC_OscConfig+0x244>)
 80067b0:	2200      	movs	r2, #0
 80067b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067b4:	f7fc fc04 	bl	8002fc0 <HAL_GetTick>
 80067b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067ba:	e008      	b.n	80067ce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067bc:	f7fc fc00 	bl	8002fc0 <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d901      	bls.n	80067ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e187      	b.n	8006ade <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067ce:	4b1b      	ldr	r3, [pc, #108]	@ (800683c <HAL_RCC_OscConfig+0x240>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0302 	and.w	r3, r3, #2
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1f0      	bne.n	80067bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0308 	and.w	r3, r3, #8
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d036      	beq.n	8006854 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d016      	beq.n	800681c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067ee:	4b15      	ldr	r3, [pc, #84]	@ (8006844 <HAL_RCC_OscConfig+0x248>)
 80067f0:	2201      	movs	r2, #1
 80067f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067f4:	f7fc fbe4 	bl	8002fc0 <HAL_GetTick>
 80067f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067fa:	e008      	b.n	800680e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067fc:	f7fc fbe0 	bl	8002fc0 <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	2b02      	cmp	r3, #2
 8006808:	d901      	bls.n	800680e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e167      	b.n	8006ade <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800680e:	4b0b      	ldr	r3, [pc, #44]	@ (800683c <HAL_RCC_OscConfig+0x240>)
 8006810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	2b00      	cmp	r3, #0
 8006818:	d0f0      	beq.n	80067fc <HAL_RCC_OscConfig+0x200>
 800681a:	e01b      	b.n	8006854 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800681c:	4b09      	ldr	r3, [pc, #36]	@ (8006844 <HAL_RCC_OscConfig+0x248>)
 800681e:	2200      	movs	r2, #0
 8006820:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006822:	f7fc fbcd 	bl	8002fc0 <HAL_GetTick>
 8006826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006828:	e00e      	b.n	8006848 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800682a:	f7fc fbc9 	bl	8002fc0 <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	2b02      	cmp	r3, #2
 8006836:	d907      	bls.n	8006848 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e150      	b.n	8006ade <HAL_RCC_OscConfig+0x4e2>
 800683c:	40023800 	.word	0x40023800
 8006840:	42470000 	.word	0x42470000
 8006844:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006848:	4b88      	ldr	r3, [pc, #544]	@ (8006a6c <HAL_RCC_OscConfig+0x470>)
 800684a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800684c:	f003 0302 	and.w	r3, r3, #2
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1ea      	bne.n	800682a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0304 	and.w	r3, r3, #4
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 8097 	beq.w	8006990 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006862:	2300      	movs	r3, #0
 8006864:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006866:	4b81      	ldr	r3, [pc, #516]	@ (8006a6c <HAL_RCC_OscConfig+0x470>)
 8006868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800686a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10f      	bne.n	8006892 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006872:	2300      	movs	r3, #0
 8006874:	60bb      	str	r3, [r7, #8]
 8006876:	4b7d      	ldr	r3, [pc, #500]	@ (8006a6c <HAL_RCC_OscConfig+0x470>)
 8006878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800687a:	4a7c      	ldr	r2, [pc, #496]	@ (8006a6c <HAL_RCC_OscConfig+0x470>)
 800687c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006880:	6413      	str	r3, [r2, #64]	@ 0x40
 8006882:	4b7a      	ldr	r3, [pc, #488]	@ (8006a6c <HAL_RCC_OscConfig+0x470>)
 8006884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800688a:	60bb      	str	r3, [r7, #8]
 800688c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800688e:	2301      	movs	r3, #1
 8006890:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006892:	4b77      	ldr	r3, [pc, #476]	@ (8006a70 <HAL_RCC_OscConfig+0x474>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800689a:	2b00      	cmp	r3, #0
 800689c:	d118      	bne.n	80068d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800689e:	4b74      	ldr	r3, [pc, #464]	@ (8006a70 <HAL_RCC_OscConfig+0x474>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a73      	ldr	r2, [pc, #460]	@ (8006a70 <HAL_RCC_OscConfig+0x474>)
 80068a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068aa:	f7fc fb89 	bl	8002fc0 <HAL_GetTick>
 80068ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068b0:	e008      	b.n	80068c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068b2:	f7fc fb85 	bl	8002fc0 <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d901      	bls.n	80068c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e10c      	b.n	8006ade <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068c4:	4b6a      	ldr	r3, [pc, #424]	@ (8006a70 <HAL_RCC_OscConfig+0x474>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d0f0      	beq.n	80068b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d106      	bne.n	80068e6 <HAL_RCC_OscConfig+0x2ea>
 80068d8:	4b64      	ldr	r3, [pc, #400]	@ (8006a6c <HAL_RCC_OscConfig+0x470>)
 80068da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068dc:	4a63      	ldr	r2, [pc, #396]	@ (8006a6c <HAL_RCC_OscConfig+0x470>)
 80068de:	f043 0301 	orr.w	r3, r3, #1
 80068e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80068e4:	e01c      	b.n	8006920 <HAL_RCC_OscConfig+0x324>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	2b05      	cmp	r3, #5
 80068ec:	d10c      	bne.n	8006908 <HAL_RCC_OscConfig+0x30c>
 80068ee:	4b5f      	ldr	r3, [pc, #380]	@ (8006a6c <HAL_RCC_OscConfig+0x470>)
 80068f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068f2:	4a5e      	ldr	r2, [pc, #376]	@ (8006a6c <HAL_RCC_OscConfig+0x470>)
 80068f4:	f043 0304 	orr.w	r3, r3, #4
 80068f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80068fa:	4b5c      	ldr	r3, [pc, #368]	@ (8006a6c <HAL_RCC_OscConfig+0x470>)
 80068fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068fe:	4a5b      	ldr	r2, [pc, #364]	@ (8006a6c <HAL_RCC_OscConfig+0x470>)
 8006900:	f043 0301 	orr.w	r3, r3, #1
 8006904:	6713      	str	r3, [r2, #112]	@ 0x70
 8006906:	e00b      	b.n	8006920 <HAL_RCC_OscConfig+0x324>
 8006908:	4b58      	ldr	r3, [pc, #352]	@ (8006a6c <HAL_RCC_OscConfig+0x470>)
 800690a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800690c:	4a57      	ldr	r2, [pc, #348]	@ (8006a6c <HAL_RCC_OscConfig+0x470>)
 800690e:	f023 0301 	bic.w	r3, r3, #1
 8006912:	6713      	str	r3, [r2, #112]	@ 0x70
 8006914:	4b55      	ldr	r3, [pc, #340]	@ (8006a6c <HAL_RCC_OscConfig+0x470>)
 8006916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006918:	4a54      	ldr	r2, [pc, #336]	@ (8006a6c <HAL_RCC_OscConfig+0x470>)
 800691a:	f023 0304 	bic.w	r3, r3, #4
 800691e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d015      	beq.n	8006954 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006928:	f7fc fb4a 	bl	8002fc0 <HAL_GetTick>
 800692c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800692e:	e00a      	b.n	8006946 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006930:	f7fc fb46 	bl	8002fc0 <HAL_GetTick>
 8006934:	4602      	mov	r2, r0
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800693e:	4293      	cmp	r3, r2
 8006940:	d901      	bls.n	8006946 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e0cb      	b.n	8006ade <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006946:	4b49      	ldr	r3, [pc, #292]	@ (8006a6c <HAL_RCC_OscConfig+0x470>)
 8006948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800694a:	f003 0302 	and.w	r3, r3, #2
 800694e:	2b00      	cmp	r3, #0
 8006950:	d0ee      	beq.n	8006930 <HAL_RCC_OscConfig+0x334>
 8006952:	e014      	b.n	800697e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006954:	f7fc fb34 	bl	8002fc0 <HAL_GetTick>
 8006958:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800695a:	e00a      	b.n	8006972 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800695c:	f7fc fb30 	bl	8002fc0 <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800696a:	4293      	cmp	r3, r2
 800696c:	d901      	bls.n	8006972 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e0b5      	b.n	8006ade <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006972:	4b3e      	ldr	r3, [pc, #248]	@ (8006a6c <HAL_RCC_OscConfig+0x470>)
 8006974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006976:	f003 0302 	and.w	r3, r3, #2
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1ee      	bne.n	800695c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800697e:	7dfb      	ldrb	r3, [r7, #23]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d105      	bne.n	8006990 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006984:	4b39      	ldr	r3, [pc, #228]	@ (8006a6c <HAL_RCC_OscConfig+0x470>)
 8006986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006988:	4a38      	ldr	r2, [pc, #224]	@ (8006a6c <HAL_RCC_OscConfig+0x470>)
 800698a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800698e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	2b00      	cmp	r3, #0
 8006996:	f000 80a1 	beq.w	8006adc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800699a:	4b34      	ldr	r3, [pc, #208]	@ (8006a6c <HAL_RCC_OscConfig+0x470>)
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f003 030c 	and.w	r3, r3, #12
 80069a2:	2b08      	cmp	r3, #8
 80069a4:	d05c      	beq.n	8006a60 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d141      	bne.n	8006a32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069ae:	4b31      	ldr	r3, [pc, #196]	@ (8006a74 <HAL_RCC_OscConfig+0x478>)
 80069b0:	2200      	movs	r2, #0
 80069b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069b4:	f7fc fb04 	bl	8002fc0 <HAL_GetTick>
 80069b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069ba:	e008      	b.n	80069ce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069bc:	f7fc fb00 	bl	8002fc0 <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d901      	bls.n	80069ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e087      	b.n	8006ade <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069ce:	4b27      	ldr	r3, [pc, #156]	@ (8006a6c <HAL_RCC_OscConfig+0x470>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1f0      	bne.n	80069bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	69da      	ldr	r2, [r3, #28]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	431a      	orrs	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e8:	019b      	lsls	r3, r3, #6
 80069ea:	431a      	orrs	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069f0:	085b      	lsrs	r3, r3, #1
 80069f2:	3b01      	subs	r3, #1
 80069f4:	041b      	lsls	r3, r3, #16
 80069f6:	431a      	orrs	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fc:	061b      	lsls	r3, r3, #24
 80069fe:	491b      	ldr	r1, [pc, #108]	@ (8006a6c <HAL_RCC_OscConfig+0x470>)
 8006a00:	4313      	orrs	r3, r2
 8006a02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a04:	4b1b      	ldr	r3, [pc, #108]	@ (8006a74 <HAL_RCC_OscConfig+0x478>)
 8006a06:	2201      	movs	r2, #1
 8006a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a0a:	f7fc fad9 	bl	8002fc0 <HAL_GetTick>
 8006a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a10:	e008      	b.n	8006a24 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a12:	f7fc fad5 	bl	8002fc0 <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d901      	bls.n	8006a24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e05c      	b.n	8006ade <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a24:	4b11      	ldr	r3, [pc, #68]	@ (8006a6c <HAL_RCC_OscConfig+0x470>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d0f0      	beq.n	8006a12 <HAL_RCC_OscConfig+0x416>
 8006a30:	e054      	b.n	8006adc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a32:	4b10      	ldr	r3, [pc, #64]	@ (8006a74 <HAL_RCC_OscConfig+0x478>)
 8006a34:	2200      	movs	r2, #0
 8006a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a38:	f7fc fac2 	bl	8002fc0 <HAL_GetTick>
 8006a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a3e:	e008      	b.n	8006a52 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a40:	f7fc fabe 	bl	8002fc0 <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d901      	bls.n	8006a52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e045      	b.n	8006ade <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a52:	4b06      	ldr	r3, [pc, #24]	@ (8006a6c <HAL_RCC_OscConfig+0x470>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1f0      	bne.n	8006a40 <HAL_RCC_OscConfig+0x444>
 8006a5e:	e03d      	b.n	8006adc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d107      	bne.n	8006a78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e038      	b.n	8006ade <HAL_RCC_OscConfig+0x4e2>
 8006a6c:	40023800 	.word	0x40023800
 8006a70:	40007000 	.word	0x40007000
 8006a74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a78:	4b1b      	ldr	r3, [pc, #108]	@ (8006ae8 <HAL_RCC_OscConfig+0x4ec>)
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d028      	beq.n	8006ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d121      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d11a      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006aae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d111      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006abe:	085b      	lsrs	r3, r3, #1
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d107      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d001      	beq.n	8006adc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e000      	b.n	8006ade <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3718      	adds	r7, #24
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	40023800 	.word	0x40023800

08006aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d101      	bne.n	8006b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e0cc      	b.n	8006c9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b00:	4b68      	ldr	r3, [pc, #416]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 030f 	and.w	r3, r3, #15
 8006b08:	683a      	ldr	r2, [r7, #0]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d90c      	bls.n	8006b28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b0e:	4b65      	ldr	r3, [pc, #404]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8006b10:	683a      	ldr	r2, [r7, #0]
 8006b12:	b2d2      	uxtb	r2, r2
 8006b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b16:	4b63      	ldr	r3, [pc, #396]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 030f 	and.w	r3, r3, #15
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d001      	beq.n	8006b28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e0b8      	b.n	8006c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0302 	and.w	r3, r3, #2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d020      	beq.n	8006b76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0304 	and.w	r3, r3, #4
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d005      	beq.n	8006b4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b40:	4b59      	ldr	r3, [pc, #356]	@ (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	4a58      	ldr	r2, [pc, #352]	@ (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b46:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006b4a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0308 	and.w	r3, r3, #8
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d005      	beq.n	8006b64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b58:	4b53      	ldr	r3, [pc, #332]	@ (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	4a52      	ldr	r2, [pc, #328]	@ (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b5e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006b62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b64:	4b50      	ldr	r3, [pc, #320]	@ (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	494d      	ldr	r1, [pc, #308]	@ (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d044      	beq.n	8006c0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d107      	bne.n	8006b9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b8a:	4b47      	ldr	r3, [pc, #284]	@ (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d119      	bne.n	8006bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e07f      	b.n	8006c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d003      	beq.n	8006baa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ba6:	2b03      	cmp	r3, #3
 8006ba8:	d107      	bne.n	8006bba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006baa:	4b3f      	ldr	r3, [pc, #252]	@ (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d109      	bne.n	8006bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e06f      	b.n	8006c9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bba:	4b3b      	ldr	r3, [pc, #236]	@ (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0302 	and.w	r3, r3, #2
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d101      	bne.n	8006bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e067      	b.n	8006c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006bca:	4b37      	ldr	r3, [pc, #220]	@ (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f023 0203 	bic.w	r2, r3, #3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	4934      	ldr	r1, [pc, #208]	@ (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006bdc:	f7fc f9f0 	bl	8002fc0 <HAL_GetTick>
 8006be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006be2:	e00a      	b.n	8006bfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006be4:	f7fc f9ec 	bl	8002fc0 <HAL_GetTick>
 8006be8:	4602      	mov	r2, r0
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d901      	bls.n	8006bfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e04f      	b.n	8006c9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bfa:	4b2b      	ldr	r3, [pc, #172]	@ (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	f003 020c 	and.w	r2, r3, #12
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d1eb      	bne.n	8006be4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c0c:	4b25      	ldr	r3, [pc, #148]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 030f 	and.w	r3, r3, #15
 8006c14:	683a      	ldr	r2, [r7, #0]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d20c      	bcs.n	8006c34 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c1a:	4b22      	ldr	r3, [pc, #136]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8006c1c:	683a      	ldr	r2, [r7, #0]
 8006c1e:	b2d2      	uxtb	r2, r2
 8006c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c22:	4b20      	ldr	r3, [pc, #128]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 030f 	and.w	r3, r3, #15
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d001      	beq.n	8006c34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e032      	b.n	8006c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0304 	and.w	r3, r3, #4
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d008      	beq.n	8006c52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c40:	4b19      	ldr	r3, [pc, #100]	@ (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	4916      	ldr	r1, [pc, #88]	@ (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0308 	and.w	r3, r3, #8
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d009      	beq.n	8006c72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c5e:	4b12      	ldr	r3, [pc, #72]	@ (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	00db      	lsls	r3, r3, #3
 8006c6c:	490e      	ldr	r1, [pc, #56]	@ (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c72:	f000 f821 	bl	8006cb8 <HAL_RCC_GetSysClockFreq>
 8006c76:	4602      	mov	r2, r0
 8006c78:	4b0b      	ldr	r3, [pc, #44]	@ (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	091b      	lsrs	r3, r3, #4
 8006c7e:	f003 030f 	and.w	r3, r3, #15
 8006c82:	490a      	ldr	r1, [pc, #40]	@ (8006cac <HAL_RCC_ClockConfig+0x1c0>)
 8006c84:	5ccb      	ldrb	r3, [r1, r3]
 8006c86:	fa22 f303 	lsr.w	r3, r2, r3
 8006c8a:	4a09      	ldr	r2, [pc, #36]	@ (8006cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006c8e:	4b09      	ldr	r3, [pc, #36]	@ (8006cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7fb feca 	bl	8002a2c <HAL_InitTick>

  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	40023c00 	.word	0x40023c00
 8006ca8:	40023800 	.word	0x40023800
 8006cac:	0800e828 	.word	0x0800e828
 8006cb0:	20000004 	.word	0x20000004
 8006cb4:	20000008 	.word	0x20000008

08006cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cbc:	b094      	sub	sp, #80	@ 0x50
 8006cbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cd0:	4b79      	ldr	r3, [pc, #484]	@ (8006eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f003 030c 	and.w	r3, r3, #12
 8006cd8:	2b08      	cmp	r3, #8
 8006cda:	d00d      	beq.n	8006cf8 <HAL_RCC_GetSysClockFreq+0x40>
 8006cdc:	2b08      	cmp	r3, #8
 8006cde:	f200 80e1 	bhi.w	8006ea4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d002      	beq.n	8006cec <HAL_RCC_GetSysClockFreq+0x34>
 8006ce6:	2b04      	cmp	r3, #4
 8006ce8:	d003      	beq.n	8006cf2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006cea:	e0db      	b.n	8006ea4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006cec:	4b73      	ldr	r3, [pc, #460]	@ (8006ebc <HAL_RCC_GetSysClockFreq+0x204>)
 8006cee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006cf0:	e0db      	b.n	8006eaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006cf2:	4b73      	ldr	r3, [pc, #460]	@ (8006ec0 <HAL_RCC_GetSysClockFreq+0x208>)
 8006cf4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006cf6:	e0d8      	b.n	8006eaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006cf8:	4b6f      	ldr	r3, [pc, #444]	@ (8006eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d00:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d02:	4b6d      	ldr	r3, [pc, #436]	@ (8006eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d063      	beq.n	8006dd6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d0e:	4b6a      	ldr	r3, [pc, #424]	@ (8006eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	099b      	lsrs	r3, r3, #6
 8006d14:	2200      	movs	r2, #0
 8006d16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d18:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d20:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d22:	2300      	movs	r3, #0
 8006d24:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006d2a:	4622      	mov	r2, r4
 8006d2c:	462b      	mov	r3, r5
 8006d2e:	f04f 0000 	mov.w	r0, #0
 8006d32:	f04f 0100 	mov.w	r1, #0
 8006d36:	0159      	lsls	r1, r3, #5
 8006d38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d3c:	0150      	lsls	r0, r2, #5
 8006d3e:	4602      	mov	r2, r0
 8006d40:	460b      	mov	r3, r1
 8006d42:	4621      	mov	r1, r4
 8006d44:	1a51      	subs	r1, r2, r1
 8006d46:	6139      	str	r1, [r7, #16]
 8006d48:	4629      	mov	r1, r5
 8006d4a:	eb63 0301 	sbc.w	r3, r3, r1
 8006d4e:	617b      	str	r3, [r7, #20]
 8006d50:	f04f 0200 	mov.w	r2, #0
 8006d54:	f04f 0300 	mov.w	r3, #0
 8006d58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d5c:	4659      	mov	r1, fp
 8006d5e:	018b      	lsls	r3, r1, #6
 8006d60:	4651      	mov	r1, sl
 8006d62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d66:	4651      	mov	r1, sl
 8006d68:	018a      	lsls	r2, r1, #6
 8006d6a:	4651      	mov	r1, sl
 8006d6c:	ebb2 0801 	subs.w	r8, r2, r1
 8006d70:	4659      	mov	r1, fp
 8006d72:	eb63 0901 	sbc.w	r9, r3, r1
 8006d76:	f04f 0200 	mov.w	r2, #0
 8006d7a:	f04f 0300 	mov.w	r3, #0
 8006d7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d8a:	4690      	mov	r8, r2
 8006d8c:	4699      	mov	r9, r3
 8006d8e:	4623      	mov	r3, r4
 8006d90:	eb18 0303 	adds.w	r3, r8, r3
 8006d94:	60bb      	str	r3, [r7, #8]
 8006d96:	462b      	mov	r3, r5
 8006d98:	eb49 0303 	adc.w	r3, r9, r3
 8006d9c:	60fb      	str	r3, [r7, #12]
 8006d9e:	f04f 0200 	mov.w	r2, #0
 8006da2:	f04f 0300 	mov.w	r3, #0
 8006da6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006daa:	4629      	mov	r1, r5
 8006dac:	024b      	lsls	r3, r1, #9
 8006dae:	4621      	mov	r1, r4
 8006db0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006db4:	4621      	mov	r1, r4
 8006db6:	024a      	lsls	r2, r1, #9
 8006db8:	4610      	mov	r0, r2
 8006dba:	4619      	mov	r1, r3
 8006dbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006dc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006dc4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006dc8:	f7f9 ff4e 	bl	8000c68 <__aeabi_uldivmod>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	460b      	mov	r3, r1
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dd4:	e058      	b.n	8006e88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dd6:	4b38      	ldr	r3, [pc, #224]	@ (8006eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	099b      	lsrs	r3, r3, #6
 8006ddc:	2200      	movs	r2, #0
 8006dde:	4618      	mov	r0, r3
 8006de0:	4611      	mov	r1, r2
 8006de2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006de6:	623b      	str	r3, [r7, #32]
 8006de8:	2300      	movs	r3, #0
 8006dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006df0:	4642      	mov	r2, r8
 8006df2:	464b      	mov	r3, r9
 8006df4:	f04f 0000 	mov.w	r0, #0
 8006df8:	f04f 0100 	mov.w	r1, #0
 8006dfc:	0159      	lsls	r1, r3, #5
 8006dfe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e02:	0150      	lsls	r0, r2, #5
 8006e04:	4602      	mov	r2, r0
 8006e06:	460b      	mov	r3, r1
 8006e08:	4641      	mov	r1, r8
 8006e0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8006e0e:	4649      	mov	r1, r9
 8006e10:	eb63 0b01 	sbc.w	fp, r3, r1
 8006e14:	f04f 0200 	mov.w	r2, #0
 8006e18:	f04f 0300 	mov.w	r3, #0
 8006e1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006e20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006e24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006e28:	ebb2 040a 	subs.w	r4, r2, sl
 8006e2c:	eb63 050b 	sbc.w	r5, r3, fp
 8006e30:	f04f 0200 	mov.w	r2, #0
 8006e34:	f04f 0300 	mov.w	r3, #0
 8006e38:	00eb      	lsls	r3, r5, #3
 8006e3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e3e:	00e2      	lsls	r2, r4, #3
 8006e40:	4614      	mov	r4, r2
 8006e42:	461d      	mov	r5, r3
 8006e44:	4643      	mov	r3, r8
 8006e46:	18e3      	adds	r3, r4, r3
 8006e48:	603b      	str	r3, [r7, #0]
 8006e4a:	464b      	mov	r3, r9
 8006e4c:	eb45 0303 	adc.w	r3, r5, r3
 8006e50:	607b      	str	r3, [r7, #4]
 8006e52:	f04f 0200 	mov.w	r2, #0
 8006e56:	f04f 0300 	mov.w	r3, #0
 8006e5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e5e:	4629      	mov	r1, r5
 8006e60:	028b      	lsls	r3, r1, #10
 8006e62:	4621      	mov	r1, r4
 8006e64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e68:	4621      	mov	r1, r4
 8006e6a:	028a      	lsls	r2, r1, #10
 8006e6c:	4610      	mov	r0, r2
 8006e6e:	4619      	mov	r1, r3
 8006e70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e72:	2200      	movs	r2, #0
 8006e74:	61bb      	str	r3, [r7, #24]
 8006e76:	61fa      	str	r2, [r7, #28]
 8006e78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e7c:	f7f9 fef4 	bl	8000c68 <__aeabi_uldivmod>
 8006e80:	4602      	mov	r2, r0
 8006e82:	460b      	mov	r3, r1
 8006e84:	4613      	mov	r3, r2
 8006e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006e88:	4b0b      	ldr	r3, [pc, #44]	@ (8006eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	0c1b      	lsrs	r3, r3, #16
 8006e8e:	f003 0303 	and.w	r3, r3, #3
 8006e92:	3301      	adds	r3, #1
 8006e94:	005b      	lsls	r3, r3, #1
 8006e96:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006e98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ea2:	e002      	b.n	8006eaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ea4:	4b05      	ldr	r3, [pc, #20]	@ (8006ebc <HAL_RCC_GetSysClockFreq+0x204>)
 8006ea6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ea8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006eaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3750      	adds	r7, #80	@ 0x50
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006eb6:	bf00      	nop
 8006eb8:	40023800 	.word	0x40023800
 8006ebc:	00f42400 	.word	0x00f42400
 8006ec0:	007a1200 	.word	0x007a1200

08006ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ec8:	4b03      	ldr	r3, [pc, #12]	@ (8006ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006eca:	681b      	ldr	r3, [r3, #0]
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	20000004 	.word	0x20000004

08006edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ee0:	f7ff fff0 	bl	8006ec4 <HAL_RCC_GetHCLKFreq>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	4b05      	ldr	r3, [pc, #20]	@ (8006efc <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	0a9b      	lsrs	r3, r3, #10
 8006eec:	f003 0307 	and.w	r3, r3, #7
 8006ef0:	4903      	ldr	r1, [pc, #12]	@ (8006f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ef2:	5ccb      	ldrb	r3, [r1, r3]
 8006ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	40023800 	.word	0x40023800
 8006f00:	0800e838 	.word	0x0800e838

08006f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f08:	f7ff ffdc 	bl	8006ec4 <HAL_RCC_GetHCLKFreq>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	4b05      	ldr	r3, [pc, #20]	@ (8006f24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	0b5b      	lsrs	r3, r3, #13
 8006f14:	f003 0307 	and.w	r3, r3, #7
 8006f18:	4903      	ldr	r1, [pc, #12]	@ (8006f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f1a:	5ccb      	ldrb	r3, [r1, r3]
 8006f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	40023800 	.word	0x40023800
 8006f28:	0800e838 	.word	0x0800e838

08006f2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	220f      	movs	r2, #15
 8006f3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f3c:	4b12      	ldr	r3, [pc, #72]	@ (8006f88 <HAL_RCC_GetClockConfig+0x5c>)
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	f003 0203 	and.w	r2, r3, #3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006f48:	4b0f      	ldr	r3, [pc, #60]	@ (8006f88 <HAL_RCC_GetClockConfig+0x5c>)
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006f54:	4b0c      	ldr	r3, [pc, #48]	@ (8006f88 <HAL_RCC_GetClockConfig+0x5c>)
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006f60:	4b09      	ldr	r3, [pc, #36]	@ (8006f88 <HAL_RCC_GetClockConfig+0x5c>)
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	08db      	lsrs	r3, r3, #3
 8006f66:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006f6e:	4b07      	ldr	r3, [pc, #28]	@ (8006f8c <HAL_RCC_GetClockConfig+0x60>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 020f 	and.w	r2, r3, #15
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	601a      	str	r2, [r3, #0]
}
 8006f7a:	bf00      	nop
 8006f7c:	370c      	adds	r7, #12
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	40023800 	.word	0x40023800
 8006f8c:	40023c00 	.word	0x40023c00

08006f90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 0301 	and.w	r3, r3, #1
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10b      	bne.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d105      	bne.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d075      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006fc4:	4b91      	ldr	r3, [pc, #580]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006fca:	f7fb fff9 	bl	8002fc0 <HAL_GetTick>
 8006fce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006fd0:	e008      	b.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006fd2:	f7fb fff5 	bl	8002fc0 <HAL_GetTick>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d901      	bls.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	e189      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006fe4:	4b8a      	ldr	r3, [pc, #552]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1f0      	bne.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 0301 	and.w	r3, r3, #1
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d009      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	019a      	lsls	r2, r3, #6
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	071b      	lsls	r3, r3, #28
 8007008:	4981      	ldr	r1, [pc, #516]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800700a:	4313      	orrs	r3, r2
 800700c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0302 	and.w	r3, r3, #2
 8007018:	2b00      	cmp	r3, #0
 800701a:	d01f      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800701c:	4b7c      	ldr	r3, [pc, #496]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800701e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007022:	0f1b      	lsrs	r3, r3, #28
 8007024:	f003 0307 	and.w	r3, r3, #7
 8007028:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	019a      	lsls	r2, r3, #6
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	061b      	lsls	r3, r3, #24
 8007036:	431a      	orrs	r2, r3
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	071b      	lsls	r3, r3, #28
 800703c:	4974      	ldr	r1, [pc, #464]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800703e:	4313      	orrs	r3, r2
 8007040:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007044:	4b72      	ldr	r3, [pc, #456]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007046:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800704a:	f023 021f 	bic.w	r2, r3, #31
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	3b01      	subs	r3, #1
 8007054:	496e      	ldr	r1, [pc, #440]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007056:	4313      	orrs	r3, r2
 8007058:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00d      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	019a      	lsls	r2, r3, #6
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	061b      	lsls	r3, r3, #24
 8007074:	431a      	orrs	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	071b      	lsls	r3, r3, #28
 800707c:	4964      	ldr	r1, [pc, #400]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800707e:	4313      	orrs	r3, r2
 8007080:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007084:	4b61      	ldr	r3, [pc, #388]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007086:	2201      	movs	r2, #1
 8007088:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800708a:	f7fb ff99 	bl	8002fc0 <HAL_GetTick>
 800708e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007090:	e008      	b.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007092:	f7fb ff95 	bl	8002fc0 <HAL_GetTick>
 8007096:	4602      	mov	r2, r0
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	2b02      	cmp	r3, #2
 800709e:	d901      	bls.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e129      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80070a4:	4b5a      	ldr	r3, [pc, #360]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d0f0      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0304 	and.w	r3, r3, #4
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d105      	bne.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d079      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80070c8:	4b52      	ldr	r3, [pc, #328]	@ (8007214 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80070ca:	2200      	movs	r2, #0
 80070cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80070ce:	f7fb ff77 	bl	8002fc0 <HAL_GetTick>
 80070d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80070d4:	e008      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80070d6:	f7fb ff73 	bl	8002fc0 <HAL_GetTick>
 80070da:	4602      	mov	r2, r0
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	1ad3      	subs	r3, r2, r3
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d901      	bls.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e107      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80070e8:	4b49      	ldr	r3, [pc, #292]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070f4:	d0ef      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0304 	and.w	r3, r3, #4
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d020      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007102:	4b43      	ldr	r3, [pc, #268]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007108:	0f1b      	lsrs	r3, r3, #28
 800710a:	f003 0307 	and.w	r3, r3, #7
 800710e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	019a      	lsls	r2, r3, #6
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	061b      	lsls	r3, r3, #24
 800711c:	431a      	orrs	r2, r3
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	071b      	lsls	r3, r3, #28
 8007122:	493b      	ldr	r1, [pc, #236]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007124:	4313      	orrs	r3, r2
 8007126:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800712a:	4b39      	ldr	r3, [pc, #228]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800712c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007130:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a1b      	ldr	r3, [r3, #32]
 8007138:	3b01      	subs	r3, #1
 800713a:	021b      	lsls	r3, r3, #8
 800713c:	4934      	ldr	r1, [pc, #208]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800713e:	4313      	orrs	r3, r2
 8007140:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0308 	and.w	r3, r3, #8
 800714c:	2b00      	cmp	r3, #0
 800714e:	d01e      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007150:	4b2f      	ldr	r3, [pc, #188]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007156:	0e1b      	lsrs	r3, r3, #24
 8007158:	f003 030f 	and.w	r3, r3, #15
 800715c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	019a      	lsls	r2, r3, #6
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	061b      	lsls	r3, r3, #24
 8007168:	431a      	orrs	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	071b      	lsls	r3, r3, #28
 8007170:	4927      	ldr	r1, [pc, #156]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007172:	4313      	orrs	r3, r2
 8007174:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007178:	4b25      	ldr	r3, [pc, #148]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800717a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800717e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007186:	4922      	ldr	r1, [pc, #136]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007188:	4313      	orrs	r3, r2
 800718a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800718e:	4b21      	ldr	r3, [pc, #132]	@ (8007214 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007190:	2201      	movs	r2, #1
 8007192:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007194:	f7fb ff14 	bl	8002fc0 <HAL_GetTick>
 8007198:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800719a:	e008      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800719c:	f7fb ff10 	bl	8002fc0 <HAL_GetTick>
 80071a0:	4602      	mov	r2, r0
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	1ad3      	subs	r3, r2, r3
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d901      	bls.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071aa:	2303      	movs	r3, #3
 80071ac:	e0a4      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80071ae:	4b18      	ldr	r3, [pc, #96]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071ba:	d1ef      	bne.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0320 	and.w	r3, r3, #32
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f000 808b 	beq.w	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80071ca:	2300      	movs	r3, #0
 80071cc:	60fb      	str	r3, [r7, #12]
 80071ce:	4b10      	ldr	r3, [pc, #64]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071d2:	4a0f      	ldr	r2, [pc, #60]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80071da:	4b0d      	ldr	r3, [pc, #52]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071e2:	60fb      	str	r3, [r7, #12]
 80071e4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80071e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a0b      	ldr	r2, [pc, #44]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80071ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071f0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80071f2:	f7fb fee5 	bl	8002fc0 <HAL_GetTick>
 80071f6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80071f8:	e010      	b.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071fa:	f7fb fee1 	bl	8002fc0 <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	2b02      	cmp	r3, #2
 8007206:	d909      	bls.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8007208:	2303      	movs	r3, #3
 800720a:	e075      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800720c:	42470068 	.word	0x42470068
 8007210:	40023800 	.word	0x40023800
 8007214:	42470070 	.word	0x42470070
 8007218:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800721c:	4b38      	ldr	r3, [pc, #224]	@ (8007300 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007224:	2b00      	cmp	r3, #0
 8007226:	d0e8      	beq.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007228:	4b36      	ldr	r3, [pc, #216]	@ (8007304 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800722a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800722c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007230:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d02f      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800723c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	429a      	cmp	r2, r3
 8007244:	d028      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007246:	4b2f      	ldr	r3, [pc, #188]	@ (8007304 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800724a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800724e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007250:	4b2d      	ldr	r3, [pc, #180]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007252:	2201      	movs	r2, #1
 8007254:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007256:	4b2c      	ldr	r3, [pc, #176]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007258:	2200      	movs	r2, #0
 800725a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800725c:	4a29      	ldr	r2, [pc, #164]	@ (8007304 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007262:	4b28      	ldr	r3, [pc, #160]	@ (8007304 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	2b01      	cmp	r3, #1
 800726c:	d114      	bne.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800726e:	f7fb fea7 	bl	8002fc0 <HAL_GetTick>
 8007272:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007274:	e00a      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007276:	f7fb fea3 	bl	8002fc0 <HAL_GetTick>
 800727a:	4602      	mov	r2, r0
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	1ad3      	subs	r3, r2, r3
 8007280:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007284:	4293      	cmp	r3, r2
 8007286:	d901      	bls.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007288:	2303      	movs	r3, #3
 800728a:	e035      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800728c:	4b1d      	ldr	r3, [pc, #116]	@ (8007304 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800728e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007290:	f003 0302 	and.w	r3, r3, #2
 8007294:	2b00      	cmp	r3, #0
 8007296:	d0ee      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800729c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072a4:	d10d      	bne.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80072a6:	4b17      	ldr	r3, [pc, #92]	@ (8007304 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80072b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072ba:	4912      	ldr	r1, [pc, #72]	@ (8007304 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072bc:	4313      	orrs	r3, r2
 80072be:	608b      	str	r3, [r1, #8]
 80072c0:	e005      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80072c2:	4b10      	ldr	r3, [pc, #64]	@ (8007304 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	4a0f      	ldr	r2, [pc, #60]	@ (8007304 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072c8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80072cc:	6093      	str	r3, [r2, #8]
 80072ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007304 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072d0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072da:	490a      	ldr	r1, [pc, #40]	@ (8007304 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 0310 	and.w	r3, r3, #16
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d004      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80072f2:	4b06      	ldr	r3, [pc, #24]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80072f4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3718      	adds	r7, #24
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	40007000 	.word	0x40007000
 8007304:	40023800 	.word	0x40023800
 8007308:	42470e40 	.word	0x42470e40
 800730c:	424711e0 	.word	0x424711e0

08007310 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d101      	bne.n	8007324 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e025      	b.n	8007370 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b00      	cmp	r3, #0
 800732e:	d106      	bne.n	800733e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f7f9 ffbd 	bl	80012b8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2202      	movs	r2, #2
 8007342:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	3304      	adds	r3, #4
 800734e:	4619      	mov	r1, r3
 8007350:	4610      	mov	r0, r2
 8007352:	f001 ffad 	bl	80092b0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6818      	ldr	r0, [r3, #0]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	461a      	mov	r2, r3
 8007360:	6839      	ldr	r1, [r7, #0]
 8007362:	f002 f802 	bl	800936a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2201      	movs	r2, #1
 800736a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d101      	bne.n	800738a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e07b      	b.n	8007482 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800738e:	2b00      	cmp	r3, #0
 8007390:	d108      	bne.n	80073a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800739a:	d009      	beq.n	80073b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	61da      	str	r2, [r3, #28]
 80073a2:	e005      	b.n	80073b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d106      	bne.n	80073d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f7fb fa88 	bl	80028e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2202      	movs	r2, #2
 80073d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80073f8:	431a      	orrs	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007402:	431a      	orrs	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	f003 0302 	and.w	r3, r3, #2
 800740c:	431a      	orrs	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	695b      	ldr	r3, [r3, #20]
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	431a      	orrs	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007420:	431a      	orrs	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	69db      	ldr	r3, [r3, #28]
 8007426:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800742a:	431a      	orrs	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a1b      	ldr	r3, [r3, #32]
 8007430:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007434:	ea42 0103 	orr.w	r1, r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800743c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	430a      	orrs	r2, r1
 8007446:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	699b      	ldr	r3, [r3, #24]
 800744c:	0c1b      	lsrs	r3, r3, #16
 800744e:	f003 0104 	and.w	r1, r3, #4
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007456:	f003 0210 	and.w	r2, r3, #16
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	430a      	orrs	r2, r1
 8007460:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	69da      	ldr	r2, [r3, #28]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007470:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b088      	sub	sp, #32
 800748e:	af00      	add	r7, sp, #0
 8007490:	60f8      	str	r0, [r7, #12]
 8007492:	60b9      	str	r1, [r7, #8]
 8007494:	603b      	str	r3, [r7, #0]
 8007496:	4613      	mov	r3, r2
 8007498:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800749a:	f7fb fd91 	bl	8002fc0 <HAL_GetTick>
 800749e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80074a0:	88fb      	ldrh	r3, [r7, #6]
 80074a2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d001      	beq.n	80074b4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80074b0:	2302      	movs	r3, #2
 80074b2:	e12a      	b.n	800770a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d002      	beq.n	80074c0 <HAL_SPI_Transmit+0x36>
 80074ba:	88fb      	ldrh	r3, [r7, #6]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d101      	bne.n	80074c4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e122      	b.n	800770a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d101      	bne.n	80074d2 <HAL_SPI_Transmit+0x48>
 80074ce:	2302      	movs	r3, #2
 80074d0:	e11b      	b.n	800770a <HAL_SPI_Transmit+0x280>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2203      	movs	r2, #3
 80074de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	88fa      	ldrh	r2, [r7, #6]
 80074f2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	88fa      	ldrh	r2, [r7, #6]
 80074f8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007520:	d10f      	bne.n	8007542 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007530:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007540:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800754c:	2b40      	cmp	r3, #64	@ 0x40
 800754e:	d007      	beq.n	8007560 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800755e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007568:	d152      	bne.n	8007610 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d002      	beq.n	8007578 <HAL_SPI_Transmit+0xee>
 8007572:	8b7b      	ldrh	r3, [r7, #26]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d145      	bne.n	8007604 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800757c:	881a      	ldrh	r2, [r3, #0]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007588:	1c9a      	adds	r2, r3, #2
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007592:	b29b      	uxth	r3, r3
 8007594:	3b01      	subs	r3, #1
 8007596:	b29a      	uxth	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800759c:	e032      	b.n	8007604 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	f003 0302 	and.w	r3, r3, #2
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d112      	bne.n	80075d2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075b0:	881a      	ldrh	r2, [r3, #0]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075bc:	1c9a      	adds	r2, r3, #2
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	3b01      	subs	r3, #1
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	86da      	strh	r2, [r3, #54]	@ 0x36
 80075d0:	e018      	b.n	8007604 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075d2:	f7fb fcf5 	bl	8002fc0 <HAL_GetTick>
 80075d6:	4602      	mov	r2, r0
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	683a      	ldr	r2, [r7, #0]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d803      	bhi.n	80075ea <HAL_SPI_Transmit+0x160>
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e8:	d102      	bne.n	80075f0 <HAL_SPI_Transmit+0x166>
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d109      	bne.n	8007604 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007600:	2303      	movs	r3, #3
 8007602:	e082      	b.n	800770a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007608:	b29b      	uxth	r3, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1c7      	bne.n	800759e <HAL_SPI_Transmit+0x114>
 800760e:	e053      	b.n	80076b8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d002      	beq.n	800761e <HAL_SPI_Transmit+0x194>
 8007618:	8b7b      	ldrh	r3, [r7, #26]
 800761a:	2b01      	cmp	r3, #1
 800761c:	d147      	bne.n	80076ae <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	330c      	adds	r3, #12
 8007628:	7812      	ldrb	r2, [r2, #0]
 800762a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007630:	1c5a      	adds	r2, r3, #1
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800763a:	b29b      	uxth	r3, r3
 800763c:	3b01      	subs	r3, #1
 800763e:	b29a      	uxth	r2, r3
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007644:	e033      	b.n	80076ae <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	f003 0302 	and.w	r3, r3, #2
 8007650:	2b02      	cmp	r3, #2
 8007652:	d113      	bne.n	800767c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	330c      	adds	r3, #12
 800765e:	7812      	ldrb	r2, [r2, #0]
 8007660:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007666:	1c5a      	adds	r2, r3, #1
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007670:	b29b      	uxth	r3, r3
 8007672:	3b01      	subs	r3, #1
 8007674:	b29a      	uxth	r2, r3
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	86da      	strh	r2, [r3, #54]	@ 0x36
 800767a:	e018      	b.n	80076ae <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800767c:	f7fb fca0 	bl	8002fc0 <HAL_GetTick>
 8007680:	4602      	mov	r2, r0
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	683a      	ldr	r2, [r7, #0]
 8007688:	429a      	cmp	r2, r3
 800768a:	d803      	bhi.n	8007694 <HAL_SPI_Transmit+0x20a>
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007692:	d102      	bne.n	800769a <HAL_SPI_Transmit+0x210>
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d109      	bne.n	80076ae <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e02d      	b.n	800770a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1c6      	bne.n	8007646 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076b8:	69fa      	ldr	r2, [r7, #28]
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f000 fd21 	bl	8008104 <SPI_EndRxTxTransaction>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d002      	beq.n	80076ce <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2220      	movs	r2, #32
 80076cc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d10a      	bne.n	80076ec <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076d6:	2300      	movs	r3, #0
 80076d8:	617b      	str	r3, [r7, #20]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	617b      	str	r3, [r7, #20]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	617b      	str	r3, [r7, #20]
 80076ea:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007700:	2b00      	cmp	r3, #0
 8007702:	d001      	beq.n	8007708 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e000      	b.n	800770a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007708:	2300      	movs	r3, #0
  }
}
 800770a:	4618      	mov	r0, r3
 800770c:	3720      	adds	r7, #32
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007712:	b580      	push	{r7, lr}
 8007714:	b088      	sub	sp, #32
 8007716:	af02      	add	r7, sp, #8
 8007718:	60f8      	str	r0, [r7, #12]
 800771a:	60b9      	str	r1, [r7, #8]
 800771c:	603b      	str	r3, [r7, #0]
 800771e:	4613      	mov	r3, r2
 8007720:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b01      	cmp	r3, #1
 800772c:	d001      	beq.n	8007732 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800772e:	2302      	movs	r3, #2
 8007730:	e104      	b.n	800793c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800773a:	d112      	bne.n	8007762 <HAL_SPI_Receive+0x50>
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d10e      	bne.n	8007762 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2204      	movs	r2, #4
 8007748:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800774c:	88fa      	ldrh	r2, [r7, #6]
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	9300      	str	r3, [sp, #0]
 8007752:	4613      	mov	r3, r2
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	68b9      	ldr	r1, [r7, #8]
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f000 f8f3 	bl	8007944 <HAL_SPI_TransmitReceive>
 800775e:	4603      	mov	r3, r0
 8007760:	e0ec      	b.n	800793c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007762:	f7fb fc2d 	bl	8002fc0 <HAL_GetTick>
 8007766:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d002      	beq.n	8007774 <HAL_SPI_Receive+0x62>
 800776e:	88fb      	ldrh	r3, [r7, #6]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d101      	bne.n	8007778 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e0e1      	b.n	800793c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800777e:	2b01      	cmp	r3, #1
 8007780:	d101      	bne.n	8007786 <HAL_SPI_Receive+0x74>
 8007782:	2302      	movs	r3, #2
 8007784:	e0da      	b.n	800793c <HAL_SPI_Receive+0x22a>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2204      	movs	r2, #4
 8007792:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	88fa      	ldrh	r2, [r7, #6]
 80077a6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	88fa      	ldrh	r2, [r7, #6]
 80077ac:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2200      	movs	r2, #0
 80077b8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2200      	movs	r2, #0
 80077be:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2200      	movs	r2, #0
 80077c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077d4:	d10f      	bne.n	80077f6 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80077f4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007800:	2b40      	cmp	r3, #64	@ 0x40
 8007802:	d007      	beq.n	8007814 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007812:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d170      	bne.n	80078fe <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800781c:	e035      	b.n	800788a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	f003 0301 	and.w	r3, r3, #1
 8007828:	2b01      	cmp	r3, #1
 800782a:	d115      	bne.n	8007858 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f103 020c 	add.w	r2, r3, #12
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007838:	7812      	ldrb	r2, [r2, #0]
 800783a:	b2d2      	uxtb	r2, r2
 800783c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007842:	1c5a      	adds	r2, r3, #1
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800784c:	b29b      	uxth	r3, r3
 800784e:	3b01      	subs	r3, #1
 8007850:	b29a      	uxth	r2, r3
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007856:	e018      	b.n	800788a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007858:	f7fb fbb2 	bl	8002fc0 <HAL_GetTick>
 800785c:	4602      	mov	r2, r0
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	1ad3      	subs	r3, r2, r3
 8007862:	683a      	ldr	r2, [r7, #0]
 8007864:	429a      	cmp	r2, r3
 8007866:	d803      	bhi.n	8007870 <HAL_SPI_Receive+0x15e>
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800786e:	d102      	bne.n	8007876 <HAL_SPI_Receive+0x164>
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d109      	bne.n	800788a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2201      	movs	r2, #1
 800787a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007886:	2303      	movs	r3, #3
 8007888:	e058      	b.n	800793c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800788e:	b29b      	uxth	r3, r3
 8007890:	2b00      	cmp	r3, #0
 8007892:	d1c4      	bne.n	800781e <HAL_SPI_Receive+0x10c>
 8007894:	e038      	b.n	8007908 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	f003 0301 	and.w	r3, r3, #1
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d113      	bne.n	80078cc <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68da      	ldr	r2, [r3, #12]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ae:	b292      	uxth	r2, r2
 80078b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b6:	1c9a      	adds	r2, r3, #2
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	3b01      	subs	r3, #1
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80078ca:	e018      	b.n	80078fe <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078cc:	f7fb fb78 	bl	8002fc0 <HAL_GetTick>
 80078d0:	4602      	mov	r2, r0
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	683a      	ldr	r2, [r7, #0]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d803      	bhi.n	80078e4 <HAL_SPI_Receive+0x1d2>
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e2:	d102      	bne.n	80078ea <HAL_SPI_Receive+0x1d8>
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d109      	bne.n	80078fe <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2201      	movs	r2, #1
 80078ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e01e      	b.n	800793c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007902:	b29b      	uxth	r3, r3
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1c6      	bne.n	8007896 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f000 fb93 	bl	8008038 <SPI_EndRxTransaction>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d002      	beq.n	800791e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2220      	movs	r2, #32
 800791c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2201      	movs	r2, #1
 8007922:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007932:	2b00      	cmp	r3, #0
 8007934:	d001      	beq.n	800793a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e000      	b.n	800793c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800793a:	2300      	movs	r3, #0
  }
}
 800793c:	4618      	mov	r0, r3
 800793e:	3718      	adds	r7, #24
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b08a      	sub	sp, #40	@ 0x28
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
 8007950:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007952:	2301      	movs	r3, #1
 8007954:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007956:	f7fb fb33 	bl	8002fc0 <HAL_GetTick>
 800795a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007962:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800796a:	887b      	ldrh	r3, [r7, #2]
 800796c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800796e:	7ffb      	ldrb	r3, [r7, #31]
 8007970:	2b01      	cmp	r3, #1
 8007972:	d00c      	beq.n	800798e <HAL_SPI_TransmitReceive+0x4a>
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800797a:	d106      	bne.n	800798a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d102      	bne.n	800798a <HAL_SPI_TransmitReceive+0x46>
 8007984:	7ffb      	ldrb	r3, [r7, #31]
 8007986:	2b04      	cmp	r3, #4
 8007988:	d001      	beq.n	800798e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800798a:	2302      	movs	r3, #2
 800798c:	e17f      	b.n	8007c8e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d005      	beq.n	80079a0 <HAL_SPI_TransmitReceive+0x5c>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d002      	beq.n	80079a0 <HAL_SPI_TransmitReceive+0x5c>
 800799a:	887b      	ldrh	r3, [r7, #2]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d101      	bne.n	80079a4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	e174      	b.n	8007c8e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d101      	bne.n	80079b2 <HAL_SPI_TransmitReceive+0x6e>
 80079ae:	2302      	movs	r3, #2
 80079b0:	e16d      	b.n	8007c8e <HAL_SPI_TransmitReceive+0x34a>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	2b04      	cmp	r3, #4
 80079c4:	d003      	beq.n	80079ce <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2205      	movs	r2, #5
 80079ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	887a      	ldrh	r2, [r7, #2]
 80079de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	887a      	ldrh	r2, [r7, #2]
 80079e4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	887a      	ldrh	r2, [r7, #2]
 80079f0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	887a      	ldrh	r2, [r7, #2]
 80079f6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2200      	movs	r2, #0
 80079fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a0e:	2b40      	cmp	r3, #64	@ 0x40
 8007a10:	d007      	beq.n	8007a22 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a2a:	d17e      	bne.n	8007b2a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d002      	beq.n	8007a3a <HAL_SPI_TransmitReceive+0xf6>
 8007a34:	8afb      	ldrh	r3, [r7, #22]
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d16c      	bne.n	8007b14 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a3e:	881a      	ldrh	r2, [r3, #0]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a4a:	1c9a      	adds	r2, r3, #2
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	3b01      	subs	r3, #1
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a5e:	e059      	b.n	8007b14 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	f003 0302 	and.w	r3, r3, #2
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d11b      	bne.n	8007aa6 <HAL_SPI_TransmitReceive+0x162>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d016      	beq.n	8007aa6 <HAL_SPI_TransmitReceive+0x162>
 8007a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d113      	bne.n	8007aa6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a82:	881a      	ldrh	r2, [r3, #0]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a8e:	1c9a      	adds	r2, r3, #2
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	f003 0301 	and.w	r3, r3, #1
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d119      	bne.n	8007ae8 <HAL_SPI_TransmitReceive+0x1a4>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d014      	beq.n	8007ae8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68da      	ldr	r2, [r3, #12]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac8:	b292      	uxth	r2, r2
 8007aca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ad0:	1c9a      	adds	r2, r3, #2
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	3b01      	subs	r3, #1
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007ae8:	f7fb fa6a 	bl	8002fc0 <HAL_GetTick>
 8007aec:	4602      	mov	r2, r0
 8007aee:	6a3b      	ldr	r3, [r7, #32]
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d80d      	bhi.n	8007b14 <HAL_SPI_TransmitReceive+0x1d0>
 8007af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007afe:	d009      	beq.n	8007b14 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007b10:	2303      	movs	r3, #3
 8007b12:	e0bc      	b.n	8007c8e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1a0      	bne.n	8007a60 <HAL_SPI_TransmitReceive+0x11c>
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d19b      	bne.n	8007a60 <HAL_SPI_TransmitReceive+0x11c>
 8007b28:	e082      	b.n	8007c30 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d002      	beq.n	8007b38 <HAL_SPI_TransmitReceive+0x1f4>
 8007b32:	8afb      	ldrh	r3, [r7, #22]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d171      	bne.n	8007c1c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	330c      	adds	r3, #12
 8007b42:	7812      	ldrb	r2, [r2, #0]
 8007b44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b4a:	1c5a      	adds	r2, r3, #1
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	3b01      	subs	r3, #1
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b5e:	e05d      	b.n	8007c1c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	f003 0302 	and.w	r3, r3, #2
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	d11c      	bne.n	8007ba8 <HAL_SPI_TransmitReceive+0x264>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d017      	beq.n	8007ba8 <HAL_SPI_TransmitReceive+0x264>
 8007b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d114      	bne.n	8007ba8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	330c      	adds	r3, #12
 8007b88:	7812      	ldrb	r2, [r2, #0]
 8007b8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b90:	1c5a      	adds	r2, r3, #1
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	3b01      	subs	r3, #1
 8007b9e:	b29a      	uxth	r2, r3
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d119      	bne.n	8007bea <HAL_SPI_TransmitReceive+0x2a6>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d014      	beq.n	8007bea <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68da      	ldr	r2, [r3, #12]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bca:	b2d2      	uxtb	r2, r2
 8007bcc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bd2:	1c5a      	adds	r2, r3, #1
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	3b01      	subs	r3, #1
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007be6:	2301      	movs	r3, #1
 8007be8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007bea:	f7fb f9e9 	bl	8002fc0 <HAL_GetTick>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	1ad3      	subs	r3, r2, r3
 8007bf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d803      	bhi.n	8007c02 <HAL_SPI_TransmitReceive+0x2be>
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c00:	d102      	bne.n	8007c08 <HAL_SPI_TransmitReceive+0x2c4>
 8007c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d109      	bne.n	8007c1c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	e038      	b.n	8007c8e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d19c      	bne.n	8007b60 <HAL_SPI_TransmitReceive+0x21c>
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d197      	bne.n	8007b60 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c30:	6a3a      	ldr	r2, [r7, #32]
 8007c32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f000 fa65 	bl	8008104 <SPI_EndRxTxTransaction>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d008      	beq.n	8007c52 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2220      	movs	r2, #32
 8007c44:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e01d      	b.n	8007c8e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10a      	bne.n	8007c70 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	613b      	str	r3, [r7, #16]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	613b      	str	r3, [r7, #16]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	613b      	str	r3, [r7, #16]
 8007c6e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d001      	beq.n	8007c8c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e000      	b.n	8007c8e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007c8c:	2300      	movs	r3, #0
  }
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3728      	adds	r7, #40	@ 0x28
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
	...

08007c98 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d001      	beq.n	8007cb6 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8007cb2:	2302      	movs	r3, #2
 8007cb4:	e097      	b.n	8007de6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d002      	beq.n	8007cc2 <HAL_SPI_Transmit_DMA+0x2a>
 8007cbc:	88fb      	ldrh	r3, [r7, #6]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d101      	bne.n	8007cc6 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e08f      	b.n	8007de6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d101      	bne.n	8007cd4 <HAL_SPI_Transmit_DMA+0x3c>
 8007cd0:	2302      	movs	r3, #2
 8007cd2:	e088      	b.n	8007de6 <HAL_SPI_Transmit_DMA+0x14e>
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2203      	movs	r2, #3
 8007ce0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	68ba      	ldr	r2, [r7, #8]
 8007cee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	88fa      	ldrh	r2, [r7, #6]
 8007cf4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	88fa      	ldrh	r2, [r7, #6]
 8007cfa:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2200      	movs	r2, #0
 8007d12:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d22:	d10f      	bne.n	8007d44 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d32:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007d42:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d48:	4a29      	ldr	r2, [pc, #164]	@ (8007df0 <HAL_SPI_Transmit_DMA+0x158>)
 8007d4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d50:	4a28      	ldr	r2, [pc, #160]	@ (8007df4 <HAL_SPI_Transmit_DMA+0x15c>)
 8007d52:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d58:	4a27      	ldr	r2, [pc, #156]	@ (8007df8 <HAL_SPI_Transmit_DMA+0x160>)
 8007d5a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d60:	2200      	movs	r2, #0
 8007d62:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	330c      	adds	r3, #12
 8007d74:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d7a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007d7c:	f7fb fafc 	bl	8003378 <HAL_DMA_Start_IT>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00b      	beq.n	8007d9e <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d8a:	f043 0210 	orr.w	r2, r3, #16
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e023      	b.n	8007de6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007da8:	2b40      	cmp	r3, #64	@ 0x40
 8007daa:	d007      	beq.n	8007dbc <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007dba:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	685a      	ldr	r2, [r3, #4]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f042 0220 	orr.w	r2, r2, #32
 8007dd2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	685a      	ldr	r2, [r3, #4]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f042 0202 	orr.w	r2, r2, #2
 8007de2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	08007ecd 	.word	0x08007ecd
 8007df4:	08007e25 	.word	0x08007e25
 8007df8:	08007ee9 	.word	0x08007ee9

08007dfc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007e04:	bf00      	nop
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007e18:	bf00      	nop
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b086      	sub	sp, #24
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e30:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e32:	f7fb f8c5 	bl	8002fc0 <HAL_GetTick>
 8007e36:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e46:	d03b      	beq.n	8007ec0 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	685a      	ldr	r2, [r3, #4]
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f022 0220 	bic.w	r2, r2, #32
 8007e56:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	685a      	ldr	r2, [r3, #4]
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f022 0202 	bic.w	r2, r2, #2
 8007e66:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007e68:	693a      	ldr	r2, [r7, #16]
 8007e6a:	2164      	movs	r1, #100	@ 0x64
 8007e6c:	6978      	ldr	r0, [r7, #20]
 8007e6e:	f000 f949 	bl	8008104 <SPI_EndRxTxTransaction>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d005      	beq.n	8007e84 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e7c:	f043 0220 	orr.w	r2, r3, #32
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d10a      	bne.n	8007ea2 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	60fb      	str	r3, [r7, #12]
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	60fb      	str	r3, [r7, #12]
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	60fb      	str	r3, [r7, #12]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d003      	beq.n	8007ec0 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007eb8:	6978      	ldr	r0, [r7, #20]
 8007eba:	f7ff ffa9 	bl	8007e10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007ebe:	e002      	b.n	8007ec6 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007ec0:	6978      	ldr	r0, [r7, #20]
 8007ec2:	f7fa fb1f 	bl	8002504 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ec6:	3718      	adds	r7, #24
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ed8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f7ff ff8e 	bl	8007dfc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ee0:	bf00      	nop
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ef4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	685a      	ldr	r2, [r3, #4]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f022 0203 	bic.w	r2, r2, #3
 8007f04:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f0a:	f043 0210 	orr.w	r2, r3, #16
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007f1a:	68f8      	ldr	r0, [r7, #12]
 8007f1c:	f7ff ff78 	bl	8007e10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007f20:	bf00      	nop
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b088      	sub	sp, #32
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	603b      	str	r3, [r7, #0]
 8007f34:	4613      	mov	r3, r2
 8007f36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007f38:	f7fb f842 	bl	8002fc0 <HAL_GetTick>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f40:	1a9b      	subs	r3, r3, r2
 8007f42:	683a      	ldr	r2, [r7, #0]
 8007f44:	4413      	add	r3, r2
 8007f46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007f48:	f7fb f83a 	bl	8002fc0 <HAL_GetTick>
 8007f4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007f4e:	4b39      	ldr	r3, [pc, #228]	@ (8008034 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	015b      	lsls	r3, r3, #5
 8007f54:	0d1b      	lsrs	r3, r3, #20
 8007f56:	69fa      	ldr	r2, [r7, #28]
 8007f58:	fb02 f303 	mul.w	r3, r2, r3
 8007f5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f5e:	e054      	b.n	800800a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f66:	d050      	beq.n	800800a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f68:	f7fb f82a 	bl	8002fc0 <HAL_GetTick>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	1ad3      	subs	r3, r2, r3
 8007f72:	69fa      	ldr	r2, [r7, #28]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d902      	bls.n	8007f7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d13d      	bne.n	8007ffa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	685a      	ldr	r2, [r3, #4]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007f8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f96:	d111      	bne.n	8007fbc <SPI_WaitFlagStateUntilTimeout+0x94>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fa0:	d004      	beq.n	8007fac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007faa:	d107      	bne.n	8007fbc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007fba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fc4:	d10f      	bne.n	8007fe6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007fd4:	601a      	str	r2, [r3, #0]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007fe4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	e017      	b.n	800802a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d101      	bne.n	8008004 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008000:	2300      	movs	r3, #0
 8008002:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	3b01      	subs	r3, #1
 8008008:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	689a      	ldr	r2, [r3, #8]
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	4013      	ands	r3, r2
 8008014:	68ba      	ldr	r2, [r7, #8]
 8008016:	429a      	cmp	r2, r3
 8008018:	bf0c      	ite	eq
 800801a:	2301      	moveq	r3, #1
 800801c:	2300      	movne	r3, #0
 800801e:	b2db      	uxtb	r3, r3
 8008020:	461a      	mov	r2, r3
 8008022:	79fb      	ldrb	r3, [r7, #7]
 8008024:	429a      	cmp	r2, r3
 8008026:	d19b      	bne.n	8007f60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3720      	adds	r7, #32
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	20000004 	.word	0x20000004

08008038 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b086      	sub	sp, #24
 800803c:	af02      	add	r7, sp, #8
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800804c:	d111      	bne.n	8008072 <SPI_EndRxTransaction+0x3a>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008056:	d004      	beq.n	8008062 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008060:	d107      	bne.n	8008072 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008070:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800807a:	d12a      	bne.n	80080d2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008084:	d012      	beq.n	80080ac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	9300      	str	r3, [sp, #0]
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	2200      	movs	r2, #0
 800808e:	2180      	movs	r1, #128	@ 0x80
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	f7ff ff49 	bl	8007f28 <SPI_WaitFlagStateUntilTimeout>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d02d      	beq.n	80080f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080a0:	f043 0220 	orr.w	r2, r3, #32
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80080a8:	2303      	movs	r3, #3
 80080aa:	e026      	b.n	80080fa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	9300      	str	r3, [sp, #0]
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	2200      	movs	r2, #0
 80080b4:	2101      	movs	r1, #1
 80080b6:	68f8      	ldr	r0, [r7, #12]
 80080b8:	f7ff ff36 	bl	8007f28 <SPI_WaitFlagStateUntilTimeout>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d01a      	beq.n	80080f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080c6:	f043 0220 	orr.w	r2, r3, #32
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80080ce:	2303      	movs	r3, #3
 80080d0:	e013      	b.n	80080fa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	9300      	str	r3, [sp, #0]
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	2200      	movs	r2, #0
 80080da:	2101      	movs	r1, #1
 80080dc:	68f8      	ldr	r0, [r7, #12]
 80080de:	f7ff ff23 	bl	8007f28 <SPI_WaitFlagStateUntilTimeout>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d007      	beq.n	80080f8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080ec:	f043 0220 	orr.w	r2, r3, #32
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80080f4:	2303      	movs	r3, #3
 80080f6:	e000      	b.n	80080fa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3710      	adds	r7, #16
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
	...

08008104 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b088      	sub	sp, #32
 8008108:	af02      	add	r7, sp, #8
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	9300      	str	r3, [sp, #0]
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	2201      	movs	r2, #1
 8008118:	2102      	movs	r1, #2
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f7ff ff04 	bl	8007f28 <SPI_WaitFlagStateUntilTimeout>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d007      	beq.n	8008136 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800812a:	f043 0220 	orr.w	r2, r3, #32
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008132:	2303      	movs	r3, #3
 8008134:	e032      	b.n	800819c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008136:	4b1b      	ldr	r3, [pc, #108]	@ (80081a4 <SPI_EndRxTxTransaction+0xa0>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a1b      	ldr	r2, [pc, #108]	@ (80081a8 <SPI_EndRxTxTransaction+0xa4>)
 800813c:	fba2 2303 	umull	r2, r3, r2, r3
 8008140:	0d5b      	lsrs	r3, r3, #21
 8008142:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008146:	fb02 f303 	mul.w	r3, r2, r3
 800814a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008154:	d112      	bne.n	800817c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	9300      	str	r3, [sp, #0]
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	2200      	movs	r2, #0
 800815e:	2180      	movs	r1, #128	@ 0x80
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f7ff fee1 	bl	8007f28 <SPI_WaitFlagStateUntilTimeout>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d016      	beq.n	800819a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008170:	f043 0220 	orr.w	r2, r3, #32
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008178:	2303      	movs	r3, #3
 800817a:	e00f      	b.n	800819c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d00a      	beq.n	8008198 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	3b01      	subs	r3, #1
 8008186:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008192:	2b80      	cmp	r3, #128	@ 0x80
 8008194:	d0f2      	beq.n	800817c <SPI_EndRxTxTransaction+0x78>
 8008196:	e000      	b.n	800819a <SPI_EndRxTxTransaction+0x96>
        break;
 8008198:	bf00      	nop
  }

  return HAL_OK;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	3718      	adds	r7, #24
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	20000004 	.word	0x20000004
 80081a8:	165e9f81 	.word	0x165e9f81

080081ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d101      	bne.n	80081be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e041      	b.n	8008242 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d106      	bne.n	80081d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f7fa fe00 	bl	8002dd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2202      	movs	r2, #2
 80081dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	3304      	adds	r3, #4
 80081e8:	4619      	mov	r1, r3
 80081ea:	4610      	mov	r0, r2
 80081ec:	f000 fa7e 	bl	80086ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
	...

0800824c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800825a:	b2db      	uxtb	r3, r3
 800825c:	2b01      	cmp	r3, #1
 800825e:	d001      	beq.n	8008264 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	e04e      	b.n	8008302 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2202      	movs	r2, #2
 8008268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68da      	ldr	r2, [r3, #12]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f042 0201 	orr.w	r2, r2, #1
 800827a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a23      	ldr	r2, [pc, #140]	@ (8008310 <HAL_TIM_Base_Start_IT+0xc4>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d022      	beq.n	80082cc <HAL_TIM_Base_Start_IT+0x80>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800828e:	d01d      	beq.n	80082cc <HAL_TIM_Base_Start_IT+0x80>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a1f      	ldr	r2, [pc, #124]	@ (8008314 <HAL_TIM_Base_Start_IT+0xc8>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d018      	beq.n	80082cc <HAL_TIM_Base_Start_IT+0x80>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a1e      	ldr	r2, [pc, #120]	@ (8008318 <HAL_TIM_Base_Start_IT+0xcc>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d013      	beq.n	80082cc <HAL_TIM_Base_Start_IT+0x80>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a1c      	ldr	r2, [pc, #112]	@ (800831c <HAL_TIM_Base_Start_IT+0xd0>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d00e      	beq.n	80082cc <HAL_TIM_Base_Start_IT+0x80>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a1b      	ldr	r2, [pc, #108]	@ (8008320 <HAL_TIM_Base_Start_IT+0xd4>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d009      	beq.n	80082cc <HAL_TIM_Base_Start_IT+0x80>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a19      	ldr	r2, [pc, #100]	@ (8008324 <HAL_TIM_Base_Start_IT+0xd8>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d004      	beq.n	80082cc <HAL_TIM_Base_Start_IT+0x80>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a18      	ldr	r2, [pc, #96]	@ (8008328 <HAL_TIM_Base_Start_IT+0xdc>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d111      	bne.n	80082f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	f003 0307 	and.w	r3, r3, #7
 80082d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2b06      	cmp	r3, #6
 80082dc:	d010      	beq.n	8008300 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f042 0201 	orr.w	r2, r2, #1
 80082ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082ee:	e007      	b.n	8008300 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f042 0201 	orr.w	r2, r2, #1
 80082fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3714      	adds	r7, #20
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	40010000 	.word	0x40010000
 8008314:	40000400 	.word	0x40000400
 8008318:	40000800 	.word	0x40000800
 800831c:	40000c00 	.word	0x40000c00
 8008320:	40010400 	.word	0x40010400
 8008324:	40014000 	.word	0x40014000
 8008328:	40001800 	.word	0x40001800

0800832c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	f003 0302 	and.w	r3, r3, #2
 800834a:	2b00      	cmp	r3, #0
 800834c:	d020      	beq.n	8008390 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f003 0302 	and.w	r3, r3, #2
 8008354:	2b00      	cmp	r3, #0
 8008356:	d01b      	beq.n	8008390 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f06f 0202 	mvn.w	r2, #2
 8008360:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2201      	movs	r2, #1
 8008366:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	699b      	ldr	r3, [r3, #24]
 800836e:	f003 0303 	and.w	r3, r3, #3
 8008372:	2b00      	cmp	r3, #0
 8008374:	d003      	beq.n	800837e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 f999 	bl	80086ae <HAL_TIM_IC_CaptureCallback>
 800837c:	e005      	b.n	800838a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 f98b 	bl	800869a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 f99c 	bl	80086c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	f003 0304 	and.w	r3, r3, #4
 8008396:	2b00      	cmp	r3, #0
 8008398:	d020      	beq.n	80083dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f003 0304 	and.w	r3, r3, #4
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d01b      	beq.n	80083dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f06f 0204 	mvn.w	r2, #4
 80083ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2202      	movs	r2, #2
 80083b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	699b      	ldr	r3, [r3, #24]
 80083ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d003      	beq.n	80083ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f973 	bl	80086ae <HAL_TIM_IC_CaptureCallback>
 80083c8:	e005      	b.n	80083d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 f965 	bl	800869a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 f976 	bl	80086c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	f003 0308 	and.w	r3, r3, #8
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d020      	beq.n	8008428 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f003 0308 	and.w	r3, r3, #8
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d01b      	beq.n	8008428 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f06f 0208 	mvn.w	r2, #8
 80083f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2204      	movs	r2, #4
 80083fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	69db      	ldr	r3, [r3, #28]
 8008406:	f003 0303 	and.w	r3, r3, #3
 800840a:	2b00      	cmp	r3, #0
 800840c:	d003      	beq.n	8008416 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 f94d 	bl	80086ae <HAL_TIM_IC_CaptureCallback>
 8008414:	e005      	b.n	8008422 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f93f 	bl	800869a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 f950 	bl	80086c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	f003 0310 	and.w	r3, r3, #16
 800842e:	2b00      	cmp	r3, #0
 8008430:	d020      	beq.n	8008474 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f003 0310 	and.w	r3, r3, #16
 8008438:	2b00      	cmp	r3, #0
 800843a:	d01b      	beq.n	8008474 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f06f 0210 	mvn.w	r2, #16
 8008444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2208      	movs	r2, #8
 800844a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	69db      	ldr	r3, [r3, #28]
 8008452:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008456:	2b00      	cmp	r3, #0
 8008458:	d003      	beq.n	8008462 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 f927 	bl	80086ae <HAL_TIM_IC_CaptureCallback>
 8008460:	e005      	b.n	800846e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 f919 	bl	800869a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 f92a 	bl	80086c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	f003 0301 	and.w	r3, r3, #1
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00c      	beq.n	8008498 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f003 0301 	and.w	r3, r3, #1
 8008484:	2b00      	cmp	r3, #0
 8008486:	d007      	beq.n	8008498 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f06f 0201 	mvn.w	r2, #1
 8008490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f7fa f9b6 	bl	8002804 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00c      	beq.n	80084bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d007      	beq.n	80084bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80084b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 fae4 	bl	8008a84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00c      	beq.n	80084e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d007      	beq.n	80084e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80084d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 f8fb 	bl	80086d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	f003 0320 	and.w	r3, r3, #32
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d00c      	beq.n	8008504 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f003 0320 	and.w	r3, r3, #32
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d007      	beq.n	8008504 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f06f 0220 	mvn.w	r2, #32
 80084fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 fab6 	bl	8008a70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008504:	bf00      	nop
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008516:	2300      	movs	r3, #0
 8008518:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008520:	2b01      	cmp	r3, #1
 8008522:	d101      	bne.n	8008528 <HAL_TIM_ConfigClockSource+0x1c>
 8008524:	2302      	movs	r3, #2
 8008526:	e0b4      	b.n	8008692 <HAL_TIM_ConfigClockSource+0x186>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2202      	movs	r2, #2
 8008534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008546:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800854e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008560:	d03e      	beq.n	80085e0 <HAL_TIM_ConfigClockSource+0xd4>
 8008562:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008566:	f200 8087 	bhi.w	8008678 <HAL_TIM_ConfigClockSource+0x16c>
 800856a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800856e:	f000 8086 	beq.w	800867e <HAL_TIM_ConfigClockSource+0x172>
 8008572:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008576:	d87f      	bhi.n	8008678 <HAL_TIM_ConfigClockSource+0x16c>
 8008578:	2b70      	cmp	r3, #112	@ 0x70
 800857a:	d01a      	beq.n	80085b2 <HAL_TIM_ConfigClockSource+0xa6>
 800857c:	2b70      	cmp	r3, #112	@ 0x70
 800857e:	d87b      	bhi.n	8008678 <HAL_TIM_ConfigClockSource+0x16c>
 8008580:	2b60      	cmp	r3, #96	@ 0x60
 8008582:	d050      	beq.n	8008626 <HAL_TIM_ConfigClockSource+0x11a>
 8008584:	2b60      	cmp	r3, #96	@ 0x60
 8008586:	d877      	bhi.n	8008678 <HAL_TIM_ConfigClockSource+0x16c>
 8008588:	2b50      	cmp	r3, #80	@ 0x50
 800858a:	d03c      	beq.n	8008606 <HAL_TIM_ConfigClockSource+0xfa>
 800858c:	2b50      	cmp	r3, #80	@ 0x50
 800858e:	d873      	bhi.n	8008678 <HAL_TIM_ConfigClockSource+0x16c>
 8008590:	2b40      	cmp	r3, #64	@ 0x40
 8008592:	d058      	beq.n	8008646 <HAL_TIM_ConfigClockSource+0x13a>
 8008594:	2b40      	cmp	r3, #64	@ 0x40
 8008596:	d86f      	bhi.n	8008678 <HAL_TIM_ConfigClockSource+0x16c>
 8008598:	2b30      	cmp	r3, #48	@ 0x30
 800859a:	d064      	beq.n	8008666 <HAL_TIM_ConfigClockSource+0x15a>
 800859c:	2b30      	cmp	r3, #48	@ 0x30
 800859e:	d86b      	bhi.n	8008678 <HAL_TIM_ConfigClockSource+0x16c>
 80085a0:	2b20      	cmp	r3, #32
 80085a2:	d060      	beq.n	8008666 <HAL_TIM_ConfigClockSource+0x15a>
 80085a4:	2b20      	cmp	r3, #32
 80085a6:	d867      	bhi.n	8008678 <HAL_TIM_ConfigClockSource+0x16c>
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d05c      	beq.n	8008666 <HAL_TIM_ConfigClockSource+0x15a>
 80085ac:	2b10      	cmp	r3, #16
 80085ae:	d05a      	beq.n	8008666 <HAL_TIM_ConfigClockSource+0x15a>
 80085b0:	e062      	b.n	8008678 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80085c2:	f000 f9b9 	bl	8008938 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80085d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68ba      	ldr	r2, [r7, #8]
 80085dc:	609a      	str	r2, [r3, #8]
      break;
 80085de:	e04f      	b.n	8008680 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80085f0:	f000 f9a2 	bl	8008938 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	689a      	ldr	r2, [r3, #8]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008602:	609a      	str	r2, [r3, #8]
      break;
 8008604:	e03c      	b.n	8008680 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008612:	461a      	mov	r2, r3
 8008614:	f000 f916 	bl	8008844 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2150      	movs	r1, #80	@ 0x50
 800861e:	4618      	mov	r0, r3
 8008620:	f000 f96f 	bl	8008902 <TIM_ITRx_SetConfig>
      break;
 8008624:	e02c      	b.n	8008680 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008632:	461a      	mov	r2, r3
 8008634:	f000 f935 	bl	80088a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2160      	movs	r1, #96	@ 0x60
 800863e:	4618      	mov	r0, r3
 8008640:	f000 f95f 	bl	8008902 <TIM_ITRx_SetConfig>
      break;
 8008644:	e01c      	b.n	8008680 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008652:	461a      	mov	r2, r3
 8008654:	f000 f8f6 	bl	8008844 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2140      	movs	r1, #64	@ 0x40
 800865e:	4618      	mov	r0, r3
 8008660:	f000 f94f 	bl	8008902 <TIM_ITRx_SetConfig>
      break;
 8008664:	e00c      	b.n	8008680 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4619      	mov	r1, r3
 8008670:	4610      	mov	r0, r2
 8008672:	f000 f946 	bl	8008902 <TIM_ITRx_SetConfig>
      break;
 8008676:	e003      	b.n	8008680 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	73fb      	strb	r3, [r7, #15]
      break;
 800867c:	e000      	b.n	8008680 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800867e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008690:	7bfb      	ldrb	r3, [r7, #15]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3710      	adds	r7, #16
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800869a:	b480      	push	{r7}
 800869c:	b083      	sub	sp, #12
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086a2:	bf00      	nop
 80086a4:	370c      	adds	r7, #12
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b083      	sub	sp, #12
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086b6:	bf00      	nop
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr

080086c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086c2:	b480      	push	{r7}
 80086c4:	b083      	sub	sp, #12
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086ca:	bf00      	nop
 80086cc:	370c      	adds	r7, #12
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr

080086d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086d6:	b480      	push	{r7}
 80086d8:	b083      	sub	sp, #12
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086de:	bf00      	nop
 80086e0:	370c      	adds	r7, #12
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
	...

080086ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b085      	sub	sp, #20
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a46      	ldr	r2, [pc, #280]	@ (8008818 <TIM_Base_SetConfig+0x12c>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d013      	beq.n	800872c <TIM_Base_SetConfig+0x40>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800870a:	d00f      	beq.n	800872c <TIM_Base_SetConfig+0x40>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a43      	ldr	r2, [pc, #268]	@ (800881c <TIM_Base_SetConfig+0x130>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d00b      	beq.n	800872c <TIM_Base_SetConfig+0x40>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	4a42      	ldr	r2, [pc, #264]	@ (8008820 <TIM_Base_SetConfig+0x134>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d007      	beq.n	800872c <TIM_Base_SetConfig+0x40>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a41      	ldr	r2, [pc, #260]	@ (8008824 <TIM_Base_SetConfig+0x138>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d003      	beq.n	800872c <TIM_Base_SetConfig+0x40>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4a40      	ldr	r2, [pc, #256]	@ (8008828 <TIM_Base_SetConfig+0x13c>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d108      	bne.n	800873e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	4313      	orrs	r3, r2
 800873c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a35      	ldr	r2, [pc, #212]	@ (8008818 <TIM_Base_SetConfig+0x12c>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d02b      	beq.n	800879e <TIM_Base_SetConfig+0xb2>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800874c:	d027      	beq.n	800879e <TIM_Base_SetConfig+0xb2>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4a32      	ldr	r2, [pc, #200]	@ (800881c <TIM_Base_SetConfig+0x130>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d023      	beq.n	800879e <TIM_Base_SetConfig+0xb2>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a31      	ldr	r2, [pc, #196]	@ (8008820 <TIM_Base_SetConfig+0x134>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d01f      	beq.n	800879e <TIM_Base_SetConfig+0xb2>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a30      	ldr	r2, [pc, #192]	@ (8008824 <TIM_Base_SetConfig+0x138>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d01b      	beq.n	800879e <TIM_Base_SetConfig+0xb2>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a2f      	ldr	r2, [pc, #188]	@ (8008828 <TIM_Base_SetConfig+0x13c>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d017      	beq.n	800879e <TIM_Base_SetConfig+0xb2>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a2e      	ldr	r2, [pc, #184]	@ (800882c <TIM_Base_SetConfig+0x140>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d013      	beq.n	800879e <TIM_Base_SetConfig+0xb2>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a2d      	ldr	r2, [pc, #180]	@ (8008830 <TIM_Base_SetConfig+0x144>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d00f      	beq.n	800879e <TIM_Base_SetConfig+0xb2>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a2c      	ldr	r2, [pc, #176]	@ (8008834 <TIM_Base_SetConfig+0x148>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d00b      	beq.n	800879e <TIM_Base_SetConfig+0xb2>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a2b      	ldr	r2, [pc, #172]	@ (8008838 <TIM_Base_SetConfig+0x14c>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d007      	beq.n	800879e <TIM_Base_SetConfig+0xb2>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a2a      	ldr	r2, [pc, #168]	@ (800883c <TIM_Base_SetConfig+0x150>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d003      	beq.n	800879e <TIM_Base_SetConfig+0xb2>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a29      	ldr	r2, [pc, #164]	@ (8008840 <TIM_Base_SetConfig+0x154>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d108      	bne.n	80087b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	4313      	orrs	r3, r2
 80087ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	695b      	ldr	r3, [r3, #20]
 80087ba:	4313      	orrs	r3, r2
 80087bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	689a      	ldr	r2, [r3, #8]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	4a10      	ldr	r2, [pc, #64]	@ (8008818 <TIM_Base_SetConfig+0x12c>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d003      	beq.n	80087e4 <TIM_Base_SetConfig+0xf8>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	4a12      	ldr	r2, [pc, #72]	@ (8008828 <TIM_Base_SetConfig+0x13c>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d103      	bne.n	80087ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	691a      	ldr	r2, [r3, #16]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	f003 0301 	and.w	r3, r3, #1
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d105      	bne.n	800880a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	f023 0201 	bic.w	r2, r3, #1
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	611a      	str	r2, [r3, #16]
  }
}
 800880a:	bf00      	nop
 800880c:	3714      	adds	r7, #20
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	40010000 	.word	0x40010000
 800881c:	40000400 	.word	0x40000400
 8008820:	40000800 	.word	0x40000800
 8008824:	40000c00 	.word	0x40000c00
 8008828:	40010400 	.word	0x40010400
 800882c:	40014000 	.word	0x40014000
 8008830:	40014400 	.word	0x40014400
 8008834:	40014800 	.word	0x40014800
 8008838:	40001800 	.word	0x40001800
 800883c:	40001c00 	.word	0x40001c00
 8008840:	40002000 	.word	0x40002000

08008844 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008844:	b480      	push	{r7}
 8008846:	b087      	sub	sp, #28
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6a1b      	ldr	r3, [r3, #32]
 8008854:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6a1b      	ldr	r3, [r3, #32]
 800885a:	f023 0201 	bic.w	r2, r3, #1
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800886e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	011b      	lsls	r3, r3, #4
 8008874:	693a      	ldr	r2, [r7, #16]
 8008876:	4313      	orrs	r3, r2
 8008878:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	f023 030a 	bic.w	r3, r3, #10
 8008880:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008882:	697a      	ldr	r2, [r7, #20]
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	4313      	orrs	r3, r2
 8008888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	693a      	ldr	r2, [r7, #16]
 800888e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	697a      	ldr	r2, [r7, #20]
 8008894:	621a      	str	r2, [r3, #32]
}
 8008896:	bf00      	nop
 8008898:	371c      	adds	r7, #28
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr

080088a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088a2:	b480      	push	{r7}
 80088a4:	b087      	sub	sp, #28
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	60f8      	str	r0, [r7, #12]
 80088aa:	60b9      	str	r1, [r7, #8]
 80088ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6a1b      	ldr	r3, [r3, #32]
 80088b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6a1b      	ldr	r3, [r3, #32]
 80088b8:	f023 0210 	bic.w	r2, r3, #16
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	699b      	ldr	r3, [r3, #24]
 80088c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80088cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	031b      	lsls	r3, r3, #12
 80088d2:	693a      	ldr	r2, [r7, #16]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80088de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	011b      	lsls	r3, r3, #4
 80088e4:	697a      	ldr	r2, [r7, #20]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	693a      	ldr	r2, [r7, #16]
 80088ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	697a      	ldr	r2, [r7, #20]
 80088f4:	621a      	str	r2, [r3, #32]
}
 80088f6:	bf00      	nop
 80088f8:	371c      	adds	r7, #28
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr

08008902 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008902:	b480      	push	{r7}
 8008904:	b085      	sub	sp, #20
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
 800890a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008918:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800891a:	683a      	ldr	r2, [r7, #0]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	4313      	orrs	r3, r2
 8008920:	f043 0307 	orr.w	r3, r3, #7
 8008924:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	68fa      	ldr	r2, [r7, #12]
 800892a:	609a      	str	r2, [r3, #8]
}
 800892c:	bf00      	nop
 800892e:	3714      	adds	r7, #20
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008938:	b480      	push	{r7}
 800893a:	b087      	sub	sp, #28
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	607a      	str	r2, [r7, #4]
 8008944:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008952:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	021a      	lsls	r2, r3, #8
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	431a      	orrs	r2, r3
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	4313      	orrs	r3, r2
 8008960:	697a      	ldr	r2, [r7, #20]
 8008962:	4313      	orrs	r3, r2
 8008964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	697a      	ldr	r2, [r7, #20]
 800896a:	609a      	str	r2, [r3, #8]
}
 800896c:	bf00      	nop
 800896e:	371c      	adds	r7, #28
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008988:	2b01      	cmp	r3, #1
 800898a:	d101      	bne.n	8008990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800898c:	2302      	movs	r3, #2
 800898e:	e05a      	b.n	8008a46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2201      	movs	r2, #1
 8008994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2202      	movs	r2, #2
 800899c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68fa      	ldr	r2, [r7, #12]
 80089be:	4313      	orrs	r3, r2
 80089c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a21      	ldr	r2, [pc, #132]	@ (8008a54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d022      	beq.n	8008a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089dc:	d01d      	beq.n	8008a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a1d      	ldr	r2, [pc, #116]	@ (8008a58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d018      	beq.n	8008a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a1b      	ldr	r2, [pc, #108]	@ (8008a5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d013      	beq.n	8008a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a1a      	ldr	r2, [pc, #104]	@ (8008a60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d00e      	beq.n	8008a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a18      	ldr	r2, [pc, #96]	@ (8008a64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d009      	beq.n	8008a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a17      	ldr	r2, [pc, #92]	@ (8008a68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d004      	beq.n	8008a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a15      	ldr	r2, [pc, #84]	@ (8008a6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d10c      	bne.n	8008a34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	68ba      	ldr	r2, [r7, #8]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	68ba      	ldr	r2, [r7, #8]
 8008a32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3714      	adds	r7, #20
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr
 8008a52:	bf00      	nop
 8008a54:	40010000 	.word	0x40010000
 8008a58:	40000400 	.word	0x40000400
 8008a5c:	40000800 	.word	0x40000800
 8008a60:	40000c00 	.word	0x40000c00
 8008a64:	40010400 	.word	0x40010400
 8008a68:	40014000 	.word	0x40014000
 8008a6c:	40001800 	.word	0x40001800

08008a70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a78:	bf00      	nop
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a8c:	bf00      	nop
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d101      	bne.n	8008aaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e042      	b.n	8008b30 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d106      	bne.n	8008ac4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f7fa f9d6 	bl	8002e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2224      	movs	r2, #36	@ 0x24
 8008ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	68da      	ldr	r2, [r3, #12]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008ada:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 f973 	bl	8008dc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	691a      	ldr	r2, [r3, #16]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008af0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	695a      	ldr	r2, [r3, #20]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008b00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	68da      	ldr	r2, [r3, #12]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008b10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2220      	movs	r2, #32
 8008b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2220      	movs	r2, #32
 8008b24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3708      	adds	r7, #8
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b08a      	sub	sp, #40	@ 0x28
 8008b3c:	af02      	add	r7, sp, #8
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	603b      	str	r3, [r7, #0]
 8008b44:	4613      	mov	r3, r2
 8008b46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	2b20      	cmp	r3, #32
 8008b56:	d175      	bne.n	8008c44 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d002      	beq.n	8008b64 <HAL_UART_Transmit+0x2c>
 8008b5e:	88fb      	ldrh	r3, [r7, #6]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d101      	bne.n	8008b68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008b64:	2301      	movs	r3, #1
 8008b66:	e06e      	b.n	8008c46 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2221      	movs	r2, #33	@ 0x21
 8008b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b76:	f7fa fa23 	bl	8002fc0 <HAL_GetTick>
 8008b7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	88fa      	ldrh	r2, [r7, #6]
 8008b80:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	88fa      	ldrh	r2, [r7, #6]
 8008b86:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b90:	d108      	bne.n	8008ba4 <HAL_UART_Transmit+0x6c>
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	691b      	ldr	r3, [r3, #16]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d104      	bne.n	8008ba4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	61bb      	str	r3, [r7, #24]
 8008ba2:	e003      	b.n	8008bac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008bac:	e02e      	b.n	8008c0c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	9300      	str	r3, [sp, #0]
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	2180      	movs	r1, #128	@ 0x80
 8008bb8:	68f8      	ldr	r0, [r7, #12]
 8008bba:	f000 f848 	bl	8008c4e <UART_WaitOnFlagUntilTimeout>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d005      	beq.n	8008bd0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2220      	movs	r2, #32
 8008bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008bcc:	2303      	movs	r3, #3
 8008bce:	e03a      	b.n	8008c46 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008bd0:	69fb      	ldr	r3, [r7, #28]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d10b      	bne.n	8008bee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	881b      	ldrh	r3, [r3, #0]
 8008bda:	461a      	mov	r2, r3
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008be4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	3302      	adds	r3, #2
 8008bea:	61bb      	str	r3, [r7, #24]
 8008bec:	e007      	b.n	8008bfe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	781a      	ldrb	r2, [r3, #0]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	3b01      	subs	r3, #1
 8008c06:	b29a      	uxth	r2, r3
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1cb      	bne.n	8008bae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	9300      	str	r3, [sp, #0]
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	2140      	movs	r1, #64	@ 0x40
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	f000 f814 	bl	8008c4e <UART_WaitOnFlagUntilTimeout>
 8008c26:	4603      	mov	r3, r0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d005      	beq.n	8008c38 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2220      	movs	r2, #32
 8008c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008c34:	2303      	movs	r3, #3
 8008c36:	e006      	b.n	8008c46 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2220      	movs	r2, #32
 8008c3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008c40:	2300      	movs	r3, #0
 8008c42:	e000      	b.n	8008c46 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008c44:	2302      	movs	r3, #2
  }
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3720      	adds	r7, #32
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b086      	sub	sp, #24
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	60f8      	str	r0, [r7, #12]
 8008c56:	60b9      	str	r1, [r7, #8]
 8008c58:	603b      	str	r3, [r7, #0]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c5e:	e03b      	b.n	8008cd8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c60:	6a3b      	ldr	r3, [r7, #32]
 8008c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c66:	d037      	beq.n	8008cd8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c68:	f7fa f9aa 	bl	8002fc0 <HAL_GetTick>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	1ad3      	subs	r3, r2, r3
 8008c72:	6a3a      	ldr	r2, [r7, #32]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d302      	bcc.n	8008c7e <UART_WaitOnFlagUntilTimeout+0x30>
 8008c78:	6a3b      	ldr	r3, [r7, #32]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d101      	bne.n	8008c82 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008c7e:	2303      	movs	r3, #3
 8008c80:	e03a      	b.n	8008cf8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	f003 0304 	and.w	r3, r3, #4
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d023      	beq.n	8008cd8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	2b80      	cmp	r3, #128	@ 0x80
 8008c94:	d020      	beq.n	8008cd8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	2b40      	cmp	r3, #64	@ 0x40
 8008c9a:	d01d      	beq.n	8008cd8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f003 0308 	and.w	r3, r3, #8
 8008ca6:	2b08      	cmp	r3, #8
 8008ca8:	d116      	bne.n	8008cd8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008caa:	2300      	movs	r3, #0
 8008cac:	617b      	str	r3, [r7, #20]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	617b      	str	r3, [r7, #20]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	617b      	str	r3, [r7, #20]
 8008cbe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	f000 f81d 	bl	8008d00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2208      	movs	r2, #8
 8008cca:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	e00f      	b.n	8008cf8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	68ba      	ldr	r2, [r7, #8]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	bf0c      	ite	eq
 8008ce8:	2301      	moveq	r3, #1
 8008cea:	2300      	movne	r3, #0
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	461a      	mov	r2, r3
 8008cf0:	79fb      	ldrb	r3, [r7, #7]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d0b4      	beq.n	8008c60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cf6:	2300      	movs	r3, #0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3718      	adds	r7, #24
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b095      	sub	sp, #84	@ 0x54
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	330c      	adds	r3, #12
 8008d0e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d12:	e853 3f00 	ldrex	r3, [r3]
 8008d16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	330c      	adds	r3, #12
 8008d26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008d28:	643a      	str	r2, [r7, #64]	@ 0x40
 8008d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d30:	e841 2300 	strex	r3, r2, [r1]
 8008d34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d1e5      	bne.n	8008d08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	3314      	adds	r3, #20
 8008d42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d44:	6a3b      	ldr	r3, [r7, #32]
 8008d46:	e853 3f00 	ldrex	r3, [r3]
 8008d4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	f023 0301 	bic.w	r3, r3, #1
 8008d52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	3314      	adds	r3, #20
 8008d5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d64:	e841 2300 	strex	r3, r2, [r1]
 8008d68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d1e5      	bne.n	8008d3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d119      	bne.n	8008dac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	330c      	adds	r3, #12
 8008d7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	e853 3f00 	ldrex	r3, [r3]
 8008d86:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	f023 0310 	bic.w	r3, r3, #16
 8008d8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	330c      	adds	r3, #12
 8008d96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d98:	61ba      	str	r2, [r7, #24]
 8008d9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9c:	6979      	ldr	r1, [r7, #20]
 8008d9e:	69ba      	ldr	r2, [r7, #24]
 8008da0:	e841 2300 	strex	r3, r2, [r1]
 8008da4:	613b      	str	r3, [r7, #16]
   return(result);
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d1e5      	bne.n	8008d78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2220      	movs	r2, #32
 8008db0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008dba:	bf00      	nop
 8008dbc:	3754      	adds	r7, #84	@ 0x54
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr
	...

08008dc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008dcc:	b0c0      	sub	sp, #256	@ 0x100
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	691b      	ldr	r3, [r3, #16]
 8008ddc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008de4:	68d9      	ldr	r1, [r3, #12]
 8008de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	ea40 0301 	orr.w	r3, r0, r1
 8008df0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008df6:	689a      	ldr	r2, [r3, #8]
 8008df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	431a      	orrs	r2, r3
 8008e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e04:	695b      	ldr	r3, [r3, #20]
 8008e06:	431a      	orrs	r2, r3
 8008e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e0c:	69db      	ldr	r3, [r3, #28]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008e20:	f021 010c 	bic.w	r1, r1, #12
 8008e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008e2e:	430b      	orrs	r3, r1
 8008e30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	695b      	ldr	r3, [r3, #20]
 8008e3a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e42:	6999      	ldr	r1, [r3, #24]
 8008e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	ea40 0301 	orr.w	r3, r0, r1
 8008e4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	4b8f      	ldr	r3, [pc, #572]	@ (8009094 <UART_SetConfig+0x2cc>)
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d005      	beq.n	8008e68 <UART_SetConfig+0xa0>
 8008e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	4b8d      	ldr	r3, [pc, #564]	@ (8009098 <UART_SetConfig+0x2d0>)
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d104      	bne.n	8008e72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e68:	f7fe f84c 	bl	8006f04 <HAL_RCC_GetPCLK2Freq>
 8008e6c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008e70:	e003      	b.n	8008e7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e72:	f7fe f833 	bl	8006edc <HAL_RCC_GetPCLK1Freq>
 8008e76:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e7e:	69db      	ldr	r3, [r3, #28]
 8008e80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e84:	f040 810c 	bne.w	80090a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008e88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008e92:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008e96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008e9a:	4622      	mov	r2, r4
 8008e9c:	462b      	mov	r3, r5
 8008e9e:	1891      	adds	r1, r2, r2
 8008ea0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008ea2:	415b      	adcs	r3, r3
 8008ea4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ea6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008eaa:	4621      	mov	r1, r4
 8008eac:	eb12 0801 	adds.w	r8, r2, r1
 8008eb0:	4629      	mov	r1, r5
 8008eb2:	eb43 0901 	adc.w	r9, r3, r1
 8008eb6:	f04f 0200 	mov.w	r2, #0
 8008eba:	f04f 0300 	mov.w	r3, #0
 8008ebe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008ec2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008ec6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008eca:	4690      	mov	r8, r2
 8008ecc:	4699      	mov	r9, r3
 8008ece:	4623      	mov	r3, r4
 8008ed0:	eb18 0303 	adds.w	r3, r8, r3
 8008ed4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008ed8:	462b      	mov	r3, r5
 8008eda:	eb49 0303 	adc.w	r3, r9, r3
 8008ede:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008eee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008ef2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	18db      	adds	r3, r3, r3
 8008efa:	653b      	str	r3, [r7, #80]	@ 0x50
 8008efc:	4613      	mov	r3, r2
 8008efe:	eb42 0303 	adc.w	r3, r2, r3
 8008f02:	657b      	str	r3, [r7, #84]	@ 0x54
 8008f04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008f08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008f0c:	f7f7 feac 	bl	8000c68 <__aeabi_uldivmod>
 8008f10:	4602      	mov	r2, r0
 8008f12:	460b      	mov	r3, r1
 8008f14:	4b61      	ldr	r3, [pc, #388]	@ (800909c <UART_SetConfig+0x2d4>)
 8008f16:	fba3 2302 	umull	r2, r3, r3, r2
 8008f1a:	095b      	lsrs	r3, r3, #5
 8008f1c:	011c      	lsls	r4, r3, #4
 8008f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f22:	2200      	movs	r2, #0
 8008f24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008f28:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008f2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008f30:	4642      	mov	r2, r8
 8008f32:	464b      	mov	r3, r9
 8008f34:	1891      	adds	r1, r2, r2
 8008f36:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008f38:	415b      	adcs	r3, r3
 8008f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008f40:	4641      	mov	r1, r8
 8008f42:	eb12 0a01 	adds.w	sl, r2, r1
 8008f46:	4649      	mov	r1, r9
 8008f48:	eb43 0b01 	adc.w	fp, r3, r1
 8008f4c:	f04f 0200 	mov.w	r2, #0
 8008f50:	f04f 0300 	mov.w	r3, #0
 8008f54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008f58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008f5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f60:	4692      	mov	sl, r2
 8008f62:	469b      	mov	fp, r3
 8008f64:	4643      	mov	r3, r8
 8008f66:	eb1a 0303 	adds.w	r3, sl, r3
 8008f6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008f6e:	464b      	mov	r3, r9
 8008f70:	eb4b 0303 	adc.w	r3, fp, r3
 8008f74:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008f84:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008f88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	18db      	adds	r3, r3, r3
 8008f90:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f92:	4613      	mov	r3, r2
 8008f94:	eb42 0303 	adc.w	r3, r2, r3
 8008f98:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008f9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008fa2:	f7f7 fe61 	bl	8000c68 <__aeabi_uldivmod>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	460b      	mov	r3, r1
 8008faa:	4611      	mov	r1, r2
 8008fac:	4b3b      	ldr	r3, [pc, #236]	@ (800909c <UART_SetConfig+0x2d4>)
 8008fae:	fba3 2301 	umull	r2, r3, r3, r1
 8008fb2:	095b      	lsrs	r3, r3, #5
 8008fb4:	2264      	movs	r2, #100	@ 0x64
 8008fb6:	fb02 f303 	mul.w	r3, r2, r3
 8008fba:	1acb      	subs	r3, r1, r3
 8008fbc:	00db      	lsls	r3, r3, #3
 8008fbe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008fc2:	4b36      	ldr	r3, [pc, #216]	@ (800909c <UART_SetConfig+0x2d4>)
 8008fc4:	fba3 2302 	umull	r2, r3, r3, r2
 8008fc8:	095b      	lsrs	r3, r3, #5
 8008fca:	005b      	lsls	r3, r3, #1
 8008fcc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008fd0:	441c      	add	r4, r3
 8008fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008fdc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008fe0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008fe4:	4642      	mov	r2, r8
 8008fe6:	464b      	mov	r3, r9
 8008fe8:	1891      	adds	r1, r2, r2
 8008fea:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008fec:	415b      	adcs	r3, r3
 8008fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ff0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008ff4:	4641      	mov	r1, r8
 8008ff6:	1851      	adds	r1, r2, r1
 8008ff8:	6339      	str	r1, [r7, #48]	@ 0x30
 8008ffa:	4649      	mov	r1, r9
 8008ffc:	414b      	adcs	r3, r1
 8008ffe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009000:	f04f 0200 	mov.w	r2, #0
 8009004:	f04f 0300 	mov.w	r3, #0
 8009008:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800900c:	4659      	mov	r1, fp
 800900e:	00cb      	lsls	r3, r1, #3
 8009010:	4651      	mov	r1, sl
 8009012:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009016:	4651      	mov	r1, sl
 8009018:	00ca      	lsls	r2, r1, #3
 800901a:	4610      	mov	r0, r2
 800901c:	4619      	mov	r1, r3
 800901e:	4603      	mov	r3, r0
 8009020:	4642      	mov	r2, r8
 8009022:	189b      	adds	r3, r3, r2
 8009024:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009028:	464b      	mov	r3, r9
 800902a:	460a      	mov	r2, r1
 800902c:	eb42 0303 	adc.w	r3, r2, r3
 8009030:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009040:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009044:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009048:	460b      	mov	r3, r1
 800904a:	18db      	adds	r3, r3, r3
 800904c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800904e:	4613      	mov	r3, r2
 8009050:	eb42 0303 	adc.w	r3, r2, r3
 8009054:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009056:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800905a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800905e:	f7f7 fe03 	bl	8000c68 <__aeabi_uldivmod>
 8009062:	4602      	mov	r2, r0
 8009064:	460b      	mov	r3, r1
 8009066:	4b0d      	ldr	r3, [pc, #52]	@ (800909c <UART_SetConfig+0x2d4>)
 8009068:	fba3 1302 	umull	r1, r3, r3, r2
 800906c:	095b      	lsrs	r3, r3, #5
 800906e:	2164      	movs	r1, #100	@ 0x64
 8009070:	fb01 f303 	mul.w	r3, r1, r3
 8009074:	1ad3      	subs	r3, r2, r3
 8009076:	00db      	lsls	r3, r3, #3
 8009078:	3332      	adds	r3, #50	@ 0x32
 800907a:	4a08      	ldr	r2, [pc, #32]	@ (800909c <UART_SetConfig+0x2d4>)
 800907c:	fba2 2303 	umull	r2, r3, r2, r3
 8009080:	095b      	lsrs	r3, r3, #5
 8009082:	f003 0207 	and.w	r2, r3, #7
 8009086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4422      	add	r2, r4
 800908e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009090:	e106      	b.n	80092a0 <UART_SetConfig+0x4d8>
 8009092:	bf00      	nop
 8009094:	40011000 	.word	0x40011000
 8009098:	40011400 	.word	0x40011400
 800909c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80090a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090a4:	2200      	movs	r2, #0
 80090a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80090aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80090ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80090b2:	4642      	mov	r2, r8
 80090b4:	464b      	mov	r3, r9
 80090b6:	1891      	adds	r1, r2, r2
 80090b8:	6239      	str	r1, [r7, #32]
 80090ba:	415b      	adcs	r3, r3
 80090bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80090be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80090c2:	4641      	mov	r1, r8
 80090c4:	1854      	adds	r4, r2, r1
 80090c6:	4649      	mov	r1, r9
 80090c8:	eb43 0501 	adc.w	r5, r3, r1
 80090cc:	f04f 0200 	mov.w	r2, #0
 80090d0:	f04f 0300 	mov.w	r3, #0
 80090d4:	00eb      	lsls	r3, r5, #3
 80090d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80090da:	00e2      	lsls	r2, r4, #3
 80090dc:	4614      	mov	r4, r2
 80090de:	461d      	mov	r5, r3
 80090e0:	4643      	mov	r3, r8
 80090e2:	18e3      	adds	r3, r4, r3
 80090e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80090e8:	464b      	mov	r3, r9
 80090ea:	eb45 0303 	adc.w	r3, r5, r3
 80090ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80090f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80090fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009102:	f04f 0200 	mov.w	r2, #0
 8009106:	f04f 0300 	mov.w	r3, #0
 800910a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800910e:	4629      	mov	r1, r5
 8009110:	008b      	lsls	r3, r1, #2
 8009112:	4621      	mov	r1, r4
 8009114:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009118:	4621      	mov	r1, r4
 800911a:	008a      	lsls	r2, r1, #2
 800911c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009120:	f7f7 fda2 	bl	8000c68 <__aeabi_uldivmod>
 8009124:	4602      	mov	r2, r0
 8009126:	460b      	mov	r3, r1
 8009128:	4b60      	ldr	r3, [pc, #384]	@ (80092ac <UART_SetConfig+0x4e4>)
 800912a:	fba3 2302 	umull	r2, r3, r3, r2
 800912e:	095b      	lsrs	r3, r3, #5
 8009130:	011c      	lsls	r4, r3, #4
 8009132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009136:	2200      	movs	r2, #0
 8009138:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800913c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009140:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009144:	4642      	mov	r2, r8
 8009146:	464b      	mov	r3, r9
 8009148:	1891      	adds	r1, r2, r2
 800914a:	61b9      	str	r1, [r7, #24]
 800914c:	415b      	adcs	r3, r3
 800914e:	61fb      	str	r3, [r7, #28]
 8009150:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009154:	4641      	mov	r1, r8
 8009156:	1851      	adds	r1, r2, r1
 8009158:	6139      	str	r1, [r7, #16]
 800915a:	4649      	mov	r1, r9
 800915c:	414b      	adcs	r3, r1
 800915e:	617b      	str	r3, [r7, #20]
 8009160:	f04f 0200 	mov.w	r2, #0
 8009164:	f04f 0300 	mov.w	r3, #0
 8009168:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800916c:	4659      	mov	r1, fp
 800916e:	00cb      	lsls	r3, r1, #3
 8009170:	4651      	mov	r1, sl
 8009172:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009176:	4651      	mov	r1, sl
 8009178:	00ca      	lsls	r2, r1, #3
 800917a:	4610      	mov	r0, r2
 800917c:	4619      	mov	r1, r3
 800917e:	4603      	mov	r3, r0
 8009180:	4642      	mov	r2, r8
 8009182:	189b      	adds	r3, r3, r2
 8009184:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009188:	464b      	mov	r3, r9
 800918a:	460a      	mov	r2, r1
 800918c:	eb42 0303 	adc.w	r3, r2, r3
 8009190:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800919e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80091a0:	f04f 0200 	mov.w	r2, #0
 80091a4:	f04f 0300 	mov.w	r3, #0
 80091a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80091ac:	4649      	mov	r1, r9
 80091ae:	008b      	lsls	r3, r1, #2
 80091b0:	4641      	mov	r1, r8
 80091b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091b6:	4641      	mov	r1, r8
 80091b8:	008a      	lsls	r2, r1, #2
 80091ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80091be:	f7f7 fd53 	bl	8000c68 <__aeabi_uldivmod>
 80091c2:	4602      	mov	r2, r0
 80091c4:	460b      	mov	r3, r1
 80091c6:	4611      	mov	r1, r2
 80091c8:	4b38      	ldr	r3, [pc, #224]	@ (80092ac <UART_SetConfig+0x4e4>)
 80091ca:	fba3 2301 	umull	r2, r3, r3, r1
 80091ce:	095b      	lsrs	r3, r3, #5
 80091d0:	2264      	movs	r2, #100	@ 0x64
 80091d2:	fb02 f303 	mul.w	r3, r2, r3
 80091d6:	1acb      	subs	r3, r1, r3
 80091d8:	011b      	lsls	r3, r3, #4
 80091da:	3332      	adds	r3, #50	@ 0x32
 80091dc:	4a33      	ldr	r2, [pc, #204]	@ (80092ac <UART_SetConfig+0x4e4>)
 80091de:	fba2 2303 	umull	r2, r3, r2, r3
 80091e2:	095b      	lsrs	r3, r3, #5
 80091e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80091e8:	441c      	add	r4, r3
 80091ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80091ee:	2200      	movs	r2, #0
 80091f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80091f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80091f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80091f8:	4642      	mov	r2, r8
 80091fa:	464b      	mov	r3, r9
 80091fc:	1891      	adds	r1, r2, r2
 80091fe:	60b9      	str	r1, [r7, #8]
 8009200:	415b      	adcs	r3, r3
 8009202:	60fb      	str	r3, [r7, #12]
 8009204:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009208:	4641      	mov	r1, r8
 800920a:	1851      	adds	r1, r2, r1
 800920c:	6039      	str	r1, [r7, #0]
 800920e:	4649      	mov	r1, r9
 8009210:	414b      	adcs	r3, r1
 8009212:	607b      	str	r3, [r7, #4]
 8009214:	f04f 0200 	mov.w	r2, #0
 8009218:	f04f 0300 	mov.w	r3, #0
 800921c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009220:	4659      	mov	r1, fp
 8009222:	00cb      	lsls	r3, r1, #3
 8009224:	4651      	mov	r1, sl
 8009226:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800922a:	4651      	mov	r1, sl
 800922c:	00ca      	lsls	r2, r1, #3
 800922e:	4610      	mov	r0, r2
 8009230:	4619      	mov	r1, r3
 8009232:	4603      	mov	r3, r0
 8009234:	4642      	mov	r2, r8
 8009236:	189b      	adds	r3, r3, r2
 8009238:	66bb      	str	r3, [r7, #104]	@ 0x68
 800923a:	464b      	mov	r3, r9
 800923c:	460a      	mov	r2, r1
 800923e:	eb42 0303 	adc.w	r3, r2, r3
 8009242:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	663b      	str	r3, [r7, #96]	@ 0x60
 800924e:	667a      	str	r2, [r7, #100]	@ 0x64
 8009250:	f04f 0200 	mov.w	r2, #0
 8009254:	f04f 0300 	mov.w	r3, #0
 8009258:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800925c:	4649      	mov	r1, r9
 800925e:	008b      	lsls	r3, r1, #2
 8009260:	4641      	mov	r1, r8
 8009262:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009266:	4641      	mov	r1, r8
 8009268:	008a      	lsls	r2, r1, #2
 800926a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800926e:	f7f7 fcfb 	bl	8000c68 <__aeabi_uldivmod>
 8009272:	4602      	mov	r2, r0
 8009274:	460b      	mov	r3, r1
 8009276:	4b0d      	ldr	r3, [pc, #52]	@ (80092ac <UART_SetConfig+0x4e4>)
 8009278:	fba3 1302 	umull	r1, r3, r3, r2
 800927c:	095b      	lsrs	r3, r3, #5
 800927e:	2164      	movs	r1, #100	@ 0x64
 8009280:	fb01 f303 	mul.w	r3, r1, r3
 8009284:	1ad3      	subs	r3, r2, r3
 8009286:	011b      	lsls	r3, r3, #4
 8009288:	3332      	adds	r3, #50	@ 0x32
 800928a:	4a08      	ldr	r2, [pc, #32]	@ (80092ac <UART_SetConfig+0x4e4>)
 800928c:	fba2 2303 	umull	r2, r3, r2, r3
 8009290:	095b      	lsrs	r3, r3, #5
 8009292:	f003 020f 	and.w	r2, r3, #15
 8009296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4422      	add	r2, r4
 800929e:	609a      	str	r2, [r3, #8]
}
 80092a0:	bf00      	nop
 80092a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80092a6:	46bd      	mov	sp, r7
 80092a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092ac:	51eb851f 	.word	0x51eb851f

080092b0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d123      	bne.n	800930a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80092ca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80092ce:	683a      	ldr	r2, [r7, #0]
 80092d0:	6851      	ldr	r1, [r2, #4]
 80092d2:	683a      	ldr	r2, [r7, #0]
 80092d4:	6892      	ldr	r2, [r2, #8]
 80092d6:	4311      	orrs	r1, r2
 80092d8:	683a      	ldr	r2, [r7, #0]
 80092da:	68d2      	ldr	r2, [r2, #12]
 80092dc:	4311      	orrs	r1, r2
 80092de:	683a      	ldr	r2, [r7, #0]
 80092e0:	6912      	ldr	r2, [r2, #16]
 80092e2:	4311      	orrs	r1, r2
 80092e4:	683a      	ldr	r2, [r7, #0]
 80092e6:	6952      	ldr	r2, [r2, #20]
 80092e8:	4311      	orrs	r1, r2
 80092ea:	683a      	ldr	r2, [r7, #0]
 80092ec:	6992      	ldr	r2, [r2, #24]
 80092ee:	4311      	orrs	r1, r2
 80092f0:	683a      	ldr	r2, [r7, #0]
 80092f2:	69d2      	ldr	r2, [r2, #28]
 80092f4:	4311      	orrs	r1, r2
 80092f6:	683a      	ldr	r2, [r7, #0]
 80092f8:	6a12      	ldr	r2, [r2, #32]
 80092fa:	4311      	orrs	r1, r2
 80092fc:	683a      	ldr	r2, [r7, #0]
 80092fe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009300:	430a      	orrs	r2, r1
 8009302:	431a      	orrs	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	601a      	str	r2, [r3, #0]
 8009308:	e028      	b.n	800935c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	69d9      	ldr	r1, [r3, #28]
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	6a1b      	ldr	r3, [r3, #32]
 800931a:	4319      	orrs	r1, r3
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009320:	430b      	orrs	r3, r1
 8009322:	431a      	orrs	r2, r3
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8009330:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009334:	683a      	ldr	r2, [r7, #0]
 8009336:	6851      	ldr	r1, [r2, #4]
 8009338:	683a      	ldr	r2, [r7, #0]
 800933a:	6892      	ldr	r2, [r2, #8]
 800933c:	4311      	orrs	r1, r2
 800933e:	683a      	ldr	r2, [r7, #0]
 8009340:	68d2      	ldr	r2, [r2, #12]
 8009342:	4311      	orrs	r1, r2
 8009344:	683a      	ldr	r2, [r7, #0]
 8009346:	6912      	ldr	r2, [r2, #16]
 8009348:	4311      	orrs	r1, r2
 800934a:	683a      	ldr	r2, [r7, #0]
 800934c:	6952      	ldr	r2, [r2, #20]
 800934e:	4311      	orrs	r1, r2
 8009350:	683a      	ldr	r2, [r7, #0]
 8009352:	6992      	ldr	r2, [r2, #24]
 8009354:	430a      	orrs	r2, r1
 8009356:	431a      	orrs	r2, r3
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800935c:	2300      	movs	r3, #0
}
 800935e:	4618      	mov	r0, r3
 8009360:	370c      	adds	r7, #12
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr

0800936a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800936a:	b480      	push	{r7}
 800936c:	b085      	sub	sp, #20
 800936e:	af00      	add	r7, sp, #0
 8009370:	60f8      	str	r0, [r7, #12]
 8009372:	60b9      	str	r1, [r7, #8]
 8009374:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d128      	bne.n	80093ce <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	1e59      	subs	r1, r3, #1
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	3b01      	subs	r3, #1
 8009390:	011b      	lsls	r3, r3, #4
 8009392:	4319      	orrs	r1, r3
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	3b01      	subs	r3, #1
 800939a:	021b      	lsls	r3, r3, #8
 800939c:	4319      	orrs	r1, r3
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	3b01      	subs	r3, #1
 80093a4:	031b      	lsls	r3, r3, #12
 80093a6:	4319      	orrs	r1, r3
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	691b      	ldr	r3, [r3, #16]
 80093ac:	3b01      	subs	r3, #1
 80093ae:	041b      	lsls	r3, r3, #16
 80093b0:	4319      	orrs	r1, r3
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	695b      	ldr	r3, [r3, #20]
 80093b6:	3b01      	subs	r3, #1
 80093b8:	051b      	lsls	r3, r3, #20
 80093ba:	4319      	orrs	r1, r3
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	699b      	ldr	r3, [r3, #24]
 80093c0:	3b01      	subs	r3, #1
 80093c2:	061b      	lsls	r3, r3, #24
 80093c4:	430b      	orrs	r3, r1
 80093c6:	431a      	orrs	r2, r3
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	609a      	str	r2, [r3, #8]
 80093cc:	e02f      	b.n	800942e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80093d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80093da:	68ba      	ldr	r2, [r7, #8]
 80093dc:	68d2      	ldr	r2, [r2, #12]
 80093de:	3a01      	subs	r2, #1
 80093e0:	0311      	lsls	r1, r2, #12
 80093e2:	68ba      	ldr	r2, [r7, #8]
 80093e4:	6952      	ldr	r2, [r2, #20]
 80093e6:	3a01      	subs	r2, #1
 80093e8:	0512      	lsls	r2, r2, #20
 80093ea:	430a      	orrs	r2, r1
 80093ec:	431a      	orrs	r2, r3
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	68db      	ldr	r3, [r3, #12]
 80093f6:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	1e59      	subs	r1, r3, #1
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	3b01      	subs	r3, #1
 8009406:	011b      	lsls	r3, r3, #4
 8009408:	4319      	orrs	r1, r3
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	3b01      	subs	r3, #1
 8009410:	021b      	lsls	r3, r3, #8
 8009412:	4319      	orrs	r1, r3
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	691b      	ldr	r3, [r3, #16]
 8009418:	3b01      	subs	r3, #1
 800941a:	041b      	lsls	r3, r3, #16
 800941c:	4319      	orrs	r1, r3
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	699b      	ldr	r3, [r3, #24]
 8009422:	3b01      	subs	r3, #1
 8009424:	061b      	lsls	r3, r3, #24
 8009426:	430b      	orrs	r3, r1
 8009428:	431a      	orrs	r2, r3
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800942e:	2300      	movs	r3, #0
}
 8009430:	4618      	mov	r0, r3
 8009432:	3714      	adds	r7, #20
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	f043 0201 	orr.w	r2, r3, #1
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009450:	2300      	movs	r3, #0
}
 8009452:	4618      	mov	r0, r3
 8009454:	370c      	adds	r7, #12
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr

0800945e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800945e:	b480      	push	{r7}
 8009460:	b083      	sub	sp, #12
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	f023 0201 	bic.w	r2, r3, #1
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009472:	2300      	movs	r3, #0
}
 8009474:	4618      	mov	r0, r3
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009480:	b480      	push	{r7}
 8009482:	b085      	sub	sp, #20
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800948a:	2300      	movs	r3, #0
 800948c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	3301      	adds	r3, #1
 8009492:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800949a:	d901      	bls.n	80094a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800949c:	2303      	movs	r3, #3
 800949e:	e01b      	b.n	80094d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	691b      	ldr	r3, [r3, #16]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	daf2      	bge.n	800948e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80094a8:	2300      	movs	r3, #0
 80094aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	019b      	lsls	r3, r3, #6
 80094b0:	f043 0220 	orr.w	r2, r3, #32
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	3301      	adds	r3, #1
 80094bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80094c4:	d901      	bls.n	80094ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80094c6:	2303      	movs	r3, #3
 80094c8:	e006      	b.n	80094d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	f003 0320 	and.w	r3, r3, #32
 80094d2:	2b20      	cmp	r3, #32
 80094d4:	d0f0      	beq.n	80094b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3714      	adds	r7, #20
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80094ec:	2300      	movs	r3, #0
 80094ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	3301      	adds	r3, #1
 80094f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80094fc:	d901      	bls.n	8009502 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80094fe:	2303      	movs	r3, #3
 8009500:	e018      	b.n	8009534 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	691b      	ldr	r3, [r3, #16]
 8009506:	2b00      	cmp	r3, #0
 8009508:	daf2      	bge.n	80094f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800950a:	2300      	movs	r3, #0
 800950c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2210      	movs	r2, #16
 8009512:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	3301      	adds	r3, #1
 8009518:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009520:	d901      	bls.n	8009526 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009522:	2303      	movs	r3, #3
 8009524:	e006      	b.n	8009534 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	f003 0310 	and.w	r3, r3, #16
 800952e:	2b10      	cmp	r3, #16
 8009530:	d0f0      	beq.n	8009514 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3714      	adds	r7, #20
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009540:	b480      	push	{r7}
 8009542:	b08b      	sub	sp, #44	@ 0x2c
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	4613      	mov	r3, r2
 800954c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009556:	88fb      	ldrh	r3, [r7, #6]
 8009558:	089b      	lsrs	r3, r3, #2
 800955a:	b29b      	uxth	r3, r3
 800955c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800955e:	88fb      	ldrh	r3, [r7, #6]
 8009560:	f003 0303 	and.w	r3, r3, #3
 8009564:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009566:	2300      	movs	r3, #0
 8009568:	623b      	str	r3, [r7, #32]
 800956a:	e014      	b.n	8009596 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009576:	601a      	str	r2, [r3, #0]
    pDest++;
 8009578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800957a:	3301      	adds	r3, #1
 800957c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800957e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009580:	3301      	adds	r3, #1
 8009582:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009586:	3301      	adds	r3, #1
 8009588:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800958a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800958c:	3301      	adds	r3, #1
 800958e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009590:	6a3b      	ldr	r3, [r7, #32]
 8009592:	3301      	adds	r3, #1
 8009594:	623b      	str	r3, [r7, #32]
 8009596:	6a3a      	ldr	r2, [r7, #32]
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	429a      	cmp	r2, r3
 800959c:	d3e6      	bcc.n	800956c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800959e:	8bfb      	ldrh	r3, [r7, #30]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d01e      	beq.n	80095e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80095a4:	2300      	movs	r3, #0
 80095a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80095a8:	69bb      	ldr	r3, [r7, #24]
 80095aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80095ae:	461a      	mov	r2, r3
 80095b0:	f107 0310 	add.w	r3, r7, #16
 80095b4:	6812      	ldr	r2, [r2, #0]
 80095b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	6a3b      	ldr	r3, [r7, #32]
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	00db      	lsls	r3, r3, #3
 80095c0:	fa22 f303 	lsr.w	r3, r2, r3
 80095c4:	b2da      	uxtb	r2, r3
 80095c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c8:	701a      	strb	r2, [r3, #0]
      i++;
 80095ca:	6a3b      	ldr	r3, [r7, #32]
 80095cc:	3301      	adds	r3, #1
 80095ce:	623b      	str	r3, [r7, #32]
      pDest++;
 80095d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d2:	3301      	adds	r3, #1
 80095d4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80095d6:	8bfb      	ldrh	r3, [r7, #30]
 80095d8:	3b01      	subs	r3, #1
 80095da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80095dc:	8bfb      	ldrh	r3, [r7, #30]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d1ea      	bne.n	80095b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80095e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	372c      	adds	r7, #44	@ 0x2c
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b085      	sub	sp, #20
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	695b      	ldr	r3, [r3, #20]
 80095fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	699b      	ldr	r3, [r3, #24]
 8009602:	68fa      	ldr	r2, [r7, #12]
 8009604:	4013      	ands	r3, r2
 8009606:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009608:	68fb      	ldr	r3, [r7, #12]
}
 800960a:	4618      	mov	r0, r3
 800960c:	3714      	adds	r7, #20
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr

08009616 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8009616:	b480      	push	{r7}
 8009618:	b085      	sub	sp, #20
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
 800961e:	460b      	mov	r3, r1
 8009620:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8009626:	78fb      	ldrb	r3, [r7, #3]
 8009628:	015a      	lsls	r2, r3, #5
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	4413      	add	r3, r2
 800962e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8009636:	78fb      	ldrb	r3, [r7, #3]
 8009638:	015a      	lsls	r2, r3, #5
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	4413      	add	r3, r2
 800963e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	68ba      	ldr	r2, [r7, #8]
 8009646:	4013      	ands	r3, r2
 8009648:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800964a:	68bb      	ldr	r3, [r7, #8]
}
 800964c:	4618      	mov	r0, r3
 800964e:	3714      	adds	r7, #20
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	695b      	ldr	r3, [r3, #20]
 8009664:	f003 0301 	and.w	r3, r3, #1
}
 8009668:	4618      	mov	r0, r3
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009674:	b480      	push	{r7}
 8009676:	b085      	sub	sp, #20
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	460b      	mov	r3, r1
 800967e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	68fa      	ldr	r2, [r7, #12]
 800968e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009692:	f023 0303 	bic.w	r3, r3, #3
 8009696:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	78fb      	ldrb	r3, [r7, #3]
 80096a2:	f003 0303 	and.w	r3, r3, #3
 80096a6:	68f9      	ldr	r1, [r7, #12]
 80096a8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80096ac:	4313      	orrs	r3, r2
 80096ae:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80096b0:	78fb      	ldrb	r3, [r7, #3]
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d107      	bne.n	80096c6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80096bc:	461a      	mov	r2, r3
 80096be:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80096c2:	6053      	str	r3, [r2, #4]
 80096c4:	e00c      	b.n	80096e0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80096c6:	78fb      	ldrb	r3, [r7, #3]
 80096c8:	2b02      	cmp	r3, #2
 80096ca:	d107      	bne.n	80096dc <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80096d2:	461a      	mov	r2, r3
 80096d4:	f241 7370 	movw	r3, #6000	@ 0x1770
 80096d8:	6053      	str	r3, [r2, #4]
 80096da:	e001      	b.n	80096e0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	e000      	b.n	80096e2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80096e0:	2300      	movs	r3, #0
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3714      	adds	r7, #20
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr

080096ee <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80096ee:	b480      	push	{r7}
 80096f0:	b085      	sub	sp, #20
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009700:	695b      	ldr	r3, [r3, #20]
 8009702:	b29b      	uxth	r3, r3
}
 8009704:	4618      	mov	r0, r3
 8009706:	3714      	adds	r7, #20
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009710:	b480      	push	{r7}
 8009712:	b089      	sub	sp, #36	@ 0x24
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	460b      	mov	r3, r1
 800971a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8009720:	78fb      	ldrb	r3, [r7, #3]
 8009722:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009724:	2300      	movs	r3, #0
 8009726:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009728:	69bb      	ldr	r3, [r7, #24]
 800972a:	015a      	lsls	r2, r3, #5
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	4413      	add	r3, r2
 8009730:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	0c9b      	lsrs	r3, r3, #18
 8009738:	f003 0303 	and.w	r3, r3, #3
 800973c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800973e:	69bb      	ldr	r3, [r7, #24]
 8009740:	015a      	lsls	r2, r3, #5
 8009742:	69fb      	ldr	r3, [r7, #28]
 8009744:	4413      	add	r3, r2
 8009746:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	0fdb      	lsrs	r3, r3, #31
 800974e:	f003 0301 	and.w	r3, r3, #1
 8009752:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	015a      	lsls	r2, r3, #5
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	4413      	add	r3, r2
 800975c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	0fdb      	lsrs	r3, r3, #31
 8009764:	f003 0301 	and.w	r3, r3, #1
 8009768:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	f003 0320 	and.w	r3, r3, #32
 8009772:	2b20      	cmp	r3, #32
 8009774:	d10d      	bne.n	8009792 <USB_HC_Halt+0x82>
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d10a      	bne.n	8009792 <USB_HC_Halt+0x82>
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d005      	beq.n	800978e <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	2b01      	cmp	r3, #1
 8009786:	d002      	beq.n	800978e <USB_HC_Halt+0x7e>
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	2b03      	cmp	r3, #3
 800978c:	d101      	bne.n	8009792 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800978e:	2300      	movs	r3, #0
 8009790:	e0d8      	b.n	8009944 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d002      	beq.n	800979e <USB_HC_Halt+0x8e>
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	2b02      	cmp	r3, #2
 800979c:	d173      	bne.n	8009886 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	015a      	lsls	r2, r3, #5
 80097a2:	69fb      	ldr	r3, [r7, #28]
 80097a4:	4413      	add	r3, r2
 80097a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	69ba      	ldr	r2, [r7, #24]
 80097ae:	0151      	lsls	r1, r2, #5
 80097b0:	69fa      	ldr	r2, [r7, #28]
 80097b2:	440a      	add	r2, r1
 80097b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80097bc:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	f003 0320 	and.w	r3, r3, #32
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d14a      	bne.n	8009860 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ce:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d133      	bne.n	800983e <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80097d6:	69bb      	ldr	r3, [r7, #24]
 80097d8:	015a      	lsls	r2, r3, #5
 80097da:	69fb      	ldr	r3, [r7, #28]
 80097dc:	4413      	add	r3, r2
 80097de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	69ba      	ldr	r2, [r7, #24]
 80097e6:	0151      	lsls	r1, r2, #5
 80097e8:	69fa      	ldr	r2, [r7, #28]
 80097ea:	440a      	add	r2, r1
 80097ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80097f4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	015a      	lsls	r2, r3, #5
 80097fa:	69fb      	ldr	r3, [r7, #28]
 80097fc:	4413      	add	r3, r2
 80097fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	69ba      	ldr	r2, [r7, #24]
 8009806:	0151      	lsls	r1, r2, #5
 8009808:	69fa      	ldr	r2, [r7, #28]
 800980a:	440a      	add	r2, r1
 800980c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009810:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009814:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	3301      	adds	r3, #1
 800981a:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009822:	d82e      	bhi.n	8009882 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	015a      	lsls	r2, r3, #5
 8009828:	69fb      	ldr	r3, [r7, #28]
 800982a:	4413      	add	r3, r2
 800982c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009836:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800983a:	d0ec      	beq.n	8009816 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800983c:	e081      	b.n	8009942 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	015a      	lsls	r2, r3, #5
 8009842:	69fb      	ldr	r3, [r7, #28]
 8009844:	4413      	add	r3, r2
 8009846:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	69ba      	ldr	r2, [r7, #24]
 800984e:	0151      	lsls	r1, r2, #5
 8009850:	69fa      	ldr	r2, [r7, #28]
 8009852:	440a      	add	r2, r1
 8009854:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009858:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800985c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800985e:	e070      	b.n	8009942 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	015a      	lsls	r2, r3, #5
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	4413      	add	r3, r2
 8009868:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	69ba      	ldr	r2, [r7, #24]
 8009870:	0151      	lsls	r1, r2, #5
 8009872:	69fa      	ldr	r2, [r7, #28]
 8009874:	440a      	add	r2, r1
 8009876:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800987a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800987e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009880:	e05f      	b.n	8009942 <USB_HC_Halt+0x232>
            break;
 8009882:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009884:	e05d      	b.n	8009942 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009886:	69bb      	ldr	r3, [r7, #24]
 8009888:	015a      	lsls	r2, r3, #5
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	4413      	add	r3, r2
 800988e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	69ba      	ldr	r2, [r7, #24]
 8009896:	0151      	lsls	r1, r2, #5
 8009898:	69fa      	ldr	r2, [r7, #28]
 800989a:	440a      	add	r2, r1
 800989c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80098a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80098a4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80098a6:	69fb      	ldr	r3, [r7, #28]
 80098a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80098ac:	691b      	ldr	r3, [r3, #16]
 80098ae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d133      	bne.n	800991e <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	015a      	lsls	r2, r3, #5
 80098ba:	69fb      	ldr	r3, [r7, #28]
 80098bc:	4413      	add	r3, r2
 80098be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	69ba      	ldr	r2, [r7, #24]
 80098c6:	0151      	lsls	r1, r2, #5
 80098c8:	69fa      	ldr	r2, [r7, #28]
 80098ca:	440a      	add	r2, r1
 80098cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80098d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80098d4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80098d6:	69bb      	ldr	r3, [r7, #24]
 80098d8:	015a      	lsls	r2, r3, #5
 80098da:	69fb      	ldr	r3, [r7, #28]
 80098dc:	4413      	add	r3, r2
 80098de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	69ba      	ldr	r2, [r7, #24]
 80098e6:	0151      	lsls	r1, r2, #5
 80098e8:	69fa      	ldr	r2, [r7, #28]
 80098ea:	440a      	add	r2, r1
 80098ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80098f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80098f4:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	3301      	adds	r3, #1
 80098fa:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009902:	d81d      	bhi.n	8009940 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009904:	69bb      	ldr	r3, [r7, #24]
 8009906:	015a      	lsls	r2, r3, #5
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	4413      	add	r3, r2
 800990c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009916:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800991a:	d0ec      	beq.n	80098f6 <USB_HC_Halt+0x1e6>
 800991c:	e011      	b.n	8009942 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800991e:	69bb      	ldr	r3, [r7, #24]
 8009920:	015a      	lsls	r2, r3, #5
 8009922:	69fb      	ldr	r3, [r7, #28]
 8009924:	4413      	add	r3, r2
 8009926:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	69ba      	ldr	r2, [r7, #24]
 800992e:	0151      	lsls	r1, r2, #5
 8009930:	69fa      	ldr	r2, [r7, #28]
 8009932:	440a      	add	r2, r1
 8009934:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009938:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800993c:	6013      	str	r3, [r2, #0]
 800993e:	e000      	b.n	8009942 <USB_HC_Halt+0x232>
          break;
 8009940:	bf00      	nop
    }
  }

  return HAL_OK;
 8009942:	2300      	movs	r3, #0
}
 8009944:	4618      	mov	r0, r3
 8009946:	3724      	adds	r7, #36	@ 0x24
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr

08009950 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b088      	sub	sp, #32
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009958:	2300      	movs	r3, #0
 800995a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009960:	2300      	movs	r3, #0
 8009962:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f7ff fd7a 	bl	800945e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800996a:	2110      	movs	r1, #16
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f7ff fd87 	bl	8009480 <USB_FlushTxFifo>
 8009972:	4603      	mov	r3, r0
 8009974:	2b00      	cmp	r3, #0
 8009976:	d001      	beq.n	800997c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009978:	2301      	movs	r3, #1
 800997a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f7ff fdb1 	bl	80094e4 <USB_FlushRxFifo>
 8009982:	4603      	mov	r3, r0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d001      	beq.n	800998c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800998c:	2300      	movs	r3, #0
 800998e:	61bb      	str	r3, [r7, #24]
 8009990:	e01f      	b.n	80099d2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009992:	69bb      	ldr	r3, [r7, #24]
 8009994:	015a      	lsls	r2, r3, #5
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	4413      	add	r3, r2
 800999a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80099a8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80099b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80099b8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	015a      	lsls	r2, r3, #5
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	4413      	add	r3, r2
 80099c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80099c6:	461a      	mov	r2, r3
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	3301      	adds	r3, #1
 80099d0:	61bb      	str	r3, [r7, #24]
 80099d2:	69bb      	ldr	r3, [r7, #24]
 80099d4:	2b0f      	cmp	r3, #15
 80099d6:	d9dc      	bls.n	8009992 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80099d8:	2300      	movs	r3, #0
 80099da:	61bb      	str	r3, [r7, #24]
 80099dc:	e034      	b.n	8009a48 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	015a      	lsls	r2, r3, #5
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	4413      	add	r3, r2
 80099e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80099f4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80099fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009a04:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009a06:	69bb      	ldr	r3, [r7, #24]
 8009a08:	015a      	lsls	r2, r3, #5
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a12:	461a      	mov	r2, r3
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009a24:	d80c      	bhi.n	8009a40 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	015a      	lsls	r2, r3, #5
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a3c:	d0ec      	beq.n	8009a18 <USB_StopHost+0xc8>
 8009a3e:	e000      	b.n	8009a42 <USB_StopHost+0xf2>
        break;
 8009a40:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009a42:	69bb      	ldr	r3, [r7, #24]
 8009a44:	3301      	adds	r3, #1
 8009a46:	61bb      	str	r3, [r7, #24]
 8009a48:	69bb      	ldr	r3, [r7, #24]
 8009a4a:	2b0f      	cmp	r3, #15
 8009a4c:	d9c7      	bls.n	80099de <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009a54:	461a      	mov	r2, r3
 8009a56:	f04f 33ff 	mov.w	r3, #4294967295
 8009a5a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8009a62:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f7ff fce9 	bl	800943c <USB_EnableGlobalInt>

  return ret;
 8009a6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3720      	adds	r7, #32
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009a82:	1c5a      	adds	r2, r3, #1
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 f804 	bl	8009a98 <USBH_HandleSof>
}
 8009a90:	bf00      	nop
 8009a92:	3708      	adds	r7, #8
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	2b0b      	cmp	r3, #11
 8009aa8:	d10a      	bne.n	8009ac0 <USBH_HandleSof+0x28>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d005      	beq.n	8009ac0 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009aba:	699b      	ldr	r3, [r3, #24]
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	4798      	blx	r3
  }
}
 8009ac0:	bf00      	nop
 8009ac2:	3708      	adds	r7, #8
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2201      	movs	r2, #1
 8009adc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009aec:	2200      	movs	r2, #0
 8009aee:	4619      	mov	r1, r3
 8009af0:	f000 f8ae 	bl	8009c50 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009af4:	bf00      	nop
}
 8009af6:	3708      	adds	r7, #8
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b083      	sub	sp, #12
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8009b0c:	bf00      	nop
}
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2200      	movs	r2, #0
 8009b34:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	4619      	mov	r1, r3
 8009b50:	f000 f87e 	bl	8009c50 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3708      	adds	r7, #8
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}

08009b5e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b082      	sub	sp, #8
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2200      	movs	r2, #0
 8009b72:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f001 f906 	bl	800ad90 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	791b      	ldrb	r3, [r3, #4]
 8009b88:	4619      	mov	r1, r3
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 f830 	bl	8009bf0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	795b      	ldrb	r3, [r3, #5]
 8009b94:	4619      	mov	r1, r3
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 f82a 	bl	8009bf0 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	f000 f84c 	bl	8009c50 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009bb8:	2300      	movs	r3, #0
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3708      	adds	r7, #8
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b082      	sub	sp, #8
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009bde:	2200      	movs	r2, #0
 8009be0:	4619      	mov	r1, r3
 8009be2:	f000 f835 	bl	8009c50 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8009be6:	2300      	movs	r3, #0
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3708      	adds	r7, #8
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009bfc:	78fb      	ldrb	r3, [r7, #3]
 8009bfe:	2b0f      	cmp	r3, #15
 8009c00:	d80d      	bhi.n	8009c1e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009c02:	78fb      	ldrb	r3, [r7, #3]
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	33e0      	adds	r3, #224	@ 0xe0
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	4413      	add	r3, r2
 8009c0c:	685a      	ldr	r2, [r3, #4]
 8009c0e:	78fb      	ldrb	r3, [r7, #3]
 8009c10:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009c14:	6879      	ldr	r1, [r7, #4]
 8009c16:	33e0      	adds	r3, #224	@ 0xe0
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	440b      	add	r3, r1
 8009c1c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009c1e:	2300      	movs	r3, #0
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	370c      	adds	r7, #12
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr

08009c2c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c32:	f3ef 8305 	mrs	r3, IPSR
 8009c36:	607b      	str	r3, [r7, #4]
  return(result);
 8009c38:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	bf14      	ite	ne
 8009c3e:	2301      	movne	r3, #1
 8009c40:	2300      	moveq	r3, #0
 8009c42:	b2db      	uxtb	r3, r3
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	370c      	adds	r7, #12
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr

08009c50 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b086      	sub	sp, #24
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	60b9      	str	r1, [r7, #8]
 8009c5a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d101      	bne.n	8009c6e <osMessagePut+0x1e>
    ticks = 1;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009c6e:	f7ff ffdd 	bl	8009c2c <inHandlerMode>
 8009c72:	4603      	mov	r3, r0
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d018      	beq.n	8009caa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009c78:	f107 0210 	add.w	r2, r7, #16
 8009c7c:	f107 0108 	add.w	r1, r7, #8
 8009c80:	2300      	movs	r3, #0
 8009c82:	68f8      	ldr	r0, [r7, #12]
 8009c84:	f000 f9ae 	bl	8009fe4 <xQueueGenericSendFromISR>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d001      	beq.n	8009c92 <osMessagePut+0x42>
      return osErrorOS;
 8009c8e:	23ff      	movs	r3, #255	@ 0xff
 8009c90:	e018      	b.n	8009cc4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d014      	beq.n	8009cc2 <osMessagePut+0x72>
 8009c98:	4b0c      	ldr	r3, [pc, #48]	@ (8009ccc <osMessagePut+0x7c>)
 8009c9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c9e:	601a      	str	r2, [r3, #0]
 8009ca0:	f3bf 8f4f 	dsb	sy
 8009ca4:	f3bf 8f6f 	isb	sy
 8009ca8:	e00b      	b.n	8009cc2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009caa:	f107 0108 	add.w	r1, r7, #8
 8009cae:	2300      	movs	r3, #0
 8009cb0:	697a      	ldr	r2, [r7, #20]
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	f000 f894 	bl	8009de0 <xQueueGenericSend>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d001      	beq.n	8009cc2 <osMessagePut+0x72>
      return osErrorOS;
 8009cbe:	23ff      	movs	r3, #255	@ 0xff
 8009cc0:	e000      	b.n	8009cc4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009cc2:	2300      	movs	r3, #0
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3718      	adds	r7, #24
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}
 8009ccc:	e000ed04 	.word	0xe000ed04

08009cd0 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b085      	sub	sp, #20
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	68fa      	ldr	r2, [r7, #12]
 8009ce4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	689a      	ldr	r2, [r3, #8]
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	689b      	ldr	r3, [r3, #8]
 8009cf2:	683a      	ldr	r2, [r7, #0]
 8009cf4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	683a      	ldr	r2, [r7, #0]
 8009cfa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	1c5a      	adds	r2, r3, #1
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	601a      	str	r2, [r3, #0]
}
 8009d0c:	bf00      	nop
 8009d0e:	3714      	adds	r7, #20
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr

08009d18 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b085      	sub	sp, #20
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d2e:	d103      	bne.n	8009d38 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	691b      	ldr	r3, [r3, #16]
 8009d34:	60fb      	str	r3, [r7, #12]
 8009d36:	e00c      	b.n	8009d52 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	3308      	adds	r3, #8
 8009d3c:	60fb      	str	r3, [r7, #12]
 8009d3e:	e002      	b.n	8009d46 <vListInsert+0x2e>
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	60fb      	str	r3, [r7, #12]
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	68ba      	ldr	r2, [r7, #8]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d2f6      	bcs.n	8009d40 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	685a      	ldr	r2, [r3, #4]
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	683a      	ldr	r2, [r7, #0]
 8009d60:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	68fa      	ldr	r2, [r7, #12]
 8009d66:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	683a      	ldr	r2, [r7, #0]
 8009d6c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	1c5a      	adds	r2, r3, #1
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	601a      	str	r2, [r3, #0]
}
 8009d7e:	bf00      	nop
 8009d80:	3714      	adds	r7, #20
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr

08009d8a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009d8a:	b480      	push	{r7}
 8009d8c:	b085      	sub	sp, #20
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	691b      	ldr	r3, [r3, #16]
 8009d96:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	6892      	ldr	r2, [r2, #8]
 8009da0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	689b      	ldr	r3, [r3, #8]
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	6852      	ldr	r2, [r2, #4]
 8009daa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d103      	bne.n	8009dbe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	689a      	ldr	r2, [r3, #8]
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	1e5a      	subs	r2, r3, #1
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3714      	adds	r7, #20
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr
	...

08009de0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b08e      	sub	sp, #56	@ 0x38
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	60b9      	str	r1, [r7, #8]
 8009dea:	607a      	str	r2, [r7, #4]
 8009dec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009dee:	2300      	movs	r3, #0
 8009df0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d10b      	bne.n	8009e14 <xQueueGenericSend+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e00:	f383 8811 	msr	BASEPRI, r3
 8009e04:	f3bf 8f6f 	isb	sy
 8009e08:	f3bf 8f4f 	dsb	sy
 8009e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009e0e:	bf00      	nop
 8009e10:	bf00      	nop
 8009e12:	e7fd      	b.n	8009e10 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d103      	bne.n	8009e22 <xQueueGenericSend+0x42>
 8009e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d101      	bne.n	8009e26 <xQueueGenericSend+0x46>
 8009e22:	2301      	movs	r3, #1
 8009e24:	e000      	b.n	8009e28 <xQueueGenericSend+0x48>
 8009e26:	2300      	movs	r3, #0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d10b      	bne.n	8009e44 <xQueueGenericSend+0x64>
	__asm volatile
 8009e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e30:	f383 8811 	msr	BASEPRI, r3
 8009e34:	f3bf 8f6f 	isb	sy
 8009e38:	f3bf 8f4f 	dsb	sy
 8009e3c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009e3e:	bf00      	nop
 8009e40:	bf00      	nop
 8009e42:	e7fd      	b.n	8009e40 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	2b02      	cmp	r3, #2
 8009e48:	d103      	bne.n	8009e52 <xQueueGenericSend+0x72>
 8009e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d101      	bne.n	8009e56 <xQueueGenericSend+0x76>
 8009e52:	2301      	movs	r3, #1
 8009e54:	e000      	b.n	8009e58 <xQueueGenericSend+0x78>
 8009e56:	2300      	movs	r3, #0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d10b      	bne.n	8009e74 <xQueueGenericSend+0x94>
	__asm volatile
 8009e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e60:	f383 8811 	msr	BASEPRI, r3
 8009e64:	f3bf 8f6f 	isb	sy
 8009e68:	f3bf 8f4f 	dsb	sy
 8009e6c:	623b      	str	r3, [r7, #32]
}
 8009e6e:	bf00      	nop
 8009e70:	bf00      	nop
 8009e72:	e7fd      	b.n	8009e70 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e74:	f000 fd1a 	bl	800a8ac <xTaskGetSchedulerState>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d102      	bne.n	8009e84 <xQueueGenericSend+0xa4>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d101      	bne.n	8009e88 <xQueueGenericSend+0xa8>
 8009e84:	2301      	movs	r3, #1
 8009e86:	e000      	b.n	8009e8a <xQueueGenericSend+0xaa>
 8009e88:	2300      	movs	r3, #0
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d10b      	bne.n	8009ea6 <xQueueGenericSend+0xc6>
	__asm volatile
 8009e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e92:	f383 8811 	msr	BASEPRI, r3
 8009e96:	f3bf 8f6f 	isb	sy
 8009e9a:	f3bf 8f4f 	dsb	sy
 8009e9e:	61fb      	str	r3, [r7, #28]
}
 8009ea0:	bf00      	nop
 8009ea2:	bf00      	nop
 8009ea4:	e7fd      	b.n	8009ea2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009ea6:	f000 fe27 	bl	800aaf8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d302      	bcc.n	8009ebc <xQueueGenericSend+0xdc>
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	2b02      	cmp	r3, #2
 8009eba:	d129      	bne.n	8009f10 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009ebc:	683a      	ldr	r2, [r7, #0]
 8009ebe:	68b9      	ldr	r1, [r7, #8]
 8009ec0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009ec2:	f000 f92d 	bl	800a120 <prvCopyDataToQueue>
 8009ec6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d010      	beq.n	8009ef2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed2:	3324      	adds	r3, #36	@ 0x24
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f000 fbdf 	bl	800a698 <xTaskRemoveFromEventList>
 8009eda:	4603      	mov	r3, r0
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d013      	beq.n	8009f08 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009ee0:	4b3f      	ldr	r3, [pc, #252]	@ (8009fe0 <xQueueGenericSend+0x200>)
 8009ee2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ee6:	601a      	str	r2, [r3, #0]
 8009ee8:	f3bf 8f4f 	dsb	sy
 8009eec:	f3bf 8f6f 	isb	sy
 8009ef0:	e00a      	b.n	8009f08 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d007      	beq.n	8009f08 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009ef8:	4b39      	ldr	r3, [pc, #228]	@ (8009fe0 <xQueueGenericSend+0x200>)
 8009efa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009efe:	601a      	str	r2, [r3, #0]
 8009f00:	f3bf 8f4f 	dsb	sy
 8009f04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009f08:	f000 fe28 	bl	800ab5c <vPortExitCritical>
				return pdPASS;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e063      	b.n	8009fd8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d103      	bne.n	8009f1e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f16:	f000 fe21 	bl	800ab5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	e05c      	b.n	8009fd8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d106      	bne.n	8009f32 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f24:	f107 0314 	add.w	r3, r7, #20
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f000 fc19 	bl	800a760 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f32:	f000 fe13 	bl	800ab5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f36:	f000 f9c7 	bl	800a2c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f3a:	f000 fddd 	bl	800aaf8 <vPortEnterCritical>
 8009f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f44:	b25b      	sxtb	r3, r3
 8009f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f4a:	d103      	bne.n	8009f54 <xQueueGenericSend+0x174>
 8009f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f5a:	b25b      	sxtb	r3, r3
 8009f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f60:	d103      	bne.n	8009f6a <xQueueGenericSend+0x18a>
 8009f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f64:	2200      	movs	r2, #0
 8009f66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f6a:	f000 fdf7 	bl	800ab5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f6e:	1d3a      	adds	r2, r7, #4
 8009f70:	f107 0314 	add.w	r3, r7, #20
 8009f74:	4611      	mov	r1, r2
 8009f76:	4618      	mov	r0, r3
 8009f78:	f000 fc08 	bl	800a78c <xTaskCheckForTimeOut>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d124      	bne.n	8009fcc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009f82:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f84:	f000 f988 	bl	800a298 <prvIsQueueFull>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d018      	beq.n	8009fc0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f90:	3310      	adds	r3, #16
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	4611      	mov	r1, r2
 8009f96:	4618      	mov	r0, r3
 8009f98:	f000 fb58 	bl	800a64c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009f9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f9e:	f000 f929 	bl	800a1f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009fa2:	f000 f99f 	bl	800a2e4 <xTaskResumeAll>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	f47f af7c 	bne.w	8009ea6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009fae:	4b0c      	ldr	r3, [pc, #48]	@ (8009fe0 <xQueueGenericSend+0x200>)
 8009fb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fb4:	601a      	str	r2, [r3, #0]
 8009fb6:	f3bf 8f4f 	dsb	sy
 8009fba:	f3bf 8f6f 	isb	sy
 8009fbe:	e772      	b.n	8009ea6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009fc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009fc2:	f000 f917 	bl	800a1f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009fc6:	f000 f98d 	bl	800a2e4 <xTaskResumeAll>
 8009fca:	e76c      	b.n	8009ea6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009fcc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009fce:	f000 f911 	bl	800a1f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009fd2:	f000 f987 	bl	800a2e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009fd6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3738      	adds	r7, #56	@ 0x38
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	e000ed04 	.word	0xe000ed04

08009fe4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b090      	sub	sp, #64	@ 0x40
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	607a      	str	r2, [r7, #4]
 8009ff0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d10b      	bne.n	800a014 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a000:	f383 8811 	msr	BASEPRI, r3
 800a004:	f3bf 8f6f 	isb	sy
 800a008:	f3bf 8f4f 	dsb	sy
 800a00c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a00e:	bf00      	nop
 800a010:	bf00      	nop
 800a012:	e7fd      	b.n	800a010 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d103      	bne.n	800a022 <xQueueGenericSendFromISR+0x3e>
 800a01a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a01c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d101      	bne.n	800a026 <xQueueGenericSendFromISR+0x42>
 800a022:	2301      	movs	r3, #1
 800a024:	e000      	b.n	800a028 <xQueueGenericSendFromISR+0x44>
 800a026:	2300      	movs	r3, #0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d10b      	bne.n	800a044 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a02c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a030:	f383 8811 	msr	BASEPRI, r3
 800a034:	f3bf 8f6f 	isb	sy
 800a038:	f3bf 8f4f 	dsb	sy
 800a03c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a03e:	bf00      	nop
 800a040:	bf00      	nop
 800a042:	e7fd      	b.n	800a040 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	2b02      	cmp	r3, #2
 800a048:	d103      	bne.n	800a052 <xQueueGenericSendFromISR+0x6e>
 800a04a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a04c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d101      	bne.n	800a056 <xQueueGenericSendFromISR+0x72>
 800a052:	2301      	movs	r3, #1
 800a054:	e000      	b.n	800a058 <xQueueGenericSendFromISR+0x74>
 800a056:	2300      	movs	r3, #0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d10b      	bne.n	800a074 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a05c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a060:	f383 8811 	msr	BASEPRI, r3
 800a064:	f3bf 8f6f 	isb	sy
 800a068:	f3bf 8f4f 	dsb	sy
 800a06c:	623b      	str	r3, [r7, #32]
}
 800a06e:	bf00      	nop
 800a070:	bf00      	nop
 800a072:	e7fd      	b.n	800a070 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a074:	f000 fdf2 	bl	800ac5c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a078:	f3ef 8211 	mrs	r2, BASEPRI
 800a07c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a080:	f383 8811 	msr	BASEPRI, r3
 800a084:	f3bf 8f6f 	isb	sy
 800a088:	f3bf 8f4f 	dsb	sy
 800a08c:	61fa      	str	r2, [r7, #28]
 800a08e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a090:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a092:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a096:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a09a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d302      	bcc.n	800a0a6 <xQueueGenericSendFromISR+0xc2>
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	2b02      	cmp	r3, #2
 800a0a4:	d12f      	bne.n	800a106 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a0a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a0ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a0b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a0b6:	683a      	ldr	r2, [r7, #0]
 800a0b8:	68b9      	ldr	r1, [r7, #8]
 800a0ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a0bc:	f000 f830 	bl	800a120 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a0c0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a0c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0c8:	d112      	bne.n	800a0f0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d016      	beq.n	800a100 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0d4:	3324      	adds	r3, #36	@ 0x24
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f000 fade 	bl	800a698 <xTaskRemoveFromEventList>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d00e      	beq.n	800a100 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d00b      	beq.n	800a100 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	601a      	str	r2, [r3, #0]
 800a0ee:	e007      	b.n	800a100 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a0f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	b25a      	sxtb	r2, r3
 800a0fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a100:	2301      	movs	r3, #1
 800a102:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a104:	e001      	b.n	800a10a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a106:	2300      	movs	r3, #0
 800a108:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a10a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a10c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a114:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3740      	adds	r7, #64	@ 0x40
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b086      	sub	sp, #24
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a12c:	2300      	movs	r3, #0
 800a12e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a134:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d10d      	bne.n	800a15a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d14d      	bne.n	800a1e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	689b      	ldr	r3, [r3, #8]
 800a14a:	4618      	mov	r0, r3
 800a14c:	f000 fbcc 	bl	800a8e8 <xTaskPriorityDisinherit>
 800a150:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2200      	movs	r2, #0
 800a156:	609a      	str	r2, [r3, #8]
 800a158:	e043      	b.n	800a1e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d119      	bne.n	800a194 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	6858      	ldr	r0, [r3, #4]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a168:	461a      	mov	r2, r3
 800a16a:	68b9      	ldr	r1, [r7, #8]
 800a16c:	f001 fdfd 	bl	800bd6a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	685a      	ldr	r2, [r3, #4]
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a178:	441a      	add	r2, r3
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	685a      	ldr	r2, [r3, #4]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	689b      	ldr	r3, [r3, #8]
 800a186:	429a      	cmp	r2, r3
 800a188:	d32b      	bcc.n	800a1e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	605a      	str	r2, [r3, #4]
 800a192:	e026      	b.n	800a1e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	68d8      	ldr	r0, [r3, #12]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a19c:	461a      	mov	r2, r3
 800a19e:	68b9      	ldr	r1, [r7, #8]
 800a1a0:	f001 fde3 	bl	800bd6a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	68da      	ldr	r2, [r3, #12]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1ac:	425b      	negs	r3, r3
 800a1ae:	441a      	add	r2, r3
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	68da      	ldr	r2, [r3, #12]
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d207      	bcs.n	800a1d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	689a      	ldr	r2, [r3, #8]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1c8:	425b      	negs	r3, r3
 800a1ca:	441a      	add	r2, r3
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2b02      	cmp	r3, #2
 800a1d4:	d105      	bne.n	800a1e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d002      	beq.n	800a1e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	3b01      	subs	r3, #1
 800a1e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	1c5a      	adds	r2, r3, #1
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a1ea:	697b      	ldr	r3, [r7, #20]
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3718      	adds	r7, #24
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a1fc:	f000 fc7c 	bl	800aaf8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a206:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a208:	e011      	b.n	800a22e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d012      	beq.n	800a238 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	3324      	adds	r3, #36	@ 0x24
 800a216:	4618      	mov	r0, r3
 800a218:	f000 fa3e 	bl	800a698 <xTaskRemoveFromEventList>
 800a21c:	4603      	mov	r3, r0
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d001      	beq.n	800a226 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a222:	f000 fb17 	bl	800a854 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a226:	7bfb      	ldrb	r3, [r7, #15]
 800a228:	3b01      	subs	r3, #1
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a22e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a232:	2b00      	cmp	r3, #0
 800a234:	dce9      	bgt.n	800a20a <prvUnlockQueue+0x16>
 800a236:	e000      	b.n	800a23a <prvUnlockQueue+0x46>
					break;
 800a238:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	22ff      	movs	r2, #255	@ 0xff
 800a23e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a242:	f000 fc8b 	bl	800ab5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a246:	f000 fc57 	bl	800aaf8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a250:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a252:	e011      	b.n	800a278 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	691b      	ldr	r3, [r3, #16]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d012      	beq.n	800a282 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	3310      	adds	r3, #16
 800a260:	4618      	mov	r0, r3
 800a262:	f000 fa19 	bl	800a698 <xTaskRemoveFromEventList>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d001      	beq.n	800a270 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a26c:	f000 faf2 	bl	800a854 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a270:	7bbb      	ldrb	r3, [r7, #14]
 800a272:	3b01      	subs	r3, #1
 800a274:	b2db      	uxtb	r3, r3
 800a276:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a278:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	dce9      	bgt.n	800a254 <prvUnlockQueue+0x60>
 800a280:	e000      	b.n	800a284 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a282:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	22ff      	movs	r2, #255	@ 0xff
 800a288:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a28c:	f000 fc66 	bl	800ab5c <vPortExitCritical>
}
 800a290:	bf00      	nop
 800a292:	3710      	adds	r7, #16
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b084      	sub	sp, #16
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a2a0:	f000 fc2a 	bl	800aaf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d102      	bne.n	800a2b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	60fb      	str	r3, [r7, #12]
 800a2b4:	e001      	b.n	800a2ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a2ba:	f000 fc4f 	bl	800ab5c <vPortExitCritical>

	return xReturn;
 800a2be:	68fb      	ldr	r3, [r7, #12]
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3710      	adds	r7, #16
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a2cc:	4b04      	ldr	r3, [pc, #16]	@ (800a2e0 <vTaskSuspendAll+0x18>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	4a03      	ldr	r2, [pc, #12]	@ (800a2e0 <vTaskSuspendAll+0x18>)
 800a2d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a2d6:	bf00      	nop
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr
 800a2e0:	20025f1c 	.word	0x20025f1c

0800a2e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a2f2:	4b42      	ldr	r3, [pc, #264]	@ (800a3fc <xTaskResumeAll+0x118>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d10b      	bne.n	800a312 <xTaskResumeAll+0x2e>
	__asm volatile
 800a2fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2fe:	f383 8811 	msr	BASEPRI, r3
 800a302:	f3bf 8f6f 	isb	sy
 800a306:	f3bf 8f4f 	dsb	sy
 800a30a:	603b      	str	r3, [r7, #0]
}
 800a30c:	bf00      	nop
 800a30e:	bf00      	nop
 800a310:	e7fd      	b.n	800a30e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a312:	f000 fbf1 	bl	800aaf8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a316:	4b39      	ldr	r3, [pc, #228]	@ (800a3fc <xTaskResumeAll+0x118>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	3b01      	subs	r3, #1
 800a31c:	4a37      	ldr	r2, [pc, #220]	@ (800a3fc <xTaskResumeAll+0x118>)
 800a31e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a320:	4b36      	ldr	r3, [pc, #216]	@ (800a3fc <xTaskResumeAll+0x118>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d161      	bne.n	800a3ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a328:	4b35      	ldr	r3, [pc, #212]	@ (800a400 <xTaskResumeAll+0x11c>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d05d      	beq.n	800a3ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a330:	e02e      	b.n	800a390 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a332:	4b34      	ldr	r3, [pc, #208]	@ (800a404 <xTaskResumeAll+0x120>)
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	3318      	adds	r3, #24
 800a33e:	4618      	mov	r0, r3
 800a340:	f7ff fd23 	bl	8009d8a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	3304      	adds	r3, #4
 800a348:	4618      	mov	r0, r3
 800a34a:	f7ff fd1e 	bl	8009d8a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a352:	2201      	movs	r2, #1
 800a354:	409a      	lsls	r2, r3
 800a356:	4b2c      	ldr	r3, [pc, #176]	@ (800a408 <xTaskResumeAll+0x124>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4313      	orrs	r3, r2
 800a35c:	4a2a      	ldr	r2, [pc, #168]	@ (800a408 <xTaskResumeAll+0x124>)
 800a35e:	6013      	str	r3, [r2, #0]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a364:	4613      	mov	r3, r2
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	4413      	add	r3, r2
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	4a27      	ldr	r2, [pc, #156]	@ (800a40c <xTaskResumeAll+0x128>)
 800a36e:	441a      	add	r2, r3
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	3304      	adds	r3, #4
 800a374:	4619      	mov	r1, r3
 800a376:	4610      	mov	r0, r2
 800a378:	f7ff fcaa 	bl	8009cd0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a380:	4b23      	ldr	r3, [pc, #140]	@ (800a410 <xTaskResumeAll+0x12c>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a386:	429a      	cmp	r2, r3
 800a388:	d302      	bcc.n	800a390 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a38a:	4b22      	ldr	r3, [pc, #136]	@ (800a414 <xTaskResumeAll+0x130>)
 800a38c:	2201      	movs	r2, #1
 800a38e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a390:	4b1c      	ldr	r3, [pc, #112]	@ (800a404 <xTaskResumeAll+0x120>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d1cc      	bne.n	800a332 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d001      	beq.n	800a3a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a39e:	f000 fa65 	bl	800a86c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a3a2:	4b1d      	ldr	r3, [pc, #116]	@ (800a418 <xTaskResumeAll+0x134>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d010      	beq.n	800a3d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a3ae:	f000 f837 	bl	800a420 <xTaskIncrementTick>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d002      	beq.n	800a3be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a3b8:	4b16      	ldr	r3, [pc, #88]	@ (800a414 <xTaskResumeAll+0x130>)
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d1f1      	bne.n	800a3ae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a3ca:	4b13      	ldr	r3, [pc, #76]	@ (800a418 <xTaskResumeAll+0x134>)
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a3d0:	4b10      	ldr	r3, [pc, #64]	@ (800a414 <xTaskResumeAll+0x130>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d009      	beq.n	800a3ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a3dc:	4b0f      	ldr	r3, [pc, #60]	@ (800a41c <xTaskResumeAll+0x138>)
 800a3de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3e2:	601a      	str	r2, [r3, #0]
 800a3e4:	f3bf 8f4f 	dsb	sy
 800a3e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a3ec:	f000 fbb6 	bl	800ab5c <vPortExitCritical>

	return xAlreadyYielded;
 800a3f0:	68bb      	ldr	r3, [r7, #8]
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3710      	adds	r7, #16
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	20025f1c 	.word	0x20025f1c
 800a400:	20025efc 	.word	0x20025efc
 800a404:	20025ed4 	.word	0x20025ed4
 800a408:	20025f04 	.word	0x20025f04
 800a40c:	20025e40 	.word	0x20025e40
 800a410:	20025e3c 	.word	0x20025e3c
 800a414:	20025f10 	.word	0x20025f10
 800a418:	20025f0c 	.word	0x20025f0c
 800a41c:	e000ed04 	.word	0xe000ed04

0800a420 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b086      	sub	sp, #24
 800a424:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a426:	2300      	movs	r3, #0
 800a428:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a42a:	4b4f      	ldr	r3, [pc, #316]	@ (800a568 <xTaskIncrementTick+0x148>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	f040 808f 	bne.w	800a552 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a434:	4b4d      	ldr	r3, [pc, #308]	@ (800a56c <xTaskIncrementTick+0x14c>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	3301      	adds	r3, #1
 800a43a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a43c:	4a4b      	ldr	r2, [pc, #300]	@ (800a56c <xTaskIncrementTick+0x14c>)
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d121      	bne.n	800a48c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a448:	4b49      	ldr	r3, [pc, #292]	@ (800a570 <xTaskIncrementTick+0x150>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d00b      	beq.n	800a46a <xTaskIncrementTick+0x4a>
	__asm volatile
 800a452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a456:	f383 8811 	msr	BASEPRI, r3
 800a45a:	f3bf 8f6f 	isb	sy
 800a45e:	f3bf 8f4f 	dsb	sy
 800a462:	603b      	str	r3, [r7, #0]
}
 800a464:	bf00      	nop
 800a466:	bf00      	nop
 800a468:	e7fd      	b.n	800a466 <xTaskIncrementTick+0x46>
 800a46a:	4b41      	ldr	r3, [pc, #260]	@ (800a570 <xTaskIncrementTick+0x150>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	60fb      	str	r3, [r7, #12]
 800a470:	4b40      	ldr	r3, [pc, #256]	@ (800a574 <xTaskIncrementTick+0x154>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a3e      	ldr	r2, [pc, #248]	@ (800a570 <xTaskIncrementTick+0x150>)
 800a476:	6013      	str	r3, [r2, #0]
 800a478:	4a3e      	ldr	r2, [pc, #248]	@ (800a574 <xTaskIncrementTick+0x154>)
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	6013      	str	r3, [r2, #0]
 800a47e:	4b3e      	ldr	r3, [pc, #248]	@ (800a578 <xTaskIncrementTick+0x158>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	3301      	adds	r3, #1
 800a484:	4a3c      	ldr	r2, [pc, #240]	@ (800a578 <xTaskIncrementTick+0x158>)
 800a486:	6013      	str	r3, [r2, #0]
 800a488:	f000 f9f0 	bl	800a86c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a48c:	4b3b      	ldr	r3, [pc, #236]	@ (800a57c <xTaskIncrementTick+0x15c>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	693a      	ldr	r2, [r7, #16]
 800a492:	429a      	cmp	r2, r3
 800a494:	d348      	bcc.n	800a528 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a496:	4b36      	ldr	r3, [pc, #216]	@ (800a570 <xTaskIncrementTick+0x150>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d104      	bne.n	800a4aa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4a0:	4b36      	ldr	r3, [pc, #216]	@ (800a57c <xTaskIncrementTick+0x15c>)
 800a4a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a4a6:	601a      	str	r2, [r3, #0]
					break;
 800a4a8:	e03e      	b.n	800a528 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4aa:	4b31      	ldr	r3, [pc, #196]	@ (800a570 <xTaskIncrementTick+0x150>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	68db      	ldr	r3, [r3, #12]
 800a4b0:	68db      	ldr	r3, [r3, #12]
 800a4b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a4ba:	693a      	ldr	r2, [r7, #16]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d203      	bcs.n	800a4ca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a4c2:	4a2e      	ldr	r2, [pc, #184]	@ (800a57c <xTaskIncrementTick+0x15c>)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a4c8:	e02e      	b.n	800a528 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	3304      	adds	r3, #4
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7ff fc5b 	bl	8009d8a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d004      	beq.n	800a4e6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	3318      	adds	r3, #24
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7ff fc52 	bl	8009d8a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	409a      	lsls	r2, r3
 800a4ee:	4b24      	ldr	r3, [pc, #144]	@ (800a580 <xTaskIncrementTick+0x160>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	4a22      	ldr	r2, [pc, #136]	@ (800a580 <xTaskIncrementTick+0x160>)
 800a4f6:	6013      	str	r3, [r2, #0]
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4fc:	4613      	mov	r3, r2
 800a4fe:	009b      	lsls	r3, r3, #2
 800a500:	4413      	add	r3, r2
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	4a1f      	ldr	r2, [pc, #124]	@ (800a584 <xTaskIncrementTick+0x164>)
 800a506:	441a      	add	r2, r3
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	3304      	adds	r3, #4
 800a50c:	4619      	mov	r1, r3
 800a50e:	4610      	mov	r0, r2
 800a510:	f7ff fbde 	bl	8009cd0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a518:	4b1b      	ldr	r3, [pc, #108]	@ (800a588 <xTaskIncrementTick+0x168>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a51e:	429a      	cmp	r2, r3
 800a520:	d3b9      	bcc.n	800a496 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a522:	2301      	movs	r3, #1
 800a524:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a526:	e7b6      	b.n	800a496 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a528:	4b17      	ldr	r3, [pc, #92]	@ (800a588 <xTaskIncrementTick+0x168>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a52e:	4915      	ldr	r1, [pc, #84]	@ (800a584 <xTaskIncrementTick+0x164>)
 800a530:	4613      	mov	r3, r2
 800a532:	009b      	lsls	r3, r3, #2
 800a534:	4413      	add	r3, r2
 800a536:	009b      	lsls	r3, r3, #2
 800a538:	440b      	add	r3, r1
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d901      	bls.n	800a544 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a540:	2301      	movs	r3, #1
 800a542:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a544:	4b11      	ldr	r3, [pc, #68]	@ (800a58c <xTaskIncrementTick+0x16c>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d007      	beq.n	800a55c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a54c:	2301      	movs	r3, #1
 800a54e:	617b      	str	r3, [r7, #20]
 800a550:	e004      	b.n	800a55c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a552:	4b0f      	ldr	r3, [pc, #60]	@ (800a590 <xTaskIncrementTick+0x170>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	3301      	adds	r3, #1
 800a558:	4a0d      	ldr	r2, [pc, #52]	@ (800a590 <xTaskIncrementTick+0x170>)
 800a55a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a55c:	697b      	ldr	r3, [r7, #20]
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3718      	adds	r7, #24
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	20025f1c 	.word	0x20025f1c
 800a56c:	20025f00 	.word	0x20025f00
 800a570:	20025ecc 	.word	0x20025ecc
 800a574:	20025ed0 	.word	0x20025ed0
 800a578:	20025f14 	.word	0x20025f14
 800a57c:	20025f18 	.word	0x20025f18
 800a580:	20025f04 	.word	0x20025f04
 800a584:	20025e40 	.word	0x20025e40
 800a588:	20025e3c 	.word	0x20025e3c
 800a58c:	20025f10 	.word	0x20025f10
 800a590:	20025f0c 	.word	0x20025f0c

0800a594 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a594:	b480      	push	{r7}
 800a596:	b087      	sub	sp, #28
 800a598:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a59a:	4b27      	ldr	r3, [pc, #156]	@ (800a638 <vTaskSwitchContext+0xa4>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d003      	beq.n	800a5aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a5a2:	4b26      	ldr	r3, [pc, #152]	@ (800a63c <vTaskSwitchContext+0xa8>)
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a5a8:	e040      	b.n	800a62c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800a5aa:	4b24      	ldr	r3, [pc, #144]	@ (800a63c <vTaskSwitchContext+0xa8>)
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5b0:	4b23      	ldr	r3, [pc, #140]	@ (800a640 <vTaskSwitchContext+0xac>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	fab3 f383 	clz	r3, r3
 800a5bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a5be:	7afb      	ldrb	r3, [r7, #11]
 800a5c0:	f1c3 031f 	rsb	r3, r3, #31
 800a5c4:	617b      	str	r3, [r7, #20]
 800a5c6:	491f      	ldr	r1, [pc, #124]	@ (800a644 <vTaskSwitchContext+0xb0>)
 800a5c8:	697a      	ldr	r2, [r7, #20]
 800a5ca:	4613      	mov	r3, r2
 800a5cc:	009b      	lsls	r3, r3, #2
 800a5ce:	4413      	add	r3, r2
 800a5d0:	009b      	lsls	r3, r3, #2
 800a5d2:	440b      	add	r3, r1
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d10b      	bne.n	800a5f2 <vTaskSwitchContext+0x5e>
	__asm volatile
 800a5da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5de:	f383 8811 	msr	BASEPRI, r3
 800a5e2:	f3bf 8f6f 	isb	sy
 800a5e6:	f3bf 8f4f 	dsb	sy
 800a5ea:	607b      	str	r3, [r7, #4]
}
 800a5ec:	bf00      	nop
 800a5ee:	bf00      	nop
 800a5f0:	e7fd      	b.n	800a5ee <vTaskSwitchContext+0x5a>
 800a5f2:	697a      	ldr	r2, [r7, #20]
 800a5f4:	4613      	mov	r3, r2
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	4413      	add	r3, r2
 800a5fa:	009b      	lsls	r3, r3, #2
 800a5fc:	4a11      	ldr	r2, [pc, #68]	@ (800a644 <vTaskSwitchContext+0xb0>)
 800a5fe:	4413      	add	r3, r2
 800a600:	613b      	str	r3, [r7, #16]
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	685a      	ldr	r2, [r3, #4]
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	605a      	str	r2, [r3, #4]
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	685a      	ldr	r2, [r3, #4]
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	3308      	adds	r3, #8
 800a614:	429a      	cmp	r2, r3
 800a616:	d104      	bne.n	800a622 <vTaskSwitchContext+0x8e>
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	685a      	ldr	r2, [r3, #4]
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	605a      	str	r2, [r3, #4]
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	68db      	ldr	r3, [r3, #12]
 800a628:	4a07      	ldr	r2, [pc, #28]	@ (800a648 <vTaskSwitchContext+0xb4>)
 800a62a:	6013      	str	r3, [r2, #0]
}
 800a62c:	bf00      	nop
 800a62e:	371c      	adds	r7, #28
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr
 800a638:	20025f1c 	.word	0x20025f1c
 800a63c:	20025f10 	.word	0x20025f10
 800a640:	20025f04 	.word	0x20025f04
 800a644:	20025e40 	.word	0x20025e40
 800a648:	20025e3c 	.word	0x20025e3c

0800a64c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d10b      	bne.n	800a674 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a65c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a660:	f383 8811 	msr	BASEPRI, r3
 800a664:	f3bf 8f6f 	isb	sy
 800a668:	f3bf 8f4f 	dsb	sy
 800a66c:	60fb      	str	r3, [r7, #12]
}
 800a66e:	bf00      	nop
 800a670:	bf00      	nop
 800a672:	e7fd      	b.n	800a670 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a674:	4b07      	ldr	r3, [pc, #28]	@ (800a694 <vTaskPlaceOnEventList+0x48>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	3318      	adds	r3, #24
 800a67a:	4619      	mov	r1, r3
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f7ff fb4b 	bl	8009d18 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a682:	2101      	movs	r1, #1
 800a684:	6838      	ldr	r0, [r7, #0]
 800a686:	f000 f9b7 	bl	800a9f8 <prvAddCurrentTaskToDelayedList>
}
 800a68a:	bf00      	nop
 800a68c:	3710      	adds	r7, #16
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	20025e3c 	.word	0x20025e3c

0800a698 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b086      	sub	sp, #24
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d10b      	bne.n	800a6c6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6b2:	f383 8811 	msr	BASEPRI, r3
 800a6b6:	f3bf 8f6f 	isb	sy
 800a6ba:	f3bf 8f4f 	dsb	sy
 800a6be:	60fb      	str	r3, [r7, #12]
}
 800a6c0:	bf00      	nop
 800a6c2:	bf00      	nop
 800a6c4:	e7fd      	b.n	800a6c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	3318      	adds	r3, #24
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7ff fb5d 	bl	8009d8a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6d0:	4b1d      	ldr	r3, [pc, #116]	@ (800a748 <xTaskRemoveFromEventList+0xb0>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d11c      	bne.n	800a712 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	3304      	adds	r3, #4
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f7ff fb54 	bl	8009d8a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	409a      	lsls	r2, r3
 800a6ea:	4b18      	ldr	r3, [pc, #96]	@ (800a74c <xTaskRemoveFromEventList+0xb4>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	4a16      	ldr	r2, [pc, #88]	@ (800a74c <xTaskRemoveFromEventList+0xb4>)
 800a6f2:	6013      	str	r3, [r2, #0]
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6f8:	4613      	mov	r3, r2
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	4413      	add	r3, r2
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	4a13      	ldr	r2, [pc, #76]	@ (800a750 <xTaskRemoveFromEventList+0xb8>)
 800a702:	441a      	add	r2, r3
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	3304      	adds	r3, #4
 800a708:	4619      	mov	r1, r3
 800a70a:	4610      	mov	r0, r2
 800a70c:	f7ff fae0 	bl	8009cd0 <vListInsertEnd>
 800a710:	e005      	b.n	800a71e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	3318      	adds	r3, #24
 800a716:	4619      	mov	r1, r3
 800a718:	480e      	ldr	r0, [pc, #56]	@ (800a754 <xTaskRemoveFromEventList+0xbc>)
 800a71a:	f7ff fad9 	bl	8009cd0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a722:	4b0d      	ldr	r3, [pc, #52]	@ (800a758 <xTaskRemoveFromEventList+0xc0>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a728:	429a      	cmp	r2, r3
 800a72a:	d905      	bls.n	800a738 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a72c:	2301      	movs	r3, #1
 800a72e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a730:	4b0a      	ldr	r3, [pc, #40]	@ (800a75c <xTaskRemoveFromEventList+0xc4>)
 800a732:	2201      	movs	r2, #1
 800a734:	601a      	str	r2, [r3, #0]
 800a736:	e001      	b.n	800a73c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a738:	2300      	movs	r3, #0
 800a73a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a73c:	697b      	ldr	r3, [r7, #20]
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3718      	adds	r7, #24
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	20025f1c 	.word	0x20025f1c
 800a74c:	20025f04 	.word	0x20025f04
 800a750:	20025e40 	.word	0x20025e40
 800a754:	20025ed4 	.word	0x20025ed4
 800a758:	20025e3c 	.word	0x20025e3c
 800a75c:	20025f10 	.word	0x20025f10

0800a760 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a760:	b480      	push	{r7}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a768:	4b06      	ldr	r3, [pc, #24]	@ (800a784 <vTaskInternalSetTimeOutState+0x24>)
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a770:	4b05      	ldr	r3, [pc, #20]	@ (800a788 <vTaskInternalSetTimeOutState+0x28>)
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	605a      	str	r2, [r3, #4]
}
 800a778:	bf00      	nop
 800a77a:	370c      	adds	r7, #12
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr
 800a784:	20025f14 	.word	0x20025f14
 800a788:	20025f00 	.word	0x20025f00

0800a78c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b088      	sub	sp, #32
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d10b      	bne.n	800a7b4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a79c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7a0:	f383 8811 	msr	BASEPRI, r3
 800a7a4:	f3bf 8f6f 	isb	sy
 800a7a8:	f3bf 8f4f 	dsb	sy
 800a7ac:	613b      	str	r3, [r7, #16]
}
 800a7ae:	bf00      	nop
 800a7b0:	bf00      	nop
 800a7b2:	e7fd      	b.n	800a7b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d10b      	bne.n	800a7d2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a7ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7be:	f383 8811 	msr	BASEPRI, r3
 800a7c2:	f3bf 8f6f 	isb	sy
 800a7c6:	f3bf 8f4f 	dsb	sy
 800a7ca:	60fb      	str	r3, [r7, #12]
}
 800a7cc:	bf00      	nop
 800a7ce:	bf00      	nop
 800a7d0:	e7fd      	b.n	800a7ce <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a7d2:	f000 f991 	bl	800aaf8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a7d6:	4b1d      	ldr	r3, [pc, #116]	@ (800a84c <xTaskCheckForTimeOut+0xc0>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	69ba      	ldr	r2, [r7, #24]
 800a7e2:	1ad3      	subs	r3, r2, r3
 800a7e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ee:	d102      	bne.n	800a7f6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	61fb      	str	r3, [r7, #28]
 800a7f4:	e023      	b.n	800a83e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	4b15      	ldr	r3, [pc, #84]	@ (800a850 <xTaskCheckForTimeOut+0xc4>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d007      	beq.n	800a812 <xTaskCheckForTimeOut+0x86>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	69ba      	ldr	r2, [r7, #24]
 800a808:	429a      	cmp	r2, r3
 800a80a:	d302      	bcc.n	800a812 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a80c:	2301      	movs	r3, #1
 800a80e:	61fb      	str	r3, [r7, #28]
 800a810:	e015      	b.n	800a83e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	697a      	ldr	r2, [r7, #20]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d20b      	bcs.n	800a834 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	1ad2      	subs	r2, r2, r3
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f7ff ff99 	bl	800a760 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a82e:	2300      	movs	r3, #0
 800a830:	61fb      	str	r3, [r7, #28]
 800a832:	e004      	b.n	800a83e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	2200      	movs	r2, #0
 800a838:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a83a:	2301      	movs	r3, #1
 800a83c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a83e:	f000 f98d 	bl	800ab5c <vPortExitCritical>

	return xReturn;
 800a842:	69fb      	ldr	r3, [r7, #28]
}
 800a844:	4618      	mov	r0, r3
 800a846:	3720      	adds	r7, #32
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	20025f00 	.word	0x20025f00
 800a850:	20025f14 	.word	0x20025f14

0800a854 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a854:	b480      	push	{r7}
 800a856:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a858:	4b03      	ldr	r3, [pc, #12]	@ (800a868 <vTaskMissedYield+0x14>)
 800a85a:	2201      	movs	r2, #1
 800a85c:	601a      	str	r2, [r3, #0]
}
 800a85e:	bf00      	nop
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr
 800a868:	20025f10 	.word	0x20025f10

0800a86c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a86c:	b480      	push	{r7}
 800a86e:	b083      	sub	sp, #12
 800a870:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a872:	4b0c      	ldr	r3, [pc, #48]	@ (800a8a4 <prvResetNextTaskUnblockTime+0x38>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d104      	bne.n	800a886 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a87c:	4b0a      	ldr	r3, [pc, #40]	@ (800a8a8 <prvResetNextTaskUnblockTime+0x3c>)
 800a87e:	f04f 32ff 	mov.w	r2, #4294967295
 800a882:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a884:	e008      	b.n	800a898 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a886:	4b07      	ldr	r3, [pc, #28]	@ (800a8a4 <prvResetNextTaskUnblockTime+0x38>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	68db      	ldr	r3, [r3, #12]
 800a88c:	68db      	ldr	r3, [r3, #12]
 800a88e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	4a04      	ldr	r2, [pc, #16]	@ (800a8a8 <prvResetNextTaskUnblockTime+0x3c>)
 800a896:	6013      	str	r3, [r2, #0]
}
 800a898:	bf00      	nop
 800a89a:	370c      	adds	r7, #12
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr
 800a8a4:	20025ecc 	.word	0x20025ecc
 800a8a8:	20025f18 	.word	0x20025f18

0800a8ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a8b2:	4b0b      	ldr	r3, [pc, #44]	@ (800a8e0 <xTaskGetSchedulerState+0x34>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d102      	bne.n	800a8c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	607b      	str	r3, [r7, #4]
 800a8be:	e008      	b.n	800a8d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8c0:	4b08      	ldr	r3, [pc, #32]	@ (800a8e4 <xTaskGetSchedulerState+0x38>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d102      	bne.n	800a8ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a8c8:	2302      	movs	r3, #2
 800a8ca:	607b      	str	r3, [r7, #4]
 800a8cc:	e001      	b.n	800a8d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a8d2:	687b      	ldr	r3, [r7, #4]
	}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	370c      	adds	r7, #12
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr
 800a8e0:	20025f08 	.word	0x20025f08
 800a8e4:	20025f1c 	.word	0x20025f1c

0800a8e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b086      	sub	sp, #24
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d070      	beq.n	800a9e0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a8fe:	4b3b      	ldr	r3, [pc, #236]	@ (800a9ec <xTaskPriorityDisinherit+0x104>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	693a      	ldr	r2, [r7, #16]
 800a904:	429a      	cmp	r2, r3
 800a906:	d00b      	beq.n	800a920 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a90c:	f383 8811 	msr	BASEPRI, r3
 800a910:	f3bf 8f6f 	isb	sy
 800a914:	f3bf 8f4f 	dsb	sy
 800a918:	60fb      	str	r3, [r7, #12]
}
 800a91a:	bf00      	nop
 800a91c:	bf00      	nop
 800a91e:	e7fd      	b.n	800a91c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a924:	2b00      	cmp	r3, #0
 800a926:	d10b      	bne.n	800a940 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a92c:	f383 8811 	msr	BASEPRI, r3
 800a930:	f3bf 8f6f 	isb	sy
 800a934:	f3bf 8f4f 	dsb	sy
 800a938:	60bb      	str	r3, [r7, #8]
}
 800a93a:	bf00      	nop
 800a93c:	bf00      	nop
 800a93e:	e7fd      	b.n	800a93c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a944:	1e5a      	subs	r2, r3, #1
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a952:	429a      	cmp	r2, r3
 800a954:	d044      	beq.n	800a9e0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d140      	bne.n	800a9e0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	3304      	adds	r3, #4
 800a962:	4618      	mov	r0, r3
 800a964:	f7ff fa11 	bl	8009d8a <uxListRemove>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d115      	bne.n	800a99a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a972:	491f      	ldr	r1, [pc, #124]	@ (800a9f0 <xTaskPriorityDisinherit+0x108>)
 800a974:	4613      	mov	r3, r2
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	4413      	add	r3, r2
 800a97a:	009b      	lsls	r3, r3, #2
 800a97c:	440b      	add	r3, r1
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d10a      	bne.n	800a99a <xTaskPriorityDisinherit+0xb2>
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a988:	2201      	movs	r2, #1
 800a98a:	fa02 f303 	lsl.w	r3, r2, r3
 800a98e:	43da      	mvns	r2, r3
 800a990:	4b18      	ldr	r3, [pc, #96]	@ (800a9f4 <xTaskPriorityDisinherit+0x10c>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4013      	ands	r3, r2
 800a996:	4a17      	ldr	r2, [pc, #92]	@ (800a9f4 <xTaskPriorityDisinherit+0x10c>)
 800a998:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9a6:	f1c3 0207 	rsb	r2, r3, #7
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	409a      	lsls	r2, r3
 800a9b6:	4b0f      	ldr	r3, [pc, #60]	@ (800a9f4 <xTaskPriorityDisinherit+0x10c>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	4a0d      	ldr	r2, [pc, #52]	@ (800a9f4 <xTaskPriorityDisinherit+0x10c>)
 800a9be:	6013      	str	r3, [r2, #0]
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9c4:	4613      	mov	r3, r2
 800a9c6:	009b      	lsls	r3, r3, #2
 800a9c8:	4413      	add	r3, r2
 800a9ca:	009b      	lsls	r3, r3, #2
 800a9cc:	4a08      	ldr	r2, [pc, #32]	@ (800a9f0 <xTaskPriorityDisinherit+0x108>)
 800a9ce:	441a      	add	r2, r3
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	3304      	adds	r3, #4
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	4610      	mov	r0, r2
 800a9d8:	f7ff f97a 	bl	8009cd0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a9e0:	697b      	ldr	r3, [r7, #20]
	}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3718      	adds	r7, #24
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	20025e3c 	.word	0x20025e3c
 800a9f0:	20025e40 	.word	0x20025e40
 800a9f4:	20025f04 	.word	0x20025f04

0800a9f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aa02:	4b29      	ldr	r3, [pc, #164]	@ (800aaa8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa08:	4b28      	ldr	r3, [pc, #160]	@ (800aaac <prvAddCurrentTaskToDelayedList+0xb4>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	3304      	adds	r3, #4
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7ff f9bb 	bl	8009d8a <uxListRemove>
 800aa14:	4603      	mov	r3, r0
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d10b      	bne.n	800aa32 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800aa1a:	4b24      	ldr	r3, [pc, #144]	@ (800aaac <prvAddCurrentTaskToDelayedList+0xb4>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa20:	2201      	movs	r2, #1
 800aa22:	fa02 f303 	lsl.w	r3, r2, r3
 800aa26:	43da      	mvns	r2, r3
 800aa28:	4b21      	ldr	r3, [pc, #132]	@ (800aab0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4013      	ands	r3, r2
 800aa2e:	4a20      	ldr	r2, [pc, #128]	@ (800aab0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800aa30:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa38:	d10a      	bne.n	800aa50 <prvAddCurrentTaskToDelayedList+0x58>
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d007      	beq.n	800aa50 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa40:	4b1a      	ldr	r3, [pc, #104]	@ (800aaac <prvAddCurrentTaskToDelayedList+0xb4>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	3304      	adds	r3, #4
 800aa46:	4619      	mov	r1, r3
 800aa48:	481a      	ldr	r0, [pc, #104]	@ (800aab4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800aa4a:	f7ff f941 	bl	8009cd0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aa4e:	e026      	b.n	800aa9e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aa50:	68fa      	ldr	r2, [r7, #12]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	4413      	add	r3, r2
 800aa56:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aa58:	4b14      	ldr	r3, [pc, #80]	@ (800aaac <prvAddCurrentTaskToDelayedList+0xb4>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	68ba      	ldr	r2, [r7, #8]
 800aa5e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aa60:	68ba      	ldr	r2, [r7, #8]
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d209      	bcs.n	800aa7c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa68:	4b13      	ldr	r3, [pc, #76]	@ (800aab8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800aa6a:	681a      	ldr	r2, [r3, #0]
 800aa6c:	4b0f      	ldr	r3, [pc, #60]	@ (800aaac <prvAddCurrentTaskToDelayedList+0xb4>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	3304      	adds	r3, #4
 800aa72:	4619      	mov	r1, r3
 800aa74:	4610      	mov	r0, r2
 800aa76:	f7ff f94f 	bl	8009d18 <vListInsert>
}
 800aa7a:	e010      	b.n	800aa9e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa7c:	4b0f      	ldr	r3, [pc, #60]	@ (800aabc <prvAddCurrentTaskToDelayedList+0xc4>)
 800aa7e:	681a      	ldr	r2, [r3, #0]
 800aa80:	4b0a      	ldr	r3, [pc, #40]	@ (800aaac <prvAddCurrentTaskToDelayedList+0xb4>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	3304      	adds	r3, #4
 800aa86:	4619      	mov	r1, r3
 800aa88:	4610      	mov	r0, r2
 800aa8a:	f7ff f945 	bl	8009d18 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aa8e:	4b0c      	ldr	r3, [pc, #48]	@ (800aac0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	68ba      	ldr	r2, [r7, #8]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d202      	bcs.n	800aa9e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800aa98:	4a09      	ldr	r2, [pc, #36]	@ (800aac0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	6013      	str	r3, [r2, #0]
}
 800aa9e:	bf00      	nop
 800aaa0:	3710      	adds	r7, #16
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
 800aaa6:	bf00      	nop
 800aaa8:	20025f00 	.word	0x20025f00
 800aaac:	20025e3c 	.word	0x20025e3c
 800aab0:	20025f04 	.word	0x20025f04
 800aab4:	20025ee8 	.word	0x20025ee8
 800aab8:	20025ed0 	.word	0x20025ed0
 800aabc:	20025ecc 	.word	0x20025ecc
 800aac0:	20025f18 	.word	0x20025f18
	...

0800aad0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aad0:	4b07      	ldr	r3, [pc, #28]	@ (800aaf0 <pxCurrentTCBConst2>)
 800aad2:	6819      	ldr	r1, [r3, #0]
 800aad4:	6808      	ldr	r0, [r1, #0]
 800aad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aada:	f380 8809 	msr	PSP, r0
 800aade:	f3bf 8f6f 	isb	sy
 800aae2:	f04f 0000 	mov.w	r0, #0
 800aae6:	f380 8811 	msr	BASEPRI, r0
 800aaea:	4770      	bx	lr
 800aaec:	f3af 8000 	nop.w

0800aaf0 <pxCurrentTCBConst2>:
 800aaf0:	20025e3c 	.word	0x20025e3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aaf4:	bf00      	nop
 800aaf6:	bf00      	nop

0800aaf8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
	__asm volatile
 800aafe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab02:	f383 8811 	msr	BASEPRI, r3
 800ab06:	f3bf 8f6f 	isb	sy
 800ab0a:	f3bf 8f4f 	dsb	sy
 800ab0e:	607b      	str	r3, [r7, #4]
}
 800ab10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ab12:	4b10      	ldr	r3, [pc, #64]	@ (800ab54 <vPortEnterCritical+0x5c>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	3301      	adds	r3, #1
 800ab18:	4a0e      	ldr	r2, [pc, #56]	@ (800ab54 <vPortEnterCritical+0x5c>)
 800ab1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ab1c:	4b0d      	ldr	r3, [pc, #52]	@ (800ab54 <vPortEnterCritical+0x5c>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d110      	bne.n	800ab46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ab24:	4b0c      	ldr	r3, [pc, #48]	@ (800ab58 <vPortEnterCritical+0x60>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d00b      	beq.n	800ab46 <vPortEnterCritical+0x4e>
	__asm volatile
 800ab2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab32:	f383 8811 	msr	BASEPRI, r3
 800ab36:	f3bf 8f6f 	isb	sy
 800ab3a:	f3bf 8f4f 	dsb	sy
 800ab3e:	603b      	str	r3, [r7, #0]
}
 800ab40:	bf00      	nop
 800ab42:	bf00      	nop
 800ab44:	e7fd      	b.n	800ab42 <vPortEnterCritical+0x4a>
	}
}
 800ab46:	bf00      	nop
 800ab48:	370c      	adds	r7, #12
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab50:	4770      	bx	lr
 800ab52:	bf00      	nop
 800ab54:	20000010 	.word	0x20000010
 800ab58:	e000ed04 	.word	0xe000ed04

0800ab5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ab62:	4b12      	ldr	r3, [pc, #72]	@ (800abac <vPortExitCritical+0x50>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d10b      	bne.n	800ab82 <vPortExitCritical+0x26>
	__asm volatile
 800ab6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab6e:	f383 8811 	msr	BASEPRI, r3
 800ab72:	f3bf 8f6f 	isb	sy
 800ab76:	f3bf 8f4f 	dsb	sy
 800ab7a:	607b      	str	r3, [r7, #4]
}
 800ab7c:	bf00      	nop
 800ab7e:	bf00      	nop
 800ab80:	e7fd      	b.n	800ab7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ab82:	4b0a      	ldr	r3, [pc, #40]	@ (800abac <vPortExitCritical+0x50>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	3b01      	subs	r3, #1
 800ab88:	4a08      	ldr	r2, [pc, #32]	@ (800abac <vPortExitCritical+0x50>)
 800ab8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ab8c:	4b07      	ldr	r3, [pc, #28]	@ (800abac <vPortExitCritical+0x50>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d105      	bne.n	800aba0 <vPortExitCritical+0x44>
 800ab94:	2300      	movs	r3, #0
 800ab96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	f383 8811 	msr	BASEPRI, r3
}
 800ab9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aba0:	bf00      	nop
 800aba2:	370c      	adds	r7, #12
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr
 800abac:	20000010 	.word	0x20000010

0800abb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800abb0:	f3ef 8009 	mrs	r0, PSP
 800abb4:	f3bf 8f6f 	isb	sy
 800abb8:	4b15      	ldr	r3, [pc, #84]	@ (800ac10 <pxCurrentTCBConst>)
 800abba:	681a      	ldr	r2, [r3, #0]
 800abbc:	f01e 0f10 	tst.w	lr, #16
 800abc0:	bf08      	it	eq
 800abc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800abc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abca:	6010      	str	r0, [r2, #0]
 800abcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800abd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800abd4:	f380 8811 	msr	BASEPRI, r0
 800abd8:	f3bf 8f4f 	dsb	sy
 800abdc:	f3bf 8f6f 	isb	sy
 800abe0:	f7ff fcd8 	bl	800a594 <vTaskSwitchContext>
 800abe4:	f04f 0000 	mov.w	r0, #0
 800abe8:	f380 8811 	msr	BASEPRI, r0
 800abec:	bc09      	pop	{r0, r3}
 800abee:	6819      	ldr	r1, [r3, #0]
 800abf0:	6808      	ldr	r0, [r1, #0]
 800abf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf6:	f01e 0f10 	tst.w	lr, #16
 800abfa:	bf08      	it	eq
 800abfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ac00:	f380 8809 	msr	PSP, r0
 800ac04:	f3bf 8f6f 	isb	sy
 800ac08:	4770      	bx	lr
 800ac0a:	bf00      	nop
 800ac0c:	f3af 8000 	nop.w

0800ac10 <pxCurrentTCBConst>:
 800ac10:	20025e3c 	.word	0x20025e3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ac14:	bf00      	nop
 800ac16:	bf00      	nop

0800ac18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
	__asm volatile
 800ac1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac22:	f383 8811 	msr	BASEPRI, r3
 800ac26:	f3bf 8f6f 	isb	sy
 800ac2a:	f3bf 8f4f 	dsb	sy
 800ac2e:	607b      	str	r3, [r7, #4]
}
 800ac30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ac32:	f7ff fbf5 	bl	800a420 <xTaskIncrementTick>
 800ac36:	4603      	mov	r3, r0
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d003      	beq.n	800ac44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ac3c:	4b06      	ldr	r3, [pc, #24]	@ (800ac58 <SysTick_Handler+0x40>)
 800ac3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac42:	601a      	str	r2, [r3, #0]
 800ac44:	2300      	movs	r3, #0
 800ac46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	f383 8811 	msr	BASEPRI, r3
}
 800ac4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ac50:	bf00      	nop
 800ac52:	3708      	adds	r7, #8
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}
 800ac58:	e000ed04 	.word	0xe000ed04

0800ac5c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b085      	sub	sp, #20
 800ac60:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ac62:	f3ef 8305 	mrs	r3, IPSR
 800ac66:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2b0f      	cmp	r3, #15
 800ac6c:	d915      	bls.n	800ac9a <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ac6e:	4a18      	ldr	r2, [pc, #96]	@ (800acd0 <vPortValidateInterruptPriority+0x74>)
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	4413      	add	r3, r2
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ac78:	4b16      	ldr	r3, [pc, #88]	@ (800acd4 <vPortValidateInterruptPriority+0x78>)
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	7afa      	ldrb	r2, [r7, #11]
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d20b      	bcs.n	800ac9a <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ac82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac86:	f383 8811 	msr	BASEPRI, r3
 800ac8a:	f3bf 8f6f 	isb	sy
 800ac8e:	f3bf 8f4f 	dsb	sy
 800ac92:	607b      	str	r3, [r7, #4]
}
 800ac94:	bf00      	nop
 800ac96:	bf00      	nop
 800ac98:	e7fd      	b.n	800ac96 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ac9a:	4b0f      	ldr	r3, [pc, #60]	@ (800acd8 <vPortValidateInterruptPriority+0x7c>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800aca2:	4b0e      	ldr	r3, [pc, #56]	@ (800acdc <vPortValidateInterruptPriority+0x80>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d90b      	bls.n	800acc2 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800acaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acae:	f383 8811 	msr	BASEPRI, r3
 800acb2:	f3bf 8f6f 	isb	sy
 800acb6:	f3bf 8f4f 	dsb	sy
 800acba:	603b      	str	r3, [r7, #0]
}
 800acbc:	bf00      	nop
 800acbe:	bf00      	nop
 800acc0:	e7fd      	b.n	800acbe <vPortValidateInterruptPriority+0x62>
	}
 800acc2:	bf00      	nop
 800acc4:	3714      	adds	r7, #20
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr
 800acce:	bf00      	nop
 800acd0:	e000e3f0 	.word	0xe000e3f0
 800acd4:	20025f20 	.word	0x20025f20
 800acd8:	e000ed0c 	.word	0xe000ed0c
 800acdc:	20025f24 	.word	0x20025f24

0800ace0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b082      	sub	sp, #8
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800acee:	4618      	mov	r0, r3
 800acf0:	f7fe fec0 	bl	8009a74 <USBH_LL_IncTimer>
}
 800acf4:	bf00      	nop
 800acf6:	3708      	adds	r7, #8
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b082      	sub	sp, #8
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f7fe ff04 	bl	8009b18 <USBH_LL_Connect>
}
 800ad10:	bf00      	nop
 800ad12:	3708      	adds	r7, #8
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ad26:	4618      	mov	r0, r3
 800ad28:	f7fe ff19 	bl	8009b5e <USBH_LL_Disconnect>
}
 800ad2c:	bf00      	nop
 800ad2e:	3708      	adds	r7, #8
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	70fb      	strb	r3, [r7, #3]
 800ad40:	4613      	mov	r3, r2
 800ad42:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f7fe ff39 	bl	8009bc2 <USBH_LL_NotifyURBChange>
#endif
}
 800ad50:	bf00      	nop
 800ad52:	3708      	adds	r7, #8
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7fe feae 	bl	8009ac8 <USBH_LL_PortEnabled>
}
 800ad6c:	bf00      	nop
 800ad6e:	3708      	adds	r7, #8
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7fe feba 	bl	8009afc <USBH_LL_PortDisabled>
}
 800ad88:	bf00      	nop
 800ad8a:	3708      	adds	r7, #8
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b084      	sub	sp, #16
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7f9 fa69 	bl	800427e <HAL_HCD_Stop>
 800adac:	4603      	mov	r3, r0
 800adae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800adb0:	7bfb      	ldrb	r3, [r7, #15]
 800adb2:	4618      	mov	r0, r3
 800adb4:	f000 f808 	bl	800adc8 <USBH_Get_USB_Status>
 800adb8:	4603      	mov	r3, r0
 800adba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adbc:	7bbb      	ldrb	r3, [r7, #14]
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3710      	adds	r7, #16
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
	...

0800adc8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800adc8:	b480      	push	{r7}
 800adca:	b085      	sub	sp, #20
 800adcc:	af00      	add	r7, sp, #0
 800adce:	4603      	mov	r3, r0
 800add0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800add2:	2300      	movs	r3, #0
 800add4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800add6:	79fb      	ldrb	r3, [r7, #7]
 800add8:	2b03      	cmp	r3, #3
 800adda:	d817      	bhi.n	800ae0c <USBH_Get_USB_Status+0x44>
 800addc:	a201      	add	r2, pc, #4	@ (adr r2, 800ade4 <USBH_Get_USB_Status+0x1c>)
 800adde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ade2:	bf00      	nop
 800ade4:	0800adf5 	.word	0x0800adf5
 800ade8:	0800adfb 	.word	0x0800adfb
 800adec:	0800ae01 	.word	0x0800ae01
 800adf0:	0800ae07 	.word	0x0800ae07
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800adf4:	2300      	movs	r3, #0
 800adf6:	73fb      	strb	r3, [r7, #15]
    break;
 800adf8:	e00b      	b.n	800ae12 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800adfa:	2302      	movs	r3, #2
 800adfc:	73fb      	strb	r3, [r7, #15]
    break;
 800adfe:	e008      	b.n	800ae12 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ae00:	2301      	movs	r3, #1
 800ae02:	73fb      	strb	r3, [r7, #15]
    break;
 800ae04:	e005      	b.n	800ae12 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ae06:	2302      	movs	r3, #2
 800ae08:	73fb      	strb	r3, [r7, #15]
    break;
 800ae0a:	e002      	b.n	800ae12 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ae0c:	2302      	movs	r3, #2
 800ae0e:	73fb      	strb	r3, [r7, #15]
    break;
 800ae10:	bf00      	nop
  }
  return usb_status;
 800ae12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3714      	adds	r7, #20
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr

0800ae20 <malloc>:
 800ae20:	4b02      	ldr	r3, [pc, #8]	@ (800ae2c <malloc+0xc>)
 800ae22:	4601      	mov	r1, r0
 800ae24:	6818      	ldr	r0, [r3, #0]
 800ae26:	f000 b825 	b.w	800ae74 <_malloc_r>
 800ae2a:	bf00      	nop
 800ae2c:	20000020 	.word	0x20000020

0800ae30 <sbrk_aligned>:
 800ae30:	b570      	push	{r4, r5, r6, lr}
 800ae32:	4e0f      	ldr	r6, [pc, #60]	@ (800ae70 <sbrk_aligned+0x40>)
 800ae34:	460c      	mov	r4, r1
 800ae36:	6831      	ldr	r1, [r6, #0]
 800ae38:	4605      	mov	r5, r0
 800ae3a:	b911      	cbnz	r1, 800ae42 <sbrk_aligned+0x12>
 800ae3c:	f000 ff46 	bl	800bccc <_sbrk_r>
 800ae40:	6030      	str	r0, [r6, #0]
 800ae42:	4621      	mov	r1, r4
 800ae44:	4628      	mov	r0, r5
 800ae46:	f000 ff41 	bl	800bccc <_sbrk_r>
 800ae4a:	1c43      	adds	r3, r0, #1
 800ae4c:	d103      	bne.n	800ae56 <sbrk_aligned+0x26>
 800ae4e:	f04f 34ff 	mov.w	r4, #4294967295
 800ae52:	4620      	mov	r0, r4
 800ae54:	bd70      	pop	{r4, r5, r6, pc}
 800ae56:	1cc4      	adds	r4, r0, #3
 800ae58:	f024 0403 	bic.w	r4, r4, #3
 800ae5c:	42a0      	cmp	r0, r4
 800ae5e:	d0f8      	beq.n	800ae52 <sbrk_aligned+0x22>
 800ae60:	1a21      	subs	r1, r4, r0
 800ae62:	4628      	mov	r0, r5
 800ae64:	f000 ff32 	bl	800bccc <_sbrk_r>
 800ae68:	3001      	adds	r0, #1
 800ae6a:	d1f2      	bne.n	800ae52 <sbrk_aligned+0x22>
 800ae6c:	e7ef      	b.n	800ae4e <sbrk_aligned+0x1e>
 800ae6e:	bf00      	nop
 800ae70:	20026308 	.word	0x20026308

0800ae74 <_malloc_r>:
 800ae74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae78:	1ccd      	adds	r5, r1, #3
 800ae7a:	f025 0503 	bic.w	r5, r5, #3
 800ae7e:	3508      	adds	r5, #8
 800ae80:	2d0c      	cmp	r5, #12
 800ae82:	bf38      	it	cc
 800ae84:	250c      	movcc	r5, #12
 800ae86:	2d00      	cmp	r5, #0
 800ae88:	4606      	mov	r6, r0
 800ae8a:	db01      	blt.n	800ae90 <_malloc_r+0x1c>
 800ae8c:	42a9      	cmp	r1, r5
 800ae8e:	d904      	bls.n	800ae9a <_malloc_r+0x26>
 800ae90:	230c      	movs	r3, #12
 800ae92:	6033      	str	r3, [r6, #0]
 800ae94:	2000      	movs	r0, #0
 800ae96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800af70 <_malloc_r+0xfc>
 800ae9e:	f000 f869 	bl	800af74 <__malloc_lock>
 800aea2:	f8d8 3000 	ldr.w	r3, [r8]
 800aea6:	461c      	mov	r4, r3
 800aea8:	bb44      	cbnz	r4, 800aefc <_malloc_r+0x88>
 800aeaa:	4629      	mov	r1, r5
 800aeac:	4630      	mov	r0, r6
 800aeae:	f7ff ffbf 	bl	800ae30 <sbrk_aligned>
 800aeb2:	1c43      	adds	r3, r0, #1
 800aeb4:	4604      	mov	r4, r0
 800aeb6:	d158      	bne.n	800af6a <_malloc_r+0xf6>
 800aeb8:	f8d8 4000 	ldr.w	r4, [r8]
 800aebc:	4627      	mov	r7, r4
 800aebe:	2f00      	cmp	r7, #0
 800aec0:	d143      	bne.n	800af4a <_malloc_r+0xd6>
 800aec2:	2c00      	cmp	r4, #0
 800aec4:	d04b      	beq.n	800af5e <_malloc_r+0xea>
 800aec6:	6823      	ldr	r3, [r4, #0]
 800aec8:	4639      	mov	r1, r7
 800aeca:	4630      	mov	r0, r6
 800aecc:	eb04 0903 	add.w	r9, r4, r3
 800aed0:	f000 fefc 	bl	800bccc <_sbrk_r>
 800aed4:	4581      	cmp	r9, r0
 800aed6:	d142      	bne.n	800af5e <_malloc_r+0xea>
 800aed8:	6821      	ldr	r1, [r4, #0]
 800aeda:	1a6d      	subs	r5, r5, r1
 800aedc:	4629      	mov	r1, r5
 800aede:	4630      	mov	r0, r6
 800aee0:	f7ff ffa6 	bl	800ae30 <sbrk_aligned>
 800aee4:	3001      	adds	r0, #1
 800aee6:	d03a      	beq.n	800af5e <_malloc_r+0xea>
 800aee8:	6823      	ldr	r3, [r4, #0]
 800aeea:	442b      	add	r3, r5
 800aeec:	6023      	str	r3, [r4, #0]
 800aeee:	f8d8 3000 	ldr.w	r3, [r8]
 800aef2:	685a      	ldr	r2, [r3, #4]
 800aef4:	bb62      	cbnz	r2, 800af50 <_malloc_r+0xdc>
 800aef6:	f8c8 7000 	str.w	r7, [r8]
 800aefa:	e00f      	b.n	800af1c <_malloc_r+0xa8>
 800aefc:	6822      	ldr	r2, [r4, #0]
 800aefe:	1b52      	subs	r2, r2, r5
 800af00:	d420      	bmi.n	800af44 <_malloc_r+0xd0>
 800af02:	2a0b      	cmp	r2, #11
 800af04:	d917      	bls.n	800af36 <_malloc_r+0xc2>
 800af06:	1961      	adds	r1, r4, r5
 800af08:	42a3      	cmp	r3, r4
 800af0a:	6025      	str	r5, [r4, #0]
 800af0c:	bf18      	it	ne
 800af0e:	6059      	strne	r1, [r3, #4]
 800af10:	6863      	ldr	r3, [r4, #4]
 800af12:	bf08      	it	eq
 800af14:	f8c8 1000 	streq.w	r1, [r8]
 800af18:	5162      	str	r2, [r4, r5]
 800af1a:	604b      	str	r3, [r1, #4]
 800af1c:	4630      	mov	r0, r6
 800af1e:	f000 f82f 	bl	800af80 <__malloc_unlock>
 800af22:	f104 000b 	add.w	r0, r4, #11
 800af26:	1d23      	adds	r3, r4, #4
 800af28:	f020 0007 	bic.w	r0, r0, #7
 800af2c:	1ac2      	subs	r2, r0, r3
 800af2e:	bf1c      	itt	ne
 800af30:	1a1b      	subne	r3, r3, r0
 800af32:	50a3      	strne	r3, [r4, r2]
 800af34:	e7af      	b.n	800ae96 <_malloc_r+0x22>
 800af36:	6862      	ldr	r2, [r4, #4]
 800af38:	42a3      	cmp	r3, r4
 800af3a:	bf0c      	ite	eq
 800af3c:	f8c8 2000 	streq.w	r2, [r8]
 800af40:	605a      	strne	r2, [r3, #4]
 800af42:	e7eb      	b.n	800af1c <_malloc_r+0xa8>
 800af44:	4623      	mov	r3, r4
 800af46:	6864      	ldr	r4, [r4, #4]
 800af48:	e7ae      	b.n	800aea8 <_malloc_r+0x34>
 800af4a:	463c      	mov	r4, r7
 800af4c:	687f      	ldr	r7, [r7, #4]
 800af4e:	e7b6      	b.n	800aebe <_malloc_r+0x4a>
 800af50:	461a      	mov	r2, r3
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	42a3      	cmp	r3, r4
 800af56:	d1fb      	bne.n	800af50 <_malloc_r+0xdc>
 800af58:	2300      	movs	r3, #0
 800af5a:	6053      	str	r3, [r2, #4]
 800af5c:	e7de      	b.n	800af1c <_malloc_r+0xa8>
 800af5e:	230c      	movs	r3, #12
 800af60:	6033      	str	r3, [r6, #0]
 800af62:	4630      	mov	r0, r6
 800af64:	f000 f80c 	bl	800af80 <__malloc_unlock>
 800af68:	e794      	b.n	800ae94 <_malloc_r+0x20>
 800af6a:	6005      	str	r5, [r0, #0]
 800af6c:	e7d6      	b.n	800af1c <_malloc_r+0xa8>
 800af6e:	bf00      	nop
 800af70:	2002630c 	.word	0x2002630c

0800af74 <__malloc_lock>:
 800af74:	4801      	ldr	r0, [pc, #4]	@ (800af7c <__malloc_lock+0x8>)
 800af76:	f000 bef6 	b.w	800bd66 <__retarget_lock_acquire_recursive>
 800af7a:	bf00      	nop
 800af7c:	20026450 	.word	0x20026450

0800af80 <__malloc_unlock>:
 800af80:	4801      	ldr	r0, [pc, #4]	@ (800af88 <__malloc_unlock+0x8>)
 800af82:	f000 bef1 	b.w	800bd68 <__retarget_lock_release_recursive>
 800af86:	bf00      	nop
 800af88:	20026450 	.word	0x20026450

0800af8c <__cvt>:
 800af8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af90:	ec57 6b10 	vmov	r6, r7, d0
 800af94:	2f00      	cmp	r7, #0
 800af96:	460c      	mov	r4, r1
 800af98:	4619      	mov	r1, r3
 800af9a:	463b      	mov	r3, r7
 800af9c:	bfbb      	ittet	lt
 800af9e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800afa2:	461f      	movlt	r7, r3
 800afa4:	2300      	movge	r3, #0
 800afa6:	232d      	movlt	r3, #45	@ 0x2d
 800afa8:	700b      	strb	r3, [r1, #0]
 800afaa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800afac:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800afb0:	4691      	mov	r9, r2
 800afb2:	f023 0820 	bic.w	r8, r3, #32
 800afb6:	bfbc      	itt	lt
 800afb8:	4632      	movlt	r2, r6
 800afba:	4616      	movlt	r6, r2
 800afbc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800afc0:	d005      	beq.n	800afce <__cvt+0x42>
 800afc2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800afc6:	d100      	bne.n	800afca <__cvt+0x3e>
 800afc8:	3401      	adds	r4, #1
 800afca:	2102      	movs	r1, #2
 800afcc:	e000      	b.n	800afd0 <__cvt+0x44>
 800afce:	2103      	movs	r1, #3
 800afd0:	ab03      	add	r3, sp, #12
 800afd2:	9301      	str	r3, [sp, #4]
 800afd4:	ab02      	add	r3, sp, #8
 800afd6:	9300      	str	r3, [sp, #0]
 800afd8:	ec47 6b10 	vmov	d0, r6, r7
 800afdc:	4653      	mov	r3, sl
 800afde:	4622      	mov	r2, r4
 800afe0:	f000 ff5a 	bl	800be98 <_dtoa_r>
 800afe4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800afe8:	4605      	mov	r5, r0
 800afea:	d119      	bne.n	800b020 <__cvt+0x94>
 800afec:	f019 0f01 	tst.w	r9, #1
 800aff0:	d00e      	beq.n	800b010 <__cvt+0x84>
 800aff2:	eb00 0904 	add.w	r9, r0, r4
 800aff6:	2200      	movs	r2, #0
 800aff8:	2300      	movs	r3, #0
 800affa:	4630      	mov	r0, r6
 800affc:	4639      	mov	r1, r7
 800affe:	f7f5 fd73 	bl	8000ae8 <__aeabi_dcmpeq>
 800b002:	b108      	cbz	r0, 800b008 <__cvt+0x7c>
 800b004:	f8cd 900c 	str.w	r9, [sp, #12]
 800b008:	2230      	movs	r2, #48	@ 0x30
 800b00a:	9b03      	ldr	r3, [sp, #12]
 800b00c:	454b      	cmp	r3, r9
 800b00e:	d31e      	bcc.n	800b04e <__cvt+0xc2>
 800b010:	9b03      	ldr	r3, [sp, #12]
 800b012:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b014:	1b5b      	subs	r3, r3, r5
 800b016:	4628      	mov	r0, r5
 800b018:	6013      	str	r3, [r2, #0]
 800b01a:	b004      	add	sp, #16
 800b01c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b020:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b024:	eb00 0904 	add.w	r9, r0, r4
 800b028:	d1e5      	bne.n	800aff6 <__cvt+0x6a>
 800b02a:	7803      	ldrb	r3, [r0, #0]
 800b02c:	2b30      	cmp	r3, #48	@ 0x30
 800b02e:	d10a      	bne.n	800b046 <__cvt+0xba>
 800b030:	2200      	movs	r2, #0
 800b032:	2300      	movs	r3, #0
 800b034:	4630      	mov	r0, r6
 800b036:	4639      	mov	r1, r7
 800b038:	f7f5 fd56 	bl	8000ae8 <__aeabi_dcmpeq>
 800b03c:	b918      	cbnz	r0, 800b046 <__cvt+0xba>
 800b03e:	f1c4 0401 	rsb	r4, r4, #1
 800b042:	f8ca 4000 	str.w	r4, [sl]
 800b046:	f8da 3000 	ldr.w	r3, [sl]
 800b04a:	4499      	add	r9, r3
 800b04c:	e7d3      	b.n	800aff6 <__cvt+0x6a>
 800b04e:	1c59      	adds	r1, r3, #1
 800b050:	9103      	str	r1, [sp, #12]
 800b052:	701a      	strb	r2, [r3, #0]
 800b054:	e7d9      	b.n	800b00a <__cvt+0x7e>

0800b056 <__exponent>:
 800b056:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b058:	2900      	cmp	r1, #0
 800b05a:	bfba      	itte	lt
 800b05c:	4249      	neglt	r1, r1
 800b05e:	232d      	movlt	r3, #45	@ 0x2d
 800b060:	232b      	movge	r3, #43	@ 0x2b
 800b062:	2909      	cmp	r1, #9
 800b064:	7002      	strb	r2, [r0, #0]
 800b066:	7043      	strb	r3, [r0, #1]
 800b068:	dd29      	ble.n	800b0be <__exponent+0x68>
 800b06a:	f10d 0307 	add.w	r3, sp, #7
 800b06e:	461d      	mov	r5, r3
 800b070:	270a      	movs	r7, #10
 800b072:	461a      	mov	r2, r3
 800b074:	fbb1 f6f7 	udiv	r6, r1, r7
 800b078:	fb07 1416 	mls	r4, r7, r6, r1
 800b07c:	3430      	adds	r4, #48	@ 0x30
 800b07e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b082:	460c      	mov	r4, r1
 800b084:	2c63      	cmp	r4, #99	@ 0x63
 800b086:	f103 33ff 	add.w	r3, r3, #4294967295
 800b08a:	4631      	mov	r1, r6
 800b08c:	dcf1      	bgt.n	800b072 <__exponent+0x1c>
 800b08e:	3130      	adds	r1, #48	@ 0x30
 800b090:	1e94      	subs	r4, r2, #2
 800b092:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b096:	1c41      	adds	r1, r0, #1
 800b098:	4623      	mov	r3, r4
 800b09a:	42ab      	cmp	r3, r5
 800b09c:	d30a      	bcc.n	800b0b4 <__exponent+0x5e>
 800b09e:	f10d 0309 	add.w	r3, sp, #9
 800b0a2:	1a9b      	subs	r3, r3, r2
 800b0a4:	42ac      	cmp	r4, r5
 800b0a6:	bf88      	it	hi
 800b0a8:	2300      	movhi	r3, #0
 800b0aa:	3302      	adds	r3, #2
 800b0ac:	4403      	add	r3, r0
 800b0ae:	1a18      	subs	r0, r3, r0
 800b0b0:	b003      	add	sp, #12
 800b0b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0b4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b0b8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b0bc:	e7ed      	b.n	800b09a <__exponent+0x44>
 800b0be:	2330      	movs	r3, #48	@ 0x30
 800b0c0:	3130      	adds	r1, #48	@ 0x30
 800b0c2:	7083      	strb	r3, [r0, #2]
 800b0c4:	70c1      	strb	r1, [r0, #3]
 800b0c6:	1d03      	adds	r3, r0, #4
 800b0c8:	e7f1      	b.n	800b0ae <__exponent+0x58>
	...

0800b0cc <_printf_float>:
 800b0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d0:	b08d      	sub	sp, #52	@ 0x34
 800b0d2:	460c      	mov	r4, r1
 800b0d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b0d8:	4616      	mov	r6, r2
 800b0da:	461f      	mov	r7, r3
 800b0dc:	4605      	mov	r5, r0
 800b0de:	f000 fdbd 	bl	800bc5c <_localeconv_r>
 800b0e2:	6803      	ldr	r3, [r0, #0]
 800b0e4:	9304      	str	r3, [sp, #16]
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f7f5 f8d2 	bl	8000290 <strlen>
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0f0:	f8d8 3000 	ldr.w	r3, [r8]
 800b0f4:	9005      	str	r0, [sp, #20]
 800b0f6:	3307      	adds	r3, #7
 800b0f8:	f023 0307 	bic.w	r3, r3, #7
 800b0fc:	f103 0208 	add.w	r2, r3, #8
 800b100:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b104:	f8d4 b000 	ldr.w	fp, [r4]
 800b108:	f8c8 2000 	str.w	r2, [r8]
 800b10c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b110:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b114:	9307      	str	r3, [sp, #28]
 800b116:	f8cd 8018 	str.w	r8, [sp, #24]
 800b11a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b11e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b122:	4b9c      	ldr	r3, [pc, #624]	@ (800b394 <_printf_float+0x2c8>)
 800b124:	f04f 32ff 	mov.w	r2, #4294967295
 800b128:	f7f5 fd10 	bl	8000b4c <__aeabi_dcmpun>
 800b12c:	bb70      	cbnz	r0, 800b18c <_printf_float+0xc0>
 800b12e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b132:	4b98      	ldr	r3, [pc, #608]	@ (800b394 <_printf_float+0x2c8>)
 800b134:	f04f 32ff 	mov.w	r2, #4294967295
 800b138:	f7f5 fcea 	bl	8000b10 <__aeabi_dcmple>
 800b13c:	bb30      	cbnz	r0, 800b18c <_printf_float+0xc0>
 800b13e:	2200      	movs	r2, #0
 800b140:	2300      	movs	r3, #0
 800b142:	4640      	mov	r0, r8
 800b144:	4649      	mov	r1, r9
 800b146:	f7f5 fcd9 	bl	8000afc <__aeabi_dcmplt>
 800b14a:	b110      	cbz	r0, 800b152 <_printf_float+0x86>
 800b14c:	232d      	movs	r3, #45	@ 0x2d
 800b14e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b152:	4a91      	ldr	r2, [pc, #580]	@ (800b398 <_printf_float+0x2cc>)
 800b154:	4b91      	ldr	r3, [pc, #580]	@ (800b39c <_printf_float+0x2d0>)
 800b156:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b15a:	bf8c      	ite	hi
 800b15c:	4690      	movhi	r8, r2
 800b15e:	4698      	movls	r8, r3
 800b160:	2303      	movs	r3, #3
 800b162:	6123      	str	r3, [r4, #16]
 800b164:	f02b 0304 	bic.w	r3, fp, #4
 800b168:	6023      	str	r3, [r4, #0]
 800b16a:	f04f 0900 	mov.w	r9, #0
 800b16e:	9700      	str	r7, [sp, #0]
 800b170:	4633      	mov	r3, r6
 800b172:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b174:	4621      	mov	r1, r4
 800b176:	4628      	mov	r0, r5
 800b178:	f000 f9d2 	bl	800b520 <_printf_common>
 800b17c:	3001      	adds	r0, #1
 800b17e:	f040 808d 	bne.w	800b29c <_printf_float+0x1d0>
 800b182:	f04f 30ff 	mov.w	r0, #4294967295
 800b186:	b00d      	add	sp, #52	@ 0x34
 800b188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b18c:	4642      	mov	r2, r8
 800b18e:	464b      	mov	r3, r9
 800b190:	4640      	mov	r0, r8
 800b192:	4649      	mov	r1, r9
 800b194:	f7f5 fcda 	bl	8000b4c <__aeabi_dcmpun>
 800b198:	b140      	cbz	r0, 800b1ac <_printf_float+0xe0>
 800b19a:	464b      	mov	r3, r9
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	bfbc      	itt	lt
 800b1a0:	232d      	movlt	r3, #45	@ 0x2d
 800b1a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b1a6:	4a7e      	ldr	r2, [pc, #504]	@ (800b3a0 <_printf_float+0x2d4>)
 800b1a8:	4b7e      	ldr	r3, [pc, #504]	@ (800b3a4 <_printf_float+0x2d8>)
 800b1aa:	e7d4      	b.n	800b156 <_printf_float+0x8a>
 800b1ac:	6863      	ldr	r3, [r4, #4]
 800b1ae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b1b2:	9206      	str	r2, [sp, #24]
 800b1b4:	1c5a      	adds	r2, r3, #1
 800b1b6:	d13b      	bne.n	800b230 <_printf_float+0x164>
 800b1b8:	2306      	movs	r3, #6
 800b1ba:	6063      	str	r3, [r4, #4]
 800b1bc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	6022      	str	r2, [r4, #0]
 800b1c4:	9303      	str	r3, [sp, #12]
 800b1c6:	ab0a      	add	r3, sp, #40	@ 0x28
 800b1c8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b1cc:	ab09      	add	r3, sp, #36	@ 0x24
 800b1ce:	9300      	str	r3, [sp, #0]
 800b1d0:	6861      	ldr	r1, [r4, #4]
 800b1d2:	ec49 8b10 	vmov	d0, r8, r9
 800b1d6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b1da:	4628      	mov	r0, r5
 800b1dc:	f7ff fed6 	bl	800af8c <__cvt>
 800b1e0:	9b06      	ldr	r3, [sp, #24]
 800b1e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b1e4:	2b47      	cmp	r3, #71	@ 0x47
 800b1e6:	4680      	mov	r8, r0
 800b1e8:	d129      	bne.n	800b23e <_printf_float+0x172>
 800b1ea:	1cc8      	adds	r0, r1, #3
 800b1ec:	db02      	blt.n	800b1f4 <_printf_float+0x128>
 800b1ee:	6863      	ldr	r3, [r4, #4]
 800b1f0:	4299      	cmp	r1, r3
 800b1f2:	dd41      	ble.n	800b278 <_printf_float+0x1ac>
 800b1f4:	f1aa 0a02 	sub.w	sl, sl, #2
 800b1f8:	fa5f fa8a 	uxtb.w	sl, sl
 800b1fc:	3901      	subs	r1, #1
 800b1fe:	4652      	mov	r2, sl
 800b200:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b204:	9109      	str	r1, [sp, #36]	@ 0x24
 800b206:	f7ff ff26 	bl	800b056 <__exponent>
 800b20a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b20c:	1813      	adds	r3, r2, r0
 800b20e:	2a01      	cmp	r2, #1
 800b210:	4681      	mov	r9, r0
 800b212:	6123      	str	r3, [r4, #16]
 800b214:	dc02      	bgt.n	800b21c <_printf_float+0x150>
 800b216:	6822      	ldr	r2, [r4, #0]
 800b218:	07d2      	lsls	r2, r2, #31
 800b21a:	d501      	bpl.n	800b220 <_printf_float+0x154>
 800b21c:	3301      	adds	r3, #1
 800b21e:	6123      	str	r3, [r4, #16]
 800b220:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b224:	2b00      	cmp	r3, #0
 800b226:	d0a2      	beq.n	800b16e <_printf_float+0xa2>
 800b228:	232d      	movs	r3, #45	@ 0x2d
 800b22a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b22e:	e79e      	b.n	800b16e <_printf_float+0xa2>
 800b230:	9a06      	ldr	r2, [sp, #24]
 800b232:	2a47      	cmp	r2, #71	@ 0x47
 800b234:	d1c2      	bne.n	800b1bc <_printf_float+0xf0>
 800b236:	2b00      	cmp	r3, #0
 800b238:	d1c0      	bne.n	800b1bc <_printf_float+0xf0>
 800b23a:	2301      	movs	r3, #1
 800b23c:	e7bd      	b.n	800b1ba <_printf_float+0xee>
 800b23e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b242:	d9db      	bls.n	800b1fc <_printf_float+0x130>
 800b244:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b248:	d118      	bne.n	800b27c <_printf_float+0x1b0>
 800b24a:	2900      	cmp	r1, #0
 800b24c:	6863      	ldr	r3, [r4, #4]
 800b24e:	dd0b      	ble.n	800b268 <_printf_float+0x19c>
 800b250:	6121      	str	r1, [r4, #16]
 800b252:	b913      	cbnz	r3, 800b25a <_printf_float+0x18e>
 800b254:	6822      	ldr	r2, [r4, #0]
 800b256:	07d0      	lsls	r0, r2, #31
 800b258:	d502      	bpl.n	800b260 <_printf_float+0x194>
 800b25a:	3301      	adds	r3, #1
 800b25c:	440b      	add	r3, r1
 800b25e:	6123      	str	r3, [r4, #16]
 800b260:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b262:	f04f 0900 	mov.w	r9, #0
 800b266:	e7db      	b.n	800b220 <_printf_float+0x154>
 800b268:	b913      	cbnz	r3, 800b270 <_printf_float+0x1a4>
 800b26a:	6822      	ldr	r2, [r4, #0]
 800b26c:	07d2      	lsls	r2, r2, #31
 800b26e:	d501      	bpl.n	800b274 <_printf_float+0x1a8>
 800b270:	3302      	adds	r3, #2
 800b272:	e7f4      	b.n	800b25e <_printf_float+0x192>
 800b274:	2301      	movs	r3, #1
 800b276:	e7f2      	b.n	800b25e <_printf_float+0x192>
 800b278:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b27c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b27e:	4299      	cmp	r1, r3
 800b280:	db05      	blt.n	800b28e <_printf_float+0x1c2>
 800b282:	6823      	ldr	r3, [r4, #0]
 800b284:	6121      	str	r1, [r4, #16]
 800b286:	07d8      	lsls	r0, r3, #31
 800b288:	d5ea      	bpl.n	800b260 <_printf_float+0x194>
 800b28a:	1c4b      	adds	r3, r1, #1
 800b28c:	e7e7      	b.n	800b25e <_printf_float+0x192>
 800b28e:	2900      	cmp	r1, #0
 800b290:	bfd4      	ite	le
 800b292:	f1c1 0202 	rsble	r2, r1, #2
 800b296:	2201      	movgt	r2, #1
 800b298:	4413      	add	r3, r2
 800b29a:	e7e0      	b.n	800b25e <_printf_float+0x192>
 800b29c:	6823      	ldr	r3, [r4, #0]
 800b29e:	055a      	lsls	r2, r3, #21
 800b2a0:	d407      	bmi.n	800b2b2 <_printf_float+0x1e6>
 800b2a2:	6923      	ldr	r3, [r4, #16]
 800b2a4:	4642      	mov	r2, r8
 800b2a6:	4631      	mov	r1, r6
 800b2a8:	4628      	mov	r0, r5
 800b2aa:	47b8      	blx	r7
 800b2ac:	3001      	adds	r0, #1
 800b2ae:	d12b      	bne.n	800b308 <_printf_float+0x23c>
 800b2b0:	e767      	b.n	800b182 <_printf_float+0xb6>
 800b2b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b2b6:	f240 80dd 	bls.w	800b474 <_printf_float+0x3a8>
 800b2ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b2be:	2200      	movs	r2, #0
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	f7f5 fc11 	bl	8000ae8 <__aeabi_dcmpeq>
 800b2c6:	2800      	cmp	r0, #0
 800b2c8:	d033      	beq.n	800b332 <_printf_float+0x266>
 800b2ca:	4a37      	ldr	r2, [pc, #220]	@ (800b3a8 <_printf_float+0x2dc>)
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	4631      	mov	r1, r6
 800b2d0:	4628      	mov	r0, r5
 800b2d2:	47b8      	blx	r7
 800b2d4:	3001      	adds	r0, #1
 800b2d6:	f43f af54 	beq.w	800b182 <_printf_float+0xb6>
 800b2da:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b2de:	4543      	cmp	r3, r8
 800b2e0:	db02      	blt.n	800b2e8 <_printf_float+0x21c>
 800b2e2:	6823      	ldr	r3, [r4, #0]
 800b2e4:	07d8      	lsls	r0, r3, #31
 800b2e6:	d50f      	bpl.n	800b308 <_printf_float+0x23c>
 800b2e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2ec:	4631      	mov	r1, r6
 800b2ee:	4628      	mov	r0, r5
 800b2f0:	47b8      	blx	r7
 800b2f2:	3001      	adds	r0, #1
 800b2f4:	f43f af45 	beq.w	800b182 <_printf_float+0xb6>
 800b2f8:	f04f 0900 	mov.w	r9, #0
 800b2fc:	f108 38ff 	add.w	r8, r8, #4294967295
 800b300:	f104 0a1a 	add.w	sl, r4, #26
 800b304:	45c8      	cmp	r8, r9
 800b306:	dc09      	bgt.n	800b31c <_printf_float+0x250>
 800b308:	6823      	ldr	r3, [r4, #0]
 800b30a:	079b      	lsls	r3, r3, #30
 800b30c:	f100 8103 	bmi.w	800b516 <_printf_float+0x44a>
 800b310:	68e0      	ldr	r0, [r4, #12]
 800b312:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b314:	4298      	cmp	r0, r3
 800b316:	bfb8      	it	lt
 800b318:	4618      	movlt	r0, r3
 800b31a:	e734      	b.n	800b186 <_printf_float+0xba>
 800b31c:	2301      	movs	r3, #1
 800b31e:	4652      	mov	r2, sl
 800b320:	4631      	mov	r1, r6
 800b322:	4628      	mov	r0, r5
 800b324:	47b8      	blx	r7
 800b326:	3001      	adds	r0, #1
 800b328:	f43f af2b 	beq.w	800b182 <_printf_float+0xb6>
 800b32c:	f109 0901 	add.w	r9, r9, #1
 800b330:	e7e8      	b.n	800b304 <_printf_float+0x238>
 800b332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b334:	2b00      	cmp	r3, #0
 800b336:	dc39      	bgt.n	800b3ac <_printf_float+0x2e0>
 800b338:	4a1b      	ldr	r2, [pc, #108]	@ (800b3a8 <_printf_float+0x2dc>)
 800b33a:	2301      	movs	r3, #1
 800b33c:	4631      	mov	r1, r6
 800b33e:	4628      	mov	r0, r5
 800b340:	47b8      	blx	r7
 800b342:	3001      	adds	r0, #1
 800b344:	f43f af1d 	beq.w	800b182 <_printf_float+0xb6>
 800b348:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b34c:	ea59 0303 	orrs.w	r3, r9, r3
 800b350:	d102      	bne.n	800b358 <_printf_float+0x28c>
 800b352:	6823      	ldr	r3, [r4, #0]
 800b354:	07d9      	lsls	r1, r3, #31
 800b356:	d5d7      	bpl.n	800b308 <_printf_float+0x23c>
 800b358:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b35c:	4631      	mov	r1, r6
 800b35e:	4628      	mov	r0, r5
 800b360:	47b8      	blx	r7
 800b362:	3001      	adds	r0, #1
 800b364:	f43f af0d 	beq.w	800b182 <_printf_float+0xb6>
 800b368:	f04f 0a00 	mov.w	sl, #0
 800b36c:	f104 0b1a 	add.w	fp, r4, #26
 800b370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b372:	425b      	negs	r3, r3
 800b374:	4553      	cmp	r3, sl
 800b376:	dc01      	bgt.n	800b37c <_printf_float+0x2b0>
 800b378:	464b      	mov	r3, r9
 800b37a:	e793      	b.n	800b2a4 <_printf_float+0x1d8>
 800b37c:	2301      	movs	r3, #1
 800b37e:	465a      	mov	r2, fp
 800b380:	4631      	mov	r1, r6
 800b382:	4628      	mov	r0, r5
 800b384:	47b8      	blx	r7
 800b386:	3001      	adds	r0, #1
 800b388:	f43f aefb 	beq.w	800b182 <_printf_float+0xb6>
 800b38c:	f10a 0a01 	add.w	sl, sl, #1
 800b390:	e7ee      	b.n	800b370 <_printf_float+0x2a4>
 800b392:	bf00      	nop
 800b394:	7fefffff 	.word	0x7fefffff
 800b398:	0800e84c 	.word	0x0800e84c
 800b39c:	0800e848 	.word	0x0800e848
 800b3a0:	0800e854 	.word	0x0800e854
 800b3a4:	0800e850 	.word	0x0800e850
 800b3a8:	0800e858 	.word	0x0800e858
 800b3ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b3ae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b3b2:	4553      	cmp	r3, sl
 800b3b4:	bfa8      	it	ge
 800b3b6:	4653      	movge	r3, sl
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	4699      	mov	r9, r3
 800b3bc:	dc36      	bgt.n	800b42c <_printf_float+0x360>
 800b3be:	f04f 0b00 	mov.w	fp, #0
 800b3c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b3c6:	f104 021a 	add.w	r2, r4, #26
 800b3ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b3cc:	9306      	str	r3, [sp, #24]
 800b3ce:	eba3 0309 	sub.w	r3, r3, r9
 800b3d2:	455b      	cmp	r3, fp
 800b3d4:	dc31      	bgt.n	800b43a <_printf_float+0x36e>
 800b3d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3d8:	459a      	cmp	sl, r3
 800b3da:	dc3a      	bgt.n	800b452 <_printf_float+0x386>
 800b3dc:	6823      	ldr	r3, [r4, #0]
 800b3de:	07da      	lsls	r2, r3, #31
 800b3e0:	d437      	bmi.n	800b452 <_printf_float+0x386>
 800b3e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3e4:	ebaa 0903 	sub.w	r9, sl, r3
 800b3e8:	9b06      	ldr	r3, [sp, #24]
 800b3ea:	ebaa 0303 	sub.w	r3, sl, r3
 800b3ee:	4599      	cmp	r9, r3
 800b3f0:	bfa8      	it	ge
 800b3f2:	4699      	movge	r9, r3
 800b3f4:	f1b9 0f00 	cmp.w	r9, #0
 800b3f8:	dc33      	bgt.n	800b462 <_printf_float+0x396>
 800b3fa:	f04f 0800 	mov.w	r8, #0
 800b3fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b402:	f104 0b1a 	add.w	fp, r4, #26
 800b406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b408:	ebaa 0303 	sub.w	r3, sl, r3
 800b40c:	eba3 0309 	sub.w	r3, r3, r9
 800b410:	4543      	cmp	r3, r8
 800b412:	f77f af79 	ble.w	800b308 <_printf_float+0x23c>
 800b416:	2301      	movs	r3, #1
 800b418:	465a      	mov	r2, fp
 800b41a:	4631      	mov	r1, r6
 800b41c:	4628      	mov	r0, r5
 800b41e:	47b8      	blx	r7
 800b420:	3001      	adds	r0, #1
 800b422:	f43f aeae 	beq.w	800b182 <_printf_float+0xb6>
 800b426:	f108 0801 	add.w	r8, r8, #1
 800b42a:	e7ec      	b.n	800b406 <_printf_float+0x33a>
 800b42c:	4642      	mov	r2, r8
 800b42e:	4631      	mov	r1, r6
 800b430:	4628      	mov	r0, r5
 800b432:	47b8      	blx	r7
 800b434:	3001      	adds	r0, #1
 800b436:	d1c2      	bne.n	800b3be <_printf_float+0x2f2>
 800b438:	e6a3      	b.n	800b182 <_printf_float+0xb6>
 800b43a:	2301      	movs	r3, #1
 800b43c:	4631      	mov	r1, r6
 800b43e:	4628      	mov	r0, r5
 800b440:	9206      	str	r2, [sp, #24]
 800b442:	47b8      	blx	r7
 800b444:	3001      	adds	r0, #1
 800b446:	f43f ae9c 	beq.w	800b182 <_printf_float+0xb6>
 800b44a:	9a06      	ldr	r2, [sp, #24]
 800b44c:	f10b 0b01 	add.w	fp, fp, #1
 800b450:	e7bb      	b.n	800b3ca <_printf_float+0x2fe>
 800b452:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b456:	4631      	mov	r1, r6
 800b458:	4628      	mov	r0, r5
 800b45a:	47b8      	blx	r7
 800b45c:	3001      	adds	r0, #1
 800b45e:	d1c0      	bne.n	800b3e2 <_printf_float+0x316>
 800b460:	e68f      	b.n	800b182 <_printf_float+0xb6>
 800b462:	9a06      	ldr	r2, [sp, #24]
 800b464:	464b      	mov	r3, r9
 800b466:	4442      	add	r2, r8
 800b468:	4631      	mov	r1, r6
 800b46a:	4628      	mov	r0, r5
 800b46c:	47b8      	blx	r7
 800b46e:	3001      	adds	r0, #1
 800b470:	d1c3      	bne.n	800b3fa <_printf_float+0x32e>
 800b472:	e686      	b.n	800b182 <_printf_float+0xb6>
 800b474:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b478:	f1ba 0f01 	cmp.w	sl, #1
 800b47c:	dc01      	bgt.n	800b482 <_printf_float+0x3b6>
 800b47e:	07db      	lsls	r3, r3, #31
 800b480:	d536      	bpl.n	800b4f0 <_printf_float+0x424>
 800b482:	2301      	movs	r3, #1
 800b484:	4642      	mov	r2, r8
 800b486:	4631      	mov	r1, r6
 800b488:	4628      	mov	r0, r5
 800b48a:	47b8      	blx	r7
 800b48c:	3001      	adds	r0, #1
 800b48e:	f43f ae78 	beq.w	800b182 <_printf_float+0xb6>
 800b492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b496:	4631      	mov	r1, r6
 800b498:	4628      	mov	r0, r5
 800b49a:	47b8      	blx	r7
 800b49c:	3001      	adds	r0, #1
 800b49e:	f43f ae70 	beq.w	800b182 <_printf_float+0xb6>
 800b4a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b4ae:	f7f5 fb1b 	bl	8000ae8 <__aeabi_dcmpeq>
 800b4b2:	b9c0      	cbnz	r0, 800b4e6 <_printf_float+0x41a>
 800b4b4:	4653      	mov	r3, sl
 800b4b6:	f108 0201 	add.w	r2, r8, #1
 800b4ba:	4631      	mov	r1, r6
 800b4bc:	4628      	mov	r0, r5
 800b4be:	47b8      	blx	r7
 800b4c0:	3001      	adds	r0, #1
 800b4c2:	d10c      	bne.n	800b4de <_printf_float+0x412>
 800b4c4:	e65d      	b.n	800b182 <_printf_float+0xb6>
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	465a      	mov	r2, fp
 800b4ca:	4631      	mov	r1, r6
 800b4cc:	4628      	mov	r0, r5
 800b4ce:	47b8      	blx	r7
 800b4d0:	3001      	adds	r0, #1
 800b4d2:	f43f ae56 	beq.w	800b182 <_printf_float+0xb6>
 800b4d6:	f108 0801 	add.w	r8, r8, #1
 800b4da:	45d0      	cmp	r8, sl
 800b4dc:	dbf3      	blt.n	800b4c6 <_printf_float+0x3fa>
 800b4de:	464b      	mov	r3, r9
 800b4e0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b4e4:	e6df      	b.n	800b2a6 <_printf_float+0x1da>
 800b4e6:	f04f 0800 	mov.w	r8, #0
 800b4ea:	f104 0b1a 	add.w	fp, r4, #26
 800b4ee:	e7f4      	b.n	800b4da <_printf_float+0x40e>
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	4642      	mov	r2, r8
 800b4f4:	e7e1      	b.n	800b4ba <_printf_float+0x3ee>
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	464a      	mov	r2, r9
 800b4fa:	4631      	mov	r1, r6
 800b4fc:	4628      	mov	r0, r5
 800b4fe:	47b8      	blx	r7
 800b500:	3001      	adds	r0, #1
 800b502:	f43f ae3e 	beq.w	800b182 <_printf_float+0xb6>
 800b506:	f108 0801 	add.w	r8, r8, #1
 800b50a:	68e3      	ldr	r3, [r4, #12]
 800b50c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b50e:	1a5b      	subs	r3, r3, r1
 800b510:	4543      	cmp	r3, r8
 800b512:	dcf0      	bgt.n	800b4f6 <_printf_float+0x42a>
 800b514:	e6fc      	b.n	800b310 <_printf_float+0x244>
 800b516:	f04f 0800 	mov.w	r8, #0
 800b51a:	f104 0919 	add.w	r9, r4, #25
 800b51e:	e7f4      	b.n	800b50a <_printf_float+0x43e>

0800b520 <_printf_common>:
 800b520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b524:	4616      	mov	r6, r2
 800b526:	4698      	mov	r8, r3
 800b528:	688a      	ldr	r2, [r1, #8]
 800b52a:	690b      	ldr	r3, [r1, #16]
 800b52c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b530:	4293      	cmp	r3, r2
 800b532:	bfb8      	it	lt
 800b534:	4613      	movlt	r3, r2
 800b536:	6033      	str	r3, [r6, #0]
 800b538:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b53c:	4607      	mov	r7, r0
 800b53e:	460c      	mov	r4, r1
 800b540:	b10a      	cbz	r2, 800b546 <_printf_common+0x26>
 800b542:	3301      	adds	r3, #1
 800b544:	6033      	str	r3, [r6, #0]
 800b546:	6823      	ldr	r3, [r4, #0]
 800b548:	0699      	lsls	r1, r3, #26
 800b54a:	bf42      	ittt	mi
 800b54c:	6833      	ldrmi	r3, [r6, #0]
 800b54e:	3302      	addmi	r3, #2
 800b550:	6033      	strmi	r3, [r6, #0]
 800b552:	6825      	ldr	r5, [r4, #0]
 800b554:	f015 0506 	ands.w	r5, r5, #6
 800b558:	d106      	bne.n	800b568 <_printf_common+0x48>
 800b55a:	f104 0a19 	add.w	sl, r4, #25
 800b55e:	68e3      	ldr	r3, [r4, #12]
 800b560:	6832      	ldr	r2, [r6, #0]
 800b562:	1a9b      	subs	r3, r3, r2
 800b564:	42ab      	cmp	r3, r5
 800b566:	dc26      	bgt.n	800b5b6 <_printf_common+0x96>
 800b568:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b56c:	6822      	ldr	r2, [r4, #0]
 800b56e:	3b00      	subs	r3, #0
 800b570:	bf18      	it	ne
 800b572:	2301      	movne	r3, #1
 800b574:	0692      	lsls	r2, r2, #26
 800b576:	d42b      	bmi.n	800b5d0 <_printf_common+0xb0>
 800b578:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b57c:	4641      	mov	r1, r8
 800b57e:	4638      	mov	r0, r7
 800b580:	47c8      	blx	r9
 800b582:	3001      	adds	r0, #1
 800b584:	d01e      	beq.n	800b5c4 <_printf_common+0xa4>
 800b586:	6823      	ldr	r3, [r4, #0]
 800b588:	6922      	ldr	r2, [r4, #16]
 800b58a:	f003 0306 	and.w	r3, r3, #6
 800b58e:	2b04      	cmp	r3, #4
 800b590:	bf02      	ittt	eq
 800b592:	68e5      	ldreq	r5, [r4, #12]
 800b594:	6833      	ldreq	r3, [r6, #0]
 800b596:	1aed      	subeq	r5, r5, r3
 800b598:	68a3      	ldr	r3, [r4, #8]
 800b59a:	bf0c      	ite	eq
 800b59c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b5a0:	2500      	movne	r5, #0
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	bfc4      	itt	gt
 800b5a6:	1a9b      	subgt	r3, r3, r2
 800b5a8:	18ed      	addgt	r5, r5, r3
 800b5aa:	2600      	movs	r6, #0
 800b5ac:	341a      	adds	r4, #26
 800b5ae:	42b5      	cmp	r5, r6
 800b5b0:	d11a      	bne.n	800b5e8 <_printf_common+0xc8>
 800b5b2:	2000      	movs	r0, #0
 800b5b4:	e008      	b.n	800b5c8 <_printf_common+0xa8>
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	4652      	mov	r2, sl
 800b5ba:	4641      	mov	r1, r8
 800b5bc:	4638      	mov	r0, r7
 800b5be:	47c8      	blx	r9
 800b5c0:	3001      	adds	r0, #1
 800b5c2:	d103      	bne.n	800b5cc <_printf_common+0xac>
 800b5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5cc:	3501      	adds	r5, #1
 800b5ce:	e7c6      	b.n	800b55e <_printf_common+0x3e>
 800b5d0:	18e1      	adds	r1, r4, r3
 800b5d2:	1c5a      	adds	r2, r3, #1
 800b5d4:	2030      	movs	r0, #48	@ 0x30
 800b5d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b5da:	4422      	add	r2, r4
 800b5dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b5e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b5e4:	3302      	adds	r3, #2
 800b5e6:	e7c7      	b.n	800b578 <_printf_common+0x58>
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	4622      	mov	r2, r4
 800b5ec:	4641      	mov	r1, r8
 800b5ee:	4638      	mov	r0, r7
 800b5f0:	47c8      	blx	r9
 800b5f2:	3001      	adds	r0, #1
 800b5f4:	d0e6      	beq.n	800b5c4 <_printf_common+0xa4>
 800b5f6:	3601      	adds	r6, #1
 800b5f8:	e7d9      	b.n	800b5ae <_printf_common+0x8e>
	...

0800b5fc <_printf_i>:
 800b5fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b600:	7e0f      	ldrb	r7, [r1, #24]
 800b602:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b604:	2f78      	cmp	r7, #120	@ 0x78
 800b606:	4691      	mov	r9, r2
 800b608:	4680      	mov	r8, r0
 800b60a:	460c      	mov	r4, r1
 800b60c:	469a      	mov	sl, r3
 800b60e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b612:	d807      	bhi.n	800b624 <_printf_i+0x28>
 800b614:	2f62      	cmp	r7, #98	@ 0x62
 800b616:	d80a      	bhi.n	800b62e <_printf_i+0x32>
 800b618:	2f00      	cmp	r7, #0
 800b61a:	f000 80d1 	beq.w	800b7c0 <_printf_i+0x1c4>
 800b61e:	2f58      	cmp	r7, #88	@ 0x58
 800b620:	f000 80b8 	beq.w	800b794 <_printf_i+0x198>
 800b624:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b628:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b62c:	e03a      	b.n	800b6a4 <_printf_i+0xa8>
 800b62e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b632:	2b15      	cmp	r3, #21
 800b634:	d8f6      	bhi.n	800b624 <_printf_i+0x28>
 800b636:	a101      	add	r1, pc, #4	@ (adr r1, 800b63c <_printf_i+0x40>)
 800b638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b63c:	0800b695 	.word	0x0800b695
 800b640:	0800b6a9 	.word	0x0800b6a9
 800b644:	0800b625 	.word	0x0800b625
 800b648:	0800b625 	.word	0x0800b625
 800b64c:	0800b625 	.word	0x0800b625
 800b650:	0800b625 	.word	0x0800b625
 800b654:	0800b6a9 	.word	0x0800b6a9
 800b658:	0800b625 	.word	0x0800b625
 800b65c:	0800b625 	.word	0x0800b625
 800b660:	0800b625 	.word	0x0800b625
 800b664:	0800b625 	.word	0x0800b625
 800b668:	0800b7a7 	.word	0x0800b7a7
 800b66c:	0800b6d3 	.word	0x0800b6d3
 800b670:	0800b761 	.word	0x0800b761
 800b674:	0800b625 	.word	0x0800b625
 800b678:	0800b625 	.word	0x0800b625
 800b67c:	0800b7c9 	.word	0x0800b7c9
 800b680:	0800b625 	.word	0x0800b625
 800b684:	0800b6d3 	.word	0x0800b6d3
 800b688:	0800b625 	.word	0x0800b625
 800b68c:	0800b625 	.word	0x0800b625
 800b690:	0800b769 	.word	0x0800b769
 800b694:	6833      	ldr	r3, [r6, #0]
 800b696:	1d1a      	adds	r2, r3, #4
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	6032      	str	r2, [r6, #0]
 800b69c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b6a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	e09c      	b.n	800b7e2 <_printf_i+0x1e6>
 800b6a8:	6833      	ldr	r3, [r6, #0]
 800b6aa:	6820      	ldr	r0, [r4, #0]
 800b6ac:	1d19      	adds	r1, r3, #4
 800b6ae:	6031      	str	r1, [r6, #0]
 800b6b0:	0606      	lsls	r6, r0, #24
 800b6b2:	d501      	bpl.n	800b6b8 <_printf_i+0xbc>
 800b6b4:	681d      	ldr	r5, [r3, #0]
 800b6b6:	e003      	b.n	800b6c0 <_printf_i+0xc4>
 800b6b8:	0645      	lsls	r5, r0, #25
 800b6ba:	d5fb      	bpl.n	800b6b4 <_printf_i+0xb8>
 800b6bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b6c0:	2d00      	cmp	r5, #0
 800b6c2:	da03      	bge.n	800b6cc <_printf_i+0xd0>
 800b6c4:	232d      	movs	r3, #45	@ 0x2d
 800b6c6:	426d      	negs	r5, r5
 800b6c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6cc:	4858      	ldr	r0, [pc, #352]	@ (800b830 <_printf_i+0x234>)
 800b6ce:	230a      	movs	r3, #10
 800b6d0:	e011      	b.n	800b6f6 <_printf_i+0xfa>
 800b6d2:	6821      	ldr	r1, [r4, #0]
 800b6d4:	6833      	ldr	r3, [r6, #0]
 800b6d6:	0608      	lsls	r0, r1, #24
 800b6d8:	f853 5b04 	ldr.w	r5, [r3], #4
 800b6dc:	d402      	bmi.n	800b6e4 <_printf_i+0xe8>
 800b6de:	0649      	lsls	r1, r1, #25
 800b6e0:	bf48      	it	mi
 800b6e2:	b2ad      	uxthmi	r5, r5
 800b6e4:	2f6f      	cmp	r7, #111	@ 0x6f
 800b6e6:	4852      	ldr	r0, [pc, #328]	@ (800b830 <_printf_i+0x234>)
 800b6e8:	6033      	str	r3, [r6, #0]
 800b6ea:	bf14      	ite	ne
 800b6ec:	230a      	movne	r3, #10
 800b6ee:	2308      	moveq	r3, #8
 800b6f0:	2100      	movs	r1, #0
 800b6f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b6f6:	6866      	ldr	r6, [r4, #4]
 800b6f8:	60a6      	str	r6, [r4, #8]
 800b6fa:	2e00      	cmp	r6, #0
 800b6fc:	db05      	blt.n	800b70a <_printf_i+0x10e>
 800b6fe:	6821      	ldr	r1, [r4, #0]
 800b700:	432e      	orrs	r6, r5
 800b702:	f021 0104 	bic.w	r1, r1, #4
 800b706:	6021      	str	r1, [r4, #0]
 800b708:	d04b      	beq.n	800b7a2 <_printf_i+0x1a6>
 800b70a:	4616      	mov	r6, r2
 800b70c:	fbb5 f1f3 	udiv	r1, r5, r3
 800b710:	fb03 5711 	mls	r7, r3, r1, r5
 800b714:	5dc7      	ldrb	r7, [r0, r7]
 800b716:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b71a:	462f      	mov	r7, r5
 800b71c:	42bb      	cmp	r3, r7
 800b71e:	460d      	mov	r5, r1
 800b720:	d9f4      	bls.n	800b70c <_printf_i+0x110>
 800b722:	2b08      	cmp	r3, #8
 800b724:	d10b      	bne.n	800b73e <_printf_i+0x142>
 800b726:	6823      	ldr	r3, [r4, #0]
 800b728:	07df      	lsls	r7, r3, #31
 800b72a:	d508      	bpl.n	800b73e <_printf_i+0x142>
 800b72c:	6923      	ldr	r3, [r4, #16]
 800b72e:	6861      	ldr	r1, [r4, #4]
 800b730:	4299      	cmp	r1, r3
 800b732:	bfde      	ittt	le
 800b734:	2330      	movle	r3, #48	@ 0x30
 800b736:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b73a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b73e:	1b92      	subs	r2, r2, r6
 800b740:	6122      	str	r2, [r4, #16]
 800b742:	f8cd a000 	str.w	sl, [sp]
 800b746:	464b      	mov	r3, r9
 800b748:	aa03      	add	r2, sp, #12
 800b74a:	4621      	mov	r1, r4
 800b74c:	4640      	mov	r0, r8
 800b74e:	f7ff fee7 	bl	800b520 <_printf_common>
 800b752:	3001      	adds	r0, #1
 800b754:	d14a      	bne.n	800b7ec <_printf_i+0x1f0>
 800b756:	f04f 30ff 	mov.w	r0, #4294967295
 800b75a:	b004      	add	sp, #16
 800b75c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b760:	6823      	ldr	r3, [r4, #0]
 800b762:	f043 0320 	orr.w	r3, r3, #32
 800b766:	6023      	str	r3, [r4, #0]
 800b768:	4832      	ldr	r0, [pc, #200]	@ (800b834 <_printf_i+0x238>)
 800b76a:	2778      	movs	r7, #120	@ 0x78
 800b76c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b770:	6823      	ldr	r3, [r4, #0]
 800b772:	6831      	ldr	r1, [r6, #0]
 800b774:	061f      	lsls	r7, r3, #24
 800b776:	f851 5b04 	ldr.w	r5, [r1], #4
 800b77a:	d402      	bmi.n	800b782 <_printf_i+0x186>
 800b77c:	065f      	lsls	r7, r3, #25
 800b77e:	bf48      	it	mi
 800b780:	b2ad      	uxthmi	r5, r5
 800b782:	6031      	str	r1, [r6, #0]
 800b784:	07d9      	lsls	r1, r3, #31
 800b786:	bf44      	itt	mi
 800b788:	f043 0320 	orrmi.w	r3, r3, #32
 800b78c:	6023      	strmi	r3, [r4, #0]
 800b78e:	b11d      	cbz	r5, 800b798 <_printf_i+0x19c>
 800b790:	2310      	movs	r3, #16
 800b792:	e7ad      	b.n	800b6f0 <_printf_i+0xf4>
 800b794:	4826      	ldr	r0, [pc, #152]	@ (800b830 <_printf_i+0x234>)
 800b796:	e7e9      	b.n	800b76c <_printf_i+0x170>
 800b798:	6823      	ldr	r3, [r4, #0]
 800b79a:	f023 0320 	bic.w	r3, r3, #32
 800b79e:	6023      	str	r3, [r4, #0]
 800b7a0:	e7f6      	b.n	800b790 <_printf_i+0x194>
 800b7a2:	4616      	mov	r6, r2
 800b7a4:	e7bd      	b.n	800b722 <_printf_i+0x126>
 800b7a6:	6833      	ldr	r3, [r6, #0]
 800b7a8:	6825      	ldr	r5, [r4, #0]
 800b7aa:	6961      	ldr	r1, [r4, #20]
 800b7ac:	1d18      	adds	r0, r3, #4
 800b7ae:	6030      	str	r0, [r6, #0]
 800b7b0:	062e      	lsls	r6, r5, #24
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	d501      	bpl.n	800b7ba <_printf_i+0x1be>
 800b7b6:	6019      	str	r1, [r3, #0]
 800b7b8:	e002      	b.n	800b7c0 <_printf_i+0x1c4>
 800b7ba:	0668      	lsls	r0, r5, #25
 800b7bc:	d5fb      	bpl.n	800b7b6 <_printf_i+0x1ba>
 800b7be:	8019      	strh	r1, [r3, #0]
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	6123      	str	r3, [r4, #16]
 800b7c4:	4616      	mov	r6, r2
 800b7c6:	e7bc      	b.n	800b742 <_printf_i+0x146>
 800b7c8:	6833      	ldr	r3, [r6, #0]
 800b7ca:	1d1a      	adds	r2, r3, #4
 800b7cc:	6032      	str	r2, [r6, #0]
 800b7ce:	681e      	ldr	r6, [r3, #0]
 800b7d0:	6862      	ldr	r2, [r4, #4]
 800b7d2:	2100      	movs	r1, #0
 800b7d4:	4630      	mov	r0, r6
 800b7d6:	f7f4 fd0b 	bl	80001f0 <memchr>
 800b7da:	b108      	cbz	r0, 800b7e0 <_printf_i+0x1e4>
 800b7dc:	1b80      	subs	r0, r0, r6
 800b7de:	6060      	str	r0, [r4, #4]
 800b7e0:	6863      	ldr	r3, [r4, #4]
 800b7e2:	6123      	str	r3, [r4, #16]
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7ea:	e7aa      	b.n	800b742 <_printf_i+0x146>
 800b7ec:	6923      	ldr	r3, [r4, #16]
 800b7ee:	4632      	mov	r2, r6
 800b7f0:	4649      	mov	r1, r9
 800b7f2:	4640      	mov	r0, r8
 800b7f4:	47d0      	blx	sl
 800b7f6:	3001      	adds	r0, #1
 800b7f8:	d0ad      	beq.n	800b756 <_printf_i+0x15a>
 800b7fa:	6823      	ldr	r3, [r4, #0]
 800b7fc:	079b      	lsls	r3, r3, #30
 800b7fe:	d413      	bmi.n	800b828 <_printf_i+0x22c>
 800b800:	68e0      	ldr	r0, [r4, #12]
 800b802:	9b03      	ldr	r3, [sp, #12]
 800b804:	4298      	cmp	r0, r3
 800b806:	bfb8      	it	lt
 800b808:	4618      	movlt	r0, r3
 800b80a:	e7a6      	b.n	800b75a <_printf_i+0x15e>
 800b80c:	2301      	movs	r3, #1
 800b80e:	4632      	mov	r2, r6
 800b810:	4649      	mov	r1, r9
 800b812:	4640      	mov	r0, r8
 800b814:	47d0      	blx	sl
 800b816:	3001      	adds	r0, #1
 800b818:	d09d      	beq.n	800b756 <_printf_i+0x15a>
 800b81a:	3501      	adds	r5, #1
 800b81c:	68e3      	ldr	r3, [r4, #12]
 800b81e:	9903      	ldr	r1, [sp, #12]
 800b820:	1a5b      	subs	r3, r3, r1
 800b822:	42ab      	cmp	r3, r5
 800b824:	dcf2      	bgt.n	800b80c <_printf_i+0x210>
 800b826:	e7eb      	b.n	800b800 <_printf_i+0x204>
 800b828:	2500      	movs	r5, #0
 800b82a:	f104 0619 	add.w	r6, r4, #25
 800b82e:	e7f5      	b.n	800b81c <_printf_i+0x220>
 800b830:	0800e85a 	.word	0x0800e85a
 800b834:	0800e86b 	.word	0x0800e86b

0800b838 <std>:
 800b838:	2300      	movs	r3, #0
 800b83a:	b510      	push	{r4, lr}
 800b83c:	4604      	mov	r4, r0
 800b83e:	e9c0 3300 	strd	r3, r3, [r0]
 800b842:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b846:	6083      	str	r3, [r0, #8]
 800b848:	8181      	strh	r1, [r0, #12]
 800b84a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b84c:	81c2      	strh	r2, [r0, #14]
 800b84e:	6183      	str	r3, [r0, #24]
 800b850:	4619      	mov	r1, r3
 800b852:	2208      	movs	r2, #8
 800b854:	305c      	adds	r0, #92	@ 0x5c
 800b856:	f000 f9f9 	bl	800bc4c <memset>
 800b85a:	4b0d      	ldr	r3, [pc, #52]	@ (800b890 <std+0x58>)
 800b85c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b85e:	4b0d      	ldr	r3, [pc, #52]	@ (800b894 <std+0x5c>)
 800b860:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b862:	4b0d      	ldr	r3, [pc, #52]	@ (800b898 <std+0x60>)
 800b864:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b866:	4b0d      	ldr	r3, [pc, #52]	@ (800b89c <std+0x64>)
 800b868:	6323      	str	r3, [r4, #48]	@ 0x30
 800b86a:	4b0d      	ldr	r3, [pc, #52]	@ (800b8a0 <std+0x68>)
 800b86c:	6224      	str	r4, [r4, #32]
 800b86e:	429c      	cmp	r4, r3
 800b870:	d006      	beq.n	800b880 <std+0x48>
 800b872:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b876:	4294      	cmp	r4, r2
 800b878:	d002      	beq.n	800b880 <std+0x48>
 800b87a:	33d0      	adds	r3, #208	@ 0xd0
 800b87c:	429c      	cmp	r4, r3
 800b87e:	d105      	bne.n	800b88c <std+0x54>
 800b880:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b888:	f000 ba6c 	b.w	800bd64 <__retarget_lock_init_recursive>
 800b88c:	bd10      	pop	{r4, pc}
 800b88e:	bf00      	nop
 800b890:	0800ba9d 	.word	0x0800ba9d
 800b894:	0800babf 	.word	0x0800babf
 800b898:	0800baf7 	.word	0x0800baf7
 800b89c:	0800bb1b 	.word	0x0800bb1b
 800b8a0:	20026310 	.word	0x20026310

0800b8a4 <stdio_exit_handler>:
 800b8a4:	4a02      	ldr	r2, [pc, #8]	@ (800b8b0 <stdio_exit_handler+0xc>)
 800b8a6:	4903      	ldr	r1, [pc, #12]	@ (800b8b4 <stdio_exit_handler+0x10>)
 800b8a8:	4803      	ldr	r0, [pc, #12]	@ (800b8b8 <stdio_exit_handler+0x14>)
 800b8aa:	f000 b869 	b.w	800b980 <_fwalk_sglue>
 800b8ae:	bf00      	nop
 800b8b0:	20000014 	.word	0x20000014
 800b8b4:	0800d54d 	.word	0x0800d54d
 800b8b8:	20000024 	.word	0x20000024

0800b8bc <cleanup_stdio>:
 800b8bc:	6841      	ldr	r1, [r0, #4]
 800b8be:	4b0c      	ldr	r3, [pc, #48]	@ (800b8f0 <cleanup_stdio+0x34>)
 800b8c0:	4299      	cmp	r1, r3
 800b8c2:	b510      	push	{r4, lr}
 800b8c4:	4604      	mov	r4, r0
 800b8c6:	d001      	beq.n	800b8cc <cleanup_stdio+0x10>
 800b8c8:	f001 fe40 	bl	800d54c <_fflush_r>
 800b8cc:	68a1      	ldr	r1, [r4, #8]
 800b8ce:	4b09      	ldr	r3, [pc, #36]	@ (800b8f4 <cleanup_stdio+0x38>)
 800b8d0:	4299      	cmp	r1, r3
 800b8d2:	d002      	beq.n	800b8da <cleanup_stdio+0x1e>
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	f001 fe39 	bl	800d54c <_fflush_r>
 800b8da:	68e1      	ldr	r1, [r4, #12]
 800b8dc:	4b06      	ldr	r3, [pc, #24]	@ (800b8f8 <cleanup_stdio+0x3c>)
 800b8de:	4299      	cmp	r1, r3
 800b8e0:	d004      	beq.n	800b8ec <cleanup_stdio+0x30>
 800b8e2:	4620      	mov	r0, r4
 800b8e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8e8:	f001 be30 	b.w	800d54c <_fflush_r>
 800b8ec:	bd10      	pop	{r4, pc}
 800b8ee:	bf00      	nop
 800b8f0:	20026310 	.word	0x20026310
 800b8f4:	20026378 	.word	0x20026378
 800b8f8:	200263e0 	.word	0x200263e0

0800b8fc <global_stdio_init.part.0>:
 800b8fc:	b510      	push	{r4, lr}
 800b8fe:	4b0b      	ldr	r3, [pc, #44]	@ (800b92c <global_stdio_init.part.0+0x30>)
 800b900:	4c0b      	ldr	r4, [pc, #44]	@ (800b930 <global_stdio_init.part.0+0x34>)
 800b902:	4a0c      	ldr	r2, [pc, #48]	@ (800b934 <global_stdio_init.part.0+0x38>)
 800b904:	601a      	str	r2, [r3, #0]
 800b906:	4620      	mov	r0, r4
 800b908:	2200      	movs	r2, #0
 800b90a:	2104      	movs	r1, #4
 800b90c:	f7ff ff94 	bl	800b838 <std>
 800b910:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b914:	2201      	movs	r2, #1
 800b916:	2109      	movs	r1, #9
 800b918:	f7ff ff8e 	bl	800b838 <std>
 800b91c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b920:	2202      	movs	r2, #2
 800b922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b926:	2112      	movs	r1, #18
 800b928:	f7ff bf86 	b.w	800b838 <std>
 800b92c:	20026448 	.word	0x20026448
 800b930:	20026310 	.word	0x20026310
 800b934:	0800b8a5 	.word	0x0800b8a5

0800b938 <__sfp_lock_acquire>:
 800b938:	4801      	ldr	r0, [pc, #4]	@ (800b940 <__sfp_lock_acquire+0x8>)
 800b93a:	f000 ba14 	b.w	800bd66 <__retarget_lock_acquire_recursive>
 800b93e:	bf00      	nop
 800b940:	20026451 	.word	0x20026451

0800b944 <__sfp_lock_release>:
 800b944:	4801      	ldr	r0, [pc, #4]	@ (800b94c <__sfp_lock_release+0x8>)
 800b946:	f000 ba0f 	b.w	800bd68 <__retarget_lock_release_recursive>
 800b94a:	bf00      	nop
 800b94c:	20026451 	.word	0x20026451

0800b950 <__sinit>:
 800b950:	b510      	push	{r4, lr}
 800b952:	4604      	mov	r4, r0
 800b954:	f7ff fff0 	bl	800b938 <__sfp_lock_acquire>
 800b958:	6a23      	ldr	r3, [r4, #32]
 800b95a:	b11b      	cbz	r3, 800b964 <__sinit+0x14>
 800b95c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b960:	f7ff bff0 	b.w	800b944 <__sfp_lock_release>
 800b964:	4b04      	ldr	r3, [pc, #16]	@ (800b978 <__sinit+0x28>)
 800b966:	6223      	str	r3, [r4, #32]
 800b968:	4b04      	ldr	r3, [pc, #16]	@ (800b97c <__sinit+0x2c>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d1f5      	bne.n	800b95c <__sinit+0xc>
 800b970:	f7ff ffc4 	bl	800b8fc <global_stdio_init.part.0>
 800b974:	e7f2      	b.n	800b95c <__sinit+0xc>
 800b976:	bf00      	nop
 800b978:	0800b8bd 	.word	0x0800b8bd
 800b97c:	20026448 	.word	0x20026448

0800b980 <_fwalk_sglue>:
 800b980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b984:	4607      	mov	r7, r0
 800b986:	4688      	mov	r8, r1
 800b988:	4614      	mov	r4, r2
 800b98a:	2600      	movs	r6, #0
 800b98c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b990:	f1b9 0901 	subs.w	r9, r9, #1
 800b994:	d505      	bpl.n	800b9a2 <_fwalk_sglue+0x22>
 800b996:	6824      	ldr	r4, [r4, #0]
 800b998:	2c00      	cmp	r4, #0
 800b99a:	d1f7      	bne.n	800b98c <_fwalk_sglue+0xc>
 800b99c:	4630      	mov	r0, r6
 800b99e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9a2:	89ab      	ldrh	r3, [r5, #12]
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d907      	bls.n	800b9b8 <_fwalk_sglue+0x38>
 800b9a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b9ac:	3301      	adds	r3, #1
 800b9ae:	d003      	beq.n	800b9b8 <_fwalk_sglue+0x38>
 800b9b0:	4629      	mov	r1, r5
 800b9b2:	4638      	mov	r0, r7
 800b9b4:	47c0      	blx	r8
 800b9b6:	4306      	orrs	r6, r0
 800b9b8:	3568      	adds	r5, #104	@ 0x68
 800b9ba:	e7e9      	b.n	800b990 <_fwalk_sglue+0x10>

0800b9bc <iprintf>:
 800b9bc:	b40f      	push	{r0, r1, r2, r3}
 800b9be:	b507      	push	{r0, r1, r2, lr}
 800b9c0:	4906      	ldr	r1, [pc, #24]	@ (800b9dc <iprintf+0x20>)
 800b9c2:	ab04      	add	r3, sp, #16
 800b9c4:	6808      	ldr	r0, [r1, #0]
 800b9c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9ca:	6881      	ldr	r1, [r0, #8]
 800b9cc:	9301      	str	r3, [sp, #4]
 800b9ce:	f001 fc21 	bl	800d214 <_vfiprintf_r>
 800b9d2:	b003      	add	sp, #12
 800b9d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9d8:	b004      	add	sp, #16
 800b9da:	4770      	bx	lr
 800b9dc:	20000020 	.word	0x20000020

0800b9e0 <_puts_r>:
 800b9e0:	6a03      	ldr	r3, [r0, #32]
 800b9e2:	b570      	push	{r4, r5, r6, lr}
 800b9e4:	6884      	ldr	r4, [r0, #8]
 800b9e6:	4605      	mov	r5, r0
 800b9e8:	460e      	mov	r6, r1
 800b9ea:	b90b      	cbnz	r3, 800b9f0 <_puts_r+0x10>
 800b9ec:	f7ff ffb0 	bl	800b950 <__sinit>
 800b9f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b9f2:	07db      	lsls	r3, r3, #31
 800b9f4:	d405      	bmi.n	800ba02 <_puts_r+0x22>
 800b9f6:	89a3      	ldrh	r3, [r4, #12]
 800b9f8:	0598      	lsls	r0, r3, #22
 800b9fa:	d402      	bmi.n	800ba02 <_puts_r+0x22>
 800b9fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9fe:	f000 f9b2 	bl	800bd66 <__retarget_lock_acquire_recursive>
 800ba02:	89a3      	ldrh	r3, [r4, #12]
 800ba04:	0719      	lsls	r1, r3, #28
 800ba06:	d502      	bpl.n	800ba0e <_puts_r+0x2e>
 800ba08:	6923      	ldr	r3, [r4, #16]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d135      	bne.n	800ba7a <_puts_r+0x9a>
 800ba0e:	4621      	mov	r1, r4
 800ba10:	4628      	mov	r0, r5
 800ba12:	f000 f8c5 	bl	800bba0 <__swsetup_r>
 800ba16:	b380      	cbz	r0, 800ba7a <_puts_r+0x9a>
 800ba18:	f04f 35ff 	mov.w	r5, #4294967295
 800ba1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ba1e:	07da      	lsls	r2, r3, #31
 800ba20:	d405      	bmi.n	800ba2e <_puts_r+0x4e>
 800ba22:	89a3      	ldrh	r3, [r4, #12]
 800ba24:	059b      	lsls	r3, r3, #22
 800ba26:	d402      	bmi.n	800ba2e <_puts_r+0x4e>
 800ba28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba2a:	f000 f99d 	bl	800bd68 <__retarget_lock_release_recursive>
 800ba2e:	4628      	mov	r0, r5
 800ba30:	bd70      	pop	{r4, r5, r6, pc}
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	da04      	bge.n	800ba40 <_puts_r+0x60>
 800ba36:	69a2      	ldr	r2, [r4, #24]
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	dc17      	bgt.n	800ba6c <_puts_r+0x8c>
 800ba3c:	290a      	cmp	r1, #10
 800ba3e:	d015      	beq.n	800ba6c <_puts_r+0x8c>
 800ba40:	6823      	ldr	r3, [r4, #0]
 800ba42:	1c5a      	adds	r2, r3, #1
 800ba44:	6022      	str	r2, [r4, #0]
 800ba46:	7019      	strb	r1, [r3, #0]
 800ba48:	68a3      	ldr	r3, [r4, #8]
 800ba4a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ba4e:	3b01      	subs	r3, #1
 800ba50:	60a3      	str	r3, [r4, #8]
 800ba52:	2900      	cmp	r1, #0
 800ba54:	d1ed      	bne.n	800ba32 <_puts_r+0x52>
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	da11      	bge.n	800ba7e <_puts_r+0x9e>
 800ba5a:	4622      	mov	r2, r4
 800ba5c:	210a      	movs	r1, #10
 800ba5e:	4628      	mov	r0, r5
 800ba60:	f000 f85f 	bl	800bb22 <__swbuf_r>
 800ba64:	3001      	adds	r0, #1
 800ba66:	d0d7      	beq.n	800ba18 <_puts_r+0x38>
 800ba68:	250a      	movs	r5, #10
 800ba6a:	e7d7      	b.n	800ba1c <_puts_r+0x3c>
 800ba6c:	4622      	mov	r2, r4
 800ba6e:	4628      	mov	r0, r5
 800ba70:	f000 f857 	bl	800bb22 <__swbuf_r>
 800ba74:	3001      	adds	r0, #1
 800ba76:	d1e7      	bne.n	800ba48 <_puts_r+0x68>
 800ba78:	e7ce      	b.n	800ba18 <_puts_r+0x38>
 800ba7a:	3e01      	subs	r6, #1
 800ba7c:	e7e4      	b.n	800ba48 <_puts_r+0x68>
 800ba7e:	6823      	ldr	r3, [r4, #0]
 800ba80:	1c5a      	adds	r2, r3, #1
 800ba82:	6022      	str	r2, [r4, #0]
 800ba84:	220a      	movs	r2, #10
 800ba86:	701a      	strb	r2, [r3, #0]
 800ba88:	e7ee      	b.n	800ba68 <_puts_r+0x88>
	...

0800ba8c <puts>:
 800ba8c:	4b02      	ldr	r3, [pc, #8]	@ (800ba98 <puts+0xc>)
 800ba8e:	4601      	mov	r1, r0
 800ba90:	6818      	ldr	r0, [r3, #0]
 800ba92:	f7ff bfa5 	b.w	800b9e0 <_puts_r>
 800ba96:	bf00      	nop
 800ba98:	20000020 	.word	0x20000020

0800ba9c <__sread>:
 800ba9c:	b510      	push	{r4, lr}
 800ba9e:	460c      	mov	r4, r1
 800baa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baa4:	f000 f900 	bl	800bca8 <_read_r>
 800baa8:	2800      	cmp	r0, #0
 800baaa:	bfab      	itete	ge
 800baac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800baae:	89a3      	ldrhlt	r3, [r4, #12]
 800bab0:	181b      	addge	r3, r3, r0
 800bab2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bab6:	bfac      	ite	ge
 800bab8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800baba:	81a3      	strhlt	r3, [r4, #12]
 800babc:	bd10      	pop	{r4, pc}

0800babe <__swrite>:
 800babe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bac2:	461f      	mov	r7, r3
 800bac4:	898b      	ldrh	r3, [r1, #12]
 800bac6:	05db      	lsls	r3, r3, #23
 800bac8:	4605      	mov	r5, r0
 800baca:	460c      	mov	r4, r1
 800bacc:	4616      	mov	r6, r2
 800bace:	d505      	bpl.n	800badc <__swrite+0x1e>
 800bad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bad4:	2302      	movs	r3, #2
 800bad6:	2200      	movs	r2, #0
 800bad8:	f000 f8d4 	bl	800bc84 <_lseek_r>
 800badc:	89a3      	ldrh	r3, [r4, #12]
 800bade:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bae2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bae6:	81a3      	strh	r3, [r4, #12]
 800bae8:	4632      	mov	r2, r6
 800baea:	463b      	mov	r3, r7
 800baec:	4628      	mov	r0, r5
 800baee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800baf2:	f000 b8fb 	b.w	800bcec <_write_r>

0800baf6 <__sseek>:
 800baf6:	b510      	push	{r4, lr}
 800baf8:	460c      	mov	r4, r1
 800bafa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bafe:	f000 f8c1 	bl	800bc84 <_lseek_r>
 800bb02:	1c43      	adds	r3, r0, #1
 800bb04:	89a3      	ldrh	r3, [r4, #12]
 800bb06:	bf15      	itete	ne
 800bb08:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bb0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bb0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bb12:	81a3      	strheq	r3, [r4, #12]
 800bb14:	bf18      	it	ne
 800bb16:	81a3      	strhne	r3, [r4, #12]
 800bb18:	bd10      	pop	{r4, pc}

0800bb1a <__sclose>:
 800bb1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb1e:	f000 b8a1 	b.w	800bc64 <_close_r>

0800bb22 <__swbuf_r>:
 800bb22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb24:	460e      	mov	r6, r1
 800bb26:	4614      	mov	r4, r2
 800bb28:	4605      	mov	r5, r0
 800bb2a:	b118      	cbz	r0, 800bb34 <__swbuf_r+0x12>
 800bb2c:	6a03      	ldr	r3, [r0, #32]
 800bb2e:	b90b      	cbnz	r3, 800bb34 <__swbuf_r+0x12>
 800bb30:	f7ff ff0e 	bl	800b950 <__sinit>
 800bb34:	69a3      	ldr	r3, [r4, #24]
 800bb36:	60a3      	str	r3, [r4, #8]
 800bb38:	89a3      	ldrh	r3, [r4, #12]
 800bb3a:	071a      	lsls	r2, r3, #28
 800bb3c:	d501      	bpl.n	800bb42 <__swbuf_r+0x20>
 800bb3e:	6923      	ldr	r3, [r4, #16]
 800bb40:	b943      	cbnz	r3, 800bb54 <__swbuf_r+0x32>
 800bb42:	4621      	mov	r1, r4
 800bb44:	4628      	mov	r0, r5
 800bb46:	f000 f82b 	bl	800bba0 <__swsetup_r>
 800bb4a:	b118      	cbz	r0, 800bb54 <__swbuf_r+0x32>
 800bb4c:	f04f 37ff 	mov.w	r7, #4294967295
 800bb50:	4638      	mov	r0, r7
 800bb52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb54:	6823      	ldr	r3, [r4, #0]
 800bb56:	6922      	ldr	r2, [r4, #16]
 800bb58:	1a98      	subs	r0, r3, r2
 800bb5a:	6963      	ldr	r3, [r4, #20]
 800bb5c:	b2f6      	uxtb	r6, r6
 800bb5e:	4283      	cmp	r3, r0
 800bb60:	4637      	mov	r7, r6
 800bb62:	dc05      	bgt.n	800bb70 <__swbuf_r+0x4e>
 800bb64:	4621      	mov	r1, r4
 800bb66:	4628      	mov	r0, r5
 800bb68:	f001 fcf0 	bl	800d54c <_fflush_r>
 800bb6c:	2800      	cmp	r0, #0
 800bb6e:	d1ed      	bne.n	800bb4c <__swbuf_r+0x2a>
 800bb70:	68a3      	ldr	r3, [r4, #8]
 800bb72:	3b01      	subs	r3, #1
 800bb74:	60a3      	str	r3, [r4, #8]
 800bb76:	6823      	ldr	r3, [r4, #0]
 800bb78:	1c5a      	adds	r2, r3, #1
 800bb7a:	6022      	str	r2, [r4, #0]
 800bb7c:	701e      	strb	r6, [r3, #0]
 800bb7e:	6962      	ldr	r2, [r4, #20]
 800bb80:	1c43      	adds	r3, r0, #1
 800bb82:	429a      	cmp	r2, r3
 800bb84:	d004      	beq.n	800bb90 <__swbuf_r+0x6e>
 800bb86:	89a3      	ldrh	r3, [r4, #12]
 800bb88:	07db      	lsls	r3, r3, #31
 800bb8a:	d5e1      	bpl.n	800bb50 <__swbuf_r+0x2e>
 800bb8c:	2e0a      	cmp	r6, #10
 800bb8e:	d1df      	bne.n	800bb50 <__swbuf_r+0x2e>
 800bb90:	4621      	mov	r1, r4
 800bb92:	4628      	mov	r0, r5
 800bb94:	f001 fcda 	bl	800d54c <_fflush_r>
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	d0d9      	beq.n	800bb50 <__swbuf_r+0x2e>
 800bb9c:	e7d6      	b.n	800bb4c <__swbuf_r+0x2a>
	...

0800bba0 <__swsetup_r>:
 800bba0:	b538      	push	{r3, r4, r5, lr}
 800bba2:	4b29      	ldr	r3, [pc, #164]	@ (800bc48 <__swsetup_r+0xa8>)
 800bba4:	4605      	mov	r5, r0
 800bba6:	6818      	ldr	r0, [r3, #0]
 800bba8:	460c      	mov	r4, r1
 800bbaa:	b118      	cbz	r0, 800bbb4 <__swsetup_r+0x14>
 800bbac:	6a03      	ldr	r3, [r0, #32]
 800bbae:	b90b      	cbnz	r3, 800bbb4 <__swsetup_r+0x14>
 800bbb0:	f7ff fece 	bl	800b950 <__sinit>
 800bbb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbb8:	0719      	lsls	r1, r3, #28
 800bbba:	d422      	bmi.n	800bc02 <__swsetup_r+0x62>
 800bbbc:	06da      	lsls	r2, r3, #27
 800bbbe:	d407      	bmi.n	800bbd0 <__swsetup_r+0x30>
 800bbc0:	2209      	movs	r2, #9
 800bbc2:	602a      	str	r2, [r5, #0]
 800bbc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbc8:	81a3      	strh	r3, [r4, #12]
 800bbca:	f04f 30ff 	mov.w	r0, #4294967295
 800bbce:	e033      	b.n	800bc38 <__swsetup_r+0x98>
 800bbd0:	0758      	lsls	r0, r3, #29
 800bbd2:	d512      	bpl.n	800bbfa <__swsetup_r+0x5a>
 800bbd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bbd6:	b141      	cbz	r1, 800bbea <__swsetup_r+0x4a>
 800bbd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bbdc:	4299      	cmp	r1, r3
 800bbde:	d002      	beq.n	800bbe6 <__swsetup_r+0x46>
 800bbe0:	4628      	mov	r0, r5
 800bbe2:	f000 ff29 	bl	800ca38 <_free_r>
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	6363      	str	r3, [r4, #52]	@ 0x34
 800bbea:	89a3      	ldrh	r3, [r4, #12]
 800bbec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bbf0:	81a3      	strh	r3, [r4, #12]
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	6063      	str	r3, [r4, #4]
 800bbf6:	6923      	ldr	r3, [r4, #16]
 800bbf8:	6023      	str	r3, [r4, #0]
 800bbfa:	89a3      	ldrh	r3, [r4, #12]
 800bbfc:	f043 0308 	orr.w	r3, r3, #8
 800bc00:	81a3      	strh	r3, [r4, #12]
 800bc02:	6923      	ldr	r3, [r4, #16]
 800bc04:	b94b      	cbnz	r3, 800bc1a <__swsetup_r+0x7a>
 800bc06:	89a3      	ldrh	r3, [r4, #12]
 800bc08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bc0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc10:	d003      	beq.n	800bc1a <__swsetup_r+0x7a>
 800bc12:	4621      	mov	r1, r4
 800bc14:	4628      	mov	r0, r5
 800bc16:	f001 fce7 	bl	800d5e8 <__smakebuf_r>
 800bc1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc1e:	f013 0201 	ands.w	r2, r3, #1
 800bc22:	d00a      	beq.n	800bc3a <__swsetup_r+0x9a>
 800bc24:	2200      	movs	r2, #0
 800bc26:	60a2      	str	r2, [r4, #8]
 800bc28:	6962      	ldr	r2, [r4, #20]
 800bc2a:	4252      	negs	r2, r2
 800bc2c:	61a2      	str	r2, [r4, #24]
 800bc2e:	6922      	ldr	r2, [r4, #16]
 800bc30:	b942      	cbnz	r2, 800bc44 <__swsetup_r+0xa4>
 800bc32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bc36:	d1c5      	bne.n	800bbc4 <__swsetup_r+0x24>
 800bc38:	bd38      	pop	{r3, r4, r5, pc}
 800bc3a:	0799      	lsls	r1, r3, #30
 800bc3c:	bf58      	it	pl
 800bc3e:	6962      	ldrpl	r2, [r4, #20]
 800bc40:	60a2      	str	r2, [r4, #8]
 800bc42:	e7f4      	b.n	800bc2e <__swsetup_r+0x8e>
 800bc44:	2000      	movs	r0, #0
 800bc46:	e7f7      	b.n	800bc38 <__swsetup_r+0x98>
 800bc48:	20000020 	.word	0x20000020

0800bc4c <memset>:
 800bc4c:	4402      	add	r2, r0
 800bc4e:	4603      	mov	r3, r0
 800bc50:	4293      	cmp	r3, r2
 800bc52:	d100      	bne.n	800bc56 <memset+0xa>
 800bc54:	4770      	bx	lr
 800bc56:	f803 1b01 	strb.w	r1, [r3], #1
 800bc5a:	e7f9      	b.n	800bc50 <memset+0x4>

0800bc5c <_localeconv_r>:
 800bc5c:	4800      	ldr	r0, [pc, #0]	@ (800bc60 <_localeconv_r+0x4>)
 800bc5e:	4770      	bx	lr
 800bc60:	20000160 	.word	0x20000160

0800bc64 <_close_r>:
 800bc64:	b538      	push	{r3, r4, r5, lr}
 800bc66:	4d06      	ldr	r5, [pc, #24]	@ (800bc80 <_close_r+0x1c>)
 800bc68:	2300      	movs	r3, #0
 800bc6a:	4604      	mov	r4, r0
 800bc6c:	4608      	mov	r0, r1
 800bc6e:	602b      	str	r3, [r5, #0]
 800bc70:	f7f6 ffe6 	bl	8002c40 <_close>
 800bc74:	1c43      	adds	r3, r0, #1
 800bc76:	d102      	bne.n	800bc7e <_close_r+0x1a>
 800bc78:	682b      	ldr	r3, [r5, #0]
 800bc7a:	b103      	cbz	r3, 800bc7e <_close_r+0x1a>
 800bc7c:	6023      	str	r3, [r4, #0]
 800bc7e:	bd38      	pop	{r3, r4, r5, pc}
 800bc80:	2002644c 	.word	0x2002644c

0800bc84 <_lseek_r>:
 800bc84:	b538      	push	{r3, r4, r5, lr}
 800bc86:	4d07      	ldr	r5, [pc, #28]	@ (800bca4 <_lseek_r+0x20>)
 800bc88:	4604      	mov	r4, r0
 800bc8a:	4608      	mov	r0, r1
 800bc8c:	4611      	mov	r1, r2
 800bc8e:	2200      	movs	r2, #0
 800bc90:	602a      	str	r2, [r5, #0]
 800bc92:	461a      	mov	r2, r3
 800bc94:	f7f6 fffb 	bl	8002c8e <_lseek>
 800bc98:	1c43      	adds	r3, r0, #1
 800bc9a:	d102      	bne.n	800bca2 <_lseek_r+0x1e>
 800bc9c:	682b      	ldr	r3, [r5, #0]
 800bc9e:	b103      	cbz	r3, 800bca2 <_lseek_r+0x1e>
 800bca0:	6023      	str	r3, [r4, #0]
 800bca2:	bd38      	pop	{r3, r4, r5, pc}
 800bca4:	2002644c 	.word	0x2002644c

0800bca8 <_read_r>:
 800bca8:	b538      	push	{r3, r4, r5, lr}
 800bcaa:	4d07      	ldr	r5, [pc, #28]	@ (800bcc8 <_read_r+0x20>)
 800bcac:	4604      	mov	r4, r0
 800bcae:	4608      	mov	r0, r1
 800bcb0:	4611      	mov	r1, r2
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	602a      	str	r2, [r5, #0]
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	f7f6 ffa5 	bl	8002c06 <_read>
 800bcbc:	1c43      	adds	r3, r0, #1
 800bcbe:	d102      	bne.n	800bcc6 <_read_r+0x1e>
 800bcc0:	682b      	ldr	r3, [r5, #0]
 800bcc2:	b103      	cbz	r3, 800bcc6 <_read_r+0x1e>
 800bcc4:	6023      	str	r3, [r4, #0]
 800bcc6:	bd38      	pop	{r3, r4, r5, pc}
 800bcc8:	2002644c 	.word	0x2002644c

0800bccc <_sbrk_r>:
 800bccc:	b538      	push	{r3, r4, r5, lr}
 800bcce:	4d06      	ldr	r5, [pc, #24]	@ (800bce8 <_sbrk_r+0x1c>)
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	4608      	mov	r0, r1
 800bcd6:	602b      	str	r3, [r5, #0]
 800bcd8:	f7f6 ffe6 	bl	8002ca8 <_sbrk>
 800bcdc:	1c43      	adds	r3, r0, #1
 800bcde:	d102      	bne.n	800bce6 <_sbrk_r+0x1a>
 800bce0:	682b      	ldr	r3, [r5, #0]
 800bce2:	b103      	cbz	r3, 800bce6 <_sbrk_r+0x1a>
 800bce4:	6023      	str	r3, [r4, #0]
 800bce6:	bd38      	pop	{r3, r4, r5, pc}
 800bce8:	2002644c 	.word	0x2002644c

0800bcec <_write_r>:
 800bcec:	b538      	push	{r3, r4, r5, lr}
 800bcee:	4d07      	ldr	r5, [pc, #28]	@ (800bd0c <_write_r+0x20>)
 800bcf0:	4604      	mov	r4, r0
 800bcf2:	4608      	mov	r0, r1
 800bcf4:	4611      	mov	r1, r2
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	602a      	str	r2, [r5, #0]
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	f7f5 fc10 	bl	8001520 <_write>
 800bd00:	1c43      	adds	r3, r0, #1
 800bd02:	d102      	bne.n	800bd0a <_write_r+0x1e>
 800bd04:	682b      	ldr	r3, [r5, #0]
 800bd06:	b103      	cbz	r3, 800bd0a <_write_r+0x1e>
 800bd08:	6023      	str	r3, [r4, #0]
 800bd0a:	bd38      	pop	{r3, r4, r5, pc}
 800bd0c:	2002644c 	.word	0x2002644c

0800bd10 <__errno>:
 800bd10:	4b01      	ldr	r3, [pc, #4]	@ (800bd18 <__errno+0x8>)
 800bd12:	6818      	ldr	r0, [r3, #0]
 800bd14:	4770      	bx	lr
 800bd16:	bf00      	nop
 800bd18:	20000020 	.word	0x20000020

0800bd1c <__libc_init_array>:
 800bd1c:	b570      	push	{r4, r5, r6, lr}
 800bd1e:	4d0d      	ldr	r5, [pc, #52]	@ (800bd54 <__libc_init_array+0x38>)
 800bd20:	4c0d      	ldr	r4, [pc, #52]	@ (800bd58 <__libc_init_array+0x3c>)
 800bd22:	1b64      	subs	r4, r4, r5
 800bd24:	10a4      	asrs	r4, r4, #2
 800bd26:	2600      	movs	r6, #0
 800bd28:	42a6      	cmp	r6, r4
 800bd2a:	d109      	bne.n	800bd40 <__libc_init_array+0x24>
 800bd2c:	4d0b      	ldr	r5, [pc, #44]	@ (800bd5c <__libc_init_array+0x40>)
 800bd2e:	4c0c      	ldr	r4, [pc, #48]	@ (800bd60 <__libc_init_array+0x44>)
 800bd30:	f002 fcc8 	bl	800e6c4 <_init>
 800bd34:	1b64      	subs	r4, r4, r5
 800bd36:	10a4      	asrs	r4, r4, #2
 800bd38:	2600      	movs	r6, #0
 800bd3a:	42a6      	cmp	r6, r4
 800bd3c:	d105      	bne.n	800bd4a <__libc_init_array+0x2e>
 800bd3e:	bd70      	pop	{r4, r5, r6, pc}
 800bd40:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd44:	4798      	blx	r3
 800bd46:	3601      	adds	r6, #1
 800bd48:	e7ee      	b.n	800bd28 <__libc_init_array+0xc>
 800bd4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd4e:	4798      	blx	r3
 800bd50:	3601      	adds	r6, #1
 800bd52:	e7f2      	b.n	800bd3a <__libc_init_array+0x1e>
 800bd54:	0800ec08 	.word	0x0800ec08
 800bd58:	0800ec08 	.word	0x0800ec08
 800bd5c:	0800ec08 	.word	0x0800ec08
 800bd60:	0800ec0c 	.word	0x0800ec0c

0800bd64 <__retarget_lock_init_recursive>:
 800bd64:	4770      	bx	lr

0800bd66 <__retarget_lock_acquire_recursive>:
 800bd66:	4770      	bx	lr

0800bd68 <__retarget_lock_release_recursive>:
 800bd68:	4770      	bx	lr

0800bd6a <memcpy>:
 800bd6a:	440a      	add	r2, r1
 800bd6c:	4291      	cmp	r1, r2
 800bd6e:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd72:	d100      	bne.n	800bd76 <memcpy+0xc>
 800bd74:	4770      	bx	lr
 800bd76:	b510      	push	{r4, lr}
 800bd78:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd80:	4291      	cmp	r1, r2
 800bd82:	d1f9      	bne.n	800bd78 <memcpy+0xe>
 800bd84:	bd10      	pop	{r4, pc}

0800bd86 <quorem>:
 800bd86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd8a:	6903      	ldr	r3, [r0, #16]
 800bd8c:	690c      	ldr	r4, [r1, #16]
 800bd8e:	42a3      	cmp	r3, r4
 800bd90:	4607      	mov	r7, r0
 800bd92:	db7e      	blt.n	800be92 <quorem+0x10c>
 800bd94:	3c01      	subs	r4, #1
 800bd96:	f101 0814 	add.w	r8, r1, #20
 800bd9a:	00a3      	lsls	r3, r4, #2
 800bd9c:	f100 0514 	add.w	r5, r0, #20
 800bda0:	9300      	str	r3, [sp, #0]
 800bda2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bda6:	9301      	str	r3, [sp, #4]
 800bda8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bdac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bdb0:	3301      	adds	r3, #1
 800bdb2:	429a      	cmp	r2, r3
 800bdb4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bdb8:	fbb2 f6f3 	udiv	r6, r2, r3
 800bdbc:	d32e      	bcc.n	800be1c <quorem+0x96>
 800bdbe:	f04f 0a00 	mov.w	sl, #0
 800bdc2:	46c4      	mov	ip, r8
 800bdc4:	46ae      	mov	lr, r5
 800bdc6:	46d3      	mov	fp, sl
 800bdc8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bdcc:	b298      	uxth	r0, r3
 800bdce:	fb06 a000 	mla	r0, r6, r0, sl
 800bdd2:	0c02      	lsrs	r2, r0, #16
 800bdd4:	0c1b      	lsrs	r3, r3, #16
 800bdd6:	fb06 2303 	mla	r3, r6, r3, r2
 800bdda:	f8de 2000 	ldr.w	r2, [lr]
 800bdde:	b280      	uxth	r0, r0
 800bde0:	b292      	uxth	r2, r2
 800bde2:	1a12      	subs	r2, r2, r0
 800bde4:	445a      	add	r2, fp
 800bde6:	f8de 0000 	ldr.w	r0, [lr]
 800bdea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bdee:	b29b      	uxth	r3, r3
 800bdf0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bdf4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bdf8:	b292      	uxth	r2, r2
 800bdfa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bdfe:	45e1      	cmp	r9, ip
 800be00:	f84e 2b04 	str.w	r2, [lr], #4
 800be04:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800be08:	d2de      	bcs.n	800bdc8 <quorem+0x42>
 800be0a:	9b00      	ldr	r3, [sp, #0]
 800be0c:	58eb      	ldr	r3, [r5, r3]
 800be0e:	b92b      	cbnz	r3, 800be1c <quorem+0x96>
 800be10:	9b01      	ldr	r3, [sp, #4]
 800be12:	3b04      	subs	r3, #4
 800be14:	429d      	cmp	r5, r3
 800be16:	461a      	mov	r2, r3
 800be18:	d32f      	bcc.n	800be7a <quorem+0xf4>
 800be1a:	613c      	str	r4, [r7, #16]
 800be1c:	4638      	mov	r0, r7
 800be1e:	f001 f8c7 	bl	800cfb0 <__mcmp>
 800be22:	2800      	cmp	r0, #0
 800be24:	db25      	blt.n	800be72 <quorem+0xec>
 800be26:	4629      	mov	r1, r5
 800be28:	2000      	movs	r0, #0
 800be2a:	f858 2b04 	ldr.w	r2, [r8], #4
 800be2e:	f8d1 c000 	ldr.w	ip, [r1]
 800be32:	fa1f fe82 	uxth.w	lr, r2
 800be36:	fa1f f38c 	uxth.w	r3, ip
 800be3a:	eba3 030e 	sub.w	r3, r3, lr
 800be3e:	4403      	add	r3, r0
 800be40:	0c12      	lsrs	r2, r2, #16
 800be42:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800be46:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800be4a:	b29b      	uxth	r3, r3
 800be4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be50:	45c1      	cmp	r9, r8
 800be52:	f841 3b04 	str.w	r3, [r1], #4
 800be56:	ea4f 4022 	mov.w	r0, r2, asr #16
 800be5a:	d2e6      	bcs.n	800be2a <quorem+0xa4>
 800be5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be60:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be64:	b922      	cbnz	r2, 800be70 <quorem+0xea>
 800be66:	3b04      	subs	r3, #4
 800be68:	429d      	cmp	r5, r3
 800be6a:	461a      	mov	r2, r3
 800be6c:	d30b      	bcc.n	800be86 <quorem+0x100>
 800be6e:	613c      	str	r4, [r7, #16]
 800be70:	3601      	adds	r6, #1
 800be72:	4630      	mov	r0, r6
 800be74:	b003      	add	sp, #12
 800be76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be7a:	6812      	ldr	r2, [r2, #0]
 800be7c:	3b04      	subs	r3, #4
 800be7e:	2a00      	cmp	r2, #0
 800be80:	d1cb      	bne.n	800be1a <quorem+0x94>
 800be82:	3c01      	subs	r4, #1
 800be84:	e7c6      	b.n	800be14 <quorem+0x8e>
 800be86:	6812      	ldr	r2, [r2, #0]
 800be88:	3b04      	subs	r3, #4
 800be8a:	2a00      	cmp	r2, #0
 800be8c:	d1ef      	bne.n	800be6e <quorem+0xe8>
 800be8e:	3c01      	subs	r4, #1
 800be90:	e7ea      	b.n	800be68 <quorem+0xe2>
 800be92:	2000      	movs	r0, #0
 800be94:	e7ee      	b.n	800be74 <quorem+0xee>
	...

0800be98 <_dtoa_r>:
 800be98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be9c:	69c7      	ldr	r7, [r0, #28]
 800be9e:	b097      	sub	sp, #92	@ 0x5c
 800bea0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800bea4:	ec55 4b10 	vmov	r4, r5, d0
 800bea8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800beaa:	9107      	str	r1, [sp, #28]
 800beac:	4681      	mov	r9, r0
 800beae:	920c      	str	r2, [sp, #48]	@ 0x30
 800beb0:	9311      	str	r3, [sp, #68]	@ 0x44
 800beb2:	b97f      	cbnz	r7, 800bed4 <_dtoa_r+0x3c>
 800beb4:	2010      	movs	r0, #16
 800beb6:	f7fe ffb3 	bl	800ae20 <malloc>
 800beba:	4602      	mov	r2, r0
 800bebc:	f8c9 001c 	str.w	r0, [r9, #28]
 800bec0:	b920      	cbnz	r0, 800becc <_dtoa_r+0x34>
 800bec2:	4ba9      	ldr	r3, [pc, #676]	@ (800c168 <_dtoa_r+0x2d0>)
 800bec4:	21ef      	movs	r1, #239	@ 0xef
 800bec6:	48a9      	ldr	r0, [pc, #676]	@ (800c16c <_dtoa_r+0x2d4>)
 800bec8:	f001 fbec 	bl	800d6a4 <__assert_func>
 800becc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bed0:	6007      	str	r7, [r0, #0]
 800bed2:	60c7      	str	r7, [r0, #12]
 800bed4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bed8:	6819      	ldr	r1, [r3, #0]
 800beda:	b159      	cbz	r1, 800bef4 <_dtoa_r+0x5c>
 800bedc:	685a      	ldr	r2, [r3, #4]
 800bede:	604a      	str	r2, [r1, #4]
 800bee0:	2301      	movs	r3, #1
 800bee2:	4093      	lsls	r3, r2
 800bee4:	608b      	str	r3, [r1, #8]
 800bee6:	4648      	mov	r0, r9
 800bee8:	f000 fe30 	bl	800cb4c <_Bfree>
 800beec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bef0:	2200      	movs	r2, #0
 800bef2:	601a      	str	r2, [r3, #0]
 800bef4:	1e2b      	subs	r3, r5, #0
 800bef6:	bfb9      	ittee	lt
 800bef8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800befc:	9305      	strlt	r3, [sp, #20]
 800befe:	2300      	movge	r3, #0
 800bf00:	6033      	strge	r3, [r6, #0]
 800bf02:	9f05      	ldr	r7, [sp, #20]
 800bf04:	4b9a      	ldr	r3, [pc, #616]	@ (800c170 <_dtoa_r+0x2d8>)
 800bf06:	bfbc      	itt	lt
 800bf08:	2201      	movlt	r2, #1
 800bf0a:	6032      	strlt	r2, [r6, #0]
 800bf0c:	43bb      	bics	r3, r7
 800bf0e:	d112      	bne.n	800bf36 <_dtoa_r+0x9e>
 800bf10:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bf12:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bf16:	6013      	str	r3, [r2, #0]
 800bf18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bf1c:	4323      	orrs	r3, r4
 800bf1e:	f000 855a 	beq.w	800c9d6 <_dtoa_r+0xb3e>
 800bf22:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bf24:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c184 <_dtoa_r+0x2ec>
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	f000 855c 	beq.w	800c9e6 <_dtoa_r+0xb4e>
 800bf2e:	f10a 0303 	add.w	r3, sl, #3
 800bf32:	f000 bd56 	b.w	800c9e2 <_dtoa_r+0xb4a>
 800bf36:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	ec51 0b17 	vmov	r0, r1, d7
 800bf40:	2300      	movs	r3, #0
 800bf42:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800bf46:	f7f4 fdcf 	bl	8000ae8 <__aeabi_dcmpeq>
 800bf4a:	4680      	mov	r8, r0
 800bf4c:	b158      	cbz	r0, 800bf66 <_dtoa_r+0xce>
 800bf4e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bf50:	2301      	movs	r3, #1
 800bf52:	6013      	str	r3, [r2, #0]
 800bf54:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bf56:	b113      	cbz	r3, 800bf5e <_dtoa_r+0xc6>
 800bf58:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bf5a:	4b86      	ldr	r3, [pc, #536]	@ (800c174 <_dtoa_r+0x2dc>)
 800bf5c:	6013      	str	r3, [r2, #0]
 800bf5e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c188 <_dtoa_r+0x2f0>
 800bf62:	f000 bd40 	b.w	800c9e6 <_dtoa_r+0xb4e>
 800bf66:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800bf6a:	aa14      	add	r2, sp, #80	@ 0x50
 800bf6c:	a915      	add	r1, sp, #84	@ 0x54
 800bf6e:	4648      	mov	r0, r9
 800bf70:	f001 f8ce 	bl	800d110 <__d2b>
 800bf74:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bf78:	9002      	str	r0, [sp, #8]
 800bf7a:	2e00      	cmp	r6, #0
 800bf7c:	d078      	beq.n	800c070 <_dtoa_r+0x1d8>
 800bf7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf80:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800bf84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bf8c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bf90:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bf94:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bf98:	4619      	mov	r1, r3
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	4b76      	ldr	r3, [pc, #472]	@ (800c178 <_dtoa_r+0x2e0>)
 800bf9e:	f7f4 f983 	bl	80002a8 <__aeabi_dsub>
 800bfa2:	a36b      	add	r3, pc, #428	@ (adr r3, 800c150 <_dtoa_r+0x2b8>)
 800bfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa8:	f7f4 fb36 	bl	8000618 <__aeabi_dmul>
 800bfac:	a36a      	add	r3, pc, #424	@ (adr r3, 800c158 <_dtoa_r+0x2c0>)
 800bfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb2:	f7f4 f97b 	bl	80002ac <__adddf3>
 800bfb6:	4604      	mov	r4, r0
 800bfb8:	4630      	mov	r0, r6
 800bfba:	460d      	mov	r5, r1
 800bfbc:	f7f4 fac2 	bl	8000544 <__aeabi_i2d>
 800bfc0:	a367      	add	r3, pc, #412	@ (adr r3, 800c160 <_dtoa_r+0x2c8>)
 800bfc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc6:	f7f4 fb27 	bl	8000618 <__aeabi_dmul>
 800bfca:	4602      	mov	r2, r0
 800bfcc:	460b      	mov	r3, r1
 800bfce:	4620      	mov	r0, r4
 800bfd0:	4629      	mov	r1, r5
 800bfd2:	f7f4 f96b 	bl	80002ac <__adddf3>
 800bfd6:	4604      	mov	r4, r0
 800bfd8:	460d      	mov	r5, r1
 800bfda:	f7f4 fdcd 	bl	8000b78 <__aeabi_d2iz>
 800bfde:	2200      	movs	r2, #0
 800bfe0:	4607      	mov	r7, r0
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	4620      	mov	r0, r4
 800bfe6:	4629      	mov	r1, r5
 800bfe8:	f7f4 fd88 	bl	8000afc <__aeabi_dcmplt>
 800bfec:	b140      	cbz	r0, 800c000 <_dtoa_r+0x168>
 800bfee:	4638      	mov	r0, r7
 800bff0:	f7f4 faa8 	bl	8000544 <__aeabi_i2d>
 800bff4:	4622      	mov	r2, r4
 800bff6:	462b      	mov	r3, r5
 800bff8:	f7f4 fd76 	bl	8000ae8 <__aeabi_dcmpeq>
 800bffc:	b900      	cbnz	r0, 800c000 <_dtoa_r+0x168>
 800bffe:	3f01      	subs	r7, #1
 800c000:	2f16      	cmp	r7, #22
 800c002:	d852      	bhi.n	800c0aa <_dtoa_r+0x212>
 800c004:	4b5d      	ldr	r3, [pc, #372]	@ (800c17c <_dtoa_r+0x2e4>)
 800c006:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c012:	f7f4 fd73 	bl	8000afc <__aeabi_dcmplt>
 800c016:	2800      	cmp	r0, #0
 800c018:	d049      	beq.n	800c0ae <_dtoa_r+0x216>
 800c01a:	3f01      	subs	r7, #1
 800c01c:	2300      	movs	r3, #0
 800c01e:	9310      	str	r3, [sp, #64]	@ 0x40
 800c020:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c022:	1b9b      	subs	r3, r3, r6
 800c024:	1e5a      	subs	r2, r3, #1
 800c026:	bf45      	ittet	mi
 800c028:	f1c3 0301 	rsbmi	r3, r3, #1
 800c02c:	9300      	strmi	r3, [sp, #0]
 800c02e:	2300      	movpl	r3, #0
 800c030:	2300      	movmi	r3, #0
 800c032:	9206      	str	r2, [sp, #24]
 800c034:	bf54      	ite	pl
 800c036:	9300      	strpl	r3, [sp, #0]
 800c038:	9306      	strmi	r3, [sp, #24]
 800c03a:	2f00      	cmp	r7, #0
 800c03c:	db39      	blt.n	800c0b2 <_dtoa_r+0x21a>
 800c03e:	9b06      	ldr	r3, [sp, #24]
 800c040:	970d      	str	r7, [sp, #52]	@ 0x34
 800c042:	443b      	add	r3, r7
 800c044:	9306      	str	r3, [sp, #24]
 800c046:	2300      	movs	r3, #0
 800c048:	9308      	str	r3, [sp, #32]
 800c04a:	9b07      	ldr	r3, [sp, #28]
 800c04c:	2b09      	cmp	r3, #9
 800c04e:	d863      	bhi.n	800c118 <_dtoa_r+0x280>
 800c050:	2b05      	cmp	r3, #5
 800c052:	bfc4      	itt	gt
 800c054:	3b04      	subgt	r3, #4
 800c056:	9307      	strgt	r3, [sp, #28]
 800c058:	9b07      	ldr	r3, [sp, #28]
 800c05a:	f1a3 0302 	sub.w	r3, r3, #2
 800c05e:	bfcc      	ite	gt
 800c060:	2400      	movgt	r4, #0
 800c062:	2401      	movle	r4, #1
 800c064:	2b03      	cmp	r3, #3
 800c066:	d863      	bhi.n	800c130 <_dtoa_r+0x298>
 800c068:	e8df f003 	tbb	[pc, r3]
 800c06c:	2b375452 	.word	0x2b375452
 800c070:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c074:	441e      	add	r6, r3
 800c076:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c07a:	2b20      	cmp	r3, #32
 800c07c:	bfc1      	itttt	gt
 800c07e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c082:	409f      	lslgt	r7, r3
 800c084:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c088:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c08c:	bfd6      	itet	le
 800c08e:	f1c3 0320 	rsble	r3, r3, #32
 800c092:	ea47 0003 	orrgt.w	r0, r7, r3
 800c096:	fa04 f003 	lslle.w	r0, r4, r3
 800c09a:	f7f4 fa43 	bl	8000524 <__aeabi_ui2d>
 800c09e:	2201      	movs	r2, #1
 800c0a0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c0a4:	3e01      	subs	r6, #1
 800c0a6:	9212      	str	r2, [sp, #72]	@ 0x48
 800c0a8:	e776      	b.n	800bf98 <_dtoa_r+0x100>
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	e7b7      	b.n	800c01e <_dtoa_r+0x186>
 800c0ae:	9010      	str	r0, [sp, #64]	@ 0x40
 800c0b0:	e7b6      	b.n	800c020 <_dtoa_r+0x188>
 800c0b2:	9b00      	ldr	r3, [sp, #0]
 800c0b4:	1bdb      	subs	r3, r3, r7
 800c0b6:	9300      	str	r3, [sp, #0]
 800c0b8:	427b      	negs	r3, r7
 800c0ba:	9308      	str	r3, [sp, #32]
 800c0bc:	2300      	movs	r3, #0
 800c0be:	930d      	str	r3, [sp, #52]	@ 0x34
 800c0c0:	e7c3      	b.n	800c04a <_dtoa_r+0x1b2>
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c0c8:	eb07 0b03 	add.w	fp, r7, r3
 800c0cc:	f10b 0301 	add.w	r3, fp, #1
 800c0d0:	2b01      	cmp	r3, #1
 800c0d2:	9303      	str	r3, [sp, #12]
 800c0d4:	bfb8      	it	lt
 800c0d6:	2301      	movlt	r3, #1
 800c0d8:	e006      	b.n	800c0e8 <_dtoa_r+0x250>
 800c0da:	2301      	movs	r3, #1
 800c0dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	dd28      	ble.n	800c136 <_dtoa_r+0x29e>
 800c0e4:	469b      	mov	fp, r3
 800c0e6:	9303      	str	r3, [sp, #12]
 800c0e8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c0ec:	2100      	movs	r1, #0
 800c0ee:	2204      	movs	r2, #4
 800c0f0:	f102 0514 	add.w	r5, r2, #20
 800c0f4:	429d      	cmp	r5, r3
 800c0f6:	d926      	bls.n	800c146 <_dtoa_r+0x2ae>
 800c0f8:	6041      	str	r1, [r0, #4]
 800c0fa:	4648      	mov	r0, r9
 800c0fc:	f000 fce6 	bl	800cacc <_Balloc>
 800c100:	4682      	mov	sl, r0
 800c102:	2800      	cmp	r0, #0
 800c104:	d142      	bne.n	800c18c <_dtoa_r+0x2f4>
 800c106:	4b1e      	ldr	r3, [pc, #120]	@ (800c180 <_dtoa_r+0x2e8>)
 800c108:	4602      	mov	r2, r0
 800c10a:	f240 11af 	movw	r1, #431	@ 0x1af
 800c10e:	e6da      	b.n	800bec6 <_dtoa_r+0x2e>
 800c110:	2300      	movs	r3, #0
 800c112:	e7e3      	b.n	800c0dc <_dtoa_r+0x244>
 800c114:	2300      	movs	r3, #0
 800c116:	e7d5      	b.n	800c0c4 <_dtoa_r+0x22c>
 800c118:	2401      	movs	r4, #1
 800c11a:	2300      	movs	r3, #0
 800c11c:	9307      	str	r3, [sp, #28]
 800c11e:	9409      	str	r4, [sp, #36]	@ 0x24
 800c120:	f04f 3bff 	mov.w	fp, #4294967295
 800c124:	2200      	movs	r2, #0
 800c126:	f8cd b00c 	str.w	fp, [sp, #12]
 800c12a:	2312      	movs	r3, #18
 800c12c:	920c      	str	r2, [sp, #48]	@ 0x30
 800c12e:	e7db      	b.n	800c0e8 <_dtoa_r+0x250>
 800c130:	2301      	movs	r3, #1
 800c132:	9309      	str	r3, [sp, #36]	@ 0x24
 800c134:	e7f4      	b.n	800c120 <_dtoa_r+0x288>
 800c136:	f04f 0b01 	mov.w	fp, #1
 800c13a:	f8cd b00c 	str.w	fp, [sp, #12]
 800c13e:	465b      	mov	r3, fp
 800c140:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c144:	e7d0      	b.n	800c0e8 <_dtoa_r+0x250>
 800c146:	3101      	adds	r1, #1
 800c148:	0052      	lsls	r2, r2, #1
 800c14a:	e7d1      	b.n	800c0f0 <_dtoa_r+0x258>
 800c14c:	f3af 8000 	nop.w
 800c150:	636f4361 	.word	0x636f4361
 800c154:	3fd287a7 	.word	0x3fd287a7
 800c158:	8b60c8b3 	.word	0x8b60c8b3
 800c15c:	3fc68a28 	.word	0x3fc68a28
 800c160:	509f79fb 	.word	0x509f79fb
 800c164:	3fd34413 	.word	0x3fd34413
 800c168:	0800e889 	.word	0x0800e889
 800c16c:	0800e8a0 	.word	0x0800e8a0
 800c170:	7ff00000 	.word	0x7ff00000
 800c174:	0800e859 	.word	0x0800e859
 800c178:	3ff80000 	.word	0x3ff80000
 800c17c:	0800e9f0 	.word	0x0800e9f0
 800c180:	0800e8f8 	.word	0x0800e8f8
 800c184:	0800e885 	.word	0x0800e885
 800c188:	0800e858 	.word	0x0800e858
 800c18c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c190:	6018      	str	r0, [r3, #0]
 800c192:	9b03      	ldr	r3, [sp, #12]
 800c194:	2b0e      	cmp	r3, #14
 800c196:	f200 80a1 	bhi.w	800c2dc <_dtoa_r+0x444>
 800c19a:	2c00      	cmp	r4, #0
 800c19c:	f000 809e 	beq.w	800c2dc <_dtoa_r+0x444>
 800c1a0:	2f00      	cmp	r7, #0
 800c1a2:	dd33      	ble.n	800c20c <_dtoa_r+0x374>
 800c1a4:	4b9c      	ldr	r3, [pc, #624]	@ (800c418 <_dtoa_r+0x580>)
 800c1a6:	f007 020f 	and.w	r2, r7, #15
 800c1aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1ae:	ed93 7b00 	vldr	d7, [r3]
 800c1b2:	05f8      	lsls	r0, r7, #23
 800c1b4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c1b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c1bc:	d516      	bpl.n	800c1ec <_dtoa_r+0x354>
 800c1be:	4b97      	ldr	r3, [pc, #604]	@ (800c41c <_dtoa_r+0x584>)
 800c1c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c1c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c1c8:	f7f4 fb50 	bl	800086c <__aeabi_ddiv>
 800c1cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c1d0:	f004 040f 	and.w	r4, r4, #15
 800c1d4:	2603      	movs	r6, #3
 800c1d6:	4d91      	ldr	r5, [pc, #580]	@ (800c41c <_dtoa_r+0x584>)
 800c1d8:	b954      	cbnz	r4, 800c1f0 <_dtoa_r+0x358>
 800c1da:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c1de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1e2:	f7f4 fb43 	bl	800086c <__aeabi_ddiv>
 800c1e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c1ea:	e028      	b.n	800c23e <_dtoa_r+0x3a6>
 800c1ec:	2602      	movs	r6, #2
 800c1ee:	e7f2      	b.n	800c1d6 <_dtoa_r+0x33e>
 800c1f0:	07e1      	lsls	r1, r4, #31
 800c1f2:	d508      	bpl.n	800c206 <_dtoa_r+0x36e>
 800c1f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c1f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c1fc:	f7f4 fa0c 	bl	8000618 <__aeabi_dmul>
 800c200:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c204:	3601      	adds	r6, #1
 800c206:	1064      	asrs	r4, r4, #1
 800c208:	3508      	adds	r5, #8
 800c20a:	e7e5      	b.n	800c1d8 <_dtoa_r+0x340>
 800c20c:	f000 80af 	beq.w	800c36e <_dtoa_r+0x4d6>
 800c210:	427c      	negs	r4, r7
 800c212:	4b81      	ldr	r3, [pc, #516]	@ (800c418 <_dtoa_r+0x580>)
 800c214:	4d81      	ldr	r5, [pc, #516]	@ (800c41c <_dtoa_r+0x584>)
 800c216:	f004 020f 	and.w	r2, r4, #15
 800c21a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c222:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c226:	f7f4 f9f7 	bl	8000618 <__aeabi_dmul>
 800c22a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c22e:	1124      	asrs	r4, r4, #4
 800c230:	2300      	movs	r3, #0
 800c232:	2602      	movs	r6, #2
 800c234:	2c00      	cmp	r4, #0
 800c236:	f040 808f 	bne.w	800c358 <_dtoa_r+0x4c0>
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d1d3      	bne.n	800c1e6 <_dtoa_r+0x34e>
 800c23e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c240:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c244:	2b00      	cmp	r3, #0
 800c246:	f000 8094 	beq.w	800c372 <_dtoa_r+0x4da>
 800c24a:	4b75      	ldr	r3, [pc, #468]	@ (800c420 <_dtoa_r+0x588>)
 800c24c:	2200      	movs	r2, #0
 800c24e:	4620      	mov	r0, r4
 800c250:	4629      	mov	r1, r5
 800c252:	f7f4 fc53 	bl	8000afc <__aeabi_dcmplt>
 800c256:	2800      	cmp	r0, #0
 800c258:	f000 808b 	beq.w	800c372 <_dtoa_r+0x4da>
 800c25c:	9b03      	ldr	r3, [sp, #12]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	f000 8087 	beq.w	800c372 <_dtoa_r+0x4da>
 800c264:	f1bb 0f00 	cmp.w	fp, #0
 800c268:	dd34      	ble.n	800c2d4 <_dtoa_r+0x43c>
 800c26a:	4620      	mov	r0, r4
 800c26c:	4b6d      	ldr	r3, [pc, #436]	@ (800c424 <_dtoa_r+0x58c>)
 800c26e:	2200      	movs	r2, #0
 800c270:	4629      	mov	r1, r5
 800c272:	f7f4 f9d1 	bl	8000618 <__aeabi_dmul>
 800c276:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c27a:	f107 38ff 	add.w	r8, r7, #4294967295
 800c27e:	3601      	adds	r6, #1
 800c280:	465c      	mov	r4, fp
 800c282:	4630      	mov	r0, r6
 800c284:	f7f4 f95e 	bl	8000544 <__aeabi_i2d>
 800c288:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c28c:	f7f4 f9c4 	bl	8000618 <__aeabi_dmul>
 800c290:	4b65      	ldr	r3, [pc, #404]	@ (800c428 <_dtoa_r+0x590>)
 800c292:	2200      	movs	r2, #0
 800c294:	f7f4 f80a 	bl	80002ac <__adddf3>
 800c298:	4605      	mov	r5, r0
 800c29a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c29e:	2c00      	cmp	r4, #0
 800c2a0:	d16a      	bne.n	800c378 <_dtoa_r+0x4e0>
 800c2a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2a6:	4b61      	ldr	r3, [pc, #388]	@ (800c42c <_dtoa_r+0x594>)
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	f7f3 fffd 	bl	80002a8 <__aeabi_dsub>
 800c2ae:	4602      	mov	r2, r0
 800c2b0:	460b      	mov	r3, r1
 800c2b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c2b6:	462a      	mov	r2, r5
 800c2b8:	4633      	mov	r3, r6
 800c2ba:	f7f4 fc3d 	bl	8000b38 <__aeabi_dcmpgt>
 800c2be:	2800      	cmp	r0, #0
 800c2c0:	f040 8298 	bne.w	800c7f4 <_dtoa_r+0x95c>
 800c2c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2c8:	462a      	mov	r2, r5
 800c2ca:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c2ce:	f7f4 fc15 	bl	8000afc <__aeabi_dcmplt>
 800c2d2:	bb38      	cbnz	r0, 800c324 <_dtoa_r+0x48c>
 800c2d4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c2d8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c2dc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	f2c0 8157 	blt.w	800c592 <_dtoa_r+0x6fa>
 800c2e4:	2f0e      	cmp	r7, #14
 800c2e6:	f300 8154 	bgt.w	800c592 <_dtoa_r+0x6fa>
 800c2ea:	4b4b      	ldr	r3, [pc, #300]	@ (800c418 <_dtoa_r+0x580>)
 800c2ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c2f0:	ed93 7b00 	vldr	d7, [r3]
 800c2f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	ed8d 7b00 	vstr	d7, [sp]
 800c2fc:	f280 80e5 	bge.w	800c4ca <_dtoa_r+0x632>
 800c300:	9b03      	ldr	r3, [sp, #12]
 800c302:	2b00      	cmp	r3, #0
 800c304:	f300 80e1 	bgt.w	800c4ca <_dtoa_r+0x632>
 800c308:	d10c      	bne.n	800c324 <_dtoa_r+0x48c>
 800c30a:	4b48      	ldr	r3, [pc, #288]	@ (800c42c <_dtoa_r+0x594>)
 800c30c:	2200      	movs	r2, #0
 800c30e:	ec51 0b17 	vmov	r0, r1, d7
 800c312:	f7f4 f981 	bl	8000618 <__aeabi_dmul>
 800c316:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c31a:	f7f4 fc03 	bl	8000b24 <__aeabi_dcmpge>
 800c31e:	2800      	cmp	r0, #0
 800c320:	f000 8266 	beq.w	800c7f0 <_dtoa_r+0x958>
 800c324:	2400      	movs	r4, #0
 800c326:	4625      	mov	r5, r4
 800c328:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c32a:	4656      	mov	r6, sl
 800c32c:	ea6f 0803 	mvn.w	r8, r3
 800c330:	2700      	movs	r7, #0
 800c332:	4621      	mov	r1, r4
 800c334:	4648      	mov	r0, r9
 800c336:	f000 fc09 	bl	800cb4c <_Bfree>
 800c33a:	2d00      	cmp	r5, #0
 800c33c:	f000 80bd 	beq.w	800c4ba <_dtoa_r+0x622>
 800c340:	b12f      	cbz	r7, 800c34e <_dtoa_r+0x4b6>
 800c342:	42af      	cmp	r7, r5
 800c344:	d003      	beq.n	800c34e <_dtoa_r+0x4b6>
 800c346:	4639      	mov	r1, r7
 800c348:	4648      	mov	r0, r9
 800c34a:	f000 fbff 	bl	800cb4c <_Bfree>
 800c34e:	4629      	mov	r1, r5
 800c350:	4648      	mov	r0, r9
 800c352:	f000 fbfb 	bl	800cb4c <_Bfree>
 800c356:	e0b0      	b.n	800c4ba <_dtoa_r+0x622>
 800c358:	07e2      	lsls	r2, r4, #31
 800c35a:	d505      	bpl.n	800c368 <_dtoa_r+0x4d0>
 800c35c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c360:	f7f4 f95a 	bl	8000618 <__aeabi_dmul>
 800c364:	3601      	adds	r6, #1
 800c366:	2301      	movs	r3, #1
 800c368:	1064      	asrs	r4, r4, #1
 800c36a:	3508      	adds	r5, #8
 800c36c:	e762      	b.n	800c234 <_dtoa_r+0x39c>
 800c36e:	2602      	movs	r6, #2
 800c370:	e765      	b.n	800c23e <_dtoa_r+0x3a6>
 800c372:	9c03      	ldr	r4, [sp, #12]
 800c374:	46b8      	mov	r8, r7
 800c376:	e784      	b.n	800c282 <_dtoa_r+0x3ea>
 800c378:	4b27      	ldr	r3, [pc, #156]	@ (800c418 <_dtoa_r+0x580>)
 800c37a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c37c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c380:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c384:	4454      	add	r4, sl
 800c386:	2900      	cmp	r1, #0
 800c388:	d054      	beq.n	800c434 <_dtoa_r+0x59c>
 800c38a:	4929      	ldr	r1, [pc, #164]	@ (800c430 <_dtoa_r+0x598>)
 800c38c:	2000      	movs	r0, #0
 800c38e:	f7f4 fa6d 	bl	800086c <__aeabi_ddiv>
 800c392:	4633      	mov	r3, r6
 800c394:	462a      	mov	r2, r5
 800c396:	f7f3 ff87 	bl	80002a8 <__aeabi_dsub>
 800c39a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c39e:	4656      	mov	r6, sl
 800c3a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3a4:	f7f4 fbe8 	bl	8000b78 <__aeabi_d2iz>
 800c3a8:	4605      	mov	r5, r0
 800c3aa:	f7f4 f8cb 	bl	8000544 <__aeabi_i2d>
 800c3ae:	4602      	mov	r2, r0
 800c3b0:	460b      	mov	r3, r1
 800c3b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3b6:	f7f3 ff77 	bl	80002a8 <__aeabi_dsub>
 800c3ba:	3530      	adds	r5, #48	@ 0x30
 800c3bc:	4602      	mov	r2, r0
 800c3be:	460b      	mov	r3, r1
 800c3c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c3c4:	f806 5b01 	strb.w	r5, [r6], #1
 800c3c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c3cc:	f7f4 fb96 	bl	8000afc <__aeabi_dcmplt>
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	d172      	bne.n	800c4ba <_dtoa_r+0x622>
 800c3d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3d8:	4911      	ldr	r1, [pc, #68]	@ (800c420 <_dtoa_r+0x588>)
 800c3da:	2000      	movs	r0, #0
 800c3dc:	f7f3 ff64 	bl	80002a8 <__aeabi_dsub>
 800c3e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c3e4:	f7f4 fb8a 	bl	8000afc <__aeabi_dcmplt>
 800c3e8:	2800      	cmp	r0, #0
 800c3ea:	f040 80b4 	bne.w	800c556 <_dtoa_r+0x6be>
 800c3ee:	42a6      	cmp	r6, r4
 800c3f0:	f43f af70 	beq.w	800c2d4 <_dtoa_r+0x43c>
 800c3f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c3f8:	4b0a      	ldr	r3, [pc, #40]	@ (800c424 <_dtoa_r+0x58c>)
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	f7f4 f90c 	bl	8000618 <__aeabi_dmul>
 800c400:	4b08      	ldr	r3, [pc, #32]	@ (800c424 <_dtoa_r+0x58c>)
 800c402:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c406:	2200      	movs	r2, #0
 800c408:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c40c:	f7f4 f904 	bl	8000618 <__aeabi_dmul>
 800c410:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c414:	e7c4      	b.n	800c3a0 <_dtoa_r+0x508>
 800c416:	bf00      	nop
 800c418:	0800e9f0 	.word	0x0800e9f0
 800c41c:	0800e9c8 	.word	0x0800e9c8
 800c420:	3ff00000 	.word	0x3ff00000
 800c424:	40240000 	.word	0x40240000
 800c428:	401c0000 	.word	0x401c0000
 800c42c:	40140000 	.word	0x40140000
 800c430:	3fe00000 	.word	0x3fe00000
 800c434:	4631      	mov	r1, r6
 800c436:	4628      	mov	r0, r5
 800c438:	f7f4 f8ee 	bl	8000618 <__aeabi_dmul>
 800c43c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c440:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c442:	4656      	mov	r6, sl
 800c444:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c448:	f7f4 fb96 	bl	8000b78 <__aeabi_d2iz>
 800c44c:	4605      	mov	r5, r0
 800c44e:	f7f4 f879 	bl	8000544 <__aeabi_i2d>
 800c452:	4602      	mov	r2, r0
 800c454:	460b      	mov	r3, r1
 800c456:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c45a:	f7f3 ff25 	bl	80002a8 <__aeabi_dsub>
 800c45e:	3530      	adds	r5, #48	@ 0x30
 800c460:	f806 5b01 	strb.w	r5, [r6], #1
 800c464:	4602      	mov	r2, r0
 800c466:	460b      	mov	r3, r1
 800c468:	42a6      	cmp	r6, r4
 800c46a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c46e:	f04f 0200 	mov.w	r2, #0
 800c472:	d124      	bne.n	800c4be <_dtoa_r+0x626>
 800c474:	4baf      	ldr	r3, [pc, #700]	@ (800c734 <_dtoa_r+0x89c>)
 800c476:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c47a:	f7f3 ff17 	bl	80002ac <__adddf3>
 800c47e:	4602      	mov	r2, r0
 800c480:	460b      	mov	r3, r1
 800c482:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c486:	f7f4 fb57 	bl	8000b38 <__aeabi_dcmpgt>
 800c48a:	2800      	cmp	r0, #0
 800c48c:	d163      	bne.n	800c556 <_dtoa_r+0x6be>
 800c48e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c492:	49a8      	ldr	r1, [pc, #672]	@ (800c734 <_dtoa_r+0x89c>)
 800c494:	2000      	movs	r0, #0
 800c496:	f7f3 ff07 	bl	80002a8 <__aeabi_dsub>
 800c49a:	4602      	mov	r2, r0
 800c49c:	460b      	mov	r3, r1
 800c49e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c4a2:	f7f4 fb2b 	bl	8000afc <__aeabi_dcmplt>
 800c4a6:	2800      	cmp	r0, #0
 800c4a8:	f43f af14 	beq.w	800c2d4 <_dtoa_r+0x43c>
 800c4ac:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c4ae:	1e73      	subs	r3, r6, #1
 800c4b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c4b2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c4b6:	2b30      	cmp	r3, #48	@ 0x30
 800c4b8:	d0f8      	beq.n	800c4ac <_dtoa_r+0x614>
 800c4ba:	4647      	mov	r7, r8
 800c4bc:	e03b      	b.n	800c536 <_dtoa_r+0x69e>
 800c4be:	4b9e      	ldr	r3, [pc, #632]	@ (800c738 <_dtoa_r+0x8a0>)
 800c4c0:	f7f4 f8aa 	bl	8000618 <__aeabi_dmul>
 800c4c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c4c8:	e7bc      	b.n	800c444 <_dtoa_r+0x5ac>
 800c4ca:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c4ce:	4656      	mov	r6, sl
 800c4d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4d4:	4620      	mov	r0, r4
 800c4d6:	4629      	mov	r1, r5
 800c4d8:	f7f4 f9c8 	bl	800086c <__aeabi_ddiv>
 800c4dc:	f7f4 fb4c 	bl	8000b78 <__aeabi_d2iz>
 800c4e0:	4680      	mov	r8, r0
 800c4e2:	f7f4 f82f 	bl	8000544 <__aeabi_i2d>
 800c4e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4ea:	f7f4 f895 	bl	8000618 <__aeabi_dmul>
 800c4ee:	4602      	mov	r2, r0
 800c4f0:	460b      	mov	r3, r1
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	4629      	mov	r1, r5
 800c4f6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c4fa:	f7f3 fed5 	bl	80002a8 <__aeabi_dsub>
 800c4fe:	f806 4b01 	strb.w	r4, [r6], #1
 800c502:	9d03      	ldr	r5, [sp, #12]
 800c504:	eba6 040a 	sub.w	r4, r6, sl
 800c508:	42a5      	cmp	r5, r4
 800c50a:	4602      	mov	r2, r0
 800c50c:	460b      	mov	r3, r1
 800c50e:	d133      	bne.n	800c578 <_dtoa_r+0x6e0>
 800c510:	f7f3 fecc 	bl	80002ac <__adddf3>
 800c514:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c518:	4604      	mov	r4, r0
 800c51a:	460d      	mov	r5, r1
 800c51c:	f7f4 fb0c 	bl	8000b38 <__aeabi_dcmpgt>
 800c520:	b9c0      	cbnz	r0, 800c554 <_dtoa_r+0x6bc>
 800c522:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c526:	4620      	mov	r0, r4
 800c528:	4629      	mov	r1, r5
 800c52a:	f7f4 fadd 	bl	8000ae8 <__aeabi_dcmpeq>
 800c52e:	b110      	cbz	r0, 800c536 <_dtoa_r+0x69e>
 800c530:	f018 0f01 	tst.w	r8, #1
 800c534:	d10e      	bne.n	800c554 <_dtoa_r+0x6bc>
 800c536:	9902      	ldr	r1, [sp, #8]
 800c538:	4648      	mov	r0, r9
 800c53a:	f000 fb07 	bl	800cb4c <_Bfree>
 800c53e:	2300      	movs	r3, #0
 800c540:	7033      	strb	r3, [r6, #0]
 800c542:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c544:	3701      	adds	r7, #1
 800c546:	601f      	str	r7, [r3, #0]
 800c548:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	f000 824b 	beq.w	800c9e6 <_dtoa_r+0xb4e>
 800c550:	601e      	str	r6, [r3, #0]
 800c552:	e248      	b.n	800c9e6 <_dtoa_r+0xb4e>
 800c554:	46b8      	mov	r8, r7
 800c556:	4633      	mov	r3, r6
 800c558:	461e      	mov	r6, r3
 800c55a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c55e:	2a39      	cmp	r2, #57	@ 0x39
 800c560:	d106      	bne.n	800c570 <_dtoa_r+0x6d8>
 800c562:	459a      	cmp	sl, r3
 800c564:	d1f8      	bne.n	800c558 <_dtoa_r+0x6c0>
 800c566:	2230      	movs	r2, #48	@ 0x30
 800c568:	f108 0801 	add.w	r8, r8, #1
 800c56c:	f88a 2000 	strb.w	r2, [sl]
 800c570:	781a      	ldrb	r2, [r3, #0]
 800c572:	3201      	adds	r2, #1
 800c574:	701a      	strb	r2, [r3, #0]
 800c576:	e7a0      	b.n	800c4ba <_dtoa_r+0x622>
 800c578:	4b6f      	ldr	r3, [pc, #444]	@ (800c738 <_dtoa_r+0x8a0>)
 800c57a:	2200      	movs	r2, #0
 800c57c:	f7f4 f84c 	bl	8000618 <__aeabi_dmul>
 800c580:	2200      	movs	r2, #0
 800c582:	2300      	movs	r3, #0
 800c584:	4604      	mov	r4, r0
 800c586:	460d      	mov	r5, r1
 800c588:	f7f4 faae 	bl	8000ae8 <__aeabi_dcmpeq>
 800c58c:	2800      	cmp	r0, #0
 800c58e:	d09f      	beq.n	800c4d0 <_dtoa_r+0x638>
 800c590:	e7d1      	b.n	800c536 <_dtoa_r+0x69e>
 800c592:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c594:	2a00      	cmp	r2, #0
 800c596:	f000 80ea 	beq.w	800c76e <_dtoa_r+0x8d6>
 800c59a:	9a07      	ldr	r2, [sp, #28]
 800c59c:	2a01      	cmp	r2, #1
 800c59e:	f300 80cd 	bgt.w	800c73c <_dtoa_r+0x8a4>
 800c5a2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c5a4:	2a00      	cmp	r2, #0
 800c5a6:	f000 80c1 	beq.w	800c72c <_dtoa_r+0x894>
 800c5aa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c5ae:	9c08      	ldr	r4, [sp, #32]
 800c5b0:	9e00      	ldr	r6, [sp, #0]
 800c5b2:	9a00      	ldr	r2, [sp, #0]
 800c5b4:	441a      	add	r2, r3
 800c5b6:	9200      	str	r2, [sp, #0]
 800c5b8:	9a06      	ldr	r2, [sp, #24]
 800c5ba:	2101      	movs	r1, #1
 800c5bc:	441a      	add	r2, r3
 800c5be:	4648      	mov	r0, r9
 800c5c0:	9206      	str	r2, [sp, #24]
 800c5c2:	f000 fb77 	bl	800ccb4 <__i2b>
 800c5c6:	4605      	mov	r5, r0
 800c5c8:	b166      	cbz	r6, 800c5e4 <_dtoa_r+0x74c>
 800c5ca:	9b06      	ldr	r3, [sp, #24]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	dd09      	ble.n	800c5e4 <_dtoa_r+0x74c>
 800c5d0:	42b3      	cmp	r3, r6
 800c5d2:	9a00      	ldr	r2, [sp, #0]
 800c5d4:	bfa8      	it	ge
 800c5d6:	4633      	movge	r3, r6
 800c5d8:	1ad2      	subs	r2, r2, r3
 800c5da:	9200      	str	r2, [sp, #0]
 800c5dc:	9a06      	ldr	r2, [sp, #24]
 800c5de:	1af6      	subs	r6, r6, r3
 800c5e0:	1ad3      	subs	r3, r2, r3
 800c5e2:	9306      	str	r3, [sp, #24]
 800c5e4:	9b08      	ldr	r3, [sp, #32]
 800c5e6:	b30b      	cbz	r3, 800c62c <_dtoa_r+0x794>
 800c5e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	f000 80c6 	beq.w	800c77c <_dtoa_r+0x8e4>
 800c5f0:	2c00      	cmp	r4, #0
 800c5f2:	f000 80c0 	beq.w	800c776 <_dtoa_r+0x8de>
 800c5f6:	4629      	mov	r1, r5
 800c5f8:	4622      	mov	r2, r4
 800c5fa:	4648      	mov	r0, r9
 800c5fc:	f000 fc12 	bl	800ce24 <__pow5mult>
 800c600:	9a02      	ldr	r2, [sp, #8]
 800c602:	4601      	mov	r1, r0
 800c604:	4605      	mov	r5, r0
 800c606:	4648      	mov	r0, r9
 800c608:	f000 fb6a 	bl	800cce0 <__multiply>
 800c60c:	9902      	ldr	r1, [sp, #8]
 800c60e:	4680      	mov	r8, r0
 800c610:	4648      	mov	r0, r9
 800c612:	f000 fa9b 	bl	800cb4c <_Bfree>
 800c616:	9b08      	ldr	r3, [sp, #32]
 800c618:	1b1b      	subs	r3, r3, r4
 800c61a:	9308      	str	r3, [sp, #32]
 800c61c:	f000 80b1 	beq.w	800c782 <_dtoa_r+0x8ea>
 800c620:	9a08      	ldr	r2, [sp, #32]
 800c622:	4641      	mov	r1, r8
 800c624:	4648      	mov	r0, r9
 800c626:	f000 fbfd 	bl	800ce24 <__pow5mult>
 800c62a:	9002      	str	r0, [sp, #8]
 800c62c:	2101      	movs	r1, #1
 800c62e:	4648      	mov	r0, r9
 800c630:	f000 fb40 	bl	800ccb4 <__i2b>
 800c634:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c636:	4604      	mov	r4, r0
 800c638:	2b00      	cmp	r3, #0
 800c63a:	f000 81d8 	beq.w	800c9ee <_dtoa_r+0xb56>
 800c63e:	461a      	mov	r2, r3
 800c640:	4601      	mov	r1, r0
 800c642:	4648      	mov	r0, r9
 800c644:	f000 fbee 	bl	800ce24 <__pow5mult>
 800c648:	9b07      	ldr	r3, [sp, #28]
 800c64a:	2b01      	cmp	r3, #1
 800c64c:	4604      	mov	r4, r0
 800c64e:	f300 809f 	bgt.w	800c790 <_dtoa_r+0x8f8>
 800c652:	9b04      	ldr	r3, [sp, #16]
 800c654:	2b00      	cmp	r3, #0
 800c656:	f040 8097 	bne.w	800c788 <_dtoa_r+0x8f0>
 800c65a:	9b05      	ldr	r3, [sp, #20]
 800c65c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c660:	2b00      	cmp	r3, #0
 800c662:	f040 8093 	bne.w	800c78c <_dtoa_r+0x8f4>
 800c666:	9b05      	ldr	r3, [sp, #20]
 800c668:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c66c:	0d1b      	lsrs	r3, r3, #20
 800c66e:	051b      	lsls	r3, r3, #20
 800c670:	b133      	cbz	r3, 800c680 <_dtoa_r+0x7e8>
 800c672:	9b00      	ldr	r3, [sp, #0]
 800c674:	3301      	adds	r3, #1
 800c676:	9300      	str	r3, [sp, #0]
 800c678:	9b06      	ldr	r3, [sp, #24]
 800c67a:	3301      	adds	r3, #1
 800c67c:	9306      	str	r3, [sp, #24]
 800c67e:	2301      	movs	r3, #1
 800c680:	9308      	str	r3, [sp, #32]
 800c682:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c684:	2b00      	cmp	r3, #0
 800c686:	f000 81b8 	beq.w	800c9fa <_dtoa_r+0xb62>
 800c68a:	6923      	ldr	r3, [r4, #16]
 800c68c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c690:	6918      	ldr	r0, [r3, #16]
 800c692:	f000 fac3 	bl	800cc1c <__hi0bits>
 800c696:	f1c0 0020 	rsb	r0, r0, #32
 800c69a:	9b06      	ldr	r3, [sp, #24]
 800c69c:	4418      	add	r0, r3
 800c69e:	f010 001f 	ands.w	r0, r0, #31
 800c6a2:	f000 8082 	beq.w	800c7aa <_dtoa_r+0x912>
 800c6a6:	f1c0 0320 	rsb	r3, r0, #32
 800c6aa:	2b04      	cmp	r3, #4
 800c6ac:	dd73      	ble.n	800c796 <_dtoa_r+0x8fe>
 800c6ae:	9b00      	ldr	r3, [sp, #0]
 800c6b0:	f1c0 001c 	rsb	r0, r0, #28
 800c6b4:	4403      	add	r3, r0
 800c6b6:	9300      	str	r3, [sp, #0]
 800c6b8:	9b06      	ldr	r3, [sp, #24]
 800c6ba:	4403      	add	r3, r0
 800c6bc:	4406      	add	r6, r0
 800c6be:	9306      	str	r3, [sp, #24]
 800c6c0:	9b00      	ldr	r3, [sp, #0]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	dd05      	ble.n	800c6d2 <_dtoa_r+0x83a>
 800c6c6:	9902      	ldr	r1, [sp, #8]
 800c6c8:	461a      	mov	r2, r3
 800c6ca:	4648      	mov	r0, r9
 800c6cc:	f000 fc04 	bl	800ced8 <__lshift>
 800c6d0:	9002      	str	r0, [sp, #8]
 800c6d2:	9b06      	ldr	r3, [sp, #24]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	dd05      	ble.n	800c6e4 <_dtoa_r+0x84c>
 800c6d8:	4621      	mov	r1, r4
 800c6da:	461a      	mov	r2, r3
 800c6dc:	4648      	mov	r0, r9
 800c6de:	f000 fbfb 	bl	800ced8 <__lshift>
 800c6e2:	4604      	mov	r4, r0
 800c6e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d061      	beq.n	800c7ae <_dtoa_r+0x916>
 800c6ea:	9802      	ldr	r0, [sp, #8]
 800c6ec:	4621      	mov	r1, r4
 800c6ee:	f000 fc5f 	bl	800cfb0 <__mcmp>
 800c6f2:	2800      	cmp	r0, #0
 800c6f4:	da5b      	bge.n	800c7ae <_dtoa_r+0x916>
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	9902      	ldr	r1, [sp, #8]
 800c6fa:	220a      	movs	r2, #10
 800c6fc:	4648      	mov	r0, r9
 800c6fe:	f000 fa47 	bl	800cb90 <__multadd>
 800c702:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c704:	9002      	str	r0, [sp, #8]
 800c706:	f107 38ff 	add.w	r8, r7, #4294967295
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	f000 8177 	beq.w	800c9fe <_dtoa_r+0xb66>
 800c710:	4629      	mov	r1, r5
 800c712:	2300      	movs	r3, #0
 800c714:	220a      	movs	r2, #10
 800c716:	4648      	mov	r0, r9
 800c718:	f000 fa3a 	bl	800cb90 <__multadd>
 800c71c:	f1bb 0f00 	cmp.w	fp, #0
 800c720:	4605      	mov	r5, r0
 800c722:	dc6f      	bgt.n	800c804 <_dtoa_r+0x96c>
 800c724:	9b07      	ldr	r3, [sp, #28]
 800c726:	2b02      	cmp	r3, #2
 800c728:	dc49      	bgt.n	800c7be <_dtoa_r+0x926>
 800c72a:	e06b      	b.n	800c804 <_dtoa_r+0x96c>
 800c72c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c72e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c732:	e73c      	b.n	800c5ae <_dtoa_r+0x716>
 800c734:	3fe00000 	.word	0x3fe00000
 800c738:	40240000 	.word	0x40240000
 800c73c:	9b03      	ldr	r3, [sp, #12]
 800c73e:	1e5c      	subs	r4, r3, #1
 800c740:	9b08      	ldr	r3, [sp, #32]
 800c742:	42a3      	cmp	r3, r4
 800c744:	db09      	blt.n	800c75a <_dtoa_r+0x8c2>
 800c746:	1b1c      	subs	r4, r3, r4
 800c748:	9b03      	ldr	r3, [sp, #12]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	f6bf af30 	bge.w	800c5b0 <_dtoa_r+0x718>
 800c750:	9b00      	ldr	r3, [sp, #0]
 800c752:	9a03      	ldr	r2, [sp, #12]
 800c754:	1a9e      	subs	r6, r3, r2
 800c756:	2300      	movs	r3, #0
 800c758:	e72b      	b.n	800c5b2 <_dtoa_r+0x71a>
 800c75a:	9b08      	ldr	r3, [sp, #32]
 800c75c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c75e:	9408      	str	r4, [sp, #32]
 800c760:	1ae3      	subs	r3, r4, r3
 800c762:	441a      	add	r2, r3
 800c764:	9e00      	ldr	r6, [sp, #0]
 800c766:	9b03      	ldr	r3, [sp, #12]
 800c768:	920d      	str	r2, [sp, #52]	@ 0x34
 800c76a:	2400      	movs	r4, #0
 800c76c:	e721      	b.n	800c5b2 <_dtoa_r+0x71a>
 800c76e:	9c08      	ldr	r4, [sp, #32]
 800c770:	9e00      	ldr	r6, [sp, #0]
 800c772:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c774:	e728      	b.n	800c5c8 <_dtoa_r+0x730>
 800c776:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c77a:	e751      	b.n	800c620 <_dtoa_r+0x788>
 800c77c:	9a08      	ldr	r2, [sp, #32]
 800c77e:	9902      	ldr	r1, [sp, #8]
 800c780:	e750      	b.n	800c624 <_dtoa_r+0x78c>
 800c782:	f8cd 8008 	str.w	r8, [sp, #8]
 800c786:	e751      	b.n	800c62c <_dtoa_r+0x794>
 800c788:	2300      	movs	r3, #0
 800c78a:	e779      	b.n	800c680 <_dtoa_r+0x7e8>
 800c78c:	9b04      	ldr	r3, [sp, #16]
 800c78e:	e777      	b.n	800c680 <_dtoa_r+0x7e8>
 800c790:	2300      	movs	r3, #0
 800c792:	9308      	str	r3, [sp, #32]
 800c794:	e779      	b.n	800c68a <_dtoa_r+0x7f2>
 800c796:	d093      	beq.n	800c6c0 <_dtoa_r+0x828>
 800c798:	9a00      	ldr	r2, [sp, #0]
 800c79a:	331c      	adds	r3, #28
 800c79c:	441a      	add	r2, r3
 800c79e:	9200      	str	r2, [sp, #0]
 800c7a0:	9a06      	ldr	r2, [sp, #24]
 800c7a2:	441a      	add	r2, r3
 800c7a4:	441e      	add	r6, r3
 800c7a6:	9206      	str	r2, [sp, #24]
 800c7a8:	e78a      	b.n	800c6c0 <_dtoa_r+0x828>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	e7f4      	b.n	800c798 <_dtoa_r+0x900>
 800c7ae:	9b03      	ldr	r3, [sp, #12]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	46b8      	mov	r8, r7
 800c7b4:	dc20      	bgt.n	800c7f8 <_dtoa_r+0x960>
 800c7b6:	469b      	mov	fp, r3
 800c7b8:	9b07      	ldr	r3, [sp, #28]
 800c7ba:	2b02      	cmp	r3, #2
 800c7bc:	dd1e      	ble.n	800c7fc <_dtoa_r+0x964>
 800c7be:	f1bb 0f00 	cmp.w	fp, #0
 800c7c2:	f47f adb1 	bne.w	800c328 <_dtoa_r+0x490>
 800c7c6:	4621      	mov	r1, r4
 800c7c8:	465b      	mov	r3, fp
 800c7ca:	2205      	movs	r2, #5
 800c7cc:	4648      	mov	r0, r9
 800c7ce:	f000 f9df 	bl	800cb90 <__multadd>
 800c7d2:	4601      	mov	r1, r0
 800c7d4:	4604      	mov	r4, r0
 800c7d6:	9802      	ldr	r0, [sp, #8]
 800c7d8:	f000 fbea 	bl	800cfb0 <__mcmp>
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	f77f ada3 	ble.w	800c328 <_dtoa_r+0x490>
 800c7e2:	4656      	mov	r6, sl
 800c7e4:	2331      	movs	r3, #49	@ 0x31
 800c7e6:	f806 3b01 	strb.w	r3, [r6], #1
 800c7ea:	f108 0801 	add.w	r8, r8, #1
 800c7ee:	e59f      	b.n	800c330 <_dtoa_r+0x498>
 800c7f0:	9c03      	ldr	r4, [sp, #12]
 800c7f2:	46b8      	mov	r8, r7
 800c7f4:	4625      	mov	r5, r4
 800c7f6:	e7f4      	b.n	800c7e2 <_dtoa_r+0x94a>
 800c7f8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c7fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	f000 8101 	beq.w	800ca06 <_dtoa_r+0xb6e>
 800c804:	2e00      	cmp	r6, #0
 800c806:	dd05      	ble.n	800c814 <_dtoa_r+0x97c>
 800c808:	4629      	mov	r1, r5
 800c80a:	4632      	mov	r2, r6
 800c80c:	4648      	mov	r0, r9
 800c80e:	f000 fb63 	bl	800ced8 <__lshift>
 800c812:	4605      	mov	r5, r0
 800c814:	9b08      	ldr	r3, [sp, #32]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d05c      	beq.n	800c8d4 <_dtoa_r+0xa3c>
 800c81a:	6869      	ldr	r1, [r5, #4]
 800c81c:	4648      	mov	r0, r9
 800c81e:	f000 f955 	bl	800cacc <_Balloc>
 800c822:	4606      	mov	r6, r0
 800c824:	b928      	cbnz	r0, 800c832 <_dtoa_r+0x99a>
 800c826:	4b82      	ldr	r3, [pc, #520]	@ (800ca30 <_dtoa_r+0xb98>)
 800c828:	4602      	mov	r2, r0
 800c82a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c82e:	f7ff bb4a 	b.w	800bec6 <_dtoa_r+0x2e>
 800c832:	692a      	ldr	r2, [r5, #16]
 800c834:	3202      	adds	r2, #2
 800c836:	0092      	lsls	r2, r2, #2
 800c838:	f105 010c 	add.w	r1, r5, #12
 800c83c:	300c      	adds	r0, #12
 800c83e:	f7ff fa94 	bl	800bd6a <memcpy>
 800c842:	2201      	movs	r2, #1
 800c844:	4631      	mov	r1, r6
 800c846:	4648      	mov	r0, r9
 800c848:	f000 fb46 	bl	800ced8 <__lshift>
 800c84c:	f10a 0301 	add.w	r3, sl, #1
 800c850:	9300      	str	r3, [sp, #0]
 800c852:	eb0a 030b 	add.w	r3, sl, fp
 800c856:	9308      	str	r3, [sp, #32]
 800c858:	9b04      	ldr	r3, [sp, #16]
 800c85a:	f003 0301 	and.w	r3, r3, #1
 800c85e:	462f      	mov	r7, r5
 800c860:	9306      	str	r3, [sp, #24]
 800c862:	4605      	mov	r5, r0
 800c864:	9b00      	ldr	r3, [sp, #0]
 800c866:	9802      	ldr	r0, [sp, #8]
 800c868:	4621      	mov	r1, r4
 800c86a:	f103 3bff 	add.w	fp, r3, #4294967295
 800c86e:	f7ff fa8a 	bl	800bd86 <quorem>
 800c872:	4603      	mov	r3, r0
 800c874:	3330      	adds	r3, #48	@ 0x30
 800c876:	9003      	str	r0, [sp, #12]
 800c878:	4639      	mov	r1, r7
 800c87a:	9802      	ldr	r0, [sp, #8]
 800c87c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c87e:	f000 fb97 	bl	800cfb0 <__mcmp>
 800c882:	462a      	mov	r2, r5
 800c884:	9004      	str	r0, [sp, #16]
 800c886:	4621      	mov	r1, r4
 800c888:	4648      	mov	r0, r9
 800c88a:	f000 fbad 	bl	800cfe8 <__mdiff>
 800c88e:	68c2      	ldr	r2, [r0, #12]
 800c890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c892:	4606      	mov	r6, r0
 800c894:	bb02      	cbnz	r2, 800c8d8 <_dtoa_r+0xa40>
 800c896:	4601      	mov	r1, r0
 800c898:	9802      	ldr	r0, [sp, #8]
 800c89a:	f000 fb89 	bl	800cfb0 <__mcmp>
 800c89e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8a0:	4602      	mov	r2, r0
 800c8a2:	4631      	mov	r1, r6
 800c8a4:	4648      	mov	r0, r9
 800c8a6:	920c      	str	r2, [sp, #48]	@ 0x30
 800c8a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8aa:	f000 f94f 	bl	800cb4c <_Bfree>
 800c8ae:	9b07      	ldr	r3, [sp, #28]
 800c8b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c8b2:	9e00      	ldr	r6, [sp, #0]
 800c8b4:	ea42 0103 	orr.w	r1, r2, r3
 800c8b8:	9b06      	ldr	r3, [sp, #24]
 800c8ba:	4319      	orrs	r1, r3
 800c8bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8be:	d10d      	bne.n	800c8dc <_dtoa_r+0xa44>
 800c8c0:	2b39      	cmp	r3, #57	@ 0x39
 800c8c2:	d027      	beq.n	800c914 <_dtoa_r+0xa7c>
 800c8c4:	9a04      	ldr	r2, [sp, #16]
 800c8c6:	2a00      	cmp	r2, #0
 800c8c8:	dd01      	ble.n	800c8ce <_dtoa_r+0xa36>
 800c8ca:	9b03      	ldr	r3, [sp, #12]
 800c8cc:	3331      	adds	r3, #49	@ 0x31
 800c8ce:	f88b 3000 	strb.w	r3, [fp]
 800c8d2:	e52e      	b.n	800c332 <_dtoa_r+0x49a>
 800c8d4:	4628      	mov	r0, r5
 800c8d6:	e7b9      	b.n	800c84c <_dtoa_r+0x9b4>
 800c8d8:	2201      	movs	r2, #1
 800c8da:	e7e2      	b.n	800c8a2 <_dtoa_r+0xa0a>
 800c8dc:	9904      	ldr	r1, [sp, #16]
 800c8de:	2900      	cmp	r1, #0
 800c8e0:	db04      	blt.n	800c8ec <_dtoa_r+0xa54>
 800c8e2:	9807      	ldr	r0, [sp, #28]
 800c8e4:	4301      	orrs	r1, r0
 800c8e6:	9806      	ldr	r0, [sp, #24]
 800c8e8:	4301      	orrs	r1, r0
 800c8ea:	d120      	bne.n	800c92e <_dtoa_r+0xa96>
 800c8ec:	2a00      	cmp	r2, #0
 800c8ee:	ddee      	ble.n	800c8ce <_dtoa_r+0xa36>
 800c8f0:	9902      	ldr	r1, [sp, #8]
 800c8f2:	9300      	str	r3, [sp, #0]
 800c8f4:	2201      	movs	r2, #1
 800c8f6:	4648      	mov	r0, r9
 800c8f8:	f000 faee 	bl	800ced8 <__lshift>
 800c8fc:	4621      	mov	r1, r4
 800c8fe:	9002      	str	r0, [sp, #8]
 800c900:	f000 fb56 	bl	800cfb0 <__mcmp>
 800c904:	2800      	cmp	r0, #0
 800c906:	9b00      	ldr	r3, [sp, #0]
 800c908:	dc02      	bgt.n	800c910 <_dtoa_r+0xa78>
 800c90a:	d1e0      	bne.n	800c8ce <_dtoa_r+0xa36>
 800c90c:	07da      	lsls	r2, r3, #31
 800c90e:	d5de      	bpl.n	800c8ce <_dtoa_r+0xa36>
 800c910:	2b39      	cmp	r3, #57	@ 0x39
 800c912:	d1da      	bne.n	800c8ca <_dtoa_r+0xa32>
 800c914:	2339      	movs	r3, #57	@ 0x39
 800c916:	f88b 3000 	strb.w	r3, [fp]
 800c91a:	4633      	mov	r3, r6
 800c91c:	461e      	mov	r6, r3
 800c91e:	3b01      	subs	r3, #1
 800c920:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c924:	2a39      	cmp	r2, #57	@ 0x39
 800c926:	d04e      	beq.n	800c9c6 <_dtoa_r+0xb2e>
 800c928:	3201      	adds	r2, #1
 800c92a:	701a      	strb	r2, [r3, #0]
 800c92c:	e501      	b.n	800c332 <_dtoa_r+0x49a>
 800c92e:	2a00      	cmp	r2, #0
 800c930:	dd03      	ble.n	800c93a <_dtoa_r+0xaa2>
 800c932:	2b39      	cmp	r3, #57	@ 0x39
 800c934:	d0ee      	beq.n	800c914 <_dtoa_r+0xa7c>
 800c936:	3301      	adds	r3, #1
 800c938:	e7c9      	b.n	800c8ce <_dtoa_r+0xa36>
 800c93a:	9a00      	ldr	r2, [sp, #0]
 800c93c:	9908      	ldr	r1, [sp, #32]
 800c93e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c942:	428a      	cmp	r2, r1
 800c944:	d028      	beq.n	800c998 <_dtoa_r+0xb00>
 800c946:	9902      	ldr	r1, [sp, #8]
 800c948:	2300      	movs	r3, #0
 800c94a:	220a      	movs	r2, #10
 800c94c:	4648      	mov	r0, r9
 800c94e:	f000 f91f 	bl	800cb90 <__multadd>
 800c952:	42af      	cmp	r7, r5
 800c954:	9002      	str	r0, [sp, #8]
 800c956:	f04f 0300 	mov.w	r3, #0
 800c95a:	f04f 020a 	mov.w	r2, #10
 800c95e:	4639      	mov	r1, r7
 800c960:	4648      	mov	r0, r9
 800c962:	d107      	bne.n	800c974 <_dtoa_r+0xadc>
 800c964:	f000 f914 	bl	800cb90 <__multadd>
 800c968:	4607      	mov	r7, r0
 800c96a:	4605      	mov	r5, r0
 800c96c:	9b00      	ldr	r3, [sp, #0]
 800c96e:	3301      	adds	r3, #1
 800c970:	9300      	str	r3, [sp, #0]
 800c972:	e777      	b.n	800c864 <_dtoa_r+0x9cc>
 800c974:	f000 f90c 	bl	800cb90 <__multadd>
 800c978:	4629      	mov	r1, r5
 800c97a:	4607      	mov	r7, r0
 800c97c:	2300      	movs	r3, #0
 800c97e:	220a      	movs	r2, #10
 800c980:	4648      	mov	r0, r9
 800c982:	f000 f905 	bl	800cb90 <__multadd>
 800c986:	4605      	mov	r5, r0
 800c988:	e7f0      	b.n	800c96c <_dtoa_r+0xad4>
 800c98a:	f1bb 0f00 	cmp.w	fp, #0
 800c98e:	bfcc      	ite	gt
 800c990:	465e      	movgt	r6, fp
 800c992:	2601      	movle	r6, #1
 800c994:	4456      	add	r6, sl
 800c996:	2700      	movs	r7, #0
 800c998:	9902      	ldr	r1, [sp, #8]
 800c99a:	9300      	str	r3, [sp, #0]
 800c99c:	2201      	movs	r2, #1
 800c99e:	4648      	mov	r0, r9
 800c9a0:	f000 fa9a 	bl	800ced8 <__lshift>
 800c9a4:	4621      	mov	r1, r4
 800c9a6:	9002      	str	r0, [sp, #8]
 800c9a8:	f000 fb02 	bl	800cfb0 <__mcmp>
 800c9ac:	2800      	cmp	r0, #0
 800c9ae:	dcb4      	bgt.n	800c91a <_dtoa_r+0xa82>
 800c9b0:	d102      	bne.n	800c9b8 <_dtoa_r+0xb20>
 800c9b2:	9b00      	ldr	r3, [sp, #0]
 800c9b4:	07db      	lsls	r3, r3, #31
 800c9b6:	d4b0      	bmi.n	800c91a <_dtoa_r+0xa82>
 800c9b8:	4633      	mov	r3, r6
 800c9ba:	461e      	mov	r6, r3
 800c9bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c9c0:	2a30      	cmp	r2, #48	@ 0x30
 800c9c2:	d0fa      	beq.n	800c9ba <_dtoa_r+0xb22>
 800c9c4:	e4b5      	b.n	800c332 <_dtoa_r+0x49a>
 800c9c6:	459a      	cmp	sl, r3
 800c9c8:	d1a8      	bne.n	800c91c <_dtoa_r+0xa84>
 800c9ca:	2331      	movs	r3, #49	@ 0x31
 800c9cc:	f108 0801 	add.w	r8, r8, #1
 800c9d0:	f88a 3000 	strb.w	r3, [sl]
 800c9d4:	e4ad      	b.n	800c332 <_dtoa_r+0x49a>
 800c9d6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c9d8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800ca34 <_dtoa_r+0xb9c>
 800c9dc:	b11b      	cbz	r3, 800c9e6 <_dtoa_r+0xb4e>
 800c9de:	f10a 0308 	add.w	r3, sl, #8
 800c9e2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c9e4:	6013      	str	r3, [r2, #0]
 800c9e6:	4650      	mov	r0, sl
 800c9e8:	b017      	add	sp, #92	@ 0x5c
 800c9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ee:	9b07      	ldr	r3, [sp, #28]
 800c9f0:	2b01      	cmp	r3, #1
 800c9f2:	f77f ae2e 	ble.w	800c652 <_dtoa_r+0x7ba>
 800c9f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c9f8:	9308      	str	r3, [sp, #32]
 800c9fa:	2001      	movs	r0, #1
 800c9fc:	e64d      	b.n	800c69a <_dtoa_r+0x802>
 800c9fe:	f1bb 0f00 	cmp.w	fp, #0
 800ca02:	f77f aed9 	ble.w	800c7b8 <_dtoa_r+0x920>
 800ca06:	4656      	mov	r6, sl
 800ca08:	9802      	ldr	r0, [sp, #8]
 800ca0a:	4621      	mov	r1, r4
 800ca0c:	f7ff f9bb 	bl	800bd86 <quorem>
 800ca10:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ca14:	f806 3b01 	strb.w	r3, [r6], #1
 800ca18:	eba6 020a 	sub.w	r2, r6, sl
 800ca1c:	4593      	cmp	fp, r2
 800ca1e:	ddb4      	ble.n	800c98a <_dtoa_r+0xaf2>
 800ca20:	9902      	ldr	r1, [sp, #8]
 800ca22:	2300      	movs	r3, #0
 800ca24:	220a      	movs	r2, #10
 800ca26:	4648      	mov	r0, r9
 800ca28:	f000 f8b2 	bl	800cb90 <__multadd>
 800ca2c:	9002      	str	r0, [sp, #8]
 800ca2e:	e7eb      	b.n	800ca08 <_dtoa_r+0xb70>
 800ca30:	0800e8f8 	.word	0x0800e8f8
 800ca34:	0800e87c 	.word	0x0800e87c

0800ca38 <_free_r>:
 800ca38:	b538      	push	{r3, r4, r5, lr}
 800ca3a:	4605      	mov	r5, r0
 800ca3c:	2900      	cmp	r1, #0
 800ca3e:	d041      	beq.n	800cac4 <_free_r+0x8c>
 800ca40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca44:	1f0c      	subs	r4, r1, #4
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	bfb8      	it	lt
 800ca4a:	18e4      	addlt	r4, r4, r3
 800ca4c:	f7fe fa92 	bl	800af74 <__malloc_lock>
 800ca50:	4a1d      	ldr	r2, [pc, #116]	@ (800cac8 <_free_r+0x90>)
 800ca52:	6813      	ldr	r3, [r2, #0]
 800ca54:	b933      	cbnz	r3, 800ca64 <_free_r+0x2c>
 800ca56:	6063      	str	r3, [r4, #4]
 800ca58:	6014      	str	r4, [r2, #0]
 800ca5a:	4628      	mov	r0, r5
 800ca5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca60:	f7fe ba8e 	b.w	800af80 <__malloc_unlock>
 800ca64:	42a3      	cmp	r3, r4
 800ca66:	d908      	bls.n	800ca7a <_free_r+0x42>
 800ca68:	6820      	ldr	r0, [r4, #0]
 800ca6a:	1821      	adds	r1, r4, r0
 800ca6c:	428b      	cmp	r3, r1
 800ca6e:	bf01      	itttt	eq
 800ca70:	6819      	ldreq	r1, [r3, #0]
 800ca72:	685b      	ldreq	r3, [r3, #4]
 800ca74:	1809      	addeq	r1, r1, r0
 800ca76:	6021      	streq	r1, [r4, #0]
 800ca78:	e7ed      	b.n	800ca56 <_free_r+0x1e>
 800ca7a:	461a      	mov	r2, r3
 800ca7c:	685b      	ldr	r3, [r3, #4]
 800ca7e:	b10b      	cbz	r3, 800ca84 <_free_r+0x4c>
 800ca80:	42a3      	cmp	r3, r4
 800ca82:	d9fa      	bls.n	800ca7a <_free_r+0x42>
 800ca84:	6811      	ldr	r1, [r2, #0]
 800ca86:	1850      	adds	r0, r2, r1
 800ca88:	42a0      	cmp	r0, r4
 800ca8a:	d10b      	bne.n	800caa4 <_free_r+0x6c>
 800ca8c:	6820      	ldr	r0, [r4, #0]
 800ca8e:	4401      	add	r1, r0
 800ca90:	1850      	adds	r0, r2, r1
 800ca92:	4283      	cmp	r3, r0
 800ca94:	6011      	str	r1, [r2, #0]
 800ca96:	d1e0      	bne.n	800ca5a <_free_r+0x22>
 800ca98:	6818      	ldr	r0, [r3, #0]
 800ca9a:	685b      	ldr	r3, [r3, #4]
 800ca9c:	6053      	str	r3, [r2, #4]
 800ca9e:	4408      	add	r0, r1
 800caa0:	6010      	str	r0, [r2, #0]
 800caa2:	e7da      	b.n	800ca5a <_free_r+0x22>
 800caa4:	d902      	bls.n	800caac <_free_r+0x74>
 800caa6:	230c      	movs	r3, #12
 800caa8:	602b      	str	r3, [r5, #0]
 800caaa:	e7d6      	b.n	800ca5a <_free_r+0x22>
 800caac:	6820      	ldr	r0, [r4, #0]
 800caae:	1821      	adds	r1, r4, r0
 800cab0:	428b      	cmp	r3, r1
 800cab2:	bf04      	itt	eq
 800cab4:	6819      	ldreq	r1, [r3, #0]
 800cab6:	685b      	ldreq	r3, [r3, #4]
 800cab8:	6063      	str	r3, [r4, #4]
 800caba:	bf04      	itt	eq
 800cabc:	1809      	addeq	r1, r1, r0
 800cabe:	6021      	streq	r1, [r4, #0]
 800cac0:	6054      	str	r4, [r2, #4]
 800cac2:	e7ca      	b.n	800ca5a <_free_r+0x22>
 800cac4:	bd38      	pop	{r3, r4, r5, pc}
 800cac6:	bf00      	nop
 800cac8:	2002630c 	.word	0x2002630c

0800cacc <_Balloc>:
 800cacc:	b570      	push	{r4, r5, r6, lr}
 800cace:	69c6      	ldr	r6, [r0, #28]
 800cad0:	4604      	mov	r4, r0
 800cad2:	460d      	mov	r5, r1
 800cad4:	b976      	cbnz	r6, 800caf4 <_Balloc+0x28>
 800cad6:	2010      	movs	r0, #16
 800cad8:	f7fe f9a2 	bl	800ae20 <malloc>
 800cadc:	4602      	mov	r2, r0
 800cade:	61e0      	str	r0, [r4, #28]
 800cae0:	b920      	cbnz	r0, 800caec <_Balloc+0x20>
 800cae2:	4b18      	ldr	r3, [pc, #96]	@ (800cb44 <_Balloc+0x78>)
 800cae4:	4818      	ldr	r0, [pc, #96]	@ (800cb48 <_Balloc+0x7c>)
 800cae6:	216b      	movs	r1, #107	@ 0x6b
 800cae8:	f000 fddc 	bl	800d6a4 <__assert_func>
 800caec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800caf0:	6006      	str	r6, [r0, #0]
 800caf2:	60c6      	str	r6, [r0, #12]
 800caf4:	69e6      	ldr	r6, [r4, #28]
 800caf6:	68f3      	ldr	r3, [r6, #12]
 800caf8:	b183      	cbz	r3, 800cb1c <_Balloc+0x50>
 800cafa:	69e3      	ldr	r3, [r4, #28]
 800cafc:	68db      	ldr	r3, [r3, #12]
 800cafe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb02:	b9b8      	cbnz	r0, 800cb34 <_Balloc+0x68>
 800cb04:	2101      	movs	r1, #1
 800cb06:	fa01 f605 	lsl.w	r6, r1, r5
 800cb0a:	1d72      	adds	r2, r6, #5
 800cb0c:	0092      	lsls	r2, r2, #2
 800cb0e:	4620      	mov	r0, r4
 800cb10:	f000 fde6 	bl	800d6e0 <_calloc_r>
 800cb14:	b160      	cbz	r0, 800cb30 <_Balloc+0x64>
 800cb16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cb1a:	e00e      	b.n	800cb3a <_Balloc+0x6e>
 800cb1c:	2221      	movs	r2, #33	@ 0x21
 800cb1e:	2104      	movs	r1, #4
 800cb20:	4620      	mov	r0, r4
 800cb22:	f000 fddd 	bl	800d6e0 <_calloc_r>
 800cb26:	69e3      	ldr	r3, [r4, #28]
 800cb28:	60f0      	str	r0, [r6, #12]
 800cb2a:	68db      	ldr	r3, [r3, #12]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d1e4      	bne.n	800cafa <_Balloc+0x2e>
 800cb30:	2000      	movs	r0, #0
 800cb32:	bd70      	pop	{r4, r5, r6, pc}
 800cb34:	6802      	ldr	r2, [r0, #0]
 800cb36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb40:	e7f7      	b.n	800cb32 <_Balloc+0x66>
 800cb42:	bf00      	nop
 800cb44:	0800e889 	.word	0x0800e889
 800cb48:	0800e909 	.word	0x0800e909

0800cb4c <_Bfree>:
 800cb4c:	b570      	push	{r4, r5, r6, lr}
 800cb4e:	69c6      	ldr	r6, [r0, #28]
 800cb50:	4605      	mov	r5, r0
 800cb52:	460c      	mov	r4, r1
 800cb54:	b976      	cbnz	r6, 800cb74 <_Bfree+0x28>
 800cb56:	2010      	movs	r0, #16
 800cb58:	f7fe f962 	bl	800ae20 <malloc>
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	61e8      	str	r0, [r5, #28]
 800cb60:	b920      	cbnz	r0, 800cb6c <_Bfree+0x20>
 800cb62:	4b09      	ldr	r3, [pc, #36]	@ (800cb88 <_Bfree+0x3c>)
 800cb64:	4809      	ldr	r0, [pc, #36]	@ (800cb8c <_Bfree+0x40>)
 800cb66:	218f      	movs	r1, #143	@ 0x8f
 800cb68:	f000 fd9c 	bl	800d6a4 <__assert_func>
 800cb6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb70:	6006      	str	r6, [r0, #0]
 800cb72:	60c6      	str	r6, [r0, #12]
 800cb74:	b13c      	cbz	r4, 800cb86 <_Bfree+0x3a>
 800cb76:	69eb      	ldr	r3, [r5, #28]
 800cb78:	6862      	ldr	r2, [r4, #4]
 800cb7a:	68db      	ldr	r3, [r3, #12]
 800cb7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cb80:	6021      	str	r1, [r4, #0]
 800cb82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cb86:	bd70      	pop	{r4, r5, r6, pc}
 800cb88:	0800e889 	.word	0x0800e889
 800cb8c:	0800e909 	.word	0x0800e909

0800cb90 <__multadd>:
 800cb90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb94:	690d      	ldr	r5, [r1, #16]
 800cb96:	4607      	mov	r7, r0
 800cb98:	460c      	mov	r4, r1
 800cb9a:	461e      	mov	r6, r3
 800cb9c:	f101 0c14 	add.w	ip, r1, #20
 800cba0:	2000      	movs	r0, #0
 800cba2:	f8dc 3000 	ldr.w	r3, [ip]
 800cba6:	b299      	uxth	r1, r3
 800cba8:	fb02 6101 	mla	r1, r2, r1, r6
 800cbac:	0c1e      	lsrs	r6, r3, #16
 800cbae:	0c0b      	lsrs	r3, r1, #16
 800cbb0:	fb02 3306 	mla	r3, r2, r6, r3
 800cbb4:	b289      	uxth	r1, r1
 800cbb6:	3001      	adds	r0, #1
 800cbb8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cbbc:	4285      	cmp	r5, r0
 800cbbe:	f84c 1b04 	str.w	r1, [ip], #4
 800cbc2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cbc6:	dcec      	bgt.n	800cba2 <__multadd+0x12>
 800cbc8:	b30e      	cbz	r6, 800cc0e <__multadd+0x7e>
 800cbca:	68a3      	ldr	r3, [r4, #8]
 800cbcc:	42ab      	cmp	r3, r5
 800cbce:	dc19      	bgt.n	800cc04 <__multadd+0x74>
 800cbd0:	6861      	ldr	r1, [r4, #4]
 800cbd2:	4638      	mov	r0, r7
 800cbd4:	3101      	adds	r1, #1
 800cbd6:	f7ff ff79 	bl	800cacc <_Balloc>
 800cbda:	4680      	mov	r8, r0
 800cbdc:	b928      	cbnz	r0, 800cbea <__multadd+0x5a>
 800cbde:	4602      	mov	r2, r0
 800cbe0:	4b0c      	ldr	r3, [pc, #48]	@ (800cc14 <__multadd+0x84>)
 800cbe2:	480d      	ldr	r0, [pc, #52]	@ (800cc18 <__multadd+0x88>)
 800cbe4:	21ba      	movs	r1, #186	@ 0xba
 800cbe6:	f000 fd5d 	bl	800d6a4 <__assert_func>
 800cbea:	6922      	ldr	r2, [r4, #16]
 800cbec:	3202      	adds	r2, #2
 800cbee:	f104 010c 	add.w	r1, r4, #12
 800cbf2:	0092      	lsls	r2, r2, #2
 800cbf4:	300c      	adds	r0, #12
 800cbf6:	f7ff f8b8 	bl	800bd6a <memcpy>
 800cbfa:	4621      	mov	r1, r4
 800cbfc:	4638      	mov	r0, r7
 800cbfe:	f7ff ffa5 	bl	800cb4c <_Bfree>
 800cc02:	4644      	mov	r4, r8
 800cc04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc08:	3501      	adds	r5, #1
 800cc0a:	615e      	str	r6, [r3, #20]
 800cc0c:	6125      	str	r5, [r4, #16]
 800cc0e:	4620      	mov	r0, r4
 800cc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc14:	0800e8f8 	.word	0x0800e8f8
 800cc18:	0800e909 	.word	0x0800e909

0800cc1c <__hi0bits>:
 800cc1c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cc20:	4603      	mov	r3, r0
 800cc22:	bf36      	itet	cc
 800cc24:	0403      	lslcc	r3, r0, #16
 800cc26:	2000      	movcs	r0, #0
 800cc28:	2010      	movcc	r0, #16
 800cc2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cc2e:	bf3c      	itt	cc
 800cc30:	021b      	lslcc	r3, r3, #8
 800cc32:	3008      	addcc	r0, #8
 800cc34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cc38:	bf3c      	itt	cc
 800cc3a:	011b      	lslcc	r3, r3, #4
 800cc3c:	3004      	addcc	r0, #4
 800cc3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc42:	bf3c      	itt	cc
 800cc44:	009b      	lslcc	r3, r3, #2
 800cc46:	3002      	addcc	r0, #2
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	db05      	blt.n	800cc58 <__hi0bits+0x3c>
 800cc4c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cc50:	f100 0001 	add.w	r0, r0, #1
 800cc54:	bf08      	it	eq
 800cc56:	2020      	moveq	r0, #32
 800cc58:	4770      	bx	lr

0800cc5a <__lo0bits>:
 800cc5a:	6803      	ldr	r3, [r0, #0]
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	f013 0007 	ands.w	r0, r3, #7
 800cc62:	d00b      	beq.n	800cc7c <__lo0bits+0x22>
 800cc64:	07d9      	lsls	r1, r3, #31
 800cc66:	d421      	bmi.n	800ccac <__lo0bits+0x52>
 800cc68:	0798      	lsls	r0, r3, #30
 800cc6a:	bf49      	itett	mi
 800cc6c:	085b      	lsrmi	r3, r3, #1
 800cc6e:	089b      	lsrpl	r3, r3, #2
 800cc70:	2001      	movmi	r0, #1
 800cc72:	6013      	strmi	r3, [r2, #0]
 800cc74:	bf5c      	itt	pl
 800cc76:	6013      	strpl	r3, [r2, #0]
 800cc78:	2002      	movpl	r0, #2
 800cc7a:	4770      	bx	lr
 800cc7c:	b299      	uxth	r1, r3
 800cc7e:	b909      	cbnz	r1, 800cc84 <__lo0bits+0x2a>
 800cc80:	0c1b      	lsrs	r3, r3, #16
 800cc82:	2010      	movs	r0, #16
 800cc84:	b2d9      	uxtb	r1, r3
 800cc86:	b909      	cbnz	r1, 800cc8c <__lo0bits+0x32>
 800cc88:	3008      	adds	r0, #8
 800cc8a:	0a1b      	lsrs	r3, r3, #8
 800cc8c:	0719      	lsls	r1, r3, #28
 800cc8e:	bf04      	itt	eq
 800cc90:	091b      	lsreq	r3, r3, #4
 800cc92:	3004      	addeq	r0, #4
 800cc94:	0799      	lsls	r1, r3, #30
 800cc96:	bf04      	itt	eq
 800cc98:	089b      	lsreq	r3, r3, #2
 800cc9a:	3002      	addeq	r0, #2
 800cc9c:	07d9      	lsls	r1, r3, #31
 800cc9e:	d403      	bmi.n	800cca8 <__lo0bits+0x4e>
 800cca0:	085b      	lsrs	r3, r3, #1
 800cca2:	f100 0001 	add.w	r0, r0, #1
 800cca6:	d003      	beq.n	800ccb0 <__lo0bits+0x56>
 800cca8:	6013      	str	r3, [r2, #0]
 800ccaa:	4770      	bx	lr
 800ccac:	2000      	movs	r0, #0
 800ccae:	4770      	bx	lr
 800ccb0:	2020      	movs	r0, #32
 800ccb2:	4770      	bx	lr

0800ccb4 <__i2b>:
 800ccb4:	b510      	push	{r4, lr}
 800ccb6:	460c      	mov	r4, r1
 800ccb8:	2101      	movs	r1, #1
 800ccba:	f7ff ff07 	bl	800cacc <_Balloc>
 800ccbe:	4602      	mov	r2, r0
 800ccc0:	b928      	cbnz	r0, 800ccce <__i2b+0x1a>
 800ccc2:	4b05      	ldr	r3, [pc, #20]	@ (800ccd8 <__i2b+0x24>)
 800ccc4:	4805      	ldr	r0, [pc, #20]	@ (800ccdc <__i2b+0x28>)
 800ccc6:	f240 1145 	movw	r1, #325	@ 0x145
 800ccca:	f000 fceb 	bl	800d6a4 <__assert_func>
 800ccce:	2301      	movs	r3, #1
 800ccd0:	6144      	str	r4, [r0, #20]
 800ccd2:	6103      	str	r3, [r0, #16]
 800ccd4:	bd10      	pop	{r4, pc}
 800ccd6:	bf00      	nop
 800ccd8:	0800e8f8 	.word	0x0800e8f8
 800ccdc:	0800e909 	.word	0x0800e909

0800cce0 <__multiply>:
 800cce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cce4:	4617      	mov	r7, r2
 800cce6:	690a      	ldr	r2, [r1, #16]
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	429a      	cmp	r2, r3
 800ccec:	bfa8      	it	ge
 800ccee:	463b      	movge	r3, r7
 800ccf0:	4689      	mov	r9, r1
 800ccf2:	bfa4      	itt	ge
 800ccf4:	460f      	movge	r7, r1
 800ccf6:	4699      	movge	r9, r3
 800ccf8:	693d      	ldr	r5, [r7, #16]
 800ccfa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	6879      	ldr	r1, [r7, #4]
 800cd02:	eb05 060a 	add.w	r6, r5, sl
 800cd06:	42b3      	cmp	r3, r6
 800cd08:	b085      	sub	sp, #20
 800cd0a:	bfb8      	it	lt
 800cd0c:	3101      	addlt	r1, #1
 800cd0e:	f7ff fedd 	bl	800cacc <_Balloc>
 800cd12:	b930      	cbnz	r0, 800cd22 <__multiply+0x42>
 800cd14:	4602      	mov	r2, r0
 800cd16:	4b41      	ldr	r3, [pc, #260]	@ (800ce1c <__multiply+0x13c>)
 800cd18:	4841      	ldr	r0, [pc, #260]	@ (800ce20 <__multiply+0x140>)
 800cd1a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cd1e:	f000 fcc1 	bl	800d6a4 <__assert_func>
 800cd22:	f100 0414 	add.w	r4, r0, #20
 800cd26:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800cd2a:	4623      	mov	r3, r4
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	4573      	cmp	r3, lr
 800cd30:	d320      	bcc.n	800cd74 <__multiply+0x94>
 800cd32:	f107 0814 	add.w	r8, r7, #20
 800cd36:	f109 0114 	add.w	r1, r9, #20
 800cd3a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800cd3e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800cd42:	9302      	str	r3, [sp, #8]
 800cd44:	1beb      	subs	r3, r5, r7
 800cd46:	3b15      	subs	r3, #21
 800cd48:	f023 0303 	bic.w	r3, r3, #3
 800cd4c:	3304      	adds	r3, #4
 800cd4e:	3715      	adds	r7, #21
 800cd50:	42bd      	cmp	r5, r7
 800cd52:	bf38      	it	cc
 800cd54:	2304      	movcc	r3, #4
 800cd56:	9301      	str	r3, [sp, #4]
 800cd58:	9b02      	ldr	r3, [sp, #8]
 800cd5a:	9103      	str	r1, [sp, #12]
 800cd5c:	428b      	cmp	r3, r1
 800cd5e:	d80c      	bhi.n	800cd7a <__multiply+0x9a>
 800cd60:	2e00      	cmp	r6, #0
 800cd62:	dd03      	ble.n	800cd6c <__multiply+0x8c>
 800cd64:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d055      	beq.n	800ce18 <__multiply+0x138>
 800cd6c:	6106      	str	r6, [r0, #16]
 800cd6e:	b005      	add	sp, #20
 800cd70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd74:	f843 2b04 	str.w	r2, [r3], #4
 800cd78:	e7d9      	b.n	800cd2e <__multiply+0x4e>
 800cd7a:	f8b1 a000 	ldrh.w	sl, [r1]
 800cd7e:	f1ba 0f00 	cmp.w	sl, #0
 800cd82:	d01f      	beq.n	800cdc4 <__multiply+0xe4>
 800cd84:	46c4      	mov	ip, r8
 800cd86:	46a1      	mov	r9, r4
 800cd88:	2700      	movs	r7, #0
 800cd8a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cd8e:	f8d9 3000 	ldr.w	r3, [r9]
 800cd92:	fa1f fb82 	uxth.w	fp, r2
 800cd96:	b29b      	uxth	r3, r3
 800cd98:	fb0a 330b 	mla	r3, sl, fp, r3
 800cd9c:	443b      	add	r3, r7
 800cd9e:	f8d9 7000 	ldr.w	r7, [r9]
 800cda2:	0c12      	lsrs	r2, r2, #16
 800cda4:	0c3f      	lsrs	r7, r7, #16
 800cda6:	fb0a 7202 	mla	r2, sl, r2, r7
 800cdaa:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800cdae:	b29b      	uxth	r3, r3
 800cdb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cdb4:	4565      	cmp	r5, ip
 800cdb6:	f849 3b04 	str.w	r3, [r9], #4
 800cdba:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800cdbe:	d8e4      	bhi.n	800cd8a <__multiply+0xaa>
 800cdc0:	9b01      	ldr	r3, [sp, #4]
 800cdc2:	50e7      	str	r7, [r4, r3]
 800cdc4:	9b03      	ldr	r3, [sp, #12]
 800cdc6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cdca:	3104      	adds	r1, #4
 800cdcc:	f1b9 0f00 	cmp.w	r9, #0
 800cdd0:	d020      	beq.n	800ce14 <__multiply+0x134>
 800cdd2:	6823      	ldr	r3, [r4, #0]
 800cdd4:	4647      	mov	r7, r8
 800cdd6:	46a4      	mov	ip, r4
 800cdd8:	f04f 0a00 	mov.w	sl, #0
 800cddc:	f8b7 b000 	ldrh.w	fp, [r7]
 800cde0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800cde4:	fb09 220b 	mla	r2, r9, fp, r2
 800cde8:	4452      	add	r2, sl
 800cdea:	b29b      	uxth	r3, r3
 800cdec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cdf0:	f84c 3b04 	str.w	r3, [ip], #4
 800cdf4:	f857 3b04 	ldr.w	r3, [r7], #4
 800cdf8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cdfc:	f8bc 3000 	ldrh.w	r3, [ip]
 800ce00:	fb09 330a 	mla	r3, r9, sl, r3
 800ce04:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ce08:	42bd      	cmp	r5, r7
 800ce0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ce0e:	d8e5      	bhi.n	800cddc <__multiply+0xfc>
 800ce10:	9a01      	ldr	r2, [sp, #4]
 800ce12:	50a3      	str	r3, [r4, r2]
 800ce14:	3404      	adds	r4, #4
 800ce16:	e79f      	b.n	800cd58 <__multiply+0x78>
 800ce18:	3e01      	subs	r6, #1
 800ce1a:	e7a1      	b.n	800cd60 <__multiply+0x80>
 800ce1c:	0800e8f8 	.word	0x0800e8f8
 800ce20:	0800e909 	.word	0x0800e909

0800ce24 <__pow5mult>:
 800ce24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce28:	4615      	mov	r5, r2
 800ce2a:	f012 0203 	ands.w	r2, r2, #3
 800ce2e:	4607      	mov	r7, r0
 800ce30:	460e      	mov	r6, r1
 800ce32:	d007      	beq.n	800ce44 <__pow5mult+0x20>
 800ce34:	4c25      	ldr	r4, [pc, #148]	@ (800cecc <__pow5mult+0xa8>)
 800ce36:	3a01      	subs	r2, #1
 800ce38:	2300      	movs	r3, #0
 800ce3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ce3e:	f7ff fea7 	bl	800cb90 <__multadd>
 800ce42:	4606      	mov	r6, r0
 800ce44:	10ad      	asrs	r5, r5, #2
 800ce46:	d03d      	beq.n	800cec4 <__pow5mult+0xa0>
 800ce48:	69fc      	ldr	r4, [r7, #28]
 800ce4a:	b97c      	cbnz	r4, 800ce6c <__pow5mult+0x48>
 800ce4c:	2010      	movs	r0, #16
 800ce4e:	f7fd ffe7 	bl	800ae20 <malloc>
 800ce52:	4602      	mov	r2, r0
 800ce54:	61f8      	str	r0, [r7, #28]
 800ce56:	b928      	cbnz	r0, 800ce64 <__pow5mult+0x40>
 800ce58:	4b1d      	ldr	r3, [pc, #116]	@ (800ced0 <__pow5mult+0xac>)
 800ce5a:	481e      	ldr	r0, [pc, #120]	@ (800ced4 <__pow5mult+0xb0>)
 800ce5c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ce60:	f000 fc20 	bl	800d6a4 <__assert_func>
 800ce64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ce68:	6004      	str	r4, [r0, #0]
 800ce6a:	60c4      	str	r4, [r0, #12]
 800ce6c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ce70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ce74:	b94c      	cbnz	r4, 800ce8a <__pow5mult+0x66>
 800ce76:	f240 2171 	movw	r1, #625	@ 0x271
 800ce7a:	4638      	mov	r0, r7
 800ce7c:	f7ff ff1a 	bl	800ccb4 <__i2b>
 800ce80:	2300      	movs	r3, #0
 800ce82:	f8c8 0008 	str.w	r0, [r8, #8]
 800ce86:	4604      	mov	r4, r0
 800ce88:	6003      	str	r3, [r0, #0]
 800ce8a:	f04f 0900 	mov.w	r9, #0
 800ce8e:	07eb      	lsls	r3, r5, #31
 800ce90:	d50a      	bpl.n	800cea8 <__pow5mult+0x84>
 800ce92:	4631      	mov	r1, r6
 800ce94:	4622      	mov	r2, r4
 800ce96:	4638      	mov	r0, r7
 800ce98:	f7ff ff22 	bl	800cce0 <__multiply>
 800ce9c:	4631      	mov	r1, r6
 800ce9e:	4680      	mov	r8, r0
 800cea0:	4638      	mov	r0, r7
 800cea2:	f7ff fe53 	bl	800cb4c <_Bfree>
 800cea6:	4646      	mov	r6, r8
 800cea8:	106d      	asrs	r5, r5, #1
 800ceaa:	d00b      	beq.n	800cec4 <__pow5mult+0xa0>
 800ceac:	6820      	ldr	r0, [r4, #0]
 800ceae:	b938      	cbnz	r0, 800cec0 <__pow5mult+0x9c>
 800ceb0:	4622      	mov	r2, r4
 800ceb2:	4621      	mov	r1, r4
 800ceb4:	4638      	mov	r0, r7
 800ceb6:	f7ff ff13 	bl	800cce0 <__multiply>
 800ceba:	6020      	str	r0, [r4, #0]
 800cebc:	f8c0 9000 	str.w	r9, [r0]
 800cec0:	4604      	mov	r4, r0
 800cec2:	e7e4      	b.n	800ce8e <__pow5mult+0x6a>
 800cec4:	4630      	mov	r0, r6
 800cec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ceca:	bf00      	nop
 800cecc:	0800e9bc 	.word	0x0800e9bc
 800ced0:	0800e889 	.word	0x0800e889
 800ced4:	0800e909 	.word	0x0800e909

0800ced8 <__lshift>:
 800ced8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cedc:	460c      	mov	r4, r1
 800cede:	6849      	ldr	r1, [r1, #4]
 800cee0:	6923      	ldr	r3, [r4, #16]
 800cee2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cee6:	68a3      	ldr	r3, [r4, #8]
 800cee8:	4607      	mov	r7, r0
 800ceea:	4691      	mov	r9, r2
 800ceec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cef0:	f108 0601 	add.w	r6, r8, #1
 800cef4:	42b3      	cmp	r3, r6
 800cef6:	db0b      	blt.n	800cf10 <__lshift+0x38>
 800cef8:	4638      	mov	r0, r7
 800cefa:	f7ff fde7 	bl	800cacc <_Balloc>
 800cefe:	4605      	mov	r5, r0
 800cf00:	b948      	cbnz	r0, 800cf16 <__lshift+0x3e>
 800cf02:	4602      	mov	r2, r0
 800cf04:	4b28      	ldr	r3, [pc, #160]	@ (800cfa8 <__lshift+0xd0>)
 800cf06:	4829      	ldr	r0, [pc, #164]	@ (800cfac <__lshift+0xd4>)
 800cf08:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cf0c:	f000 fbca 	bl	800d6a4 <__assert_func>
 800cf10:	3101      	adds	r1, #1
 800cf12:	005b      	lsls	r3, r3, #1
 800cf14:	e7ee      	b.n	800cef4 <__lshift+0x1c>
 800cf16:	2300      	movs	r3, #0
 800cf18:	f100 0114 	add.w	r1, r0, #20
 800cf1c:	f100 0210 	add.w	r2, r0, #16
 800cf20:	4618      	mov	r0, r3
 800cf22:	4553      	cmp	r3, sl
 800cf24:	db33      	blt.n	800cf8e <__lshift+0xb6>
 800cf26:	6920      	ldr	r0, [r4, #16]
 800cf28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf2c:	f104 0314 	add.w	r3, r4, #20
 800cf30:	f019 091f 	ands.w	r9, r9, #31
 800cf34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cf3c:	d02b      	beq.n	800cf96 <__lshift+0xbe>
 800cf3e:	f1c9 0e20 	rsb	lr, r9, #32
 800cf42:	468a      	mov	sl, r1
 800cf44:	2200      	movs	r2, #0
 800cf46:	6818      	ldr	r0, [r3, #0]
 800cf48:	fa00 f009 	lsl.w	r0, r0, r9
 800cf4c:	4310      	orrs	r0, r2
 800cf4e:	f84a 0b04 	str.w	r0, [sl], #4
 800cf52:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf56:	459c      	cmp	ip, r3
 800cf58:	fa22 f20e 	lsr.w	r2, r2, lr
 800cf5c:	d8f3      	bhi.n	800cf46 <__lshift+0x6e>
 800cf5e:	ebac 0304 	sub.w	r3, ip, r4
 800cf62:	3b15      	subs	r3, #21
 800cf64:	f023 0303 	bic.w	r3, r3, #3
 800cf68:	3304      	adds	r3, #4
 800cf6a:	f104 0015 	add.w	r0, r4, #21
 800cf6e:	4560      	cmp	r0, ip
 800cf70:	bf88      	it	hi
 800cf72:	2304      	movhi	r3, #4
 800cf74:	50ca      	str	r2, [r1, r3]
 800cf76:	b10a      	cbz	r2, 800cf7c <__lshift+0xa4>
 800cf78:	f108 0602 	add.w	r6, r8, #2
 800cf7c:	3e01      	subs	r6, #1
 800cf7e:	4638      	mov	r0, r7
 800cf80:	612e      	str	r6, [r5, #16]
 800cf82:	4621      	mov	r1, r4
 800cf84:	f7ff fde2 	bl	800cb4c <_Bfree>
 800cf88:	4628      	mov	r0, r5
 800cf8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf8e:	f842 0f04 	str.w	r0, [r2, #4]!
 800cf92:	3301      	adds	r3, #1
 800cf94:	e7c5      	b.n	800cf22 <__lshift+0x4a>
 800cf96:	3904      	subs	r1, #4
 800cf98:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf9c:	f841 2f04 	str.w	r2, [r1, #4]!
 800cfa0:	459c      	cmp	ip, r3
 800cfa2:	d8f9      	bhi.n	800cf98 <__lshift+0xc0>
 800cfa4:	e7ea      	b.n	800cf7c <__lshift+0xa4>
 800cfa6:	bf00      	nop
 800cfa8:	0800e8f8 	.word	0x0800e8f8
 800cfac:	0800e909 	.word	0x0800e909

0800cfb0 <__mcmp>:
 800cfb0:	690a      	ldr	r2, [r1, #16]
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	6900      	ldr	r0, [r0, #16]
 800cfb6:	1a80      	subs	r0, r0, r2
 800cfb8:	b530      	push	{r4, r5, lr}
 800cfba:	d10e      	bne.n	800cfda <__mcmp+0x2a>
 800cfbc:	3314      	adds	r3, #20
 800cfbe:	3114      	adds	r1, #20
 800cfc0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cfc4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cfc8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cfcc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cfd0:	4295      	cmp	r5, r2
 800cfd2:	d003      	beq.n	800cfdc <__mcmp+0x2c>
 800cfd4:	d205      	bcs.n	800cfe2 <__mcmp+0x32>
 800cfd6:	f04f 30ff 	mov.w	r0, #4294967295
 800cfda:	bd30      	pop	{r4, r5, pc}
 800cfdc:	42a3      	cmp	r3, r4
 800cfde:	d3f3      	bcc.n	800cfc8 <__mcmp+0x18>
 800cfe0:	e7fb      	b.n	800cfda <__mcmp+0x2a>
 800cfe2:	2001      	movs	r0, #1
 800cfe4:	e7f9      	b.n	800cfda <__mcmp+0x2a>
	...

0800cfe8 <__mdiff>:
 800cfe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfec:	4689      	mov	r9, r1
 800cfee:	4606      	mov	r6, r0
 800cff0:	4611      	mov	r1, r2
 800cff2:	4648      	mov	r0, r9
 800cff4:	4614      	mov	r4, r2
 800cff6:	f7ff ffdb 	bl	800cfb0 <__mcmp>
 800cffa:	1e05      	subs	r5, r0, #0
 800cffc:	d112      	bne.n	800d024 <__mdiff+0x3c>
 800cffe:	4629      	mov	r1, r5
 800d000:	4630      	mov	r0, r6
 800d002:	f7ff fd63 	bl	800cacc <_Balloc>
 800d006:	4602      	mov	r2, r0
 800d008:	b928      	cbnz	r0, 800d016 <__mdiff+0x2e>
 800d00a:	4b3f      	ldr	r3, [pc, #252]	@ (800d108 <__mdiff+0x120>)
 800d00c:	f240 2137 	movw	r1, #567	@ 0x237
 800d010:	483e      	ldr	r0, [pc, #248]	@ (800d10c <__mdiff+0x124>)
 800d012:	f000 fb47 	bl	800d6a4 <__assert_func>
 800d016:	2301      	movs	r3, #1
 800d018:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d01c:	4610      	mov	r0, r2
 800d01e:	b003      	add	sp, #12
 800d020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d024:	bfbc      	itt	lt
 800d026:	464b      	movlt	r3, r9
 800d028:	46a1      	movlt	r9, r4
 800d02a:	4630      	mov	r0, r6
 800d02c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d030:	bfba      	itte	lt
 800d032:	461c      	movlt	r4, r3
 800d034:	2501      	movlt	r5, #1
 800d036:	2500      	movge	r5, #0
 800d038:	f7ff fd48 	bl	800cacc <_Balloc>
 800d03c:	4602      	mov	r2, r0
 800d03e:	b918      	cbnz	r0, 800d048 <__mdiff+0x60>
 800d040:	4b31      	ldr	r3, [pc, #196]	@ (800d108 <__mdiff+0x120>)
 800d042:	f240 2145 	movw	r1, #581	@ 0x245
 800d046:	e7e3      	b.n	800d010 <__mdiff+0x28>
 800d048:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d04c:	6926      	ldr	r6, [r4, #16]
 800d04e:	60c5      	str	r5, [r0, #12]
 800d050:	f109 0310 	add.w	r3, r9, #16
 800d054:	f109 0514 	add.w	r5, r9, #20
 800d058:	f104 0e14 	add.w	lr, r4, #20
 800d05c:	f100 0b14 	add.w	fp, r0, #20
 800d060:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d064:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d068:	9301      	str	r3, [sp, #4]
 800d06a:	46d9      	mov	r9, fp
 800d06c:	f04f 0c00 	mov.w	ip, #0
 800d070:	9b01      	ldr	r3, [sp, #4]
 800d072:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d076:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d07a:	9301      	str	r3, [sp, #4]
 800d07c:	fa1f f38a 	uxth.w	r3, sl
 800d080:	4619      	mov	r1, r3
 800d082:	b283      	uxth	r3, r0
 800d084:	1acb      	subs	r3, r1, r3
 800d086:	0c00      	lsrs	r0, r0, #16
 800d088:	4463      	add	r3, ip
 800d08a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d08e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d092:	b29b      	uxth	r3, r3
 800d094:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d098:	4576      	cmp	r6, lr
 800d09a:	f849 3b04 	str.w	r3, [r9], #4
 800d09e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d0a2:	d8e5      	bhi.n	800d070 <__mdiff+0x88>
 800d0a4:	1b33      	subs	r3, r6, r4
 800d0a6:	3b15      	subs	r3, #21
 800d0a8:	f023 0303 	bic.w	r3, r3, #3
 800d0ac:	3415      	adds	r4, #21
 800d0ae:	3304      	adds	r3, #4
 800d0b0:	42a6      	cmp	r6, r4
 800d0b2:	bf38      	it	cc
 800d0b4:	2304      	movcc	r3, #4
 800d0b6:	441d      	add	r5, r3
 800d0b8:	445b      	add	r3, fp
 800d0ba:	461e      	mov	r6, r3
 800d0bc:	462c      	mov	r4, r5
 800d0be:	4544      	cmp	r4, r8
 800d0c0:	d30e      	bcc.n	800d0e0 <__mdiff+0xf8>
 800d0c2:	f108 0103 	add.w	r1, r8, #3
 800d0c6:	1b49      	subs	r1, r1, r5
 800d0c8:	f021 0103 	bic.w	r1, r1, #3
 800d0cc:	3d03      	subs	r5, #3
 800d0ce:	45a8      	cmp	r8, r5
 800d0d0:	bf38      	it	cc
 800d0d2:	2100      	movcc	r1, #0
 800d0d4:	440b      	add	r3, r1
 800d0d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d0da:	b191      	cbz	r1, 800d102 <__mdiff+0x11a>
 800d0dc:	6117      	str	r7, [r2, #16]
 800d0de:	e79d      	b.n	800d01c <__mdiff+0x34>
 800d0e0:	f854 1b04 	ldr.w	r1, [r4], #4
 800d0e4:	46e6      	mov	lr, ip
 800d0e6:	0c08      	lsrs	r0, r1, #16
 800d0e8:	fa1c fc81 	uxtah	ip, ip, r1
 800d0ec:	4471      	add	r1, lr
 800d0ee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d0f2:	b289      	uxth	r1, r1
 800d0f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d0f8:	f846 1b04 	str.w	r1, [r6], #4
 800d0fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d100:	e7dd      	b.n	800d0be <__mdiff+0xd6>
 800d102:	3f01      	subs	r7, #1
 800d104:	e7e7      	b.n	800d0d6 <__mdiff+0xee>
 800d106:	bf00      	nop
 800d108:	0800e8f8 	.word	0x0800e8f8
 800d10c:	0800e909 	.word	0x0800e909

0800d110 <__d2b>:
 800d110:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d114:	460f      	mov	r7, r1
 800d116:	2101      	movs	r1, #1
 800d118:	ec59 8b10 	vmov	r8, r9, d0
 800d11c:	4616      	mov	r6, r2
 800d11e:	f7ff fcd5 	bl	800cacc <_Balloc>
 800d122:	4604      	mov	r4, r0
 800d124:	b930      	cbnz	r0, 800d134 <__d2b+0x24>
 800d126:	4602      	mov	r2, r0
 800d128:	4b23      	ldr	r3, [pc, #140]	@ (800d1b8 <__d2b+0xa8>)
 800d12a:	4824      	ldr	r0, [pc, #144]	@ (800d1bc <__d2b+0xac>)
 800d12c:	f240 310f 	movw	r1, #783	@ 0x30f
 800d130:	f000 fab8 	bl	800d6a4 <__assert_func>
 800d134:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d138:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d13c:	b10d      	cbz	r5, 800d142 <__d2b+0x32>
 800d13e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d142:	9301      	str	r3, [sp, #4]
 800d144:	f1b8 0300 	subs.w	r3, r8, #0
 800d148:	d023      	beq.n	800d192 <__d2b+0x82>
 800d14a:	4668      	mov	r0, sp
 800d14c:	9300      	str	r3, [sp, #0]
 800d14e:	f7ff fd84 	bl	800cc5a <__lo0bits>
 800d152:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d156:	b1d0      	cbz	r0, 800d18e <__d2b+0x7e>
 800d158:	f1c0 0320 	rsb	r3, r0, #32
 800d15c:	fa02 f303 	lsl.w	r3, r2, r3
 800d160:	430b      	orrs	r3, r1
 800d162:	40c2      	lsrs	r2, r0
 800d164:	6163      	str	r3, [r4, #20]
 800d166:	9201      	str	r2, [sp, #4]
 800d168:	9b01      	ldr	r3, [sp, #4]
 800d16a:	61a3      	str	r3, [r4, #24]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	bf0c      	ite	eq
 800d170:	2201      	moveq	r2, #1
 800d172:	2202      	movne	r2, #2
 800d174:	6122      	str	r2, [r4, #16]
 800d176:	b1a5      	cbz	r5, 800d1a2 <__d2b+0x92>
 800d178:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d17c:	4405      	add	r5, r0
 800d17e:	603d      	str	r5, [r7, #0]
 800d180:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d184:	6030      	str	r0, [r6, #0]
 800d186:	4620      	mov	r0, r4
 800d188:	b003      	add	sp, #12
 800d18a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d18e:	6161      	str	r1, [r4, #20]
 800d190:	e7ea      	b.n	800d168 <__d2b+0x58>
 800d192:	a801      	add	r0, sp, #4
 800d194:	f7ff fd61 	bl	800cc5a <__lo0bits>
 800d198:	9b01      	ldr	r3, [sp, #4]
 800d19a:	6163      	str	r3, [r4, #20]
 800d19c:	3020      	adds	r0, #32
 800d19e:	2201      	movs	r2, #1
 800d1a0:	e7e8      	b.n	800d174 <__d2b+0x64>
 800d1a2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d1a6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d1aa:	6038      	str	r0, [r7, #0]
 800d1ac:	6918      	ldr	r0, [r3, #16]
 800d1ae:	f7ff fd35 	bl	800cc1c <__hi0bits>
 800d1b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d1b6:	e7e5      	b.n	800d184 <__d2b+0x74>
 800d1b8:	0800e8f8 	.word	0x0800e8f8
 800d1bc:	0800e909 	.word	0x0800e909

0800d1c0 <__sfputc_r>:
 800d1c0:	6893      	ldr	r3, [r2, #8]
 800d1c2:	3b01      	subs	r3, #1
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	b410      	push	{r4}
 800d1c8:	6093      	str	r3, [r2, #8]
 800d1ca:	da08      	bge.n	800d1de <__sfputc_r+0x1e>
 800d1cc:	6994      	ldr	r4, [r2, #24]
 800d1ce:	42a3      	cmp	r3, r4
 800d1d0:	db01      	blt.n	800d1d6 <__sfputc_r+0x16>
 800d1d2:	290a      	cmp	r1, #10
 800d1d4:	d103      	bne.n	800d1de <__sfputc_r+0x1e>
 800d1d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1da:	f7fe bca2 	b.w	800bb22 <__swbuf_r>
 800d1de:	6813      	ldr	r3, [r2, #0]
 800d1e0:	1c58      	adds	r0, r3, #1
 800d1e2:	6010      	str	r0, [r2, #0]
 800d1e4:	7019      	strb	r1, [r3, #0]
 800d1e6:	4608      	mov	r0, r1
 800d1e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1ec:	4770      	bx	lr

0800d1ee <__sfputs_r>:
 800d1ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1f0:	4606      	mov	r6, r0
 800d1f2:	460f      	mov	r7, r1
 800d1f4:	4614      	mov	r4, r2
 800d1f6:	18d5      	adds	r5, r2, r3
 800d1f8:	42ac      	cmp	r4, r5
 800d1fa:	d101      	bne.n	800d200 <__sfputs_r+0x12>
 800d1fc:	2000      	movs	r0, #0
 800d1fe:	e007      	b.n	800d210 <__sfputs_r+0x22>
 800d200:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d204:	463a      	mov	r2, r7
 800d206:	4630      	mov	r0, r6
 800d208:	f7ff ffda 	bl	800d1c0 <__sfputc_r>
 800d20c:	1c43      	adds	r3, r0, #1
 800d20e:	d1f3      	bne.n	800d1f8 <__sfputs_r+0xa>
 800d210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d214 <_vfiprintf_r>:
 800d214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d218:	460d      	mov	r5, r1
 800d21a:	b09d      	sub	sp, #116	@ 0x74
 800d21c:	4614      	mov	r4, r2
 800d21e:	4698      	mov	r8, r3
 800d220:	4606      	mov	r6, r0
 800d222:	b118      	cbz	r0, 800d22c <_vfiprintf_r+0x18>
 800d224:	6a03      	ldr	r3, [r0, #32]
 800d226:	b90b      	cbnz	r3, 800d22c <_vfiprintf_r+0x18>
 800d228:	f7fe fb92 	bl	800b950 <__sinit>
 800d22c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d22e:	07d9      	lsls	r1, r3, #31
 800d230:	d405      	bmi.n	800d23e <_vfiprintf_r+0x2a>
 800d232:	89ab      	ldrh	r3, [r5, #12]
 800d234:	059a      	lsls	r2, r3, #22
 800d236:	d402      	bmi.n	800d23e <_vfiprintf_r+0x2a>
 800d238:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d23a:	f7fe fd94 	bl	800bd66 <__retarget_lock_acquire_recursive>
 800d23e:	89ab      	ldrh	r3, [r5, #12]
 800d240:	071b      	lsls	r3, r3, #28
 800d242:	d501      	bpl.n	800d248 <_vfiprintf_r+0x34>
 800d244:	692b      	ldr	r3, [r5, #16]
 800d246:	b99b      	cbnz	r3, 800d270 <_vfiprintf_r+0x5c>
 800d248:	4629      	mov	r1, r5
 800d24a:	4630      	mov	r0, r6
 800d24c:	f7fe fca8 	bl	800bba0 <__swsetup_r>
 800d250:	b170      	cbz	r0, 800d270 <_vfiprintf_r+0x5c>
 800d252:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d254:	07dc      	lsls	r4, r3, #31
 800d256:	d504      	bpl.n	800d262 <_vfiprintf_r+0x4e>
 800d258:	f04f 30ff 	mov.w	r0, #4294967295
 800d25c:	b01d      	add	sp, #116	@ 0x74
 800d25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d262:	89ab      	ldrh	r3, [r5, #12]
 800d264:	0598      	lsls	r0, r3, #22
 800d266:	d4f7      	bmi.n	800d258 <_vfiprintf_r+0x44>
 800d268:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d26a:	f7fe fd7d 	bl	800bd68 <__retarget_lock_release_recursive>
 800d26e:	e7f3      	b.n	800d258 <_vfiprintf_r+0x44>
 800d270:	2300      	movs	r3, #0
 800d272:	9309      	str	r3, [sp, #36]	@ 0x24
 800d274:	2320      	movs	r3, #32
 800d276:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d27a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d27e:	2330      	movs	r3, #48	@ 0x30
 800d280:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d430 <_vfiprintf_r+0x21c>
 800d284:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d288:	f04f 0901 	mov.w	r9, #1
 800d28c:	4623      	mov	r3, r4
 800d28e:	469a      	mov	sl, r3
 800d290:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d294:	b10a      	cbz	r2, 800d29a <_vfiprintf_r+0x86>
 800d296:	2a25      	cmp	r2, #37	@ 0x25
 800d298:	d1f9      	bne.n	800d28e <_vfiprintf_r+0x7a>
 800d29a:	ebba 0b04 	subs.w	fp, sl, r4
 800d29e:	d00b      	beq.n	800d2b8 <_vfiprintf_r+0xa4>
 800d2a0:	465b      	mov	r3, fp
 800d2a2:	4622      	mov	r2, r4
 800d2a4:	4629      	mov	r1, r5
 800d2a6:	4630      	mov	r0, r6
 800d2a8:	f7ff ffa1 	bl	800d1ee <__sfputs_r>
 800d2ac:	3001      	adds	r0, #1
 800d2ae:	f000 80a7 	beq.w	800d400 <_vfiprintf_r+0x1ec>
 800d2b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d2b4:	445a      	add	r2, fp
 800d2b6:	9209      	str	r2, [sp, #36]	@ 0x24
 800d2b8:	f89a 3000 	ldrb.w	r3, [sl]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	f000 809f 	beq.w	800d400 <_vfiprintf_r+0x1ec>
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	f04f 32ff 	mov.w	r2, #4294967295
 800d2c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2cc:	f10a 0a01 	add.w	sl, sl, #1
 800d2d0:	9304      	str	r3, [sp, #16]
 800d2d2:	9307      	str	r3, [sp, #28]
 800d2d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d2d8:	931a      	str	r3, [sp, #104]	@ 0x68
 800d2da:	4654      	mov	r4, sl
 800d2dc:	2205      	movs	r2, #5
 800d2de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2e2:	4853      	ldr	r0, [pc, #332]	@ (800d430 <_vfiprintf_r+0x21c>)
 800d2e4:	f7f2 ff84 	bl	80001f0 <memchr>
 800d2e8:	9a04      	ldr	r2, [sp, #16]
 800d2ea:	b9d8      	cbnz	r0, 800d324 <_vfiprintf_r+0x110>
 800d2ec:	06d1      	lsls	r1, r2, #27
 800d2ee:	bf44      	itt	mi
 800d2f0:	2320      	movmi	r3, #32
 800d2f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d2f6:	0713      	lsls	r3, r2, #28
 800d2f8:	bf44      	itt	mi
 800d2fa:	232b      	movmi	r3, #43	@ 0x2b
 800d2fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d300:	f89a 3000 	ldrb.w	r3, [sl]
 800d304:	2b2a      	cmp	r3, #42	@ 0x2a
 800d306:	d015      	beq.n	800d334 <_vfiprintf_r+0x120>
 800d308:	9a07      	ldr	r2, [sp, #28]
 800d30a:	4654      	mov	r4, sl
 800d30c:	2000      	movs	r0, #0
 800d30e:	f04f 0c0a 	mov.w	ip, #10
 800d312:	4621      	mov	r1, r4
 800d314:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d318:	3b30      	subs	r3, #48	@ 0x30
 800d31a:	2b09      	cmp	r3, #9
 800d31c:	d94b      	bls.n	800d3b6 <_vfiprintf_r+0x1a2>
 800d31e:	b1b0      	cbz	r0, 800d34e <_vfiprintf_r+0x13a>
 800d320:	9207      	str	r2, [sp, #28]
 800d322:	e014      	b.n	800d34e <_vfiprintf_r+0x13a>
 800d324:	eba0 0308 	sub.w	r3, r0, r8
 800d328:	fa09 f303 	lsl.w	r3, r9, r3
 800d32c:	4313      	orrs	r3, r2
 800d32e:	9304      	str	r3, [sp, #16]
 800d330:	46a2      	mov	sl, r4
 800d332:	e7d2      	b.n	800d2da <_vfiprintf_r+0xc6>
 800d334:	9b03      	ldr	r3, [sp, #12]
 800d336:	1d19      	adds	r1, r3, #4
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	9103      	str	r1, [sp, #12]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	bfbb      	ittet	lt
 800d340:	425b      	neglt	r3, r3
 800d342:	f042 0202 	orrlt.w	r2, r2, #2
 800d346:	9307      	strge	r3, [sp, #28]
 800d348:	9307      	strlt	r3, [sp, #28]
 800d34a:	bfb8      	it	lt
 800d34c:	9204      	strlt	r2, [sp, #16]
 800d34e:	7823      	ldrb	r3, [r4, #0]
 800d350:	2b2e      	cmp	r3, #46	@ 0x2e
 800d352:	d10a      	bne.n	800d36a <_vfiprintf_r+0x156>
 800d354:	7863      	ldrb	r3, [r4, #1]
 800d356:	2b2a      	cmp	r3, #42	@ 0x2a
 800d358:	d132      	bne.n	800d3c0 <_vfiprintf_r+0x1ac>
 800d35a:	9b03      	ldr	r3, [sp, #12]
 800d35c:	1d1a      	adds	r2, r3, #4
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	9203      	str	r2, [sp, #12]
 800d362:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d366:	3402      	adds	r4, #2
 800d368:	9305      	str	r3, [sp, #20]
 800d36a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d440 <_vfiprintf_r+0x22c>
 800d36e:	7821      	ldrb	r1, [r4, #0]
 800d370:	2203      	movs	r2, #3
 800d372:	4650      	mov	r0, sl
 800d374:	f7f2 ff3c 	bl	80001f0 <memchr>
 800d378:	b138      	cbz	r0, 800d38a <_vfiprintf_r+0x176>
 800d37a:	9b04      	ldr	r3, [sp, #16]
 800d37c:	eba0 000a 	sub.w	r0, r0, sl
 800d380:	2240      	movs	r2, #64	@ 0x40
 800d382:	4082      	lsls	r2, r0
 800d384:	4313      	orrs	r3, r2
 800d386:	3401      	adds	r4, #1
 800d388:	9304      	str	r3, [sp, #16]
 800d38a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d38e:	4829      	ldr	r0, [pc, #164]	@ (800d434 <_vfiprintf_r+0x220>)
 800d390:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d394:	2206      	movs	r2, #6
 800d396:	f7f2 ff2b 	bl	80001f0 <memchr>
 800d39a:	2800      	cmp	r0, #0
 800d39c:	d03f      	beq.n	800d41e <_vfiprintf_r+0x20a>
 800d39e:	4b26      	ldr	r3, [pc, #152]	@ (800d438 <_vfiprintf_r+0x224>)
 800d3a0:	bb1b      	cbnz	r3, 800d3ea <_vfiprintf_r+0x1d6>
 800d3a2:	9b03      	ldr	r3, [sp, #12]
 800d3a4:	3307      	adds	r3, #7
 800d3a6:	f023 0307 	bic.w	r3, r3, #7
 800d3aa:	3308      	adds	r3, #8
 800d3ac:	9303      	str	r3, [sp, #12]
 800d3ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3b0:	443b      	add	r3, r7
 800d3b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3b4:	e76a      	b.n	800d28c <_vfiprintf_r+0x78>
 800d3b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3ba:	460c      	mov	r4, r1
 800d3bc:	2001      	movs	r0, #1
 800d3be:	e7a8      	b.n	800d312 <_vfiprintf_r+0xfe>
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	3401      	adds	r4, #1
 800d3c4:	9305      	str	r3, [sp, #20]
 800d3c6:	4619      	mov	r1, r3
 800d3c8:	f04f 0c0a 	mov.w	ip, #10
 800d3cc:	4620      	mov	r0, r4
 800d3ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3d2:	3a30      	subs	r2, #48	@ 0x30
 800d3d4:	2a09      	cmp	r2, #9
 800d3d6:	d903      	bls.n	800d3e0 <_vfiprintf_r+0x1cc>
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d0c6      	beq.n	800d36a <_vfiprintf_r+0x156>
 800d3dc:	9105      	str	r1, [sp, #20]
 800d3de:	e7c4      	b.n	800d36a <_vfiprintf_r+0x156>
 800d3e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3e4:	4604      	mov	r4, r0
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	e7f0      	b.n	800d3cc <_vfiprintf_r+0x1b8>
 800d3ea:	ab03      	add	r3, sp, #12
 800d3ec:	9300      	str	r3, [sp, #0]
 800d3ee:	462a      	mov	r2, r5
 800d3f0:	4b12      	ldr	r3, [pc, #72]	@ (800d43c <_vfiprintf_r+0x228>)
 800d3f2:	a904      	add	r1, sp, #16
 800d3f4:	4630      	mov	r0, r6
 800d3f6:	f7fd fe69 	bl	800b0cc <_printf_float>
 800d3fa:	4607      	mov	r7, r0
 800d3fc:	1c78      	adds	r0, r7, #1
 800d3fe:	d1d6      	bne.n	800d3ae <_vfiprintf_r+0x19a>
 800d400:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d402:	07d9      	lsls	r1, r3, #31
 800d404:	d405      	bmi.n	800d412 <_vfiprintf_r+0x1fe>
 800d406:	89ab      	ldrh	r3, [r5, #12]
 800d408:	059a      	lsls	r2, r3, #22
 800d40a:	d402      	bmi.n	800d412 <_vfiprintf_r+0x1fe>
 800d40c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d40e:	f7fe fcab 	bl	800bd68 <__retarget_lock_release_recursive>
 800d412:	89ab      	ldrh	r3, [r5, #12]
 800d414:	065b      	lsls	r3, r3, #25
 800d416:	f53f af1f 	bmi.w	800d258 <_vfiprintf_r+0x44>
 800d41a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d41c:	e71e      	b.n	800d25c <_vfiprintf_r+0x48>
 800d41e:	ab03      	add	r3, sp, #12
 800d420:	9300      	str	r3, [sp, #0]
 800d422:	462a      	mov	r2, r5
 800d424:	4b05      	ldr	r3, [pc, #20]	@ (800d43c <_vfiprintf_r+0x228>)
 800d426:	a904      	add	r1, sp, #16
 800d428:	4630      	mov	r0, r6
 800d42a:	f7fe f8e7 	bl	800b5fc <_printf_i>
 800d42e:	e7e4      	b.n	800d3fa <_vfiprintf_r+0x1e6>
 800d430:	0800e962 	.word	0x0800e962
 800d434:	0800e96c 	.word	0x0800e96c
 800d438:	0800b0cd 	.word	0x0800b0cd
 800d43c:	0800d1ef 	.word	0x0800d1ef
 800d440:	0800e968 	.word	0x0800e968

0800d444 <__sflush_r>:
 800d444:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d44c:	0716      	lsls	r6, r2, #28
 800d44e:	4605      	mov	r5, r0
 800d450:	460c      	mov	r4, r1
 800d452:	d454      	bmi.n	800d4fe <__sflush_r+0xba>
 800d454:	684b      	ldr	r3, [r1, #4]
 800d456:	2b00      	cmp	r3, #0
 800d458:	dc02      	bgt.n	800d460 <__sflush_r+0x1c>
 800d45a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	dd48      	ble.n	800d4f2 <__sflush_r+0xae>
 800d460:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d462:	2e00      	cmp	r6, #0
 800d464:	d045      	beq.n	800d4f2 <__sflush_r+0xae>
 800d466:	2300      	movs	r3, #0
 800d468:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d46c:	682f      	ldr	r7, [r5, #0]
 800d46e:	6a21      	ldr	r1, [r4, #32]
 800d470:	602b      	str	r3, [r5, #0]
 800d472:	d030      	beq.n	800d4d6 <__sflush_r+0x92>
 800d474:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d476:	89a3      	ldrh	r3, [r4, #12]
 800d478:	0759      	lsls	r1, r3, #29
 800d47a:	d505      	bpl.n	800d488 <__sflush_r+0x44>
 800d47c:	6863      	ldr	r3, [r4, #4]
 800d47e:	1ad2      	subs	r2, r2, r3
 800d480:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d482:	b10b      	cbz	r3, 800d488 <__sflush_r+0x44>
 800d484:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d486:	1ad2      	subs	r2, r2, r3
 800d488:	2300      	movs	r3, #0
 800d48a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d48c:	6a21      	ldr	r1, [r4, #32]
 800d48e:	4628      	mov	r0, r5
 800d490:	47b0      	blx	r6
 800d492:	1c43      	adds	r3, r0, #1
 800d494:	89a3      	ldrh	r3, [r4, #12]
 800d496:	d106      	bne.n	800d4a6 <__sflush_r+0x62>
 800d498:	6829      	ldr	r1, [r5, #0]
 800d49a:	291d      	cmp	r1, #29
 800d49c:	d82b      	bhi.n	800d4f6 <__sflush_r+0xb2>
 800d49e:	4a2a      	ldr	r2, [pc, #168]	@ (800d548 <__sflush_r+0x104>)
 800d4a0:	40ca      	lsrs	r2, r1
 800d4a2:	07d6      	lsls	r6, r2, #31
 800d4a4:	d527      	bpl.n	800d4f6 <__sflush_r+0xb2>
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	6062      	str	r2, [r4, #4]
 800d4aa:	04d9      	lsls	r1, r3, #19
 800d4ac:	6922      	ldr	r2, [r4, #16]
 800d4ae:	6022      	str	r2, [r4, #0]
 800d4b0:	d504      	bpl.n	800d4bc <__sflush_r+0x78>
 800d4b2:	1c42      	adds	r2, r0, #1
 800d4b4:	d101      	bne.n	800d4ba <__sflush_r+0x76>
 800d4b6:	682b      	ldr	r3, [r5, #0]
 800d4b8:	b903      	cbnz	r3, 800d4bc <__sflush_r+0x78>
 800d4ba:	6560      	str	r0, [r4, #84]	@ 0x54
 800d4bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d4be:	602f      	str	r7, [r5, #0]
 800d4c0:	b1b9      	cbz	r1, 800d4f2 <__sflush_r+0xae>
 800d4c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d4c6:	4299      	cmp	r1, r3
 800d4c8:	d002      	beq.n	800d4d0 <__sflush_r+0x8c>
 800d4ca:	4628      	mov	r0, r5
 800d4cc:	f7ff fab4 	bl	800ca38 <_free_r>
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	6363      	str	r3, [r4, #52]	@ 0x34
 800d4d4:	e00d      	b.n	800d4f2 <__sflush_r+0xae>
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	4628      	mov	r0, r5
 800d4da:	47b0      	blx	r6
 800d4dc:	4602      	mov	r2, r0
 800d4de:	1c50      	adds	r0, r2, #1
 800d4e0:	d1c9      	bne.n	800d476 <__sflush_r+0x32>
 800d4e2:	682b      	ldr	r3, [r5, #0]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d0c6      	beq.n	800d476 <__sflush_r+0x32>
 800d4e8:	2b1d      	cmp	r3, #29
 800d4ea:	d001      	beq.n	800d4f0 <__sflush_r+0xac>
 800d4ec:	2b16      	cmp	r3, #22
 800d4ee:	d11e      	bne.n	800d52e <__sflush_r+0xea>
 800d4f0:	602f      	str	r7, [r5, #0]
 800d4f2:	2000      	movs	r0, #0
 800d4f4:	e022      	b.n	800d53c <__sflush_r+0xf8>
 800d4f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4fa:	b21b      	sxth	r3, r3
 800d4fc:	e01b      	b.n	800d536 <__sflush_r+0xf2>
 800d4fe:	690f      	ldr	r7, [r1, #16]
 800d500:	2f00      	cmp	r7, #0
 800d502:	d0f6      	beq.n	800d4f2 <__sflush_r+0xae>
 800d504:	0793      	lsls	r3, r2, #30
 800d506:	680e      	ldr	r6, [r1, #0]
 800d508:	bf08      	it	eq
 800d50a:	694b      	ldreq	r3, [r1, #20]
 800d50c:	600f      	str	r7, [r1, #0]
 800d50e:	bf18      	it	ne
 800d510:	2300      	movne	r3, #0
 800d512:	eba6 0807 	sub.w	r8, r6, r7
 800d516:	608b      	str	r3, [r1, #8]
 800d518:	f1b8 0f00 	cmp.w	r8, #0
 800d51c:	dde9      	ble.n	800d4f2 <__sflush_r+0xae>
 800d51e:	6a21      	ldr	r1, [r4, #32]
 800d520:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d522:	4643      	mov	r3, r8
 800d524:	463a      	mov	r2, r7
 800d526:	4628      	mov	r0, r5
 800d528:	47b0      	blx	r6
 800d52a:	2800      	cmp	r0, #0
 800d52c:	dc08      	bgt.n	800d540 <__sflush_r+0xfc>
 800d52e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d532:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d536:	81a3      	strh	r3, [r4, #12]
 800d538:	f04f 30ff 	mov.w	r0, #4294967295
 800d53c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d540:	4407      	add	r7, r0
 800d542:	eba8 0800 	sub.w	r8, r8, r0
 800d546:	e7e7      	b.n	800d518 <__sflush_r+0xd4>
 800d548:	20400001 	.word	0x20400001

0800d54c <_fflush_r>:
 800d54c:	b538      	push	{r3, r4, r5, lr}
 800d54e:	690b      	ldr	r3, [r1, #16]
 800d550:	4605      	mov	r5, r0
 800d552:	460c      	mov	r4, r1
 800d554:	b913      	cbnz	r3, 800d55c <_fflush_r+0x10>
 800d556:	2500      	movs	r5, #0
 800d558:	4628      	mov	r0, r5
 800d55a:	bd38      	pop	{r3, r4, r5, pc}
 800d55c:	b118      	cbz	r0, 800d566 <_fflush_r+0x1a>
 800d55e:	6a03      	ldr	r3, [r0, #32]
 800d560:	b90b      	cbnz	r3, 800d566 <_fflush_r+0x1a>
 800d562:	f7fe f9f5 	bl	800b950 <__sinit>
 800d566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d0f3      	beq.n	800d556 <_fflush_r+0xa>
 800d56e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d570:	07d0      	lsls	r0, r2, #31
 800d572:	d404      	bmi.n	800d57e <_fflush_r+0x32>
 800d574:	0599      	lsls	r1, r3, #22
 800d576:	d402      	bmi.n	800d57e <_fflush_r+0x32>
 800d578:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d57a:	f7fe fbf4 	bl	800bd66 <__retarget_lock_acquire_recursive>
 800d57e:	4628      	mov	r0, r5
 800d580:	4621      	mov	r1, r4
 800d582:	f7ff ff5f 	bl	800d444 <__sflush_r>
 800d586:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d588:	07da      	lsls	r2, r3, #31
 800d58a:	4605      	mov	r5, r0
 800d58c:	d4e4      	bmi.n	800d558 <_fflush_r+0xc>
 800d58e:	89a3      	ldrh	r3, [r4, #12]
 800d590:	059b      	lsls	r3, r3, #22
 800d592:	d4e1      	bmi.n	800d558 <_fflush_r+0xc>
 800d594:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d596:	f7fe fbe7 	bl	800bd68 <__retarget_lock_release_recursive>
 800d59a:	e7dd      	b.n	800d558 <_fflush_r+0xc>

0800d59c <__swhatbuf_r>:
 800d59c:	b570      	push	{r4, r5, r6, lr}
 800d59e:	460c      	mov	r4, r1
 800d5a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5a4:	2900      	cmp	r1, #0
 800d5a6:	b096      	sub	sp, #88	@ 0x58
 800d5a8:	4615      	mov	r5, r2
 800d5aa:	461e      	mov	r6, r3
 800d5ac:	da0d      	bge.n	800d5ca <__swhatbuf_r+0x2e>
 800d5ae:	89a3      	ldrh	r3, [r4, #12]
 800d5b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d5b4:	f04f 0100 	mov.w	r1, #0
 800d5b8:	bf14      	ite	ne
 800d5ba:	2340      	movne	r3, #64	@ 0x40
 800d5bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d5c0:	2000      	movs	r0, #0
 800d5c2:	6031      	str	r1, [r6, #0]
 800d5c4:	602b      	str	r3, [r5, #0]
 800d5c6:	b016      	add	sp, #88	@ 0x58
 800d5c8:	bd70      	pop	{r4, r5, r6, pc}
 800d5ca:	466a      	mov	r2, sp
 800d5cc:	f000 f848 	bl	800d660 <_fstat_r>
 800d5d0:	2800      	cmp	r0, #0
 800d5d2:	dbec      	blt.n	800d5ae <__swhatbuf_r+0x12>
 800d5d4:	9901      	ldr	r1, [sp, #4]
 800d5d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d5da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d5de:	4259      	negs	r1, r3
 800d5e0:	4159      	adcs	r1, r3
 800d5e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d5e6:	e7eb      	b.n	800d5c0 <__swhatbuf_r+0x24>

0800d5e8 <__smakebuf_r>:
 800d5e8:	898b      	ldrh	r3, [r1, #12]
 800d5ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5ec:	079d      	lsls	r5, r3, #30
 800d5ee:	4606      	mov	r6, r0
 800d5f0:	460c      	mov	r4, r1
 800d5f2:	d507      	bpl.n	800d604 <__smakebuf_r+0x1c>
 800d5f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d5f8:	6023      	str	r3, [r4, #0]
 800d5fa:	6123      	str	r3, [r4, #16]
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	6163      	str	r3, [r4, #20]
 800d600:	b003      	add	sp, #12
 800d602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d604:	ab01      	add	r3, sp, #4
 800d606:	466a      	mov	r2, sp
 800d608:	f7ff ffc8 	bl	800d59c <__swhatbuf_r>
 800d60c:	9f00      	ldr	r7, [sp, #0]
 800d60e:	4605      	mov	r5, r0
 800d610:	4639      	mov	r1, r7
 800d612:	4630      	mov	r0, r6
 800d614:	f7fd fc2e 	bl	800ae74 <_malloc_r>
 800d618:	b948      	cbnz	r0, 800d62e <__smakebuf_r+0x46>
 800d61a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d61e:	059a      	lsls	r2, r3, #22
 800d620:	d4ee      	bmi.n	800d600 <__smakebuf_r+0x18>
 800d622:	f023 0303 	bic.w	r3, r3, #3
 800d626:	f043 0302 	orr.w	r3, r3, #2
 800d62a:	81a3      	strh	r3, [r4, #12]
 800d62c:	e7e2      	b.n	800d5f4 <__smakebuf_r+0xc>
 800d62e:	89a3      	ldrh	r3, [r4, #12]
 800d630:	6020      	str	r0, [r4, #0]
 800d632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d636:	81a3      	strh	r3, [r4, #12]
 800d638:	9b01      	ldr	r3, [sp, #4]
 800d63a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d63e:	b15b      	cbz	r3, 800d658 <__smakebuf_r+0x70>
 800d640:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d644:	4630      	mov	r0, r6
 800d646:	f000 f81d 	bl	800d684 <_isatty_r>
 800d64a:	b128      	cbz	r0, 800d658 <__smakebuf_r+0x70>
 800d64c:	89a3      	ldrh	r3, [r4, #12]
 800d64e:	f023 0303 	bic.w	r3, r3, #3
 800d652:	f043 0301 	orr.w	r3, r3, #1
 800d656:	81a3      	strh	r3, [r4, #12]
 800d658:	89a3      	ldrh	r3, [r4, #12]
 800d65a:	431d      	orrs	r5, r3
 800d65c:	81a5      	strh	r5, [r4, #12]
 800d65e:	e7cf      	b.n	800d600 <__smakebuf_r+0x18>

0800d660 <_fstat_r>:
 800d660:	b538      	push	{r3, r4, r5, lr}
 800d662:	4d07      	ldr	r5, [pc, #28]	@ (800d680 <_fstat_r+0x20>)
 800d664:	2300      	movs	r3, #0
 800d666:	4604      	mov	r4, r0
 800d668:	4608      	mov	r0, r1
 800d66a:	4611      	mov	r1, r2
 800d66c:	602b      	str	r3, [r5, #0]
 800d66e:	f7f5 faf3 	bl	8002c58 <_fstat>
 800d672:	1c43      	adds	r3, r0, #1
 800d674:	d102      	bne.n	800d67c <_fstat_r+0x1c>
 800d676:	682b      	ldr	r3, [r5, #0]
 800d678:	b103      	cbz	r3, 800d67c <_fstat_r+0x1c>
 800d67a:	6023      	str	r3, [r4, #0]
 800d67c:	bd38      	pop	{r3, r4, r5, pc}
 800d67e:	bf00      	nop
 800d680:	2002644c 	.word	0x2002644c

0800d684 <_isatty_r>:
 800d684:	b538      	push	{r3, r4, r5, lr}
 800d686:	4d06      	ldr	r5, [pc, #24]	@ (800d6a0 <_isatty_r+0x1c>)
 800d688:	2300      	movs	r3, #0
 800d68a:	4604      	mov	r4, r0
 800d68c:	4608      	mov	r0, r1
 800d68e:	602b      	str	r3, [r5, #0]
 800d690:	f7f5 faf2 	bl	8002c78 <_isatty>
 800d694:	1c43      	adds	r3, r0, #1
 800d696:	d102      	bne.n	800d69e <_isatty_r+0x1a>
 800d698:	682b      	ldr	r3, [r5, #0]
 800d69a:	b103      	cbz	r3, 800d69e <_isatty_r+0x1a>
 800d69c:	6023      	str	r3, [r4, #0]
 800d69e:	bd38      	pop	{r3, r4, r5, pc}
 800d6a0:	2002644c 	.word	0x2002644c

0800d6a4 <__assert_func>:
 800d6a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d6a6:	4614      	mov	r4, r2
 800d6a8:	461a      	mov	r2, r3
 800d6aa:	4b09      	ldr	r3, [pc, #36]	@ (800d6d0 <__assert_func+0x2c>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	4605      	mov	r5, r0
 800d6b0:	68d8      	ldr	r0, [r3, #12]
 800d6b2:	b14c      	cbz	r4, 800d6c8 <__assert_func+0x24>
 800d6b4:	4b07      	ldr	r3, [pc, #28]	@ (800d6d4 <__assert_func+0x30>)
 800d6b6:	9100      	str	r1, [sp, #0]
 800d6b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d6bc:	4906      	ldr	r1, [pc, #24]	@ (800d6d8 <__assert_func+0x34>)
 800d6be:	462b      	mov	r3, r5
 800d6c0:	f000 f842 	bl	800d748 <fiprintf>
 800d6c4:	f000 f852 	bl	800d76c <abort>
 800d6c8:	4b04      	ldr	r3, [pc, #16]	@ (800d6dc <__assert_func+0x38>)
 800d6ca:	461c      	mov	r4, r3
 800d6cc:	e7f3      	b.n	800d6b6 <__assert_func+0x12>
 800d6ce:	bf00      	nop
 800d6d0:	20000020 	.word	0x20000020
 800d6d4:	0800e97d 	.word	0x0800e97d
 800d6d8:	0800e98a 	.word	0x0800e98a
 800d6dc:	0800e9b8 	.word	0x0800e9b8

0800d6e0 <_calloc_r>:
 800d6e0:	b570      	push	{r4, r5, r6, lr}
 800d6e2:	fba1 5402 	umull	r5, r4, r1, r2
 800d6e6:	b934      	cbnz	r4, 800d6f6 <_calloc_r+0x16>
 800d6e8:	4629      	mov	r1, r5
 800d6ea:	f7fd fbc3 	bl	800ae74 <_malloc_r>
 800d6ee:	4606      	mov	r6, r0
 800d6f0:	b928      	cbnz	r0, 800d6fe <_calloc_r+0x1e>
 800d6f2:	4630      	mov	r0, r6
 800d6f4:	bd70      	pop	{r4, r5, r6, pc}
 800d6f6:	220c      	movs	r2, #12
 800d6f8:	6002      	str	r2, [r0, #0]
 800d6fa:	2600      	movs	r6, #0
 800d6fc:	e7f9      	b.n	800d6f2 <_calloc_r+0x12>
 800d6fe:	462a      	mov	r2, r5
 800d700:	4621      	mov	r1, r4
 800d702:	f7fe faa3 	bl	800bc4c <memset>
 800d706:	e7f4      	b.n	800d6f2 <_calloc_r+0x12>

0800d708 <__ascii_mbtowc>:
 800d708:	b082      	sub	sp, #8
 800d70a:	b901      	cbnz	r1, 800d70e <__ascii_mbtowc+0x6>
 800d70c:	a901      	add	r1, sp, #4
 800d70e:	b142      	cbz	r2, 800d722 <__ascii_mbtowc+0x1a>
 800d710:	b14b      	cbz	r3, 800d726 <__ascii_mbtowc+0x1e>
 800d712:	7813      	ldrb	r3, [r2, #0]
 800d714:	600b      	str	r3, [r1, #0]
 800d716:	7812      	ldrb	r2, [r2, #0]
 800d718:	1e10      	subs	r0, r2, #0
 800d71a:	bf18      	it	ne
 800d71c:	2001      	movne	r0, #1
 800d71e:	b002      	add	sp, #8
 800d720:	4770      	bx	lr
 800d722:	4610      	mov	r0, r2
 800d724:	e7fb      	b.n	800d71e <__ascii_mbtowc+0x16>
 800d726:	f06f 0001 	mvn.w	r0, #1
 800d72a:	e7f8      	b.n	800d71e <__ascii_mbtowc+0x16>

0800d72c <__ascii_wctomb>:
 800d72c:	4603      	mov	r3, r0
 800d72e:	4608      	mov	r0, r1
 800d730:	b141      	cbz	r1, 800d744 <__ascii_wctomb+0x18>
 800d732:	2aff      	cmp	r2, #255	@ 0xff
 800d734:	d904      	bls.n	800d740 <__ascii_wctomb+0x14>
 800d736:	228a      	movs	r2, #138	@ 0x8a
 800d738:	601a      	str	r2, [r3, #0]
 800d73a:	f04f 30ff 	mov.w	r0, #4294967295
 800d73e:	4770      	bx	lr
 800d740:	700a      	strb	r2, [r1, #0]
 800d742:	2001      	movs	r0, #1
 800d744:	4770      	bx	lr
	...

0800d748 <fiprintf>:
 800d748:	b40e      	push	{r1, r2, r3}
 800d74a:	b503      	push	{r0, r1, lr}
 800d74c:	4601      	mov	r1, r0
 800d74e:	ab03      	add	r3, sp, #12
 800d750:	4805      	ldr	r0, [pc, #20]	@ (800d768 <fiprintf+0x20>)
 800d752:	f853 2b04 	ldr.w	r2, [r3], #4
 800d756:	6800      	ldr	r0, [r0, #0]
 800d758:	9301      	str	r3, [sp, #4]
 800d75a:	f7ff fd5b 	bl	800d214 <_vfiprintf_r>
 800d75e:	b002      	add	sp, #8
 800d760:	f85d eb04 	ldr.w	lr, [sp], #4
 800d764:	b003      	add	sp, #12
 800d766:	4770      	bx	lr
 800d768:	20000020 	.word	0x20000020

0800d76c <abort>:
 800d76c:	b508      	push	{r3, lr}
 800d76e:	2006      	movs	r0, #6
 800d770:	f000 f82c 	bl	800d7cc <raise>
 800d774:	2001      	movs	r0, #1
 800d776:	f7f5 fa3b 	bl	8002bf0 <_exit>

0800d77a <_raise_r>:
 800d77a:	291f      	cmp	r1, #31
 800d77c:	b538      	push	{r3, r4, r5, lr}
 800d77e:	4605      	mov	r5, r0
 800d780:	460c      	mov	r4, r1
 800d782:	d904      	bls.n	800d78e <_raise_r+0x14>
 800d784:	2316      	movs	r3, #22
 800d786:	6003      	str	r3, [r0, #0]
 800d788:	f04f 30ff 	mov.w	r0, #4294967295
 800d78c:	bd38      	pop	{r3, r4, r5, pc}
 800d78e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d790:	b112      	cbz	r2, 800d798 <_raise_r+0x1e>
 800d792:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d796:	b94b      	cbnz	r3, 800d7ac <_raise_r+0x32>
 800d798:	4628      	mov	r0, r5
 800d79a:	f000 f831 	bl	800d800 <_getpid_r>
 800d79e:	4622      	mov	r2, r4
 800d7a0:	4601      	mov	r1, r0
 800d7a2:	4628      	mov	r0, r5
 800d7a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7a8:	f000 b818 	b.w	800d7dc <_kill_r>
 800d7ac:	2b01      	cmp	r3, #1
 800d7ae:	d00a      	beq.n	800d7c6 <_raise_r+0x4c>
 800d7b0:	1c59      	adds	r1, r3, #1
 800d7b2:	d103      	bne.n	800d7bc <_raise_r+0x42>
 800d7b4:	2316      	movs	r3, #22
 800d7b6:	6003      	str	r3, [r0, #0]
 800d7b8:	2001      	movs	r0, #1
 800d7ba:	e7e7      	b.n	800d78c <_raise_r+0x12>
 800d7bc:	2100      	movs	r1, #0
 800d7be:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d7c2:	4620      	mov	r0, r4
 800d7c4:	4798      	blx	r3
 800d7c6:	2000      	movs	r0, #0
 800d7c8:	e7e0      	b.n	800d78c <_raise_r+0x12>
	...

0800d7cc <raise>:
 800d7cc:	4b02      	ldr	r3, [pc, #8]	@ (800d7d8 <raise+0xc>)
 800d7ce:	4601      	mov	r1, r0
 800d7d0:	6818      	ldr	r0, [r3, #0]
 800d7d2:	f7ff bfd2 	b.w	800d77a <_raise_r>
 800d7d6:	bf00      	nop
 800d7d8:	20000020 	.word	0x20000020

0800d7dc <_kill_r>:
 800d7dc:	b538      	push	{r3, r4, r5, lr}
 800d7de:	4d07      	ldr	r5, [pc, #28]	@ (800d7fc <_kill_r+0x20>)
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	4604      	mov	r4, r0
 800d7e4:	4608      	mov	r0, r1
 800d7e6:	4611      	mov	r1, r2
 800d7e8:	602b      	str	r3, [r5, #0]
 800d7ea:	f7f5 f9f1 	bl	8002bd0 <_kill>
 800d7ee:	1c43      	adds	r3, r0, #1
 800d7f0:	d102      	bne.n	800d7f8 <_kill_r+0x1c>
 800d7f2:	682b      	ldr	r3, [r5, #0]
 800d7f4:	b103      	cbz	r3, 800d7f8 <_kill_r+0x1c>
 800d7f6:	6023      	str	r3, [r4, #0]
 800d7f8:	bd38      	pop	{r3, r4, r5, pc}
 800d7fa:	bf00      	nop
 800d7fc:	2002644c 	.word	0x2002644c

0800d800 <_getpid_r>:
 800d800:	f7f5 b9de 	b.w	8002bc0 <_getpid>

0800d804 <pow>:
 800d804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d806:	ed2d 8b02 	vpush	{d8}
 800d80a:	eeb0 8a40 	vmov.f32	s16, s0
 800d80e:	eef0 8a60 	vmov.f32	s17, s1
 800d812:	ec55 4b11 	vmov	r4, r5, d1
 800d816:	f000 f873 	bl	800d900 <__ieee754_pow>
 800d81a:	4622      	mov	r2, r4
 800d81c:	462b      	mov	r3, r5
 800d81e:	4620      	mov	r0, r4
 800d820:	4629      	mov	r1, r5
 800d822:	ec57 6b10 	vmov	r6, r7, d0
 800d826:	f7f3 f991 	bl	8000b4c <__aeabi_dcmpun>
 800d82a:	2800      	cmp	r0, #0
 800d82c:	d13b      	bne.n	800d8a6 <pow+0xa2>
 800d82e:	ec51 0b18 	vmov	r0, r1, d8
 800d832:	2200      	movs	r2, #0
 800d834:	2300      	movs	r3, #0
 800d836:	f7f3 f957 	bl	8000ae8 <__aeabi_dcmpeq>
 800d83a:	b1b8      	cbz	r0, 800d86c <pow+0x68>
 800d83c:	2200      	movs	r2, #0
 800d83e:	2300      	movs	r3, #0
 800d840:	4620      	mov	r0, r4
 800d842:	4629      	mov	r1, r5
 800d844:	f7f3 f950 	bl	8000ae8 <__aeabi_dcmpeq>
 800d848:	2800      	cmp	r0, #0
 800d84a:	d146      	bne.n	800d8da <pow+0xd6>
 800d84c:	ec45 4b10 	vmov	d0, r4, r5
 800d850:	f000 f848 	bl	800d8e4 <finite>
 800d854:	b338      	cbz	r0, 800d8a6 <pow+0xa2>
 800d856:	2200      	movs	r2, #0
 800d858:	2300      	movs	r3, #0
 800d85a:	4620      	mov	r0, r4
 800d85c:	4629      	mov	r1, r5
 800d85e:	f7f3 f94d 	bl	8000afc <__aeabi_dcmplt>
 800d862:	b300      	cbz	r0, 800d8a6 <pow+0xa2>
 800d864:	f7fe fa54 	bl	800bd10 <__errno>
 800d868:	2322      	movs	r3, #34	@ 0x22
 800d86a:	e01b      	b.n	800d8a4 <pow+0xa0>
 800d86c:	ec47 6b10 	vmov	d0, r6, r7
 800d870:	f000 f838 	bl	800d8e4 <finite>
 800d874:	b9e0      	cbnz	r0, 800d8b0 <pow+0xac>
 800d876:	eeb0 0a48 	vmov.f32	s0, s16
 800d87a:	eef0 0a68 	vmov.f32	s1, s17
 800d87e:	f000 f831 	bl	800d8e4 <finite>
 800d882:	b1a8      	cbz	r0, 800d8b0 <pow+0xac>
 800d884:	ec45 4b10 	vmov	d0, r4, r5
 800d888:	f000 f82c 	bl	800d8e4 <finite>
 800d88c:	b180      	cbz	r0, 800d8b0 <pow+0xac>
 800d88e:	4632      	mov	r2, r6
 800d890:	463b      	mov	r3, r7
 800d892:	4630      	mov	r0, r6
 800d894:	4639      	mov	r1, r7
 800d896:	f7f3 f959 	bl	8000b4c <__aeabi_dcmpun>
 800d89a:	2800      	cmp	r0, #0
 800d89c:	d0e2      	beq.n	800d864 <pow+0x60>
 800d89e:	f7fe fa37 	bl	800bd10 <__errno>
 800d8a2:	2321      	movs	r3, #33	@ 0x21
 800d8a4:	6003      	str	r3, [r0, #0]
 800d8a6:	ecbd 8b02 	vpop	{d8}
 800d8aa:	ec47 6b10 	vmov	d0, r6, r7
 800d8ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	4630      	mov	r0, r6
 800d8b6:	4639      	mov	r1, r7
 800d8b8:	f7f3 f916 	bl	8000ae8 <__aeabi_dcmpeq>
 800d8bc:	2800      	cmp	r0, #0
 800d8be:	d0f2      	beq.n	800d8a6 <pow+0xa2>
 800d8c0:	eeb0 0a48 	vmov.f32	s0, s16
 800d8c4:	eef0 0a68 	vmov.f32	s1, s17
 800d8c8:	f000 f80c 	bl	800d8e4 <finite>
 800d8cc:	2800      	cmp	r0, #0
 800d8ce:	d0ea      	beq.n	800d8a6 <pow+0xa2>
 800d8d0:	ec45 4b10 	vmov	d0, r4, r5
 800d8d4:	f000 f806 	bl	800d8e4 <finite>
 800d8d8:	e7c3      	b.n	800d862 <pow+0x5e>
 800d8da:	4f01      	ldr	r7, [pc, #4]	@ (800d8e0 <pow+0xdc>)
 800d8dc:	2600      	movs	r6, #0
 800d8de:	e7e2      	b.n	800d8a6 <pow+0xa2>
 800d8e0:	3ff00000 	.word	0x3ff00000

0800d8e4 <finite>:
 800d8e4:	b082      	sub	sp, #8
 800d8e6:	ed8d 0b00 	vstr	d0, [sp]
 800d8ea:	9801      	ldr	r0, [sp, #4]
 800d8ec:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800d8f0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800d8f4:	0fc0      	lsrs	r0, r0, #31
 800d8f6:	b002      	add	sp, #8
 800d8f8:	4770      	bx	lr
 800d8fa:	0000      	movs	r0, r0
 800d8fc:	0000      	movs	r0, r0
	...

0800d900 <__ieee754_pow>:
 800d900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d904:	b091      	sub	sp, #68	@ 0x44
 800d906:	ed8d 1b00 	vstr	d1, [sp]
 800d90a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800d90e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800d912:	ea5a 0001 	orrs.w	r0, sl, r1
 800d916:	ec57 6b10 	vmov	r6, r7, d0
 800d91a:	d113      	bne.n	800d944 <__ieee754_pow+0x44>
 800d91c:	19b3      	adds	r3, r6, r6
 800d91e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800d922:	4152      	adcs	r2, r2
 800d924:	4298      	cmp	r0, r3
 800d926:	4b9a      	ldr	r3, [pc, #616]	@ (800db90 <__ieee754_pow+0x290>)
 800d928:	4193      	sbcs	r3, r2
 800d92a:	f080 84ee 	bcs.w	800e30a <__ieee754_pow+0xa0a>
 800d92e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d932:	4630      	mov	r0, r6
 800d934:	4639      	mov	r1, r7
 800d936:	f7f2 fcb9 	bl	80002ac <__adddf3>
 800d93a:	ec41 0b10 	vmov	d0, r0, r1
 800d93e:	b011      	add	sp, #68	@ 0x44
 800d940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d944:	4a93      	ldr	r2, [pc, #588]	@ (800db94 <__ieee754_pow+0x294>)
 800d946:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 800d94a:	4295      	cmp	r5, r2
 800d94c:	46b8      	mov	r8, r7
 800d94e:	4633      	mov	r3, r6
 800d950:	d80a      	bhi.n	800d968 <__ieee754_pow+0x68>
 800d952:	d104      	bne.n	800d95e <__ieee754_pow+0x5e>
 800d954:	2e00      	cmp	r6, #0
 800d956:	d1ea      	bne.n	800d92e <__ieee754_pow+0x2e>
 800d958:	45aa      	cmp	sl, r5
 800d95a:	d8e8      	bhi.n	800d92e <__ieee754_pow+0x2e>
 800d95c:	e001      	b.n	800d962 <__ieee754_pow+0x62>
 800d95e:	4592      	cmp	sl, r2
 800d960:	d802      	bhi.n	800d968 <__ieee754_pow+0x68>
 800d962:	4592      	cmp	sl, r2
 800d964:	d10f      	bne.n	800d986 <__ieee754_pow+0x86>
 800d966:	b171      	cbz	r1, 800d986 <__ieee754_pow+0x86>
 800d968:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800d96c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800d970:	ea58 0803 	orrs.w	r8, r8, r3
 800d974:	d1db      	bne.n	800d92e <__ieee754_pow+0x2e>
 800d976:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d97a:	18db      	adds	r3, r3, r3
 800d97c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800d980:	4152      	adcs	r2, r2
 800d982:	4598      	cmp	r8, r3
 800d984:	e7cf      	b.n	800d926 <__ieee754_pow+0x26>
 800d986:	f1b8 0f00 	cmp.w	r8, #0
 800d98a:	46ab      	mov	fp, r5
 800d98c:	da43      	bge.n	800da16 <__ieee754_pow+0x116>
 800d98e:	4a82      	ldr	r2, [pc, #520]	@ (800db98 <__ieee754_pow+0x298>)
 800d990:	4592      	cmp	sl, r2
 800d992:	d856      	bhi.n	800da42 <__ieee754_pow+0x142>
 800d994:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800d998:	4592      	cmp	sl, r2
 800d99a:	f240 84c5 	bls.w	800e328 <__ieee754_pow+0xa28>
 800d99e:	ea4f 522a 	mov.w	r2, sl, asr #20
 800d9a2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800d9a6:	2a14      	cmp	r2, #20
 800d9a8:	dd18      	ble.n	800d9dc <__ieee754_pow+0xdc>
 800d9aa:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800d9ae:	fa21 f402 	lsr.w	r4, r1, r2
 800d9b2:	fa04 f202 	lsl.w	r2, r4, r2
 800d9b6:	428a      	cmp	r2, r1
 800d9b8:	f040 84b6 	bne.w	800e328 <__ieee754_pow+0xa28>
 800d9bc:	f004 0401 	and.w	r4, r4, #1
 800d9c0:	f1c4 0402 	rsb	r4, r4, #2
 800d9c4:	2900      	cmp	r1, #0
 800d9c6:	d159      	bne.n	800da7c <__ieee754_pow+0x17c>
 800d9c8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800d9cc:	d148      	bne.n	800da60 <__ieee754_pow+0x160>
 800d9ce:	4632      	mov	r2, r6
 800d9d0:	463b      	mov	r3, r7
 800d9d2:	4630      	mov	r0, r6
 800d9d4:	4639      	mov	r1, r7
 800d9d6:	f7f2 fe1f 	bl	8000618 <__aeabi_dmul>
 800d9da:	e7ae      	b.n	800d93a <__ieee754_pow+0x3a>
 800d9dc:	2900      	cmp	r1, #0
 800d9de:	d14c      	bne.n	800da7a <__ieee754_pow+0x17a>
 800d9e0:	f1c2 0214 	rsb	r2, r2, #20
 800d9e4:	fa4a f402 	asr.w	r4, sl, r2
 800d9e8:	fa04 f202 	lsl.w	r2, r4, r2
 800d9ec:	4552      	cmp	r2, sl
 800d9ee:	f040 8498 	bne.w	800e322 <__ieee754_pow+0xa22>
 800d9f2:	f004 0401 	and.w	r4, r4, #1
 800d9f6:	f1c4 0402 	rsb	r4, r4, #2
 800d9fa:	4a68      	ldr	r2, [pc, #416]	@ (800db9c <__ieee754_pow+0x29c>)
 800d9fc:	4592      	cmp	sl, r2
 800d9fe:	d1e3      	bne.n	800d9c8 <__ieee754_pow+0xc8>
 800da00:	f1b9 0f00 	cmp.w	r9, #0
 800da04:	f280 8489 	bge.w	800e31a <__ieee754_pow+0xa1a>
 800da08:	4964      	ldr	r1, [pc, #400]	@ (800db9c <__ieee754_pow+0x29c>)
 800da0a:	4632      	mov	r2, r6
 800da0c:	463b      	mov	r3, r7
 800da0e:	2000      	movs	r0, #0
 800da10:	f7f2 ff2c 	bl	800086c <__aeabi_ddiv>
 800da14:	e791      	b.n	800d93a <__ieee754_pow+0x3a>
 800da16:	2400      	movs	r4, #0
 800da18:	bb81      	cbnz	r1, 800da7c <__ieee754_pow+0x17c>
 800da1a:	4a5e      	ldr	r2, [pc, #376]	@ (800db94 <__ieee754_pow+0x294>)
 800da1c:	4592      	cmp	sl, r2
 800da1e:	d1ec      	bne.n	800d9fa <__ieee754_pow+0xfa>
 800da20:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 800da24:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800da28:	431a      	orrs	r2, r3
 800da2a:	f000 846e 	beq.w	800e30a <__ieee754_pow+0xa0a>
 800da2e:	4b5c      	ldr	r3, [pc, #368]	@ (800dba0 <__ieee754_pow+0x2a0>)
 800da30:	429d      	cmp	r5, r3
 800da32:	d908      	bls.n	800da46 <__ieee754_pow+0x146>
 800da34:	f1b9 0f00 	cmp.w	r9, #0
 800da38:	f280 846b 	bge.w	800e312 <__ieee754_pow+0xa12>
 800da3c:	2000      	movs	r0, #0
 800da3e:	2100      	movs	r1, #0
 800da40:	e77b      	b.n	800d93a <__ieee754_pow+0x3a>
 800da42:	2402      	movs	r4, #2
 800da44:	e7e8      	b.n	800da18 <__ieee754_pow+0x118>
 800da46:	f1b9 0f00 	cmp.w	r9, #0
 800da4a:	f04f 0000 	mov.w	r0, #0
 800da4e:	f04f 0100 	mov.w	r1, #0
 800da52:	f6bf af72 	bge.w	800d93a <__ieee754_pow+0x3a>
 800da56:	e9dd 0300 	ldrd	r0, r3, [sp]
 800da5a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800da5e:	e76c      	b.n	800d93a <__ieee754_pow+0x3a>
 800da60:	4a50      	ldr	r2, [pc, #320]	@ (800dba4 <__ieee754_pow+0x2a4>)
 800da62:	4591      	cmp	r9, r2
 800da64:	d10a      	bne.n	800da7c <__ieee754_pow+0x17c>
 800da66:	f1b8 0f00 	cmp.w	r8, #0
 800da6a:	db07      	blt.n	800da7c <__ieee754_pow+0x17c>
 800da6c:	ec47 6b10 	vmov	d0, r6, r7
 800da70:	b011      	add	sp, #68	@ 0x44
 800da72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da76:	f000 bd4f 	b.w	800e518 <__ieee754_sqrt>
 800da7a:	2400      	movs	r4, #0
 800da7c:	ec47 6b10 	vmov	d0, r6, r7
 800da80:	9302      	str	r3, [sp, #8]
 800da82:	f000 fc87 	bl	800e394 <fabs>
 800da86:	9b02      	ldr	r3, [sp, #8]
 800da88:	ec51 0b10 	vmov	r0, r1, d0
 800da8c:	bb43      	cbnz	r3, 800dae0 <__ieee754_pow+0x1e0>
 800da8e:	4b43      	ldr	r3, [pc, #268]	@ (800db9c <__ieee754_pow+0x29c>)
 800da90:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 800da94:	429a      	cmp	r2, r3
 800da96:	d000      	beq.n	800da9a <__ieee754_pow+0x19a>
 800da98:	bb15      	cbnz	r5, 800dae0 <__ieee754_pow+0x1e0>
 800da9a:	f1b9 0f00 	cmp.w	r9, #0
 800da9e:	da05      	bge.n	800daac <__ieee754_pow+0x1ac>
 800daa0:	4602      	mov	r2, r0
 800daa2:	460b      	mov	r3, r1
 800daa4:	2000      	movs	r0, #0
 800daa6:	493d      	ldr	r1, [pc, #244]	@ (800db9c <__ieee754_pow+0x29c>)
 800daa8:	f7f2 fee0 	bl	800086c <__aeabi_ddiv>
 800daac:	f1b8 0f00 	cmp.w	r8, #0
 800dab0:	f6bf af43 	bge.w	800d93a <__ieee754_pow+0x3a>
 800dab4:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800dab8:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800dabc:	4325      	orrs	r5, r4
 800dabe:	d108      	bne.n	800dad2 <__ieee754_pow+0x1d2>
 800dac0:	4602      	mov	r2, r0
 800dac2:	460b      	mov	r3, r1
 800dac4:	4610      	mov	r0, r2
 800dac6:	4619      	mov	r1, r3
 800dac8:	f7f2 fbee 	bl	80002a8 <__aeabi_dsub>
 800dacc:	4602      	mov	r2, r0
 800dace:	460b      	mov	r3, r1
 800dad0:	e79e      	b.n	800da10 <__ieee754_pow+0x110>
 800dad2:	2c01      	cmp	r4, #1
 800dad4:	f47f af31 	bne.w	800d93a <__ieee754_pow+0x3a>
 800dad8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dadc:	4619      	mov	r1, r3
 800dade:	e72c      	b.n	800d93a <__ieee754_pow+0x3a>
 800dae0:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800dae4:	3b01      	subs	r3, #1
 800dae6:	ea53 0204 	orrs.w	r2, r3, r4
 800daea:	d102      	bne.n	800daf2 <__ieee754_pow+0x1f2>
 800daec:	4632      	mov	r2, r6
 800daee:	463b      	mov	r3, r7
 800daf0:	e7e8      	b.n	800dac4 <__ieee754_pow+0x1c4>
 800daf2:	3c01      	subs	r4, #1
 800daf4:	431c      	orrs	r4, r3
 800daf6:	d016      	beq.n	800db26 <__ieee754_pow+0x226>
 800daf8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800db80 <__ieee754_pow+0x280>
 800dafc:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800db00:	ed8d 7b02 	vstr	d7, [sp, #8]
 800db04:	f240 8110 	bls.w	800dd28 <__ieee754_pow+0x428>
 800db08:	4b27      	ldr	r3, [pc, #156]	@ (800dba8 <__ieee754_pow+0x2a8>)
 800db0a:	459a      	cmp	sl, r3
 800db0c:	4b24      	ldr	r3, [pc, #144]	@ (800dba0 <__ieee754_pow+0x2a0>)
 800db0e:	d916      	bls.n	800db3e <__ieee754_pow+0x23e>
 800db10:	429d      	cmp	r5, r3
 800db12:	d80b      	bhi.n	800db2c <__ieee754_pow+0x22c>
 800db14:	f1b9 0f00 	cmp.w	r9, #0
 800db18:	da0b      	bge.n	800db32 <__ieee754_pow+0x232>
 800db1a:	2000      	movs	r0, #0
 800db1c:	b011      	add	sp, #68	@ 0x44
 800db1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db22:	f000 bcf1 	b.w	800e508 <__math_oflow>
 800db26:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 800db88 <__ieee754_pow+0x288>
 800db2a:	e7e7      	b.n	800dafc <__ieee754_pow+0x1fc>
 800db2c:	f1b9 0f00 	cmp.w	r9, #0
 800db30:	dcf3      	bgt.n	800db1a <__ieee754_pow+0x21a>
 800db32:	2000      	movs	r0, #0
 800db34:	b011      	add	sp, #68	@ 0x44
 800db36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db3a:	f000 bcdd 	b.w	800e4f8 <__math_uflow>
 800db3e:	429d      	cmp	r5, r3
 800db40:	d20c      	bcs.n	800db5c <__ieee754_pow+0x25c>
 800db42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db46:	2200      	movs	r2, #0
 800db48:	2300      	movs	r3, #0
 800db4a:	f7f2 ffd7 	bl	8000afc <__aeabi_dcmplt>
 800db4e:	3800      	subs	r0, #0
 800db50:	bf18      	it	ne
 800db52:	2001      	movne	r0, #1
 800db54:	f1b9 0f00 	cmp.w	r9, #0
 800db58:	daec      	bge.n	800db34 <__ieee754_pow+0x234>
 800db5a:	e7df      	b.n	800db1c <__ieee754_pow+0x21c>
 800db5c:	4b0f      	ldr	r3, [pc, #60]	@ (800db9c <__ieee754_pow+0x29c>)
 800db5e:	429d      	cmp	r5, r3
 800db60:	f04f 0200 	mov.w	r2, #0
 800db64:	d922      	bls.n	800dbac <__ieee754_pow+0x2ac>
 800db66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db6a:	2300      	movs	r3, #0
 800db6c:	f7f2 ffc6 	bl	8000afc <__aeabi_dcmplt>
 800db70:	3800      	subs	r0, #0
 800db72:	bf18      	it	ne
 800db74:	2001      	movne	r0, #1
 800db76:	f1b9 0f00 	cmp.w	r9, #0
 800db7a:	dccf      	bgt.n	800db1c <__ieee754_pow+0x21c>
 800db7c:	e7da      	b.n	800db34 <__ieee754_pow+0x234>
 800db7e:	bf00      	nop
 800db80:	00000000 	.word	0x00000000
 800db84:	3ff00000 	.word	0x3ff00000
 800db88:	00000000 	.word	0x00000000
 800db8c:	bff00000 	.word	0xbff00000
 800db90:	fff00000 	.word	0xfff00000
 800db94:	7ff00000 	.word	0x7ff00000
 800db98:	433fffff 	.word	0x433fffff
 800db9c:	3ff00000 	.word	0x3ff00000
 800dba0:	3fefffff 	.word	0x3fefffff
 800dba4:	3fe00000 	.word	0x3fe00000
 800dba8:	43f00000 	.word	0x43f00000
 800dbac:	4b5a      	ldr	r3, [pc, #360]	@ (800dd18 <__ieee754_pow+0x418>)
 800dbae:	f7f2 fb7b 	bl	80002a8 <__aeabi_dsub>
 800dbb2:	a351      	add	r3, pc, #324	@ (adr r3, 800dcf8 <__ieee754_pow+0x3f8>)
 800dbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb8:	4604      	mov	r4, r0
 800dbba:	460d      	mov	r5, r1
 800dbbc:	f7f2 fd2c 	bl	8000618 <__aeabi_dmul>
 800dbc0:	a34f      	add	r3, pc, #316	@ (adr r3, 800dd00 <__ieee754_pow+0x400>)
 800dbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc6:	4606      	mov	r6, r0
 800dbc8:	460f      	mov	r7, r1
 800dbca:	4620      	mov	r0, r4
 800dbcc:	4629      	mov	r1, r5
 800dbce:	f7f2 fd23 	bl	8000618 <__aeabi_dmul>
 800dbd2:	4b52      	ldr	r3, [pc, #328]	@ (800dd1c <__ieee754_pow+0x41c>)
 800dbd4:	4682      	mov	sl, r0
 800dbd6:	468b      	mov	fp, r1
 800dbd8:	2200      	movs	r2, #0
 800dbda:	4620      	mov	r0, r4
 800dbdc:	4629      	mov	r1, r5
 800dbde:	f7f2 fd1b 	bl	8000618 <__aeabi_dmul>
 800dbe2:	4602      	mov	r2, r0
 800dbe4:	460b      	mov	r3, r1
 800dbe6:	a148      	add	r1, pc, #288	@ (adr r1, 800dd08 <__ieee754_pow+0x408>)
 800dbe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbec:	f7f2 fb5c 	bl	80002a8 <__aeabi_dsub>
 800dbf0:	4622      	mov	r2, r4
 800dbf2:	462b      	mov	r3, r5
 800dbf4:	f7f2 fd10 	bl	8000618 <__aeabi_dmul>
 800dbf8:	4602      	mov	r2, r0
 800dbfa:	460b      	mov	r3, r1
 800dbfc:	2000      	movs	r0, #0
 800dbfe:	4948      	ldr	r1, [pc, #288]	@ (800dd20 <__ieee754_pow+0x420>)
 800dc00:	f7f2 fb52 	bl	80002a8 <__aeabi_dsub>
 800dc04:	4622      	mov	r2, r4
 800dc06:	4680      	mov	r8, r0
 800dc08:	4689      	mov	r9, r1
 800dc0a:	462b      	mov	r3, r5
 800dc0c:	4620      	mov	r0, r4
 800dc0e:	4629      	mov	r1, r5
 800dc10:	f7f2 fd02 	bl	8000618 <__aeabi_dmul>
 800dc14:	4602      	mov	r2, r0
 800dc16:	460b      	mov	r3, r1
 800dc18:	4640      	mov	r0, r8
 800dc1a:	4649      	mov	r1, r9
 800dc1c:	f7f2 fcfc 	bl	8000618 <__aeabi_dmul>
 800dc20:	a33b      	add	r3, pc, #236	@ (adr r3, 800dd10 <__ieee754_pow+0x410>)
 800dc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc26:	f7f2 fcf7 	bl	8000618 <__aeabi_dmul>
 800dc2a:	4602      	mov	r2, r0
 800dc2c:	460b      	mov	r3, r1
 800dc2e:	4650      	mov	r0, sl
 800dc30:	4659      	mov	r1, fp
 800dc32:	f7f2 fb39 	bl	80002a8 <__aeabi_dsub>
 800dc36:	4602      	mov	r2, r0
 800dc38:	460b      	mov	r3, r1
 800dc3a:	4680      	mov	r8, r0
 800dc3c:	4689      	mov	r9, r1
 800dc3e:	4630      	mov	r0, r6
 800dc40:	4639      	mov	r1, r7
 800dc42:	f7f2 fb33 	bl	80002ac <__adddf3>
 800dc46:	2400      	movs	r4, #0
 800dc48:	4632      	mov	r2, r6
 800dc4a:	463b      	mov	r3, r7
 800dc4c:	4620      	mov	r0, r4
 800dc4e:	460d      	mov	r5, r1
 800dc50:	f7f2 fb2a 	bl	80002a8 <__aeabi_dsub>
 800dc54:	4602      	mov	r2, r0
 800dc56:	460b      	mov	r3, r1
 800dc58:	4640      	mov	r0, r8
 800dc5a:	4649      	mov	r1, r9
 800dc5c:	f7f2 fb24 	bl	80002a8 <__aeabi_dsub>
 800dc60:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dc64:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dc68:	2300      	movs	r3, #0
 800dc6a:	9304      	str	r3, [sp, #16]
 800dc6c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800dc70:	4606      	mov	r6, r0
 800dc72:	460f      	mov	r7, r1
 800dc74:	465b      	mov	r3, fp
 800dc76:	4652      	mov	r2, sl
 800dc78:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc7c:	f7f2 fb14 	bl	80002a8 <__aeabi_dsub>
 800dc80:	4622      	mov	r2, r4
 800dc82:	462b      	mov	r3, r5
 800dc84:	f7f2 fcc8 	bl	8000618 <__aeabi_dmul>
 800dc88:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dc8c:	4680      	mov	r8, r0
 800dc8e:	4689      	mov	r9, r1
 800dc90:	4630      	mov	r0, r6
 800dc92:	4639      	mov	r1, r7
 800dc94:	f7f2 fcc0 	bl	8000618 <__aeabi_dmul>
 800dc98:	4602      	mov	r2, r0
 800dc9a:	460b      	mov	r3, r1
 800dc9c:	4640      	mov	r0, r8
 800dc9e:	4649      	mov	r1, r9
 800dca0:	f7f2 fb04 	bl	80002ac <__adddf3>
 800dca4:	465b      	mov	r3, fp
 800dca6:	4606      	mov	r6, r0
 800dca8:	460f      	mov	r7, r1
 800dcaa:	4652      	mov	r2, sl
 800dcac:	4620      	mov	r0, r4
 800dcae:	4629      	mov	r1, r5
 800dcb0:	f7f2 fcb2 	bl	8000618 <__aeabi_dmul>
 800dcb4:	460b      	mov	r3, r1
 800dcb6:	4602      	mov	r2, r0
 800dcb8:	4680      	mov	r8, r0
 800dcba:	4689      	mov	r9, r1
 800dcbc:	4630      	mov	r0, r6
 800dcbe:	4639      	mov	r1, r7
 800dcc0:	f7f2 faf4 	bl	80002ac <__adddf3>
 800dcc4:	4b17      	ldr	r3, [pc, #92]	@ (800dd24 <__ieee754_pow+0x424>)
 800dcc6:	4299      	cmp	r1, r3
 800dcc8:	4604      	mov	r4, r0
 800dcca:	460d      	mov	r5, r1
 800dccc:	468b      	mov	fp, r1
 800dcce:	f340 820b 	ble.w	800e0e8 <__ieee754_pow+0x7e8>
 800dcd2:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800dcd6:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800dcda:	4303      	orrs	r3, r0
 800dcdc:	f000 81ea 	beq.w	800e0b4 <__ieee754_pow+0x7b4>
 800dce0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dce4:	2200      	movs	r2, #0
 800dce6:	2300      	movs	r3, #0
 800dce8:	f7f2 ff08 	bl	8000afc <__aeabi_dcmplt>
 800dcec:	3800      	subs	r0, #0
 800dcee:	bf18      	it	ne
 800dcf0:	2001      	movne	r0, #1
 800dcf2:	e713      	b.n	800db1c <__ieee754_pow+0x21c>
 800dcf4:	f3af 8000 	nop.w
 800dcf8:	60000000 	.word	0x60000000
 800dcfc:	3ff71547 	.word	0x3ff71547
 800dd00:	f85ddf44 	.word	0xf85ddf44
 800dd04:	3e54ae0b 	.word	0x3e54ae0b
 800dd08:	55555555 	.word	0x55555555
 800dd0c:	3fd55555 	.word	0x3fd55555
 800dd10:	652b82fe 	.word	0x652b82fe
 800dd14:	3ff71547 	.word	0x3ff71547
 800dd18:	3ff00000 	.word	0x3ff00000
 800dd1c:	3fd00000 	.word	0x3fd00000
 800dd20:	3fe00000 	.word	0x3fe00000
 800dd24:	408fffff 	.word	0x408fffff
 800dd28:	4bd5      	ldr	r3, [pc, #852]	@ (800e080 <__ieee754_pow+0x780>)
 800dd2a:	ea08 0303 	and.w	r3, r8, r3
 800dd2e:	2200      	movs	r2, #0
 800dd30:	b92b      	cbnz	r3, 800dd3e <__ieee754_pow+0x43e>
 800dd32:	4bd4      	ldr	r3, [pc, #848]	@ (800e084 <__ieee754_pow+0x784>)
 800dd34:	f7f2 fc70 	bl	8000618 <__aeabi_dmul>
 800dd38:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800dd3c:	468b      	mov	fp, r1
 800dd3e:	ea4f 532b 	mov.w	r3, fp, asr #20
 800dd42:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800dd46:	4413      	add	r3, r2
 800dd48:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd4a:	4bcf      	ldr	r3, [pc, #828]	@ (800e088 <__ieee754_pow+0x788>)
 800dd4c:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800dd50:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800dd54:	459b      	cmp	fp, r3
 800dd56:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800dd5a:	dd08      	ble.n	800dd6e <__ieee754_pow+0x46e>
 800dd5c:	4bcb      	ldr	r3, [pc, #812]	@ (800e08c <__ieee754_pow+0x78c>)
 800dd5e:	459b      	cmp	fp, r3
 800dd60:	f340 81a5 	ble.w	800e0ae <__ieee754_pow+0x7ae>
 800dd64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd66:	3301      	adds	r3, #1
 800dd68:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd6a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800dd6e:	f04f 0a00 	mov.w	sl, #0
 800dd72:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800dd76:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dd78:	4bc5      	ldr	r3, [pc, #788]	@ (800e090 <__ieee754_pow+0x790>)
 800dd7a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dd7e:	ed93 7b00 	vldr	d7, [r3]
 800dd82:	4629      	mov	r1, r5
 800dd84:	ec53 2b17 	vmov	r2, r3, d7
 800dd88:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dd8c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dd90:	f7f2 fa8a 	bl	80002a8 <__aeabi_dsub>
 800dd94:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800dd98:	4606      	mov	r6, r0
 800dd9a:	460f      	mov	r7, r1
 800dd9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dda0:	f7f2 fa84 	bl	80002ac <__adddf3>
 800dda4:	4602      	mov	r2, r0
 800dda6:	460b      	mov	r3, r1
 800dda8:	2000      	movs	r0, #0
 800ddaa:	49ba      	ldr	r1, [pc, #744]	@ (800e094 <__ieee754_pow+0x794>)
 800ddac:	f7f2 fd5e 	bl	800086c <__aeabi_ddiv>
 800ddb0:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800ddb4:	4602      	mov	r2, r0
 800ddb6:	460b      	mov	r3, r1
 800ddb8:	4630      	mov	r0, r6
 800ddba:	4639      	mov	r1, r7
 800ddbc:	f7f2 fc2c 	bl	8000618 <__aeabi_dmul>
 800ddc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ddc4:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800ddc8:	106d      	asrs	r5, r5, #1
 800ddca:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800ddce:	f04f 0b00 	mov.w	fp, #0
 800ddd2:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800ddd6:	4661      	mov	r1, ip
 800ddd8:	2200      	movs	r2, #0
 800ddda:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800ddde:	4658      	mov	r0, fp
 800dde0:	46e1      	mov	r9, ip
 800dde2:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800dde6:	4614      	mov	r4, r2
 800dde8:	461d      	mov	r5, r3
 800ddea:	f7f2 fc15 	bl	8000618 <__aeabi_dmul>
 800ddee:	4602      	mov	r2, r0
 800ddf0:	460b      	mov	r3, r1
 800ddf2:	4630      	mov	r0, r6
 800ddf4:	4639      	mov	r1, r7
 800ddf6:	f7f2 fa57 	bl	80002a8 <__aeabi_dsub>
 800ddfa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ddfe:	4606      	mov	r6, r0
 800de00:	460f      	mov	r7, r1
 800de02:	4620      	mov	r0, r4
 800de04:	4629      	mov	r1, r5
 800de06:	f7f2 fa4f 	bl	80002a8 <__aeabi_dsub>
 800de0a:	4602      	mov	r2, r0
 800de0c:	460b      	mov	r3, r1
 800de0e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800de12:	f7f2 fa49 	bl	80002a8 <__aeabi_dsub>
 800de16:	465a      	mov	r2, fp
 800de18:	464b      	mov	r3, r9
 800de1a:	f7f2 fbfd 	bl	8000618 <__aeabi_dmul>
 800de1e:	4602      	mov	r2, r0
 800de20:	460b      	mov	r3, r1
 800de22:	4630      	mov	r0, r6
 800de24:	4639      	mov	r1, r7
 800de26:	f7f2 fa3f 	bl	80002a8 <__aeabi_dsub>
 800de2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800de2e:	f7f2 fbf3 	bl	8000618 <__aeabi_dmul>
 800de32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800de36:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800de3a:	4610      	mov	r0, r2
 800de3c:	4619      	mov	r1, r3
 800de3e:	f7f2 fbeb 	bl	8000618 <__aeabi_dmul>
 800de42:	a37d      	add	r3, pc, #500	@ (adr r3, 800e038 <__ieee754_pow+0x738>)
 800de44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de48:	4604      	mov	r4, r0
 800de4a:	460d      	mov	r5, r1
 800de4c:	f7f2 fbe4 	bl	8000618 <__aeabi_dmul>
 800de50:	a37b      	add	r3, pc, #492	@ (adr r3, 800e040 <__ieee754_pow+0x740>)
 800de52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de56:	f7f2 fa29 	bl	80002ac <__adddf3>
 800de5a:	4622      	mov	r2, r4
 800de5c:	462b      	mov	r3, r5
 800de5e:	f7f2 fbdb 	bl	8000618 <__aeabi_dmul>
 800de62:	a379      	add	r3, pc, #484	@ (adr r3, 800e048 <__ieee754_pow+0x748>)
 800de64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de68:	f7f2 fa20 	bl	80002ac <__adddf3>
 800de6c:	4622      	mov	r2, r4
 800de6e:	462b      	mov	r3, r5
 800de70:	f7f2 fbd2 	bl	8000618 <__aeabi_dmul>
 800de74:	a376      	add	r3, pc, #472	@ (adr r3, 800e050 <__ieee754_pow+0x750>)
 800de76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de7a:	f7f2 fa17 	bl	80002ac <__adddf3>
 800de7e:	4622      	mov	r2, r4
 800de80:	462b      	mov	r3, r5
 800de82:	f7f2 fbc9 	bl	8000618 <__aeabi_dmul>
 800de86:	a374      	add	r3, pc, #464	@ (adr r3, 800e058 <__ieee754_pow+0x758>)
 800de88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de8c:	f7f2 fa0e 	bl	80002ac <__adddf3>
 800de90:	4622      	mov	r2, r4
 800de92:	462b      	mov	r3, r5
 800de94:	f7f2 fbc0 	bl	8000618 <__aeabi_dmul>
 800de98:	a371      	add	r3, pc, #452	@ (adr r3, 800e060 <__ieee754_pow+0x760>)
 800de9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de9e:	f7f2 fa05 	bl	80002ac <__adddf3>
 800dea2:	4622      	mov	r2, r4
 800dea4:	4606      	mov	r6, r0
 800dea6:	460f      	mov	r7, r1
 800dea8:	462b      	mov	r3, r5
 800deaa:	4620      	mov	r0, r4
 800deac:	4629      	mov	r1, r5
 800deae:	f7f2 fbb3 	bl	8000618 <__aeabi_dmul>
 800deb2:	4602      	mov	r2, r0
 800deb4:	460b      	mov	r3, r1
 800deb6:	4630      	mov	r0, r6
 800deb8:	4639      	mov	r1, r7
 800deba:	f7f2 fbad 	bl	8000618 <__aeabi_dmul>
 800debe:	465a      	mov	r2, fp
 800dec0:	4604      	mov	r4, r0
 800dec2:	460d      	mov	r5, r1
 800dec4:	464b      	mov	r3, r9
 800dec6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800deca:	f7f2 f9ef 	bl	80002ac <__adddf3>
 800dece:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ded2:	f7f2 fba1 	bl	8000618 <__aeabi_dmul>
 800ded6:	4622      	mov	r2, r4
 800ded8:	462b      	mov	r3, r5
 800deda:	f7f2 f9e7 	bl	80002ac <__adddf3>
 800dede:	465a      	mov	r2, fp
 800dee0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dee4:	464b      	mov	r3, r9
 800dee6:	4658      	mov	r0, fp
 800dee8:	4649      	mov	r1, r9
 800deea:	f7f2 fb95 	bl	8000618 <__aeabi_dmul>
 800deee:	4b6a      	ldr	r3, [pc, #424]	@ (800e098 <__ieee754_pow+0x798>)
 800def0:	2200      	movs	r2, #0
 800def2:	4606      	mov	r6, r0
 800def4:	460f      	mov	r7, r1
 800def6:	f7f2 f9d9 	bl	80002ac <__adddf3>
 800defa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800defe:	f7f2 f9d5 	bl	80002ac <__adddf3>
 800df02:	46d8      	mov	r8, fp
 800df04:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800df08:	460d      	mov	r5, r1
 800df0a:	465a      	mov	r2, fp
 800df0c:	460b      	mov	r3, r1
 800df0e:	4640      	mov	r0, r8
 800df10:	4649      	mov	r1, r9
 800df12:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800df16:	f7f2 fb7f 	bl	8000618 <__aeabi_dmul>
 800df1a:	465c      	mov	r4, fp
 800df1c:	4680      	mov	r8, r0
 800df1e:	4689      	mov	r9, r1
 800df20:	4b5d      	ldr	r3, [pc, #372]	@ (800e098 <__ieee754_pow+0x798>)
 800df22:	2200      	movs	r2, #0
 800df24:	4620      	mov	r0, r4
 800df26:	4629      	mov	r1, r5
 800df28:	f7f2 f9be 	bl	80002a8 <__aeabi_dsub>
 800df2c:	4632      	mov	r2, r6
 800df2e:	463b      	mov	r3, r7
 800df30:	f7f2 f9ba 	bl	80002a8 <__aeabi_dsub>
 800df34:	4602      	mov	r2, r0
 800df36:	460b      	mov	r3, r1
 800df38:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800df3c:	f7f2 f9b4 	bl	80002a8 <__aeabi_dsub>
 800df40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df44:	f7f2 fb68 	bl	8000618 <__aeabi_dmul>
 800df48:	4622      	mov	r2, r4
 800df4a:	4606      	mov	r6, r0
 800df4c:	460f      	mov	r7, r1
 800df4e:	462b      	mov	r3, r5
 800df50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800df54:	f7f2 fb60 	bl	8000618 <__aeabi_dmul>
 800df58:	4602      	mov	r2, r0
 800df5a:	460b      	mov	r3, r1
 800df5c:	4630      	mov	r0, r6
 800df5e:	4639      	mov	r1, r7
 800df60:	f7f2 f9a4 	bl	80002ac <__adddf3>
 800df64:	4606      	mov	r6, r0
 800df66:	460f      	mov	r7, r1
 800df68:	4602      	mov	r2, r0
 800df6a:	460b      	mov	r3, r1
 800df6c:	4640      	mov	r0, r8
 800df6e:	4649      	mov	r1, r9
 800df70:	f7f2 f99c 	bl	80002ac <__adddf3>
 800df74:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800df78:	a33b      	add	r3, pc, #236	@ (adr r3, 800e068 <__ieee754_pow+0x768>)
 800df7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df7e:	4658      	mov	r0, fp
 800df80:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800df84:	460d      	mov	r5, r1
 800df86:	f7f2 fb47 	bl	8000618 <__aeabi_dmul>
 800df8a:	465c      	mov	r4, fp
 800df8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800df90:	4642      	mov	r2, r8
 800df92:	464b      	mov	r3, r9
 800df94:	4620      	mov	r0, r4
 800df96:	4629      	mov	r1, r5
 800df98:	f7f2 f986 	bl	80002a8 <__aeabi_dsub>
 800df9c:	4602      	mov	r2, r0
 800df9e:	460b      	mov	r3, r1
 800dfa0:	4630      	mov	r0, r6
 800dfa2:	4639      	mov	r1, r7
 800dfa4:	f7f2 f980 	bl	80002a8 <__aeabi_dsub>
 800dfa8:	a331      	add	r3, pc, #196	@ (adr r3, 800e070 <__ieee754_pow+0x770>)
 800dfaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfae:	f7f2 fb33 	bl	8000618 <__aeabi_dmul>
 800dfb2:	a331      	add	r3, pc, #196	@ (adr r3, 800e078 <__ieee754_pow+0x778>)
 800dfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb8:	4606      	mov	r6, r0
 800dfba:	460f      	mov	r7, r1
 800dfbc:	4620      	mov	r0, r4
 800dfbe:	4629      	mov	r1, r5
 800dfc0:	f7f2 fb2a 	bl	8000618 <__aeabi_dmul>
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	460b      	mov	r3, r1
 800dfc8:	4630      	mov	r0, r6
 800dfca:	4639      	mov	r1, r7
 800dfcc:	f7f2 f96e 	bl	80002ac <__adddf3>
 800dfd0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800dfd2:	4b32      	ldr	r3, [pc, #200]	@ (800e09c <__ieee754_pow+0x79c>)
 800dfd4:	4413      	add	r3, r2
 800dfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfda:	f7f2 f967 	bl	80002ac <__adddf3>
 800dfde:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dfe2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800dfe4:	f7f2 faae 	bl	8000544 <__aeabi_i2d>
 800dfe8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800dfea:	4b2d      	ldr	r3, [pc, #180]	@ (800e0a0 <__ieee754_pow+0x7a0>)
 800dfec:	4413      	add	r3, r2
 800dfee:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dff2:	4606      	mov	r6, r0
 800dff4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dff8:	460f      	mov	r7, r1
 800dffa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dffe:	f7f2 f955 	bl	80002ac <__adddf3>
 800e002:	4642      	mov	r2, r8
 800e004:	464b      	mov	r3, r9
 800e006:	f7f2 f951 	bl	80002ac <__adddf3>
 800e00a:	4632      	mov	r2, r6
 800e00c:	463b      	mov	r3, r7
 800e00e:	f7f2 f94d 	bl	80002ac <__adddf3>
 800e012:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800e016:	4632      	mov	r2, r6
 800e018:	463b      	mov	r3, r7
 800e01a:	4658      	mov	r0, fp
 800e01c:	460d      	mov	r5, r1
 800e01e:	f7f2 f943 	bl	80002a8 <__aeabi_dsub>
 800e022:	4642      	mov	r2, r8
 800e024:	464b      	mov	r3, r9
 800e026:	f7f2 f93f 	bl	80002a8 <__aeabi_dsub>
 800e02a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e02e:	f7f2 f93b 	bl	80002a8 <__aeabi_dsub>
 800e032:	465c      	mov	r4, fp
 800e034:	e036      	b.n	800e0a4 <__ieee754_pow+0x7a4>
 800e036:	bf00      	nop
 800e038:	4a454eef 	.word	0x4a454eef
 800e03c:	3fca7e28 	.word	0x3fca7e28
 800e040:	93c9db65 	.word	0x93c9db65
 800e044:	3fcd864a 	.word	0x3fcd864a
 800e048:	a91d4101 	.word	0xa91d4101
 800e04c:	3fd17460 	.word	0x3fd17460
 800e050:	518f264d 	.word	0x518f264d
 800e054:	3fd55555 	.word	0x3fd55555
 800e058:	db6fabff 	.word	0xdb6fabff
 800e05c:	3fdb6db6 	.word	0x3fdb6db6
 800e060:	33333303 	.word	0x33333303
 800e064:	3fe33333 	.word	0x3fe33333
 800e068:	e0000000 	.word	0xe0000000
 800e06c:	3feec709 	.word	0x3feec709
 800e070:	dc3a03fd 	.word	0xdc3a03fd
 800e074:	3feec709 	.word	0x3feec709
 800e078:	145b01f5 	.word	0x145b01f5
 800e07c:	be3e2fe0 	.word	0xbe3e2fe0
 800e080:	7ff00000 	.word	0x7ff00000
 800e084:	43400000 	.word	0x43400000
 800e088:	0003988e 	.word	0x0003988e
 800e08c:	000bb679 	.word	0x000bb679
 800e090:	0800ebe0 	.word	0x0800ebe0
 800e094:	3ff00000 	.word	0x3ff00000
 800e098:	40080000 	.word	0x40080000
 800e09c:	0800ebc0 	.word	0x0800ebc0
 800e0a0:	0800ebd0 	.word	0x0800ebd0
 800e0a4:	4602      	mov	r2, r0
 800e0a6:	460b      	mov	r3, r1
 800e0a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e0ac:	e5d6      	b.n	800dc5c <__ieee754_pow+0x35c>
 800e0ae:	f04f 0a01 	mov.w	sl, #1
 800e0b2:	e65e      	b.n	800dd72 <__ieee754_pow+0x472>
 800e0b4:	a3b5      	add	r3, pc, #724	@ (adr r3, 800e38c <__ieee754_pow+0xa8c>)
 800e0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ba:	4630      	mov	r0, r6
 800e0bc:	4639      	mov	r1, r7
 800e0be:	f7f2 f8f5 	bl	80002ac <__adddf3>
 800e0c2:	4642      	mov	r2, r8
 800e0c4:	e9cd 0100 	strd	r0, r1, [sp]
 800e0c8:	464b      	mov	r3, r9
 800e0ca:	4620      	mov	r0, r4
 800e0cc:	4629      	mov	r1, r5
 800e0ce:	f7f2 f8eb 	bl	80002a8 <__aeabi_dsub>
 800e0d2:	4602      	mov	r2, r0
 800e0d4:	460b      	mov	r3, r1
 800e0d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e0da:	f7f2 fd2d 	bl	8000b38 <__aeabi_dcmpgt>
 800e0de:	2800      	cmp	r0, #0
 800e0e0:	f47f adfe 	bne.w	800dce0 <__ieee754_pow+0x3e0>
 800e0e4:	4ba2      	ldr	r3, [pc, #648]	@ (800e370 <__ieee754_pow+0xa70>)
 800e0e6:	e022      	b.n	800e12e <__ieee754_pow+0x82e>
 800e0e8:	4ca2      	ldr	r4, [pc, #648]	@ (800e374 <__ieee754_pow+0xa74>)
 800e0ea:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e0ee:	42a3      	cmp	r3, r4
 800e0f0:	d919      	bls.n	800e126 <__ieee754_pow+0x826>
 800e0f2:	4ba1      	ldr	r3, [pc, #644]	@ (800e378 <__ieee754_pow+0xa78>)
 800e0f4:	440b      	add	r3, r1
 800e0f6:	4303      	orrs	r3, r0
 800e0f8:	d009      	beq.n	800e10e <__ieee754_pow+0x80e>
 800e0fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0fe:	2200      	movs	r2, #0
 800e100:	2300      	movs	r3, #0
 800e102:	f7f2 fcfb 	bl	8000afc <__aeabi_dcmplt>
 800e106:	3800      	subs	r0, #0
 800e108:	bf18      	it	ne
 800e10a:	2001      	movne	r0, #1
 800e10c:	e512      	b.n	800db34 <__ieee754_pow+0x234>
 800e10e:	4642      	mov	r2, r8
 800e110:	464b      	mov	r3, r9
 800e112:	f7f2 f8c9 	bl	80002a8 <__aeabi_dsub>
 800e116:	4632      	mov	r2, r6
 800e118:	463b      	mov	r3, r7
 800e11a:	f7f2 fd03 	bl	8000b24 <__aeabi_dcmpge>
 800e11e:	2800      	cmp	r0, #0
 800e120:	d1eb      	bne.n	800e0fa <__ieee754_pow+0x7fa>
 800e122:	4b96      	ldr	r3, [pc, #600]	@ (800e37c <__ieee754_pow+0xa7c>)
 800e124:	e003      	b.n	800e12e <__ieee754_pow+0x82e>
 800e126:	4a96      	ldr	r2, [pc, #600]	@ (800e380 <__ieee754_pow+0xa80>)
 800e128:	4293      	cmp	r3, r2
 800e12a:	f240 80e7 	bls.w	800e2fc <__ieee754_pow+0x9fc>
 800e12e:	151b      	asrs	r3, r3, #20
 800e130:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800e134:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 800e138:	fa4a fa03 	asr.w	sl, sl, r3
 800e13c:	44da      	add	sl, fp
 800e13e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800e142:	4890      	ldr	r0, [pc, #576]	@ (800e384 <__ieee754_pow+0xa84>)
 800e144:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800e148:	4108      	asrs	r0, r1
 800e14a:	ea00 030a 	and.w	r3, r0, sl
 800e14e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800e152:	f1c1 0114 	rsb	r1, r1, #20
 800e156:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800e15a:	fa4a fa01 	asr.w	sl, sl, r1
 800e15e:	f1bb 0f00 	cmp.w	fp, #0
 800e162:	4640      	mov	r0, r8
 800e164:	4649      	mov	r1, r9
 800e166:	f04f 0200 	mov.w	r2, #0
 800e16a:	bfb8      	it	lt
 800e16c:	f1ca 0a00 	rsblt	sl, sl, #0
 800e170:	f7f2 f89a 	bl	80002a8 <__aeabi_dsub>
 800e174:	4680      	mov	r8, r0
 800e176:	4689      	mov	r9, r1
 800e178:	4632      	mov	r2, r6
 800e17a:	463b      	mov	r3, r7
 800e17c:	4640      	mov	r0, r8
 800e17e:	4649      	mov	r1, r9
 800e180:	f7f2 f894 	bl	80002ac <__adddf3>
 800e184:	2400      	movs	r4, #0
 800e186:	a36a      	add	r3, pc, #424	@ (adr r3, 800e330 <__ieee754_pow+0xa30>)
 800e188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e18c:	4620      	mov	r0, r4
 800e18e:	460d      	mov	r5, r1
 800e190:	f7f2 fa42 	bl	8000618 <__aeabi_dmul>
 800e194:	4642      	mov	r2, r8
 800e196:	e9cd 0100 	strd	r0, r1, [sp]
 800e19a:	464b      	mov	r3, r9
 800e19c:	4620      	mov	r0, r4
 800e19e:	4629      	mov	r1, r5
 800e1a0:	f7f2 f882 	bl	80002a8 <__aeabi_dsub>
 800e1a4:	4602      	mov	r2, r0
 800e1a6:	460b      	mov	r3, r1
 800e1a8:	4630      	mov	r0, r6
 800e1aa:	4639      	mov	r1, r7
 800e1ac:	f7f2 f87c 	bl	80002a8 <__aeabi_dsub>
 800e1b0:	a361      	add	r3, pc, #388	@ (adr r3, 800e338 <__ieee754_pow+0xa38>)
 800e1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b6:	f7f2 fa2f 	bl	8000618 <__aeabi_dmul>
 800e1ba:	a361      	add	r3, pc, #388	@ (adr r3, 800e340 <__ieee754_pow+0xa40>)
 800e1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c0:	4680      	mov	r8, r0
 800e1c2:	4689      	mov	r9, r1
 800e1c4:	4620      	mov	r0, r4
 800e1c6:	4629      	mov	r1, r5
 800e1c8:	f7f2 fa26 	bl	8000618 <__aeabi_dmul>
 800e1cc:	4602      	mov	r2, r0
 800e1ce:	460b      	mov	r3, r1
 800e1d0:	4640      	mov	r0, r8
 800e1d2:	4649      	mov	r1, r9
 800e1d4:	f7f2 f86a 	bl	80002ac <__adddf3>
 800e1d8:	4604      	mov	r4, r0
 800e1da:	460d      	mov	r5, r1
 800e1dc:	4602      	mov	r2, r0
 800e1de:	460b      	mov	r3, r1
 800e1e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e1e4:	f7f2 f862 	bl	80002ac <__adddf3>
 800e1e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1ec:	4680      	mov	r8, r0
 800e1ee:	4689      	mov	r9, r1
 800e1f0:	f7f2 f85a 	bl	80002a8 <__aeabi_dsub>
 800e1f4:	4602      	mov	r2, r0
 800e1f6:	460b      	mov	r3, r1
 800e1f8:	4620      	mov	r0, r4
 800e1fa:	4629      	mov	r1, r5
 800e1fc:	f7f2 f854 	bl	80002a8 <__aeabi_dsub>
 800e200:	4642      	mov	r2, r8
 800e202:	4606      	mov	r6, r0
 800e204:	460f      	mov	r7, r1
 800e206:	464b      	mov	r3, r9
 800e208:	4640      	mov	r0, r8
 800e20a:	4649      	mov	r1, r9
 800e20c:	f7f2 fa04 	bl	8000618 <__aeabi_dmul>
 800e210:	a34d      	add	r3, pc, #308	@ (adr r3, 800e348 <__ieee754_pow+0xa48>)
 800e212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e216:	4604      	mov	r4, r0
 800e218:	460d      	mov	r5, r1
 800e21a:	f7f2 f9fd 	bl	8000618 <__aeabi_dmul>
 800e21e:	a34c      	add	r3, pc, #304	@ (adr r3, 800e350 <__ieee754_pow+0xa50>)
 800e220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e224:	f7f2 f840 	bl	80002a8 <__aeabi_dsub>
 800e228:	4622      	mov	r2, r4
 800e22a:	462b      	mov	r3, r5
 800e22c:	f7f2 f9f4 	bl	8000618 <__aeabi_dmul>
 800e230:	a349      	add	r3, pc, #292	@ (adr r3, 800e358 <__ieee754_pow+0xa58>)
 800e232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e236:	f7f2 f839 	bl	80002ac <__adddf3>
 800e23a:	4622      	mov	r2, r4
 800e23c:	462b      	mov	r3, r5
 800e23e:	f7f2 f9eb 	bl	8000618 <__aeabi_dmul>
 800e242:	a347      	add	r3, pc, #284	@ (adr r3, 800e360 <__ieee754_pow+0xa60>)
 800e244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e248:	f7f2 f82e 	bl	80002a8 <__aeabi_dsub>
 800e24c:	4622      	mov	r2, r4
 800e24e:	462b      	mov	r3, r5
 800e250:	f7f2 f9e2 	bl	8000618 <__aeabi_dmul>
 800e254:	a344      	add	r3, pc, #272	@ (adr r3, 800e368 <__ieee754_pow+0xa68>)
 800e256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e25a:	f7f2 f827 	bl	80002ac <__adddf3>
 800e25e:	4622      	mov	r2, r4
 800e260:	462b      	mov	r3, r5
 800e262:	f7f2 f9d9 	bl	8000618 <__aeabi_dmul>
 800e266:	4602      	mov	r2, r0
 800e268:	460b      	mov	r3, r1
 800e26a:	4640      	mov	r0, r8
 800e26c:	4649      	mov	r1, r9
 800e26e:	f7f2 f81b 	bl	80002a8 <__aeabi_dsub>
 800e272:	4604      	mov	r4, r0
 800e274:	460d      	mov	r5, r1
 800e276:	4602      	mov	r2, r0
 800e278:	460b      	mov	r3, r1
 800e27a:	4640      	mov	r0, r8
 800e27c:	4649      	mov	r1, r9
 800e27e:	f7f2 f9cb 	bl	8000618 <__aeabi_dmul>
 800e282:	2200      	movs	r2, #0
 800e284:	e9cd 0100 	strd	r0, r1, [sp]
 800e288:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e28c:	4620      	mov	r0, r4
 800e28e:	4629      	mov	r1, r5
 800e290:	f7f2 f80a 	bl	80002a8 <__aeabi_dsub>
 800e294:	4602      	mov	r2, r0
 800e296:	460b      	mov	r3, r1
 800e298:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e29c:	f7f2 fae6 	bl	800086c <__aeabi_ddiv>
 800e2a0:	4632      	mov	r2, r6
 800e2a2:	4604      	mov	r4, r0
 800e2a4:	460d      	mov	r5, r1
 800e2a6:	463b      	mov	r3, r7
 800e2a8:	4640      	mov	r0, r8
 800e2aa:	4649      	mov	r1, r9
 800e2ac:	f7f2 f9b4 	bl	8000618 <__aeabi_dmul>
 800e2b0:	4632      	mov	r2, r6
 800e2b2:	463b      	mov	r3, r7
 800e2b4:	f7f1 fffa 	bl	80002ac <__adddf3>
 800e2b8:	4602      	mov	r2, r0
 800e2ba:	460b      	mov	r3, r1
 800e2bc:	4620      	mov	r0, r4
 800e2be:	4629      	mov	r1, r5
 800e2c0:	f7f1 fff2 	bl	80002a8 <__aeabi_dsub>
 800e2c4:	4642      	mov	r2, r8
 800e2c6:	464b      	mov	r3, r9
 800e2c8:	f7f1 ffee 	bl	80002a8 <__aeabi_dsub>
 800e2cc:	460b      	mov	r3, r1
 800e2ce:	4602      	mov	r2, r0
 800e2d0:	492d      	ldr	r1, [pc, #180]	@ (800e388 <__ieee754_pow+0xa88>)
 800e2d2:	2000      	movs	r0, #0
 800e2d4:	f7f1 ffe8 	bl	80002a8 <__aeabi_dsub>
 800e2d8:	ec41 0b10 	vmov	d0, r0, r1
 800e2dc:	ee10 3a90 	vmov	r3, s1
 800e2e0:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e2e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e2e8:	da0b      	bge.n	800e302 <__ieee754_pow+0xa02>
 800e2ea:	4650      	mov	r0, sl
 800e2ec:	f000 f85c 	bl	800e3a8 <scalbn>
 800e2f0:	ec51 0b10 	vmov	r0, r1, d0
 800e2f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e2f8:	f7ff bb6d 	b.w	800d9d6 <__ieee754_pow+0xd6>
 800e2fc:	f8dd a010 	ldr.w	sl, [sp, #16]
 800e300:	e73a      	b.n	800e178 <__ieee754_pow+0x878>
 800e302:	ec51 0b10 	vmov	r0, r1, d0
 800e306:	4619      	mov	r1, r3
 800e308:	e7f4      	b.n	800e2f4 <__ieee754_pow+0x9f4>
 800e30a:	491f      	ldr	r1, [pc, #124]	@ (800e388 <__ieee754_pow+0xa88>)
 800e30c:	2000      	movs	r0, #0
 800e30e:	f7ff bb14 	b.w	800d93a <__ieee754_pow+0x3a>
 800e312:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e316:	f7ff bb10 	b.w	800d93a <__ieee754_pow+0x3a>
 800e31a:	4630      	mov	r0, r6
 800e31c:	4639      	mov	r1, r7
 800e31e:	f7ff bb0c 	b.w	800d93a <__ieee754_pow+0x3a>
 800e322:	460c      	mov	r4, r1
 800e324:	f7ff bb69 	b.w	800d9fa <__ieee754_pow+0xfa>
 800e328:	2400      	movs	r4, #0
 800e32a:	f7ff bb4b 	b.w	800d9c4 <__ieee754_pow+0xc4>
 800e32e:	bf00      	nop
 800e330:	00000000 	.word	0x00000000
 800e334:	3fe62e43 	.word	0x3fe62e43
 800e338:	fefa39ef 	.word	0xfefa39ef
 800e33c:	3fe62e42 	.word	0x3fe62e42
 800e340:	0ca86c39 	.word	0x0ca86c39
 800e344:	be205c61 	.word	0xbe205c61
 800e348:	72bea4d0 	.word	0x72bea4d0
 800e34c:	3e663769 	.word	0x3e663769
 800e350:	c5d26bf1 	.word	0xc5d26bf1
 800e354:	3ebbbd41 	.word	0x3ebbbd41
 800e358:	af25de2c 	.word	0xaf25de2c
 800e35c:	3f11566a 	.word	0x3f11566a
 800e360:	16bebd93 	.word	0x16bebd93
 800e364:	3f66c16c 	.word	0x3f66c16c
 800e368:	5555553e 	.word	0x5555553e
 800e36c:	3fc55555 	.word	0x3fc55555
 800e370:	40900000 	.word	0x40900000
 800e374:	4090cbff 	.word	0x4090cbff
 800e378:	3f6f3400 	.word	0x3f6f3400
 800e37c:	4090cc00 	.word	0x4090cc00
 800e380:	3fe00000 	.word	0x3fe00000
 800e384:	fff00000 	.word	0xfff00000
 800e388:	3ff00000 	.word	0x3ff00000
 800e38c:	652b82fe 	.word	0x652b82fe
 800e390:	3c971547 	.word	0x3c971547

0800e394 <fabs>:
 800e394:	ec51 0b10 	vmov	r0, r1, d0
 800e398:	4602      	mov	r2, r0
 800e39a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e39e:	ec43 2b10 	vmov	d0, r2, r3
 800e3a2:	4770      	bx	lr
 800e3a4:	0000      	movs	r0, r0
	...

0800e3a8 <scalbn>:
 800e3a8:	b570      	push	{r4, r5, r6, lr}
 800e3aa:	ec55 4b10 	vmov	r4, r5, d0
 800e3ae:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e3b2:	4606      	mov	r6, r0
 800e3b4:	462b      	mov	r3, r5
 800e3b6:	b991      	cbnz	r1, 800e3de <scalbn+0x36>
 800e3b8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800e3bc:	4323      	orrs	r3, r4
 800e3be:	d03b      	beq.n	800e438 <scalbn+0x90>
 800e3c0:	4b33      	ldr	r3, [pc, #204]	@ (800e490 <scalbn+0xe8>)
 800e3c2:	4620      	mov	r0, r4
 800e3c4:	4629      	mov	r1, r5
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	f7f2 f926 	bl	8000618 <__aeabi_dmul>
 800e3cc:	4b31      	ldr	r3, [pc, #196]	@ (800e494 <scalbn+0xec>)
 800e3ce:	429e      	cmp	r6, r3
 800e3d0:	4604      	mov	r4, r0
 800e3d2:	460d      	mov	r5, r1
 800e3d4:	da0f      	bge.n	800e3f6 <scalbn+0x4e>
 800e3d6:	a326      	add	r3, pc, #152	@ (adr r3, 800e470 <scalbn+0xc8>)
 800e3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3dc:	e01e      	b.n	800e41c <scalbn+0x74>
 800e3de:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800e3e2:	4291      	cmp	r1, r2
 800e3e4:	d10b      	bne.n	800e3fe <scalbn+0x56>
 800e3e6:	4622      	mov	r2, r4
 800e3e8:	4620      	mov	r0, r4
 800e3ea:	4629      	mov	r1, r5
 800e3ec:	f7f1 ff5e 	bl	80002ac <__adddf3>
 800e3f0:	4604      	mov	r4, r0
 800e3f2:	460d      	mov	r5, r1
 800e3f4:	e020      	b.n	800e438 <scalbn+0x90>
 800e3f6:	460b      	mov	r3, r1
 800e3f8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e3fc:	3936      	subs	r1, #54	@ 0x36
 800e3fe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800e402:	4296      	cmp	r6, r2
 800e404:	dd0d      	ble.n	800e422 <scalbn+0x7a>
 800e406:	2d00      	cmp	r5, #0
 800e408:	a11b      	add	r1, pc, #108	@ (adr r1, 800e478 <scalbn+0xd0>)
 800e40a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e40e:	da02      	bge.n	800e416 <scalbn+0x6e>
 800e410:	a11b      	add	r1, pc, #108	@ (adr r1, 800e480 <scalbn+0xd8>)
 800e412:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e416:	a318      	add	r3, pc, #96	@ (adr r3, 800e478 <scalbn+0xd0>)
 800e418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e41c:	f7f2 f8fc 	bl	8000618 <__aeabi_dmul>
 800e420:	e7e6      	b.n	800e3f0 <scalbn+0x48>
 800e422:	1872      	adds	r2, r6, r1
 800e424:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800e428:	428a      	cmp	r2, r1
 800e42a:	dcec      	bgt.n	800e406 <scalbn+0x5e>
 800e42c:	2a00      	cmp	r2, #0
 800e42e:	dd06      	ble.n	800e43e <scalbn+0x96>
 800e430:	f36f 531e 	bfc	r3, #20, #11
 800e434:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e438:	ec45 4b10 	vmov	d0, r4, r5
 800e43c:	bd70      	pop	{r4, r5, r6, pc}
 800e43e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800e442:	da08      	bge.n	800e456 <scalbn+0xae>
 800e444:	2d00      	cmp	r5, #0
 800e446:	a10a      	add	r1, pc, #40	@ (adr r1, 800e470 <scalbn+0xc8>)
 800e448:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e44c:	dac3      	bge.n	800e3d6 <scalbn+0x2e>
 800e44e:	a10e      	add	r1, pc, #56	@ (adr r1, 800e488 <scalbn+0xe0>)
 800e450:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e454:	e7bf      	b.n	800e3d6 <scalbn+0x2e>
 800e456:	3236      	adds	r2, #54	@ 0x36
 800e458:	f36f 531e 	bfc	r3, #20, #11
 800e45c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e460:	4620      	mov	r0, r4
 800e462:	4b0d      	ldr	r3, [pc, #52]	@ (800e498 <scalbn+0xf0>)
 800e464:	4629      	mov	r1, r5
 800e466:	2200      	movs	r2, #0
 800e468:	e7d8      	b.n	800e41c <scalbn+0x74>
 800e46a:	bf00      	nop
 800e46c:	f3af 8000 	nop.w
 800e470:	c2f8f359 	.word	0xc2f8f359
 800e474:	01a56e1f 	.word	0x01a56e1f
 800e478:	8800759c 	.word	0x8800759c
 800e47c:	7e37e43c 	.word	0x7e37e43c
 800e480:	8800759c 	.word	0x8800759c
 800e484:	fe37e43c 	.word	0xfe37e43c
 800e488:	c2f8f359 	.word	0xc2f8f359
 800e48c:	81a56e1f 	.word	0x81a56e1f
 800e490:	43500000 	.word	0x43500000
 800e494:	ffff3cb0 	.word	0xffff3cb0
 800e498:	3c900000 	.word	0x3c900000

0800e49c <with_errno>:
 800e49c:	b510      	push	{r4, lr}
 800e49e:	ed2d 8b02 	vpush	{d8}
 800e4a2:	eeb0 8a40 	vmov.f32	s16, s0
 800e4a6:	eef0 8a60 	vmov.f32	s17, s1
 800e4aa:	4604      	mov	r4, r0
 800e4ac:	f7fd fc30 	bl	800bd10 <__errno>
 800e4b0:	eeb0 0a48 	vmov.f32	s0, s16
 800e4b4:	eef0 0a68 	vmov.f32	s1, s17
 800e4b8:	ecbd 8b02 	vpop	{d8}
 800e4bc:	6004      	str	r4, [r0, #0]
 800e4be:	bd10      	pop	{r4, pc}

0800e4c0 <xflow>:
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	b507      	push	{r0, r1, r2, lr}
 800e4c4:	ec51 0b10 	vmov	r0, r1, d0
 800e4c8:	b183      	cbz	r3, 800e4ec <xflow+0x2c>
 800e4ca:	4602      	mov	r2, r0
 800e4cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e4d0:	e9cd 2300 	strd	r2, r3, [sp]
 800e4d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4d8:	f7f2 f89e 	bl	8000618 <__aeabi_dmul>
 800e4dc:	ec41 0b10 	vmov	d0, r0, r1
 800e4e0:	2022      	movs	r0, #34	@ 0x22
 800e4e2:	b003      	add	sp, #12
 800e4e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e4e8:	f7ff bfd8 	b.w	800e49c <with_errno>
 800e4ec:	4602      	mov	r2, r0
 800e4ee:	460b      	mov	r3, r1
 800e4f0:	e7ee      	b.n	800e4d0 <xflow+0x10>
 800e4f2:	0000      	movs	r0, r0
 800e4f4:	0000      	movs	r0, r0
	...

0800e4f8 <__math_uflow>:
 800e4f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e500 <__math_uflow+0x8>
 800e4fc:	f7ff bfe0 	b.w	800e4c0 <xflow>
 800e500:	00000000 	.word	0x00000000
 800e504:	10000000 	.word	0x10000000

0800e508 <__math_oflow>:
 800e508:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e510 <__math_oflow+0x8>
 800e50c:	f7ff bfd8 	b.w	800e4c0 <xflow>
 800e510:	00000000 	.word	0x00000000
 800e514:	70000000 	.word	0x70000000

0800e518 <__ieee754_sqrt>:
 800e518:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e51c:	4a66      	ldr	r2, [pc, #408]	@ (800e6b8 <__ieee754_sqrt+0x1a0>)
 800e51e:	ec55 4b10 	vmov	r4, r5, d0
 800e522:	43aa      	bics	r2, r5
 800e524:	462b      	mov	r3, r5
 800e526:	4621      	mov	r1, r4
 800e528:	d110      	bne.n	800e54c <__ieee754_sqrt+0x34>
 800e52a:	4622      	mov	r2, r4
 800e52c:	4620      	mov	r0, r4
 800e52e:	4629      	mov	r1, r5
 800e530:	f7f2 f872 	bl	8000618 <__aeabi_dmul>
 800e534:	4602      	mov	r2, r0
 800e536:	460b      	mov	r3, r1
 800e538:	4620      	mov	r0, r4
 800e53a:	4629      	mov	r1, r5
 800e53c:	f7f1 feb6 	bl	80002ac <__adddf3>
 800e540:	4604      	mov	r4, r0
 800e542:	460d      	mov	r5, r1
 800e544:	ec45 4b10 	vmov	d0, r4, r5
 800e548:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e54c:	2d00      	cmp	r5, #0
 800e54e:	dc0e      	bgt.n	800e56e <__ieee754_sqrt+0x56>
 800e550:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800e554:	4322      	orrs	r2, r4
 800e556:	d0f5      	beq.n	800e544 <__ieee754_sqrt+0x2c>
 800e558:	b19d      	cbz	r5, 800e582 <__ieee754_sqrt+0x6a>
 800e55a:	4622      	mov	r2, r4
 800e55c:	4620      	mov	r0, r4
 800e55e:	4629      	mov	r1, r5
 800e560:	f7f1 fea2 	bl	80002a8 <__aeabi_dsub>
 800e564:	4602      	mov	r2, r0
 800e566:	460b      	mov	r3, r1
 800e568:	f7f2 f980 	bl	800086c <__aeabi_ddiv>
 800e56c:	e7e8      	b.n	800e540 <__ieee754_sqrt+0x28>
 800e56e:	152a      	asrs	r2, r5, #20
 800e570:	d115      	bne.n	800e59e <__ieee754_sqrt+0x86>
 800e572:	2000      	movs	r0, #0
 800e574:	e009      	b.n	800e58a <__ieee754_sqrt+0x72>
 800e576:	0acb      	lsrs	r3, r1, #11
 800e578:	3a15      	subs	r2, #21
 800e57a:	0549      	lsls	r1, r1, #21
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d0fa      	beq.n	800e576 <__ieee754_sqrt+0x5e>
 800e580:	e7f7      	b.n	800e572 <__ieee754_sqrt+0x5a>
 800e582:	462a      	mov	r2, r5
 800e584:	e7fa      	b.n	800e57c <__ieee754_sqrt+0x64>
 800e586:	005b      	lsls	r3, r3, #1
 800e588:	3001      	adds	r0, #1
 800e58a:	02dc      	lsls	r4, r3, #11
 800e58c:	d5fb      	bpl.n	800e586 <__ieee754_sqrt+0x6e>
 800e58e:	1e44      	subs	r4, r0, #1
 800e590:	1b12      	subs	r2, r2, r4
 800e592:	f1c0 0420 	rsb	r4, r0, #32
 800e596:	fa21 f404 	lsr.w	r4, r1, r4
 800e59a:	4323      	orrs	r3, r4
 800e59c:	4081      	lsls	r1, r0
 800e59e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e5a2:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800e5a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e5aa:	07d2      	lsls	r2, r2, #31
 800e5ac:	bf5c      	itt	pl
 800e5ae:	005b      	lslpl	r3, r3, #1
 800e5b0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800e5b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e5b8:	bf58      	it	pl
 800e5ba:	0049      	lslpl	r1, r1, #1
 800e5bc:	2600      	movs	r6, #0
 800e5be:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800e5c2:	107f      	asrs	r7, r7, #1
 800e5c4:	0049      	lsls	r1, r1, #1
 800e5c6:	2016      	movs	r0, #22
 800e5c8:	4632      	mov	r2, r6
 800e5ca:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800e5ce:	1915      	adds	r5, r2, r4
 800e5d0:	429d      	cmp	r5, r3
 800e5d2:	bfde      	ittt	le
 800e5d4:	192a      	addle	r2, r5, r4
 800e5d6:	1b5b      	suble	r3, r3, r5
 800e5d8:	1936      	addle	r6, r6, r4
 800e5da:	0fcd      	lsrs	r5, r1, #31
 800e5dc:	3801      	subs	r0, #1
 800e5de:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800e5e2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e5e6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e5ea:	d1f0      	bne.n	800e5ce <__ieee754_sqrt+0xb6>
 800e5ec:	4605      	mov	r5, r0
 800e5ee:	2420      	movs	r4, #32
 800e5f0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800e5f4:	4293      	cmp	r3, r2
 800e5f6:	eb0c 0e00 	add.w	lr, ip, r0
 800e5fa:	dc02      	bgt.n	800e602 <__ieee754_sqrt+0xea>
 800e5fc:	d113      	bne.n	800e626 <__ieee754_sqrt+0x10e>
 800e5fe:	458e      	cmp	lr, r1
 800e600:	d811      	bhi.n	800e626 <__ieee754_sqrt+0x10e>
 800e602:	f1be 0f00 	cmp.w	lr, #0
 800e606:	eb0e 000c 	add.w	r0, lr, ip
 800e60a:	da3f      	bge.n	800e68c <__ieee754_sqrt+0x174>
 800e60c:	2800      	cmp	r0, #0
 800e60e:	db3d      	blt.n	800e68c <__ieee754_sqrt+0x174>
 800e610:	f102 0801 	add.w	r8, r2, #1
 800e614:	1a9b      	subs	r3, r3, r2
 800e616:	458e      	cmp	lr, r1
 800e618:	bf88      	it	hi
 800e61a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e61e:	eba1 010e 	sub.w	r1, r1, lr
 800e622:	4465      	add	r5, ip
 800e624:	4642      	mov	r2, r8
 800e626:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800e62a:	3c01      	subs	r4, #1
 800e62c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800e630:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e634:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800e638:	d1dc      	bne.n	800e5f4 <__ieee754_sqrt+0xdc>
 800e63a:	4319      	orrs	r1, r3
 800e63c:	d01b      	beq.n	800e676 <__ieee754_sqrt+0x15e>
 800e63e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800e6bc <__ieee754_sqrt+0x1a4>
 800e642:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800e6c0 <__ieee754_sqrt+0x1a8>
 800e646:	e9da 0100 	ldrd	r0, r1, [sl]
 800e64a:	e9db 2300 	ldrd	r2, r3, [fp]
 800e64e:	f7f1 fe2b 	bl	80002a8 <__aeabi_dsub>
 800e652:	e9da 8900 	ldrd	r8, r9, [sl]
 800e656:	4602      	mov	r2, r0
 800e658:	460b      	mov	r3, r1
 800e65a:	4640      	mov	r0, r8
 800e65c:	4649      	mov	r1, r9
 800e65e:	f7f2 fa57 	bl	8000b10 <__aeabi_dcmple>
 800e662:	b140      	cbz	r0, 800e676 <__ieee754_sqrt+0x15e>
 800e664:	f1b5 3fff 	cmp.w	r5, #4294967295
 800e668:	e9da 0100 	ldrd	r0, r1, [sl]
 800e66c:	e9db 2300 	ldrd	r2, r3, [fp]
 800e670:	d10e      	bne.n	800e690 <__ieee754_sqrt+0x178>
 800e672:	3601      	adds	r6, #1
 800e674:	4625      	mov	r5, r4
 800e676:	1073      	asrs	r3, r6, #1
 800e678:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800e67c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800e680:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800e684:	086b      	lsrs	r3, r5, #1
 800e686:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800e68a:	e759      	b.n	800e540 <__ieee754_sqrt+0x28>
 800e68c:	4690      	mov	r8, r2
 800e68e:	e7c1      	b.n	800e614 <__ieee754_sqrt+0xfc>
 800e690:	f7f1 fe0c 	bl	80002ac <__adddf3>
 800e694:	e9da 8900 	ldrd	r8, r9, [sl]
 800e698:	4602      	mov	r2, r0
 800e69a:	460b      	mov	r3, r1
 800e69c:	4640      	mov	r0, r8
 800e69e:	4649      	mov	r1, r9
 800e6a0:	f7f2 fa2c 	bl	8000afc <__aeabi_dcmplt>
 800e6a4:	b120      	cbz	r0, 800e6b0 <__ieee754_sqrt+0x198>
 800e6a6:	1cab      	adds	r3, r5, #2
 800e6a8:	bf08      	it	eq
 800e6aa:	3601      	addeq	r6, #1
 800e6ac:	3502      	adds	r5, #2
 800e6ae:	e7e2      	b.n	800e676 <__ieee754_sqrt+0x15e>
 800e6b0:	1c6b      	adds	r3, r5, #1
 800e6b2:	f023 0501 	bic.w	r5, r3, #1
 800e6b6:	e7de      	b.n	800e676 <__ieee754_sqrt+0x15e>
 800e6b8:	7ff00000 	.word	0x7ff00000
 800e6bc:	0800ebf8 	.word	0x0800ebf8
 800e6c0:	0800ebf0 	.word	0x0800ebf0

0800e6c4 <_init>:
 800e6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6c6:	bf00      	nop
 800e6c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6ca:	bc08      	pop	{r3}
 800e6cc:	469e      	mov	lr, r3
 800e6ce:	4770      	bx	lr

0800e6d0 <_fini>:
 800e6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6d2:	bf00      	nop
 800e6d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6d6:	bc08      	pop	{r3}
 800e6d8:	469e      	mov	lr, r3
 800e6da:	4770      	bx	lr
