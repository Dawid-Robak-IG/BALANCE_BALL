
BALANCE_BALL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000103ec  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a4c  080105a0  080105a0  000115a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010fec  08010fec  000121e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010fec  08010fec  00011fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010ff4  08010ff4  000121e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010ff4  08010ff4  00011ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010ff8  08010ff8  00011ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  08010ffc  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000121e4  2**0
                  CONTENTS
 10 .bss          00026a34  200001e4  200001e4  000121e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20026c18  20026c18  000121e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000121e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002bfd1  00000000  00000000  00012214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000716a  00000000  00000000  0003e1e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002638  00000000  00000000  00045350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001d7a  00000000  00000000  00047988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002db02  00000000  00000000  00049702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00033fae  00000000  00000000  00077204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6fa6  00000000  00000000  000ab1b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a2158  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b1f4  00000000  00000000  001a219c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  001ad390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010584 	.word	0x08010584

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	08010584 	.word	0x08010584

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_ldivmod>:
 8000bc8:	b97b      	cbnz	r3, 8000bea <__aeabi_ldivmod+0x22>
 8000bca:	b972      	cbnz	r2, 8000bea <__aeabi_ldivmod+0x22>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bfbe      	ittt	lt
 8000bd0:	2000      	movlt	r0, #0
 8000bd2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bd6:	e006      	blt.n	8000be6 <__aeabi_ldivmod+0x1e>
 8000bd8:	bf08      	it	eq
 8000bda:	2800      	cmpeq	r0, #0
 8000bdc:	bf1c      	itt	ne
 8000bde:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000be2:	f04f 30ff 	movne.w	r0, #4294967295
 8000be6:	f000 b9d3 	b.w	8000f90 <__aeabi_idiv0>
 8000bea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf2:	2900      	cmp	r1, #0
 8000bf4:	db09      	blt.n	8000c0a <__aeabi_ldivmod+0x42>
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	db1a      	blt.n	8000c30 <__aeabi_ldivmod+0x68>
 8000bfa:	f000 f84d 	bl	8000c98 <__udivmoddi4>
 8000bfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c06:	b004      	add	sp, #16
 8000c08:	4770      	bx	lr
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db1b      	blt.n	8000c4c <__aeabi_ldivmod+0x84>
 8000c14:	f000 f840 	bl	8000c98 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4240      	negs	r0, r0
 8000c24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c28:	4252      	negs	r2, r2
 8000c2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c2e:	4770      	bx	lr
 8000c30:	4252      	negs	r2, r2
 8000c32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c36:	f000 f82f 	bl	8000c98 <__udivmoddi4>
 8000c3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c42:	b004      	add	sp, #16
 8000c44:	4240      	negs	r0, r0
 8000c46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c4a:	4770      	bx	lr
 8000c4c:	4252      	negs	r2, r2
 8000c4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c52:	f000 f821 	bl	8000c98 <__udivmoddi4>
 8000c56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5e:	b004      	add	sp, #16
 8000c60:	4252      	negs	r2, r2
 8000c62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b988 	b.w	8000f90 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	468e      	mov	lr, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	4688      	mov	r8, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4617      	mov	r7, r2
 8000cac:	d962      	bls.n	8000d74 <__udivmoddi4+0xdc>
 8000cae:	fab2 f682 	clz	r6, r2
 8000cb2:	b14e      	cbz	r6, 8000cc8 <__udivmoddi4+0x30>
 8000cb4:	f1c6 0320 	rsb	r3, r6, #32
 8000cb8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cbc:	fa20 f303 	lsr.w	r3, r0, r3
 8000cc0:	40b7      	lsls	r7, r6
 8000cc2:	ea43 0808 	orr.w	r8, r3, r8
 8000cc6:	40b4      	lsls	r4, r6
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	fa1f fc87 	uxth.w	ip, r7
 8000cd0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cd4:	0c23      	lsrs	r3, r4, #16
 8000cd6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cda:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cde:	fb01 f20c 	mul.w	r2, r1, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cec:	f080 80ea 	bcs.w	8000ec4 <__udivmoddi4+0x22c>
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	f240 80e7 	bls.w	8000ec4 <__udivmoddi4+0x22c>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	443b      	add	r3, r7
 8000cfa:	1a9a      	subs	r2, r3, r2
 8000cfc:	b2a3      	uxth	r3, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d0a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0e:	459c      	cmp	ip, r3
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x8e>
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d18:	f080 80d6 	bcs.w	8000ec8 <__udivmoddi4+0x230>
 8000d1c:	459c      	cmp	ip, r3
 8000d1e:	f240 80d3 	bls.w	8000ec8 <__udivmoddi4+0x230>
 8000d22:	443b      	add	r3, r7
 8000d24:	3802      	subs	r0, #2
 8000d26:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2a:	eba3 030c 	sub.w	r3, r3, ip
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11d      	cbz	r5, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40f3      	lsrs	r3, r6
 8000d34:	2200      	movs	r2, #0
 8000d36:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d905      	bls.n	8000d4e <__udivmoddi4+0xb6>
 8000d42:	b10d      	cbz	r5, 8000d48 <__udivmoddi4+0xb0>
 8000d44:	e9c5 0100 	strd	r0, r1, [r5]
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e7f5      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d4e:	fab3 f183 	clz	r1, r3
 8000d52:	2900      	cmp	r1, #0
 8000d54:	d146      	bne.n	8000de4 <__udivmoddi4+0x14c>
 8000d56:	4573      	cmp	r3, lr
 8000d58:	d302      	bcc.n	8000d60 <__udivmoddi4+0xc8>
 8000d5a:	4282      	cmp	r2, r0
 8000d5c:	f200 8105 	bhi.w	8000f6a <__udivmoddi4+0x2d2>
 8000d60:	1a84      	subs	r4, r0, r2
 8000d62:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d66:	2001      	movs	r0, #1
 8000d68:	4690      	mov	r8, r2
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d0e5      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d6e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d72:	e7e2      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f000 8090 	beq.w	8000e9a <__udivmoddi4+0x202>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	f040 80a4 	bne.w	8000ecc <__udivmoddi4+0x234>
 8000d84:	1a8a      	subs	r2, r1, r2
 8000d86:	0c03      	lsrs	r3, r0, #16
 8000d88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8c:	b280      	uxth	r0, r0
 8000d8e:	b2bc      	uxth	r4, r7
 8000d90:	2101      	movs	r1, #1
 8000d92:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d96:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d9e:	fb04 f20c 	mul.w	r2, r4, ip
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x11e>
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dac:	d202      	bcs.n	8000db4 <__udivmoddi4+0x11c>
 8000dae:	429a      	cmp	r2, r3
 8000db0:	f200 80e0 	bhi.w	8000f74 <__udivmoddi4+0x2dc>
 8000db4:	46c4      	mov	ip, r8
 8000db6:	1a9b      	subs	r3, r3, r2
 8000db8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dbc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dc0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dc4:	fb02 f404 	mul.w	r4, r2, r4
 8000dc8:	429c      	cmp	r4, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x144>
 8000dcc:	18fb      	adds	r3, r7, r3
 8000dce:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x142>
 8000dd4:	429c      	cmp	r4, r3
 8000dd6:	f200 80ca 	bhi.w	8000f6e <__udivmoddi4+0x2d6>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	1b1b      	subs	r3, r3, r4
 8000dde:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000de2:	e7a5      	b.n	8000d30 <__udivmoddi4+0x98>
 8000de4:	f1c1 0620 	rsb	r6, r1, #32
 8000de8:	408b      	lsls	r3, r1
 8000dea:	fa22 f706 	lsr.w	r7, r2, r6
 8000dee:	431f      	orrs	r7, r3
 8000df0:	fa0e f401 	lsl.w	r4, lr, r1
 8000df4:	fa20 f306 	lsr.w	r3, r0, r6
 8000df8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dfc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e00:	4323      	orrs	r3, r4
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	fa1f fc87 	uxth.w	ip, r7
 8000e0a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e0e:	0c1c      	lsrs	r4, r3, #16
 8000e10:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e14:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e18:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e1c:	45a6      	cmp	lr, r4
 8000e1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e22:	d909      	bls.n	8000e38 <__udivmoddi4+0x1a0>
 8000e24:	193c      	adds	r4, r7, r4
 8000e26:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e2a:	f080 809c 	bcs.w	8000f66 <__udivmoddi4+0x2ce>
 8000e2e:	45a6      	cmp	lr, r4
 8000e30:	f240 8099 	bls.w	8000f66 <__udivmoddi4+0x2ce>
 8000e34:	3802      	subs	r0, #2
 8000e36:	443c      	add	r4, r7
 8000e38:	eba4 040e 	sub.w	r4, r4, lr
 8000e3c:	fa1f fe83 	uxth.w	lr, r3
 8000e40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e44:	fb09 4413 	mls	r4, r9, r3, r4
 8000e48:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e4c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e50:	45a4      	cmp	ip, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x1ce>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e5a:	f080 8082 	bcs.w	8000f62 <__udivmoddi4+0x2ca>
 8000e5e:	45a4      	cmp	ip, r4
 8000e60:	d97f      	bls.n	8000f62 <__udivmoddi4+0x2ca>
 8000e62:	3b02      	subs	r3, #2
 8000e64:	443c      	add	r4, r7
 8000e66:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e6a:	eba4 040c 	sub.w	r4, r4, ip
 8000e6e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e72:	4564      	cmp	r4, ip
 8000e74:	4673      	mov	r3, lr
 8000e76:	46e1      	mov	r9, ip
 8000e78:	d362      	bcc.n	8000f40 <__udivmoddi4+0x2a8>
 8000e7a:	d05f      	beq.n	8000f3c <__udivmoddi4+0x2a4>
 8000e7c:	b15d      	cbz	r5, 8000e96 <__udivmoddi4+0x1fe>
 8000e7e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e82:	eb64 0409 	sbc.w	r4, r4, r9
 8000e86:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e8e:	431e      	orrs	r6, r3
 8000e90:	40cc      	lsrs	r4, r1
 8000e92:	e9c5 6400 	strd	r6, r4, [r5]
 8000e96:	2100      	movs	r1, #0
 8000e98:	e74f      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000e9a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e9e:	0c01      	lsrs	r1, r0, #16
 8000ea0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ea4:	b280      	uxth	r0, r0
 8000ea6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eaa:	463b      	mov	r3, r7
 8000eac:	4638      	mov	r0, r7
 8000eae:	463c      	mov	r4, r7
 8000eb0:	46b8      	mov	r8, r7
 8000eb2:	46be      	mov	lr, r7
 8000eb4:	2620      	movs	r6, #32
 8000eb6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eba:	eba2 0208 	sub.w	r2, r2, r8
 8000ebe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ec2:	e766      	b.n	8000d92 <__udivmoddi4+0xfa>
 8000ec4:	4601      	mov	r1, r0
 8000ec6:	e718      	b.n	8000cfa <__udivmoddi4+0x62>
 8000ec8:	4610      	mov	r0, r2
 8000eca:	e72c      	b.n	8000d26 <__udivmoddi4+0x8e>
 8000ecc:	f1c6 0220 	rsb	r2, r6, #32
 8000ed0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ed4:	40b7      	lsls	r7, r6
 8000ed6:	40b1      	lsls	r1, r6
 8000ed8:	fa20 f202 	lsr.w	r2, r0, r2
 8000edc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ee6:	b2bc      	uxth	r4, r7
 8000ee8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb08 f904 	mul.w	r9, r8, r4
 8000ef6:	40b0      	lsls	r0, r6
 8000ef8:	4589      	cmp	r9, r1
 8000efa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000efe:	b280      	uxth	r0, r0
 8000f00:	d93e      	bls.n	8000f80 <__udivmoddi4+0x2e8>
 8000f02:	1879      	adds	r1, r7, r1
 8000f04:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f08:	d201      	bcs.n	8000f0e <__udivmoddi4+0x276>
 8000f0a:	4589      	cmp	r9, r1
 8000f0c:	d81f      	bhi.n	8000f4e <__udivmoddi4+0x2b6>
 8000f0e:	eba1 0109 	sub.w	r1, r1, r9
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	b292      	uxth	r2, r2
 8000f20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f24:	4542      	cmp	r2, r8
 8000f26:	d229      	bcs.n	8000f7c <__udivmoddi4+0x2e4>
 8000f28:	18ba      	adds	r2, r7, r2
 8000f2a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f2e:	d2c4      	bcs.n	8000eba <__udivmoddi4+0x222>
 8000f30:	4542      	cmp	r2, r8
 8000f32:	d2c2      	bcs.n	8000eba <__udivmoddi4+0x222>
 8000f34:	f1a9 0102 	sub.w	r1, r9, #2
 8000f38:	443a      	add	r2, r7
 8000f3a:	e7be      	b.n	8000eba <__udivmoddi4+0x222>
 8000f3c:	45f0      	cmp	r8, lr
 8000f3e:	d29d      	bcs.n	8000e7c <__udivmoddi4+0x1e4>
 8000f40:	ebbe 0302 	subs.w	r3, lr, r2
 8000f44:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f48:	3801      	subs	r0, #1
 8000f4a:	46e1      	mov	r9, ip
 8000f4c:	e796      	b.n	8000e7c <__udivmoddi4+0x1e4>
 8000f4e:	eba7 0909 	sub.w	r9, r7, r9
 8000f52:	4449      	add	r1, r9
 8000f54:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f58:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f5c:	fb09 f804 	mul.w	r8, r9, r4
 8000f60:	e7db      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f62:	4673      	mov	r3, lr
 8000f64:	e77f      	b.n	8000e66 <__udivmoddi4+0x1ce>
 8000f66:	4650      	mov	r0, sl
 8000f68:	e766      	b.n	8000e38 <__udivmoddi4+0x1a0>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e6fd      	b.n	8000d6a <__udivmoddi4+0xd2>
 8000f6e:	443b      	add	r3, r7
 8000f70:	3a02      	subs	r2, #2
 8000f72:	e733      	b.n	8000ddc <__udivmoddi4+0x144>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	443b      	add	r3, r7
 8000f7a:	e71c      	b.n	8000db6 <__udivmoddi4+0x11e>
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	e79c      	b.n	8000eba <__udivmoddi4+0x222>
 8000f80:	eba1 0109 	sub.w	r1, r1, r9
 8000f84:	46c4      	mov	ip, r8
 8000f86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8a:	fb09 f804 	mul.w	r8, r9, r4
 8000f8e:	e7c4      	b.n	8000f1a <__udivmoddi4+0x282>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	0000      	movs	r0, r0
	...

08000f98 <ball_set_speed>:
#include "ball_physics.h"

int16_t max_speed = 15;


void ball_set_speed(int16_t *speed_x,int16_t *speed_y){
 8000f98:	b5b0      	push	{r4, r5, r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
	int dx = (int)(gyro_scaled_data_s.y) ;
 8000fa2:	4b75      	ldr	r3, [pc, #468]	@ (8001178 <ball_set_speed+0x1e0>)
 8000fa4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000fa8:	60fb      	str	r3, [r7, #12]
	int dy = (int)(gyro_scaled_data_s.x);
 8000faa:	4b73      	ldr	r3, [pc, #460]	@ (8001178 <ball_set_speed+0x1e0>)
 8000fac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb0:	60bb      	str	r3, [r7, #8]

	if (abs(dx) < 1) dx=0;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	db04      	blt.n	8000fc2 <ball_set_speed+0x2a>
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	dc01      	bgt.n	8000fc2 <ball_set_speed+0x2a>
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
	if (abs(dy) < 1) dy=0;
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	db04      	blt.n	8000fd2 <ball_set_speed+0x3a>
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	dc01      	bgt.n	8000fd2 <ball_set_speed+0x3a>
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]

	if(dx==0){
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d115      	bne.n	8001004 <ball_set_speed+0x6c>
		*speed_x*=0.99;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fab0 	bl	8000544 <__aeabi_i2d>
 8000fe4:	a360      	add	r3, pc, #384	@ (adr r3, 8001168 <ball_set_speed+0x1d0>)
 8000fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fea:	f7ff fb15 	bl	8000618 <__aeabi_dmul>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	4610      	mov	r0, r2
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f7ff fdbf 	bl	8000b78 <__aeabi_d2iz>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	b21a      	sxth	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	801a      	strh	r2, [r3, #0]
 8001002:	e01f      	b.n	8001044 <ball_set_speed+0xac>
	}else{
		*speed_x -= 0.1*dx;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fa9a 	bl	8000544 <__aeabi_i2d>
 8001010:	4604      	mov	r4, r0
 8001012:	460d      	mov	r5, r1
 8001014:	68f8      	ldr	r0, [r7, #12]
 8001016:	f7ff fa95 	bl	8000544 <__aeabi_i2d>
 800101a:	a355      	add	r3, pc, #340	@ (adr r3, 8001170 <ball_set_speed+0x1d8>)
 800101c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001020:	f7ff fafa 	bl	8000618 <__aeabi_dmul>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	4620      	mov	r0, r4
 800102a:	4629      	mov	r1, r5
 800102c:	f7ff f93c 	bl	80002a8 <__aeabi_dsub>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	4610      	mov	r0, r2
 8001036:	4619      	mov	r1, r3
 8001038:	f7ff fd9e 	bl	8000b78 <__aeabi_d2iz>
 800103c:	4603      	mov	r3, r0
 800103e:	b21a      	sxth	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	801a      	strh	r2, [r3, #0]
	}

	if(dy==0){
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d115      	bne.n	8001076 <ball_set_speed+0xde>
			*speed_y*=0.99;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fa77 	bl	8000544 <__aeabi_i2d>
 8001056:	a344      	add	r3, pc, #272	@ (adr r3, 8001168 <ball_set_speed+0x1d0>)
 8001058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105c:	f7ff fadc 	bl	8000618 <__aeabi_dmul>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4610      	mov	r0, r2
 8001066:	4619      	mov	r1, r3
 8001068:	f7ff fd86 	bl	8000b78 <__aeabi_d2iz>
 800106c:	4603      	mov	r3, r0
 800106e:	b21a      	sxth	r2, r3
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	801a      	strh	r2, [r3, #0]
 8001074:	e01f      	b.n	80010b6 <ball_set_speed+0x11e>
		}
	else{
		*speed_y -=  0.1*dy;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	f9b3 3000 	ldrsh.w	r3, [r3]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fa61 	bl	8000544 <__aeabi_i2d>
 8001082:	4604      	mov	r4, r0
 8001084:	460d      	mov	r5, r1
 8001086:	68b8      	ldr	r0, [r7, #8]
 8001088:	f7ff fa5c 	bl	8000544 <__aeabi_i2d>
 800108c:	a338      	add	r3, pc, #224	@ (adr r3, 8001170 <ball_set_speed+0x1d8>)
 800108e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001092:	f7ff fac1 	bl	8000618 <__aeabi_dmul>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	4620      	mov	r0, r4
 800109c:	4629      	mov	r1, r5
 800109e:	f7ff f903 	bl	80002a8 <__aeabi_dsub>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4610      	mov	r0, r2
 80010a8:	4619      	mov	r1, r3
 80010aa:	f7ff fd65 	bl	8000b78 <__aeabi_d2iz>
 80010ae:	4603      	mov	r3, r0
 80010b0:	b21a      	sxth	r2, r3
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	801a      	strh	r2, [r3, #0]
	}


	if (*speed_x > max_speed) *speed_x = max_speed;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010bc:	4b2f      	ldr	r3, [pc, #188]	@ (800117c <ball_set_speed+0x1e4>)
 80010be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	dd04      	ble.n	80010d0 <ball_set_speed+0x138>
 80010c6:	4b2d      	ldr	r3, [pc, #180]	@ (800117c <ball_set_speed+0x1e4>)
 80010c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	801a      	strh	r2, [r3, #0]
	if (*speed_x < -max_speed) *speed_x = -max_speed;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d6:	461a      	mov	r2, r3
 80010d8:	4b28      	ldr	r3, [pc, #160]	@ (800117c <ball_set_speed+0x1e4>)
 80010da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010de:	425b      	negs	r3, r3
 80010e0:	429a      	cmp	r2, r3
 80010e2:	da08      	bge.n	80010f6 <ball_set_speed+0x15e>
 80010e4:	4b25      	ldr	r3, [pc, #148]	@ (800117c <ball_set_speed+0x1e4>)
 80010e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	425b      	negs	r3, r3
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	801a      	strh	r2, [r3, #0]

	if (*speed_y > max_speed) *speed_y = max_speed;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010fc:	4b1f      	ldr	r3, [pc, #124]	@ (800117c <ball_set_speed+0x1e4>)
 80010fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001102:	429a      	cmp	r2, r3
 8001104:	dd04      	ble.n	8001110 <ball_set_speed+0x178>
 8001106:	4b1d      	ldr	r3, [pc, #116]	@ (800117c <ball_set_speed+0x1e4>)
 8001108:	f9b3 2000 	ldrsh.w	r2, [r3]
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	801a      	strh	r2, [r3, #0]
    if (*speed_y < -max_speed) *speed_y = -max_speed;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001116:	461a      	mov	r2, r3
 8001118:	4b18      	ldr	r3, [pc, #96]	@ (800117c <ball_set_speed+0x1e4>)
 800111a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800111e:	425b      	negs	r3, r3
 8001120:	429a      	cmp	r2, r3
 8001122:	da08      	bge.n	8001136 <ball_set_speed+0x19e>
 8001124:	4b15      	ldr	r3, [pc, #84]	@ (800117c <ball_set_speed+0x1e4>)
 8001126:	f9b3 3000 	ldrsh.w	r3, [r3]
 800112a:	b29b      	uxth	r3, r3
 800112c:	425b      	negs	r3, r3
 800112e:	b29b      	uxth	r3, r3
 8001130:	b21a      	sxth	r2, r3
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	801a      	strh	r2, [r3, #0]

    lcd_change_ball_color( (uint16_t)(abs(*speed_x) ), (uint16_t)(abs(*speed_y) ) );
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113c:	2b00      	cmp	r3, #0
 800113e:	bfb8      	it	lt
 8001140:	425b      	neglt	r3, r3
 8001142:	b29a      	uxth	r2, r3
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	f9b3 3000 	ldrsh.w	r3, [r3]
 800114a:	2b00      	cmp	r3, #0
 800114c:	bfb8      	it	lt
 800114e:	425b      	neglt	r3, r3
 8001150:	b29b      	uxth	r3, r3
 8001152:	4619      	mov	r1, r3
 8001154:	4610      	mov	r0, r2
 8001156:	f001 ff6b 	bl	8003030 <lcd_change_ball_color>
}
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bdb0      	pop	{r4, r5, r7, pc}
 8001162:	bf00      	nop
 8001164:	f3af 8000 	nop.w
 8001168:	7ae147ae 	.word	0x7ae147ae
 800116c:	3fefae14 	.word	0x3fefae14
 8001170:	9999999a 	.word	0x9999999a
 8001174:	3fb99999 	.word	0x3fb99999
 8001178:	20026390 	.word	0x20026390
 800117c:	20000000 	.word	0x20000000

08001180 <ball_move>:



void ball_move(int16_t *speed_x,int16_t *speed_y){
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	@ 0x28
 8001184:	af04      	add	r7, sp, #16
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
	 int next_x = player.x + *speed_x;
 800118a:	4b4c      	ldr	r3, [pc, #304]	@ (80012bc <ball_move+0x13c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001194:	4413      	add	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
	 int next_y = player.y + *speed_y;
 8001198:	4b48      	ldr	r3, [pc, #288]	@ (80012bc <ball_move+0x13c>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011a2:	4413      	add	r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]

	if(!check_inside_screen(next_x,next_y)){
 80011a6:	68f9      	ldr	r1, [r7, #12]
 80011a8:	6938      	ldr	r0, [r7, #16]
 80011aa:	f000 f9d5 	bl	8001558 <check_inside_screen>
 80011ae:	4603      	mov	r3, r0
 80011b0:	f083 0301 	eor.w	r3, r3, #1
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d02a      	beq.n	8001210 <ball_move+0x90>
			*speed_x*=-0.75;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f9bf 	bl	8000544 <__aeabi_i2d>
 80011c6:	f04f 0200 	mov.w	r2, #0
 80011ca:	4b3d      	ldr	r3, [pc, #244]	@ (80012c0 <ball_move+0x140>)
 80011cc:	f7ff fa24 	bl	8000618 <__aeabi_dmul>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4610      	mov	r0, r2
 80011d6:	4619      	mov	r1, r3
 80011d8:	f7ff fcce 	bl	8000b78 <__aeabi_d2iz>
 80011dc:	4603      	mov	r3, r0
 80011de:	b21a      	sxth	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	801a      	strh	r2, [r3, #0]
			*speed_y*=-0.75;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff f9aa 	bl	8000544 <__aeabi_i2d>
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	4b32      	ldr	r3, [pc, #200]	@ (80012c0 <ball_move+0x140>)
 80011f6:	f7ff fa0f 	bl	8000618 <__aeabi_dmul>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	f7ff fcb9 	bl	8000b78 <__aeabi_d2iz>
 8001206:	4603      	mov	r3, r0
 8001208:	b21a      	sxth	r2, r3
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	801a      	strh	r2, [r3, #0]
			return;
 800120e:	e051      	b.n	80012b4 <ball_move+0x134>
	}


	for (int i = 0; i < RECTS_AMOUNT; i++) {
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	e040      	b.n	8001298 <ball_move+0x118>
		if (check_collision(rects[i],next_x,next_y)) {
 8001216:	492b      	ldr	r1, [pc, #172]	@ (80012c4 <ball_move+0x144>)
 8001218:	697a      	ldr	r2, [r7, #20]
 800121a:	4613      	mov	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	440b      	add	r3, r1
 8001224:	68fa      	ldr	r2, [r7, #12]
 8001226:	9202      	str	r2, [sp, #8]
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	9201      	str	r2, [sp, #4]
 800122c:	691a      	ldr	r2, [r3, #16]
 800122e:	9200      	str	r2, [sp, #0]
 8001230:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001232:	f000 f849 	bl	80012c8 <check_collision>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d02a      	beq.n	8001292 <ball_move+0x112>
			*speed_x *= -0.75;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f97e 	bl	8000544 <__aeabi_i2d>
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	4b1c      	ldr	r3, [pc, #112]	@ (80012c0 <ball_move+0x140>)
 800124e:	f7ff f9e3 	bl	8000618 <__aeabi_dmul>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	f7ff fc8d 	bl	8000b78 <__aeabi_d2iz>
 800125e:	4603      	mov	r3, r0
 8001260:	b21a      	sxth	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	801a      	strh	r2, [r3, #0]
			*speed_y *= -0.75;
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	f9b3 3000 	ldrsh.w	r3, [r3]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff f969 	bl	8000544 <__aeabi_i2d>
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <ball_move+0x140>)
 8001278:	f7ff f9ce 	bl	8000618 <__aeabi_dmul>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	f7ff fc78 	bl	8000b78 <__aeabi_d2iz>
 8001288:	4603      	mov	r3, r0
 800128a:	b21a      	sxth	r2, r3
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	801a      	strh	r2, [r3, #0]
			return;
 8001290:	e010      	b.n	80012b4 <ball_move+0x134>
	for (int i = 0; i < RECTS_AMOUNT; i++) {
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	3301      	adds	r3, #1
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	2b09      	cmp	r3, #9
 800129c:	ddbb      	ble.n	8001216 <ball_move+0x96>
		}
	}

	lcd_update_circle(*speed_x, *speed_y, 0);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a4:	4618      	mov	r0, r3
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ac:	2200      	movs	r2, #0
 80012ae:	4619      	mov	r1, r3
 80012b0:	f001 fc16 	bl	8002ae0 <lcd_update_circle>
}
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20025bc8 	.word	0x20025bc8
 80012c0:	bfe80000 	.word	0xbfe80000
 80012c4:	20025b00 	.word	0x20025b00

080012c8 <check_collision>:



bool check_collision(Rectangle rec, int next_x, int next_y){
 80012c8:	b084      	sub	sp, #16
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b084      	sub	sp, #16
 80012ce:	af04      	add	r7, sp, #16
 80012d0:	f107 0c08 	add.w	ip, r7, #8
 80012d4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	if(screen_id==1){
 80012d8:	4b4d      	ldr	r3, [pc, #308]	@ (8001410 <check_collision+0x148>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d10a      	bne.n	80012f6 <check_collision+0x2e>
		check_difficulty_selection(rec,next_x,next_y);
 80012e0:	6a3b      	ldr	r3, [r7, #32]
 80012e2:	9302      	str	r3, [sp, #8]
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	f107 0308 	add.w	r3, r7, #8
 80012f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012f2:	f000 f897 	bl	8001424 <check_difficulty_selection>
	}


	if ((next_x < rec.x + rec.width + player.r) &&
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	441a      	add	r2, r3
 80012fc:	4b45      	ldr	r3, [pc, #276]	@ (8001414 <check_collision+0x14c>)
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	4413      	add	r3, r2
 8001302:	69fa      	ldr	r2, [r7, #28]
 8001304:	429a      	cmp	r2, r3
 8001306:	da27      	bge.n	8001358 <check_collision+0x90>
				              (next_x > rec.x - player.r) &&
 8001308:	68ba      	ldr	r2, [r7, #8]
 800130a:	4b42      	ldr	r3, [pc, #264]	@ (8001414 <check_collision+0x14c>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	1ad3      	subs	r3, r2, r3
	if ((next_x < rec.x + rec.width + player.r) &&
 8001310:	69fa      	ldr	r2, [r7, #28]
 8001312:	429a      	cmp	r2, r3
 8001314:	dd20      	ble.n	8001358 <check_collision+0x90>
				              (next_y > rec.y - player.r) &&
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	4b3e      	ldr	r3, [pc, #248]	@ (8001414 <check_collision+0x14c>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	1ad3      	subs	r3, r2, r3
				              (next_x > rec.x - player.r) &&
 800131e:	6a3a      	ldr	r2, [r7, #32]
 8001320:	429a      	cmp	r2, r3
 8001322:	dd19      	ble.n	8001358 <check_collision+0x90>
				              (next_y < rec.y + rec.height + player.r)&& (rec.color == GREEN)){
 8001324:	68fa      	ldr	r2, [r7, #12]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	441a      	add	r2, r3
 800132a:	4b3a      	ldr	r3, [pc, #232]	@ (8001414 <check_collision+0x14c>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	4413      	add	r3, r2
				              (next_y > rec.y - player.r) &&
 8001330:	6a3a      	ldr	r2, [r7, #32]
 8001332:	429a      	cmp	r2, r3
 8001334:	da10      	bge.n	8001358 <check_collision+0x90>
				              (next_y < rec.y + rec.height + player.r)&& (rec.color == GREEN)){
 8001336:	8b3b      	ldrh	r3, [r7, #24]
 8001338:	f5b3 6ffc 	cmp.w	r3, #2016	@ 0x7e0
 800133c:	d10c      	bne.n	8001358 <check_collision+0x90>
				printf("Zielony\r\n");
 800133e:	4836      	ldr	r0, [pc, #216]	@ (8001418 <check_collision+0x150>)
 8001340:	f00d f884 	bl	800e44c <puts>
				screen_id++;
 8001344:	4b32      	ldr	r3, [pc, #200]	@ (8001410 <check_collision+0x148>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	3301      	adds	r3, #1
 800134a:	4a31      	ldr	r2, [pc, #196]	@ (8001410 <check_collision+0x148>)
 800134c:	6013      	str	r3, [r2, #0]
				change_screen_flag=1;
 800134e:	4b33      	ldr	r3, [pc, #204]	@ (800141c <check_collision+0x154>)
 8001350:	2201      	movs	r2, #1
 8001352:	701a      	strb	r2, [r3, #0]
				return true;
 8001354:	2301      	movs	r3, #1
 8001356:	e054      	b.n	8001402 <check_collision+0x13a>
		 }

	if ((next_x < rec.x + rec.width + player.r) &&
 8001358:	68ba      	ldr	r2, [r7, #8]
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	441a      	add	r2, r3
 800135e:	4b2d      	ldr	r3, [pc, #180]	@ (8001414 <check_collision+0x14c>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	4413      	add	r3, r2
 8001364:	69fa      	ldr	r2, [r7, #28]
 8001366:	429a      	cmp	r2, r3
 8001368:	da28      	bge.n	80013bc <check_collision+0xf4>
					              (next_x > rec.x - player.r) &&
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	4b29      	ldr	r3, [pc, #164]	@ (8001414 <check_collision+0x14c>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	1ad3      	subs	r3, r2, r3
	if ((next_x < rec.x + rec.width + player.r) &&
 8001372:	69fa      	ldr	r2, [r7, #28]
 8001374:	429a      	cmp	r2, r3
 8001376:	dd21      	ble.n	80013bc <check_collision+0xf4>
					              (next_y > rec.y - player.r) &&
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	4b26      	ldr	r3, [pc, #152]	@ (8001414 <check_collision+0x14c>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	1ad3      	subs	r3, r2, r3
					              (next_x > rec.x - player.r) &&
 8001380:	6a3a      	ldr	r2, [r7, #32]
 8001382:	429a      	cmp	r2, r3
 8001384:	dd1a      	ble.n	80013bc <check_collision+0xf4>
					              (next_y < rec.y + rec.height + player.r)&& (rec.color == RED)){
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	441a      	add	r2, r3
 800138c:	4b21      	ldr	r3, [pc, #132]	@ (8001414 <check_collision+0x14c>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	4413      	add	r3, r2
					              (next_y > rec.y - player.r) &&
 8001392:	6a3a      	ldr	r2, [r7, #32]
 8001394:	429a      	cmp	r2, r3
 8001396:	da11      	bge.n	80013bc <check_collision+0xf4>
					              (next_y < rec.y + rec.height + player.r)&& (rec.color == RED)){
 8001398:	8b3b      	ldrh	r3, [r7, #24]
 800139a:	f5b3 4f78 	cmp.w	r3, #63488	@ 0xf800
 800139e:	d10d      	bne.n	80013bc <check_collision+0xf4>
					printf("Czerwony\r\n");
 80013a0:	481f      	ldr	r0, [pc, #124]	@ (8001420 <check_collision+0x158>)
 80013a2:	f00d f853 	bl	800e44c <puts>

					lcd_clear_circle();
 80013a6:	f001 fee9 	bl	800317c <lcd_clear_circle>
					lcd_set_circle(10,10, 8, GREEN);
 80013aa:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80013ae:	2208      	movs	r2, #8
 80013b0:	210a      	movs	r1, #10
 80013b2:	200a      	movs	r0, #10
 80013b4:	f001 f9d2 	bl	800275c <lcd_set_circle>
					return true;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e022      	b.n	8001402 <check_collision+0x13a>
			 }

	 if ((next_x < rec.x + rec.width + player.r) &&
 80013bc:	68ba      	ldr	r2, [r7, #8]
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	441a      	add	r2, r3
 80013c2:	4b14      	ldr	r3, [pc, #80]	@ (8001414 <check_collision+0x14c>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	4413      	add	r3, r2
 80013c8:	69fa      	ldr	r2, [r7, #28]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	da18      	bge.n	8001400 <check_collision+0x138>
		              (next_x > rec.x - player.r) &&
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	4b10      	ldr	r3, [pc, #64]	@ (8001414 <check_collision+0x14c>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	1ad3      	subs	r3, r2, r3
	 if ((next_x < rec.x + rec.width + player.r) &&
 80013d6:	69fa      	ldr	r2, [r7, #28]
 80013d8:	429a      	cmp	r2, r3
 80013da:	dd11      	ble.n	8001400 <check_collision+0x138>
		              (next_y > rec.y - player.r) &&
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	4b0d      	ldr	r3, [pc, #52]	@ (8001414 <check_collision+0x14c>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	1ad3      	subs	r3, r2, r3
		              (next_x > rec.x - player.r) &&
 80013e4:	6a3a      	ldr	r2, [r7, #32]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	dd0a      	ble.n	8001400 <check_collision+0x138>
		              (next_y < rec.y + rec.height + player.r))return true;
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	441a      	add	r2, r3
 80013f0:	4b08      	ldr	r3, [pc, #32]	@ (8001414 <check_collision+0x14c>)
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	4413      	add	r3, r2
		              (next_y > rec.y - player.r) &&
 80013f6:	6a3a      	ldr	r2, [r7, #32]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	da01      	bge.n	8001400 <check_collision+0x138>
		              (next_y < rec.y + rec.height + player.r))return true;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e000      	b.n	8001402 <check_collision+0x13a>


	return false;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	46bd      	mov	sp, r7
 8001406:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800140a:	b004      	add	sp, #16
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	200263a8 	.word	0x200263a8
 8001414:	20025bc8 	.word	0x20025bc8
 8001418:	080105a0 	.word	0x080105a0
 800141c:	200263ac 	.word	0x200263ac
 8001420:	080105ac 	.word	0x080105ac

08001424 <check_difficulty_selection>:


bool check_difficulty_selection(Rectangle rec, int next_x, int next_y){
 8001424:	b084      	sub	sp, #16
 8001426:	b490      	push	{r4, r7}
 8001428:	af00      	add	r7, sp, #0
 800142a:	f107 0408 	add.w	r4, r7, #8
 800142e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	if ((next_x < rec.x + rec.width + player.r) &&
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	441a      	add	r2, r3
 8001438:	4b44      	ldr	r3, [pc, #272]	@ (800154c <check_difficulty_selection+0x128>)
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	4413      	add	r3, r2
 800143e:	69fa      	ldr	r2, [r7, #28]
 8001440:	429a      	cmp	r2, r3
 8001442:	da23      	bge.n	800148c <check_difficulty_selection+0x68>
				              (next_x > rec.x - player.r) &&
 8001444:	68ba      	ldr	r2, [r7, #8]
 8001446:	4b41      	ldr	r3, [pc, #260]	@ (800154c <check_difficulty_selection+0x128>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	1ad3      	subs	r3, r2, r3
	if ((next_x < rec.x + rec.width + player.r) &&
 800144c:	69fa      	ldr	r2, [r7, #28]
 800144e:	429a      	cmp	r2, r3
 8001450:	dd1c      	ble.n	800148c <check_difficulty_selection+0x68>
				              (next_y > rec.y - player.r) &&
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	4b3d      	ldr	r3, [pc, #244]	@ (800154c <check_difficulty_selection+0x128>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	1ad3      	subs	r3, r2, r3
				              (next_x > rec.x - player.r) &&
 800145a:	6a3a      	ldr	r2, [r7, #32]
 800145c:	429a      	cmp	r2, r3
 800145e:	dd15      	ble.n	800148c <check_difficulty_selection+0x68>
				              (next_y < rec.y + rec.height + player.r)&& (rec.color == ORANGE)){
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	441a      	add	r2, r3
 8001466:	4b39      	ldr	r3, [pc, #228]	@ (800154c <check_difficulty_selection+0x128>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	4413      	add	r3, r2
				              (next_y > rec.y - player.r) &&
 800146c:	6a3a      	ldr	r2, [r7, #32]
 800146e:	429a      	cmp	r2, r3
 8001470:	da0c      	bge.n	800148c <check_difficulty_selection+0x68>
				              (next_y < rec.y + rec.height + player.r)&& (rec.color == ORANGE)){
 8001472:	8b3b      	ldrh	r3, [r7, #24]
 8001474:	f64f 62a0 	movw	r2, #65184	@ 0xfea0
 8001478:	4293      	cmp	r3, r2
 800147a:	d107      	bne.n	800148c <check_difficulty_selection+0x68>
			DifficultyLevel=1;
 800147c:	4b34      	ldr	r3, [pc, #208]	@ (8001550 <check_difficulty_selection+0x12c>)
 800147e:	2201      	movs	r2, #1
 8001480:	601a      	str	r2, [r3, #0]
		//	Circle player_temp=player;
			//updateBall=0;
			change_screen_flag=1;
 8001482:	4b34      	ldr	r3, [pc, #208]	@ (8001554 <check_difficulty_selection+0x130>)
 8001484:	2201      	movs	r2, #1
 8001486:	701a      	strb	r2, [r3, #0]

		//	lcd_set_circle(player_temp.x, player_temp.y, player_temp.r, player_temp.color);

		//	set_up_menu(false);

				return true;
 8001488:	2301      	movs	r3, #1
 800148a:	e059      	b.n	8001540 <check_difficulty_selection+0x11c>
		 }

	if ((next_x < rec.x + rec.width + player.r) &&
 800148c:	68ba      	ldr	r2, [r7, #8]
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	441a      	add	r2, r3
 8001492:	4b2e      	ldr	r3, [pc, #184]	@ (800154c <check_difficulty_selection+0x128>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	4413      	add	r3, r2
 8001498:	69fa      	ldr	r2, [r7, #28]
 800149a:	429a      	cmp	r2, r3
 800149c:	da23      	bge.n	80014e6 <check_difficulty_selection+0xc2>
					              (next_x > rec.x - player.r) &&
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	4b2a      	ldr	r3, [pc, #168]	@ (800154c <check_difficulty_selection+0x128>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	1ad3      	subs	r3, r2, r3
	if ((next_x < rec.x + rec.width + player.r) &&
 80014a6:	69fa      	ldr	r2, [r7, #28]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	dd1c      	ble.n	80014e6 <check_difficulty_selection+0xc2>
					              (next_y > rec.y - player.r) &&
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	4b27      	ldr	r3, [pc, #156]	@ (800154c <check_difficulty_selection+0x128>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	1ad3      	subs	r3, r2, r3
					              (next_x > rec.x - player.r) &&
 80014b4:	6a3a      	ldr	r2, [r7, #32]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	dd15      	ble.n	80014e6 <check_difficulty_selection+0xc2>
					              (next_y < rec.y + rec.height + player.r)&& (rec.color == PURPLE)){
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	441a      	add	r2, r3
 80014c0:	4b22      	ldr	r3, [pc, #136]	@ (800154c <check_difficulty_selection+0x128>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	4413      	add	r3, r2
					              (next_y > rec.y - player.r) &&
 80014c6:	6a3a      	ldr	r2, [r7, #32]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	da0c      	bge.n	80014e6 <check_difficulty_selection+0xc2>
					              (next_y < rec.y + rec.height + player.r)&& (rec.color == PURPLE)){
 80014cc:	8b3b      	ldrh	r3, [r7, #24]
 80014ce:	f649 220f 	movw	r2, #39439	@ 0x9a0f
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d107      	bne.n	80014e6 <check_difficulty_selection+0xc2>

					DifficultyLevel=2;
 80014d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001550 <check_difficulty_selection+0x12c>)
 80014d8:	2202      	movs	r2, #2
 80014da:	601a      	str	r2, [r3, #0]

					//updateBall=0;
					//Circle player_temp=player;
					change_screen_flag=1;
 80014dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001554 <check_difficulty_selection+0x130>)
 80014de:	2201      	movs	r2, #1
 80014e0:	701a      	strb	r2, [r3, #0]

					//lcd_set_circle(player_temp.x, player_temp.y, player_temp.r, player_temp.color);

				//	set_up_menu(false);

					return true;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e02c      	b.n	8001540 <check_difficulty_selection+0x11c>
			 }
	if ((next_x < rec.x + rec.width + player.r) &&
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	441a      	add	r2, r3
 80014ec:	4b17      	ldr	r3, [pc, #92]	@ (800154c <check_difficulty_selection+0x128>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	4413      	add	r3, r2
 80014f2:	69fa      	ldr	r2, [r7, #28]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	da22      	bge.n	800153e <check_difficulty_selection+0x11a>
						              (next_x > rec.x - player.r) &&
 80014f8:	68ba      	ldr	r2, [r7, #8]
 80014fa:	4b14      	ldr	r3, [pc, #80]	@ (800154c <check_difficulty_selection+0x128>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	1ad3      	subs	r3, r2, r3
	if ((next_x < rec.x + rec.width + player.r) &&
 8001500:	69fa      	ldr	r2, [r7, #28]
 8001502:	429a      	cmp	r2, r3
 8001504:	dd1b      	ble.n	800153e <check_difficulty_selection+0x11a>
						              (next_y > rec.y - player.r) &&
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	4b10      	ldr	r3, [pc, #64]	@ (800154c <check_difficulty_selection+0x128>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	1ad3      	subs	r3, r2, r3
						              (next_x > rec.x - player.r) &&
 800150e:	6a3a      	ldr	r2, [r7, #32]
 8001510:	429a      	cmp	r2, r3
 8001512:	dd14      	ble.n	800153e <check_difficulty_selection+0x11a>
						              (next_y < rec.y + rec.height + player.r)&& (rec.color == DARK_RED)){
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	441a      	add	r2, r3
 800151a:	4b0c      	ldr	r3, [pc, #48]	@ (800154c <check_difficulty_selection+0x128>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	4413      	add	r3, r2
						              (next_y > rec.y - player.r) &&
 8001520:	6a3a      	ldr	r2, [r7, #32]
 8001522:	429a      	cmp	r2, r3
 8001524:	da0b      	bge.n	800153e <check_difficulty_selection+0x11a>
						              (next_y < rec.y + rec.height + player.r)&& (rec.color == DARK_RED)){
 8001526:	8b3b      	ldrh	r3, [r7, #24]
 8001528:	f5b3 4f48 	cmp.w	r3, #51200	@ 0xc800
 800152c:	d107      	bne.n	800153e <check_difficulty_selection+0x11a>

						DifficultyLevel=3;
 800152e:	4b08      	ldr	r3, [pc, #32]	@ (8001550 <check_difficulty_selection+0x12c>)
 8001530:	2203      	movs	r2, #3
 8001532:	601a      	str	r2, [r3, #0]
						//Circle player_temp=player;
					//	updateBall=0;
					change_screen_flag=1;
 8001534:	4b07      	ldr	r3, [pc, #28]	@ (8001554 <check_difficulty_selection+0x130>)
 8001536:	2201      	movs	r2, #1
 8001538:	701a      	strb	r2, [r3, #0]
					//	set_up_menu(false);


					//	lcd_set_circle(player_temp.x, player_temp.y, player_temp.r, player_temp.color);

						return true;
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <check_difficulty_selection+0x11c>
	}

	return false;
 800153e:	2300      	movs	r3, #0

}
 8001540:	4618      	mov	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	bc90      	pop	{r4, r7}
 8001546:	b004      	add	sp, #16
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20025bc8 	.word	0x20025bc8
 8001550:	20000008 	.word	0x20000008
 8001554:	200263ac 	.word	0x200263ac

08001558 <check_inside_screen>:


bool check_inside_screen(int next_x, int next_y){
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
	  if (next_x - player.r <= 0 || next_x + player.r >= LCD_WIDTH || next_y - player.r <= 0 || next_y + player.r >= LCD_HEIGHT) {
 8001562:	4b11      	ldr	r3, [pc, #68]	@ (80015a8 <check_inside_screen+0x50>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	dd12      	ble.n	8001594 <check_inside_screen+0x3c>
 800156e:	4b0e      	ldr	r3, [pc, #56]	@ (80015a8 <check_inside_screen+0x50>)
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	2bef      	cmp	r3, #239	@ 0xef
 8001578:	dc0c      	bgt.n	8001594 <check_inside_screen+0x3c>
 800157a:	4b0b      	ldr	r3, [pc, #44]	@ (80015a8 <check_inside_screen+0x50>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	dd06      	ble.n	8001594 <check_inside_screen+0x3c>
 8001586:	4b08      	ldr	r3, [pc, #32]	@ (80015a8 <check_inside_screen+0x50>)
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	4413      	add	r3, r2
 800158e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001592:	db01      	blt.n	8001598 <check_inside_screen+0x40>
		   return false;
 8001594:	2300      	movs	r3, #0
 8001596:	e000      	b.n	800159a <check_inside_screen+0x42>
		}
	return true;
 8001598:	2301      	movs	r3, #1
}
 800159a:	4618      	mov	r0, r3
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	20025bc8 	.word	0x20025bc8

080015ac <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80015b0:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <MX_CRC_Init+0x20>)
 80015b2:	4a07      	ldr	r2, [pc, #28]	@ (80015d0 <MX_CRC_Init+0x24>)
 80015b4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80015b6:	4805      	ldr	r0, [pc, #20]	@ (80015cc <MX_CRC_Init+0x20>)
 80015b8:	f003 ff92 	bl	80054e0 <HAL_CRC_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80015c2:	f003 f9fb 	bl	80049bc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000200 	.word	0x20000200
 80015d0:	40023000 	.word	0x40023000

080015d4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001610 <HAL_CRC_MspInit+0x3c>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d10d      	bne.n	8001602 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001614 <HAL_CRC_MspInit+0x40>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	4a09      	ldr	r2, [pc, #36]	@ (8001614 <HAL_CRC_MspInit+0x40>)
 80015f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f6:	4b07      	ldr	r3, [pc, #28]	@ (8001614 <HAL_CRC_MspInit+0x40>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001602:	bf00      	nop
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40023000 	.word	0x40023000
 8001614:	40023800 	.word	0x40023800

08001618 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	4b0c      	ldr	r3, [pc, #48]	@ (8001654 <MX_DMA_Init+0x3c>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	4a0b      	ldr	r2, [pc, #44]	@ (8001654 <MX_DMA_Init+0x3c>)
 8001628:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800162c:	6313      	str	r3, [r2, #48]	@ 0x30
 800162e:	4b09      	ldr	r3, [pc, #36]	@ (8001654 <MX_DMA_Init+0x3c>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 800163a:	2200      	movs	r2, #0
 800163c:	2105      	movs	r1, #5
 800163e:	203c      	movs	r0, #60	@ 0x3c
 8001640:	f003 ff24 	bl	800548c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001644:	203c      	movs	r0, #60	@ 0x3c
 8001646:	f003 ff3d 	bl	80054c4 <HAL_NVIC_EnableIRQ>

}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023800 	.word	0x40023800

08001658 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800165c:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <MX_DMA2D_Init+0x5c>)
 800165e:	4a16      	ldr	r2, [pc, #88]	@ (80016b8 <MX_DMA2D_Init+0x60>)
 8001660:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001662:	4b14      	ldr	r3, [pc, #80]	@ (80016b4 <MX_DMA2D_Init+0x5c>)
 8001664:	2200      	movs	r2, #0
 8001666:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001668:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <MX_DMA2D_Init+0x5c>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800166e:	4b11      	ldr	r3, [pc, #68]	@ (80016b4 <MX_DMA2D_Init+0x5c>)
 8001670:	2200      	movs	r2, #0
 8001672:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001674:	4b0f      	ldr	r3, [pc, #60]	@ (80016b4 <MX_DMA2D_Init+0x5c>)
 8001676:	2200      	movs	r2, #0
 8001678:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800167a:	4b0e      	ldr	r3, [pc, #56]	@ (80016b4 <MX_DMA2D_Init+0x5c>)
 800167c:	2200      	movs	r2, #0
 800167e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001680:	4b0c      	ldr	r3, [pc, #48]	@ (80016b4 <MX_DMA2D_Init+0x5c>)
 8001682:	2200      	movs	r2, #0
 8001684:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001686:	4b0b      	ldr	r3, [pc, #44]	@ (80016b4 <MX_DMA2D_Init+0x5c>)
 8001688:	2200      	movs	r2, #0
 800168a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800168c:	4809      	ldr	r0, [pc, #36]	@ (80016b4 <MX_DMA2D_Init+0x5c>)
 800168e:	f004 fab3 	bl	8005bf8 <HAL_DMA2D_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001698:	f003 f990 	bl	80049bc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800169c:	2101      	movs	r1, #1
 800169e:	4805      	ldr	r0, [pc, #20]	@ (80016b4 <MX_DMA2D_Init+0x5c>)
 80016a0:	f004 fc04 	bl	8005eac <HAL_DMA2D_ConfigLayer>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80016aa:	f003 f987 	bl	80049bc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000208 	.word	0x20000208
 80016b8:	4002b000 	.word	0x4002b000

080016bc <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001704 <HAL_DMA2D_MspInit+0x48>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d115      	bne.n	80016fa <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001708 <HAL_DMA2D_MspInit+0x4c>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001708 <HAL_DMA2D_MspInit+0x4c>)
 80016d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80016dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016de:	4b0a      	ldr	r3, [pc, #40]	@ (8001708 <HAL_DMA2D_MspInit+0x4c>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2105      	movs	r1, #5
 80016ee:	205a      	movs	r0, #90	@ 0x5a
 80016f0:	f003 fecc 	bl	800548c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80016f4:	205a      	movs	r0, #90	@ 0x5a
 80016f6:	f003 fee5 	bl	80054c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80016fa:	bf00      	nop
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	4002b000 	.word	0x4002b000
 8001708:	40023800 	.word	0x40023800

0800170c <readHighScores>:
 *  Created on: May 30, 2025
 *      Author: drworms
 */
#include "flash.h"

HighScores readHighScores(void) {
 800170c:	b490      	push	{r4, r7}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
    HighScores scores;
    memcpy(&scores, (void*)FLASH_USER_START_ADDR, sizeof(HighScores));
 8001714:	4b08      	ldr	r3, [pc, #32]	@ (8001738 <readHighScores+0x2c>)
 8001716:	f107 0408 	add.w	r4, r7, #8
 800171a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800171c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return scores;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	461c      	mov	r4, r3
 8001724:	f107 0308 	add.w	r3, r7, #8
 8001728:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800172a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bc90      	pop	{r4, r7}
 8001736:	4770      	bx	lr
 8001738:	080e0000 	.word	0x080e0000

0800173c <saveHighScores>:

void saveHighScores(HighScores *scores) {
 800173c:	b5b0      	push	{r4, r5, r7, lr}
 800173e:	b08a      	sub	sp, #40	@ 0x28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
    HAL_FLASH_Unlock();
 8001744:	f004 fc98 	bl	8006078 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t SectorError;

    EraseInitStruct.TypeErase    = FLASH_TYPEERASE_SECTORS;
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800174c:	2302      	movs	r3, #2
 800174e:	61fb      	str	r3, [r7, #28]
    EraseInitStruct.Sector       = FLASH_SECTOR_11;
 8001750:	230b      	movs	r3, #11
 8001752:	617b      	str	r3, [r7, #20]
    EraseInitStruct.NbSectors    = 1;
 8001754:	2301      	movs	r3, #1
 8001756:	61bb      	str	r3, [r7, #24]

    if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK) {
 8001758:	f107 0208 	add.w	r2, r7, #8
 800175c:	f107 030c 	add.w	r3, r7, #12
 8001760:	4611      	mov	r1, r2
 8001762:	4618      	mov	r0, r3
 8001764:	f004 fdfa 	bl	800635c <HAL_FLASHEx_Erase>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d002      	beq.n	8001774 <saveHighScores+0x38>
    	printf("Couldn't erase flash memory for scores\r\n");
 800176e:	4813      	ldr	r0, [pc, #76]	@ (80017bc <saveHighScores+0x80>)
 8001770:	f00c fe6c 	bl	800e44c <puts>
    }

    uint32_t *data = (uint32_t*)scores;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	623b      	str	r3, [r7, #32]
    for (uint32_t i = 0; i < sizeof(HighScores) / 4; i++) {
 8001778:	2300      	movs	r3, #0
 800177a:	627b      	str	r3, [r7, #36]	@ 0x24
 800177c:	e015      	b.n	80017aa <saveHighScores+0x6e>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
                          FLASH_USER_START_ADDR + i * 4,
 800177e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001780:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8001784:	f503 3360 	add.w	r3, r3, #229376	@ 0x38000
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 8001788:	0099      	lsls	r1, r3, #2
                          data[i]);
 800178a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	6a3a      	ldr	r2, [r7, #32]
 8001790:	4413      	add	r3, r2
 8001792:	681b      	ldr	r3, [r3, #0]
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 8001794:	2200      	movs	r2, #0
 8001796:	461c      	mov	r4, r3
 8001798:	4615      	mov	r5, r2
 800179a:	4622      	mov	r2, r4
 800179c:	462b      	mov	r3, r5
 800179e:	2002      	movs	r0, #2
 80017a0:	f004 fc16 	bl	8005fd0 <HAL_FLASH_Program>
    for (uint32_t i = 0; i < sizeof(HighScores) / 4; i++) {
 80017a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a6:	3301      	adds	r3, #1
 80017a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80017aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ac:	2b03      	cmp	r3, #3
 80017ae:	d9e6      	bls.n	800177e <saveHighScores+0x42>
    }

    HAL_FLASH_Lock();
 80017b0:	f004 fc84 	bl	80060bc <HAL_FLASH_Lock>
}
 80017b4:	bf00      	nop
 80017b6:	3728      	adds	r7, #40	@ 0x28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bdb0      	pop	{r4, r5, r7, pc}
 80017bc:	080105b8 	.word	0x080105b8

080017c0 <updateHighScores>:

void updateHighScores(uint32_t newTime) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
    HighScores scores = readHighScores();
 80017c8:	f107 0308 	add.w	r3, r7, #8
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff ff9d 	bl	800170c <readHighScores>

    for (int i = 0; i < 3; i++) {
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
 80017d6:	e038      	b.n	800184a <updateHighScores+0x8a>
        if (newTime < scores.best_times[i] || scores.best_times[i] == 0xFFFFFFFF) {
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	3320      	adds	r3, #32
 80017de:	443b      	add	r3, r7
 80017e0:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d308      	bcc.n	80017fc <updateHighScores+0x3c>
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	3320      	adds	r3, #32
 80017f0:	443b      	add	r3, r7
 80017f2:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80017f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017fa:	d123      	bne.n	8001844 <updateHighScores+0x84>
            for (int j = 2; j > i; j--) {
 80017fc:	2302      	movs	r3, #2
 80017fe:	61bb      	str	r3, [r7, #24]
 8001800:	e00f      	b.n	8001822 <updateHighScores+0x62>
                scores.best_times[j] = scores.best_times[j - 1];
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	3b01      	subs	r3, #1
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	3320      	adds	r3, #32
 800180a:	443b      	add	r3, r7
 800180c:	f853 2c14 	ldr.w	r2, [r3, #-20]
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	3320      	adds	r3, #32
 8001816:	443b      	add	r3, r7
 8001818:	f843 2c14 	str.w	r2, [r3, #-20]
            for (int j = 2; j > i; j--) {
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	3b01      	subs	r3, #1
 8001820:	61bb      	str	r3, [r7, #24]
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	429a      	cmp	r2, r3
 8001828:	dceb      	bgt.n	8001802 <updateHighScores+0x42>
            }
            scores.best_times[i] = newTime;
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	3320      	adds	r3, #32
 8001830:	443b      	add	r3, r7
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	f843 2c14 	str.w	r2, [r3, #-20]
            saveHighScores(&scores);
 8001838:	f107 0308 	add.w	r3, r7, #8
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff7d 	bl	800173c <saveHighScores>
            break;
 8001842:	e006      	b.n	8001852 <updateHighScores+0x92>
    for (int i = 0; i < 3; i++) {
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	3301      	adds	r3, #1
 8001848:	61fb      	str	r3, [r7, #28]
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	2b02      	cmp	r3, #2
 800184e:	ddc3      	ble.n	80017d8 <updateHighScores+0x18>
        }
    }
}
 8001850:	bf00      	nop
 8001852:	bf00      	nop
 8001854:	3720      	adds	r7, #32
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <resetFlash>:
void resetFlash(void) {
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
    HighScores scores = {
 8001862:	4b06      	ldr	r3, [pc, #24]	@ (800187c <resetFlash+0x20>)
 8001864:	463c      	mov	r4, r7
 8001866:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001868:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.magic = 0xDEADBEEF,
		.best_times = {0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}
	};
    saveHighScores(&scores);
 800186c:	463b      	mov	r3, r7
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff ff64 	bl	800173c <saveHighScores>
}
 8001874:	bf00      	nop
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	bd90      	pop	{r4, r7, pc}
 800187c:	080105e0 	.word	0x080105e0

08001880 <isFlashUninitialized>:
bool isFlashUninitialized(void) {
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
    HighScores *scores = (HighScores*)FLASH_USER_START_ADDR;
 8001886:	4b08      	ldr	r3, [pc, #32]	@ (80018a8 <isFlashUninitialized+0x28>)
 8001888:	607b      	str	r3, [r7, #4]
    return scores->magic != FLASH_MAGIC;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a07      	ldr	r2, [pc, #28]	@ (80018ac <isFlashUninitialized+0x2c>)
 8001890:	4293      	cmp	r3, r2
 8001892:	bf14      	ite	ne
 8001894:	2301      	movne	r3, #1
 8001896:	2300      	moveq	r3, #0
 8001898:	b2db      	uxtb	r3, r3
}
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	080e0000 	.word	0x080e0000
 80018ac:	deadbeef 	.word	0xdeadbeef

080018b0 <initializeFlashIfNeeded>:

void initializeFlashIfNeeded(void) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
    if (isFlashUninitialized()) {
 80018b4:	f7ff ffe4 	bl	8001880 <isFlashUninitialized>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <initializeFlashIfNeeded+0x12>
        resetFlash();
 80018be:	f7ff ffcd 	bl	800185c <resetFlash>
    }
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
 80018dc:	615a      	str	r2, [r3, #20]
 80018de:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80018e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001960 <MX_FMC_Init+0x98>)
 80018e2:	4a20      	ldr	r2, [pc, #128]	@ (8001964 <MX_FMC_Init+0x9c>)
 80018e4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80018e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001960 <MX_FMC_Init+0x98>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80018ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001960 <MX_FMC_Init+0x98>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80018f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001960 <MX_FMC_Init+0x98>)
 80018f4:	2204      	movs	r2, #4
 80018f6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80018f8:	4b19      	ldr	r3, [pc, #100]	@ (8001960 <MX_FMC_Init+0x98>)
 80018fa:	2210      	movs	r2, #16
 80018fc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80018fe:	4b18      	ldr	r3, [pc, #96]	@ (8001960 <MX_FMC_Init+0x98>)
 8001900:	2240      	movs	r2, #64	@ 0x40
 8001902:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001904:	4b16      	ldr	r3, [pc, #88]	@ (8001960 <MX_FMC_Init+0x98>)
 8001906:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800190a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800190c:	4b14      	ldr	r3, [pc, #80]	@ (8001960 <MX_FMC_Init+0x98>)
 800190e:	2200      	movs	r2, #0
 8001910:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001912:	4b13      	ldr	r3, [pc, #76]	@ (8001960 <MX_FMC_Init+0x98>)
 8001914:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001918:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800191a:	4b11      	ldr	r3, [pc, #68]	@ (8001960 <MX_FMC_Init+0x98>)
 800191c:	2200      	movs	r2, #0
 800191e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8001920:	4b0f      	ldr	r3, [pc, #60]	@ (8001960 <MX_FMC_Init+0x98>)
 8001922:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001926:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001928:	2302      	movs	r3, #2
 800192a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800192c:	2307      	movs	r3, #7
 800192e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001930:	2304      	movs	r3, #4
 8001932:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001934:	2307      	movs	r3, #7
 8001936:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001938:	2303      	movs	r3, #3
 800193a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800193c:	2302      	movs	r3, #2
 800193e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001940:	2302      	movs	r3, #2
 8001942:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001944:	1d3b      	adds	r3, r7, #4
 8001946:	4619      	mov	r1, r3
 8001948:	4805      	ldr	r0, [pc, #20]	@ (8001960 <MX_FMC_Init+0x98>)
 800194a:	f008 f997 	bl	8009c7c <HAL_SDRAM_Init>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001954:	f003 f832 	bl	80049bc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001958:	bf00      	nop
 800195a:	3720      	adds	r7, #32
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000248 	.word	0x20000248
 8001964:	a0000140 	.word	0xa0000140

08001968 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800197c:	4b3b      	ldr	r3, [pc, #236]	@ (8001a6c <HAL_FMC_MspInit+0x104>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d16f      	bne.n	8001a64 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001984:	4b39      	ldr	r3, [pc, #228]	@ (8001a6c <HAL_FMC_MspInit+0x104>)
 8001986:	2201      	movs	r2, #1
 8001988:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	603b      	str	r3, [r7, #0]
 800198e:	4b38      	ldr	r3, [pc, #224]	@ (8001a70 <HAL_FMC_MspInit+0x108>)
 8001990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001992:	4a37      	ldr	r2, [pc, #220]	@ (8001a70 <HAL_FMC_MspInit+0x108>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6393      	str	r3, [r2, #56]	@ 0x38
 800199a:	4b35      	ldr	r3, [pc, #212]	@ (8001a70 <HAL_FMC_MspInit+0x108>)
 800199c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80019a6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80019aa:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	2302      	movs	r3, #2
 80019ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b4:	2303      	movs	r3, #3
 80019b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019b8:	230c      	movs	r3, #12
 80019ba:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	4619      	mov	r1, r3
 80019c0:	482c      	ldr	r0, [pc, #176]	@ (8001a74 <HAL_FMC_MspInit+0x10c>)
 80019c2:	f004 fe0b 	bl	80065dc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80019c6:	2301      	movs	r3, #1
 80019c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d2:	2303      	movs	r3, #3
 80019d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019d6:	230c      	movs	r3, #12
 80019d8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	4619      	mov	r1, r3
 80019de:	4826      	ldr	r0, [pc, #152]	@ (8001a78 <HAL_FMC_MspInit+0x110>)
 80019e0:	f004 fdfc 	bl	80065dc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80019e4:	f248 1333 	movw	r3, #33075	@ 0x8133
 80019e8:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f2:	2303      	movs	r3, #3
 80019f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019f6:	230c      	movs	r3, #12
 80019f8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019fa:	1d3b      	adds	r3, r7, #4
 80019fc:	4619      	mov	r1, r3
 80019fe:	481f      	ldr	r0, [pc, #124]	@ (8001a7c <HAL_FMC_MspInit+0x114>)
 8001a00:	f004 fdec 	bl	80065dc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001a04:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001a08:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a12:	2303      	movs	r3, #3
 8001a14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a16:	230c      	movs	r3, #12
 8001a18:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a1a:	1d3b      	adds	r3, r7, #4
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4818      	ldr	r0, [pc, #96]	@ (8001a80 <HAL_FMC_MspInit+0x118>)
 8001a20:	f004 fddc 	bl	80065dc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001a24:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001a28:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a32:	2303      	movs	r3, #3
 8001a34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a36:	230c      	movs	r3, #12
 8001a38:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4811      	ldr	r0, [pc, #68]	@ (8001a84 <HAL_FMC_MspInit+0x11c>)
 8001a40:	f004 fdcc 	bl	80065dc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001a44:	2360      	movs	r3, #96	@ 0x60
 8001a46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a50:	2303      	movs	r3, #3
 8001a52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a54:	230c      	movs	r3, #12
 8001a56:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	480a      	ldr	r0, [pc, #40]	@ (8001a88 <HAL_FMC_MspInit+0x120>)
 8001a5e:	f004 fdbd 	bl	80065dc <HAL_GPIO_Init>
 8001a62:	e000      	b.n	8001a66 <HAL_FMC_MspInit+0xfe>
    return;
 8001a64:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	2000027c 	.word	0x2000027c
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40021400 	.word	0x40021400
 8001a78:	40020800 	.word	0x40020800
 8001a7c:	40021800 	.word	0x40021800
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40020c00 	.word	0x40020c00
 8001a88:	40020400 	.word	0x40020400

08001a8c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001a94:	f7ff ff68 	bl	8001968 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08e      	sub	sp, #56	@ 0x38
 8001aa4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]
 8001ab0:	609a      	str	r2, [r3, #8]
 8001ab2:	60da      	str	r2, [r3, #12]
 8001ab4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	623b      	str	r3, [r7, #32]
 8001aba:	4b88      	ldr	r3, [pc, #544]	@ (8001cdc <MX_GPIO_Init+0x23c>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	4a87      	ldr	r2, [pc, #540]	@ (8001cdc <MX_GPIO_Init+0x23c>)
 8001ac0:	f043 0304 	orr.w	r3, r3, #4
 8001ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac6:	4b85      	ldr	r3, [pc, #532]	@ (8001cdc <MX_GPIO_Init+0x23c>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	623b      	str	r3, [r7, #32]
 8001ad0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
 8001ad6:	4b81      	ldr	r3, [pc, #516]	@ (8001cdc <MX_GPIO_Init+0x23c>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	4a80      	ldr	r2, [pc, #512]	@ (8001cdc <MX_GPIO_Init+0x23c>)
 8001adc:	f043 0320 	orr.w	r3, r3, #32
 8001ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae2:	4b7e      	ldr	r3, [pc, #504]	@ (8001cdc <MX_GPIO_Init+0x23c>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	f003 0320 	and.w	r3, r3, #32
 8001aea:	61fb      	str	r3, [r7, #28]
 8001aec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	61bb      	str	r3, [r7, #24]
 8001af2:	4b7a      	ldr	r3, [pc, #488]	@ (8001cdc <MX_GPIO_Init+0x23c>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	4a79      	ldr	r2, [pc, #484]	@ (8001cdc <MX_GPIO_Init+0x23c>)
 8001af8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afe:	4b77      	ldr	r3, [pc, #476]	@ (8001cdc <MX_GPIO_Init+0x23c>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b06:	61bb      	str	r3, [r7, #24]
 8001b08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	4b73      	ldr	r3, [pc, #460]	@ (8001cdc <MX_GPIO_Init+0x23c>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	4a72      	ldr	r2, [pc, #456]	@ (8001cdc <MX_GPIO_Init+0x23c>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b1a:	4b70      	ldr	r3, [pc, #448]	@ (8001cdc <MX_GPIO_Init+0x23c>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	4b6c      	ldr	r3, [pc, #432]	@ (8001cdc <MX_GPIO_Init+0x23c>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	4a6b      	ldr	r2, [pc, #428]	@ (8001cdc <MX_GPIO_Init+0x23c>)
 8001b30:	f043 0302 	orr.w	r3, r3, #2
 8001b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b36:	4b69      	ldr	r3, [pc, #420]	@ (8001cdc <MX_GPIO_Init+0x23c>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	4b65      	ldr	r3, [pc, #404]	@ (8001cdc <MX_GPIO_Init+0x23c>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4a:	4a64      	ldr	r2, [pc, #400]	@ (8001cdc <MX_GPIO_Init+0x23c>)
 8001b4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b52:	4b62      	ldr	r3, [pc, #392]	@ (8001cdc <MX_GPIO_Init+0x23c>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	4b5e      	ldr	r3, [pc, #376]	@ (8001cdc <MX_GPIO_Init+0x23c>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b66:	4a5d      	ldr	r2, [pc, #372]	@ (8001cdc <MX_GPIO_Init+0x23c>)
 8001b68:	f043 0310 	orr.w	r3, r3, #16
 8001b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b6e:	4b5b      	ldr	r3, [pc, #364]	@ (8001cdc <MX_GPIO_Init+0x23c>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b72:	f003 0310 	and.w	r3, r3, #16
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	607b      	str	r3, [r7, #4]
 8001b7e:	4b57      	ldr	r3, [pc, #348]	@ (8001cdc <MX_GPIO_Init+0x23c>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b82:	4a56      	ldr	r2, [pc, #344]	@ (8001cdc <MX_GPIO_Init+0x23c>)
 8001b84:	f043 0308 	orr.w	r3, r3, #8
 8001b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b8a:	4b54      	ldr	r3, [pc, #336]	@ (8001cdc <MX_GPIO_Init+0x23c>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001b96:	2200      	movs	r2, #0
 8001b98:	2116      	movs	r1, #22
 8001b9a:	4851      	ldr	r0, [pc, #324]	@ (8001ce0 <MX_GPIO_Init+0x240>)
 8001b9c:	f004 fee2 	bl	8006964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2180      	movs	r1, #128	@ 0x80
 8001ba4:	484f      	ldr	r0, [pc, #316]	@ (8001ce4 <MX_GPIO_Init+0x244>)
 8001ba6:	f004 fedd 	bl	8006964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001baa:	2200      	movs	r2, #0
 8001bac:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001bb0:	484d      	ldr	r0, [pc, #308]	@ (8001ce8 <MX_GPIO_Init+0x248>)
 8001bb2:	f004 fed7 	bl	8006964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001bbc:	484b      	ldr	r0, [pc, #300]	@ (8001cec <MX_GPIO_Init+0x24c>)
 8001bbe:	f004 fed1 	bl	8006964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NCS_MEMS_SPI_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(NCS_MEMS_SPI_GPIO_Port, &GPIO_InitStruct);
 8001bd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4841      	ldr	r0, [pc, #260]	@ (8001ce0 <MX_GPIO_Init+0x240>)
 8001bda:	f004 fcff 	bl	80065dc <HAL_GPIO_Init>

  /*Configure GPIO pins : CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = CSX_Pin|OTG_FS_PSO_Pin;
 8001bde:	2314      	movs	r3, #20
 8001be0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be2:	2301      	movs	r3, #1
 8001be4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bea:	2300      	movs	r3, #0
 8001bec:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	483a      	ldr	r0, [pc, #232]	@ (8001ce0 <MX_GPIO_Init+0x240>)
 8001bf6:	f004 fcf1 	bl	80065dc <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8001c06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4835      	ldr	r0, [pc, #212]	@ (8001ce4 <MX_GPIO_Init+0x244>)
 8001c0e:	f004 fce5 	bl	80065dc <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001c12:	f248 0306 	movw	r3, #32774	@ 0x8006
 8001c16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c18:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c26:	4619      	mov	r1, r3
 8001c28:	482e      	ldr	r0, [pc, #184]	@ (8001ce4 <MX_GPIO_Init+0x244>)
 8001c2a:	f004 fcd7 	bl	80065dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001c2e:	2380      	movs	r3, #128	@ 0x80
 8001c30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c32:	2301      	movs	r3, #1
 8001c34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001c3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c42:	4619      	mov	r1, r3
 8001c44:	4827      	ldr	r0, [pc, #156]	@ (8001ce4 <MX_GPIO_Init+0x244>)
 8001c46:	f004 fcc9 	bl	80065dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001c4a:	2320      	movs	r3, #32
 8001c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c4e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001c52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001c58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4820      	ldr	r0, [pc, #128]	@ (8001ce0 <MX_GPIO_Init+0x240>)
 8001c60:	f004 fcbc 	bl	80065dc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001c64:	2304      	movs	r3, #4
 8001c66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001c70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c74:	4619      	mov	r1, r3
 8001c76:	481e      	ldr	r0, [pc, #120]	@ (8001cf0 <MX_GPIO_Init+0x250>)
 8001c78:	f004 fcb0 	bl	80065dc <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001c7c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c82:	2300      	movs	r3, #0
 8001c84:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001c8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4815      	ldr	r0, [pc, #84]	@ (8001ce8 <MX_GPIO_Init+0x248>)
 8001c92:	f004 fca3 	bl	80065dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001c96:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ca8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cac:	4619      	mov	r1, r3
 8001cae:	480e      	ldr	r0, [pc, #56]	@ (8001ce8 <MX_GPIO_Init+0x248>)
 8001cb0:	f004 fc94 	bl	80065dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001cb4:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001cb8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4807      	ldr	r0, [pc, #28]	@ (8001cec <MX_GPIO_Init+0x24c>)
 8001cce:	f004 fc85 	bl	80065dc <HAL_GPIO_Init>

}
 8001cd2:	bf00      	nop
 8001cd4:	3738      	adds	r7, #56	@ 0x38
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40020800 	.word	0x40020800
 8001ce4:	40020000 	.word	0x40020000
 8001ce8:	40020c00 	.word	0x40020c00
 8001cec:	40021800 	.word	0x40021800
 8001cf0:	40020400 	.word	0x40020400

08001cf4 <_write>:
static int16_t x_data[MOVING_AVERAGE_WINDOW];
static int16_t y_data[MOVING_AVERAGE_WINDOW];
static int16_t z_data[MOVING_AVERAGE_WINDOW];
static uint8_t data_index = 0;

ssize_t _write(int file, const char *data, size_t len) {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) data, len, HAL_MAX_DELAY); // Wysyłanie danych przez UART
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	f04f 33ff 	mov.w	r3, #4294967295
 8001d08:	68b9      	ldr	r1, [r7, #8]
 8001d0a:	4804      	ldr	r0, [pc, #16]	@ (8001d1c <_write+0x28>)
 8001d0c:	f009 fbf8 	bl	800b500 <HAL_UART_Transmit>
	return len;
 8001d10:	687b      	ldr	r3, [r7, #4]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20026594 	.word	0x20026594

08001d20 <gyro_init>:

void gyro_init(void) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
	uint8_t configData[2] = { CTRL_REG1, 0x0F }; // PD=1, Zen=1, Yen=1, Xen=1;
 8001d26:	f44f 6372 	mov.w	r3, #3872	@ 0xf20
 8001d2a:	80bb      	strh	r3, [r7, #4]

	while (!spi5_acquire())
 8001d2c:	bf00      	nop
 8001d2e:	f002 fe4b 	bl	80049c8 <spi5_acquire>
 8001d32:	4603      	mov	r3, r0
 8001d34:	f083 0301 	eor.w	r3, r3, #1
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d116      	bne.n	8001d6c <gyro_init+0x4c>
		return;

	GYRO_CS_LOW();
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2102      	movs	r1, #2
 8001d42:	480c      	ldr	r0, [pc, #48]	@ (8001d74 <gyro_init+0x54>)
 8001d44:	f004 fe0e 	bl	8006964 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, configData, 2, 100);
 8001d48:	1d39      	adds	r1, r7, #4
 8001d4a:	2364      	movs	r3, #100	@ 0x64
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	480a      	ldr	r0, [pc, #40]	@ (8001d78 <gyro_init+0x58>)
 8001d50:	f008 f851 	bl	8009df6 <HAL_SPI_Transmit>
	GYRO_CS_HIGH();
 8001d54:	2201      	movs	r2, #1
 8001d56:	2102      	movs	r1, #2
 8001d58:	4806      	ldr	r0, [pc, #24]	@ (8001d74 <gyro_init+0x54>)
 8001d5a:	f004 fe03 	bl	8006964 <HAL_GPIO_WritePin>

	spi5_release();
 8001d5e:	f002 fe47 	bl	80049f0 <spi5_release>

	gyro_set_sensitivity();
 8001d62:	f000 f80b 	bl	8001d7c <gyro_set_sensitivity>

	// Weryfikacja połączenia
	gyro_ReadWhoAmI();
 8001d66:	f000 f8bb 	bl	8001ee0 <gyro_ReadWhoAmI>
 8001d6a:	e000      	b.n	8001d6e <gyro_init+0x4e>
		return;
 8001d6c:	bf00      	nop
}
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40020800 	.word	0x40020800
 8001d78:	200263b8 	.word	0x200263b8

08001d7c <gyro_set_sensitivity>:

void gyro_set_sensitivity() {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
	uint8_t configData[2] = { CTRL_REG4, SENSITIVITY };
 8001d82:	f243 0323 	movw	r3, #12323	@ 0x3023
 8001d86:	80bb      	strh	r3, [r7, #4]

	while (!spi5_acquire())
 8001d88:	bf00      	nop
 8001d8a:	f002 fe1d 	bl	80049c8 <spi5_acquire>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	f083 0301 	eor.w	r3, r3, #1
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d112      	bne.n	8001dc0 <gyro_set_sensitivity+0x44>
		return;

	GYRO_CS_LOW();
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2102      	movs	r1, #2
 8001d9e:	480a      	ldr	r0, [pc, #40]	@ (8001dc8 <gyro_set_sensitivity+0x4c>)
 8001da0:	f004 fde0 	bl	8006964 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, configData, 2, 100);
 8001da4:	1d39      	adds	r1, r7, #4
 8001da6:	2364      	movs	r3, #100	@ 0x64
 8001da8:	2202      	movs	r2, #2
 8001daa:	4808      	ldr	r0, [pc, #32]	@ (8001dcc <gyro_set_sensitivity+0x50>)
 8001dac:	f008 f823 	bl	8009df6 <HAL_SPI_Transmit>
	GYRO_CS_HIGH();
 8001db0:	2201      	movs	r2, #1
 8001db2:	2102      	movs	r1, #2
 8001db4:	4804      	ldr	r0, [pc, #16]	@ (8001dc8 <gyro_set_sensitivity+0x4c>)
 8001db6:	f004 fdd5 	bl	8006964 <HAL_GPIO_WritePin>

	spi5_release();
 8001dba:	f002 fe19 	bl	80049f0 <spi5_release>
 8001dbe:	e000      	b.n	8001dc2 <gyro_set_sensitivity+0x46>
		return;
 8001dc0:	bf00      	nop
}
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40020800 	.word	0x40020800
 8001dcc:	200263b8 	.word	0x200263b8

08001dd0 <gyro_get_filtered_data>:

void gyro_get_filtered_data(Gyro_Int_Data *gyro_data) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b088      	sub	sp, #32
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]

	int32_t x_sum = 0, y_sum = 0, z_sum = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]
 8001ddc:	2300      	movs	r3, #0
 8001dde:	61bb      	str	r3, [r7, #24]
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
	Gyro_Int_Data raw_data;
	data_index = 0;
 8001de4:	4b39      	ldr	r3, [pc, #228]	@ (8001ecc <gyro_get_filtered_data+0xfc>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	701a      	strb	r2, [r3, #0]

	gyro_get_data(&raw_data);
 8001dea:	f107 030c 	add.w	r3, r7, #12
 8001dee:	4618      	mov	r0, r3
 8001df0:	f000 f8bc 	bl	8001f6c <gyro_get_data>

	// Aktualizacja bufora
	x_data[data_index] = raw_data.x;
 8001df4:	4b35      	ldr	r3, [pc, #212]	@ (8001ecc <gyro_get_filtered_data+0xfc>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001dfe:	4b34      	ldr	r3, [pc, #208]	@ (8001ed0 <gyro_get_filtered_data+0x100>)
 8001e00:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	y_data[data_index] = raw_data.y;
 8001e04:	4b31      	ldr	r3, [pc, #196]	@ (8001ecc <gyro_get_filtered_data+0xfc>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001e0e:	4b31      	ldr	r3, [pc, #196]	@ (8001ed4 <gyro_get_filtered_data+0x104>)
 8001e10:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	z_data[data_index] = raw_data.z;
 8001e14:	4b2d      	ldr	r3, [pc, #180]	@ (8001ecc <gyro_get_filtered_data+0xfc>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8001e1e:	4b2e      	ldr	r3, [pc, #184]	@ (8001ed8 <gyro_get_filtered_data+0x108>)
 8001e20:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	//Średnia
	for (uint8_t i = 0; i < MOVING_AVERAGE_WINDOW; i++) {
 8001e24:	2300      	movs	r3, #0
 8001e26:	74fb      	strb	r3, [r7, #19]
 8001e28:	e01a      	b.n	8001e60 <gyro_get_filtered_data+0x90>
		x_sum += x_data[i];
 8001e2a:	7cfb      	ldrb	r3, [r7, #19]
 8001e2c:	4a28      	ldr	r2, [pc, #160]	@ (8001ed0 <gyro_get_filtered_data+0x100>)
 8001e2e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001e32:	461a      	mov	r2, r3
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	4413      	add	r3, r2
 8001e38:	61fb      	str	r3, [r7, #28]
		y_sum += y_data[i];
 8001e3a:	7cfb      	ldrb	r3, [r7, #19]
 8001e3c:	4a25      	ldr	r2, [pc, #148]	@ (8001ed4 <gyro_get_filtered_data+0x104>)
 8001e3e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001e42:	461a      	mov	r2, r3
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	4413      	add	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
		z_sum += z_data[i];
 8001e4a:	7cfb      	ldrb	r3, [r7, #19]
 8001e4c:	4a22      	ldr	r2, [pc, #136]	@ (8001ed8 <gyro_get_filtered_data+0x108>)
 8001e4e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001e52:	461a      	mov	r2, r3
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	4413      	add	r3, r2
 8001e58:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MOVING_AVERAGE_WINDOW; i++) {
 8001e5a:	7cfb      	ldrb	r3, [r7, #19]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	74fb      	strb	r3, [r7, #19]
 8001e60:	7cfb      	ldrb	r3, [r7, #19]
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d9e1      	bls.n	8001e2a <gyro_get_filtered_data+0x5a>
	}

	gyro_data->x = x_sum / MOVING_AVERAGE_WINDOW;
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	4a1c      	ldr	r2, [pc, #112]	@ (8001edc <gyro_get_filtered_data+0x10c>)
 8001e6a:	fb82 1203 	smull	r1, r2, r2, r3
 8001e6e:	1052      	asrs	r2, r2, #1
 8001e70:	17db      	asrs	r3, r3, #31
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	b21a      	sxth	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	801a      	strh	r2, [r3, #0]
	gyro_data->y = y_sum / MOVING_AVERAGE_WINDOW;
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	4a17      	ldr	r2, [pc, #92]	@ (8001edc <gyro_get_filtered_data+0x10c>)
 8001e7e:	fb82 1203 	smull	r1, r2, r2, r3
 8001e82:	1052      	asrs	r2, r2, #1
 8001e84:	17db      	asrs	r3, r3, #31
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	b21a      	sxth	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	805a      	strh	r2, [r3, #2]
	gyro_data->z = z_sum / MOVING_AVERAGE_WINDOW;
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	4a12      	ldr	r2, [pc, #72]	@ (8001edc <gyro_get_filtered_data+0x10c>)
 8001e92:	fb82 1203 	smull	r1, r2, r2, r3
 8001e96:	1052      	asrs	r2, r2, #1
 8001e98:	17db      	asrs	r3, r3, #31
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	b21a      	sxth	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	809a      	strh	r2, [r3, #4]

	// Aktualizuj indeks
	data_index = (data_index + 1) % MOVING_AVERAGE_WINDOW;
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ecc <gyro_get_filtered_data+0xfc>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	1c5a      	adds	r2, r3, #1
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8001edc <gyro_get_filtered_data+0x10c>)
 8001eaa:	fb83 1302 	smull	r1, r3, r3, r2
 8001eae:	1059      	asrs	r1, r3, #1
 8001eb0:	17d3      	asrs	r3, r2, #31
 8001eb2:	1ac9      	subs	r1, r1, r3
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	1ad1      	subs	r1, r2, r3
 8001ebc:	b2ca      	uxtb	r2, r1
 8001ebe:	4b03      	ldr	r3, [pc, #12]	@ (8001ecc <gyro_get_filtered_data+0xfc>)
 8001ec0:	701a      	strb	r2, [r3, #0]
}
 8001ec2:	bf00      	nop
 8001ec4:	3720      	adds	r7, #32
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	200002a2 	.word	0x200002a2
 8001ed0:	20000280 	.word	0x20000280
 8001ed4:	2000028c 	.word	0x2000028c
 8001ed8:	20000298 	.word	0x20000298
 8001edc:	66666667 	.word	0x66666667

08001ee0 <gyro_ReadWhoAmI>:

void gyro_ReadWhoAmI(void) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
	uint8_t tx = WHO_AM_I | 0x80;
 8001ee6:	238f      	movs	r3, #143	@ 0x8f
 8001ee8:	71fb      	strb	r3, [r7, #7]
	uint8_t rx = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	71bb      	strb	r3, [r7, #6]

	if (!spi5_acquire())
 8001eee:	f002 fd6b 	bl	80049c8 <spi5_acquire>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	f083 0301 	eor.w	r3, r3, #1
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d129      	bne.n	8001f52 <gyro_ReadWhoAmI+0x72>
		return;

	GYRO_CS_LOW();
 8001efe:	2200      	movs	r2, #0
 8001f00:	2102      	movs	r1, #2
 8001f02:	4816      	ldr	r0, [pc, #88]	@ (8001f5c <gyro_ReadWhoAmI+0x7c>)
 8001f04:	f004 fd2e 	bl	8006964 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &tx, 1, 10);
 8001f08:	1df9      	adds	r1, r7, #7
 8001f0a:	230a      	movs	r3, #10
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	4814      	ldr	r0, [pc, #80]	@ (8001f60 <gyro_ReadWhoAmI+0x80>)
 8001f10:	f007 ff71 	bl	8009df6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi5, &rx, 1, 10);
 8001f14:	1db9      	adds	r1, r7, #6
 8001f16:	230a      	movs	r3, #10
 8001f18:	2201      	movs	r2, #1
 8001f1a:	4811      	ldr	r0, [pc, #68]	@ (8001f60 <gyro_ReadWhoAmI+0x80>)
 8001f1c:	f008 f8af 	bl	800a07e <HAL_SPI_Receive>
	GYRO_CS_HIGH();
 8001f20:	2201      	movs	r2, #1
 8001f22:	2102      	movs	r1, #2
 8001f24:	480d      	ldr	r0, [pc, #52]	@ (8001f5c <gyro_ReadWhoAmI+0x7c>)
 8001f26:	f004 fd1d 	bl	8006964 <HAL_GPIO_WritePin>

	spi5_release();
 8001f2a:	f002 fd61 	bl	80049f0 <spi5_release>

	if ((rx != 0xD3) && (rx != 0xD4)) {
 8001f2e:	79bb      	ldrb	r3, [r7, #6]
 8001f30:	2bd3      	cmp	r3, #211	@ 0xd3
 8001f32:	d008      	beq.n	8001f46 <gyro_ReadWhoAmI+0x66>
 8001f34:	79bb      	ldrb	r3, [r7, #6]
 8001f36:	2bd4      	cmp	r3, #212	@ 0xd4
 8001f38:	d005      	beq.n	8001f46 <gyro_ReadWhoAmI+0x66>
		printf("WHO_AM_I error: 0x%02X (expected 0xD3 or 0xD4)\r\n", rx);
 8001f3a:	79bb      	ldrb	r3, [r7, #6]
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4809      	ldr	r0, [pc, #36]	@ (8001f64 <gyro_ReadWhoAmI+0x84>)
 8001f40:	f00c fa1c 	bl	800e37c <iprintf>
 8001f44:	e006      	b.n	8001f54 <gyro_ReadWhoAmI+0x74>
	}
	else {
		printf("WHO_AM_I OK: 0x%02X\r\n", rx);
 8001f46:	79bb      	ldrb	r3, [r7, #6]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4807      	ldr	r0, [pc, #28]	@ (8001f68 <gyro_ReadWhoAmI+0x88>)
 8001f4c:	f00c fa16 	bl	800e37c <iprintf>
 8001f50:	e000      	b.n	8001f54 <gyro_ReadWhoAmI+0x74>
		return;
 8001f52:	bf00      	nop
	}
}
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40020800 	.word	0x40020800
 8001f60:	200263b8 	.word	0x200263b8
 8001f64:	080105f0 	.word	0x080105f0
 8001f68:	08010624 	.word	0x08010624

08001f6c <gyro_get_data>:

void gyro_get_data(Gyro_Int_Data *gyro_data) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]

	uint8_t tx = OUT_X_L | 0x80 | 0x40;
 8001f74:	23e8      	movs	r3, #232	@ 0xe8
 8001f76:	73fb      	strb	r3, [r7, #15]
	uint8_t rx[6];
	if (gyro_is_data_ready()==false) {
 8001f78:	f000 f852 	bl	8002020 <gyro_is_data_ready>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	f083 0301 	eor.w	r3, r3, #1
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d140      	bne.n	800200a <gyro_get_data+0x9e>
//		printf("Data not ready\r\n");
		return;
	}

	if (!spi5_acquire())
 8001f88:	f002 fd1e 	bl	80049c8 <spi5_acquire>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	f083 0301 	eor.w	r3, r3, #1
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d13a      	bne.n	800200e <gyro_get_data+0xa2>
		return;

	GYRO_CS_LOW();
 8001f98:	2200      	movs	r2, #0
 8001f9a:	2102      	movs	r1, #2
 8001f9c:	481e      	ldr	r0, [pc, #120]	@ (8002018 <gyro_get_data+0xac>)
 8001f9e:	f004 fce1 	bl	8006964 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &tx, 1, 10);
 8001fa2:	f107 010f 	add.w	r1, r7, #15
 8001fa6:	230a      	movs	r3, #10
 8001fa8:	2201      	movs	r2, #1
 8001faa:	481c      	ldr	r0, [pc, #112]	@ (800201c <gyro_get_data+0xb0>)
 8001fac:	f007 ff23 	bl	8009df6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi5, rx, 6, 10);
 8001fb0:	f107 0108 	add.w	r1, r7, #8
 8001fb4:	230a      	movs	r3, #10
 8001fb6:	2206      	movs	r2, #6
 8001fb8:	4818      	ldr	r0, [pc, #96]	@ (800201c <gyro_get_data+0xb0>)
 8001fba:	f008 f860 	bl	800a07e <HAL_SPI_Receive>
	GYRO_CS_HIGH();
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	2102      	movs	r1, #2
 8001fc2:	4815      	ldr	r0, [pc, #84]	@ (8002018 <gyro_get_data+0xac>)
 8001fc4:	f004 fcce 	bl	8006964 <HAL_GPIO_WritePin>

	spi5_release();
 8001fc8:	f002 fd12 	bl	80049f0 <spi5_release>

	gyro_data->x = (int16_t) (rx[1] << 8 | rx[0]);
 8001fcc:	7a7b      	ldrb	r3, [r7, #9]
 8001fce:	b21b      	sxth	r3, r3
 8001fd0:	021b      	lsls	r3, r3, #8
 8001fd2:	b21a      	sxth	r2, r3
 8001fd4:	7a3b      	ldrb	r3, [r7, #8]
 8001fd6:	b21b      	sxth	r3, r3
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	b21a      	sxth	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	801a      	strh	r2, [r3, #0]
	gyro_data->y = (int16_t) (rx[3] << 8 | rx[2]);
 8001fe0:	7afb      	ldrb	r3, [r7, #11]
 8001fe2:	b21b      	sxth	r3, r3
 8001fe4:	021b      	lsls	r3, r3, #8
 8001fe6:	b21a      	sxth	r2, r3
 8001fe8:	7abb      	ldrb	r3, [r7, #10]
 8001fea:	b21b      	sxth	r3, r3
 8001fec:	4313      	orrs	r3, r2
 8001fee:	b21a      	sxth	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	805a      	strh	r2, [r3, #2]
	gyro_data->z = (int16_t) (rx[5] << 8 | rx[4]);
 8001ff4:	7b7b      	ldrb	r3, [r7, #13]
 8001ff6:	b21b      	sxth	r3, r3
 8001ff8:	021b      	lsls	r3, r3, #8
 8001ffa:	b21a      	sxth	r2, r3
 8001ffc:	7b3b      	ldrb	r3, [r7, #12]
 8001ffe:	b21b      	sxth	r3, r3
 8002000:	4313      	orrs	r3, r2
 8002002:	b21a      	sxth	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	809a      	strh	r2, [r3, #4]
 8002008:	e002      	b.n	8002010 <gyro_get_data+0xa4>
		return;
 800200a:	bf00      	nop
 800200c:	e000      	b.n	8002010 <gyro_get_data+0xa4>
		return;
 800200e:	bf00      	nop

}
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40020800 	.word	0x40020800
 800201c:	200263b8 	.word	0x200263b8

08002020 <gyro_is_data_ready>:

bool gyro_is_data_ready(void) {
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
	uint8_t tx = STATUS_REG | 0x80;
 8002026:	23a7      	movs	r3, #167	@ 0xa7
 8002028:	71fb      	strb	r3, [r7, #7]
	uint8_t rx = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	71bb      	strb	r3, [r7, #6]

	if (!spi5_acquire())
 800202e:	f002 fccb 	bl	80049c8 <spi5_acquire>
 8002032:	4603      	mov	r3, r0
 8002034:	f083 0301 	eor.w	r3, r3, #1
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <gyro_is_data_ready+0x22>
		return false;
 800203e:	2300      	movs	r3, #0
 8002040:	e01f      	b.n	8002082 <gyro_is_data_ready+0x62>

	GYRO_CS_LOW();
 8002042:	2200      	movs	r2, #0
 8002044:	2102      	movs	r1, #2
 8002046:	4811      	ldr	r0, [pc, #68]	@ (800208c <gyro_is_data_ready+0x6c>)
 8002048:	f004 fc8c 	bl	8006964 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &tx, 1, 10);
 800204c:	1df9      	adds	r1, r7, #7
 800204e:	230a      	movs	r3, #10
 8002050:	2201      	movs	r2, #1
 8002052:	480f      	ldr	r0, [pc, #60]	@ (8002090 <gyro_is_data_ready+0x70>)
 8002054:	f007 fecf 	bl	8009df6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi5, &rx, 1, 10);
 8002058:	1db9      	adds	r1, r7, #6
 800205a:	230a      	movs	r3, #10
 800205c:	2201      	movs	r2, #1
 800205e:	480c      	ldr	r0, [pc, #48]	@ (8002090 <gyro_is_data_ready+0x70>)
 8002060:	f008 f80d 	bl	800a07e <HAL_SPI_Receive>
	GYRO_CS_HIGH();
 8002064:	2201      	movs	r2, #1
 8002066:	2102      	movs	r1, #2
 8002068:	4808      	ldr	r0, [pc, #32]	@ (800208c <gyro_is_data_ready+0x6c>)
 800206a:	f004 fc7b 	bl	8006964 <HAL_GPIO_WritePin>

	spi5_release();
 800206e:	f002 fcbf 	bl	80049f0 <spi5_release>

	return (rx & 0x08);
 8002072:	79bb      	ldrb	r3, [r7, #6]
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b00      	cmp	r3, #0
 800207a:	bf14      	ite	ne
 800207c:	2301      	movne	r3, #1
 800207e:	2300      	moveq	r3, #0
 8002080:	b2db      	uxtb	r3, r3
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40020800 	.word	0x40020800
 8002090:	200263b8 	.word	0x200263b8

08002094 <gyro_calculate_offset>:

void gyro_calculate_offset(Gyro_Int_Data *offset) {
 8002094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002098:	b098      	sub	sp, #96	@ 0x60
 800209a:	af00      	add	r7, sp, #0
 800209c:	6378      	str	r0, [r7, #52]	@ 0x34
	int64_t sum_x = 0, sum_y = 0, sum_z = 0;
 800209e:	f04f 0200 	mov.w	r2, #0
 80020a2:	f04f 0300 	mov.w	r3, #0
 80020a6:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 80020aa:	f04f 0200 	mov.w	r2, #0
 80020ae:	f04f 0300 	mov.w	r3, #0
 80020b2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	const uint16_t samples = 500;
 80020c2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80020c6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
	Gyro_Int_Data raw_data;

	printf("Starting calibration...\r\n");
 80020ca:	484f      	ldr	r0, [pc, #316]	@ (8002208 <gyro_calculate_offset+0x174>)
 80020cc:	f00c f9be 	bl	800e44c <puts>

	for (uint16_t i = 0; i < samples; i++) {
 80020d0:	2300      	movs	r3, #0
 80020d2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80020d6:	e04e      	b.n	8002176 <gyro_calculate_offset+0xe2>
		gyro_get_data(&raw_data);
 80020d8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ff45 	bl	8001f6c <gyro_get_data>
		sum_x += raw_data.x;
 80020e2:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 80020e6:	b21b      	sxth	r3, r3
 80020e8:	17da      	asrs	r2, r3, #31
 80020ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80020ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80020f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020f4:	1851      	adds	r1, r2, r1
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80020fa:	414b      	adcs	r3, r1
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002102:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
		sum_y += raw_data.y;
 8002106:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 800210a:	b21b      	sxth	r3, r3
 800210c:	17da      	asrs	r2, r3, #31
 800210e:	469a      	mov	sl, r3
 8002110:	4693      	mov	fp, r2
 8002112:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002116:	eb12 010a 	adds.w	r1, r2, sl
 800211a:	6039      	str	r1, [r7, #0]
 800211c:	eb43 030b 	adc.w	r3, r3, fp
 8002120:	607b      	str	r3, [r7, #4]
 8002122:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002126:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		sum_z += raw_data.z;
 800212a:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 800212e:	b21b      	sxth	r3, r3
 8002130:	17da      	asrs	r2, r3, #31
 8002132:	461c      	mov	r4, r3
 8002134:	4615      	mov	r5, r2
 8002136:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800213a:	eb12 0804 	adds.w	r8, r2, r4
 800213e:	eb43 0905 	adc.w	r9, r3, r5
 8002142:	e9c7 8912 	strd	r8, r9, [r7, #72]	@ 0x48
		HAL_Delay(10);
 8002146:	200a      	movs	r0, #10
 8002148:	f003 f8c4 	bl	80052d4 <HAL_Delay>

		if (i % 100 == 0)
 800214c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8002150:	4b2e      	ldr	r3, [pc, #184]	@ (800220c <gyro_calculate_offset+0x178>)
 8002152:	fba3 2301 	umull	r2, r3, r3, r1
 8002156:	095a      	lsrs	r2, r3, #5
 8002158:	2364      	movs	r3, #100	@ 0x64
 800215a:	fb02 f303 	mul.w	r3, r2, r3
 800215e:	1acb      	subs	r3, r1, r3
 8002160:	b29b      	uxth	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d102      	bne.n	800216c <gyro_calculate_offset+0xd8>
			printf(".\r\n");
 8002166:	482a      	ldr	r0, [pc, #168]	@ (8002210 <gyro_calculate_offset+0x17c>)
 8002168:	f00c f970 	bl	800e44c <puts>
	for (uint16_t i = 0; i < samples; i++) {
 800216c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002170:	3301      	adds	r3, #1
 8002172:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002176:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800217a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800217e:	429a      	cmp	r2, r3
 8002180:	d3aa      	bcc.n	80020d8 <gyro_calculate_offset+0x44>
	}

	offset->x = sum_x / samples;
 8002182:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8002186:	2200      	movs	r2, #0
 8002188:	623b      	str	r3, [r7, #32]
 800218a:	627a      	str	r2, [r7, #36]	@ 0x24
 800218c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002190:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8002194:	f7fe fd18 	bl	8000bc8 <__aeabi_ldivmod>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	b212      	sxth	r2, r2
 800219e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021a0:	801a      	strh	r2, [r3, #0]
	offset->y = sum_y / samples;
 80021a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80021a6:	2200      	movs	r2, #0
 80021a8:	61bb      	str	r3, [r7, #24]
 80021aa:	61fa      	str	r2, [r7, #28]
 80021ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021b0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80021b4:	f7fe fd08 	bl	8000bc8 <__aeabi_ldivmod>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	b212      	sxth	r2, r2
 80021be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021c0:	805a      	strh	r2, [r3, #2]
	offset->z = sum_z / samples;
 80021c2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80021c6:	2200      	movs	r2, #0
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	617a      	str	r2, [r7, #20]
 80021cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80021d0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80021d4:	f7fe fcf8 	bl	8000bc8 <__aeabi_ldivmod>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	b212      	sxth	r2, r2
 80021de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021e0:	809a      	strh	r2, [r3, #4]

	printf("\nCalibration complete. Offsets: X=%d, Y=%d, Z=%d\r\n", offset->x,
 80021e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021e8:	4619      	mov	r1, r3
			offset->y, offset->z);
 80021ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	printf("\nCalibration complete. Offsets: X=%d, Y=%d, Z=%d\r\n", offset->x,
 80021f0:	461a      	mov	r2, r3
			offset->y, offset->z);
 80021f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	printf("\nCalibration complete. Offsets: X=%d, Y=%d, Z=%d\r\n", offset->x,
 80021f8:	4806      	ldr	r0, [pc, #24]	@ (8002214 <gyro_calculate_offset+0x180>)
 80021fa:	f00c f8bf 	bl	800e37c <iprintf>
}
 80021fe:	bf00      	nop
 8002200:	3760      	adds	r7, #96	@ 0x60
 8002202:	46bd      	mov	sp, r7
 8002204:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002208:	0801063c 	.word	0x0801063c
 800220c:	51eb851f 	.word	0x51eb851f
 8002210:	08010658 	.word	0x08010658
 8002214:	0801065c 	.word	0x0801065c

08002218 <gyro_compensate_and_scale>:

void gyro_compensate_and_scale(Gyro_Int_Data *gyro_data, Gyro_Int_Data *offset, Gyro_Int_Data *gyro_calibrated_dat) {
 8002218:	b480      	push	{r7}
 800221a:	b087      	sub	sp, #28
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]

	// uwzględenienie kalibracji
	gyro_data->x -= offset->x;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f9b3 3000 	ldrsh.w	r3, [r3]
 800222a:	b29a      	uxth	r2, r3
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002232:	b29b      	uxth	r3, r3
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	b29b      	uxth	r3, r3
 8002238:	b21a      	sxth	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	801a      	strh	r2, [r3, #0]
	gyro_data->y -= offset->y;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002244:	b29a      	uxth	r2, r3
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800224c:	b29b      	uxth	r3, r3
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	b29b      	uxth	r3, r3
 8002252:	b21a      	sxth	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	805a      	strh	r2, [r3, #2]
	gyro_data->z -= offset->z;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800225e:	b29a      	uxth	r2, r3
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002266:	b29b      	uxth	r3, r3
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	b29b      	uxth	r3, r3
 800226c:	b21a      	sxth	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	809a      	strh	r2, [r3, #4]

	float scale = 1.0f;
 8002272:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002276:	617b      	str	r3, [r7, #20]

	if (SENSITIVITY == 0x30)
		scale = 2000.0f / 32768.0f;
 8002278:	4b1e      	ldr	r3, [pc, #120]	@ (80022f4 <gyro_compensate_and_scale+0xdc>)
 800227a:	617b      	str	r3, [r7, #20]

	if (SENSITIVITY == 0x00)
		scale = 250.0f / 32768.0f;

	// Konwersja do dps (dla skali 2000dps)
	gyro_calibrated_dat->x = gyro_data->x * scale;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002282:	ee07 3a90 	vmov	s15, r3
 8002286:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800228a:	edd7 7a05 	vldr	s15, [r7, #20]
 800228e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002292:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002296:	ee17 3a90 	vmov	r3, s15
 800229a:	b21a      	sxth	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	801a      	strh	r2, [r3, #0]
	gyro_calibrated_dat->y = gyro_data->y * scale;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80022a6:	ee07 3a90 	vmov	s15, r3
 80022aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80022b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022ba:	ee17 3a90 	vmov	r3, s15
 80022be:	b21a      	sxth	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	805a      	strh	r2, [r3, #2]
	gyro_calibrated_dat->z = gyro_data->z * scale;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80022ca:	ee07 3a90 	vmov	s15, r3
 80022ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80022d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022de:	ee17 3a90 	vmov	r3, s15
 80022e2:	b21a      	sxth	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	809a      	strh	r2, [r3, #4]

	//printf("X: %d dps, Y: %d dps, Z: %d dps\r\n", gyro_calibrated_dat->x, gyro_calibrated_dat->y, gyro_calibrated_dat->z);
}
 80022e8:	bf00      	nop
 80022ea:	371c      	adds	r7, #28
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	3d7a0000 	.word	0x3d7a0000

080022f8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80022fc:	4b1b      	ldr	r3, [pc, #108]	@ (800236c <MX_I2C3_Init+0x74>)
 80022fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002370 <MX_I2C3_Init+0x78>)
 8002300:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002302:	4b1a      	ldr	r3, [pc, #104]	@ (800236c <MX_I2C3_Init+0x74>)
 8002304:	4a1b      	ldr	r2, [pc, #108]	@ (8002374 <MX_I2C3_Init+0x7c>)
 8002306:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002308:	4b18      	ldr	r3, [pc, #96]	@ (800236c <MX_I2C3_Init+0x74>)
 800230a:	2200      	movs	r2, #0
 800230c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800230e:	4b17      	ldr	r3, [pc, #92]	@ (800236c <MX_I2C3_Init+0x74>)
 8002310:	2200      	movs	r2, #0
 8002312:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002314:	4b15      	ldr	r3, [pc, #84]	@ (800236c <MX_I2C3_Init+0x74>)
 8002316:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800231a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800231c:	4b13      	ldr	r3, [pc, #76]	@ (800236c <MX_I2C3_Init+0x74>)
 800231e:	2200      	movs	r2, #0
 8002320:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002322:	4b12      	ldr	r3, [pc, #72]	@ (800236c <MX_I2C3_Init+0x74>)
 8002324:	2200      	movs	r2, #0
 8002326:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002328:	4b10      	ldr	r3, [pc, #64]	@ (800236c <MX_I2C3_Init+0x74>)
 800232a:	2200      	movs	r2, #0
 800232c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800232e:	4b0f      	ldr	r3, [pc, #60]	@ (800236c <MX_I2C3_Init+0x74>)
 8002330:	2200      	movs	r2, #0
 8002332:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002334:	480d      	ldr	r0, [pc, #52]	@ (800236c <MX_I2C3_Init+0x74>)
 8002336:	f006 f8ef 	bl	8008518 <HAL_I2C_Init>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002340:	f002 fb3c 	bl	80049bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002344:	2100      	movs	r1, #0
 8002346:	4809      	ldr	r0, [pc, #36]	@ (800236c <MX_I2C3_Init+0x74>)
 8002348:	f006 fa2a 	bl	80087a0 <HAL_I2CEx_ConfigAnalogFilter>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8002352:	f002 fb33 	bl	80049bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002356:	2100      	movs	r1, #0
 8002358:	4804      	ldr	r0, [pc, #16]	@ (800236c <MX_I2C3_Init+0x74>)
 800235a:	f006 fa5d 	bl	8008818 <HAL_I2CEx_ConfigDigitalFilter>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002364:	f002 fb2a 	bl	80049bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002368:	bf00      	nop
 800236a:	bd80      	pop	{r7, pc}
 800236c:	200002a4 	.word	0x200002a4
 8002370:	40005c00 	.word	0x40005c00
 8002374:	000186a0 	.word	0x000186a0

08002378 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08a      	sub	sp, #40	@ 0x28
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002380:	f107 0314 	add.w	r3, r7, #20
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a29      	ldr	r2, [pc, #164]	@ (800243c <HAL_I2C_MspInit+0xc4>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d14b      	bne.n	8002432 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	613b      	str	r3, [r7, #16]
 800239e:	4b28      	ldr	r3, [pc, #160]	@ (8002440 <HAL_I2C_MspInit+0xc8>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	4a27      	ldr	r2, [pc, #156]	@ (8002440 <HAL_I2C_MspInit+0xc8>)
 80023a4:	f043 0304 	orr.w	r3, r3, #4
 80023a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023aa:	4b25      	ldr	r3, [pc, #148]	@ (8002440 <HAL_I2C_MspInit+0xc8>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	613b      	str	r3, [r7, #16]
 80023b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	4b21      	ldr	r3, [pc, #132]	@ (8002440 <HAL_I2C_MspInit+0xc8>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023be:	4a20      	ldr	r2, [pc, #128]	@ (8002440 <HAL_I2C_MspInit+0xc8>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002440 <HAL_I2C_MspInit+0xc8>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80023d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023d8:	2312      	movs	r3, #18
 80023da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023dc:	2301      	movs	r3, #1
 80023de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e0:	2300      	movs	r3, #0
 80023e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80023e4:	2304      	movs	r3, #4
 80023e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80023e8:	f107 0314 	add.w	r3, r7, #20
 80023ec:	4619      	mov	r1, r3
 80023ee:	4815      	ldr	r0, [pc, #84]	@ (8002444 <HAL_I2C_MspInit+0xcc>)
 80023f0:	f004 f8f4 	bl	80065dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80023f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023fa:	2312      	movs	r3, #18
 80023fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023fe:	2301      	movs	r3, #1
 8002400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002402:	2300      	movs	r3, #0
 8002404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002406:	2304      	movs	r3, #4
 8002408:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800240a:	f107 0314 	add.w	r3, r7, #20
 800240e:	4619      	mov	r1, r3
 8002410:	480d      	ldr	r0, [pc, #52]	@ (8002448 <HAL_I2C_MspInit+0xd0>)
 8002412:	f004 f8e3 	bl	80065dc <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	4b09      	ldr	r3, [pc, #36]	@ (8002440 <HAL_I2C_MspInit+0xc8>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	4a08      	ldr	r2, [pc, #32]	@ (8002440 <HAL_I2C_MspInit+0xc8>)
 8002420:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002424:	6413      	str	r3, [r2, #64]	@ 0x40
 8002426:	4b06      	ldr	r3, [pc, #24]	@ (8002440 <HAL_I2C_MspInit+0xc8>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800242e:	60bb      	str	r3, [r7, #8]
 8002430:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002432:	bf00      	nop
 8002434:	3728      	adds	r7, #40	@ 0x28
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40005c00 	.word	0x40005c00
 8002440:	40023800 	.word	0x40023800
 8002444:	40020800 	.word	0x40020800
 8002448:	40020000 	.word	0x40020000

0800244c <lcd_cmd>:
		CMD(COLMOD), 0x05, // chosen 16-bit, R5, G6, B5
		CMD(MAC), 0x48, //in documentation this means BGR but it turned out to be RGB, also it set (0,0) to up left corner
		CMD(POS_GAMMA_COR), 0x1F, 0x1A, 0x18, 0x0A, 0x0F, 0x06, 0x45, 0x87, 0x32, 0x0A, 0x07, 0x02, 0x07, 0x05, 0x00,
		CMD(NEG_GAMMA_COR), 0x00, 0x25, 0x27, 0x05, 0x10, 0x09, 0x3A, 0x56, 0x4C, 0x05, 0x0D, 0x0C, 0x2E, 0x2F, 0x0F,
};
static void lcd_cmd(uint8_t cmd){
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	71fb      	strb	r3, [r7, #7]

	if (!spi5_acquire()) return;  // SPI jest zajęte, zwróć
 8002456:	f002 fab7 	bl	80049c8 <spi5_acquire>
 800245a:	4603      	mov	r3, r0
 800245c:	f083 0301 	eor.w	r3, r3, #1
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d119      	bne.n	800249a <lcd_cmd+0x4e>

	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_RESET); //teraz komendy
 8002466:	2200      	movs	r2, #0
 8002468:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800246c:	480d      	ldr	r0, [pc, #52]	@ (80024a4 <lcd_cmd+0x58>)
 800246e:	f004 fa79 	bl	8006964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 8002472:	2200      	movs	r2, #0
 8002474:	2104      	movs	r1, #4
 8002476:	480c      	ldr	r0, [pc, #48]	@ (80024a8 <lcd_cmd+0x5c>)
 8002478:	f004 fa74 	bl	8006964 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &cmd, 1, HAL_MAX_DELAY);
 800247c:	1df9      	adds	r1, r7, #7
 800247e:	f04f 33ff 	mov.w	r3, #4294967295
 8002482:	2201      	movs	r2, #1
 8002484:	4809      	ldr	r0, [pc, #36]	@ (80024ac <lcd_cmd+0x60>)
 8002486:	f007 fcb6 	bl	8009df6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_SET);
 800248a:	2201      	movs	r2, #1
 800248c:	2104      	movs	r1, #4
 800248e:	4806      	ldr	r0, [pc, #24]	@ (80024a8 <lcd_cmd+0x5c>)
 8002490:	f004 fa68 	bl	8006964 <HAL_GPIO_WritePin>

	spi5_release();
 8002494:	f002 faac 	bl	80049f0 <spi5_release>
 8002498:	e000      	b.n	800249c <lcd_cmd+0x50>
	if (!spi5_acquire()) return;  // SPI jest zajęte, zwróć
 800249a:	bf00      	nop

}
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40020c00 	.word	0x40020c00
 80024a8:	40020800 	.word	0x40020800
 80024ac:	200263b8 	.word	0x200263b8

080024b0 <lcd_data>:
static void lcd_data(uint8_t data){
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_SET); //teraz dane
 80024ba:	2201      	movs	r2, #1
 80024bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80024c0:	480b      	ldr	r0, [pc, #44]	@ (80024f0 <lcd_data+0x40>)
 80024c2:	f004 fa4f 	bl	8006964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 80024c6:	2200      	movs	r2, #0
 80024c8:	2104      	movs	r1, #4
 80024ca:	480a      	ldr	r0, [pc, #40]	@ (80024f4 <lcd_data+0x44>)
 80024cc:	f004 fa4a 	bl	8006964 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &data, 1, HAL_MAX_DELAY);
 80024d0:	1df9      	adds	r1, r7, #7
 80024d2:	f04f 33ff 	mov.w	r3, #4294967295
 80024d6:	2201      	movs	r2, #1
 80024d8:	4807      	ldr	r0, [pc, #28]	@ (80024f8 <lcd_data+0x48>)
 80024da:	f007 fc8c 	bl	8009df6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_SET);
 80024de:	2201      	movs	r2, #1
 80024e0:	2104      	movs	r1, #4
 80024e2:	4804      	ldr	r0, [pc, #16]	@ (80024f4 <lcd_data+0x44>)
 80024e4:	f004 fa3e 	bl	8006964 <HAL_GPIO_WritePin>
}
 80024e8:	bf00      	nop
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40020c00 	.word	0x40020c00
 80024f4:	40020800 	.word	0x40020800
 80024f8:	200263b8 	.word	0x200263b8

080024fc <lcd_data16>:
static void lcd_data16(uint16_t value){
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 8002506:	88fb      	ldrh	r3, [r7, #6]
 8002508:	0a1b      	lsrs	r3, r3, #8
 800250a:	b29b      	uxth	r3, r3
 800250c:	b2db      	uxtb	r3, r3
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff ffce 	bl	80024b0 <lcd_data>
	lcd_data(value);
 8002514:	88fb      	ldrh	r3, [r7, #6]
 8002516:	b2db      	uxtb	r3, r3
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff ffc9 	bl	80024b0 <lcd_data>
}
 800251e:	bf00      	nop
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <lcd_send>:
static void lcd_send(uint16_t value){
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	4603      	mov	r3, r0
 800252e:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 8002530:	88fb      	ldrh	r3, [r7, #6]
 8002532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002536:	2b00      	cmp	r3, #0
 8002538:	d005      	beq.n	8002546 <lcd_send+0x20>
		lcd_cmd(value);
 800253a:	88fb      	ldrh	r3, [r7, #6]
 800253c:	b2db      	uxtb	r3, r3
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff ff84 	bl	800244c <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 8002544:	e004      	b.n	8002550 <lcd_send+0x2a>
		lcd_data(value);
 8002546:	88fb      	ldrh	r3, [r7, #6]
 8002548:	b2db      	uxtb	r3, r3
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff ffb0 	bl	80024b0 <lcd_data>
}
 8002550:	bf00      	nop
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <lcd_init>:
void lcd_init(void){
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
  chunk_size = (LCD_HEIGHT * LCD_WIDTH) / how_many_chunks;
 800255e:	4b23      	ldr	r3, [pc, #140]	@ (80025ec <lcd_init+0x94>)
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8002568:	fb93 f3f2 	sdiv	r3, r3, r2
 800256c:	b29a      	uxth	r2, r3
 800256e:	4b20      	ldr	r3, [pc, #128]	@ (80025f0 <lcd_init+0x98>)
 8002570:	801a      	strh	r2, [r3, #0]
  y_per_chunk = LCD_HEIGHT / how_many_chunks;
 8002572:	4b1e      	ldr	r3, [pc, #120]	@ (80025ec <lcd_init+0x94>)
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	461a      	mov	r2, r3
 8002578:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800257c:	fb93 f3f2 	sdiv	r3, r3, r2
 8002580:	b29a      	uxth	r2, r3
 8002582:	4b1c      	ldr	r3, [pc, #112]	@ (80025f4 <lcd_init+0x9c>)
 8002584:	801a      	strh	r2, [r3, #0]

  int i;
  HAL_GPIO_WritePin(RDX_GPIO_Port, RDX_Pin, GPIO_PIN_RESET);
 8002586:	2200      	movs	r2, #0
 8002588:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800258c:	481a      	ldr	r0, [pc, #104]	@ (80025f8 <lcd_init+0xa0>)
 800258e:	f004 f9e9 	bl	8006964 <HAL_GPIO_WritePin>
  HAL_Delay(100); // w nocie 10 mikro sec
 8002592:	2064      	movs	r0, #100	@ 0x64
 8002594:	f002 fe9e 	bl	80052d4 <HAL_Delay>
  HAL_GPIO_WritePin(RDX_GPIO_Port, RDX_Pin, GPIO_PIN_SET);
 8002598:	2201      	movs	r2, #1
 800259a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800259e:	4816      	ldr	r0, [pc, #88]	@ (80025f8 <lcd_init+0xa0>)
 80025a0:	f004 f9e0 	bl	8006964 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80025a4:	2064      	movs	r0, #100	@ 0x64
 80025a6:	f002 fe95 	bl	80052d4 <HAL_Delay>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 80025aa:	2300      	movs	r3, #0
 80025ac:	607b      	str	r3, [r7, #4]
 80025ae:	e009      	b.n	80025c4 <lcd_init+0x6c>
    lcd_send(init_table[i]);
 80025b0:	4a12      	ldr	r2, [pc, #72]	@ (80025fc <lcd_init+0xa4>)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff ffb4 	bl	8002526 <lcd_send>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3301      	adds	r3, #1
 80025c2:	607b      	str	r3, [r7, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b35      	cmp	r3, #53	@ 0x35
 80025c8:	d9f2      	bls.n	80025b0 <lcd_init+0x58>
  }
  HAL_Delay(200);
 80025ca:	20c8      	movs	r0, #200	@ 0xc8
 80025cc:	f002 fe82 	bl	80052d4 <HAL_Delay>
  lcd_cmd(SLEEP_OUT);
 80025d0:	2011      	movs	r0, #17
 80025d2:	f7ff ff3b 	bl	800244c <lcd_cmd>
  HAL_Delay(120);
 80025d6:	2078      	movs	r0, #120	@ 0x78
 80025d8:	f002 fe7c 	bl	80052d4 <HAL_Delay>
  lcd_cmd(DISPLAY_ON);
 80025dc:	2029      	movs	r0, #41	@ 0x29
 80025de:	f7ff ff35 	bl	800244c <lcd_cmd>
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20000002 	.word	0x20000002
 80025f0:	20025afa 	.word	0x20025afa
 80025f4:	20025afc 	.word	0x20025afc
 80025f8:	40020c00 	.word	0x40020c00
 80025fc:	08010be8 	.word	0x08010be8

08002600 <lcd_set_window>:

static void lcd_set_window(int x, int y, int width, int height){
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
 800260c:	603b      	str	r3, [r7, #0]
	lcd_cmd(COL_ADR_SET);
 800260e:	202a      	movs	r0, #42	@ 0x2a
 8002610:	f7ff ff1c 	bl	800244c <lcd_cmd>
	lcd_data16(x);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	b29b      	uxth	r3, r3
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff ff6f 	bl	80024fc <lcd_data16>
	lcd_data16(x+width-1);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	b29a      	uxth	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	b29b      	uxth	r3, r3
 8002626:	4413      	add	r3, r2
 8002628:	b29b      	uxth	r3, r3
 800262a:	3b01      	subs	r3, #1
 800262c:	b29b      	uxth	r3, r3
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff ff64 	bl	80024fc <lcd_data16>
	lcd_cmd(PAGE_ADR_SET);
 8002634:	202b      	movs	r0, #43	@ 0x2b
 8002636:	f7ff ff09 	bl	800244c <lcd_cmd>
	lcd_data16(y);
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	b29b      	uxth	r3, r3
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff ff5c 	bl	80024fc <lcd_data16>
	lcd_data16(y+height-1);
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	b29a      	uxth	r2, r3
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	b29b      	uxth	r3, r3
 800264c:	4413      	add	r3, r2
 800264e:	b29b      	uxth	r3, r3
 8002650:	3b01      	subs	r3, #1
 8002652:	b29b      	uxth	r3, r3
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff ff51 	bl	80024fc <lcd_data16>
}
 800265a:	bf00      	nop
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <lcd_set_rectangle>:
void lcd_set_rectangle(uint16_t idx,int x,int y,int width,int height,uint16_t color){
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	607a      	str	r2, [r7, #4]
 800266e:	603b      	str	r3, [r7, #0]
 8002670:	4603      	mov	r3, r0
 8002672:	81fb      	strh	r3, [r7, #14]
	rects[idx].x = x;
 8002674:	89fa      	ldrh	r2, [r7, #14]
 8002676:	491b      	ldr	r1, [pc, #108]	@ (80026e4 <lcd_set_rectangle+0x80>)
 8002678:	4613      	mov	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	601a      	str	r2, [r3, #0]
	rects[idx].y = y;
 8002686:	89fa      	ldrh	r2, [r7, #14]
 8002688:	4916      	ldr	r1, [pc, #88]	@ (80026e4 <lcd_set_rectangle+0x80>)
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	3304      	adds	r3, #4
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	601a      	str	r2, [r3, #0]
	rects[idx].width = width;
 800269a:	89fa      	ldrh	r2, [r7, #14]
 800269c:	4911      	ldr	r1, [pc, #68]	@ (80026e4 <lcd_set_rectangle+0x80>)
 800269e:	4613      	mov	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	440b      	add	r3, r1
 80026a8:	3308      	adds	r3, #8
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	601a      	str	r2, [r3, #0]
	rects[idx].height = height;
 80026ae:	89fa      	ldrh	r2, [r7, #14]
 80026b0:	490c      	ldr	r1, [pc, #48]	@ (80026e4 <lcd_set_rectangle+0x80>)
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	440b      	add	r3, r1
 80026bc:	330c      	adds	r3, #12
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	601a      	str	r2, [r3, #0]
	rects[idx].color = color;
 80026c2:	89fa      	ldrh	r2, [r7, #14]
 80026c4:	4907      	ldr	r1, [pc, #28]	@ (80026e4 <lcd_set_rectangle+0x80>)
 80026c6:	4613      	mov	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	440b      	add	r3, r1
 80026d0:	3310      	adds	r3, #16
 80026d2:	8bba      	ldrh	r2, [r7, #28]
 80026d4:	801a      	strh	r2, [r3, #0]
}
 80026d6:	bf00      	nop
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	20025b00 	.word	0x20025b00

080026e8 <lcd_set_char>:
void lcd_set_char(uint16_t idx, int x, int y, char znak, uint16_t color){
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	607a      	str	r2, [r7, #4]
 80026f2:	461a      	mov	r2, r3
 80026f4:	4603      	mov	r3, r0
 80026f6:	81fb      	strh	r3, [r7, #14]
 80026f8:	4613      	mov	r3, r2
 80026fa:	737b      	strb	r3, [r7, #13]
	text[idx].x = x;
 80026fc:	89fa      	ldrh	r2, [r7, #14]
 80026fe:	4916      	ldr	r1, [pc, #88]	@ (8002758 <lcd_set_char+0x70>)
 8002700:	4613      	mov	r3, r2
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	4413      	add	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	601a      	str	r2, [r3, #0]
	text[idx].y = y;
 800270e:	89fa      	ldrh	r2, [r7, #14]
 8002710:	4911      	ldr	r1, [pc, #68]	@ (8002758 <lcd_set_char+0x70>)
 8002712:	4613      	mov	r3, r2
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	4413      	add	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	3304      	adds	r3, #4
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	601a      	str	r2, [r3, #0]
	text[idx].c = znak;
 8002722:	89fa      	ldrh	r2, [r7, #14]
 8002724:	490c      	ldr	r1, [pc, #48]	@ (8002758 <lcd_set_char+0x70>)
 8002726:	4613      	mov	r3, r2
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	4413      	add	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	3308      	adds	r3, #8
 8002732:	7b7a      	ldrb	r2, [r7, #13]
 8002734:	701a      	strb	r2, [r3, #0]
	text[idx].color = color;
 8002736:	89fa      	ldrh	r2, [r7, #14]
 8002738:	4907      	ldr	r1, [pc, #28]	@ (8002758 <lcd_set_char+0x70>)
 800273a:	4613      	mov	r3, r2
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	4413      	add	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	440b      	add	r3, r1
 8002744:	330a      	adds	r3, #10
 8002746:	8b3a      	ldrh	r2, [r7, #24]
 8002748:	801a      	strh	r2, [r3, #0]
}
 800274a:	bf00      	nop
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	20025bd8 	.word	0x20025bd8

0800275c <lcd_set_circle>:

void lcd_set_circle(int x,int y,int radius,uint16_t color){
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
 8002768:	807b      	strh	r3, [r7, #2]
	player.x = x;
 800276a:	4a09      	ldr	r2, [pc, #36]	@ (8002790 <lcd_set_circle+0x34>)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6013      	str	r3, [r2, #0]
	player.y = y;
 8002770:	4a07      	ldr	r2, [pc, #28]	@ (8002790 <lcd_set_circle+0x34>)
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	6053      	str	r3, [r2, #4]
	player.r = radius;
 8002776:	4a06      	ldr	r2, [pc, #24]	@ (8002790 <lcd_set_circle+0x34>)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6093      	str	r3, [r2, #8]
	player.color = color;
 800277c:	4a04      	ldr	r2, [pc, #16]	@ (8002790 <lcd_set_circle+0x34>)
 800277e:	887b      	ldrh	r3, [r7, #2]
 8002780:	8193      	strh	r3, [r2, #12]
}
 8002782:	bf00      	nop
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	20025bc8 	.word	0x20025bc8

08002794 <send_circle>:
static void send_circle(uint16_t circle_color){
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	80fb      	strh	r3, [r7, #6]
	lcd_set_window(player.x - player.r, player.y-player.r, 2*player.r,2*player.r);
 800279e:	4b36      	ldr	r3, [pc, #216]	@ (8002878 <send_circle+0xe4>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	4b35      	ldr	r3, [pc, #212]	@ (8002878 <send_circle+0xe4>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	1ad0      	subs	r0, r2, r3
 80027a8:	4b33      	ldr	r3, [pc, #204]	@ (8002878 <send_circle+0xe4>)
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	4b32      	ldr	r3, [pc, #200]	@ (8002878 <send_circle+0xe4>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	1ad1      	subs	r1, r2, r3
 80027b2:	4b31      	ldr	r3, [pc, #196]	@ (8002878 <send_circle+0xe4>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	005a      	lsls	r2, r3, #1
 80027b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002878 <send_circle+0xe4>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	f7ff ff1f 	bl	8002600 <lcd_set_window>
	lcd_cmd(MEM_WRITE);
 80027c2:	202c      	movs	r0, #44	@ 0x2c
 80027c4:	f7ff fe42 	bl	800244c <lcd_cmd>
	if(!spi5_acquire())return;
 80027c8:	f002 f8fe 	bl	80049c8 <spi5_acquire>
 80027cc:	4603      	mov	r3, r0
 80027ce:	f083 0301 	eor.w	r3, r3, #1
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d14b      	bne.n	8002870 <send_circle+0xdc>
	for(int y=player.y-player.r;y<player.y+player.r;y++){
 80027d8:	4b27      	ldr	r3, [pc, #156]	@ (8002878 <send_circle+0xe4>)
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	4b26      	ldr	r3, [pc, #152]	@ (8002878 <send_circle+0xe4>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	e039      	b.n	800285a <send_circle+0xc6>
		for(int x=player.x-player.r;x<player.x+player.r;x++){
 80027e6:	4b24      	ldr	r3, [pc, #144]	@ (8002878 <send_circle+0xe4>)
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	4b23      	ldr	r3, [pc, #140]	@ (8002878 <send_circle+0xe4>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	e027      	b.n	8002844 <send_circle+0xb0>
			if( ( (x-player.x)*(x-player.x)+(y-player.y)*(y-player.y)) <= (player.r*player.r)){
 80027f4:	4b20      	ldr	r3, [pc, #128]	@ (8002878 <send_circle+0xe4>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	4a1e      	ldr	r2, [pc, #120]	@ (8002878 <send_circle+0xe4>)
 80027fe:	6812      	ldr	r2, [r2, #0]
 8002800:	68b9      	ldr	r1, [r7, #8]
 8002802:	1a8a      	subs	r2, r1, r2
 8002804:	fb03 f202 	mul.w	r2, r3, r2
 8002808:	4b1b      	ldr	r3, [pc, #108]	@ (8002878 <send_circle+0xe4>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	68f9      	ldr	r1, [r7, #12]
 800280e:	1acb      	subs	r3, r1, r3
 8002810:	4919      	ldr	r1, [pc, #100]	@ (8002878 <send_circle+0xe4>)
 8002812:	6849      	ldr	r1, [r1, #4]
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	1a41      	subs	r1, r0, r1
 8002818:	fb01 f303 	mul.w	r3, r1, r3
 800281c:	441a      	add	r2, r3
 800281e:	4b16      	ldr	r3, [pc, #88]	@ (8002878 <send_circle+0xe4>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	4915      	ldr	r1, [pc, #84]	@ (8002878 <send_circle+0xe4>)
 8002824:	6889      	ldr	r1, [r1, #8]
 8002826:	fb01 f303 	mul.w	r3, r1, r3
 800282a:	429a      	cmp	r2, r3
 800282c:	dc04      	bgt.n	8002838 <send_circle+0xa4>
				lcd_data16(circle_color);
 800282e:	88fb      	ldrh	r3, [r7, #6]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff fe63 	bl	80024fc <lcd_data16>
 8002836:	e002      	b.n	800283e <send_circle+0xaa>
			} else{
				lcd_data16(BACKGROUND); // zle
 8002838:	201f      	movs	r0, #31
 800283a:	f7ff fe5f 	bl	80024fc <lcd_data16>
		for(int x=player.x-player.r;x<player.x+player.r;x++){
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	3301      	adds	r3, #1
 8002842:	60bb      	str	r3, [r7, #8]
 8002844:	4b0c      	ldr	r3, [pc, #48]	@ (8002878 <send_circle+0xe4>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4b0b      	ldr	r3, [pc, #44]	@ (8002878 <send_circle+0xe4>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	4413      	add	r3, r2
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	429a      	cmp	r2, r3
 8002852:	dbcf      	blt.n	80027f4 <send_circle+0x60>
	for(int y=player.y-player.r;y<player.y+player.r;y++){
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	3301      	adds	r3, #1
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	4b07      	ldr	r3, [pc, #28]	@ (8002878 <send_circle+0xe4>)
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	4b06      	ldr	r3, [pc, #24]	@ (8002878 <send_circle+0xe4>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	4413      	add	r3, r2
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	429a      	cmp	r2, r3
 8002868:	dbbd      	blt.n	80027e6 <send_circle+0x52>
			}
		}
	}
	spi5_release();
 800286a:	f002 f8c1 	bl	80049f0 <spi5_release>
 800286e:	e000      	b.n	8002872 <send_circle+0xde>
	if(!spi5_acquire())return;
 8002870:	bf00      	nop
}
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20025bc8 	.word	0x20025bc8

0800287c <clear_former_horizontal>:
//
//	HAL_SPI_Transmit_DMA(&hspi5, (uint8_t*)circle_buffer, 2*4*player.r*player.r);
//
//	spi5_release();
//}
static void clear_former_horizontal(Circle former){
 800287c:	b590      	push	{r4, r7, lr}
 800287e:	b08b      	sub	sp, #44	@ 0x2c
 8002880:	af00      	add	r7, sp, #0
 8002882:	463c      	mov	r4, r7
 8002884:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int min_y,max_y;

	if(former.y-former.r < player.y - player.r){
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	1ad2      	subs	r2, r2, r3
 800288e:	4b29      	ldr	r3, [pc, #164]	@ (8002934 <clear_former_horizontal+0xb8>)
 8002890:	6859      	ldr	r1, [r3, #4]
 8002892:	4b28      	ldr	r3, [pc, #160]	@ (8002934 <clear_former_horizontal+0xb8>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	1acb      	subs	r3, r1, r3
 8002898:	429a      	cmp	r2, r3
 800289a:	da0a      	bge.n	80028b2 <clear_former_horizontal+0x36>
		min_y = former.y-former.r;
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	627b      	str	r3, [r7, #36]	@ 0x24
		max_y = player.y-player.r;
 80028a4:	4b23      	ldr	r3, [pc, #140]	@ (8002934 <clear_former_horizontal+0xb8>)
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	4b22      	ldr	r3, [pc, #136]	@ (8002934 <clear_former_horizontal+0xb8>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	623b      	str	r3, [r7, #32]
 80028b0:	e009      	b.n	80028c6 <clear_former_horizontal+0x4a>
	} else{
		min_y = player.y+player.r;
 80028b2:	4b20      	ldr	r3, [pc, #128]	@ (8002934 <clear_former_horizontal+0xb8>)
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002934 <clear_former_horizontal+0xb8>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	4413      	add	r3, r2
 80028bc:	627b      	str	r3, [r7, #36]	@ 0x24
		max_y = former.y+former.r;
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	4413      	add	r3, r2
 80028c4:	623b      	str	r3, [r7, #32]
	}

	int height = max_y-min_y;
 80028c6:	6a3a      	ldr	r2, [r7, #32]
 80028c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	61fb      	str	r3, [r7, #28]
	int d_wh = 2*former.r;
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	617b      	str	r3, [r7, #20]
	if(height>d_wh)height=d_wh;
 80028d4:	69fa      	ldr	r2, [r7, #28]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	429a      	cmp	r2, r3
 80028da:	dd01      	ble.n	80028e0 <clear_former_horizontal+0x64>
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	61fb      	str	r3, [r7, #28]

	lcd_set_window(former.x-former.r, min_y, d_wh, height);
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	1ad0      	subs	r0, r2, r3
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028ec:	f7ff fe88 	bl	8002600 <lcd_set_window>
	lcd_cmd(MEM_WRITE);
 80028f0:	202c      	movs	r0, #44	@ 0x2c
 80028f2:	f7ff fdab 	bl	800244c <lcd_cmd>
	if(!spi5_acquire()){return;}
 80028f6:	f002 f867 	bl	80049c8 <spi5_acquire>
 80028fa:	4603      	mov	r3, r0
 80028fc:	f083 0301 	eor.w	r3, r3, #1
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d112      	bne.n	800292c <clear_former_horizontal+0xb0>
	for(int i=0;i<d_wh*height;i++){
 8002906:	2300      	movs	r3, #0
 8002908:	61bb      	str	r3, [r7, #24]
 800290a:	e005      	b.n	8002918 <clear_former_horizontal+0x9c>
		lcd_data16(BACKGROUND);
 800290c:	201f      	movs	r0, #31
 800290e:	f7ff fdf5 	bl	80024fc <lcd_data16>
	for(int i=0;i<d_wh*height;i++){
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	3301      	adds	r3, #1
 8002916:	61bb      	str	r3, [r7, #24]
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	69fa      	ldr	r2, [r7, #28]
 800291c:	fb02 f303 	mul.w	r3, r2, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	429a      	cmp	r2, r3
 8002924:	dbf2      	blt.n	800290c <clear_former_horizontal+0x90>
	}
	spi5_release();
 8002926:	f002 f863 	bl	80049f0 <spi5_release>
 800292a:	e000      	b.n	800292e <clear_former_horizontal+0xb2>
	if(!spi5_acquire()){return;}
 800292c:	bf00      	nop
}
 800292e:	372c      	adds	r7, #44	@ 0x2c
 8002930:	46bd      	mov	sp, r7
 8002932:	bd90      	pop	{r4, r7, pc}
 8002934:	20025bc8 	.word	0x20025bc8

08002938 <clear_former_vertical>:
static void clear_former_vertical(Circle former){
 8002938:	b590      	push	{r4, r7, lr}
 800293a:	b08b      	sub	sp, #44	@ 0x2c
 800293c:	af00      	add	r7, sp, #0
 800293e:	463c      	mov	r4, r7
 8002940:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int min_x,max_x;

	if(former.x-former.r < player.x - player.r){
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	1ad2      	subs	r2, r2, r3
 800294a:	4b2a      	ldr	r3, [pc, #168]	@ (80029f4 <clear_former_vertical+0xbc>)
 800294c:	6819      	ldr	r1, [r3, #0]
 800294e:	4b29      	ldr	r3, [pc, #164]	@ (80029f4 <clear_former_vertical+0xbc>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	1acb      	subs	r3, r1, r3
 8002954:	429a      	cmp	r2, r3
 8002956:	da0a      	bge.n	800296e <clear_former_vertical+0x36>
		min_x = former.x-former.r;
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	627b      	str	r3, [r7, #36]	@ 0x24
		max_x = player.x-player.r;
 8002960:	4b24      	ldr	r3, [pc, #144]	@ (80029f4 <clear_former_vertical+0xbc>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4b23      	ldr	r3, [pc, #140]	@ (80029f4 <clear_former_vertical+0xbc>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	623b      	str	r3, [r7, #32]
 800296c:	e009      	b.n	8002982 <clear_former_vertical+0x4a>
	} else{
		min_x = player.x+player.r;
 800296e:	4b21      	ldr	r3, [pc, #132]	@ (80029f4 <clear_former_vertical+0xbc>)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	4b20      	ldr	r3, [pc, #128]	@ (80029f4 <clear_former_vertical+0xbc>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	4413      	add	r3, r2
 8002978:	627b      	str	r3, [r7, #36]	@ 0x24
		max_x = former.x+former.r;
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	4413      	add	r3, r2
 8002980:	623b      	str	r3, [r7, #32]
	}

	int width = max_x-min_x;
 8002982:	6a3a      	ldr	r2, [r7, #32]
 8002984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	61fb      	str	r3, [r7, #28]
	int d_wh = 2*former.r;
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	617b      	str	r3, [r7, #20]
	if(width>d_wh)width=2*d_wh;
 8002990:	69fa      	ldr	r2, [r7, #28]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	429a      	cmp	r2, r3
 8002996:	dd02      	ble.n	800299e <clear_former_vertical+0x66>
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	61fb      	str	r3, [r7, #28]

	lcd_set_window(min_x, former.y-former.r, width, d_wh);
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	1ad1      	subs	r1, r2, r3
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	69fa      	ldr	r2, [r7, #28]
 80029a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80029aa:	f7ff fe29 	bl	8002600 <lcd_set_window>
	lcd_cmd(MEM_WRITE);
 80029ae:	202c      	movs	r0, #44	@ 0x2c
 80029b0:	f7ff fd4c 	bl	800244c <lcd_cmd>
	if(!spi5_acquire()){return;}
 80029b4:	f002 f808 	bl	80049c8 <spi5_acquire>
 80029b8:	4603      	mov	r3, r0
 80029ba:	f083 0301 	eor.w	r3, r3, #1
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d112      	bne.n	80029ea <clear_former_vertical+0xb2>
	for(int i=0;i<d_wh*width;i++){
 80029c4:	2300      	movs	r3, #0
 80029c6:	61bb      	str	r3, [r7, #24]
 80029c8:	e005      	b.n	80029d6 <clear_former_vertical+0x9e>
		lcd_data16(BACKGROUND);
 80029ca:	201f      	movs	r0, #31
 80029cc:	f7ff fd96 	bl	80024fc <lcd_data16>
	for(int i=0;i<d_wh*width;i++){
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	3301      	adds	r3, #1
 80029d4:	61bb      	str	r3, [r7, #24]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	69fa      	ldr	r2, [r7, #28]
 80029da:	fb02 f303 	mul.w	r3, r2, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	dbf2      	blt.n	80029ca <clear_former_vertical+0x92>
	}
	spi5_release();
 80029e4:	f002 f804 	bl	80049f0 <spi5_release>
 80029e8:	e000      	b.n	80029ec <clear_former_vertical+0xb4>
	if(!spi5_acquire()){return;}
 80029ea:	bf00      	nop
}
 80029ec:	372c      	adds	r7, #44	@ 0x2c
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd90      	pop	{r4, r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20025bc8 	.word	0x20025bc8

080029f8 <clear_former_circle>:
static void clear_former_circle(Circle former){
 80029f8:	b590      	push	{r4, r7, lr}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	463c      	mov	r4, r7
 8002a00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	clear_former_horizontal(former);
 8002a04:	463b      	mov	r3, r7
 8002a06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a08:	f7ff ff38 	bl	800287c <clear_former_horizontal>
	clear_former_vertical(former);
 8002a0c:	463b      	mov	r3, r7
 8002a0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a10:	f7ff ff92 	bl	8002938 <clear_former_vertical>
}
 8002a14:	bf00      	nop
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd90      	pop	{r4, r7, pc}

08002a1c <lcd_delta_circle>:
void lcd_delta_circle(int dx,int dy,int dradius){
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
	player.x += dx;
 8002a28:	4b2c      	ldr	r3, [pc, #176]	@ (8002adc <lcd_delta_circle+0xc0>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4413      	add	r3, r2
 8002a30:	4a2a      	ldr	r2, [pc, #168]	@ (8002adc <lcd_delta_circle+0xc0>)
 8002a32:	6013      	str	r3, [r2, #0]
	player.y += dy;
 8002a34:	4b29      	ldr	r3, [pc, #164]	@ (8002adc <lcd_delta_circle+0xc0>)
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	4a27      	ldr	r2, [pc, #156]	@ (8002adc <lcd_delta_circle+0xc0>)
 8002a3e:	6053      	str	r3, [r2, #4]
	player.r += dradius;
 8002a40:	4b26      	ldr	r3, [pc, #152]	@ (8002adc <lcd_delta_circle+0xc0>)
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4413      	add	r3, r2
 8002a48:	4a24      	ldr	r2, [pc, #144]	@ (8002adc <lcd_delta_circle+0xc0>)
 8002a4a:	6093      	str	r3, [r2, #8]



	if(player.r<0 || player.r > LCD_WIDTH/6 || player.r>LCD_HEIGHT/6)player.r = 5;
 8002a4c:	4b23      	ldr	r3, [pc, #140]	@ (8002adc <lcd_delta_circle+0xc0>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	db07      	blt.n	8002a64 <lcd_delta_circle+0x48>
 8002a54:	4b21      	ldr	r3, [pc, #132]	@ (8002adc <lcd_delta_circle+0xc0>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	2b28      	cmp	r3, #40	@ 0x28
 8002a5a:	dc03      	bgt.n	8002a64 <lcd_delta_circle+0x48>
 8002a5c:	4b1f      	ldr	r3, [pc, #124]	@ (8002adc <lcd_delta_circle+0xc0>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	2b35      	cmp	r3, #53	@ 0x35
 8002a62:	dd02      	ble.n	8002a6a <lcd_delta_circle+0x4e>
 8002a64:	4b1d      	ldr	r3, [pc, #116]	@ (8002adc <lcd_delta_circle+0xc0>)
 8002a66:	2205      	movs	r2, #5
 8002a68:	609a      	str	r2, [r3, #8]

	if (player.x-player.r < 0) player.x = player.r;
 8002a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8002adc <lcd_delta_circle+0xc0>)
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8002adc <lcd_delta_circle+0xc0>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	da04      	bge.n	8002a82 <lcd_delta_circle+0x66>
 8002a78:	4b18      	ldr	r3, [pc, #96]	@ (8002adc <lcd_delta_circle+0xc0>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	4a17      	ldr	r2, [pc, #92]	@ (8002adc <lcd_delta_circle+0xc0>)
 8002a7e:	6013      	str	r3, [r2, #0]
 8002a80:	e00c      	b.n	8002a9c <lcd_delta_circle+0x80>
	else if (player.x+player.r > LCD_WIDTH) player.x = LCD_WIDTH-player.r;
 8002a82:	4b16      	ldr	r3, [pc, #88]	@ (8002adc <lcd_delta_circle+0xc0>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	4b15      	ldr	r3, [pc, #84]	@ (8002adc <lcd_delta_circle+0xc0>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	2bf0      	cmp	r3, #240	@ 0xf0
 8002a8e:	dd05      	ble.n	8002a9c <lcd_delta_circle+0x80>
 8002a90:	4b12      	ldr	r3, [pc, #72]	@ (8002adc <lcd_delta_circle+0xc0>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8002a98:	4a10      	ldr	r2, [pc, #64]	@ (8002adc <lcd_delta_circle+0xc0>)
 8002a9a:	6013      	str	r3, [r2, #0]
	if (player.y-player.r < 0) player.y = player.r;
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002adc <lcd_delta_circle+0xc0>)
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8002adc <lcd_delta_circle+0xc0>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	da04      	bge.n	8002ab4 <lcd_delta_circle+0x98>
 8002aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8002adc <lcd_delta_circle+0xc0>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	4a0b      	ldr	r2, [pc, #44]	@ (8002adc <lcd_delta_circle+0xc0>)
 8002ab0:	6053      	str	r3, [r2, #4]
	else if (player.y+player.r > LCD_HEIGHT) player.y = LCD_HEIGHT-player.r;
}
 8002ab2:	e00d      	b.n	8002ad0 <lcd_delta_circle+0xb4>
	else if (player.y+player.r > LCD_HEIGHT) player.y = LCD_HEIGHT-player.r;
 8002ab4:	4b09      	ldr	r3, [pc, #36]	@ (8002adc <lcd_delta_circle+0xc0>)
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	4b08      	ldr	r3, [pc, #32]	@ (8002adc <lcd_delta_circle+0xc0>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	4413      	add	r3, r2
 8002abe:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002ac2:	dd05      	ble.n	8002ad0 <lcd_delta_circle+0xb4>
 8002ac4:	4b05      	ldr	r3, [pc, #20]	@ (8002adc <lcd_delta_circle+0xc0>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8002acc:	4a03      	ldr	r2, [pc, #12]	@ (8002adc <lcd_delta_circle+0xc0>)
 8002ace:	6053      	str	r3, [r2, #4]
}
 8002ad0:	bf00      	nop
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	20025bc8 	.word	0x20025bc8

08002ae0 <lcd_update_circle>:
void lcd_update_circle(int dx,int dy,int dradius){
 8002ae0:	b590      	push	{r4, r7, lr}
 8002ae2:	b089      	sub	sp, #36	@ 0x24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
	Circle former = player;
 8002aec:	4b0f      	ldr	r3, [pc, #60]	@ (8002b2c <lcd_update_circle+0x4c>)
 8002aee:	f107 0410 	add.w	r4, r7, #16
 8002af2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002af4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	lcd_delta_circle(dx, dy, dradius);
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	68b9      	ldr	r1, [r7, #8]
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f7ff ff8d 	bl	8002a1c <lcd_delta_circle>
	if(dx!=0 ||  dy!=0)clear_former_circle(former);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d102      	bne.n	8002b0e <lcd_update_circle+0x2e>
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d004      	beq.n	8002b18 <lcd_update_circle+0x38>
 8002b0e:	f107 0310 	add.w	r3, r7, #16
 8002b12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b14:	f7ff ff70 	bl	80029f8 <clear_former_circle>
	send_circle(player.color);
 8002b18:	4b04      	ldr	r3, [pc, #16]	@ (8002b2c <lcd_update_circle+0x4c>)
 8002b1a:	899b      	ldrh	r3, [r3, #12]
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff fe38 	bl	8002794 <send_circle>
	//	send_circle_buffer();
}
 8002b24:	bf00      	nop
 8002b26:	3724      	adds	r7, #36	@ 0x24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd90      	pop	{r4, r7, pc}
 8002b2c:	20025bc8 	.word	0x20025bc8

08002b30 <lcd_put_pixel>:
void lcd_put_pixel(int x, int y, uint16_t color){
 8002b30:	b480      	push	{r7}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	80fb      	strh	r3, [r7, #6]
	screen_buffer[ (LCD_WIDTH*y) + x] = __REV16(color); //to make send most significant bit first
 8002b3e:	88fb      	ldrh	r3, [r7, #6]
 8002b40:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	ba5b      	rev16	r3, r3
 8002b46:	613b      	str	r3, [r7, #16]
  return result;
 8002b48:	6939      	ldr	r1, [r7, #16]
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	1a9b      	subs	r3, r3, r2
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	461a      	mov	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	4413      	add	r3, r2
 8002b5a:	b289      	uxth	r1, r1
 8002b5c:	4a04      	ldr	r2, [pc, #16]	@ (8002b70 <lcd_put_pixel+0x40>)
 8002b5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8002b62:	bf00      	nop
 8002b64:	371c      	adds	r7, #28
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	200002f8 	.word	0x200002f8

08002b74 <lcd_put_rect_to_buffer>:
static void lcd_put_rect_to_buffer(Rectangle rect){
 8002b74:	b084      	sub	sp, #16
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b082      	sub	sp, #8
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	f107 0c10 	add.w	ip, r7, #16
 8002b80:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for(int y=rect.y;y<rect.y+rect.height;y++){
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	607b      	str	r3, [r7, #4]
 8002b88:	e021      	b.n	8002bce <lcd_put_rect_to_buffer+0x5a>
		for(int x=rect.x;x<rect.x+rect.width;x++){
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	603b      	str	r3, [r7, #0]
 8002b8e:	e015      	b.n	8002bbc <lcd_put_rect_to_buffer+0x48>
			if(x>=0 && x<LCD_WIDTH && y>=0 && y<LCD_HEIGHT){
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	db0f      	blt.n	8002bb6 <lcd_put_rect_to_buffer+0x42>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2bef      	cmp	r3, #239	@ 0xef
 8002b9a:	dc0c      	bgt.n	8002bb6 <lcd_put_rect_to_buffer+0x42>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	db09      	blt.n	8002bb6 <lcd_put_rect_to_buffer+0x42>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002ba8:	da05      	bge.n	8002bb6 <lcd_put_rect_to_buffer+0x42>
				lcd_put_pixel(x, y, rect.color);
 8002baa:	8c3b      	ldrh	r3, [r7, #32]
 8002bac:	461a      	mov	r2, r3
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	6838      	ldr	r0, [r7, #0]
 8002bb2:	f7ff ffbd 	bl	8002b30 <lcd_put_pixel>
		for(int x=rect.x;x<rect.x+rect.width;x++){
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	603b      	str	r3, [r7, #0]
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	dbe3      	blt.n	8002b90 <lcd_put_rect_to_buffer+0x1c>
	for(int y=rect.y;y<rect.y+rect.height;y++){
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	607b      	str	r3, [r7, #4]
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	dbd7      	blt.n	8002b8a <lcd_put_rect_to_buffer+0x16>
			}
		}
	}
}
 8002bda:	bf00      	nop
 8002bdc:	bf00      	nop
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002be6:	b004      	add	sp, #16
 8002be8:	4770      	bx	lr

08002bea <lcd_put_circ_to_buffer>:
static void lcd_put_circ_to_buffer(Circle circle){
 8002bea:	b590      	push	{r4, r7, lr}
 8002bec:	b087      	sub	sp, #28
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	463c      	mov	r4, r7
 8002bf2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for(int y=circle.y-circle.r;y<circle.y+circle.r;y++){
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	e03a      	b.n	8002c76 <lcd_put_circ_to_buffer+0x8c>
		for(int x=circle.x-circle.r;x<circle.x+circle.r;x++){
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	613b      	str	r3, [r7, #16]
 8002c08:	e02c      	b.n	8002c64 <lcd_put_circ_to_buffer+0x7a>
			if(x>=0 && x<LCD_WIDTH && y>=0 && y<LCD_HEIGHT){
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	db26      	blt.n	8002c5e <lcd_put_circ_to_buffer+0x74>
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	2bef      	cmp	r3, #239	@ 0xef
 8002c14:	dc23      	bgt.n	8002c5e <lcd_put_circ_to_buffer+0x74>
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	db20      	blt.n	8002c5e <lcd_put_circ_to_buffer+0x74>
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002c22:	da1c      	bge.n	8002c5e <lcd_put_circ_to_buffer+0x74>
				if( ( (x-circle.x)*(x-circle.x)+(y-circle.y)*(y-circle.y)) <= (circle.r*circle.r)){
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	6939      	ldr	r1, [r7, #16]
 8002c2e:	1a8a      	subs	r2, r1, r2
 8002c30:	fb03 f202 	mul.w	r2, r3, r2
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6979      	ldr	r1, [r7, #20]
 8002c38:	1acb      	subs	r3, r1, r3
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	6978      	ldr	r0, [r7, #20]
 8002c3e:	1a41      	subs	r1, r0, r1
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	441a      	add	r2, r3
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	68b9      	ldr	r1, [r7, #8]
 8002c4a:	fb01 f303 	mul.w	r3, r1, r3
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	dc05      	bgt.n	8002c5e <lcd_put_circ_to_buffer+0x74>
					lcd_put_pixel(x, y, circle.color);
 8002c52:	89bb      	ldrh	r3, [r7, #12]
 8002c54:	461a      	mov	r2, r3
 8002c56:	6979      	ldr	r1, [r7, #20]
 8002c58:	6938      	ldr	r0, [r7, #16]
 8002c5a:	f7ff ff69 	bl	8002b30 <lcd_put_pixel>
		for(int x=circle.x-circle.r;x<circle.x+circle.r;x++){
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	3301      	adds	r3, #1
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	4413      	add	r3, r2
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	dbcc      	blt.n	8002c0a <lcd_put_circ_to_buffer+0x20>
	for(int y=circle.y-circle.r;y<circle.y+circle.r;y++){
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	3301      	adds	r3, #1
 8002c74:	617b      	str	r3, [r7, #20]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	dbbe      	blt.n	8002c00 <lcd_put_circ_to_buffer+0x16>
				}
			}
		}
	}
}
 8002c82:	bf00      	nop
 8002c84:	bf00      	nop
 8002c86:	371c      	adds	r7, #28
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd90      	pop	{r4, r7, pc}

08002c8c <get_char_bitmap>:
const uint16_t* get_char_bitmap(char c) {
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') {
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	2b2f      	cmp	r3, #47	@ 0x2f
 8002c9a:	d90c      	bls.n	8002cb6 <get_char_bitmap+0x2a>
 8002c9c:	79fb      	ldrb	r3, [r7, #7]
 8002c9e:	2b39      	cmp	r3, #57	@ 0x39
 8002ca0:	d809      	bhi.n	8002cb6 <get_char_bitmap+0x2a>
        return font_10x14[c - '0'];  // indeksy 0-9
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8002ca8:	4613      	mov	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	1a9b      	subs	r3, r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4a0f      	ldr	r2, [pc, #60]	@ (8002cf0 <get_char_bitmap+0x64>)
 8002cb2:	4413      	add	r3, r2
 8002cb4:	e015      	b.n	8002ce2 <get_char_bitmap+0x56>
    }
    else if (c >= 'A' && c <= 'Z') {
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	2b40      	cmp	r3, #64	@ 0x40
 8002cba:	d90c      	bls.n	8002cd6 <get_char_bitmap+0x4a>
 8002cbc:	79fb      	ldrb	r3, [r7, #7]
 8002cbe:	2b5a      	cmp	r3, #90	@ 0x5a
 8002cc0:	d809      	bhi.n	8002cd6 <get_char_bitmap+0x4a>
        return font_10x14[10 + (c - 'A')];  // indeksy 10-35 (po cyfrach)
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
 8002cc4:	f1a3 0237 	sub.w	r2, r3, #55	@ 0x37
 8002cc8:	4613      	mov	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	1a9b      	subs	r3, r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4a07      	ldr	r2, [pc, #28]	@ (8002cf0 <get_char_bitmap+0x64>)
 8002cd2:	4413      	add	r3, r2
 8002cd4:	e005      	b.n	8002ce2 <get_char_bitmap+0x56>
    } else if (c=='.'){
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	2b2e      	cmp	r3, #46	@ 0x2e
 8002cda:	d101      	bne.n	8002ce0 <get_char_bitmap+0x54>
    	return font_10x14[10 + ('Z' - 'A') + 1];
 8002cdc:	4b05      	ldr	r3, [pc, #20]	@ (8002cf4 <get_char_bitmap+0x68>)
 8002cde:	e000      	b.n	8002ce2 <get_char_bitmap+0x56>
    }
    return NULL;  // znak nieobsługiwany
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	080107dc 	.word	0x080107dc
 8002cf4:	08010bcc 	.word	0x08010bcc

08002cf8 <lcd_put_char_to_buffer>:
void lcd_put_char_to_buffer(Buf_Char ch) {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08c      	sub	sp, #48	@ 0x30
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	1d3b      	adds	r3, r7, #4
 8002d00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    const uint16_t* bitmap = get_char_bitmap(ch.c);
 8002d04:	7b3b      	ldrb	r3, [r7, #12]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff ffc0 	bl	8002c8c <get_char_bitmap>
 8002d0c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (!bitmap) return;
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d048      	beq.n	8002da6 <lcd_put_char_to_buffer+0xae>

    for (int row = 0; row < 14; row++) {
 8002d14:	2300      	movs	r3, #0
 8002d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d18:	e041      	b.n	8002d9e <lcd_put_char_to_buffer+0xa6>
        for (int col = 0; col < 10; col++) {
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d1e:	e038      	b.n	8002d92 <lcd_put_char_to_buffer+0x9a>
            if (bitmap[row] & (1 << (9 - col))) {
 8002d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d26:	4413      	add	r3, r2
 8002d28:	881b      	ldrh	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d2e:	f1c3 0309 	rsb	r3, r3, #9
 8002d32:	fa42 f303 	asr.w	r3, r2, r3
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d026      	beq.n	8002d8c <lcd_put_char_to_buffer+0x94>
                int px = ch.x + col;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d42:	4413      	add	r3, r2
 8002d44:	623b      	str	r3, [r7, #32]
                int py = ch.y + row;
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d4a:	4413      	add	r3, r2
 8002d4c:	61fb      	str	r3, [r7, #28]
                if (px >= 0 && px < LCD_WIDTH && py >= 0 && py < LCD_HEIGHT) {
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	db1b      	blt.n	8002d8c <lcd_put_char_to_buffer+0x94>
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	2bef      	cmp	r3, #239	@ 0xef
 8002d58:	dc18      	bgt.n	8002d8c <lcd_put_char_to_buffer+0x94>
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	db15      	blt.n	8002d8c <lcd_put_char_to_buffer+0x94>
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002d66:	da11      	bge.n	8002d8c <lcd_put_char_to_buffer+0x94>
                    screen_buffer[py * LCD_WIDTH + px] = __REV16(ch.color);
 8002d68:	89fb      	ldrh	r3, [r7, #14]
 8002d6a:	61bb      	str	r3, [r7, #24]
  __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	ba5b      	rev16	r3, r3
 8002d70:	617b      	str	r3, [r7, #20]
  return result;
 8002d72:	6979      	ldr	r1, [r7, #20]
 8002d74:	69fa      	ldr	r2, [r7, #28]
 8002d76:	4613      	mov	r3, r2
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	1a9b      	subs	r3, r3, r2
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	461a      	mov	r2, r3
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	4413      	add	r3, r2
 8002d84:	b289      	uxth	r1, r1
 8002d86:	4a0a      	ldr	r2, [pc, #40]	@ (8002db0 <lcd_put_char_to_buffer+0xb8>)
 8002d88:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int col = 0; col < 10; col++) {
 8002d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d8e:	3301      	adds	r3, #1
 8002d90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d94:	2b09      	cmp	r3, #9
 8002d96:	ddc3      	ble.n	8002d20 <lcd_put_char_to_buffer+0x28>
    for (int row = 0; row < 14; row++) {
 8002d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002da0:	2b0d      	cmp	r3, #13
 8002da2:	ddba      	ble.n	8002d1a <lcd_put_char_to_buffer+0x22>
 8002da4:	e000      	b.n	8002da8 <lcd_put_char_to_buffer+0xb0>
    if (!bitmap) return;
 8002da6:	bf00      	nop
                }
            }
        }
    }
}
 8002da8:	3730      	adds	r7, #48	@ 0x30
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	200002f8 	.word	0x200002f8

08002db4 <put_text_to_buff>:
void put_text_to_buff(){
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
	for(int i=0;i<MAX_CHARS_ON_SCREEN;i++){
 8002dba:	2300      	movs	r3, #0
 8002dbc:	607b      	str	r3, [r7, #4]
 8002dbe:	e00d      	b.n	8002ddc <put_text_to_buff+0x28>
		lcd_put_char_to_buffer(text[i]);
 8002dc0:	490a      	ldr	r1, [pc, #40]	@ (8002dec <put_text_to_buff+0x38>)
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	4413      	add	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002dd2:	f7ff ff91 	bl	8002cf8 <lcd_put_char_to_buffer>
	for(int i=0;i<MAX_CHARS_ON_SCREEN;i++){
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	607b      	str	r3, [r7, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b95      	cmp	r3, #149	@ 0x95
 8002de0:	ddee      	ble.n	8002dc0 <put_text_to_buff+0xc>
	}
}
 8002de2:	bf00      	nop
 8002de4:	bf00      	nop
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	20025bd8 	.word	0x20025bd8

08002df0 <put_figures_to_buffer>:
static void put_figures_to_buffer(void){
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af02      	add	r7, sp, #8
	for(int i=0; i<LCD_WIDTH*LCD_HEIGHT;i++) {
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	e00d      	b.n	8002e18 <put_figures_to_buffer+0x28>
 8002dfc:	231f      	movs	r3, #31
 8002dfe:	607b      	str	r3, [r7, #4]
  __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	ba5b      	rev16	r3, r3
 8002e04:	603b      	str	r3, [r7, #0]
  return result;
 8002e06:	683b      	ldr	r3, [r7, #0]
		screen_buffer[i] = __REV16(BLUE);
 8002e08:	b299      	uxth	r1, r3
 8002e0a:	4a15      	ldr	r2, [pc, #84]	@ (8002e60 <put_figures_to_buffer+0x70>)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0; i<LCD_WIDTH*LCD_HEIGHT;i++) {
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	3301      	adds	r3, #1
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8002e1e:	dbed      	blt.n	8002dfc <put_figures_to_buffer+0xc>
	}

	for(int i=0;i<RECTS_AMOUNT;i++){
 8002e20:	2300      	movs	r3, #0
 8002e22:	60bb      	str	r3, [r7, #8]
 8002e24:	e00e      	b.n	8002e44 <put_figures_to_buffer+0x54>
		lcd_put_rect_to_buffer(rects[i]);
 8002e26:	490f      	ldr	r1, [pc, #60]	@ (8002e64 <put_figures_to_buffer+0x74>)
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	691a      	ldr	r2, [r3, #16]
 8002e36:	9200      	str	r2, [sp, #0]
 8002e38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e3a:	f7ff fe9b 	bl	8002b74 <lcd_put_rect_to_buffer>
	for(int i=0;i<RECTS_AMOUNT;i++){
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	3301      	adds	r3, #1
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2b09      	cmp	r3, #9
 8002e48:	dded      	ble.n	8002e26 <put_figures_to_buffer+0x36>
	}
	put_text_to_buff();
 8002e4a:	f7ff ffb3 	bl	8002db4 <put_text_to_buff>
	lcd_put_circ_to_buffer(player);
 8002e4e:	4b06      	ldr	r3, [pc, #24]	@ (8002e68 <put_figures_to_buffer+0x78>)
 8002e50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e52:	f7ff feca 	bl	8002bea <lcd_put_circ_to_buffer>
}
 8002e56:	bf00      	nop
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	200002f8 	.word	0x200002f8
 8002e64:	20025b00 	.word	0x20025b00
 8002e68:	20025bc8 	.word	0x20025bc8

08002e6c <lcd_update>:

void lcd_update(uint8_t only_text){
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	71fb      	strb	r3, [r7, #7]
	if(only_text==0)put_figures_to_buffer();
 8002e76:	79fb      	ldrb	r3, [r7, #7]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d102      	bne.n	8002e82 <lcd_update+0x16>
 8002e7c:	f7ff ffb8 	bl	8002df0 <put_figures_to_buffer>
 8002e80:	e001      	b.n	8002e86 <lcd_update+0x1a>
	else put_text_to_buff();
 8002e82:	f7ff ff97 	bl	8002db4 <put_text_to_buff>

	current_chunk = 0;
 8002e86:	4b22      	ldr	r3, [pc, #136]	@ (8002f10 <lcd_update+0xa4>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	801a      	strh	r2, [r3, #0]
	lcd_set_window(0, current_chunk*y_per_chunk, LCD_WIDTH, LCD_HEIGHT/how_many_chunks);
 8002e8c:	4b20      	ldr	r3, [pc, #128]	@ (8002f10 <lcd_update+0xa4>)
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	461a      	mov	r2, r3
 8002e92:	4b20      	ldr	r3, [pc, #128]	@ (8002f14 <lcd_update+0xa8>)
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	fb03 f102 	mul.w	r1, r3, r2
 8002e9a:	4b1f      	ldr	r3, [pc, #124]	@ (8002f18 <lcd_update+0xac>)
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002ea4:	fb93 f3f2 	sdiv	r3, r3, r2
 8002ea8:	22f0      	movs	r2, #240	@ 0xf0
 8002eaa:	2000      	movs	r0, #0
 8002eac:	f7ff fba8 	bl	8002600 <lcd_set_window>
	lcd_cmd(MEM_WRITE);
 8002eb0:	202c      	movs	r0, #44	@ 0x2c
 8002eb2:	f7ff facb 	bl	800244c <lcd_cmd>
	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_SET);
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002ebc:	4817      	ldr	r0, [pc, #92]	@ (8002f1c <lcd_update+0xb0>)
 8002ebe:	f003 fd51 	bl	8006964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2104      	movs	r1, #4
 8002ec6:	4816      	ldr	r0, [pc, #88]	@ (8002f20 <lcd_update+0xb4>)
 8002ec8:	f003 fd4c 	bl	8006964 <HAL_GPIO_WritePin>

	if (!spi5_acquire()) return;
 8002ecc:	f001 fd7c 	bl	80049c8 <spi5_acquire>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	f083 0301 	eor.w	r3, r3, #1
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d114      	bne.n	8002f06 <lcd_update+0x9a>

	HAL_SPI_Transmit_DMA(&hspi5, (uint8_t*)(screen_buffer + (current_chunk * chunk_size)), 2*chunk_size);
 8002edc:	4b0c      	ldr	r3, [pc, #48]	@ (8002f10 <lcd_update+0xa4>)
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4b10      	ldr	r3, [pc, #64]	@ (8002f24 <lcd_update+0xb8>)
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	fb02 f303 	mul.w	r3, r2, r3
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	4a0e      	ldr	r2, [pc, #56]	@ (8002f28 <lcd_update+0xbc>)
 8002eee:	1899      	adds	r1, r3, r2
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f24 <lcd_update+0xb8>)
 8002ef2:	881b      	ldrh	r3, [r3, #0]
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	461a      	mov	r2, r3
 8002efa:	480c      	ldr	r0, [pc, #48]	@ (8002f2c <lcd_update+0xc0>)
 8002efc:	f007 fb82 	bl	800a604 <HAL_SPI_Transmit_DMA>

	spi5_release();
 8002f00:	f001 fd76 	bl	80049f0 <spi5_release>
 8002f04:	e000      	b.n	8002f08 <lcd_update+0x9c>
	if (!spi5_acquire()) return;
 8002f06:	bf00      	nop
}
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20025af8 	.word	0x20025af8
 8002f14:	20025afc 	.word	0x20025afc
 8002f18:	20000002 	.word	0x20000002
 8002f1c:	40020c00 	.word	0x40020c00
 8002f20:	40020800 	.word	0x40020800
 8002f24:	20025afa 	.word	0x20025afa
 8002f28:	200002f8 	.word	0x200002f8
 8002f2c:	200263b8 	.word	0x200263b8

08002f30 <lcd_transfer_done>:
void lcd_transfer_done(void){
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_SET);
 8002f34:	2201      	movs	r2, #1
 8002f36:	2104      	movs	r1, #4
 8002f38:	4802      	ldr	r0, [pc, #8]	@ (8002f44 <lcd_transfer_done+0x14>)
 8002f3a:	f003 fd13 	bl	8006964 <HAL_GPIO_WritePin>
}
 8002f3e:	bf00      	nop
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40020800 	.word	0x40020800

08002f48 <send_next_chunk>:
bool lcd_is_busy(void){
	if (HAL_SPI_GetState(&hspi5) == HAL_SPI_STATE_BUSY) return true;
	else return false;
}
static void send_next_chunk(void){
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
	lcd_set_window(0, current_chunk*y_per_chunk, LCD_WIDTH, LCD_HEIGHT/how_many_chunks);
 8002f4c:	4b20      	ldr	r3, [pc, #128]	@ (8002fd0 <send_next_chunk+0x88>)
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	461a      	mov	r2, r3
 8002f52:	4b20      	ldr	r3, [pc, #128]	@ (8002fd4 <send_next_chunk+0x8c>)
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	fb03 f102 	mul.w	r1, r3, r2
 8002f5a:	4b1f      	ldr	r3, [pc, #124]	@ (8002fd8 <send_next_chunk+0x90>)
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002f64:	fb93 f3f2 	sdiv	r3, r3, r2
 8002f68:	22f0      	movs	r2, #240	@ 0xf0
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	f7ff fb48 	bl	8002600 <lcd_set_window>
	lcd_cmd(MEM_WRITE);
 8002f70:	202c      	movs	r0, #44	@ 0x2c
 8002f72:	f7ff fa6b 	bl	800244c <lcd_cmd>
	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_SET);
 8002f76:	2201      	movs	r2, #1
 8002f78:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002f7c:	4817      	ldr	r0, [pc, #92]	@ (8002fdc <send_next_chunk+0x94>)
 8002f7e:	f003 fcf1 	bl	8006964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 8002f82:	2200      	movs	r2, #0
 8002f84:	2104      	movs	r1, #4
 8002f86:	4816      	ldr	r0, [pc, #88]	@ (8002fe0 <send_next_chunk+0x98>)
 8002f88:	f003 fcec 	bl	8006964 <HAL_GPIO_WritePin>
	lcd_ready = false;
 8002f8c:	4b15      	ldr	r3, [pc, #84]	@ (8002fe4 <send_next_chunk+0x9c>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	701a      	strb	r2, [r3, #0]
	if (!spi5_acquire()) return;
 8002f92:	f001 fd19 	bl	80049c8 <spi5_acquire>
 8002f96:	4603      	mov	r3, r0
 8002f98:	f083 0301 	eor.w	r3, r3, #1
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d114      	bne.n	8002fcc <send_next_chunk+0x84>
	HAL_SPI_Transmit_DMA(&hspi5, (uint8_t*)(screen_buffer + (current_chunk * chunk_size)), 2*chunk_size);
 8002fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd0 <send_next_chunk+0x88>)
 8002fa4:	881b      	ldrh	r3, [r3, #0]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8002fe8 <send_next_chunk+0xa0>)
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	fb02 f303 	mul.w	r3, r2, r3
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	4a0e      	ldr	r2, [pc, #56]	@ (8002fec <send_next_chunk+0xa4>)
 8002fb4:	1899      	adds	r1, r3, r2
 8002fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe8 <send_next_chunk+0xa0>)
 8002fb8:	881b      	ldrh	r3, [r3, #0]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	480b      	ldr	r0, [pc, #44]	@ (8002ff0 <send_next_chunk+0xa8>)
 8002fc2:	f007 fb1f 	bl	800a604 <HAL_SPI_Transmit_DMA>

	spi5_release();
 8002fc6:	f001 fd13 	bl	80049f0 <spi5_release>
 8002fca:	e000      	b.n	8002fce <send_next_chunk+0x86>
	if (!spi5_acquire()) return;
 8002fcc:	bf00      	nop
}
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	20025af8 	.word	0x20025af8
 8002fd4:	20025afc 	.word	0x20025afc
 8002fd8:	20000002 	.word	0x20000002
 8002fdc:	40020c00 	.word	0x40020c00
 8002fe0:	40020800 	.word	0x40020800
 8002fe4:	20000004 	.word	0x20000004
 8002fe8:	20025afa 	.word	0x20025afa
 8002fec:	200002f8 	.word	0x200002f8
 8002ff0:	200263b8 	.word	0x200263b8

08002ff4 <go_for_next_chunk>:
void go_for_next_chunk(void){
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
	current_chunk++;
 8002ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8003024 <go_for_next_chunk+0x30>)
 8002ffa:	881b      	ldrh	r3, [r3, #0]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	4b08      	ldr	r3, [pc, #32]	@ (8003024 <go_for_next_chunk+0x30>)
 8003002:	801a      	strh	r2, [r3, #0]
	if (current_chunk < how_many_chunks) {
 8003004:	4b07      	ldr	r3, [pc, #28]	@ (8003024 <go_for_next_chunk+0x30>)
 8003006:	881a      	ldrh	r2, [r3, #0]
 8003008:	4b07      	ldr	r3, [pc, #28]	@ (8003028 <go_for_next_chunk+0x34>)
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	429a      	cmp	r2, r3
 800300e:	d202      	bcs.n	8003016 <go_for_next_chunk+0x22>
		send_next_chunk();
 8003010:	f7ff ff9a 	bl	8002f48 <send_next_chunk>
	}
	else {
		lcd_ready=true;
		lcd_transfer_done();
	}
}
 8003014:	e004      	b.n	8003020 <go_for_next_chunk+0x2c>
		lcd_ready=true;
 8003016:	4b05      	ldr	r3, [pc, #20]	@ (800302c <go_for_next_chunk+0x38>)
 8003018:	2201      	movs	r2, #1
 800301a:	701a      	strb	r2, [r3, #0]
		lcd_transfer_done();
 800301c:	f7ff ff88 	bl	8002f30 <lcd_transfer_done>
}
 8003020:	bf00      	nop
 8003022:	bd80      	pop	{r7, pc}
 8003024:	20025af8 	.word	0x20025af8
 8003028:	20000002 	.word	0x20000002
 800302c:	20000004 	.word	0x20000004

08003030 <lcd_change_ball_color>:
void lcd_change_ball_color(uint16_t speed_x, uint16_t speed_y){
 8003030:	b480      	push	{r7}
 8003032:	b089      	sub	sp, #36	@ 0x24
 8003034:	af00      	add	r7, sp, #0
 8003036:	4603      	mov	r3, r0
 8003038:	460a      	mov	r2, r1
 800303a:	80fb      	strh	r3, [r7, #6]
 800303c:	4613      	mov	r3, r2
 800303e:	80bb      	strh	r3, [r7, #4]
	uint32_t speed_sq = speed_x * speed_x + speed_y * speed_y;
 8003040:	88fb      	ldrh	r3, [r7, #6]
 8003042:	88fa      	ldrh	r2, [r7, #6]
 8003044:	fb03 f202 	mul.w	r2, r3, r2
 8003048:	88bb      	ldrh	r3, [r7, #4]
 800304a:	88b9      	ldrh	r1, [r7, #4]
 800304c:	fb01 f303 	mul.w	r3, r1, r3
 8003050:	4413      	add	r3, r2
 8003052:	61fb      	str	r3, [r7, #28]
	uint32_t sq_max_speed = max_speed*max_speed;
 8003054:	4b27      	ldr	r3, [pc, #156]	@ (80030f4 <lcd_change_ball_color+0xc4>)
 8003056:	f9b3 3000 	ldrsh.w	r3, [r3]
 800305a:	461a      	mov	r2, r3
 800305c:	4b25      	ldr	r3, [pc, #148]	@ (80030f4 <lcd_change_ball_color+0xc4>)
 800305e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003062:	fb02 f303 	mul.w	r3, r2, r3
 8003066:	61bb      	str	r3, [r7, #24]
	if (speed_sq > sq_max_speed) {
 8003068:	69fa      	ldr	r2, [r7, #28]
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	429a      	cmp	r2, r3
 800306e:	d901      	bls.n	8003074 <lcd_change_ball_color+0x44>
		speed_sq = sq_max_speed;
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	61fb      	str	r3, [r7, #28]
	}
	float ratio = (float)speed_sq/sq_max_speed;
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	ee07 3a90 	vmov	s15, r3
 800307a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	ee07 3a90 	vmov	s15, r3
 8003084:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003088:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800308c:	edc7 7a05 	vstr	s15, [r7, #20]

	// Kolor startowy: zielony (R=0, G=63, B=0)
	// Kolor docelowy: biały (R=31, G=63, B=31)

	uint8_t red   = (uint8_t)(31 * ratio);
 8003090:	edd7 7a05 	vldr	s15, [r7, #20]
 8003094:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 8003098:	ee67 7a87 	vmul.f32	s15, s15, s14
 800309c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030a0:	edc7 7a00 	vstr	s15, [r7]
 80030a4:	783b      	ldrb	r3, [r7, #0]
 80030a6:	74fb      	strb	r3, [r7, #19]
	uint8_t green = 63;
 80030a8:	233f      	movs	r3, #63	@ 0x3f
 80030aa:	74bb      	strb	r3, [r7, #18]
	uint8_t blue  = (uint8_t)(31 * ratio);
 80030ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80030b0:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 80030b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030bc:	edc7 7a00 	vstr	s15, [r7]
 80030c0:	783b      	ldrb	r3, [r7, #0]
 80030c2:	747b      	strb	r3, [r7, #17]

	uint16_t color = (red << 11) | (green << 5) | blue;
 80030c4:	7cfb      	ldrb	r3, [r7, #19]
 80030c6:	b21b      	sxth	r3, r3
 80030c8:	02db      	lsls	r3, r3, #11
 80030ca:	b21a      	sxth	r2, r3
 80030cc:	7cbb      	ldrb	r3, [r7, #18]
 80030ce:	b21b      	sxth	r3, r3
 80030d0:	015b      	lsls	r3, r3, #5
 80030d2:	b21b      	sxth	r3, r3
 80030d4:	4313      	orrs	r3, r2
 80030d6:	b21a      	sxth	r2, r3
 80030d8:	7c7b      	ldrb	r3, [r7, #17]
 80030da:	b21b      	sxth	r3, r3
 80030dc:	4313      	orrs	r3, r2
 80030de:	b21b      	sxth	r3, r3
 80030e0:	81fb      	strh	r3, [r7, #14]
	player.color = color;
 80030e2:	4a05      	ldr	r2, [pc, #20]	@ (80030f8 <lcd_change_ball_color+0xc8>)
 80030e4:	89fb      	ldrh	r3, [r7, #14]
 80030e6:	8193      	strh	r3, [r2, #12]
}
 80030e8:	bf00      	nop
 80030ea:	3724      	adds	r7, #36	@ 0x24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	20000000 	.word	0x20000000
 80030f8:	20025bc8 	.word	0x20025bc8

080030fc <lcd_clear_screen>:
void lcd_clear_screen(){
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
	for (int y = 0; y < LCD_HEIGHT; y++) {
 8003102:	2300      	movs	r3, #0
 8003104:	607b      	str	r3, [r7, #4]
 8003106:	e010      	b.n	800312a <lcd_clear_screen+0x2e>
		for (int x = 0; x < LCD_WIDTH; x++) {
 8003108:	2300      	movs	r3, #0
 800310a:	603b      	str	r3, [r7, #0]
 800310c:	e007      	b.n	800311e <lcd_clear_screen+0x22>
			lcd_put_pixel(x, y, BLUE);
 800310e:	221f      	movs	r2, #31
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	6838      	ldr	r0, [r7, #0]
 8003114:	f7ff fd0c 	bl	8002b30 <lcd_put_pixel>
		for (int x = 0; x < LCD_WIDTH; x++) {
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	3301      	adds	r3, #1
 800311c:	603b      	str	r3, [r7, #0]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2bef      	cmp	r3, #239	@ 0xef
 8003122:	ddf4      	ble.n	800310e <lcd_clear_screen+0x12>
	for (int y = 0; y < LCD_HEIGHT; y++) {
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3301      	adds	r3, #1
 8003128:	607b      	str	r3, [r7, #4]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003130:	dbea      	blt.n	8003108 <lcd_clear_screen+0xc>
		}
	}
}
 8003132:	bf00      	nop
 8003134:	bf00      	nop
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <lcd_clear_text>:
void lcd_clear_text(){
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
	for(int i=0;i<MAX_CHARS_ON_SCREEN;i++){
 8003142:	2300      	movs	r3, #0
 8003144:	607b      	str	r3, [r7, #4]
 8003146:	e00c      	b.n	8003162 <lcd_clear_text+0x26>
		text[i].c='\n';
 8003148:	490b      	ldr	r1, [pc, #44]	@ (8003178 <lcd_clear_text+0x3c>)
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	4613      	mov	r3, r2
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	4413      	add	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	440b      	add	r3, r1
 8003156:	3308      	adds	r3, #8
 8003158:	220a      	movs	r2, #10
 800315a:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<MAX_CHARS_ON_SCREEN;i++){
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3301      	adds	r3, #1
 8003160:	607b      	str	r3, [r7, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b95      	cmp	r3, #149	@ 0x95
 8003166:	ddef      	ble.n	8003148 <lcd_clear_text+0xc>
	}
}
 8003168:	bf00      	nop
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	20025bd8 	.word	0x20025bd8

0800317c <lcd_clear_circle>:
	    rects[i].width = 0;
	    rects[i].height = 0;
	    rects[i].color = 0;
	}
}
void lcd_clear_circle() {
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
    lcd_set_window(player.x - player.r, player.y - player.r, 2 * player.r, 2 * player.r);
 8003182:	4b25      	ldr	r3, [pc, #148]	@ (8003218 <lcd_clear_circle+0x9c>)
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	4b24      	ldr	r3, [pc, #144]	@ (8003218 <lcd_clear_circle+0x9c>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	1ad0      	subs	r0, r2, r3
 800318c:	4b22      	ldr	r3, [pc, #136]	@ (8003218 <lcd_clear_circle+0x9c>)
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	4b21      	ldr	r3, [pc, #132]	@ (8003218 <lcd_clear_circle+0x9c>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	1ad1      	subs	r1, r2, r3
 8003196:	4b20      	ldr	r3, [pc, #128]	@ (8003218 <lcd_clear_circle+0x9c>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	005a      	lsls	r2, r3, #1
 800319c:	4b1e      	ldr	r3, [pc, #120]	@ (8003218 <lcd_clear_circle+0x9c>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	f7ff fa2d 	bl	8002600 <lcd_set_window>
    lcd_cmd(MEM_WRITE);
 80031a6:	202c      	movs	r0, #44	@ 0x2c
 80031a8:	f7ff f950 	bl	800244c <lcd_cmd>

    if (!spi5_acquire()) return;
 80031ac:	f001 fc0c 	bl	80049c8 <spi5_acquire>
 80031b0:	4603      	mov	r3, r0
 80031b2:	f083 0301 	eor.w	r3, r3, #1
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d129      	bne.n	8003210 <lcd_clear_circle+0x94>

    for (int y = player.y - player.r; y < player.y + player.r; y++) {
 80031bc:	4b16      	ldr	r3, [pc, #88]	@ (8003218 <lcd_clear_circle+0x9c>)
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	4b15      	ldr	r3, [pc, #84]	@ (8003218 <lcd_clear_circle+0x9c>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	607b      	str	r3, [r7, #4]
 80031c8:	e017      	b.n	80031fa <lcd_clear_circle+0x7e>
        for (int x = player.x - player.r; x < player.x + player.r; x++) {
 80031ca:	4b13      	ldr	r3, [pc, #76]	@ (8003218 <lcd_clear_circle+0x9c>)
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	4b12      	ldr	r3, [pc, #72]	@ (8003218 <lcd_clear_circle+0x9c>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	603b      	str	r3, [r7, #0]
 80031d6:	e005      	b.n	80031e4 <lcd_clear_circle+0x68>
                lcd_data16(BACKGROUND);
 80031d8:	201f      	movs	r0, #31
 80031da:	f7ff f98f 	bl	80024fc <lcd_data16>
        for (int x = player.x - player.r; x < player.x + player.r; x++) {
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	3301      	adds	r3, #1
 80031e2:	603b      	str	r3, [r7, #0]
 80031e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003218 <lcd_clear_circle+0x9c>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003218 <lcd_clear_circle+0x9c>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	4413      	add	r3, r2
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	dbf1      	blt.n	80031d8 <lcd_clear_circle+0x5c>
    for (int y = player.y - player.r; y < player.y + player.r; y++) {
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3301      	adds	r3, #1
 80031f8:	607b      	str	r3, [r7, #4]
 80031fa:	4b07      	ldr	r3, [pc, #28]	@ (8003218 <lcd_clear_circle+0x9c>)
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	4b06      	ldr	r3, [pc, #24]	@ (8003218 <lcd_clear_circle+0x9c>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	4413      	add	r3, r2
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	429a      	cmp	r2, r3
 8003208:	dbdf      	blt.n	80031ca <lcd_clear_circle+0x4e>
        }
    }
    spi5_release();
 800320a:	f001 fbf1 	bl	80049f0 <spi5_release>
 800320e:	e000      	b.n	8003212 <lcd_clear_circle+0x96>
    if (!spi5_acquire()) return;
 8003210:	bf00      	nop
}
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	20025bc8 	.word	0x20025bc8

0800321c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b08e      	sub	sp, #56	@ 0x38
 8003220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8003222:	1d3b      	adds	r3, r7, #4
 8003224:	2234      	movs	r2, #52	@ 0x34
 8003226:	2100      	movs	r1, #0
 8003228:	4618      	mov	r0, r3
 800322a:	f00b fa25 	bl	800e678 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800322e:	4b39      	ldr	r3, [pc, #228]	@ (8003314 <MX_LTDC_Init+0xf8>)
 8003230:	4a39      	ldr	r2, [pc, #228]	@ (8003318 <MX_LTDC_Init+0xfc>)
 8003232:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003234:	4b37      	ldr	r3, [pc, #220]	@ (8003314 <MX_LTDC_Init+0xf8>)
 8003236:	2200      	movs	r2, #0
 8003238:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800323a:	4b36      	ldr	r3, [pc, #216]	@ (8003314 <MX_LTDC_Init+0xf8>)
 800323c:	2200      	movs	r2, #0
 800323e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003240:	4b34      	ldr	r3, [pc, #208]	@ (8003314 <MX_LTDC_Init+0xf8>)
 8003242:	2200      	movs	r2, #0
 8003244:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003246:	4b33      	ldr	r3, [pc, #204]	@ (8003314 <MX_LTDC_Init+0xf8>)
 8003248:	2200      	movs	r2, #0
 800324a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 800324c:	4b31      	ldr	r3, [pc, #196]	@ (8003314 <MX_LTDC_Init+0xf8>)
 800324e:	2209      	movs	r2, #9
 8003250:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8003252:	4b30      	ldr	r3, [pc, #192]	@ (8003314 <MX_LTDC_Init+0xf8>)
 8003254:	2201      	movs	r2, #1
 8003256:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8003258:	4b2e      	ldr	r3, [pc, #184]	@ (8003314 <MX_LTDC_Init+0xf8>)
 800325a:	221d      	movs	r2, #29
 800325c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800325e:	4b2d      	ldr	r3, [pc, #180]	@ (8003314 <MX_LTDC_Init+0xf8>)
 8003260:	2203      	movs	r2, #3
 8003262:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8003264:	4b2b      	ldr	r3, [pc, #172]	@ (8003314 <MX_LTDC_Init+0xf8>)
 8003266:	f240 120d 	movw	r2, #269	@ 0x10d
 800326a:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 800326c:	4b29      	ldr	r3, [pc, #164]	@ (8003314 <MX_LTDC_Init+0xf8>)
 800326e:	f240 1243 	movw	r2, #323	@ 0x143
 8003272:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 8003274:	4b27      	ldr	r3, [pc, #156]	@ (8003314 <MX_LTDC_Init+0xf8>)
 8003276:	f240 1217 	movw	r2, #279	@ 0x117
 800327a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 800327c:	4b25      	ldr	r3, [pc, #148]	@ (8003314 <MX_LTDC_Init+0xf8>)
 800327e:	f240 1247 	movw	r2, #327	@ 0x147
 8003282:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8003284:	4b23      	ldr	r3, [pc, #140]	@ (8003314 <MX_LTDC_Init+0xf8>)
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 800328c:	4b21      	ldr	r3, [pc, #132]	@ (8003314 <MX_LTDC_Init+0xf8>)
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8003294:	4b1f      	ldr	r3, [pc, #124]	@ (8003314 <MX_LTDC_Init+0xf8>)
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800329c:	481d      	ldr	r0, [pc, #116]	@ (8003314 <MX_LTDC_Init+0xf8>)
 800329e:	f005 fafb 	bl	8008898 <HAL_LTDC_Init>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80032a8:	f001 fb88 	bl	80049bc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80032ac:	2300      	movs	r3, #0
 80032ae:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80032b0:	23f0      	movs	r3, #240	@ 0xf0
 80032b2:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80032b4:	2300      	movs	r3, #0
 80032b6:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80032b8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80032bc:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80032be:	2302      	movs	r3, #2
 80032c0:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80032c2:	23ff      	movs	r3, #255	@ 0xff
 80032c4:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80032c6:	2300      	movs	r3, #0
 80032c8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80032ca:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80032ce:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80032d0:	2307      	movs	r3, #7
 80032d2:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80032d4:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 80032d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 80032da:	23f0      	movs	r3, #240	@ 0xf0
 80032dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 80032de:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80032e2:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80032e4:	2300      	movs	r3, #0
 80032e6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 80032ea:	2300      	movs	r3, #0
 80032ec:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 80032f0:	2300      	movs	r3, #0
 80032f2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80032f6:	1d3b      	adds	r3, r7, #4
 80032f8:	2200      	movs	r2, #0
 80032fa:	4619      	mov	r1, r3
 80032fc:	4805      	ldr	r0, [pc, #20]	@ (8003314 <MX_LTDC_Init+0xf8>)
 80032fe:	f005 fc5d 	bl	8008bbc <HAL_LTDC_ConfigLayer>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8003308:	f001 fb58 	bl	80049bc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800330c:	bf00      	nop
 800330e:	3738      	adds	r7, #56	@ 0x38
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	200262e0 	.word	0x200262e0
 8003318:	40016800 	.word	0x40016800

0800331c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b09a      	sub	sp, #104	@ 0x68
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003324:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	605a      	str	r2, [r3, #4]
 800332e:	609a      	str	r2, [r3, #8]
 8003330:	60da      	str	r2, [r3, #12]
 8003332:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003334:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003338:	2230      	movs	r2, #48	@ 0x30
 800333a:	2100      	movs	r1, #0
 800333c:	4618      	mov	r0, r3
 800333e:	f00b f99b 	bl	800e678 <memset>
  if(ltdcHandle->Instance==LTDC)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a85      	ldr	r2, [pc, #532]	@ (800355c <HAL_LTDC_MspInit+0x240>)
 8003348:	4293      	cmp	r3, r2
 800334a:	f040 8102 	bne.w	8003552 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800334e:	2308      	movs	r3, #8
 8003350:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8003352:	2332      	movs	r3, #50	@ 0x32
 8003354:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8003356:	2302      	movs	r3, #2
 8003358:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800335a:	2300      	movs	r3, #0
 800335c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800335e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003362:	4618      	mov	r0, r3
 8003364:	f006 faca 	bl	80098fc <HAL_RCCEx_PeriphCLKConfig>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800336e:	f001 fb25 	bl	80049bc <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003372:	2300      	movs	r3, #0
 8003374:	623b      	str	r3, [r7, #32]
 8003376:	4b7a      	ldr	r3, [pc, #488]	@ (8003560 <HAL_LTDC_MspInit+0x244>)
 8003378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800337a:	4a79      	ldr	r2, [pc, #484]	@ (8003560 <HAL_LTDC_MspInit+0x244>)
 800337c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003380:	6453      	str	r3, [r2, #68]	@ 0x44
 8003382:	4b77      	ldr	r3, [pc, #476]	@ (8003560 <HAL_LTDC_MspInit+0x244>)
 8003384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003386:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800338a:	623b      	str	r3, [r7, #32]
 800338c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800338e:	2300      	movs	r3, #0
 8003390:	61fb      	str	r3, [r7, #28]
 8003392:	4b73      	ldr	r3, [pc, #460]	@ (8003560 <HAL_LTDC_MspInit+0x244>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003396:	4a72      	ldr	r2, [pc, #456]	@ (8003560 <HAL_LTDC_MspInit+0x244>)
 8003398:	f043 0320 	orr.w	r3, r3, #32
 800339c:	6313      	str	r3, [r2, #48]	@ 0x30
 800339e:	4b70      	ldr	r3, [pc, #448]	@ (8003560 <HAL_LTDC_MspInit+0x244>)
 80033a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a2:	f003 0320 	and.w	r3, r3, #32
 80033a6:	61fb      	str	r3, [r7, #28]
 80033a8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033aa:	2300      	movs	r3, #0
 80033ac:	61bb      	str	r3, [r7, #24]
 80033ae:	4b6c      	ldr	r3, [pc, #432]	@ (8003560 <HAL_LTDC_MspInit+0x244>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b2:	4a6b      	ldr	r2, [pc, #428]	@ (8003560 <HAL_LTDC_MspInit+0x244>)
 80033b4:	f043 0301 	orr.w	r3, r3, #1
 80033b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ba:	4b69      	ldr	r3, [pc, #420]	@ (8003560 <HAL_LTDC_MspInit+0x244>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	61bb      	str	r3, [r7, #24]
 80033c4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033c6:	2300      	movs	r3, #0
 80033c8:	617b      	str	r3, [r7, #20]
 80033ca:	4b65      	ldr	r3, [pc, #404]	@ (8003560 <HAL_LTDC_MspInit+0x244>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ce:	4a64      	ldr	r2, [pc, #400]	@ (8003560 <HAL_LTDC_MspInit+0x244>)
 80033d0:	f043 0302 	orr.w	r3, r3, #2
 80033d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80033d6:	4b62      	ldr	r3, [pc, #392]	@ (8003560 <HAL_LTDC_MspInit+0x244>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	617b      	str	r3, [r7, #20]
 80033e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	4b5e      	ldr	r3, [pc, #376]	@ (8003560 <HAL_LTDC_MspInit+0x244>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ea:	4a5d      	ldr	r2, [pc, #372]	@ (8003560 <HAL_LTDC_MspInit+0x244>)
 80033ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80033f2:	4b5b      	ldr	r3, [pc, #364]	@ (8003560 <HAL_LTDC_MspInit+0x244>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033fe:	2300      	movs	r3, #0
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	4b57      	ldr	r3, [pc, #348]	@ (8003560 <HAL_LTDC_MspInit+0x244>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003406:	4a56      	ldr	r2, [pc, #344]	@ (8003560 <HAL_LTDC_MspInit+0x244>)
 8003408:	f043 0304 	orr.w	r3, r3, #4
 800340c:	6313      	str	r3, [r2, #48]	@ 0x30
 800340e:	4b54      	ldr	r3, [pc, #336]	@ (8003560 <HAL_LTDC_MspInit+0x244>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003412:	f003 0304 	and.w	r3, r3, #4
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800341a:	2300      	movs	r3, #0
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	4b50      	ldr	r3, [pc, #320]	@ (8003560 <HAL_LTDC_MspInit+0x244>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003422:	4a4f      	ldr	r2, [pc, #316]	@ (8003560 <HAL_LTDC_MspInit+0x244>)
 8003424:	f043 0308 	orr.w	r3, r3, #8
 8003428:	6313      	str	r3, [r2, #48]	@ 0x30
 800342a:	4b4d      	ldr	r3, [pc, #308]	@ (8003560 <HAL_LTDC_MspInit+0x244>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342e:	f003 0308 	and.w	r3, r3, #8
 8003432:	60bb      	str	r3, [r7, #8]
 8003434:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8003436:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800343a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343c:	2302      	movs	r3, #2
 800343e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003440:	2300      	movs	r3, #0
 8003442:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003444:	2300      	movs	r3, #0
 8003446:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003448:	230e      	movs	r3, #14
 800344a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800344c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003450:	4619      	mov	r1, r3
 8003452:	4844      	ldr	r0, [pc, #272]	@ (8003564 <HAL_LTDC_MspInit+0x248>)
 8003454:	f003 f8c2 	bl	80065dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8003458:	f641 0358 	movw	r3, #6232	@ 0x1858
 800345c:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345e:	2302      	movs	r3, #2
 8003460:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003462:	2300      	movs	r3, #0
 8003464:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003466:	2300      	movs	r3, #0
 8003468:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800346a:	230e      	movs	r3, #14
 800346c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800346e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003472:	4619      	mov	r1, r3
 8003474:	483c      	ldr	r0, [pc, #240]	@ (8003568 <HAL_LTDC_MspInit+0x24c>)
 8003476:	f003 f8b1 	bl	80065dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800347a:	2303      	movs	r3, #3
 800347c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347e:	2302      	movs	r3, #2
 8003480:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003482:	2300      	movs	r3, #0
 8003484:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003486:	2300      	movs	r3, #0
 8003488:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800348a:	2309      	movs	r3, #9
 800348c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800348e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003492:	4619      	mov	r1, r3
 8003494:	4835      	ldr	r0, [pc, #212]	@ (800356c <HAL_LTDC_MspInit+0x250>)
 8003496:	f003 f8a1 	bl	80065dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800349a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800349e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a0:	2302      	movs	r3, #2
 80034a2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a8:	2300      	movs	r3, #0
 80034aa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80034ac:	230e      	movs	r3, #14
 80034ae:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80034b4:	4619      	mov	r1, r3
 80034b6:	482d      	ldr	r0, [pc, #180]	@ (800356c <HAL_LTDC_MspInit+0x250>)
 80034b8:	f003 f890 	bl	80065dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80034bc:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80034c0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c2:	2302      	movs	r3, #2
 80034c4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ca:	2300      	movs	r3, #0
 80034cc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80034ce:	230e      	movs	r3, #14
 80034d0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034d2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80034d6:	4619      	mov	r1, r3
 80034d8:	4825      	ldr	r0, [pc, #148]	@ (8003570 <HAL_LTDC_MspInit+0x254>)
 80034da:	f003 f87f 	bl	80065dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80034de:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80034e2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e4:	2302      	movs	r3, #2
 80034e6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e8:	2300      	movs	r3, #0
 80034ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ec:	2300      	movs	r3, #0
 80034ee:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80034f0:	230e      	movs	r3, #14
 80034f2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034f4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80034f8:	4619      	mov	r1, r3
 80034fa:	481e      	ldr	r0, [pc, #120]	@ (8003574 <HAL_LTDC_MspInit+0x258>)
 80034fc:	f003 f86e 	bl	80065dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2D6_Pin;
 8003500:	2348      	movs	r3, #72	@ 0x48
 8003502:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003504:	2302      	movs	r3, #2
 8003506:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003508:	2300      	movs	r3, #0
 800350a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800350c:	2300      	movs	r3, #0
 800350e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003510:	230e      	movs	r3, #14
 8003512:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003514:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003518:	4619      	mov	r1, r3
 800351a:	4817      	ldr	r0, [pc, #92]	@ (8003578 <HAL_LTDC_MspInit+0x25c>)
 800351c:	f003 f85e 	bl	80065dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8003520:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003524:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003526:	2302      	movs	r3, #2
 8003528:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352a:	2300      	movs	r3, #0
 800352c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800352e:	2300      	movs	r3, #0
 8003530:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003532:	2309      	movs	r3, #9
 8003534:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003536:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800353a:	4619      	mov	r1, r3
 800353c:	480c      	ldr	r0, [pc, #48]	@ (8003570 <HAL_LTDC_MspInit+0x254>)
 800353e:	f003 f84d 	bl	80065dc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003542:	2200      	movs	r2, #0
 8003544:	2105      	movs	r1, #5
 8003546:	2058      	movs	r0, #88	@ 0x58
 8003548:	f001 ffa0 	bl	800548c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800354c:	2058      	movs	r0, #88	@ 0x58
 800354e:	f001 ffb9 	bl	80054c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8003552:	bf00      	nop
 8003554:	3768      	adds	r7, #104	@ 0x68
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40016800 	.word	0x40016800
 8003560:	40023800 	.word	0x40023800
 8003564:	40021400 	.word	0x40021400
 8003568:	40020000 	.word	0x40020000
 800356c:	40020400 	.word	0x40020400
 8003570:	40021800 	.word	0x40021800
 8003574:	40020800 	.word	0x40020800
 8003578:	40020c00 	.word	0x40020c00

0800357c <click_led>:
uint8_t change_screen_flag = 0;
uint8_t green_led_flag = 0;

void set_screen();

void click_led() {
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
	static uint8_t clicked;
	static uint32_t time;
	if (HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin) == GPIO_PIN_SET) {
 8003580:	2101      	movs	r1, #1
 8003582:	4835      	ldr	r0, [pc, #212]	@ (8003658 <click_led+0xdc>)
 8003584:	f003 f9d6 	bl	8006934 <HAL_GPIO_ReadPin>
 8003588:	4603      	mov	r3, r0
 800358a:	2b01      	cmp	r3, #1
 800358c:	d15f      	bne.n	800364e <click_led+0xd2>
		if ((HAL_GetTick() - time) > 50) {
 800358e:	f001 fe95 	bl	80052bc <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	4b31      	ldr	r3, [pc, #196]	@ (800365c <click_led+0xe0>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b32      	cmp	r3, #50	@ 0x32
 800359c:	d95a      	bls.n	8003654 <click_led+0xd8>
			time = HAL_GetTick();
 800359e:	f001 fe8d 	bl	80052bc <HAL_GetTick>
 80035a2:	4603      	mov	r3, r0
 80035a4:	4a2d      	ldr	r2, [pc, #180]	@ (800365c <click_led+0xe0>)
 80035a6:	6013      	str	r3, [r2, #0]
			if (clicked == 0) {
 80035a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003660 <click_led+0xe4>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d151      	bne.n	8003654 <click_led+0xd8>
				clicked = 1;
 80035b0:	4b2b      	ldr	r3, [pc, #172]	@ (8003660 <click_led+0xe4>)
 80035b2:	2201      	movs	r2, #1
 80035b4:	701a      	strb	r2, [r3, #0]
				if (screen_id == 0) {
 80035b6:	4b2b      	ldr	r3, [pc, #172]	@ (8003664 <click_led+0xe8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d106      	bne.n	80035cc <click_led+0x50>
					screen_id = 1;
 80035be:	4b29      	ldr	r3, [pc, #164]	@ (8003664 <click_led+0xe8>)
 80035c0:	2201      	movs	r2, #1
 80035c2:	601a      	str	r2, [r3, #0]
					change_screen_flag = 1;
 80035c4:	4b28      	ldr	r3, [pc, #160]	@ (8003668 <click_led+0xec>)
 80035c6:	2201      	movs	r2, #1
 80035c8:	701a      	strb	r2, [r3, #0]
 80035ca:	e035      	b.n	8003638 <click_led+0xbc>
				} else if (screen_id == 1) {
 80035cc:	4b25      	ldr	r3, [pc, #148]	@ (8003664 <click_led+0xe8>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d106      	bne.n	80035e2 <click_led+0x66>
					screen_id = 2;
 80035d4:	4b23      	ldr	r3, [pc, #140]	@ (8003664 <click_led+0xe8>)
 80035d6:	2202      	movs	r2, #2
 80035d8:	601a      	str	r2, [r3, #0]
					change_screen_flag = 1;
 80035da:	4b23      	ldr	r3, [pc, #140]	@ (8003668 <click_led+0xec>)
 80035dc:	2201      	movs	r2, #1
 80035de:	701a      	strb	r2, [r3, #0]
 80035e0:	e02a      	b.n	8003638 <click_led+0xbc>
				} else if (screen_id == 2) {
 80035e2:	4b20      	ldr	r3, [pc, #128]	@ (8003664 <click_led+0xe8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d106      	bne.n	80035f8 <click_led+0x7c>
					screen_id = 3;
 80035ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003664 <click_led+0xe8>)
 80035ec:	2203      	movs	r2, #3
 80035ee:	601a      	str	r2, [r3, #0]
					change_screen_flag = 1;
 80035f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003668 <click_led+0xec>)
 80035f2:	2201      	movs	r2, #1
 80035f4:	701a      	strb	r2, [r3, #0]
 80035f6:	e01f      	b.n	8003638 <click_led+0xbc>
				} else if (screen_id == 3) {
 80035f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003664 <click_led+0xe8>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b03      	cmp	r3, #3
 80035fe:	d106      	bne.n	800360e <click_led+0x92>
					screen_id = 4;
 8003600:	4b18      	ldr	r3, [pc, #96]	@ (8003664 <click_led+0xe8>)
 8003602:	2204      	movs	r2, #4
 8003604:	601a      	str	r2, [r3, #0]
					change_screen_flag = 1;
 8003606:	4b18      	ldr	r3, [pc, #96]	@ (8003668 <click_led+0xec>)
 8003608:	2201      	movs	r2, #1
 800360a:	701a      	strb	r2, [r3, #0]
 800360c:	e014      	b.n	8003638 <click_led+0xbc>
				} else if (screen_id == 4) {
 800360e:	4b15      	ldr	r3, [pc, #84]	@ (8003664 <click_led+0xe8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b04      	cmp	r3, #4
 8003614:	d106      	bne.n	8003624 <click_led+0xa8>
					screen_id = 5;
 8003616:	4b13      	ldr	r3, [pc, #76]	@ (8003664 <click_led+0xe8>)
 8003618:	2205      	movs	r2, #5
 800361a:	601a      	str	r2, [r3, #0]
					change_screen_flag = 1;
 800361c:	4b12      	ldr	r3, [pc, #72]	@ (8003668 <click_led+0xec>)
 800361e:	2201      	movs	r2, #1
 8003620:	701a      	strb	r2, [r3, #0]
 8003622:	e009      	b.n	8003638 <click_led+0xbc>
				} else if (screen_id == 5) {
 8003624:	4b0f      	ldr	r3, [pc, #60]	@ (8003664 <click_led+0xe8>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b05      	cmp	r3, #5
 800362a:	d105      	bne.n	8003638 <click_led+0xbc>
					screen_id = 1;
 800362c:	4b0d      	ldr	r3, [pc, #52]	@ (8003664 <click_led+0xe8>)
 800362e:	2201      	movs	r2, #1
 8003630:	601a      	str	r2, [r3, #0]
					change_screen_flag = 1;
 8003632:	4b0d      	ldr	r3, [pc, #52]	@ (8003668 <click_led+0xec>)
 8003634:	2201      	movs	r2, #1
 8003636:	701a      	strb	r2, [r3, #0]
				}
				HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8003638:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800363c:	480b      	ldr	r0, [pc, #44]	@ (800366c <click_led+0xf0>)
 800363e:	f003 f9aa 	bl	8006996 <HAL_GPIO_TogglePin>
				time = HAL_GetTick();
 8003642:	f001 fe3b 	bl	80052bc <HAL_GetTick>
 8003646:	4603      	mov	r3, r0
 8003648:	4a04      	ldr	r2, [pc, #16]	@ (800365c <click_led+0xe0>)
 800364a:	6013      	str	r3, [r2, #0]
			}
		}
	} else {
		clicked = 0;
	}
}
 800364c:	e002      	b.n	8003654 <click_led+0xd8>
		clicked = 0;
 800364e:	4b04      	ldr	r3, [pc, #16]	@ (8003660 <click_led+0xe4>)
 8003650:	2200      	movs	r2, #0
 8003652:	701a      	strb	r2, [r3, #0]
}
 8003654:	bf00      	nop
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40020000 	.word	0x40020000
 800365c:	200263b0 	.word	0x200263b0
 8003660:	200263b4 	.word	0x200263b4
 8003664:	200263a8 	.word	0x200263a8
 8003668:	200263ac 	.word	0x200263ac
 800366c:	40021800 	.word	0x40021800

08003670 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi5) {
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a04      	ldr	r2, [pc, #16]	@ (800368c <HAL_SPI_TxCpltCallback+0x1c>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d101      	bne.n	8003684 <HAL_SPI_TxCpltCallback+0x14>
		go_for_next_chunk();
 8003680:	f7ff fcb8 	bl	8002ff4 <go_for_next_chunk>
	}
}
 8003684:	bf00      	nop
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	200263b8 	.word	0x200263b8

08003690 <set_up_calibration>:
	lcd_set_circle(LCD_WIDTH / 2, LCD_HEIGHT / 2, 10, GREEN);

	lcd_print_all_chars();
}

void set_up_calibration() {
 8003690:	b590      	push	{r4, r7, lr}
 8003692:	b0ad      	sub	sp, #180	@ 0xb4
 8003694:	af02      	add	r7, sp, #8
	lcd_clear_text();
 8003696:	f7ff fd51 	bl	800313c <lcd_clear_text>
	const char str1[12] = "BALANCE BALL";
 800369a:	4aba      	ldr	r2, [pc, #744]	@ (8003984 <set_up_calibration+0x2f4>)
 800369c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80036a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80036a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	const char str_gyroscope[12] = "GYROSCOPE";
 80036a6:	4ab8      	ldr	r2, [pc, #736]	@ (8003988 <set_up_calibration+0x2f8>)
 80036a8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80036ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80036ae:	c303      	stmia	r3!, {r0, r1}
 80036b0:	801a      	strh	r2, [r3, #0]
 80036b2:	2300      	movs	r3, #0
 80036b4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	const char str_calibration[14] = "CALIBRATION...";
 80036b8:	4bb4      	ldr	r3, [pc, #720]	@ (800398c <set_up_calibration+0x2fc>)
 80036ba:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 80036be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036c0:	c407      	stmia	r4!, {r0, r1, r2}
 80036c2:	8023      	strh	r3, [r4, #0]

	const char str_warn1[12] = "DO NOT MOVE";
 80036c4:	4ab2      	ldr	r2, [pc, #712]	@ (8003990 <set_up_calibration+0x300>)
 80036c6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80036ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80036cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	const char str_warn2[11] = "THE BOARD";
 80036d0:	4ab0      	ldr	r2, [pc, #704]	@ (8003994 <set_up_calibration+0x304>)
 80036d2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80036d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80036d8:	c303      	stmia	r3!, {r0, r1}
 80036da:	801a      	strh	r2, [r3, #0]
 80036dc:	2300      	movs	r3, #0
 80036de:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	const char str4[8] = "WAIT FOR";
 80036e2:	4aad      	ldr	r2, [pc, #692]	@ (8003998 <set_up_calibration+0x308>)
 80036e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036ec:	e883 0003 	stmia.w	r3, {r0, r1}
	const char str5[9] = "GREEN LED";
 80036f0:	4aaa      	ldr	r2, [pc, #680]	@ (800399c <set_up_calibration+0x30c>)
 80036f2:	f107 0320 	add.w	r3, r7, #32
 80036f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80036f8:	c303      	stmia	r3!, {r0, r1}
 80036fa:	701a      	strb	r2, [r3, #0]

	const char str12[5] = "PRESS";
 80036fc:	4aa8      	ldr	r2, [pc, #672]	@ (80039a0 <set_up_calibration+0x310>)
 80036fe:	f107 0318 	add.w	r3, r7, #24
 8003702:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003706:	6018      	str	r0, [r3, #0]
 8003708:	3304      	adds	r3, #4
 800370a:	7019      	strb	r1, [r3, #0]
	const char str2[11] = "BLUE BUTTON";
 800370c:	4aa5      	ldr	r2, [pc, #660]	@ (80039a4 <set_up_calibration+0x314>)
 800370e:	f107 030c 	add.w	r3, r7, #12
 8003712:	ca07      	ldmia	r2, {r0, r1, r2}
 8003714:	c303      	stmia	r3!, {r0, r1}
 8003716:	801a      	strh	r2, [r3, #0]
 8003718:	3302      	adds	r3, #2
 800371a:	0c12      	lsrs	r2, r2, #16
 800371c:	701a      	strb	r2, [r3, #0]
	const char str3[8] = "TO START";
 800371e:	4aa2      	ldr	r2, [pc, #648]	@ (80039a8 <set_up_calibration+0x318>)
 8003720:	1d3b      	adds	r3, r7, #4
 8003722:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003726:	e883 0003 	stmia.w	r3, {r0, r1}

	int x;
	int j = 1;
 800372a:	2301      	movs	r3, #1
 800372c:	67fb      	str	r3, [r7, #124]	@ 0x7c
	int last_idx;

	for (int i = 0; i < 12; i++) {
 800372e:	2300      	movs	r3, #0
 8003730:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003734:	e01f      	b.n	8003776 <set_up_calibration+0xe6>
		x = znak_szer * (i + 1);
 8003736:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800373a:	3301      	adds	r3, #1
 800373c:	2210      	movs	r2, #16
 800373e:	fb02 f303 	mul.w	r3, r2, r3
 8003742:	677b      	str	r3, [r7, #116]	@ 0x74
		lcd_set_char(i, x, j * znak_szer, str1[i], GREEN);
 8003744:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003748:	b298      	uxth	r0, r3
 800374a:	2210      	movs	r2, #16
 800374c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800374e:	fb03 f102 	mul.w	r1, r3, r2
 8003752:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8003756:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800375a:	4413      	add	r3, r2
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8003762:	9200      	str	r2, [sp, #0]
 8003764:	460a      	mov	r2, r1
 8003766:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003768:	f7fe ffbe 	bl	80026e8 <lcd_set_char>
	for (int i = 0; i < 12; i++) {
 800376c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003770:	3301      	adds	r3, #1
 8003772:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003776:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800377a:	2b0b      	cmp	r3, #11
 800377c:	dddb      	ble.n	8003736 <set_up_calibration+0xa6>
	}
	j += 2;
 800377e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003780:	3302      	adds	r3, #2
 8003782:	67fb      	str	r3, [r7, #124]	@ 0x7c
	last_idx = 12;
 8003784:	230c      	movs	r3, #12
 8003786:	67bb      	str	r3, [r7, #120]	@ 0x78
	for (int i = 0; i < 12; i++) {
 8003788:	2300      	movs	r3, #0
 800378a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800378e:	e023      	b.n	80037d8 <set_up_calibration+0x148>
		x = znak_szer * (i + 1);
 8003790:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003794:	3301      	adds	r3, #1
 8003796:	2210      	movs	r2, #16
 8003798:	fb02 f303 	mul.w	r3, r2, r3
 800379c:	677b      	str	r3, [r7, #116]	@ 0x74
		lcd_set_char(i + last_idx, x, j * znak_szer, str_gyroscope[i], GREEN);
 800379e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	4413      	add	r3, r2
 80037aa:	b298      	uxth	r0, r3
 80037ac:	2210      	movs	r2, #16
 80037ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80037b0:	fb03 f102 	mul.w	r1, r3, r2
 80037b4:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80037b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037bc:	4413      	add	r3, r2
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80037c4:	9200      	str	r2, [sp, #0]
 80037c6:	460a      	mov	r2, r1
 80037c8:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80037ca:	f7fe ff8d 	bl	80026e8 <lcd_set_char>
	for (int i = 0; i < 12; i++) {
 80037ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037d2:	3301      	adds	r3, #1
 80037d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80037d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037dc:	2b0b      	cmp	r3, #11
 80037de:	ddd7      	ble.n	8003790 <set_up_calibration+0x100>
	}
	j++;
 80037e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80037e2:	3301      	adds	r3, #1
 80037e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
	last_idx += 12;
 80037e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037e8:	330c      	adds	r3, #12
 80037ea:	67bb      	str	r3, [r7, #120]	@ 0x78
	for (int i = 0; i < 14; i++) {
 80037ec:	2300      	movs	r3, #0
 80037ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80037f2:	e023      	b.n	800383c <set_up_calibration+0x1ac>
		x = znak_szer * (i + 1);
 80037f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037f8:	3301      	adds	r3, #1
 80037fa:	2210      	movs	r2, #16
 80037fc:	fb02 f303 	mul.w	r3, r2, r3
 8003800:	677b      	str	r3, [r7, #116]	@ 0x74
		lcd_set_char(i + last_idx, x, j * znak_szer, str_calibration[i], GREEN);
 8003802:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003806:	b29a      	uxth	r2, r3
 8003808:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800380a:	b29b      	uxth	r3, r3
 800380c:	4413      	add	r3, r2
 800380e:	b298      	uxth	r0, r3
 8003810:	2210      	movs	r2, #16
 8003812:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003814:	fb03 f102 	mul.w	r1, r3, r2
 8003818:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800381c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003820:	4413      	add	r3, r2
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8003828:	9200      	str	r2, [sp, #0]
 800382a:	460a      	mov	r2, r1
 800382c:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800382e:	f7fe ff5b 	bl	80026e8 <lcd_set_char>
	for (int i = 0; i < 14; i++) {
 8003832:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003836:	3301      	adds	r3, #1
 8003838:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800383c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003840:	2b0d      	cmp	r3, #13
 8003842:	ddd7      	ble.n	80037f4 <set_up_calibration+0x164>
	}
	j += 3;
 8003844:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003846:	3303      	adds	r3, #3
 8003848:	67fb      	str	r3, [r7, #124]	@ 0x7c
	last_idx += 14;
 800384a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800384c:	330e      	adds	r3, #14
 800384e:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (int i = 0; i < 12; i++) {
 8003850:	2300      	movs	r3, #0
 8003852:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003856:	e023      	b.n	80038a0 <set_up_calibration+0x210>
			x = znak_szer * (i + 1);
 8003858:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800385c:	3301      	adds	r3, #1
 800385e:	2210      	movs	r2, #16
 8003860:	fb02 f303 	mul.w	r3, r2, r3
 8003864:	677b      	str	r3, [r7, #116]	@ 0x74
			lcd_set_char(i + last_idx, x, j * znak_szer, str_warn1[i], RED);
 8003866:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800386a:	b29a      	uxth	r2, r3
 800386c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800386e:	b29b      	uxth	r3, r3
 8003870:	4413      	add	r3, r2
 8003872:	b298      	uxth	r0, r3
 8003874:	2210      	movs	r2, #16
 8003876:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003878:	fb03 f102 	mul.w	r1, r3, r2
 800387c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003880:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003884:	4413      	add	r3, r2
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800388c:	9200      	str	r2, [sp, #0]
 800388e:	460a      	mov	r2, r1
 8003890:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003892:	f7fe ff29 	bl	80026e8 <lcd_set_char>
	for (int i = 0; i < 12; i++) {
 8003896:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800389a:	3301      	adds	r3, #1
 800389c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80038a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80038a4:	2b0b      	cmp	r3, #11
 80038a6:	ddd7      	ble.n	8003858 <set_up_calibration+0x1c8>
		}

	j ++;
 80038a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80038aa:	3301      	adds	r3, #1
 80038ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
		last_idx += 12;
 80038ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038b0:	330c      	adds	r3, #12
 80038b2:	67bb      	str	r3, [r7, #120]	@ 0x78

		for (int i = 0; i < 11; i++) {
 80038b4:	2300      	movs	r3, #0
 80038b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80038ba:	e023      	b.n	8003904 <set_up_calibration+0x274>
				x = znak_szer * (i + 1);
 80038bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038c0:	3301      	adds	r3, #1
 80038c2:	2210      	movs	r2, #16
 80038c4:	fb02 f303 	mul.w	r3, r2, r3
 80038c8:	677b      	str	r3, [r7, #116]	@ 0x74
				lcd_set_char(i + last_idx, x, j * znak_szer, str_warn2[i], RED);
 80038ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	4413      	add	r3, r2
 80038d6:	b298      	uxth	r0, r3
 80038d8:	2210      	movs	r2, #16
 80038da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80038dc:	fb03 f102 	mul.w	r1, r3, r2
 80038e0:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80038e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038e8:	4413      	add	r3, r2
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80038f0:	9200      	str	r2, [sp, #0]
 80038f2:	460a      	mov	r2, r1
 80038f4:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80038f6:	f7fe fef7 	bl	80026e8 <lcd_set_char>
		for (int i = 0; i < 11; i++) {
 80038fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038fe:	3301      	adds	r3, #1
 8003900:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003904:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003908:	2b0a      	cmp	r3, #10
 800390a:	ddd7      	ble.n	80038bc <set_up_calibration+0x22c>
			}


	j += 3;
 800390c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800390e:	3303      	adds	r3, #3
 8003910:	67fb      	str	r3, [r7, #124]	@ 0x7c
		last_idx += 11;
 8003912:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003914:	330b      	adds	r3, #11
 8003916:	67bb      	str	r3, [r7, #120]	@ 0x78
	for (int i = 0; i < 8; i++) {
 8003918:	2300      	movs	r3, #0
 800391a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800391e:	e023      	b.n	8003968 <set_up_calibration+0x2d8>
		x = znak_szer * (i + 1);
 8003920:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003924:	3301      	adds	r3, #1
 8003926:	2210      	movs	r2, #16
 8003928:	fb02 f303 	mul.w	r3, r2, r3
 800392c:	677b      	str	r3, [r7, #116]	@ 0x74
		lcd_set_char(i + last_idx, x, j * znak_szer, str4[i], GREEN);
 800392e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003932:	b29a      	uxth	r2, r3
 8003934:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003936:	b29b      	uxth	r3, r3
 8003938:	4413      	add	r3, r2
 800393a:	b298      	uxth	r0, r3
 800393c:	2210      	movs	r2, #16
 800393e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003940:	fb03 f102 	mul.w	r1, r3, r2
 8003944:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8003948:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800394c:	4413      	add	r3, r2
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8003954:	9200      	str	r2, [sp, #0]
 8003956:	460a      	mov	r2, r1
 8003958:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800395a:	f7fe fec5 	bl	80026e8 <lcd_set_char>
	for (int i = 0; i < 8; i++) {
 800395e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003962:	3301      	adds	r3, #1
 8003964:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003968:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800396c:	2b07      	cmp	r3, #7
 800396e:	ddd7      	ble.n	8003920 <set_up_calibration+0x290>
	}
	j++;
 8003970:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003972:	3301      	adds	r3, #1
 8003974:	67fb      	str	r3, [r7, #124]	@ 0x7c
	last_idx += 8;
 8003976:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003978:	3308      	adds	r3, #8
 800397a:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (int i = 0; i < 9; i++) {
 800397c:	2300      	movs	r3, #0
 800397e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003982:	e037      	b.n	80039f4 <set_up_calibration+0x364>
 8003984:	080106b8 	.word	0x080106b8
 8003988:	080106c4 	.word	0x080106c4
 800398c:	080106d0 	.word	0x080106d0
 8003990:	080106e0 	.word	0x080106e0
 8003994:	080106ec 	.word	0x080106ec
 8003998:	080106f8 	.word	0x080106f8
 800399c:	08010700 	.word	0x08010700
 80039a0:	0801070c 	.word	0x0801070c
 80039a4:	08010714 	.word	0x08010714
 80039a8:	08010720 	.word	0x08010720
		x = znak_szer * (i + 1);
 80039ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039b0:	3301      	adds	r3, #1
 80039b2:	2210      	movs	r2, #16
 80039b4:	fb02 f303 	mul.w	r3, r2, r3
 80039b8:	677b      	str	r3, [r7, #116]	@ 0x74
		lcd_set_char(i + last_idx, x, j * znak_szer, str5[i], GREEN);
 80039ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039be:	b29a      	uxth	r2, r3
 80039c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	4413      	add	r3, r2
 80039c6:	b298      	uxth	r0, r3
 80039c8:	2210      	movs	r2, #16
 80039ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039cc:	fb03 f102 	mul.w	r1, r3, r2
 80039d0:	f107 0220 	add.w	r2, r7, #32
 80039d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039d8:	4413      	add	r3, r2
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80039e0:	9200      	str	r2, [sp, #0]
 80039e2:	460a      	mov	r2, r1
 80039e4:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80039e6:	f7fe fe7f 	bl	80026e8 <lcd_set_char>
	for (int i = 0; i < 9; i++) {
 80039ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039ee:	3301      	adds	r3, #1
 80039f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80039f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	ddd7      	ble.n	80039ac <set_up_calibration+0x31c>
	}

	j += 3;
 80039fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039fe:	3303      	adds	r3, #3
 8003a00:	67fb      	str	r3, [r7, #124]	@ 0x7c
	last_idx += 9;
 8003a02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a04:	3309      	adds	r3, #9
 8003a06:	67bb      	str	r3, [r7, #120]	@ 0x78
	for (int i = 0; i < 5; i++) {
 8003a08:	2300      	movs	r3, #0
 8003a0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a0e:	e023      	b.n	8003a58 <set_up_calibration+0x3c8>
		x = znak_szer * (i + 1);
 8003a10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a14:	3301      	adds	r3, #1
 8003a16:	2210      	movs	r2, #16
 8003a18:	fb02 f303 	mul.w	r3, r2, r3
 8003a1c:	677b      	str	r3, [r7, #116]	@ 0x74
		lcd_set_char(i + last_idx, x, j * znak_szer, str12[i], GREEN);
 8003a1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	4413      	add	r3, r2
 8003a2a:	b298      	uxth	r0, r3
 8003a2c:	2210      	movs	r2, #16
 8003a2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a30:	fb03 f102 	mul.w	r1, r3, r2
 8003a34:	f107 0218 	add.w	r2, r7, #24
 8003a38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a3c:	4413      	add	r3, r2
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8003a44:	9200      	str	r2, [sp, #0]
 8003a46:	460a      	mov	r2, r1
 8003a48:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003a4a:	f7fe fe4d 	bl	80026e8 <lcd_set_char>
	for (int i = 0; i < 5; i++) {
 8003a4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a52:	3301      	adds	r3, #1
 8003a54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a5c:	2b04      	cmp	r3, #4
 8003a5e:	ddd7      	ble.n	8003a10 <set_up_calibration+0x380>
	}

	j++;
 8003a60:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a62:	3301      	adds	r3, #1
 8003a64:	67fb      	str	r3, [r7, #124]	@ 0x7c
	last_idx += 5;
 8003a66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a68:	3305      	adds	r3, #5
 8003a6a:	67bb      	str	r3, [r7, #120]	@ 0x78
	for (int i = 0; i < 11; i++) {
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a72:	e023      	b.n	8003abc <set_up_calibration+0x42c>
		x = znak_szer * (i + 1);
 8003a74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a78:	3301      	adds	r3, #1
 8003a7a:	2210      	movs	r2, #16
 8003a7c:	fb02 f303 	mul.w	r3, r2, r3
 8003a80:	677b      	str	r3, [r7, #116]	@ 0x74
		lcd_set_char(i + last_idx, x, j * znak_szer, str2[i], GREEN);
 8003a82:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	4413      	add	r3, r2
 8003a8e:	b298      	uxth	r0, r3
 8003a90:	2210      	movs	r2, #16
 8003a92:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a94:	fb03 f102 	mul.w	r1, r3, r2
 8003a98:	f107 020c 	add.w	r2, r7, #12
 8003a9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003aa0:	4413      	add	r3, r2
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8003aa8:	9200      	str	r2, [sp, #0]
 8003aaa:	460a      	mov	r2, r1
 8003aac:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003aae:	f7fe fe1b 	bl	80026e8 <lcd_set_char>
	for (int i = 0; i < 11; i++) {
 8003ab2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003abc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ac0:	2b0a      	cmp	r3, #10
 8003ac2:	ddd7      	ble.n	8003a74 <set_up_calibration+0x3e4>
	}

	j++;
 8003ac4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	67fb      	str	r3, [r7, #124]	@ 0x7c
	last_idx += 11;
 8003aca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003acc:	330b      	adds	r3, #11
 8003ace:	67bb      	str	r3, [r7, #120]	@ 0x78
	for (int i = 0; i < 8; i++) {
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ad6:	e022      	b.n	8003b1e <set_up_calibration+0x48e>
		x = znak_szer * (i + 1);
 8003ad8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003adc:	3301      	adds	r3, #1
 8003ade:	2210      	movs	r2, #16
 8003ae0:	fb02 f303 	mul.w	r3, r2, r3
 8003ae4:	677b      	str	r3, [r7, #116]	@ 0x74
		lcd_set_char(i + last_idx, x, j * znak_szer, str3[i], GREEN);
 8003ae6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	4413      	add	r3, r2
 8003af2:	b298      	uxth	r0, r3
 8003af4:	2210      	movs	r2, #16
 8003af6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003af8:	fb03 f102 	mul.w	r1, r3, r2
 8003afc:	1d3a      	adds	r2, r7, #4
 8003afe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b02:	4413      	add	r3, r2
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8003b0a:	9200      	str	r2, [sp, #0]
 8003b0c:	460a      	mov	r2, r1
 8003b0e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003b10:	f7fe fdea 	bl	80026e8 <lcd_set_char>
	for (int i = 0; i < 8; i++) {
 8003b14:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b18:	3301      	adds	r3, #1
 8003b1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b22:	2b07      	cmp	r3, #7
 8003b24:	ddd8      	ble.n	8003ad8 <set_up_calibration+0x448>
	}

}
 8003b26:	bf00      	nop
 8003b28:	bf00      	nop
 8003b2a:	37ac      	adds	r7, #172	@ 0xac
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd90      	pop	{r4, r7, pc}

08003b30 <set_up_menu>:

void set_up_menu() {
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b09a      	sub	sp, #104	@ 0x68
 8003b34:	af02      	add	r7, sp, #8
	lcd_clear_text();
 8003b36:	f7ff fb01 	bl	800313c <lcd_clear_text>

	lcd_set_rectangle(0, 0, 132, 150, 32, ORANGE);
 8003b3a:	f64f 63a0 	movw	r3, #65184	@ 0xfea0
 8003b3e:	9301      	str	r3, [sp, #4]
 8003b40:	2320      	movs	r3, #32
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	2396      	movs	r3, #150	@ 0x96
 8003b46:	2284      	movs	r2, #132	@ 0x84
 8003b48:	2100      	movs	r1, #0
 8003b4a:	2000      	movs	r0, #0
 8003b4c:	f7fe fd8a 	bl	8002664 <lcd_set_rectangle>
	lcd_set_rectangle(1, 90, 215, 150, 32, PURPLE);
 8003b50:	f649 230f 	movw	r3, #39439	@ 0x9a0f
 8003b54:	9301      	str	r3, [sp, #4]
 8003b56:	2320      	movs	r3, #32
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	2396      	movs	r3, #150	@ 0x96
 8003b5c:	22d7      	movs	r2, #215	@ 0xd7
 8003b5e:	215a      	movs	r1, #90	@ 0x5a
 8003b60:	2001      	movs	r0, #1
 8003b62:	f7fe fd7f 	bl	8002664 <lcd_set_rectangle>
	lcd_set_rectangle(2, 0, 292, 150, 32, DARK_RED);
 8003b66:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 8003b6a:	9301      	str	r3, [sp, #4]
 8003b6c:	2320      	movs	r3, #32
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	2396      	movs	r3, #150	@ 0x96
 8003b72:	f44f 7292 	mov.w	r2, #292	@ 0x124
 8003b76:	2100      	movs	r1, #0
 8003b78:	2002      	movs	r0, #2
 8003b7a:	f7fe fd73 	bl	8002664 <lcd_set_rectangle>

	lcd_set_rectangle(3, 15, 14, 190, 15, BLUE);
 8003b7e:	231f      	movs	r3, #31
 8003b80:	9301      	str	r3, [sp, #4]
 8003b82:	230f      	movs	r3, #15
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	23be      	movs	r3, #190	@ 0xbe
 8003b88:	220e      	movs	r2, #14
 8003b8a:	210f      	movs	r1, #15
 8003b8c:	2003      	movs	r0, #3
 8003b8e:	f7fe fd69 	bl	8002664 <lcd_set_rectangle>
	lcd_set_rectangle(4, 15, 62, 90, 15, BLUE);
 8003b92:	231f      	movs	r3, #31
 8003b94:	9301      	str	r3, [sp, #4]
 8003b96:	230f      	movs	r3, #15
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	235a      	movs	r3, #90	@ 0x5a
 8003b9c:	223e      	movs	r2, #62	@ 0x3e
 8003b9e:	210f      	movs	r1, #15
 8003ba0:	2004      	movs	r0, #4
 8003ba2:	f7fe fd5f 	bl	8002664 <lcd_set_rectangle>
	lcd_set_rectangle(5, 15, 76, 155, 15, BLUE);
 8003ba6:	231f      	movs	r3, #31
 8003ba8:	9301      	str	r3, [sp, #4]
 8003baa:	230f      	movs	r3, #15
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	239b      	movs	r3, #155	@ 0x9b
 8003bb0:	224c      	movs	r2, #76	@ 0x4c
 8003bb2:	210f      	movs	r1, #15
 8003bb4:	2005      	movs	r0, #5
 8003bb6:	f7fe fd55 	bl	8002664 <lcd_set_rectangle>

	lcd_set_rectangle(6, 15, 92, 80, 15, BLUE);
 8003bba:	231f      	movs	r3, #31
 8003bbc:	9301      	str	r3, [sp, #4]
 8003bbe:	230f      	movs	r3, #15
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	2350      	movs	r3, #80	@ 0x50
 8003bc4:	225c      	movs	r2, #92	@ 0x5c
 8003bc6:	210f      	movs	r1, #15
 8003bc8:	2006      	movs	r0, #6
 8003bca:	f7fe fd4b 	bl	8002664 <lcd_set_rectangle>
	lcd_set_rectangle(7, 0, 0, 0, 0, 0);
 8003bce:	2300      	movs	r3, #0
 8003bd0:	9301      	str	r3, [sp, #4]
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	2200      	movs	r2, #0
 8003bda:	2100      	movs	r1, #0
 8003bdc:	2007      	movs	r0, #7
 8003bde:	f7fe fd41 	bl	8002664 <lcd_set_rectangle>
	lcd_set_rectangle(8, 0, 0, 0, 0, 0);
 8003be2:	2300      	movs	r3, #0
 8003be4:	9301      	str	r3, [sp, #4]
 8003be6:	2300      	movs	r3, #0
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	2300      	movs	r3, #0
 8003bec:	2200      	movs	r2, #0
 8003bee:	2100      	movs	r1, #0
 8003bf0:	2008      	movs	r0, #8
 8003bf2:	f7fe fd37 	bl	8002664 <lcd_set_rectangle>
	lcd_set_rectangle(9, 0, 0, 0, 0, 0);
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	9301      	str	r3, [sp, #4]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	2300      	movs	r3, #0
 8003c00:	2200      	movs	r2, #0
 8003c02:	2100      	movs	r1, #0
 8003c04:	2009      	movs	r0, #9
 8003c06:	f7fe fd2d 	bl	8002664 <lcd_set_rectangle>

	//if (updateBall) {
		lcd_set_circle(220, 120, 8, GREEN);
 8003c0a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8003c0e:	2208      	movs	r2, #8
 8003c10:	2178      	movs	r1, #120	@ 0x78
 8003c12:	20dc      	movs	r0, #220	@ 0xdc
 8003c14:	f7fe fda2 	bl	800275c <lcd_set_circle>
//	}

	const char str1[12] = "BALANCE BALL";
 8003c18:	4a9b      	ldr	r2, [pc, #620]	@ (8003e88 <set_up_menu+0x358>)
 8003c1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003c1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c20:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	const char str12[6] = "SELECT";
 8003c24:	4a99      	ldr	r2, [pc, #612]	@ (8003e8c <set_up_menu+0x35c>)
 8003c26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c2e:	6018      	str	r0, [r3, #0]
 8003c30:	3304      	adds	r3, #4
 8003c32:	8019      	strh	r1, [r3, #0]
	const char str2[10] = "DIFFICULTY";
 8003c34:	4a96      	ldr	r2, [pc, #600]	@ (8003e90 <set_up_menu+0x360>)
 8003c36:	f107 0318 	add.w	r3, r7, #24
 8003c3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c3c:	c303      	stmia	r3!, {r0, r1}
 8003c3e:	801a      	strh	r2, [r3, #0]
	const char str3[5] = "LEVEL";
 8003c40:	4a94      	ldr	r2, [pc, #592]	@ (8003e94 <set_up_menu+0x364>)
 8003c42:	f107 0310 	add.w	r3, r7, #16
 8003c46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c4a:	6018      	str	r0, [r3, #0]
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	7019      	strb	r1, [r3, #0]
	const char str4[4] = "EASY";
 8003c50:	4b91      	ldr	r3, [pc, #580]	@ (8003e98 <set_up_menu+0x368>)
 8003c52:	60fb      	str	r3, [r7, #12]
	const char str5[6] = "MEDIUM";
 8003c54:	4a91      	ldr	r2, [pc, #580]	@ (8003e9c <set_up_menu+0x36c>)
 8003c56:	1d3b      	adds	r3, r7, #4
 8003c58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c5c:	6018      	str	r0, [r3, #0]
 8003c5e:	3304      	adds	r3, #4
 8003c60:	8019      	strh	r1, [r3, #0]
	const char str6[4] = "HARD";
 8003c62:	4b8f      	ldr	r3, [pc, #572]	@ (8003ea0 <set_up_menu+0x370>)
 8003c64:	603b      	str	r3, [r7, #0]

	int x;
	int j = 1;
 8003c66:	2301      	movs	r3, #1
 8003c68:	643b      	str	r3, [r7, #64]	@ 0x40
	int last_idx;
	for (int i = 0; i < 12; i++) {
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c6e:	e01a      	b.n	8003ca6 <set_up_menu+0x176>
		x = znak_szer * (i + 1);
 8003c70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c72:	3301      	adds	r3, #1
 8003c74:	2210      	movs	r2, #16
 8003c76:	fb02 f303 	mul.w	r3, r2, r3
 8003c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
		lcd_set_char(i, x, j * znak_szer, str1[i], GREEN);
 8003c7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c7e:	b298      	uxth	r0, r3
 8003c80:	2210      	movs	r2, #16
 8003c82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c84:	fb03 f102 	mul.w	r1, r3, r2
 8003c88:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8003c8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c8e:	4413      	add	r3, r2
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8003c96:	9200      	str	r2, [sp, #0]
 8003c98:	460a      	mov	r2, r1
 8003c9a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c9c:	f7fe fd24 	bl	80026e8 <lcd_set_char>
	for (int i = 0; i < 12; i++) {
 8003ca0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ca6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ca8:	2b0b      	cmp	r3, #11
 8003caa:	dde1      	ble.n	8003c70 <set_up_menu+0x140>
	}
	j += 3;
 8003cac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cae:	3303      	adds	r3, #3
 8003cb0:	643b      	str	r3, [r7, #64]	@ 0x40
	last_idx = 12;
 8003cb2:	230c      	movs	r3, #12
 8003cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	for (int i = 0; i < 6; i++) {
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003cba:	e01e      	b.n	8003cfa <set_up_menu+0x1ca>
		x = znak_szer * (i + 1);
 8003cbc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	2210      	movs	r2, #16
 8003cc2:	fb02 f303 	mul.w	r3, r2, r3
 8003cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
		lcd_set_char(i + last_idx, x, j * znak_szer, str12[i], GREEN);
 8003cc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	4413      	add	r3, r2
 8003cd2:	b298      	uxth	r0, r3
 8003cd4:	2210      	movs	r2, #16
 8003cd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cd8:	fb03 f102 	mul.w	r1, r3, r2
 8003cdc:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003ce0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ce2:	4413      	add	r3, r2
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8003cea:	9200      	str	r2, [sp, #0]
 8003cec:	460a      	mov	r2, r1
 8003cee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003cf0:	f7fe fcfa 	bl	80026e8 <lcd_set_char>
	for (int i = 0; i < 6; i++) {
 8003cf4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003cfa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003cfc:	2b05      	cmp	r3, #5
 8003cfe:	dddd      	ble.n	8003cbc <set_up_menu+0x18c>
	}
	j++;
 8003d00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d02:	3301      	adds	r3, #1
 8003d04:	643b      	str	r3, [r7, #64]	@ 0x40
	last_idx += 6;
 8003d06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d08:	3306      	adds	r3, #6
 8003d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	for (int i = 0; i < 10; i++) {
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d10:	e01e      	b.n	8003d50 <set_up_menu+0x220>
		x = znak_szer * (i + 1);
 8003d12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d14:	3301      	adds	r3, #1
 8003d16:	2210      	movs	r2, #16
 8003d18:	fb02 f303 	mul.w	r3, r2, r3
 8003d1c:	63bb      	str	r3, [r7, #56]	@ 0x38
		lcd_set_char(i + last_idx, x, j * znak_szer, str2[i], GREEN);
 8003d1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	4413      	add	r3, r2
 8003d28:	b298      	uxth	r0, r3
 8003d2a:	2210      	movs	r2, #16
 8003d2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d2e:	fb03 f102 	mul.w	r1, r3, r2
 8003d32:	f107 0218 	add.w	r2, r7, #24
 8003d36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d38:	4413      	add	r3, r2
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8003d40:	9200      	str	r2, [sp, #0]
 8003d42:	460a      	mov	r2, r1
 8003d44:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d46:	f7fe fccf 	bl	80026e8 <lcd_set_char>
	for (int i = 0; i < 10; i++) {
 8003d4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d52:	2b09      	cmp	r3, #9
 8003d54:	dddd      	ble.n	8003d12 <set_up_menu+0x1e2>
	}
	j++;
 8003d56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d58:	3301      	adds	r3, #1
 8003d5a:	643b      	str	r3, [r7, #64]	@ 0x40
	last_idx += 10;
 8003d5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d5e:	330a      	adds	r3, #10
 8003d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
	for (int i = 0; i < 5; i++) {
 8003d62:	2300      	movs	r3, #0
 8003d64:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d66:	e01e      	b.n	8003da6 <set_up_menu+0x276>
		x = znak_szer * (i + 1);
 8003d68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	2210      	movs	r2, #16
 8003d6e:	fb02 f303 	mul.w	r3, r2, r3
 8003d72:	63bb      	str	r3, [r7, #56]	@ 0x38
		lcd_set_char(i + last_idx, x, j * znak_szer, str3[i], GREEN);
 8003d74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	4413      	add	r3, r2
 8003d7e:	b298      	uxth	r0, r3
 8003d80:	2210      	movs	r2, #16
 8003d82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d84:	fb03 f102 	mul.w	r1, r3, r2
 8003d88:	f107 0210 	add.w	r2, r7, #16
 8003d8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d8e:	4413      	add	r3, r2
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8003d96:	9200      	str	r2, [sp, #0]
 8003d98:	460a      	mov	r2, r1
 8003d9a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d9c:	f7fe fca4 	bl	80026e8 <lcd_set_char>
	for (int i = 0; i < 5; i++) {
 8003da0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003da2:	3301      	adds	r3, #1
 8003da4:	653b      	str	r3, [r7, #80]	@ 0x50
 8003da6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003da8:	2b04      	cmp	r3, #4
 8003daa:	dddd      	ble.n	8003d68 <set_up_menu+0x238>
	}

	j += 3;
 8003dac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dae:	3303      	adds	r3, #3
 8003db0:	643b      	str	r3, [r7, #64]	@ 0x40
	last_idx += 5;
 8003db2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003db4:	3305      	adds	r3, #5
 8003db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	for (int i = 0; i < 4; i++) {
 8003db8:	2300      	movs	r3, #0
 8003dba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dbc:	e038      	b.n	8003e30 <set_up_menu+0x300>
		x = znak_szer * (i + 1);
 8003dbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	2210      	movs	r2, #16
 8003dc4:	fb02 f303 	mul.w	r3, r2, r3
 8003dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
		if (DifficultyLevel == 1)
 8003dca:	4b36      	ldr	r3, [pc, #216]	@ (8003ea4 <set_up_menu+0x374>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d116      	bne.n	8003e00 <set_up_menu+0x2d0>
			lcd_set_char(i + last_idx, x, j * znak_szer, str4[i], WHITE);
 8003dd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	4413      	add	r3, r2
 8003ddc:	b298      	uxth	r0, r3
 8003dde:	2210      	movs	r2, #16
 8003de0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003de2:	fb03 f102 	mul.w	r1, r3, r2
 8003de6:	f107 020c 	add.w	r2, r7, #12
 8003dea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dec:	4413      	add	r3, r2
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003df4:	9200      	str	r2, [sp, #0]
 8003df6:	460a      	mov	r2, r1
 8003df8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003dfa:	f7fe fc75 	bl	80026e8 <lcd_set_char>
 8003dfe:	e014      	b.n	8003e2a <set_up_menu+0x2fa>
		else
			lcd_set_char(i + last_idx, x, j * znak_szer, str4[i], BLACK);
 8003e00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	4413      	add	r3, r2
 8003e0a:	b298      	uxth	r0, r3
 8003e0c:	2210      	movs	r2, #16
 8003e0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e10:	fb03 f102 	mul.w	r1, r3, r2
 8003e14:	f107 020c 	add.w	r2, r7, #12
 8003e18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e1a:	4413      	add	r3, r2
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	9200      	str	r2, [sp, #0]
 8003e22:	460a      	mov	r2, r1
 8003e24:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003e26:	f7fe fc5f 	bl	80026e8 <lcd_set_char>
	for (int i = 0; i < 4; i++) {
 8003e2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e32:	2b03      	cmp	r3, #3
 8003e34:	ddc3      	ble.n	8003dbe <set_up_menu+0x28e>
	}

	j += 5;
 8003e36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e38:	3305      	adds	r3, #5
 8003e3a:	643b      	str	r3, [r7, #64]	@ 0x40
	last_idx += 4;
 8003e3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e3e:	3304      	adds	r3, #4
 8003e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
	for (int i = 0; i < 6; i++) {
 8003e42:	2300      	movs	r3, #0
 8003e44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e46:	e046      	b.n	8003ed6 <set_up_menu+0x3a6>
		x = znak_szer * (i + 9);
 8003e48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e4a:	3309      	adds	r3, #9
 8003e4c:	2210      	movs	r2, #16
 8003e4e:	fb02 f303 	mul.w	r3, r2, r3
 8003e52:	63bb      	str	r3, [r7, #56]	@ 0x38
		if (DifficultyLevel == 2)
 8003e54:	4b13      	ldr	r3, [pc, #76]	@ (8003ea4 <set_up_menu+0x374>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d125      	bne.n	8003ea8 <set_up_menu+0x378>
			lcd_set_char(i + last_idx, x, j * znak_szer, str5[i], WHITE);
 8003e5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	4413      	add	r3, r2
 8003e66:	b298      	uxth	r0, r3
 8003e68:	2210      	movs	r2, #16
 8003e6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e6c:	fb03 f102 	mul.w	r1, r3, r2
 8003e70:	1d3a      	adds	r2, r7, #4
 8003e72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e74:	4413      	add	r3, r2
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e7c:	9200      	str	r2, [sp, #0]
 8003e7e:	460a      	mov	r2, r1
 8003e80:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003e82:	f7fe fc31 	bl	80026e8 <lcd_set_char>
 8003e86:	e023      	b.n	8003ed0 <set_up_menu+0x3a0>
 8003e88:	080106b8 	.word	0x080106b8
 8003e8c:	08010728 	.word	0x08010728
 8003e90:	08010730 	.word	0x08010730
 8003e94:	0801073c 	.word	0x0801073c
 8003e98:	59534145 	.word	0x59534145
 8003e9c:	08010744 	.word	0x08010744
 8003ea0:	44524148 	.word	0x44524148
 8003ea4:	20000008 	.word	0x20000008
		else
			lcd_set_char(i + last_idx, x, j * znak_szer, str5[i], BLACK);
 8003ea8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	4413      	add	r3, r2
 8003eb2:	b298      	uxth	r0, r3
 8003eb4:	2210      	movs	r2, #16
 8003eb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003eb8:	fb03 f102 	mul.w	r1, r3, r2
 8003ebc:	1d3a      	adds	r2, r7, #4
 8003ebe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ec0:	4413      	add	r3, r2
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	9200      	str	r2, [sp, #0]
 8003ec8:	460a      	mov	r2, r1
 8003eca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003ecc:	f7fe fc0c 	bl	80026e8 <lcd_set_char>
	for (int i = 0; i < 6; i++) {
 8003ed0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ed6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ed8:	2b05      	cmp	r3, #5
 8003eda:	ddb5      	ble.n	8003e48 <set_up_menu+0x318>
	}

	j += 5;
 8003edc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ede:	3305      	adds	r3, #5
 8003ee0:	643b      	str	r3, [r7, #64]	@ 0x40
	last_idx += 6;
 8003ee2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ee4:	3306      	adds	r3, #6
 8003ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	for (int i = 0; i < 4; i++) {
 8003ee8:	2300      	movs	r3, #0
 8003eea:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eec:	e036      	b.n	8003f5c <set_up_menu+0x42c>
		x = znak_szer * (i + 1);
 8003eee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	2210      	movs	r2, #16
 8003ef4:	fb02 f303 	mul.w	r3, r2, r3
 8003ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
		if (DifficultyLevel == 3)
 8003efa:	4b1c      	ldr	r3, [pc, #112]	@ (8003f6c <set_up_menu+0x43c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b03      	cmp	r3, #3
 8003f00:	d115      	bne.n	8003f2e <set_up_menu+0x3fe>
			lcd_set_char(i + last_idx, x, j * znak_szer, str6[i], WHITE);
 8003f02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	b298      	uxth	r0, r3
 8003f0e:	2210      	movs	r2, #16
 8003f10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f12:	fb03 f102 	mul.w	r1, r3, r2
 8003f16:	463a      	mov	r2, r7
 8003f18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f1a:	4413      	add	r3, r2
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f22:	9200      	str	r2, [sp, #0]
 8003f24:	460a      	mov	r2, r1
 8003f26:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003f28:	f7fe fbde 	bl	80026e8 <lcd_set_char>
 8003f2c:	e013      	b.n	8003f56 <set_up_menu+0x426>
		else
			lcd_set_char(i + last_idx, x, j * znak_szer, str6[i], BLACK);
 8003f2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	4413      	add	r3, r2
 8003f38:	b298      	uxth	r0, r3
 8003f3a:	2210      	movs	r2, #16
 8003f3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f3e:	fb03 f102 	mul.w	r1, r3, r2
 8003f42:	463a      	mov	r2, r7
 8003f44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f46:	4413      	add	r3, r2
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	9200      	str	r2, [sp, #0]
 8003f4e:	460a      	mov	r2, r1
 8003f50:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003f52:	f7fe fbc9 	bl	80026e8 <lcd_set_char>
	for (int i = 0; i < 4; i++) {
 8003f56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f58:	3301      	adds	r3, #1
 8003f5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f5e:	2b03      	cmp	r3, #3
 8003f60:	ddc5      	ble.n	8003eee <set_up_menu+0x3be>
	}
}
 8003f62:	bf00      	nop
 8003f64:	bf00      	nop
 8003f66:	3760      	adds	r7, #96	@ 0x60
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	20000008 	.word	0x20000008

08003f70 <setup_first_lvl>:



void setup_first_lvl() {
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af02      	add	r7, sp, #8
	second_pasted = 0;
 8003f76:	4b45      	ldr	r3, [pc, #276]	@ (800408c <setup_first_lvl+0x11c>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]

	lcd_clear_text();
 8003f7c:	f7ff f8de 	bl	800313c <lcd_clear_text>
	lcd_clear_screen();
 8003f80:	f7ff f8bc 	bl	80030fc <lcd_clear_screen>

	lcd_set_rectangle(0, 60, 0, 40, 100, RED);
 8003f84:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003f88:	9301      	str	r3, [sp, #4]
 8003f8a:	2364      	movs	r3, #100	@ 0x64
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	2328      	movs	r3, #40	@ 0x28
 8003f90:	2200      	movs	r2, #0
 8003f92:	213c      	movs	r1, #60	@ 0x3c
 8003f94:	2000      	movs	r0, #0
 8003f96:	f7fe fb65 	bl	8002664 <lcd_set_rectangle>
	lcd_set_rectangle(1, 60, 100, 40, 80, YELLOW);
 8003f9a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8003f9e:	9301      	str	r3, [sp, #4]
 8003fa0:	2350      	movs	r3, #80	@ 0x50
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	2328      	movs	r3, #40	@ 0x28
 8003fa6:	2264      	movs	r2, #100	@ 0x64
 8003fa8:	213c      	movs	r1, #60	@ 0x3c
 8003faa:	2001      	movs	r0, #1
 8003fac:	f7fe fb5a 	bl	8002664 <lcd_set_rectangle>
	lcd_set_rectangle(2, 40, 220, 40, 100, YELLOW);
 8003fb0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8003fb4:	9301      	str	r3, [sp, #4]
 8003fb6:	2364      	movs	r3, #100	@ 0x64
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	2328      	movs	r3, #40	@ 0x28
 8003fbc:	22dc      	movs	r2, #220	@ 0xdc
 8003fbe:	2128      	movs	r1, #40	@ 0x28
 8003fc0:	2002      	movs	r0, #2
 8003fc2:	f7fe fb4f 	bl	8002664 <lcd_set_rectangle>

	lcd_set_rectangle(3, 100, 140, 60, 40, YELLOW);
 8003fc6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8003fca:	9301      	str	r3, [sp, #4]
 8003fcc:	2328      	movs	r3, #40	@ 0x28
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	233c      	movs	r3, #60	@ 0x3c
 8003fd2:	228c      	movs	r2, #140	@ 0x8c
 8003fd4:	2164      	movs	r1, #100	@ 0x64
 8003fd6:	2003      	movs	r0, #3
 8003fd8:	f7fe fb44 	bl	8002664 <lcd_set_rectangle>
	lcd_set_rectangle(4, 140, 60, 100, 40, YELLOW);
 8003fdc:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8003fe0:	9301      	str	r3, [sp, #4]
 8003fe2:	2328      	movs	r3, #40	@ 0x28
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	2364      	movs	r3, #100	@ 0x64
 8003fe8:	223c      	movs	r2, #60	@ 0x3c
 8003fea:	218c      	movs	r1, #140	@ 0x8c
 8003fec:	2004      	movs	r0, #4
 8003fee:	f7fe fb39 	bl	8002664 <lcd_set_rectangle>
	lcd_set_rectangle(5, 200, 0, 40, 60, GREEN);
 8003ff2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8003ff6:	9301      	str	r3, [sp, #4]
 8003ff8:	233c      	movs	r3, #60	@ 0x3c
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	2328      	movs	r3, #40	@ 0x28
 8003ffe:	2200      	movs	r2, #0
 8004000:	21c8      	movs	r1, #200	@ 0xc8
 8004002:	2005      	movs	r0, #5
 8004004:	f7fe fb2e 	bl	8002664 <lcd_set_rectangle>

	lcd_set_rectangle(6, 200, 100, 40, 220, YELLOW);
 8004008:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800400c:	9301      	str	r3, [sp, #4]
 800400e:	23dc      	movs	r3, #220	@ 0xdc
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	2328      	movs	r3, #40	@ 0x28
 8004014:	2264      	movs	r2, #100	@ 0x64
 8004016:	21c8      	movs	r1, #200	@ 0xc8
 8004018:	2006      	movs	r0, #6
 800401a:	f7fe fb23 	bl	8002664 <lcd_set_rectangle>

	if (DifficultyLevel >= 2) {
 800401e:	4b1c      	ldr	r3, [pc, #112]	@ (8004090 <setup_first_lvl+0x120>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b01      	cmp	r3, #1
 8004024:	dd0a      	ble.n	800403c <setup_first_lvl+0xcc>
		lcd_set_rectangle(2, 40, 220, 40, 100, RED);
 8004026:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800402a:	9301      	str	r3, [sp, #4]
 800402c:	2364      	movs	r3, #100	@ 0x64
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	2328      	movs	r3, #40	@ 0x28
 8004032:	22dc      	movs	r2, #220	@ 0xdc
 8004034:	2128      	movs	r1, #40	@ 0x28
 8004036:	2002      	movs	r0, #2
 8004038:	f7fe fb14 	bl	8002664 <lcd_set_rectangle>
	}

	if (DifficultyLevel == 3) {
 800403c:	4b14      	ldr	r3, [pc, #80]	@ (8004090 <setup_first_lvl+0x120>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b03      	cmp	r3, #3
 8004042:	d115      	bne.n	8004070 <setup_first_lvl+0x100>
		lcd_set_rectangle(4, 140, 60, 100, 40, RED);
 8004044:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004048:	9301      	str	r3, [sp, #4]
 800404a:	2328      	movs	r3, #40	@ 0x28
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	2364      	movs	r3, #100	@ 0x64
 8004050:	223c      	movs	r2, #60	@ 0x3c
 8004052:	218c      	movs	r1, #140	@ 0x8c
 8004054:	2004      	movs	r0, #4
 8004056:	f7fe fb05 	bl	8002664 <lcd_set_rectangle>

		lcd_set_rectangle(6, 200, 100, 40, 220, RED);
 800405a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800405e:	9301      	str	r3, [sp, #4]
 8004060:	23dc      	movs	r3, #220	@ 0xdc
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	2328      	movs	r3, #40	@ 0x28
 8004066:	2264      	movs	r2, #100	@ 0x64
 8004068:	21c8      	movs	r1, #200	@ 0xc8
 800406a:	2006      	movs	r0, #6
 800406c:	f7fe fafa 	bl	8002664 <lcd_set_rectangle>
	}

	lcd_set_circle(10, 10, 8, GREEN);
 8004070:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004074:	2208      	movs	r2, #8
 8004076:	210a      	movs	r1, #10
 8004078:	200a      	movs	r0, #10
 800407a:	f7fe fb6f 	bl	800275c <lcd_set_circle>

	HAL_TIM_Base_Start_IT(&htim10);
 800407e:	4805      	ldr	r0, [pc, #20]	@ (8004094 <setup_first_lvl+0x124>)
 8004080:	f006 fd9a 	bl	800abb8 <HAL_TIM_Base_Start_IT>
}
 8004084:	bf00      	nop
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	200263a4 	.word	0x200263a4
 8004090:	20000008 	.word	0x20000008
 8004094:	2002654c 	.word	0x2002654c

08004098 <setup_second_lvl>:

void setup_second_lvl() {
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af02      	add	r7, sp, #8

	lcd_clear_text();
 800409e:	f7ff f84d 	bl	800313c <lcd_clear_text>
	lcd_clear_screen();
 80040a2:	f7ff f82b 	bl	80030fc <lcd_clear_screen>

	lcd_set_rectangle(0, 0, 30, 180, 15, YELLOW);
 80040a6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80040aa:	9301      	str	r3, [sp, #4]
 80040ac:	230f      	movs	r3, #15
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	23b4      	movs	r3, #180	@ 0xb4
 80040b2:	221e      	movs	r2, #30
 80040b4:	2100      	movs	r1, #0
 80040b6:	2000      	movs	r0, #0
 80040b8:	f7fe fad4 	bl	8002664 <lcd_set_rectangle>
	lcd_set_rectangle(1, 180, 30, 15, 210, YELLOW);
 80040bc:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80040c0:	9301      	str	r3, [sp, #4]
 80040c2:	23d2      	movs	r3, #210	@ 0xd2
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	230f      	movs	r3, #15
 80040c8:	221e      	movs	r2, #30
 80040ca:	21b4      	movs	r1, #180	@ 0xb4
 80040cc:	2001      	movs	r0, #1
 80040ce:	f7fe fac9 	bl	8002664 <lcd_set_rectangle>
	lcd_set_rectangle(2, 30, 100, 15, 190, YELLOW);
 80040d2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80040d6:	9301      	str	r3, [sp, #4]
 80040d8:	23be      	movs	r3, #190	@ 0xbe
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	230f      	movs	r3, #15
 80040de:	2264      	movs	r2, #100	@ 0x64
 80040e0:	211e      	movs	r1, #30
 80040e2:	2002      	movs	r0, #2
 80040e4:	f7fe fabe 	bl	8002664 <lcd_set_rectangle>

	lcd_set_rectangle(3, 45, 100, 85, 15, YELLOW);
 80040e8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80040ec:	9301      	str	r3, [sp, #4]
 80040ee:	230f      	movs	r3, #15
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	2355      	movs	r3, #85	@ 0x55
 80040f4:	2264      	movs	r2, #100	@ 0x64
 80040f6:	212d      	movs	r1, #45	@ 0x2d
 80040f8:	2003      	movs	r0, #3
 80040fa:	f7fe fab3 	bl	8002664 <lcd_set_rectangle>
	lcd_set_rectangle(4, 45, 140, 50, 15, YELLOW);
 80040fe:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8004102:	9301      	str	r3, [sp, #4]
 8004104:	230f      	movs	r3, #15
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	2332      	movs	r3, #50	@ 0x32
 800410a:	228c      	movs	r2, #140	@ 0x8c
 800410c:	212d      	movs	r1, #45	@ 0x2d
 800410e:	2004      	movs	r0, #4
 8004110:	f7fe faa8 	bl	8002664 <lcd_set_rectangle>
	lcd_set_rectangle(5, 50, 120, 15, 15, GREEN);
 8004114:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004118:	9301      	str	r3, [sp, #4]
 800411a:	230f      	movs	r3, #15
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	230f      	movs	r3, #15
 8004120:	2278      	movs	r2, #120	@ 0x78
 8004122:	2132      	movs	r1, #50	@ 0x32
 8004124:	2005      	movs	r0, #5
 8004126:	f7fe fa9d 	bl	8002664 <lcd_set_rectangle>

	lcd_set_rectangle(6, 80, 180, 65, 15, YELLOW);
 800412a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800412e:	9301      	str	r3, [sp, #4]
 8004130:	230f      	movs	r3, #15
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	2341      	movs	r3, #65	@ 0x41
 8004136:	22b4      	movs	r2, #180	@ 0xb4
 8004138:	2150      	movs	r1, #80	@ 0x50
 800413a:	2006      	movs	r0, #6
 800413c:	f7fe fa92 	bl	8002664 <lcd_set_rectangle>
	lcd_set_rectangle(7, 130, 100, 15, 80, YELLOW);
 8004140:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8004144:	9301      	str	r3, [sp, #4]
 8004146:	2350      	movs	r3, #80	@ 0x50
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	230f      	movs	r3, #15
 800414c:	2264      	movs	r2, #100	@ 0x64
 800414e:	2182      	movs	r1, #130	@ 0x82
 8004150:	2007      	movs	r0, #7
 8004152:	f7fe fa87 	bl	8002664 <lcd_set_rectangle>
	lcd_set_rectangle(8, 45, 230, 150, 15, YELLOW);
 8004156:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800415a:	9301      	str	r3, [sp, #4]
 800415c:	230f      	movs	r3, #15
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	2396      	movs	r3, #150	@ 0x96
 8004162:	22e6      	movs	r2, #230	@ 0xe6
 8004164:	212d      	movs	r1, #45	@ 0x2d
 8004166:	2008      	movs	r0, #8
 8004168:	f7fe fa7c 	bl	8002664 <lcd_set_rectangle>
	lcd_set_rectangle(9, 100, 280, 140, 15, YELLOW);
 800416c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8004170:	9301      	str	r3, [sp, #4]
 8004172:	230f      	movs	r3, #15
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	238c      	movs	r3, #140	@ 0x8c
 8004178:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800417c:	2164      	movs	r1, #100	@ 0x64
 800417e:	2009      	movs	r0, #9
 8004180:	f7fe fa70 	bl	8002664 <lcd_set_rectangle>

	if (DifficultyLevel >= 2) {
 8004184:	4b1e      	ldr	r3, [pc, #120]	@ (8004200 <setup_second_lvl+0x168>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b01      	cmp	r3, #1
 800418a:	dd15      	ble.n	80041b8 <setup_second_lvl+0x120>
		lcd_set_rectangle(2, 30, 100, 15, 190, RED);
 800418c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004190:	9301      	str	r3, [sp, #4]
 8004192:	23be      	movs	r3, #190	@ 0xbe
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	230f      	movs	r3, #15
 8004198:	2264      	movs	r2, #100	@ 0x64
 800419a:	211e      	movs	r1, #30
 800419c:	2002      	movs	r0, #2
 800419e:	f7fe fa61 	bl	8002664 <lcd_set_rectangle>
		lcd_set_rectangle(7, 130, 100, 15, 80, RED);
 80041a2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80041a6:	9301      	str	r3, [sp, #4]
 80041a8:	2350      	movs	r3, #80	@ 0x50
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	230f      	movs	r3, #15
 80041ae:	2264      	movs	r2, #100	@ 0x64
 80041b0:	2182      	movs	r1, #130	@ 0x82
 80041b2:	2007      	movs	r0, #7
 80041b4:	f7fe fa56 	bl	8002664 <lcd_set_rectangle>
	}

	if (DifficultyLevel == 3) {
 80041b8:	4b11      	ldr	r3, [pc, #68]	@ (8004200 <setup_second_lvl+0x168>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2b03      	cmp	r3, #3
 80041be:	d115      	bne.n	80041ec <setup_second_lvl+0x154>
		lcd_set_rectangle(4, 45, 140, 50, 15, RED);
 80041c0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80041c4:	9301      	str	r3, [sp, #4]
 80041c6:	230f      	movs	r3, #15
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	2332      	movs	r3, #50	@ 0x32
 80041cc:	228c      	movs	r2, #140	@ 0x8c
 80041ce:	212d      	movs	r1, #45	@ 0x2d
 80041d0:	2004      	movs	r0, #4
 80041d2:	f7fe fa47 	bl	8002664 <lcd_set_rectangle>
		lcd_set_rectangle(6, 80, 180, 65, 15, RED);
 80041d6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80041da:	9301      	str	r3, [sp, #4]
 80041dc:	230f      	movs	r3, #15
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	2341      	movs	r3, #65	@ 0x41
 80041e2:	22b4      	movs	r2, #180	@ 0xb4
 80041e4:	2150      	movs	r1, #80	@ 0x50
 80041e6:	2006      	movs	r0, #6
 80041e8:	f7fe fa3c 	bl	8002664 <lcd_set_rectangle>
	}

	lcd_set_circle(10, 10, 8, GREEN);
 80041ec:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80041f0:	2208      	movs	r2, #8
 80041f2:	210a      	movs	r1, #10
 80041f4:	200a      	movs	r0, #10
 80041f6:	f7fe fab1 	bl	800275c <lcd_set_circle>

}
 80041fa:	bf00      	nop
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	20000008 	.word	0x20000008

08004204 <setup_third_lvl>:

void setup_third_lvl() {
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af02      	add	r7, sp, #8

	lcd_clear_text();
 800420a:	f7fe ff97 	bl	800313c <lcd_clear_text>
	lcd_clear_screen();
 800420e:	f7fe ff75 	bl	80030fc <lcd_clear_screen>

	lcd_set_rectangle(0, 40, 0, 20, 70, YELLOW);
 8004212:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8004216:	9301      	str	r3, [sp, #4]
 8004218:	2346      	movs	r3, #70	@ 0x46
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	2314      	movs	r3, #20
 800421e:	2200      	movs	r2, #0
 8004220:	2128      	movs	r1, #40	@ 0x28
 8004222:	2000      	movs	r0, #0
 8004224:	f7fe fa1e 	bl	8002664 <lcd_set_rectangle>
	lcd_set_rectangle(1, 0, 100, 170, 20, YELLOW);
 8004228:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800422c:	9301      	str	r3, [sp, #4]
 800422e:	2314      	movs	r3, #20
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	23aa      	movs	r3, #170	@ 0xaa
 8004234:	2264      	movs	r2, #100	@ 0x64
 8004236:	2100      	movs	r1, #0
 8004238:	2001      	movs	r0, #1
 800423a:	f7fe fa13 	bl	8002664 <lcd_set_rectangle>
	lcd_set_rectangle(2, 120, 40, 20, 90, YELLOW);
 800423e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8004242:	9301      	str	r3, [sp, #4]
 8004244:	235a      	movs	r3, #90	@ 0x5a
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	2314      	movs	r3, #20
 800424a:	2228      	movs	r2, #40	@ 0x28
 800424c:	2178      	movs	r1, #120	@ 0x78
 800424e:	2002      	movs	r0, #2
 8004250:	f7fe fa08 	bl	8002664 <lcd_set_rectangle>
	lcd_set_rectangle(3, 200, 80, 30, 140, YELLOW);
 8004254:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8004258:	9301      	str	r3, [sp, #4]
 800425a:	238c      	movs	r3, #140	@ 0x8c
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	231e      	movs	r3, #30
 8004260:	2250      	movs	r2, #80	@ 0x50
 8004262:	21c8      	movs	r1, #200	@ 0xc8
 8004264:	2003      	movs	r0, #3
 8004266:	f7fe f9fd 	bl	8002664 <lcd_set_rectangle>
	lcd_set_rectangle(4, 80, 170, 160, 20, YELLOW);
 800426a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800426e:	9301      	str	r3, [sp, #4]
 8004270:	2314      	movs	r3, #20
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	23a0      	movs	r3, #160	@ 0xa0
 8004276:	22aa      	movs	r2, #170	@ 0xaa
 8004278:	2150      	movs	r1, #80	@ 0x50
 800427a:	2004      	movs	r0, #4
 800427c:	f7fe f9f2 	bl	8002664 <lcd_set_rectangle>
	lcd_set_rectangle(5, 90, 160, 30, 70, YELLOW);
 8004280:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8004284:	9301      	str	r3, [sp, #4]
 8004286:	2346      	movs	r3, #70	@ 0x46
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	231e      	movs	r3, #30
 800428c:	22a0      	movs	r2, #160	@ 0xa0
 800428e:	215a      	movs	r1, #90	@ 0x5a
 8004290:	2005      	movs	r0, #5
 8004292:	f7fe f9e7 	bl	8002664 <lcd_set_rectangle>

	lcd_set_rectangle(6, 30, 200, 20, 100, YELLOW);
 8004296:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800429a:	9301      	str	r3, [sp, #4]
 800429c:	2364      	movs	r3, #100	@ 0x64
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	2314      	movs	r3, #20
 80042a2:	22c8      	movs	r2, #200	@ 0xc8
 80042a4:	211e      	movs	r1, #30
 80042a6:	2006      	movs	r0, #6
 80042a8:	f7fe f9dc 	bl	8002664 <lcd_set_rectangle>
	lcd_set_rectangle(7, 0, 260, 200, 20, YELLOW);
 80042ac:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80042b0:	9301      	str	r3, [sp, #4]
 80042b2:	2314      	movs	r3, #20
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	23c8      	movs	r3, #200	@ 0xc8
 80042b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80042bc:	2100      	movs	r1, #0
 80042be:	2007      	movs	r0, #7
 80042c0:	f7fe f9d0 	bl	8002664 <lcd_set_rectangle>
	lcd_set_rectangle(8, 150, 220, 20, 80, YELLOW);
 80042c4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80042c8:	9301      	str	r3, [sp, #4]
 80042ca:	2350      	movs	r3, #80	@ 0x50
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	2314      	movs	r3, #20
 80042d0:	22dc      	movs	r2, #220	@ 0xdc
 80042d2:	2196      	movs	r1, #150	@ 0x96
 80042d4:	2008      	movs	r0, #8
 80042d6:	f7fe f9c5 	bl	8002664 <lcd_set_rectangle>
	lcd_set_rectangle(9, 10, 300, 10, 10, GREEN);
 80042da:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80042de:	9301      	str	r3, [sp, #4]
 80042e0:	230a      	movs	r3, #10
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	230a      	movs	r3, #10
 80042e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80042ea:	210a      	movs	r1, #10
 80042ec:	2009      	movs	r0, #9
 80042ee:	f7fe f9b9 	bl	8002664 <lcd_set_rectangle>

	if (DifficultyLevel >= 2) {
 80042f2:	4b1f      	ldr	r3, [pc, #124]	@ (8004370 <setup_third_lvl+0x16c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	dd15      	ble.n	8004326 <setup_third_lvl+0x122>
		lcd_set_rectangle(2, 120, 40, 20, 90, RED);
 80042fa:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80042fe:	9301      	str	r3, [sp, #4]
 8004300:	235a      	movs	r3, #90	@ 0x5a
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	2314      	movs	r3, #20
 8004306:	2228      	movs	r2, #40	@ 0x28
 8004308:	2178      	movs	r1, #120	@ 0x78
 800430a:	2002      	movs	r0, #2
 800430c:	f7fe f9aa 	bl	8002664 <lcd_set_rectangle>
		lcd_set_rectangle(4, 80, 170, 160, 20, RED);
 8004310:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004314:	9301      	str	r3, [sp, #4]
 8004316:	2314      	movs	r3, #20
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	23a0      	movs	r3, #160	@ 0xa0
 800431c:	22aa      	movs	r2, #170	@ 0xaa
 800431e:	2150      	movs	r1, #80	@ 0x50
 8004320:	2004      	movs	r0, #4
 8004322:	f7fe f99f 	bl	8002664 <lcd_set_rectangle>
	}

	if (DifficultyLevel == 3) {
 8004326:	4b12      	ldr	r3, [pc, #72]	@ (8004370 <setup_third_lvl+0x16c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b03      	cmp	r3, #3
 800432c:	d115      	bne.n	800435a <setup_third_lvl+0x156>
		lcd_set_rectangle(1, 0, 100, 170, 20, RED);
 800432e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004332:	9301      	str	r3, [sp, #4]
 8004334:	2314      	movs	r3, #20
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	23aa      	movs	r3, #170	@ 0xaa
 800433a:	2264      	movs	r2, #100	@ 0x64
 800433c:	2100      	movs	r1, #0
 800433e:	2001      	movs	r0, #1
 8004340:	f7fe f990 	bl	8002664 <lcd_set_rectangle>
		lcd_set_rectangle(6, 30, 200, 20, 100, RED);
 8004344:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004348:	9301      	str	r3, [sp, #4]
 800434a:	2364      	movs	r3, #100	@ 0x64
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	2314      	movs	r3, #20
 8004350:	22c8      	movs	r2, #200	@ 0xc8
 8004352:	211e      	movs	r1, #30
 8004354:	2006      	movs	r0, #6
 8004356:	f7fe f985 	bl	8002664 <lcd_set_rectangle>
	}

	lcd_set_circle(10, 10, 8, GREEN);
 800435a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800435e:	2208      	movs	r2, #8
 8004360:	210a      	movs	r1, #10
 8004362:	200a      	movs	r0, #10
 8004364:	f7fe f9fa 	bl	800275c <lcd_set_circle>

}
 8004368:	bf00      	nop
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	20000008 	.word	0x20000008

08004374 <setup_end>:

void setup_end() {
 8004374:	b580      	push	{r7, lr}
 8004376:	b0a0      	sub	sp, #128	@ 0x80
 8004378:	af02      	add	r7, sp, #8
	HAL_TIM_Base_Stop_IT(&htim10);
 800437a:	489d      	ldr	r0, [pc, #628]	@ (80045f0 <setup_end+0x27c>)
 800437c:	f006 fc8c 	bl	800ac98 <HAL_TIM_Base_Stop_IT>
	//clear_rectangles();
	lcd_clear_text();
 8004380:	f7fe fedc 	bl	800313c <lcd_clear_text>
	lcd_clear_screen();
 8004384:	f7fe feba 	bl	80030fc <lcd_clear_screen>

	lcd_set_rectangle(0, 14, 14, 120, 16, BLUE);
 8004388:	231f      	movs	r3, #31
 800438a:	9301      	str	r3, [sp, #4]
 800438c:	2310      	movs	r3, #16
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	2378      	movs	r3, #120	@ 0x78
 8004392:	220e      	movs	r2, #14
 8004394:	210e      	movs	r1, #14
 8004396:	2000      	movs	r0, #0
 8004398:	f7fe f964 	bl	8002664 <lcd_set_rectangle>
	lcd_set_rectangle(1, 14, 30, 180, 15, BLUE);
 800439c:	231f      	movs	r3, #31
 800439e:	9301      	str	r3, [sp, #4]
 80043a0:	230f      	movs	r3, #15
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	23b4      	movs	r3, #180	@ 0xb4
 80043a6:	221e      	movs	r2, #30
 80043a8:	210e      	movs	r1, #14
 80043aa:	2001      	movs	r0, #1
 80043ac:	f7fe f95a 	bl	8002664 <lcd_set_rectangle>
	lcd_set_rectangle(2, 14, 60, 60, 50, BLUE);
 80043b0:	231f      	movs	r3, #31
 80043b2:	9301      	str	r3, [sp, #4]
 80043b4:	2332      	movs	r3, #50	@ 0x32
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	233c      	movs	r3, #60	@ 0x3c
 80043ba:	223c      	movs	r2, #60	@ 0x3c
 80043bc:	210e      	movs	r1, #14
 80043be:	2002      	movs	r0, #2
 80043c0:	f7fe f950 	bl	8002664 <lcd_set_rectangle>
	lcd_set_rectangle(3, 0, 0, 0, 0, 0);
 80043c4:	2300      	movs	r3, #0
 80043c6:	9301      	str	r3, [sp, #4]
 80043c8:	2300      	movs	r3, #0
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	2300      	movs	r3, #0
 80043ce:	2200      	movs	r2, #0
 80043d0:	2100      	movs	r1, #0
 80043d2:	2003      	movs	r0, #3
 80043d4:	f7fe f946 	bl	8002664 <lcd_set_rectangle>
	lcd_set_rectangle(4, 0, 0, 0, 0, 0);
 80043d8:	2300      	movs	r3, #0
 80043da:	9301      	str	r3, [sp, #4]
 80043dc:	2300      	movs	r3, #0
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	2300      	movs	r3, #0
 80043e2:	2200      	movs	r2, #0
 80043e4:	2100      	movs	r1, #0
 80043e6:	2004      	movs	r0, #4
 80043e8:	f7fe f93c 	bl	8002664 <lcd_set_rectangle>
	lcd_set_rectangle(5, 0, 0, 0, 0, 0);
 80043ec:	2300      	movs	r3, #0
 80043ee:	9301      	str	r3, [sp, #4]
 80043f0:	2300      	movs	r3, #0
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	2300      	movs	r3, #0
 80043f6:	2200      	movs	r2, #0
 80043f8:	2100      	movs	r1, #0
 80043fa:	2005      	movs	r0, #5
 80043fc:	f7fe f932 	bl	8002664 <lcd_set_rectangle>

	lcd_set_rectangle(6, 0, 0, 0, 0, 0);
 8004400:	2300      	movs	r3, #0
 8004402:	9301      	str	r3, [sp, #4]
 8004404:	2300      	movs	r3, #0
 8004406:	9300      	str	r3, [sp, #0]
 8004408:	2300      	movs	r3, #0
 800440a:	2200      	movs	r2, #0
 800440c:	2100      	movs	r1, #0
 800440e:	2006      	movs	r0, #6
 8004410:	f7fe f928 	bl	8002664 <lcd_set_rectangle>
	lcd_set_rectangle(7, 0, 0, 0, 0, 0);
 8004414:	2300      	movs	r3, #0
 8004416:	9301      	str	r3, [sp, #4]
 8004418:	2300      	movs	r3, #0
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	2300      	movs	r3, #0
 800441e:	2200      	movs	r2, #0
 8004420:	2100      	movs	r1, #0
 8004422:	2007      	movs	r0, #7
 8004424:	f7fe f91e 	bl	8002664 <lcd_set_rectangle>
	lcd_set_rectangle(8, 0, 0, 0, 0, 0);
 8004428:	2300      	movs	r3, #0
 800442a:	9301      	str	r3, [sp, #4]
 800442c:	2300      	movs	r3, #0
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	2300      	movs	r3, #0
 8004432:	2200      	movs	r2, #0
 8004434:	2100      	movs	r1, #0
 8004436:	2008      	movs	r0, #8
 8004438:	f7fe f914 	bl	8002664 <lcd_set_rectangle>
	lcd_set_rectangle(9, 0, 0, 0, 0, 0);
 800443c:	2300      	movs	r3, #0
 800443e:	9301      	str	r3, [sp, #4]
 8004440:	2300      	movs	r3, #0
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	2300      	movs	r3, #0
 8004446:	2200      	movs	r2, #0
 8004448:	2100      	movs	r1, #0
 800444a:	2009      	movs	r0, #9
 800444c:	f7fe f90a 	bl	8002664 <lcd_set_rectangle>

	lcd_set_circle(200, 100, 8, GREEN);
 8004450:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004454:	2208      	movs	r2, #8
 8004456:	2164      	movs	r1, #100	@ 0x64
 8004458:	20c8      	movs	r0, #200	@ 0xc8
 800445a:	f7fe f97f 	bl	800275c <lcd_set_circle>

	const char str1[7] = "THE END";
 800445e:	4a65      	ldr	r2, [pc, #404]	@ (80045f4 <setup_end+0x280>)
 8004460:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004464:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004468:	6018      	str	r0, [r3, #0]
 800446a:	3304      	adds	r3, #4
 800446c:	8019      	strh	r1, [r3, #0]
 800446e:	3302      	adds	r3, #2
 8004470:	0c0a      	lsrs	r2, r1, #16
 8004472:	701a      	strb	r2, [r3, #0]
	int x;
	int j = 1;
 8004474:	2301      	movs	r3, #1
 8004476:	677b      	str	r3, [r7, #116]	@ 0x74
	int last_idx;
	for (int i = 0; i < 7; i++) {
 8004478:	2300      	movs	r3, #0
 800447a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800447c:	e01a      	b.n	80044b4 <setup_end+0x140>
		x = znak_szer * (i + 1);
 800447e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004480:	3301      	adds	r3, #1
 8004482:	2210      	movs	r2, #16
 8004484:	fb02 f303 	mul.w	r3, r2, r3
 8004488:	65bb      	str	r3, [r7, #88]	@ 0x58
		lcd_set_char(i, x, j * znak_szer, str1[i], GREEN);
 800448a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800448c:	b298      	uxth	r0, r3
 800448e:	2210      	movs	r2, #16
 8004490:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004492:	fb03 f102 	mul.w	r1, r3, r2
 8004496:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800449a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800449c:	4413      	add	r3, r2
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80044a4:	9200      	str	r2, [sp, #0]
 80044a6:	460a      	mov	r2, r1
 80044a8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80044aa:	f7fe f91d 	bl	80026e8 <lcd_set_char>
	for (int i = 0; i < 7; i++) {
 80044ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044b0:	3301      	adds	r3, #1
 80044b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044b6:	2b06      	cmp	r3, #6
 80044b8:	dde1      	ble.n	800447e <setup_end+0x10a>
	}
	j++;
 80044ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044bc:	3301      	adds	r3, #1
 80044be:	677b      	str	r3, [r7, #116]	@ 0x74
	last_idx = 7;
 80044c0:	2307      	movs	r3, #7
 80044c2:	673b      	str	r3, [r7, #112]	@ 0x70

	char time_str[32];
	snprintf(time_str, sizeof(time_str), "TIME %ld SEC", second_pasted);
 80044c4:	4b4c      	ldr	r3, [pc, #304]	@ (80045f8 <setup_end+0x284>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80044cc:	4a4b      	ldr	r2, [pc, #300]	@ (80045fc <setup_end+0x288>)
 80044ce:	2120      	movs	r1, #32
 80044d0:	f009 ffc4 	bl	800e45c <sniprintf>
	printf("%s\r\n", time_str);
 80044d4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80044d8:	4619      	mov	r1, r3
 80044da:	4849      	ldr	r0, [pc, #292]	@ (8004600 <setup_end+0x28c>)
 80044dc:	f009 ff4e 	bl	800e37c <iprintf>

	for (int i = 0; time_str[i] != '\0'; i++) {
 80044e0:	2300      	movs	r3, #0
 80044e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044e4:	e01e      	b.n	8004524 <setup_end+0x1b0>
		x = znak_szer * (i + 1);
 80044e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044e8:	3301      	adds	r3, #1
 80044ea:	2210      	movs	r2, #16
 80044ec:	fb02 f303 	mul.w	r3, r2, r3
 80044f0:	65bb      	str	r3, [r7, #88]	@ 0x58
		lcd_set_char(i + last_idx, x, j * znak_szer, time_str[i], GREEN);
 80044f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	4413      	add	r3, r2
 80044fc:	b298      	uxth	r0, r3
 80044fe:	2210      	movs	r2, #16
 8004500:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004502:	fb03 f102 	mul.w	r1, r3, r2
 8004506:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800450a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800450c:	4413      	add	r3, r2
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8004514:	9200      	str	r2, [sp, #0]
 8004516:	460a      	mov	r2, r1
 8004518:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800451a:	f7fe f8e5 	bl	80026e8 <lcd_set_char>
	for (int i = 0; time_str[i] != '\0'; i++) {
 800451e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004520:	3301      	adds	r3, #1
 8004522:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004524:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8004528:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800452a:	4413      	add	r3, r2
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1d9      	bne.n	80044e6 <setup_end+0x172>
	}
	j += 2;
 8004532:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004534:	3302      	adds	r3, #2
 8004536:	677b      	str	r3, [r7, #116]	@ 0x74
	last_idx += 32;
 8004538:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800453a:	3320      	adds	r3, #32
 800453c:	673b      	str	r3, [r7, #112]	@ 0x70

	updateHighScores(second_pasted);
 800453e:	4b2e      	ldr	r3, [pc, #184]	@ (80045f8 <setup_end+0x284>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4618      	mov	r0, r3
 8004544:	f7fd f93c 	bl	80017c0 <updateHighScores>
	HighScores scores = readHighScores();
 8004548:	f107 0320 	add.w	r3, r7, #32
 800454c:	4618      	mov	r0, r3
 800454e:	f7fd f8dd 	bl	800170c <readHighScores>

	if (scores.best_times[0] != 0xFFFFFFFF) {
 8004552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004558:	d037      	beq.n	80045ca <setup_end+0x256>
		char score_str[32];
		snprintf(score_str, sizeof(score_str), "1. %ld", scores.best_times[0]);
 800455a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455c:	4638      	mov	r0, r7
 800455e:	4a29      	ldr	r2, [pc, #164]	@ (8004604 <setup_end+0x290>)
 8004560:	2120      	movs	r1, #32
 8004562:	f009 ff7b 	bl	800e45c <sniprintf>
		printf("Best first time: %s\r\n", score_str);
 8004566:	463b      	mov	r3, r7
 8004568:	4619      	mov	r1, r3
 800456a:	4827      	ldr	r0, [pc, #156]	@ (8004608 <setup_end+0x294>)
 800456c:	f009 ff06 	bl	800e37c <iprintf>

		for (int i = 0; score_str[i] != '\0'; i++) {
 8004570:	2300      	movs	r3, #0
 8004572:	667b      	str	r3, [r7, #100]	@ 0x64
 8004574:	e01d      	b.n	80045b2 <setup_end+0x23e>
			x = znak_szer * (i + 1);
 8004576:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004578:	3301      	adds	r3, #1
 800457a:	2210      	movs	r2, #16
 800457c:	fb02 f303 	mul.w	r3, r2, r3
 8004580:	65bb      	str	r3, [r7, #88]	@ 0x58
			lcd_set_char(i + last_idx, x, j * znak_szer, score_str[i], RED);
 8004582:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004584:	b29a      	uxth	r2, r3
 8004586:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004588:	b29b      	uxth	r3, r3
 800458a:	4413      	add	r3, r2
 800458c:	b298      	uxth	r0, r3
 800458e:	2210      	movs	r2, #16
 8004590:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004592:	fb03 f102 	mul.w	r1, r3, r2
 8004596:	463a      	mov	r2, r7
 8004598:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800459a:	4413      	add	r3, r2
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80045a2:	9200      	str	r2, [sp, #0]
 80045a4:	460a      	mov	r2, r1
 80045a6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80045a8:	f7fe f89e 	bl	80026e8 <lcd_set_char>
		for (int i = 0; score_str[i] != '\0'; i++) {
 80045ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045ae:	3301      	adds	r3, #1
 80045b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80045b2:	463a      	mov	r2, r7
 80045b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045b6:	4413      	add	r3, r2
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1db      	bne.n	8004576 <setup_end+0x202>
		}
		j++;
 80045be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045c0:	3301      	adds	r3, #1
 80045c2:	677b      	str	r3, [r7, #116]	@ 0x74
		last_idx += 32;
 80045c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045c6:	3320      	adds	r3, #32
 80045c8:	673b      	str	r3, [r7, #112]	@ 0x70
	}

	if (scores.best_times[1] != 0xFFFFFFFF) {
 80045ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d0:	d04a      	beq.n	8004668 <setup_end+0x2f4>
		char score_str[32];
		snprintf(score_str, sizeof(score_str), "2. %ld", scores.best_times[1]);
 80045d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d4:	4638      	mov	r0, r7
 80045d6:	4a0d      	ldr	r2, [pc, #52]	@ (800460c <setup_end+0x298>)
 80045d8:	2120      	movs	r1, #32
 80045da:	f009 ff3f 	bl	800e45c <sniprintf>
		printf("Best second time: %s\r\n", score_str);
 80045de:	463b      	mov	r3, r7
 80045e0:	4619      	mov	r1, r3
 80045e2:	480b      	ldr	r0, [pc, #44]	@ (8004610 <setup_end+0x29c>)
 80045e4:	f009 feca 	bl	800e37c <iprintf>

		for (int i = 0; score_str[i] != '\0'; i++) {
 80045e8:	2300      	movs	r3, #0
 80045ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80045ec:	e030      	b.n	8004650 <setup_end+0x2dc>
 80045ee:	bf00      	nop
 80045f0:	2002654c 	.word	0x2002654c
 80045f4:	080107c4 	.word	0x080107c4
 80045f8:	200263a4 	.word	0x200263a4
 80045fc:	0801074c 	.word	0x0801074c
 8004600:	0801075c 	.word	0x0801075c
 8004604:	08010764 	.word	0x08010764
 8004608:	0801076c 	.word	0x0801076c
 800460c:	08010784 	.word	0x08010784
 8004610:	0801078c 	.word	0x0801078c
			x = znak_szer * (i + 1);
 8004614:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004616:	3301      	adds	r3, #1
 8004618:	2210      	movs	r2, #16
 800461a:	fb02 f303 	mul.w	r3, r2, r3
 800461e:	65bb      	str	r3, [r7, #88]	@ 0x58
			lcd_set_char(i + last_idx, x, j * znak_szer, score_str[i], MAGENTA);
 8004620:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004622:	b29a      	uxth	r2, r3
 8004624:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004626:	b29b      	uxth	r3, r3
 8004628:	4413      	add	r3, r2
 800462a:	b298      	uxth	r0, r3
 800462c:	2210      	movs	r2, #16
 800462e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004630:	fb03 f102 	mul.w	r1, r3, r2
 8004634:	463a      	mov	r2, r7
 8004636:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004638:	4413      	add	r3, r2
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8004640:	9200      	str	r2, [sp, #0]
 8004642:	460a      	mov	r2, r1
 8004644:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004646:	f7fe f84f 	bl	80026e8 <lcd_set_char>
		for (int i = 0; score_str[i] != '\0'; i++) {
 800464a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800464c:	3301      	adds	r3, #1
 800464e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004650:	463a      	mov	r2, r7
 8004652:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004654:	4413      	add	r3, r2
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1db      	bne.n	8004614 <setup_end+0x2a0>
		}
		j++;
 800465c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800465e:	3301      	adds	r3, #1
 8004660:	677b      	str	r3, [r7, #116]	@ 0x74
		last_idx += 32;
 8004662:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004664:	3320      	adds	r3, #32
 8004666:	673b      	str	r3, [r7, #112]	@ 0x70
	}

	if (scores.best_times[2] != 0xFFFFFFFF) {
 8004668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800466a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800466e:	d037      	beq.n	80046e0 <setup_end+0x36c>
		char score_str[32];
		snprintf(score_str, sizeof(score_str), "3. %ld", scores.best_times[2]);
 8004670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004672:	4638      	mov	r0, r7
 8004674:	4a1c      	ldr	r2, [pc, #112]	@ (80046e8 <setup_end+0x374>)
 8004676:	2120      	movs	r1, #32
 8004678:	f009 fef0 	bl	800e45c <sniprintf>
		printf("Best third time: %s\r\n", score_str);
 800467c:	463b      	mov	r3, r7
 800467e:	4619      	mov	r1, r3
 8004680:	481a      	ldr	r0, [pc, #104]	@ (80046ec <setup_end+0x378>)
 8004682:	f009 fe7b 	bl	800e37c <iprintf>

		for (int i = 0; score_str[i] != '\0'; i++) {
 8004686:	2300      	movs	r3, #0
 8004688:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800468a:	e01d      	b.n	80046c8 <setup_end+0x354>
			x = znak_szer * (i + 1);
 800468c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800468e:	3301      	adds	r3, #1
 8004690:	2210      	movs	r2, #16
 8004692:	fb02 f303 	mul.w	r3, r2, r3
 8004696:	65bb      	str	r3, [r7, #88]	@ 0x58
			lcd_set_char(i + last_idx, x, j * znak_szer, score_str[i], CYAN);
 8004698:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800469a:	b29a      	uxth	r2, r3
 800469c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800469e:	b29b      	uxth	r3, r3
 80046a0:	4413      	add	r3, r2
 80046a2:	b298      	uxth	r0, r3
 80046a4:	2210      	movs	r2, #16
 80046a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046a8:	fb03 f102 	mul.w	r1, r3, r2
 80046ac:	463a      	mov	r2, r7
 80046ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046b0:	4413      	add	r3, r2
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80046b8:	9200      	str	r2, [sp, #0]
 80046ba:	460a      	mov	r2, r1
 80046bc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80046be:	f7fe f813 	bl	80026e8 <lcd_set_char>
		for (int i = 0; score_str[i] != '\0'; i++) {
 80046c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046c4:	3301      	adds	r3, #1
 80046c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046c8:	463a      	mov	r2, r7
 80046ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046cc:	4413      	add	r3, r2
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1db      	bne.n	800468c <setup_end+0x318>
		}
		j++;
 80046d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046d6:	3301      	adds	r3, #1
 80046d8:	677b      	str	r3, [r7, #116]	@ 0x74
		last_idx += 32;
 80046da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80046dc:	3320      	adds	r3, #32
 80046de:	673b      	str	r3, [r7, #112]	@ 0x70
	}

}
 80046e0:	bf00      	nop
 80046e2:	3778      	adds	r7, #120	@ 0x78
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	080107a4 	.word	0x080107a4
 80046ec:	080107ac 	.word	0x080107ac

080046f0 <set_screen>:
void set_screen() {
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim7);
 80046f4:	4820      	ldr	r0, [pc, #128]	@ (8004778 <set_screen+0x88>)
 80046f6:	f006 facf 	bl	800ac98 <HAL_TIM_Base_Stop_IT>
	lcd_clear_screen();
 80046fa:	f7fe fcff 	bl	80030fc <lcd_clear_screen>
	if (screen_id == 0) {
 80046fe:	4b1f      	ldr	r3, [pc, #124]	@ (800477c <set_screen+0x8c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d102      	bne.n	800470c <set_screen+0x1c>
		set_up_calibration();
 8004706:	f7fe ffc3 	bl	8003690 <set_up_calibration>
 800470a:	e021      	b.n	8004750 <set_screen+0x60>
	} else if (screen_id == 1) {
 800470c:	4b1b      	ldr	r3, [pc, #108]	@ (800477c <set_screen+0x8c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d102      	bne.n	800471a <set_screen+0x2a>
		set_up_menu();
 8004714:	f7ff fa0c 	bl	8003b30 <set_up_menu>
 8004718:	e01a      	b.n	8004750 <set_screen+0x60>
	} else if (screen_id == 2) {
 800471a:	4b18      	ldr	r3, [pc, #96]	@ (800477c <set_screen+0x8c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b02      	cmp	r3, #2
 8004720:	d102      	bne.n	8004728 <set_screen+0x38>
		setup_first_lvl();
 8004722:	f7ff fc25 	bl	8003f70 <setup_first_lvl>
 8004726:	e013      	b.n	8004750 <set_screen+0x60>
	} else if (screen_id == 3) {
 8004728:	4b14      	ldr	r3, [pc, #80]	@ (800477c <set_screen+0x8c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b03      	cmp	r3, #3
 800472e:	d102      	bne.n	8004736 <set_screen+0x46>
		setup_second_lvl();
 8004730:	f7ff fcb2 	bl	8004098 <setup_second_lvl>
 8004734:	e00c      	b.n	8004750 <set_screen+0x60>
	} else if (screen_id == 4) {
 8004736:	4b11      	ldr	r3, [pc, #68]	@ (800477c <set_screen+0x8c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2b04      	cmp	r3, #4
 800473c:	d102      	bne.n	8004744 <set_screen+0x54>
		setup_third_lvl();
 800473e:	f7ff fd61 	bl	8004204 <setup_third_lvl>
 8004742:	e005      	b.n	8004750 <set_screen+0x60>
	} else if (screen_id == 5) {
 8004744:	4b0d      	ldr	r3, [pc, #52]	@ (800477c <set_screen+0x8c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b05      	cmp	r3, #5
 800474a:	d101      	bne.n	8004750 <set_screen+0x60>
		setup_end();
 800474c:	f7ff fe12 	bl	8004374 <setup_end>
	}
	if (screen_id != 0 )
 8004750:	4b0a      	ldr	r3, [pc, #40]	@ (800477c <set_screen+0x8c>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <set_screen+0x70>
		lcd_update(0);
 8004758:	2000      	movs	r0, #0
 800475a:	f7fe fb87 	bl	8002e6c <lcd_update>
 800475e:	e002      	b.n	8004766 <set_screen+0x76>
	else
		lcd_update(1);
 8004760:	2001      	movs	r0, #1
 8004762:	f7fe fb83 	bl	8002e6c <lcd_update>
	HAL_Delay(500);
 8004766:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800476a:	f000 fdb3 	bl	80052d4 <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim7);
 800476e:	4802      	ldr	r0, [pc, #8]	@ (8004778 <set_screen+0x88>)
 8004770:	f006 fa22 	bl	800abb8 <HAL_TIM_Base_Start_IT>
}
 8004774:	bf00      	nop
 8004776:	bd80      	pop	{r7, pc}
 8004778:	20026504 	.word	0x20026504
 800477c:	200263a8 	.word	0x200263a8

08004780 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8004780:	b580      	push	{r7, lr}
 8004782:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004784:	f000 fd64 	bl	8005250 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004788:	f000 f86c 	bl	8004864 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800478c:	f7fd f988 	bl	8001aa0 <MX_GPIO_Init>
	MX_DMA_Init();
 8004790:	f7fc ff42 	bl	8001618 <MX_DMA_Init>
	MX_CRC_Init();
 8004794:	f7fc ff0a 	bl	80015ac <MX_CRC_Init>
	MX_DMA2D_Init();
 8004798:	f7fc ff5e 	bl	8001658 <MX_DMA2D_Init>
	MX_FMC_Init();
 800479c:	f7fd f894 	bl	80018c8 <MX_FMC_Init>
	MX_I2C3_Init();
 80047a0:	f7fd fdaa 	bl	80022f8 <MX_I2C3_Init>
	MX_LTDC_Init();
 80047a4:	f7fe fd3a 	bl	800321c <MX_LTDC_Init>
	MX_SPI5_Init();
 80047a8:	f000 f92e 	bl	8004a08 <MX_SPI5_Init>
	MX_TIM1_Init();
 80047ac:	f000 fba6 	bl	8004efc <MX_TIM1_Init>
	MX_USART1_UART_Init();
 80047b0:	f000 fcb2 	bl	8005118 <MX_USART1_UART_Init>
	MX_TIM7_Init();
 80047b4:	f000 fbf2 	bl	8004f9c <MX_TIM7_Init>
	MX_TIM10_Init();
 80047b8:	f000 fc26 	bl	8005008 <MX_TIM10_Init>
	/* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80047bc:	2200      	movs	r2, #0
 80047be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80047c2:	4823      	ldr	r0, [pc, #140]	@ (8004850 <main+0xd0>)
 80047c4:	f002 f8ce 	bl	8006964 <HAL_GPIO_WritePin>
	lcd_init();
 80047c8:	f7fd fec6 	bl	8002558 <lcd_init>
	lcd_clear_screen();
 80047cc:	f7fe fc96 	bl	80030fc <lcd_clear_screen>
	set_screen();
 80047d0:	f7ff ff8e 	bl	80046f0 <set_screen>

	while (!spi5_acquire()) {
 80047d4:	bf00      	nop
 80047d6:	f000 f8f7 	bl	80049c8 <spi5_acquire>
 80047da:	4603      	mov	r3, r0
 80047dc:	f083 0301 	eor.w	r3, r3, #1
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1f7      	bne.n	80047d6 <main+0x56>
	}
	spi5_release();
 80047e6:	f000 f903 	bl	80049f0 <spi5_release>

	HAL_Delay(500); //żeby LCD skończył swoje przesyłanie
 80047ea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80047ee:	f000 fd71 	bl	80052d4 <HAL_Delay>
	gyro_init();
 80047f2:	f7fd fa95 	bl	8001d20 <gyro_init>

	initializeFlashIfNeeded();
 80047f6:	f7fd f85b 	bl	80018b0 <initializeFlashIfNeeded>
	HAL_Delay(2000);
 80047fa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80047fe:	f000 fd69 	bl	80052d4 <HAL_Delay>
	gyro_calculate_offset(&gyro_offset_s);
 8004802:	4814      	ldr	r0, [pc, #80]	@ (8004854 <main+0xd4>)
 8004804:	f7fd fc46 	bl	8002094 <gyro_calculate_offset>
	HAL_Delay(1000);
 8004808:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800480c:	f000 fd62 	bl	80052d4 <HAL_Delay>
	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	green_led_flag = 1;
 8004810:	4b11      	ldr	r3, [pc, #68]	@ (8004858 <main+0xd8>)
 8004812:	2201      	movs	r2, #1
 8004814:	701a      	strb	r2, [r3, #0]
	while (1) {

		if (green_led_flag == 1) {
 8004816:	4b10      	ldr	r3, [pc, #64]	@ (8004858 <main+0xd8>)
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d108      	bne.n	8004830 <main+0xb0>
			green_led_flag = 0;
 800481e:	4b0e      	ldr	r3, [pc, #56]	@ (8004858 <main+0xd8>)
 8004820:	2200      	movs	r2, #0
 8004822:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8004824:	2201      	movs	r2, #1
 8004826:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800482a:	4809      	ldr	r0, [pc, #36]	@ (8004850 <main+0xd0>)
 800482c:	f002 f89a 	bl	8006964 <HAL_GPIO_WritePin>
		}
		click_led();
 8004830:	f7fe fea4 	bl	800357c <click_led>
		if (change_screen_flag == 1) {
 8004834:	4b09      	ldr	r3, [pc, #36]	@ (800485c <main+0xdc>)
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d1ec      	bne.n	8004816 <main+0x96>
			change_screen_flag = 0;
 800483c:	4b07      	ldr	r3, [pc, #28]	@ (800485c <main+0xdc>)
 800483e:	2200      	movs	r2, #0
 8004840:	701a      	strb	r2, [r3, #0]
			printf("Changing scene\r\n");
 8004842:	4807      	ldr	r0, [pc, #28]	@ (8004860 <main+0xe0>)
 8004844:	f009 fe02 	bl	800e44c <puts>
			set_screen();
 8004848:	f7ff ff52 	bl	80046f0 <set_screen>
		if (green_led_flag == 1) {
 800484c:	e7e3      	b.n	8004816 <main+0x96>
 800484e:	bf00      	nop
 8004850:	40021800 	.word	0x40021800
 8004854:	20026398 	.word	0x20026398
 8004858:	200263ad 	.word	0x200263ad
 800485c:	200263ac 	.word	0x200263ac
 8004860:	080107cc 	.word	0x080107cc

08004864 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004864:	b580      	push	{r7, lr}
 8004866:	b094      	sub	sp, #80	@ 0x50
 8004868:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800486a:	f107 0320 	add.w	r3, r7, #32
 800486e:	2230      	movs	r2, #48	@ 0x30
 8004870:	2100      	movs	r1, #0
 8004872:	4618      	mov	r0, r3
 8004874:	f009 ff00 	bl	800e678 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004878:	f107 030c 	add.w	r3, r7, #12
 800487c:	2200      	movs	r2, #0
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	605a      	str	r2, [r3, #4]
 8004882:	609a      	str	r2, [r3, #8]
 8004884:	60da      	str	r2, [r3, #12]
 8004886:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8004888:	2300      	movs	r3, #0
 800488a:	60bb      	str	r3, [r7, #8]
 800488c:	4b28      	ldr	r3, [pc, #160]	@ (8004930 <SystemClock_Config+0xcc>)
 800488e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004890:	4a27      	ldr	r2, [pc, #156]	@ (8004930 <SystemClock_Config+0xcc>)
 8004892:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004896:	6413      	str	r3, [r2, #64]	@ 0x40
 8004898:	4b25      	ldr	r3, [pc, #148]	@ (8004930 <SystemClock_Config+0xcc>)
 800489a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048a0:	60bb      	str	r3, [r7, #8]
 80048a2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80048a4:	2300      	movs	r3, #0
 80048a6:	607b      	str	r3, [r7, #4]
 80048a8:	4b22      	ldr	r3, [pc, #136]	@ (8004934 <SystemClock_Config+0xd0>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80048b0:	4a20      	ldr	r2, [pc, #128]	@ (8004934 <SystemClock_Config+0xd0>)
 80048b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80048b6:	6013      	str	r3, [r2, #0]
 80048b8:	4b1e      	ldr	r3, [pc, #120]	@ (8004934 <SystemClock_Config+0xd0>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80048c0:	607b      	str	r3, [r7, #4]
 80048c2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80048c4:	2301      	movs	r3, #1
 80048c6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80048c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80048cc:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80048ce:	2302      	movs	r3, #2
 80048d0:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80048d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80048d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80048d8:	2304      	movs	r3, #4
 80048da:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 80048dc:	2348      	movs	r3, #72	@ 0x48
 80048de:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80048e0:	2302      	movs	r3, #2
 80048e2:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 3;
 80048e4:	2303      	movs	r3, #3
 80048e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80048e8:	f107 0320 	add.w	r3, r7, #32
 80048ec:	4618      	mov	r0, r3
 80048ee:	f004 fb3b 	bl	8008f68 <HAL_RCC_OscConfig>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <SystemClock_Config+0x98>
		Error_Handler();
 80048f8:	f000 f860 	bl	80049bc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80048fc:	230f      	movs	r3, #15
 80048fe:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004900:	2302      	movs	r3, #2
 8004902:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004904:	2300      	movs	r3, #0
 8004906:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004908:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800490c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800490e:	2300      	movs	r3, #0
 8004910:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8004912:	f107 030c 	add.w	r3, r7, #12
 8004916:	2102      	movs	r1, #2
 8004918:	4618      	mov	r0, r3
 800491a:	f004 fd9d 	bl	8009458 <HAL_RCC_ClockConfig>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <SystemClock_Config+0xc4>
		Error_Handler();
 8004924:	f000 f84a 	bl	80049bc <Error_Handler>
	}
}
 8004928:	bf00      	nop
 800492a:	3750      	adds	r7, #80	@ 0x50
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40023800 	.word	0x40023800
 8004934:	40007000 	.word	0x40007000

08004938 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a14      	ldr	r2, [pc, #80]	@ (8004998 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d102      	bne.n	8004950 <HAL_TIM_PeriodElapsedCallback+0x18>
		HAL_IncTick();
 800494a:	f000 fca3 	bl	8005294 <HAL_IncTick>
		ball_move(&speed_x, &speed_y);
	} else if (htim->Instance == TIM10) {
		second_pasted++;
	}
	/* USER CODE END Callback 1 */
}
 800494e:	e01f      	b.n	8004990 <HAL_TIM_PeriodElapsedCallback+0x58>
	else if (htim->Instance == TIM7) {
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a11      	ldr	r2, [pc, #68]	@ (800499c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d110      	bne.n	800497c <HAL_TIM_PeriodElapsedCallback+0x44>
		gyro_get_filtered_data(&gyro_raw_data_s);
 800495a:	4811      	ldr	r0, [pc, #68]	@ (80049a0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800495c:	f7fd fa38 	bl	8001dd0 <gyro_get_filtered_data>
		gyro_compensate_and_scale(&gyro_raw_data_s, &gyro_offset_s,
 8004960:	4a10      	ldr	r2, [pc, #64]	@ (80049a4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004962:	4911      	ldr	r1, [pc, #68]	@ (80049a8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8004964:	480e      	ldr	r0, [pc, #56]	@ (80049a0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8004966:	f7fd fc57 	bl	8002218 <gyro_compensate_and_scale>
		ball_set_speed(&speed_x, &speed_y);
 800496a:	4910      	ldr	r1, [pc, #64]	@ (80049ac <HAL_TIM_PeriodElapsedCallback+0x74>)
 800496c:	4810      	ldr	r0, [pc, #64]	@ (80049b0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800496e:	f7fc fb13 	bl	8000f98 <ball_set_speed>
		ball_move(&speed_x, &speed_y);
 8004972:	490e      	ldr	r1, [pc, #56]	@ (80049ac <HAL_TIM_PeriodElapsedCallback+0x74>)
 8004974:	480e      	ldr	r0, [pc, #56]	@ (80049b0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8004976:	f7fc fc03 	bl	8001180 <ball_move>
}
 800497a:	e009      	b.n	8004990 <HAL_TIM_PeriodElapsedCallback+0x58>
	} else if (htim->Instance == TIM10) {
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a0c      	ldr	r2, [pc, #48]	@ (80049b4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d104      	bne.n	8004990 <HAL_TIM_PeriodElapsedCallback+0x58>
		second_pasted++;
 8004986:	4b0c      	ldr	r3, [pc, #48]	@ (80049b8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	3301      	adds	r3, #1
 800498c:	4a0a      	ldr	r2, [pc, #40]	@ (80049b8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800498e:	6013      	str	r3, [r2, #0]
}
 8004990:	bf00      	nop
 8004992:	3708      	adds	r7, #8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	40001000 	.word	0x40001000
 800499c:	40001400 	.word	0x40001400
 80049a0:	20026388 	.word	0x20026388
 80049a4:	20026390 	.word	0x20026390
 80049a8:	20026398 	.word	0x20026398
 80049ac:	200263a0 	.word	0x200263a0
 80049b0:	2002639e 	.word	0x2002639e
 80049b4:	40014400 	.word	0x40014400
 80049b8:	200263a4 	.word	0x200263a4

080049bc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80049c0:	b672      	cpsid	i
}
 80049c2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80049c4:	bf00      	nop
 80049c6:	e7fd      	b.n	80049c4 <Error_Handler+0x8>

080049c8 <spi5_acquire>:
/* USER CODE BEGIN 0 */


static volatile bool spi5_busy = false;  //flaga informująca czy SPI5 jest zajęte

bool spi5_acquire(void) {  //zajmij SPI, gdy jest wolne
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0

	if (spi5_busy) return false;
 80049cc:	4b07      	ldr	r3, [pc, #28]	@ (80049ec <spi5_acquire+0x24>)
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <spi5_acquire+0x12>
 80049d6:	2300      	movs	r3, #0
 80049d8:	e003      	b.n	80049e2 <spi5_acquire+0x1a>

    spi5_busy = true;
 80049da:	4b04      	ldr	r3, [pc, #16]	@ (80049ec <spi5_acquire+0x24>)
 80049dc:	2201      	movs	r2, #1
 80049de:	701a      	strb	r2, [r3, #0]
    return true;
 80049e0:	2301      	movs	r3, #1
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	200263b5 	.word	0x200263b5

080049f0 <spi5_release>:

void spi5_release(void) { //zwolnij SPI
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0
    spi5_busy = false;
 80049f4:	4b03      	ldr	r3, [pc, #12]	@ (8004a04 <spi5_release+0x14>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	701a      	strb	r2, [r3, #0]
}
 80049fa:	bf00      	nop
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	200263b5 	.word	0x200263b5

08004a08 <MX_SPI5_Init>:
SPI_HandleTypeDef hspi5;
DMA_HandleTypeDef hdma_spi5_tx;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8004a0c:	4b17      	ldr	r3, [pc, #92]	@ (8004a6c <MX_SPI5_Init+0x64>)
 8004a0e:	4a18      	ldr	r2, [pc, #96]	@ (8004a70 <MX_SPI5_Init+0x68>)
 8004a10:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8004a12:	4b16      	ldr	r3, [pc, #88]	@ (8004a6c <MX_SPI5_Init+0x64>)
 8004a14:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004a18:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8004a1a:	4b14      	ldr	r3, [pc, #80]	@ (8004a6c <MX_SPI5_Init+0x64>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8004a20:	4b12      	ldr	r3, [pc, #72]	@ (8004a6c <MX_SPI5_Init+0x64>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a26:	4b11      	ldr	r3, [pc, #68]	@ (8004a6c <MX_SPI5_Init+0x64>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8004a6c <MX_SPI5_Init+0x64>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8004a32:	4b0e      	ldr	r3, [pc, #56]	@ (8004a6c <MX_SPI5_Init+0x64>)
 8004a34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a38:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8004a6c <MX_SPI5_Init+0x64>)
 8004a3c:	2218      	movs	r2, #24
 8004a3e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a40:	4b0a      	ldr	r3, [pc, #40]	@ (8004a6c <MX_SPI5_Init+0x64>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8004a46:	4b09      	ldr	r3, [pc, #36]	@ (8004a6c <MX_SPI5_Init+0x64>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a4c:	4b07      	ldr	r3, [pc, #28]	@ (8004a6c <MX_SPI5_Init+0x64>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8004a52:	4b06      	ldr	r3, [pc, #24]	@ (8004a6c <MX_SPI5_Init+0x64>)
 8004a54:	220a      	movs	r2, #10
 8004a56:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8004a58:	4804      	ldr	r0, [pc, #16]	@ (8004a6c <MX_SPI5_Init+0x64>)
 8004a5a:	f005 f943 	bl	8009ce4 <HAL_SPI_Init>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d001      	beq.n	8004a68 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8004a64:	f7ff ffaa 	bl	80049bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8004a68:	bf00      	nop
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	200263b8 	.word	0x200263b8
 8004a70:	40015000 	.word	0x40015000

08004a74 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b08a      	sub	sp, #40	@ 0x28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a7c:	f107 0314 	add.w	r3, r7, #20
 8004a80:	2200      	movs	r2, #0
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	605a      	str	r2, [r3, #4]
 8004a86:	609a      	str	r2, [r3, #8]
 8004a88:	60da      	str	r2, [r3, #12]
 8004a8a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a30      	ldr	r2, [pc, #192]	@ (8004b54 <HAL_SPI_MspInit+0xe0>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d15a      	bne.n	8004b4c <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004a96:	2300      	movs	r3, #0
 8004a98:	613b      	str	r3, [r7, #16]
 8004a9a:	4b2f      	ldr	r3, [pc, #188]	@ (8004b58 <HAL_SPI_MspInit+0xe4>)
 8004a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a9e:	4a2e      	ldr	r2, [pc, #184]	@ (8004b58 <HAL_SPI_MspInit+0xe4>)
 8004aa0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004aa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004aa6:	4b2c      	ldr	r3, [pc, #176]	@ (8004b58 <HAL_SPI_MspInit+0xe4>)
 8004aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aaa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004aae:	613b      	str	r3, [r7, #16]
 8004ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	4b28      	ldr	r3, [pc, #160]	@ (8004b58 <HAL_SPI_MspInit+0xe4>)
 8004ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aba:	4a27      	ldr	r2, [pc, #156]	@ (8004b58 <HAL_SPI_MspInit+0xe4>)
 8004abc:	f043 0320 	orr.w	r3, r3, #32
 8004ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ac2:	4b25      	ldr	r3, [pc, #148]	@ (8004b58 <HAL_SPI_MspInit+0xe4>)
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac6:	f003 0320 	and.w	r3, r3, #32
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8004ace:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8004ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004adc:	2300      	movs	r3, #0
 8004ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8004ae0:	2305      	movs	r3, #5
 8004ae2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004ae4:	f107 0314 	add.w	r3, r7, #20
 8004ae8:	4619      	mov	r1, r3
 8004aea:	481c      	ldr	r0, [pc, #112]	@ (8004b5c <HAL_SPI_MspInit+0xe8>)
 8004aec:	f001 fd76 	bl	80065dc <HAL_GPIO_Init>

    /* SPI5 DMA Init */
    /* SPI5_TX Init */
    hdma_spi5_tx.Instance = DMA2_Stream4;
 8004af0:	4b1b      	ldr	r3, [pc, #108]	@ (8004b60 <HAL_SPI_MspInit+0xec>)
 8004af2:	4a1c      	ldr	r2, [pc, #112]	@ (8004b64 <HAL_SPI_MspInit+0xf0>)
 8004af4:	601a      	str	r2, [r3, #0]
    hdma_spi5_tx.Init.Channel = DMA_CHANNEL_2;
 8004af6:	4b1a      	ldr	r3, [pc, #104]	@ (8004b60 <HAL_SPI_MspInit+0xec>)
 8004af8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004afc:	605a      	str	r2, [r3, #4]
    hdma_spi5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004afe:	4b18      	ldr	r3, [pc, #96]	@ (8004b60 <HAL_SPI_MspInit+0xec>)
 8004b00:	2240      	movs	r2, #64	@ 0x40
 8004b02:	609a      	str	r2, [r3, #8]
    hdma_spi5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b04:	4b16      	ldr	r3, [pc, #88]	@ (8004b60 <HAL_SPI_MspInit+0xec>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	60da      	str	r2, [r3, #12]
    hdma_spi5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004b0a:	4b15      	ldr	r3, [pc, #84]	@ (8004b60 <HAL_SPI_MspInit+0xec>)
 8004b0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004b10:	611a      	str	r2, [r3, #16]
    hdma_spi5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b12:	4b13      	ldr	r3, [pc, #76]	@ (8004b60 <HAL_SPI_MspInit+0xec>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	615a      	str	r2, [r3, #20]
    hdma_spi5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b18:	4b11      	ldr	r3, [pc, #68]	@ (8004b60 <HAL_SPI_MspInit+0xec>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	619a      	str	r2, [r3, #24]
    hdma_spi5_tx.Init.Mode = DMA_NORMAL;
 8004b1e:	4b10      	ldr	r3, [pc, #64]	@ (8004b60 <HAL_SPI_MspInit+0xec>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	61da      	str	r2, [r3, #28]
    hdma_spi5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004b24:	4b0e      	ldr	r3, [pc, #56]	@ (8004b60 <HAL_SPI_MspInit+0xec>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	621a      	str	r2, [r3, #32]
    hdma_spi5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004b60 <HAL_SPI_MspInit+0xec>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi5_tx) != HAL_OK)
 8004b30:	480b      	ldr	r0, [pc, #44]	@ (8004b60 <HAL_SPI_MspInit+0xec>)
 8004b32:	f000 fcf1 	bl	8005518 <HAL_DMA_Init>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8004b3c:	f7ff ff3e 	bl	80049bc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi5_tx);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a07      	ldr	r2, [pc, #28]	@ (8004b60 <HAL_SPI_MspInit+0xec>)
 8004b44:	649a      	str	r2, [r3, #72]	@ 0x48
 8004b46:	4a06      	ldr	r2, [pc, #24]	@ (8004b60 <HAL_SPI_MspInit+0xec>)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8004b4c:	bf00      	nop
 8004b4e:	3728      	adds	r7, #40	@ 0x28
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	40015000 	.word	0x40015000
 8004b58:	40023800 	.word	0x40023800
 8004b5c:	40021400 	.word	0x40021400
 8004b60:	20026410 	.word	0x20026410
 8004b64:	40026470 	.word	0x40026470

08004b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b6e:	2300      	movs	r3, #0
 8004b70:	607b      	str	r3, [r7, #4]
 8004b72:	4b12      	ldr	r3, [pc, #72]	@ (8004bbc <HAL_MspInit+0x54>)
 8004b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b76:	4a11      	ldr	r2, [pc, #68]	@ (8004bbc <HAL_MspInit+0x54>)
 8004b78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8004bbc <HAL_MspInit+0x54>)
 8004b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b86:	607b      	str	r3, [r7, #4]
 8004b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	603b      	str	r3, [r7, #0]
 8004b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8004bbc <HAL_MspInit+0x54>)
 8004b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b92:	4a0a      	ldr	r2, [pc, #40]	@ (8004bbc <HAL_MspInit+0x54>)
 8004b94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b98:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b9a:	4b08      	ldr	r3, [pc, #32]	@ (8004bbc <HAL_MspInit+0x54>)
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ba2:	603b      	str	r3, [r7, #0]
 8004ba4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	210f      	movs	r1, #15
 8004baa:	f06f 0001 	mvn.w	r0, #1
 8004bae:	f000 fc6d 	bl	800548c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004bb2:	bf00      	nop
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	40023800 	.word	0x40023800

08004bc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b08e      	sub	sp, #56	@ 0x38
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	4b33      	ldr	r3, [pc, #204]	@ (8004ca4 <HAL_InitTick+0xe4>)
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd8:	4a32      	ldr	r2, [pc, #200]	@ (8004ca4 <HAL_InitTick+0xe4>)
 8004bda:	f043 0310 	orr.w	r3, r3, #16
 8004bde:	6413      	str	r3, [r2, #64]	@ 0x40
 8004be0:	4b30      	ldr	r3, [pc, #192]	@ (8004ca4 <HAL_InitTick+0xe4>)
 8004be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be4:	f003 0310 	and.w	r3, r3, #16
 8004be8:	60fb      	str	r3, [r7, #12]
 8004bea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004bec:	f107 0210 	add.w	r2, r7, #16
 8004bf0:	f107 0314 	add.w	r3, r7, #20
 8004bf4:	4611      	mov	r1, r2
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f004 fe4e 	bl	8009898 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d103      	bne.n	8004c0e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004c06:	f004 fe1f 	bl	8009848 <HAL_RCC_GetPCLK1Freq>
 8004c0a:	6378      	str	r0, [r7, #52]	@ 0x34
 8004c0c:	e004      	b.n	8004c18 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004c0e:	f004 fe1b 	bl	8009848 <HAL_RCC_GetPCLK1Freq>
 8004c12:	4603      	mov	r3, r0
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c1a:	4a23      	ldr	r2, [pc, #140]	@ (8004ca8 <HAL_InitTick+0xe8>)
 8004c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c20:	0c9b      	lsrs	r3, r3, #18
 8004c22:	3b01      	subs	r3, #1
 8004c24:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004c26:	4b21      	ldr	r3, [pc, #132]	@ (8004cac <HAL_InitTick+0xec>)
 8004c28:	4a21      	ldr	r2, [pc, #132]	@ (8004cb0 <HAL_InitTick+0xf0>)
 8004c2a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8004cac <HAL_InitTick+0xec>)
 8004c2e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004c32:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004c34:	4a1d      	ldr	r2, [pc, #116]	@ (8004cac <HAL_InitTick+0xec>)
 8004c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c38:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8004cac <HAL_InitTick+0xec>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c40:	4b1a      	ldr	r3, [pc, #104]	@ (8004cac <HAL_InitTick+0xec>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c46:	4b19      	ldr	r3, [pc, #100]	@ (8004cac <HAL_InitTick+0xec>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004c4c:	4817      	ldr	r0, [pc, #92]	@ (8004cac <HAL_InitTick+0xec>)
 8004c4e:	f005 ff63 	bl	800ab18 <HAL_TIM_Base_Init>
 8004c52:	4603      	mov	r3, r0
 8004c54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004c58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d11b      	bne.n	8004c98 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004c60:	4812      	ldr	r0, [pc, #72]	@ (8004cac <HAL_InitTick+0xec>)
 8004c62:	f005 ffa9 	bl	800abb8 <HAL_TIM_Base_Start_IT>
 8004c66:	4603      	mov	r3, r0
 8004c68:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004c6c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d111      	bne.n	8004c98 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004c74:	2036      	movs	r0, #54	@ 0x36
 8004c76:	f000 fc25 	bl	80054c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b0f      	cmp	r3, #15
 8004c7e:	d808      	bhi.n	8004c92 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004c80:	2200      	movs	r2, #0
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	2036      	movs	r0, #54	@ 0x36
 8004c86:	f000 fc01 	bl	800548c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8004cb4 <HAL_InitTick+0xf4>)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6013      	str	r3, [r2, #0]
 8004c90:	e002      	b.n	8004c98 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004c98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3738      	adds	r7, #56	@ 0x38
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	431bde83 	.word	0x431bde83
 8004cac:	20026470 	.word	0x20026470
 8004cb0:	40001000 	.word	0x40001000
 8004cb4:	20000010 	.word	0x20000010

08004cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004cbc:	bf00      	nop
 8004cbe:	e7fd      	b.n	8004cbc <NMI_Handler+0x4>

08004cc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004cc4:	bf00      	nop
 8004cc6:	e7fd      	b.n	8004cc4 <HardFault_Handler+0x4>

08004cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ccc:	bf00      	nop
 8004cce:	e7fd      	b.n	8004ccc <MemManage_Handler+0x4>

08004cd0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004cd4:	bf00      	nop
 8004cd6:	e7fd      	b.n	8004cd4 <BusFault_Handler+0x4>

08004cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004cdc:	bf00      	nop
 8004cde:	e7fd      	b.n	8004cdc <UsageFault_Handler+0x4>

08004ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ce4:	bf00      	nop
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
	...

08004cf0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004cf4:	4803      	ldr	r0, [pc, #12]	@ (8004d04 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8004cf6:	f005 fffe 	bl	800acf6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8004cfa:	4803      	ldr	r0, [pc, #12]	@ (8004d08 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8004cfc:	f005 fffb 	bl	800acf6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004d00:	bf00      	nop
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	200264bc 	.word	0x200264bc
 8004d08:	2002654c 	.word	0x2002654c

08004d0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004d10:	4802      	ldr	r0, [pc, #8]	@ (8004d1c <TIM6_DAC_IRQHandler+0x10>)
 8004d12:	f005 fff0 	bl	800acf6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004d16:	bf00      	nop
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	20026470 	.word	0x20026470

08004d20 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004d24:	4802      	ldr	r0, [pc, #8]	@ (8004d30 <TIM7_IRQHandler+0x10>)
 8004d26:	f005 ffe6 	bl	800acf6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004d2a:	bf00      	nop
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	20026504 	.word	0x20026504

08004d34 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_tx);
 8004d38:	4802      	ldr	r0, [pc, #8]	@ (8004d44 <DMA2_Stream4_IRQHandler+0x10>)
 8004d3a:	f000 fcf3 	bl	8005724 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8004d3e:	bf00      	nop
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	20026410 	.word	0x20026410

08004d48 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8004d4c:	4802      	ldr	r0, [pc, #8]	@ (8004d58 <OTG_HS_IRQHandler+0x10>)
 8004d4e:	f001 fe3c 	bl	80069ca <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8004d52:	bf00      	nop
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	200266ec 	.word	0x200266ec

08004d5c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004d60:	4802      	ldr	r0, [pc, #8]	@ (8004d6c <LTDC_IRQHandler+0x10>)
 8004d62:	f003 fe69 	bl	8008a38 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004d66:	bf00      	nop
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	200262e0 	.word	0x200262e0

08004d70 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004d74:	4802      	ldr	r0, [pc, #8]	@ (8004d80 <DMA2D_IRQHandler+0x10>)
 8004d76:	f000 ff88 	bl	8005c8a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8004d7a:	bf00      	nop
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	20000208 	.word	0x20000208

08004d84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
  return 1;
 8004d88:	2301      	movs	r3, #1
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <_kill>:

int _kill(int pid, int sig)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004d9e:	f009 fccd 	bl	800e73c <__errno>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2216      	movs	r2, #22
 8004da6:	601a      	str	r2, [r3, #0]
  return -1;
 8004da8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <_exit>:

void _exit (int status)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f7ff ffe7 	bl	8004d94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004dc6:	bf00      	nop
 8004dc8:	e7fd      	b.n	8004dc6 <_exit+0x12>

08004dca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b086      	sub	sp, #24
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	60f8      	str	r0, [r7, #12]
 8004dd2:	60b9      	str	r1, [r7, #8]
 8004dd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	617b      	str	r3, [r7, #20]
 8004dda:	e00a      	b.n	8004df2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004ddc:	f3af 8000 	nop.w
 8004de0:	4601      	mov	r1, r0
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	1c5a      	adds	r2, r3, #1
 8004de6:	60ba      	str	r2, [r7, #8]
 8004de8:	b2ca      	uxtb	r2, r1
 8004dea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	3301      	adds	r3, #1
 8004df0:	617b      	str	r3, [r7, #20]
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	dbf0      	blt.n	8004ddc <_read+0x12>
  }

  return len;
 8004dfa:	687b      	ldr	r3, [r7, #4]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3718      	adds	r7, #24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004e0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004e2c:	605a      	str	r2, [r3, #4]
  return 0;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <_isatty>:

int _isatty(int file)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004e44:	2301      	movs	r3, #1
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b085      	sub	sp, #20
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	60f8      	str	r0, [r7, #12]
 8004e5a:	60b9      	str	r1, [r7, #8]
 8004e5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3714      	adds	r7, #20
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e74:	4a14      	ldr	r2, [pc, #80]	@ (8004ec8 <_sbrk+0x5c>)
 8004e76:	4b15      	ldr	r3, [pc, #84]	@ (8004ecc <_sbrk+0x60>)
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e80:	4b13      	ldr	r3, [pc, #76]	@ (8004ed0 <_sbrk+0x64>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d102      	bne.n	8004e8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e88:	4b11      	ldr	r3, [pc, #68]	@ (8004ed0 <_sbrk+0x64>)
 8004e8a:	4a12      	ldr	r2, [pc, #72]	@ (8004ed4 <_sbrk+0x68>)
 8004e8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e8e:	4b10      	ldr	r3, [pc, #64]	@ (8004ed0 <_sbrk+0x64>)
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4413      	add	r3, r2
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d207      	bcs.n	8004eac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004e9c:	f009 fc4e 	bl	800e73c <__errno>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	220c      	movs	r2, #12
 8004ea4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eaa:	e009      	b.n	8004ec0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004eac:	4b08      	ldr	r3, [pc, #32]	@ (8004ed0 <_sbrk+0x64>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004eb2:	4b07      	ldr	r3, [pc, #28]	@ (8004ed0 <_sbrk+0x64>)
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4413      	add	r3, r2
 8004eba:	4a05      	ldr	r2, [pc, #20]	@ (8004ed0 <_sbrk+0x64>)
 8004ebc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3718      	adds	r7, #24
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	20030000 	.word	0x20030000
 8004ecc:	00000400 	.word	0x00000400
 8004ed0:	200264b8 	.word	0x200264b8
 8004ed4:	20026c18 	.word	0x20026c18

08004ed8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004edc:	4b06      	ldr	r3, [pc, #24]	@ (8004ef8 <SystemInit+0x20>)
 8004ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ee2:	4a05      	ldr	r2, [pc, #20]	@ (8004ef8 <SystemInit+0x20>)
 8004ee4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004ee8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004eec:	bf00      	nop
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	e000ed00 	.word	0xe000ed00

08004efc <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f02:	f107 0308 	add.w	r3, r7, #8
 8004f06:	2200      	movs	r2, #0
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	605a      	str	r2, [r3, #4]
 8004f0c:	609a      	str	r2, [r3, #8]
 8004f0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f10:	463b      	mov	r3, r7
 8004f12:	2200      	movs	r2, #0
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004f18:	4b1e      	ldr	r3, [pc, #120]	@ (8004f94 <MX_TIM1_Init+0x98>)
 8004f1a:	4a1f      	ldr	r2, [pc, #124]	@ (8004f98 <MX_TIM1_Init+0x9c>)
 8004f1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8004f94 <MX_TIM1_Init+0x98>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f24:	4b1b      	ldr	r3, [pc, #108]	@ (8004f94 <MX_TIM1_Init+0x98>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8004f94 <MX_TIM1_Init+0x98>)
 8004f2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f30:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f32:	4b18      	ldr	r3, [pc, #96]	@ (8004f94 <MX_TIM1_Init+0x98>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004f38:	4b16      	ldr	r3, [pc, #88]	@ (8004f94 <MX_TIM1_Init+0x98>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f3e:	4b15      	ldr	r3, [pc, #84]	@ (8004f94 <MX_TIM1_Init+0x98>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004f44:	4813      	ldr	r0, [pc, #76]	@ (8004f94 <MX_TIM1_Init+0x98>)
 8004f46:	f005 fde7 	bl	800ab18 <HAL_TIM_Base_Init>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8004f50:	f7ff fd34 	bl	80049bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004f5a:	f107 0308 	add.w	r3, r7, #8
 8004f5e:	4619      	mov	r1, r3
 8004f60:	480c      	ldr	r0, [pc, #48]	@ (8004f94 <MX_TIM1_Init+0x98>)
 8004f62:	f005 ffb8 	bl	800aed6 <HAL_TIM_ConfigClockSource>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8004f6c:	f7ff fd26 	bl	80049bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f70:	2300      	movs	r3, #0
 8004f72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f74:	2300      	movs	r3, #0
 8004f76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004f78:	463b      	mov	r3, r7
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	4805      	ldr	r0, [pc, #20]	@ (8004f94 <MX_TIM1_Init+0x98>)
 8004f7e:	f006 f9df 	bl	800b340 <HAL_TIMEx_MasterConfigSynchronization>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004f88:	f7ff fd18 	bl	80049bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004f8c:	bf00      	nop
 8004f8e:	3718      	adds	r7, #24
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	200264bc 	.word	0x200264bc
 8004f98:	40010000 	.word	0x40010000

08004f9c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fa2:	463b      	mov	r3, r7
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004faa:	4b15      	ldr	r3, [pc, #84]	@ (8005000 <MX_TIM7_Init+0x64>)
 8004fac:	4a15      	ldr	r2, [pc, #84]	@ (8005004 <MX_TIM7_Init+0x68>)
 8004fae:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = TIM7_PRESCALER;
 8004fb0:	4b13      	ldr	r3, [pc, #76]	@ (8005000 <MX_TIM7_Init+0x64>)
 8004fb2:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8004fb6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fb8:	4b11      	ldr	r3, [pc, #68]	@ (8005000 <MX_TIM7_Init+0x64>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = TIM7_PERIOD;
 8004fbe:	4b10      	ldr	r3, [pc, #64]	@ (8005000 <MX_TIM7_Init+0x64>)
 8004fc0:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8004fc4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8005000 <MX_TIM7_Init+0x64>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004fcc:	480c      	ldr	r0, [pc, #48]	@ (8005000 <MX_TIM7_Init+0x64>)
 8004fce:	f005 fda3 	bl	800ab18 <HAL_TIM_Base_Init>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d001      	beq.n	8004fdc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004fd8:	f7ff fcf0 	bl	80049bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004fe4:	463b      	mov	r3, r7
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	4805      	ldr	r0, [pc, #20]	@ (8005000 <MX_TIM7_Init+0x64>)
 8004fea:	f006 f9a9 	bl	800b340 <HAL_TIMEx_MasterConfigSynchronization>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8004ff4:	f7ff fce2 	bl	80049bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004ff8:	bf00      	nop
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	20026504 	.word	0x20026504
 8005004:	40001400 	.word	0x40001400

08005008 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800500c:	4b0e      	ldr	r3, [pc, #56]	@ (8005048 <MX_TIM10_Init+0x40>)
 800500e:	4a0f      	ldr	r2, [pc, #60]	@ (800504c <MX_TIM10_Init+0x44>)
 8005010:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = TIM10_PRESCALER;
 8005012:	4b0d      	ldr	r3, [pc, #52]	@ (8005048 <MX_TIM10_Init+0x40>)
 8005014:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8005018:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800501a:	4b0b      	ldr	r3, [pc, #44]	@ (8005048 <MX_TIM10_Init+0x40>)
 800501c:	2200      	movs	r2, #0
 800501e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = TIM10_PERIOD;
 8005020:	4b09      	ldr	r3, [pc, #36]	@ (8005048 <MX_TIM10_Init+0x40>)
 8005022:	f242 720f 	movw	r2, #9999	@ 0x270f
 8005026:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005028:	4b07      	ldr	r3, [pc, #28]	@ (8005048 <MX_TIM10_Init+0x40>)
 800502a:	2200      	movs	r2, #0
 800502c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800502e:	4b06      	ldr	r3, [pc, #24]	@ (8005048 <MX_TIM10_Init+0x40>)
 8005030:	2200      	movs	r2, #0
 8005032:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8005034:	4804      	ldr	r0, [pc, #16]	@ (8005048 <MX_TIM10_Init+0x40>)
 8005036:	f005 fd6f 	bl	800ab18 <HAL_TIM_Base_Init>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8005040:	f7ff fcbc 	bl	80049bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8005044:	bf00      	nop
 8005046:	bd80      	pop	{r7, pc}
 8005048:	2002654c 	.word	0x2002654c
 800504c:	40014400 	.word	0x40014400

08005050 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a2a      	ldr	r2, [pc, #168]	@ (8005108 <HAL_TIM_Base_MspInit+0xb8>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d116      	bne.n	8005090 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005062:	2300      	movs	r3, #0
 8005064:	617b      	str	r3, [r7, #20]
 8005066:	4b29      	ldr	r3, [pc, #164]	@ (800510c <HAL_TIM_Base_MspInit+0xbc>)
 8005068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800506a:	4a28      	ldr	r2, [pc, #160]	@ (800510c <HAL_TIM_Base_MspInit+0xbc>)
 800506c:	f043 0301 	orr.w	r3, r3, #1
 8005070:	6453      	str	r3, [r2, #68]	@ 0x44
 8005072:	4b26      	ldr	r3, [pc, #152]	@ (800510c <HAL_TIM_Base_MspInit+0xbc>)
 8005074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	617b      	str	r3, [r7, #20]
 800507c:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800507e:	2200      	movs	r2, #0
 8005080:	2105      	movs	r1, #5
 8005082:	2019      	movs	r0, #25
 8005084:	f000 fa02 	bl	800548c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005088:	2019      	movs	r0, #25
 800508a:	f000 fa1b 	bl	80054c4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800508e:	e036      	b.n	80050fe <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM7)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a1e      	ldr	r2, [pc, #120]	@ (8005110 <HAL_TIM_Base_MspInit+0xc0>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d116      	bne.n	80050c8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800509a:	2300      	movs	r3, #0
 800509c:	613b      	str	r3, [r7, #16]
 800509e:	4b1b      	ldr	r3, [pc, #108]	@ (800510c <HAL_TIM_Base_MspInit+0xbc>)
 80050a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a2:	4a1a      	ldr	r2, [pc, #104]	@ (800510c <HAL_TIM_Base_MspInit+0xbc>)
 80050a4:	f043 0320 	orr.w	r3, r3, #32
 80050a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80050aa:	4b18      	ldr	r3, [pc, #96]	@ (800510c <HAL_TIM_Base_MspInit+0xbc>)
 80050ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ae:	f003 0320 	and.w	r3, r3, #32
 80050b2:	613b      	str	r3, [r7, #16]
 80050b4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80050b6:	2200      	movs	r2, #0
 80050b8:	2105      	movs	r1, #5
 80050ba:	2037      	movs	r0, #55	@ 0x37
 80050bc:	f000 f9e6 	bl	800548c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80050c0:	2037      	movs	r0, #55	@ 0x37
 80050c2:	f000 f9ff 	bl	80054c4 <HAL_NVIC_EnableIRQ>
}
 80050c6:	e01a      	b.n	80050fe <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM10)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a11      	ldr	r2, [pc, #68]	@ (8005114 <HAL_TIM_Base_MspInit+0xc4>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d115      	bne.n	80050fe <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80050d2:	2300      	movs	r3, #0
 80050d4:	60fb      	str	r3, [r7, #12]
 80050d6:	4b0d      	ldr	r3, [pc, #52]	@ (800510c <HAL_TIM_Base_MspInit+0xbc>)
 80050d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050da:	4a0c      	ldr	r2, [pc, #48]	@ (800510c <HAL_TIM_Base_MspInit+0xbc>)
 80050dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80050e2:	4b0a      	ldr	r3, [pc, #40]	@ (800510c <HAL_TIM_Base_MspInit+0xbc>)
 80050e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80050ee:	2200      	movs	r2, #0
 80050f0:	2105      	movs	r1, #5
 80050f2:	2019      	movs	r0, #25
 80050f4:	f000 f9ca 	bl	800548c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80050f8:	2019      	movs	r0, #25
 80050fa:	f000 f9e3 	bl	80054c4 <HAL_NVIC_EnableIRQ>
}
 80050fe:	bf00      	nop
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	40010000 	.word	0x40010000
 800510c:	40023800 	.word	0x40023800
 8005110:	40001400 	.word	0x40001400
 8005114:	40014400 	.word	0x40014400

08005118 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800511c:	4b11      	ldr	r3, [pc, #68]	@ (8005164 <MX_USART1_UART_Init+0x4c>)
 800511e:	4a12      	ldr	r2, [pc, #72]	@ (8005168 <MX_USART1_UART_Init+0x50>)
 8005120:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005122:	4b10      	ldr	r3, [pc, #64]	@ (8005164 <MX_USART1_UART_Init+0x4c>)
 8005124:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005128:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800512a:	4b0e      	ldr	r3, [pc, #56]	@ (8005164 <MX_USART1_UART_Init+0x4c>)
 800512c:	2200      	movs	r2, #0
 800512e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005130:	4b0c      	ldr	r3, [pc, #48]	@ (8005164 <MX_USART1_UART_Init+0x4c>)
 8005132:	2200      	movs	r2, #0
 8005134:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005136:	4b0b      	ldr	r3, [pc, #44]	@ (8005164 <MX_USART1_UART_Init+0x4c>)
 8005138:	2200      	movs	r2, #0
 800513a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800513c:	4b09      	ldr	r3, [pc, #36]	@ (8005164 <MX_USART1_UART_Init+0x4c>)
 800513e:	220c      	movs	r2, #12
 8005140:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005142:	4b08      	ldr	r3, [pc, #32]	@ (8005164 <MX_USART1_UART_Init+0x4c>)
 8005144:	2200      	movs	r2, #0
 8005146:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005148:	4b06      	ldr	r3, [pc, #24]	@ (8005164 <MX_USART1_UART_Init+0x4c>)
 800514a:	2200      	movs	r2, #0
 800514c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800514e:	4805      	ldr	r0, [pc, #20]	@ (8005164 <MX_USART1_UART_Init+0x4c>)
 8005150:	f006 f986 	bl	800b460 <HAL_UART_Init>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800515a:	f7ff fc2f 	bl	80049bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800515e:	bf00      	nop
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	20026594 	.word	0x20026594
 8005168:	40011000 	.word	0x40011000

0800516c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b08a      	sub	sp, #40	@ 0x28
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005174:	f107 0314 	add.w	r3, r7, #20
 8005178:	2200      	movs	r2, #0
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	605a      	str	r2, [r3, #4]
 800517e:	609a      	str	r2, [r3, #8]
 8005180:	60da      	str	r2, [r3, #12]
 8005182:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a19      	ldr	r2, [pc, #100]	@ (80051f0 <HAL_UART_MspInit+0x84>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d12c      	bne.n	80051e8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800518e:	2300      	movs	r3, #0
 8005190:	613b      	str	r3, [r7, #16]
 8005192:	4b18      	ldr	r3, [pc, #96]	@ (80051f4 <HAL_UART_MspInit+0x88>)
 8005194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005196:	4a17      	ldr	r2, [pc, #92]	@ (80051f4 <HAL_UART_MspInit+0x88>)
 8005198:	f043 0310 	orr.w	r3, r3, #16
 800519c:	6453      	str	r3, [r2, #68]	@ 0x44
 800519e:	4b15      	ldr	r3, [pc, #84]	@ (80051f4 <HAL_UART_MspInit+0x88>)
 80051a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051a2:	f003 0310 	and.w	r3, r3, #16
 80051a6:	613b      	str	r3, [r7, #16]
 80051a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051aa:	2300      	movs	r3, #0
 80051ac:	60fb      	str	r3, [r7, #12]
 80051ae:	4b11      	ldr	r3, [pc, #68]	@ (80051f4 <HAL_UART_MspInit+0x88>)
 80051b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b2:	4a10      	ldr	r2, [pc, #64]	@ (80051f4 <HAL_UART_MspInit+0x88>)
 80051b4:	f043 0301 	orr.w	r3, r3, #1
 80051b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80051ba:	4b0e      	ldr	r3, [pc, #56]	@ (80051f4 <HAL_UART_MspInit+0x88>)
 80051bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80051c6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80051ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051cc:	2302      	movs	r3, #2
 80051ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d0:	2300      	movs	r3, #0
 80051d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051d4:	2303      	movs	r3, #3
 80051d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80051d8:	2307      	movs	r3, #7
 80051da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051dc:	f107 0314 	add.w	r3, r7, #20
 80051e0:	4619      	mov	r1, r3
 80051e2:	4805      	ldr	r0, [pc, #20]	@ (80051f8 <HAL_UART_MspInit+0x8c>)
 80051e4:	f001 f9fa 	bl	80065dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80051e8:	bf00      	nop
 80051ea:	3728      	adds	r7, #40	@ 0x28
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	40011000 	.word	0x40011000
 80051f4:	40023800 	.word	0x40023800
 80051f8:	40020000 	.word	0x40020000

080051fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80051fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005234 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005200:	f7ff fe6a 	bl	8004ed8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005204:	480c      	ldr	r0, [pc, #48]	@ (8005238 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005206:	490d      	ldr	r1, [pc, #52]	@ (800523c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005208:	4a0d      	ldr	r2, [pc, #52]	@ (8005240 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800520a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800520c:	e002      	b.n	8005214 <LoopCopyDataInit>

0800520e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800520e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005212:	3304      	adds	r3, #4

08005214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005218:	d3f9      	bcc.n	800520e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800521a:	4a0a      	ldr	r2, [pc, #40]	@ (8005244 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800521c:	4c0a      	ldr	r4, [pc, #40]	@ (8005248 <LoopFillZerobss+0x22>)
  movs r3, #0
 800521e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005220:	e001      	b.n	8005226 <LoopFillZerobss>

08005222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005224:	3204      	adds	r2, #4

08005226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005228:	d3fb      	bcc.n	8005222 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800522a:	f009 fa8d 	bl	800e748 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800522e:	f7ff faa7 	bl	8004780 <main>
  bx  lr    
 8005232:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8005234:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8005238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800523c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8005240:	08010ffc 	.word	0x08010ffc
  ldr r2, =_sbss
 8005244:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8005248:	20026c18 	.word	0x20026c18

0800524c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800524c:	e7fe      	b.n	800524c <ADC_IRQHandler>
	...

08005250 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005254:	4b0e      	ldr	r3, [pc, #56]	@ (8005290 <HAL_Init+0x40>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a0d      	ldr	r2, [pc, #52]	@ (8005290 <HAL_Init+0x40>)
 800525a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800525e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005260:	4b0b      	ldr	r3, [pc, #44]	@ (8005290 <HAL_Init+0x40>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a0a      	ldr	r2, [pc, #40]	@ (8005290 <HAL_Init+0x40>)
 8005266:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800526a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800526c:	4b08      	ldr	r3, [pc, #32]	@ (8005290 <HAL_Init+0x40>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a07      	ldr	r2, [pc, #28]	@ (8005290 <HAL_Init+0x40>)
 8005272:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005276:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005278:	2003      	movs	r0, #3
 800527a:	f000 f8fc 	bl	8005476 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800527e:	200f      	movs	r0, #15
 8005280:	f7ff fc9e 	bl	8004bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005284:	f7ff fc70 	bl	8004b68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	40023c00 	.word	0x40023c00

08005294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005298:	4b06      	ldr	r3, [pc, #24]	@ (80052b4 <HAL_IncTick+0x20>)
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	461a      	mov	r2, r3
 800529e:	4b06      	ldr	r3, [pc, #24]	@ (80052b8 <HAL_IncTick+0x24>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4413      	add	r3, r2
 80052a4:	4a04      	ldr	r2, [pc, #16]	@ (80052b8 <HAL_IncTick+0x24>)
 80052a6:	6013      	str	r3, [r2, #0]
}
 80052a8:	bf00      	nop
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	20000014 	.word	0x20000014
 80052b8:	200265dc 	.word	0x200265dc

080052bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80052bc:	b480      	push	{r7}
 80052be:	af00      	add	r7, sp, #0
  return uwTick;
 80052c0:	4b03      	ldr	r3, [pc, #12]	@ (80052d0 <HAL_GetTick+0x14>)
 80052c2:	681b      	ldr	r3, [r3, #0]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	200265dc 	.word	0x200265dc

080052d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80052dc:	f7ff ffee 	bl	80052bc <HAL_GetTick>
 80052e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ec:	d005      	beq.n	80052fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80052ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005318 <HAL_Delay+0x44>)
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	461a      	mov	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4413      	add	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80052fa:	bf00      	nop
 80052fc:	f7ff ffde 	bl	80052bc <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	429a      	cmp	r2, r3
 800530a:	d8f7      	bhi.n	80052fc <HAL_Delay+0x28>
  {
  }
}
 800530c:	bf00      	nop
 800530e:	bf00      	nop
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	20000014 	.word	0x20000014

0800531c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800532c:	4b0c      	ldr	r3, [pc, #48]	@ (8005360 <__NVIC_SetPriorityGrouping+0x44>)
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005338:	4013      	ands	r3, r2
 800533a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005344:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005348:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800534c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800534e:	4a04      	ldr	r2, [pc, #16]	@ (8005360 <__NVIC_SetPriorityGrouping+0x44>)
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	60d3      	str	r3, [r2, #12]
}
 8005354:	bf00      	nop
 8005356:	3714      	adds	r7, #20
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	e000ed00 	.word	0xe000ed00

08005364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005364:	b480      	push	{r7}
 8005366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005368:	4b04      	ldr	r3, [pc, #16]	@ (800537c <__NVIC_GetPriorityGrouping+0x18>)
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	0a1b      	lsrs	r3, r3, #8
 800536e:	f003 0307 	and.w	r3, r3, #7
}
 8005372:	4618      	mov	r0, r3
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	e000ed00 	.word	0xe000ed00

08005380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	4603      	mov	r3, r0
 8005388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800538a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800538e:	2b00      	cmp	r3, #0
 8005390:	db0b      	blt.n	80053aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005392:	79fb      	ldrb	r3, [r7, #7]
 8005394:	f003 021f 	and.w	r2, r3, #31
 8005398:	4907      	ldr	r1, [pc, #28]	@ (80053b8 <__NVIC_EnableIRQ+0x38>)
 800539a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800539e:	095b      	lsrs	r3, r3, #5
 80053a0:	2001      	movs	r0, #1
 80053a2:	fa00 f202 	lsl.w	r2, r0, r2
 80053a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	e000e100 	.word	0xe000e100

080053bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	4603      	mov	r3, r0
 80053c4:	6039      	str	r1, [r7, #0]
 80053c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	db0a      	blt.n	80053e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	b2da      	uxtb	r2, r3
 80053d4:	490c      	ldr	r1, [pc, #48]	@ (8005408 <__NVIC_SetPriority+0x4c>)
 80053d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053da:	0112      	lsls	r2, r2, #4
 80053dc:	b2d2      	uxtb	r2, r2
 80053de:	440b      	add	r3, r1
 80053e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053e4:	e00a      	b.n	80053fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	4908      	ldr	r1, [pc, #32]	@ (800540c <__NVIC_SetPriority+0x50>)
 80053ec:	79fb      	ldrb	r3, [r7, #7]
 80053ee:	f003 030f 	and.w	r3, r3, #15
 80053f2:	3b04      	subs	r3, #4
 80053f4:	0112      	lsls	r2, r2, #4
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	440b      	add	r3, r1
 80053fa:	761a      	strb	r2, [r3, #24]
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	e000e100 	.word	0xe000e100
 800540c:	e000ed00 	.word	0xe000ed00

08005410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005410:	b480      	push	{r7}
 8005412:	b089      	sub	sp, #36	@ 0x24
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f003 0307 	and.w	r3, r3, #7
 8005422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	f1c3 0307 	rsb	r3, r3, #7
 800542a:	2b04      	cmp	r3, #4
 800542c:	bf28      	it	cs
 800542e:	2304      	movcs	r3, #4
 8005430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	3304      	adds	r3, #4
 8005436:	2b06      	cmp	r3, #6
 8005438:	d902      	bls.n	8005440 <NVIC_EncodePriority+0x30>
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	3b03      	subs	r3, #3
 800543e:	e000      	b.n	8005442 <NVIC_EncodePriority+0x32>
 8005440:	2300      	movs	r3, #0
 8005442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005444:	f04f 32ff 	mov.w	r2, #4294967295
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	fa02 f303 	lsl.w	r3, r2, r3
 800544e:	43da      	mvns	r2, r3
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	401a      	ands	r2, r3
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005458:	f04f 31ff 	mov.w	r1, #4294967295
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	fa01 f303 	lsl.w	r3, r1, r3
 8005462:	43d9      	mvns	r1, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005468:	4313      	orrs	r3, r2
         );
}
 800546a:	4618      	mov	r0, r3
 800546c:	3724      	adds	r7, #36	@ 0x24
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b082      	sub	sp, #8
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f7ff ff4c 	bl	800531c <__NVIC_SetPriorityGrouping>
}
 8005484:	bf00      	nop
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	4603      	mov	r3, r0
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
 8005498:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800549a:	2300      	movs	r3, #0
 800549c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800549e:	f7ff ff61 	bl	8005364 <__NVIC_GetPriorityGrouping>
 80054a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	68b9      	ldr	r1, [r7, #8]
 80054a8:	6978      	ldr	r0, [r7, #20]
 80054aa:	f7ff ffb1 	bl	8005410 <NVIC_EncodePriority>
 80054ae:	4602      	mov	r2, r0
 80054b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054b4:	4611      	mov	r1, r2
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7ff ff80 	bl	80053bc <__NVIC_SetPriority>
}
 80054bc:	bf00      	nop
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	4603      	mov	r3, r0
 80054cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7ff ff54 	bl	8005380 <__NVIC_EnableIRQ>
}
 80054d8:	bf00      	nop
 80054da:	3708      	adds	r7, #8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e00e      	b.n	8005510 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	795b      	ldrb	r3, [r3, #5]
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d105      	bne.n	8005508 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7fc f866 	bl	80015d4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005524:	f7ff feca 	bl	80052bc <HAL_GetTick>
 8005528:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e099      	b.n	8005668 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2202      	movs	r2, #2
 8005538:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 0201 	bic.w	r2, r2, #1
 8005552:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005554:	e00f      	b.n	8005576 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005556:	f7ff feb1 	bl	80052bc <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	2b05      	cmp	r3, #5
 8005562:	d908      	bls.n	8005576 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2220      	movs	r2, #32
 8005568:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2203      	movs	r2, #3
 800556e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e078      	b.n	8005668 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1e8      	bne.n	8005556 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	4b38      	ldr	r3, [pc, #224]	@ (8005670 <HAL_DMA_Init+0x158>)
 8005590:	4013      	ands	r3, r2
 8005592:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055cc:	2b04      	cmp	r3, #4
 80055ce:	d107      	bne.n	80055e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d8:	4313      	orrs	r3, r2
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	4313      	orrs	r3, r2
 80055de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f023 0307 	bic.w	r3, r3, #7
 80055f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	4313      	orrs	r3, r2
 8005600:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005606:	2b04      	cmp	r3, #4
 8005608:	d117      	bne.n	800563a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	4313      	orrs	r3, r2
 8005612:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00e      	beq.n	800563a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 fa6f 	bl	8005b00 <DMA_CheckFifoParam>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d008      	beq.n	800563a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2240      	movs	r2, #64	@ 0x40
 800562c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005636:	2301      	movs	r3, #1
 8005638:	e016      	b.n	8005668 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 fa26 	bl	8005a94 <DMA_CalcBaseAndBitshift>
 8005648:	4603      	mov	r3, r0
 800564a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005650:	223f      	movs	r2, #63	@ 0x3f
 8005652:	409a      	lsls	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3718      	adds	r7, #24
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	f010803f 	.word	0xf010803f

08005674 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
 8005680:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005682:	2300      	movs	r3, #0
 8005684:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800568a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005692:	2b01      	cmp	r3, #1
 8005694:	d101      	bne.n	800569a <HAL_DMA_Start_IT+0x26>
 8005696:	2302      	movs	r3, #2
 8005698:	e040      	b.n	800571c <HAL_DMA_Start_IT+0xa8>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d12f      	bne.n	800570e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2202      	movs	r2, #2
 80056b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	68b9      	ldr	r1, [r7, #8]
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f000 f9b8 	bl	8005a38 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056cc:	223f      	movs	r2, #63	@ 0x3f
 80056ce:	409a      	lsls	r2, r3
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f042 0216 	orr.w	r2, r2, #22
 80056e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d007      	beq.n	80056fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0208 	orr.w	r2, r2, #8
 80056fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f042 0201 	orr.w	r2, r2, #1
 800570a:	601a      	str	r2, [r3, #0]
 800570c:	e005      	b.n	800571a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005716:	2302      	movs	r3, #2
 8005718:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800571a:	7dfb      	ldrb	r3, [r7, #23]
}
 800571c:	4618      	mov	r0, r3
 800571e:	3718      	adds	r7, #24
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800572c:	2300      	movs	r3, #0
 800572e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005730:	4b8e      	ldr	r3, [pc, #568]	@ (800596c <HAL_DMA_IRQHandler+0x248>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a8e      	ldr	r2, [pc, #568]	@ (8005970 <HAL_DMA_IRQHandler+0x24c>)
 8005736:	fba2 2303 	umull	r2, r3, r2, r3
 800573a:	0a9b      	lsrs	r3, r3, #10
 800573c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005742:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800574e:	2208      	movs	r2, #8
 8005750:	409a      	lsls	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	4013      	ands	r3, r2
 8005756:	2b00      	cmp	r3, #0
 8005758:	d01a      	beq.n	8005790 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0304 	and.w	r3, r3, #4
 8005764:	2b00      	cmp	r3, #0
 8005766:	d013      	beq.n	8005790 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f022 0204 	bic.w	r2, r2, #4
 8005776:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800577c:	2208      	movs	r2, #8
 800577e:	409a      	lsls	r2, r3
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005788:	f043 0201 	orr.w	r2, r3, #1
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005794:	2201      	movs	r2, #1
 8005796:	409a      	lsls	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4013      	ands	r3, r2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d012      	beq.n	80057c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00b      	beq.n	80057c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057b2:	2201      	movs	r2, #1
 80057b4:	409a      	lsls	r2, r3
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057be:	f043 0202 	orr.w	r2, r3, #2
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ca:	2204      	movs	r2, #4
 80057cc:	409a      	lsls	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	4013      	ands	r3, r2
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d012      	beq.n	80057fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00b      	beq.n	80057fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057e8:	2204      	movs	r2, #4
 80057ea:	409a      	lsls	r2, r3
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057f4:	f043 0204 	orr.w	r2, r3, #4
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005800:	2210      	movs	r2, #16
 8005802:	409a      	lsls	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4013      	ands	r3, r2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d043      	beq.n	8005894 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0308 	and.w	r3, r3, #8
 8005816:	2b00      	cmp	r3, #0
 8005818:	d03c      	beq.n	8005894 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800581e:	2210      	movs	r2, #16
 8005820:	409a      	lsls	r2, r3
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d018      	beq.n	8005866 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d108      	bne.n	8005854 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005846:	2b00      	cmp	r3, #0
 8005848:	d024      	beq.n	8005894 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	4798      	blx	r3
 8005852:	e01f      	b.n	8005894 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005858:	2b00      	cmp	r3, #0
 800585a:	d01b      	beq.n	8005894 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	4798      	blx	r3
 8005864:	e016      	b.n	8005894 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005870:	2b00      	cmp	r3, #0
 8005872:	d107      	bne.n	8005884 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 0208 	bic.w	r2, r2, #8
 8005882:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005888:	2b00      	cmp	r3, #0
 800588a:	d003      	beq.n	8005894 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005898:	2220      	movs	r2, #32
 800589a:	409a      	lsls	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	4013      	ands	r3, r2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 808f 	beq.w	80059c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0310 	and.w	r3, r3, #16
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 8087 	beq.w	80059c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058ba:	2220      	movs	r2, #32
 80058bc:	409a      	lsls	r2, r3
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b05      	cmp	r3, #5
 80058cc:	d136      	bne.n	800593c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0216 	bic.w	r2, r2, #22
 80058dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	695a      	ldr	r2, [r3, #20]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80058ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d103      	bne.n	80058fe <HAL_DMA_IRQHandler+0x1da>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d007      	beq.n	800590e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f022 0208 	bic.w	r2, r2, #8
 800590c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005912:	223f      	movs	r2, #63	@ 0x3f
 8005914:	409a      	lsls	r2, r3
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800592e:	2b00      	cmp	r3, #0
 8005930:	d07e      	beq.n	8005a30 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	4798      	blx	r3
        }
        return;
 800593a:	e079      	b.n	8005a30 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d01d      	beq.n	8005986 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10d      	bne.n	8005974 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800595c:	2b00      	cmp	r3, #0
 800595e:	d031      	beq.n	80059c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	4798      	blx	r3
 8005968:	e02c      	b.n	80059c4 <HAL_DMA_IRQHandler+0x2a0>
 800596a:	bf00      	nop
 800596c:	2000000c 	.word	0x2000000c
 8005970:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005978:	2b00      	cmp	r3, #0
 800597a:	d023      	beq.n	80059c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	4798      	blx	r3
 8005984:	e01e      	b.n	80059c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10f      	bne.n	80059b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f022 0210 	bic.w	r2, r2, #16
 80059a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d003      	beq.n	80059c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d032      	beq.n	8005a32 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d022      	beq.n	8005a1e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2205      	movs	r2, #5
 80059dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 0201 	bic.w	r2, r2, #1
 80059ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	3301      	adds	r3, #1
 80059f4:	60bb      	str	r3, [r7, #8]
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d307      	bcc.n	8005a0c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1f2      	bne.n	80059f0 <HAL_DMA_IRQHandler+0x2cc>
 8005a0a:	e000      	b.n	8005a0e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005a0c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d005      	beq.n	8005a32 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	4798      	blx	r3
 8005a2e:	e000      	b.n	8005a32 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005a30:	bf00      	nop
    }
  }
}
 8005a32:	3718      	adds	r7, #24
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
 8005a44:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005a54:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	2b40      	cmp	r3, #64	@ 0x40
 8005a64:	d108      	bne.n	8005a78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005a76:	e007      	b.n	8005a88 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	60da      	str	r2, [r3, #12]
}
 8005a88:	bf00      	nop
 8005a8a:	3714      	adds	r7, #20
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	3b10      	subs	r3, #16
 8005aa4:	4a14      	ldr	r2, [pc, #80]	@ (8005af8 <DMA_CalcBaseAndBitshift+0x64>)
 8005aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aaa:	091b      	lsrs	r3, r3, #4
 8005aac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005aae:	4a13      	ldr	r2, [pc, #76]	@ (8005afc <DMA_CalcBaseAndBitshift+0x68>)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2b03      	cmp	r3, #3
 8005ac0:	d909      	bls.n	8005ad6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005aca:	f023 0303 	bic.w	r3, r3, #3
 8005ace:	1d1a      	adds	r2, r3, #4
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	659a      	str	r2, [r3, #88]	@ 0x58
 8005ad4:	e007      	b.n	8005ae6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005ade:	f023 0303 	bic.w	r3, r3, #3
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	aaaaaaab 	.word	0xaaaaaaab
 8005afc:	08010c6c 	.word	0x08010c6c

08005b00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d11f      	bne.n	8005b5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	2b03      	cmp	r3, #3
 8005b1e:	d856      	bhi.n	8005bce <DMA_CheckFifoParam+0xce>
 8005b20:	a201      	add	r2, pc, #4	@ (adr r2, 8005b28 <DMA_CheckFifoParam+0x28>)
 8005b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b26:	bf00      	nop
 8005b28:	08005b39 	.word	0x08005b39
 8005b2c:	08005b4b 	.word	0x08005b4b
 8005b30:	08005b39 	.word	0x08005b39
 8005b34:	08005bcf 	.word	0x08005bcf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d046      	beq.n	8005bd2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b48:	e043      	b.n	8005bd2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b4e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005b52:	d140      	bne.n	8005bd6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b58:	e03d      	b.n	8005bd6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b62:	d121      	bne.n	8005ba8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	2b03      	cmp	r3, #3
 8005b68:	d837      	bhi.n	8005bda <DMA_CheckFifoParam+0xda>
 8005b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b70 <DMA_CheckFifoParam+0x70>)
 8005b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b70:	08005b81 	.word	0x08005b81
 8005b74:	08005b87 	.word	0x08005b87
 8005b78:	08005b81 	.word	0x08005b81
 8005b7c:	08005b99 	.word	0x08005b99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	73fb      	strb	r3, [r7, #15]
      break;
 8005b84:	e030      	b.n	8005be8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d025      	beq.n	8005bde <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b96:	e022      	b.n	8005bde <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b9c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005ba0:	d11f      	bne.n	8005be2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005ba6:	e01c      	b.n	8005be2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d903      	bls.n	8005bb6 <DMA_CheckFifoParam+0xb6>
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	2b03      	cmp	r3, #3
 8005bb2:	d003      	beq.n	8005bbc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005bb4:	e018      	b.n	8005be8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	73fb      	strb	r3, [r7, #15]
      break;
 8005bba:	e015      	b.n	8005be8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00e      	beq.n	8005be6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	73fb      	strb	r3, [r7, #15]
      break;
 8005bcc:	e00b      	b.n	8005be6 <DMA_CheckFifoParam+0xe6>
      break;
 8005bce:	bf00      	nop
 8005bd0:	e00a      	b.n	8005be8 <DMA_CheckFifoParam+0xe8>
      break;
 8005bd2:	bf00      	nop
 8005bd4:	e008      	b.n	8005be8 <DMA_CheckFifoParam+0xe8>
      break;
 8005bd6:	bf00      	nop
 8005bd8:	e006      	b.n	8005be8 <DMA_CheckFifoParam+0xe8>
      break;
 8005bda:	bf00      	nop
 8005bdc:	e004      	b.n	8005be8 <DMA_CheckFifoParam+0xe8>
      break;
 8005bde:	bf00      	nop
 8005be0:	e002      	b.n	8005be8 <DMA_CheckFifoParam+0xe8>
      break;   
 8005be2:	bf00      	nop
 8005be4:	e000      	b.n	8005be8 <DMA_CheckFifoParam+0xe8>
      break;
 8005be6:	bf00      	nop
    }
  } 
  
  return status; 
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3714      	adds	r7, #20
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop

08005bf8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e03b      	b.n	8005c82 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d106      	bne.n	8005c24 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7fb fd4c 	bl	80016bc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2202      	movs	r2, #2
 8005c28:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c48:	f023 0107 	bic.w	r1, r3, #7
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689a      	ldr	r2, [r3, #8]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	430a      	orrs	r2, r1
 8005c56:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005c62:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	68d1      	ldr	r1, [r2, #12]
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	6812      	ldr	r2, [r2, #0]
 8005c6e:	430b      	orrs	r3, r1
 8005c70:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b084      	sub	sp, #16
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d026      	beq.n	8005cfa <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d021      	beq.n	8005cfa <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005cc4:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cca:	f043 0201 	orr.w	r2, r3, #1
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2204      	movs	r2, #4
 8005cde:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d003      	beq.n	8005cfa <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f003 0320 	and.w	r3, r3, #32
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d026      	beq.n	8005d52 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d021      	beq.n	8005d52 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d1c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2220      	movs	r2, #32
 8005d24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d2a:	f043 0202 	orr.w	r2, r3, #2
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2204      	movs	r2, #4
 8005d36:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d003      	beq.n	8005d52 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f003 0308 	and.w	r3, r3, #8
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d026      	beq.n	8005daa <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d021      	beq.n	8005daa <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d74:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2208      	movs	r2, #8
 8005d7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d82:	f043 0204 	orr.w	r2, r3, #4
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2204      	movs	r2, #4
 8005d8e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d003      	beq.n	8005daa <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f003 0304 	and.w	r3, r3, #4
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d013      	beq.n	8005ddc <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00e      	beq.n	8005ddc <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dcc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2204      	movs	r2, #4
 8005dd4:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f853 	bl	8005e82 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d024      	beq.n	8005e30 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d01f      	beq.n	8005e30 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005dfe:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2202      	movs	r2, #2
 8005e06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d003      	beq.n	8005e30 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f003 0310 	and.w	r3, r3, #16
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d01f      	beq.n	8005e7a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d01a      	beq.n	8005e7a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005e52:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2210      	movs	r2, #16
 8005e5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 f80e 	bl	8005e96 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005e7a:	bf00      	nop
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b083      	sub	sp, #12
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005e8a:	bf00      	nop
 8005e8c:	370c      	adds	r7, #12
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr

08005e96 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005e96:	b480      	push	{r7}
 8005e98:	b083      	sub	sp, #12
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005e9e:	bf00      	nop
 8005ea0:	370c      	adds	r7, #12
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
	...

08005eac <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b087      	sub	sp, #28
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d101      	bne.n	8005ecc <HAL_DMA2D_ConfigLayer+0x20>
 8005ec8:	2302      	movs	r3, #2
 8005eca:	e079      	b.n	8005fc0 <HAL_DMA2D_ConfigLayer+0x114>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	011b      	lsls	r3, r3, #4
 8005ee0:	3318      	adds	r3, #24
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	041b      	lsls	r3, r3, #16
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005ef6:	4b35      	ldr	r3, [pc, #212]	@ (8005fcc <HAL_DMA2D_ConfigLayer+0x120>)
 8005ef8:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	2b0a      	cmp	r3, #10
 8005f00:	d003      	beq.n	8005f0a <HAL_DMA2D_ConfigLayer+0x5e>
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	2b09      	cmp	r3, #9
 8005f08:	d107      	bne.n	8005f1a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	617b      	str	r3, [r7, #20]
 8005f18:	e005      	b.n	8005f26 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	061b      	lsls	r3, r3, #24
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d120      	bne.n	8005f6e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	43db      	mvns	r3, r3
 8005f36:	ea02 0103 	and.w	r1, r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	430a      	orrs	r2, r1
 8005f42:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	6812      	ldr	r2, [r2, #0]
 8005f4c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	2b0a      	cmp	r3, #10
 8005f54:	d003      	beq.n	8005f5e <HAL_DMA2D_ConfigLayer+0xb2>
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	2b09      	cmp	r3, #9
 8005f5c:	d127      	bne.n	8005fae <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005f6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f6c:	e01f      	b.n	8005fae <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	69da      	ldr	r2, [r3, #28]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	43db      	mvns	r3, r3
 8005f78:	ea02 0103 	and.w	r1, r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	430a      	orrs	r2, r1
 8005f84:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	6812      	ldr	r2, [r2, #0]
 8005f8e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	2b0a      	cmp	r3, #10
 8005f96:	d003      	beq.n	8005fa0 <HAL_DMA2D_ConfigLayer+0xf4>
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	2b09      	cmp	r3, #9
 8005f9e:	d106      	bne.n	8005fae <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005fac:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	371c      	adds	r7, #28
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr
 8005fcc:	ff03000f 	.word	0xff03000f

08005fd0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005fe2:	4b23      	ldr	r3, [pc, #140]	@ (8006070 <HAL_FLASH_Program+0xa0>)
 8005fe4:	7e1b      	ldrb	r3, [r3, #24]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d101      	bne.n	8005fee <HAL_FLASH_Program+0x1e>
 8005fea:	2302      	movs	r3, #2
 8005fec:	e03b      	b.n	8006066 <HAL_FLASH_Program+0x96>
 8005fee:	4b20      	ldr	r3, [pc, #128]	@ (8006070 <HAL_FLASH_Program+0xa0>)
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005ff4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005ff8:	f000 f870 	bl	80060dc <FLASH_WaitForLastOperation>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8006000:	7dfb      	ldrb	r3, [r7, #23]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d12b      	bne.n	800605e <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d105      	bne.n	8006018 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800600c:	783b      	ldrb	r3, [r7, #0]
 800600e:	4619      	mov	r1, r3
 8006010:	68b8      	ldr	r0, [r7, #8]
 8006012:	f000 f91b 	bl	800624c <FLASH_Program_Byte>
 8006016:	e016      	b.n	8006046 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2b01      	cmp	r3, #1
 800601c:	d105      	bne.n	800602a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800601e:	883b      	ldrh	r3, [r7, #0]
 8006020:	4619      	mov	r1, r3
 8006022:	68b8      	ldr	r0, [r7, #8]
 8006024:	f000 f8ee 	bl	8006204 <FLASH_Program_HalfWord>
 8006028:	e00d      	b.n	8006046 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2b02      	cmp	r3, #2
 800602e:	d105      	bne.n	800603c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	4619      	mov	r1, r3
 8006034:	68b8      	ldr	r0, [r7, #8]
 8006036:	f000 f8c3 	bl	80061c0 <FLASH_Program_Word>
 800603a:	e004      	b.n	8006046 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800603c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006040:	68b8      	ldr	r0, [r7, #8]
 8006042:	f000 f88b 	bl	800615c <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006046:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800604a:	f000 f847 	bl	80060dc <FLASH_WaitForLastOperation>
 800604e:	4603      	mov	r3, r0
 8006050:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8006052:	4b08      	ldr	r3, [pc, #32]	@ (8006074 <HAL_FLASH_Program+0xa4>)
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	4a07      	ldr	r2, [pc, #28]	@ (8006074 <HAL_FLASH_Program+0xa4>)
 8006058:	f023 0301 	bic.w	r3, r3, #1
 800605c:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800605e:	4b04      	ldr	r3, [pc, #16]	@ (8006070 <HAL_FLASH_Program+0xa0>)
 8006060:	2200      	movs	r2, #0
 8006062:	761a      	strb	r2, [r3, #24]

  return status;
 8006064:	7dfb      	ldrb	r3, [r7, #23]
}
 8006066:	4618      	mov	r0, r3
 8006068:	3718      	adds	r7, #24
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	200265e0 	.word	0x200265e0
 8006074:	40023c00 	.word	0x40023c00

08006078 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800607e:	2300      	movs	r3, #0
 8006080:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006082:	4b0b      	ldr	r3, [pc, #44]	@ (80060b0 <HAL_FLASH_Unlock+0x38>)
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	2b00      	cmp	r3, #0
 8006088:	da0b      	bge.n	80060a2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800608a:	4b09      	ldr	r3, [pc, #36]	@ (80060b0 <HAL_FLASH_Unlock+0x38>)
 800608c:	4a09      	ldr	r2, [pc, #36]	@ (80060b4 <HAL_FLASH_Unlock+0x3c>)
 800608e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006090:	4b07      	ldr	r3, [pc, #28]	@ (80060b0 <HAL_FLASH_Unlock+0x38>)
 8006092:	4a09      	ldr	r2, [pc, #36]	@ (80060b8 <HAL_FLASH_Unlock+0x40>)
 8006094:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006096:	4b06      	ldr	r3, [pc, #24]	@ (80060b0 <HAL_FLASH_Unlock+0x38>)
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	2b00      	cmp	r3, #0
 800609c:	da01      	bge.n	80060a2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80060a2:	79fb      	ldrb	r3, [r7, #7]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	40023c00 	.word	0x40023c00
 80060b4:	45670123 	.word	0x45670123
 80060b8:	cdef89ab 	.word	0xcdef89ab

080060bc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80060bc:	b480      	push	{r7}
 80060be:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80060c0:	4b05      	ldr	r3, [pc, #20]	@ (80060d8 <HAL_FLASH_Lock+0x1c>)
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	4a04      	ldr	r2, [pc, #16]	@ (80060d8 <HAL_FLASH_Lock+0x1c>)
 80060c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80060ca:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr
 80060d8:	40023c00 	.word	0x40023c00

080060dc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80060e8:	4b1a      	ldr	r3, [pc, #104]	@ (8006154 <FLASH_WaitForLastOperation+0x78>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80060ee:	f7ff f8e5 	bl	80052bc <HAL_GetTick>
 80060f2:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80060f4:	e010      	b.n	8006118 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fc:	d00c      	beq.n	8006118 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d007      	beq.n	8006114 <FLASH_WaitForLastOperation+0x38>
 8006104:	f7ff f8da 	bl	80052bc <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	429a      	cmp	r2, r3
 8006112:	d201      	bcs.n	8006118 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e019      	b.n	800614c <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8006118:	4b0f      	ldr	r3, [pc, #60]	@ (8006158 <FLASH_WaitForLastOperation+0x7c>)
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1e8      	bne.n	80060f6 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8006124:	4b0c      	ldr	r3, [pc, #48]	@ (8006158 <FLASH_WaitForLastOperation+0x7c>)
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f003 0301 	and.w	r3, r3, #1
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006130:	4b09      	ldr	r3, [pc, #36]	@ (8006158 <FLASH_WaitForLastOperation+0x7c>)
 8006132:	2201      	movs	r2, #1
 8006134:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8006136:	4b08      	ldr	r3, [pc, #32]	@ (8006158 <FLASH_WaitForLastOperation+0x7c>)
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8006142:	f000 f8a5 	bl	8006290 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e000      	b.n	800614c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800614a:	2300      	movs	r3, #0

}
 800614c:	4618      	mov	r0, r3
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	200265e0 	.word	0x200265e0
 8006158:	40023c00 	.word	0x40023c00

0800615c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006168:	4b14      	ldr	r3, [pc, #80]	@ (80061bc <FLASH_Program_DoubleWord+0x60>)
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	4a13      	ldr	r2, [pc, #76]	@ (80061bc <FLASH_Program_DoubleWord+0x60>)
 800616e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006172:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8006174:	4b11      	ldr	r3, [pc, #68]	@ (80061bc <FLASH_Program_DoubleWord+0x60>)
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	4a10      	ldr	r2, [pc, #64]	@ (80061bc <FLASH_Program_DoubleWord+0x60>)
 800617a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800617e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006180:	4b0e      	ldr	r3, [pc, #56]	@ (80061bc <FLASH_Program_DoubleWord+0x60>)
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	4a0d      	ldr	r2, [pc, #52]	@ (80061bc <FLASH_Program_DoubleWord+0x60>)
 8006186:	f043 0301 	orr.w	r3, r3, #1
 800618a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8006192:	f3bf 8f6f 	isb	sy
}
 8006196:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8006198:	e9d7 0100 	ldrd	r0, r1, [r7]
 800619c:	f04f 0200 	mov.w	r2, #0
 80061a0:	f04f 0300 	mov.w	r3, #0
 80061a4:	000a      	movs	r2, r1
 80061a6:	2300      	movs	r3, #0
 80061a8:	68f9      	ldr	r1, [r7, #12]
 80061aa:	3104      	adds	r1, #4
 80061ac:	4613      	mov	r3, r2
 80061ae:	600b      	str	r3, [r1, #0]
}
 80061b0:	bf00      	nop
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr
 80061bc:	40023c00 	.word	0x40023c00

080061c0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80061ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006200 <FLASH_Program_Word+0x40>)
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	4a0c      	ldr	r2, [pc, #48]	@ (8006200 <FLASH_Program_Word+0x40>)
 80061d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061d4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80061d6:	4b0a      	ldr	r3, [pc, #40]	@ (8006200 <FLASH_Program_Word+0x40>)
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	4a09      	ldr	r2, [pc, #36]	@ (8006200 <FLASH_Program_Word+0x40>)
 80061dc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80061e0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80061e2:	4b07      	ldr	r3, [pc, #28]	@ (8006200 <FLASH_Program_Word+0x40>)
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	4a06      	ldr	r2, [pc, #24]	@ (8006200 <FLASH_Program_Word+0x40>)
 80061e8:	f043 0301 	orr.w	r3, r3, #1
 80061ec:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	683a      	ldr	r2, [r7, #0]
 80061f2:	601a      	str	r2, [r3, #0]
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	40023c00 	.word	0x40023c00

08006204 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	460b      	mov	r3, r1
 800620e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006210:	4b0d      	ldr	r3, [pc, #52]	@ (8006248 <FLASH_Program_HalfWord+0x44>)
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	4a0c      	ldr	r2, [pc, #48]	@ (8006248 <FLASH_Program_HalfWord+0x44>)
 8006216:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800621a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800621c:	4b0a      	ldr	r3, [pc, #40]	@ (8006248 <FLASH_Program_HalfWord+0x44>)
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	4a09      	ldr	r2, [pc, #36]	@ (8006248 <FLASH_Program_HalfWord+0x44>)
 8006222:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006226:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006228:	4b07      	ldr	r3, [pc, #28]	@ (8006248 <FLASH_Program_HalfWord+0x44>)
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	4a06      	ldr	r2, [pc, #24]	@ (8006248 <FLASH_Program_HalfWord+0x44>)
 800622e:	f043 0301 	orr.w	r3, r3, #1
 8006232:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	887a      	ldrh	r2, [r7, #2]
 8006238:	801a      	strh	r2, [r3, #0]
}
 800623a:	bf00      	nop
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	40023c00 	.word	0x40023c00

0800624c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	460b      	mov	r3, r1
 8006256:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006258:	4b0c      	ldr	r3, [pc, #48]	@ (800628c <FLASH_Program_Byte+0x40>)
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	4a0b      	ldr	r2, [pc, #44]	@ (800628c <FLASH_Program_Byte+0x40>)
 800625e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006262:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8006264:	4b09      	ldr	r3, [pc, #36]	@ (800628c <FLASH_Program_Byte+0x40>)
 8006266:	4a09      	ldr	r2, [pc, #36]	@ (800628c <FLASH_Program_Byte+0x40>)
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800626c:	4b07      	ldr	r3, [pc, #28]	@ (800628c <FLASH_Program_Byte+0x40>)
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	4a06      	ldr	r2, [pc, #24]	@ (800628c <FLASH_Program_Byte+0x40>)
 8006272:	f043 0301 	orr.w	r3, r3, #1
 8006276:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	78fa      	ldrb	r2, [r7, #3]
 800627c:	701a      	strb	r2, [r3, #0]
}
 800627e:	bf00      	nop
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	40023c00 	.word	0x40023c00

08006290 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8006290:	b480      	push	{r7}
 8006292:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8006294:	4b2f      	ldr	r3, [pc, #188]	@ (8006354 <FLASH_SetErrorCode+0xc4>)
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	f003 0310 	and.w	r3, r3, #16
 800629c:	2b00      	cmp	r3, #0
 800629e:	d008      	beq.n	80062b2 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80062a0:	4b2d      	ldr	r3, [pc, #180]	@ (8006358 <FLASH_SetErrorCode+0xc8>)
 80062a2:	69db      	ldr	r3, [r3, #28]
 80062a4:	f043 0310 	orr.w	r3, r3, #16
 80062a8:	4a2b      	ldr	r2, [pc, #172]	@ (8006358 <FLASH_SetErrorCode+0xc8>)
 80062aa:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80062ac:	4b29      	ldr	r3, [pc, #164]	@ (8006354 <FLASH_SetErrorCode+0xc4>)
 80062ae:	2210      	movs	r2, #16
 80062b0:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80062b2:	4b28      	ldr	r3, [pc, #160]	@ (8006354 <FLASH_SetErrorCode+0xc4>)
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	f003 0320 	and.w	r3, r3, #32
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d008      	beq.n	80062d0 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80062be:	4b26      	ldr	r3, [pc, #152]	@ (8006358 <FLASH_SetErrorCode+0xc8>)
 80062c0:	69db      	ldr	r3, [r3, #28]
 80062c2:	f043 0308 	orr.w	r3, r3, #8
 80062c6:	4a24      	ldr	r2, [pc, #144]	@ (8006358 <FLASH_SetErrorCode+0xc8>)
 80062c8:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80062ca:	4b22      	ldr	r3, [pc, #136]	@ (8006354 <FLASH_SetErrorCode+0xc4>)
 80062cc:	2220      	movs	r2, #32
 80062ce:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80062d0:	4b20      	ldr	r3, [pc, #128]	@ (8006354 <FLASH_SetErrorCode+0xc4>)
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d008      	beq.n	80062ee <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80062dc:	4b1e      	ldr	r3, [pc, #120]	@ (8006358 <FLASH_SetErrorCode+0xc8>)
 80062de:	69db      	ldr	r3, [r3, #28]
 80062e0:	f043 0304 	orr.w	r3, r3, #4
 80062e4:	4a1c      	ldr	r2, [pc, #112]	@ (8006358 <FLASH_SetErrorCode+0xc8>)
 80062e6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80062e8:	4b1a      	ldr	r3, [pc, #104]	@ (8006354 <FLASH_SetErrorCode+0xc4>)
 80062ea:	2240      	movs	r2, #64	@ 0x40
 80062ec:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80062ee:	4b19      	ldr	r3, [pc, #100]	@ (8006354 <FLASH_SetErrorCode+0xc4>)
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d008      	beq.n	800630c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80062fa:	4b17      	ldr	r3, [pc, #92]	@ (8006358 <FLASH_SetErrorCode+0xc8>)
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	f043 0302 	orr.w	r3, r3, #2
 8006302:	4a15      	ldr	r2, [pc, #84]	@ (8006358 <FLASH_SetErrorCode+0xc8>)
 8006304:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8006306:	4b13      	ldr	r3, [pc, #76]	@ (8006354 <FLASH_SetErrorCode+0xc4>)
 8006308:	2280      	movs	r2, #128	@ 0x80
 800630a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800630c:	4b11      	ldr	r3, [pc, #68]	@ (8006354 <FLASH_SetErrorCode+0xc4>)
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006314:	2b00      	cmp	r3, #0
 8006316:	d009      	beq.n	800632c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8006318:	4b0f      	ldr	r3, [pc, #60]	@ (8006358 <FLASH_SetErrorCode+0xc8>)
 800631a:	69db      	ldr	r3, [r3, #28]
 800631c:	f043 0301 	orr.w	r3, r3, #1
 8006320:	4a0d      	ldr	r2, [pc, #52]	@ (8006358 <FLASH_SetErrorCode+0xc8>)
 8006322:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8006324:	4b0b      	ldr	r3, [pc, #44]	@ (8006354 <FLASH_SetErrorCode+0xc4>)
 8006326:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800632a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800632c:	4b09      	ldr	r3, [pc, #36]	@ (8006354 <FLASH_SetErrorCode+0xc4>)
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	f003 0302 	and.w	r3, r3, #2
 8006334:	2b00      	cmp	r3, #0
 8006336:	d008      	beq.n	800634a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8006338:	4b07      	ldr	r3, [pc, #28]	@ (8006358 <FLASH_SetErrorCode+0xc8>)
 800633a:	69db      	ldr	r3, [r3, #28]
 800633c:	f043 0320 	orr.w	r3, r3, #32
 8006340:	4a05      	ldr	r2, [pc, #20]	@ (8006358 <FLASH_SetErrorCode+0xc8>)
 8006342:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8006344:	4b03      	ldr	r3, [pc, #12]	@ (8006354 <FLASH_SetErrorCode+0xc4>)
 8006346:	2202      	movs	r2, #2
 8006348:	60da      	str	r2, [r3, #12]
  }
}
 800634a:	bf00      	nop
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr
 8006354:	40023c00 	.word	0x40023c00
 8006358:	200265e0 	.word	0x200265e0

0800635c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800636a:	2300      	movs	r3, #0
 800636c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800636e:	4b32      	ldr	r3, [pc, #200]	@ (8006438 <HAL_FLASHEx_Erase+0xdc>)
 8006370:	7e1b      	ldrb	r3, [r3, #24]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d101      	bne.n	800637a <HAL_FLASHEx_Erase+0x1e>
 8006376:	2302      	movs	r3, #2
 8006378:	e05a      	b.n	8006430 <HAL_FLASHEx_Erase+0xd4>
 800637a:	4b2f      	ldr	r3, [pc, #188]	@ (8006438 <HAL_FLASHEx_Erase+0xdc>)
 800637c:	2201      	movs	r2, #1
 800637e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006380:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006384:	f7ff feaa 	bl	80060dc <FLASH_WaitForLastOperation>
 8006388:	4603      	mov	r3, r0
 800638a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800638c:	7bfb      	ldrb	r3, [r7, #15]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d14a      	bne.n	8006428 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	f04f 32ff 	mov.w	r2, #4294967295
 8006398:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d117      	bne.n	80063d2 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	4619      	mov	r1, r3
 80063ae:	4610      	mov	r0, r2
 80063b0:	f000 f846 	bl	8006440 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80063b4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80063b8:	f7ff fe90 	bl	80060dc <FLASH_WaitForLastOperation>
 80063bc:	4603      	mov	r3, r0
 80063be:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80063c0:	4b1e      	ldr	r3, [pc, #120]	@ (800643c <HAL_FLASHEx_Erase+0xe0>)
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	4a1d      	ldr	r2, [pc, #116]	@ (800643c <HAL_FLASHEx_Erase+0xe0>)
 80063c6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80063ca:	f023 0304 	bic.w	r3, r3, #4
 80063ce:	6113      	str	r3, [r2, #16]
 80063d0:	e028      	b.n	8006424 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	60bb      	str	r3, [r7, #8]
 80063d8:	e01c      	b.n	8006414 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	4619      	mov	r1, r3
 80063e2:	68b8      	ldr	r0, [r7, #8]
 80063e4:	f000 f866 	bl	80064b4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80063e8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80063ec:	f7ff fe76 	bl	80060dc <FLASH_WaitForLastOperation>
 80063f0:	4603      	mov	r3, r0
 80063f2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80063f4:	4b11      	ldr	r3, [pc, #68]	@ (800643c <HAL_FLASHEx_Erase+0xe0>)
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	4a10      	ldr	r2, [pc, #64]	@ (800643c <HAL_FLASHEx_Erase+0xe0>)
 80063fa:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 80063fe:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8006400:	7bfb      	ldrb	r3, [r7, #15]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d003      	beq.n	800640e <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	601a      	str	r2, [r3, #0]
          break;
 800640c:	e00a      	b.n	8006424 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	3301      	adds	r3, #1
 8006412:	60bb      	str	r3, [r7, #8]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	68da      	ldr	r2, [r3, #12]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	4413      	add	r3, r2
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	429a      	cmp	r2, r3
 8006422:	d3da      	bcc.n	80063da <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006424:	f000 f894 	bl	8006550 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006428:	4b03      	ldr	r3, [pc, #12]	@ (8006438 <HAL_FLASHEx_Erase+0xdc>)
 800642a:	2200      	movs	r2, #0
 800642c:	761a      	strb	r2, [r3, #24]

  return status;
 800642e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	200265e0 	.word	0x200265e0
 800643c:	40023c00 	.word	0x40023c00

08006440 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	4603      	mov	r3, r0
 8006448:	6039      	str	r1, [r7, #0]
 800644a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800644c:	4b18      	ldr	r3, [pc, #96]	@ (80064b0 <FLASH_MassErase+0x70>)
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	4a17      	ldr	r2, [pc, #92]	@ (80064b0 <FLASH_MassErase+0x70>)
 8006452:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006456:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	2b03      	cmp	r3, #3
 800645c:	d108      	bne.n	8006470 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 800645e:	4b14      	ldr	r3, [pc, #80]	@ (80064b0 <FLASH_MassErase+0x70>)
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	4a13      	ldr	r2, [pc, #76]	@ (80064b0 <FLASH_MassErase+0x70>)
 8006464:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006468:	f043 0304 	orr.w	r3, r3, #4
 800646c:	6113      	str	r3, [r2, #16]
 800646e:	e00f      	b.n	8006490 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d106      	bne.n	8006484 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8006476:	4b0e      	ldr	r3, [pc, #56]	@ (80064b0 <FLASH_MassErase+0x70>)
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	4a0d      	ldr	r2, [pc, #52]	@ (80064b0 <FLASH_MassErase+0x70>)
 800647c:	f043 0304 	orr.w	r3, r3, #4
 8006480:	6113      	str	r3, [r2, #16]
 8006482:	e005      	b.n	8006490 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8006484:	4b0a      	ldr	r3, [pc, #40]	@ (80064b0 <FLASH_MassErase+0x70>)
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	4a09      	ldr	r2, [pc, #36]	@ (80064b0 <FLASH_MassErase+0x70>)
 800648a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800648e:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8006490:	4b07      	ldr	r3, [pc, #28]	@ (80064b0 <FLASH_MassErase+0x70>)
 8006492:	691a      	ldr	r2, [r3, #16]
 8006494:	79fb      	ldrb	r3, [r7, #7]
 8006496:	021b      	lsls	r3, r3, #8
 8006498:	4313      	orrs	r3, r2
 800649a:	4a05      	ldr	r2, [pc, #20]	@ (80064b0 <FLASH_MassErase+0x70>)
 800649c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064a0:	6113      	str	r3, [r2, #16]
}
 80064a2:	bf00      	nop
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	40023c00 	.word	0x40023c00

080064b4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	460b      	mov	r3, r1
 80064be:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80064c0:	2300      	movs	r3, #0
 80064c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80064c4:	78fb      	ldrb	r3, [r7, #3]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d102      	bne.n	80064d0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80064ca:	2300      	movs	r3, #0
 80064cc:	60fb      	str	r3, [r7, #12]
 80064ce:	e010      	b.n	80064f2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80064d0:	78fb      	ldrb	r3, [r7, #3]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d103      	bne.n	80064de <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80064d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80064da:	60fb      	str	r3, [r7, #12]
 80064dc:	e009      	b.n	80064f2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80064de:	78fb      	ldrb	r3, [r7, #3]
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d103      	bne.n	80064ec <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80064e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80064e8:	60fb      	str	r3, [r7, #12]
 80064ea:	e002      	b.n	80064f2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80064ec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80064f0:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2b0b      	cmp	r3, #11
 80064f6:	d902      	bls.n	80064fe <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	3304      	adds	r3, #4
 80064fc:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80064fe:	4b13      	ldr	r3, [pc, #76]	@ (800654c <FLASH_Erase_Sector+0x98>)
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	4a12      	ldr	r2, [pc, #72]	@ (800654c <FLASH_Erase_Sector+0x98>)
 8006504:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006508:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800650a:	4b10      	ldr	r3, [pc, #64]	@ (800654c <FLASH_Erase_Sector+0x98>)
 800650c:	691a      	ldr	r2, [r3, #16]
 800650e:	490f      	ldr	r1, [pc, #60]	@ (800654c <FLASH_Erase_Sector+0x98>)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4313      	orrs	r3, r2
 8006514:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8006516:	4b0d      	ldr	r3, [pc, #52]	@ (800654c <FLASH_Erase_Sector+0x98>)
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	4a0c      	ldr	r2, [pc, #48]	@ (800654c <FLASH_Erase_Sector+0x98>)
 800651c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006520:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8006522:	4b0a      	ldr	r3, [pc, #40]	@ (800654c <FLASH_Erase_Sector+0x98>)
 8006524:	691a      	ldr	r2, [r3, #16]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	00db      	lsls	r3, r3, #3
 800652a:	4313      	orrs	r3, r2
 800652c:	4a07      	ldr	r2, [pc, #28]	@ (800654c <FLASH_Erase_Sector+0x98>)
 800652e:	f043 0302 	orr.w	r3, r3, #2
 8006532:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006534:	4b05      	ldr	r3, [pc, #20]	@ (800654c <FLASH_Erase_Sector+0x98>)
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	4a04      	ldr	r2, [pc, #16]	@ (800654c <FLASH_Erase_Sector+0x98>)
 800653a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800653e:	6113      	str	r3, [r2, #16]
}
 8006540:	bf00      	nop
 8006542:	3714      	adds	r7, #20
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	40023c00 	.word	0x40023c00

08006550 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006550:	b480      	push	{r7}
 8006552:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8006554:	4b20      	ldr	r3, [pc, #128]	@ (80065d8 <FLASH_FlushCaches+0x88>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800655c:	2b00      	cmp	r3, #0
 800655e:	d017      	beq.n	8006590 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006560:	4b1d      	ldr	r3, [pc, #116]	@ (80065d8 <FLASH_FlushCaches+0x88>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a1c      	ldr	r2, [pc, #112]	@ (80065d8 <FLASH_FlushCaches+0x88>)
 8006566:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800656a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800656c:	4b1a      	ldr	r3, [pc, #104]	@ (80065d8 <FLASH_FlushCaches+0x88>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a19      	ldr	r2, [pc, #100]	@ (80065d8 <FLASH_FlushCaches+0x88>)
 8006572:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006576:	6013      	str	r3, [r2, #0]
 8006578:	4b17      	ldr	r3, [pc, #92]	@ (80065d8 <FLASH_FlushCaches+0x88>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a16      	ldr	r2, [pc, #88]	@ (80065d8 <FLASH_FlushCaches+0x88>)
 800657e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006582:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006584:	4b14      	ldr	r3, [pc, #80]	@ (80065d8 <FLASH_FlushCaches+0x88>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a13      	ldr	r2, [pc, #76]	@ (80065d8 <FLASH_FlushCaches+0x88>)
 800658a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800658e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8006590:	4b11      	ldr	r3, [pc, #68]	@ (80065d8 <FLASH_FlushCaches+0x88>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006598:	2b00      	cmp	r3, #0
 800659a:	d017      	beq.n	80065cc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800659c:	4b0e      	ldr	r3, [pc, #56]	@ (80065d8 <FLASH_FlushCaches+0x88>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a0d      	ldr	r2, [pc, #52]	@ (80065d8 <FLASH_FlushCaches+0x88>)
 80065a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80065a6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80065a8:	4b0b      	ldr	r3, [pc, #44]	@ (80065d8 <FLASH_FlushCaches+0x88>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a0a      	ldr	r2, [pc, #40]	@ (80065d8 <FLASH_FlushCaches+0x88>)
 80065ae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80065b2:	6013      	str	r3, [r2, #0]
 80065b4:	4b08      	ldr	r3, [pc, #32]	@ (80065d8 <FLASH_FlushCaches+0x88>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a07      	ldr	r2, [pc, #28]	@ (80065d8 <FLASH_FlushCaches+0x88>)
 80065ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80065be:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80065c0:	4b05      	ldr	r3, [pc, #20]	@ (80065d8 <FLASH_FlushCaches+0x88>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a04      	ldr	r2, [pc, #16]	@ (80065d8 <FLASH_FlushCaches+0x88>)
 80065c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80065ca:	6013      	str	r3, [r2, #0]
  }
}
 80065cc:	bf00      	nop
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	40023c00 	.word	0x40023c00

080065dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065dc:	b480      	push	{r7}
 80065de:	b089      	sub	sp, #36	@ 0x24
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80065e6:	2300      	movs	r3, #0
 80065e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80065ea:	2300      	movs	r3, #0
 80065ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80065ee:	2300      	movs	r3, #0
 80065f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80065f2:	2300      	movs	r3, #0
 80065f4:	61fb      	str	r3, [r7, #28]
 80065f6:	e177      	b.n	80068e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80065f8:	2201      	movs	r2, #1
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006600:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	4013      	ands	r3, r2
 800660a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	429a      	cmp	r2, r3
 8006612:	f040 8166 	bne.w	80068e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f003 0303 	and.w	r3, r3, #3
 800661e:	2b01      	cmp	r3, #1
 8006620:	d005      	beq.n	800662e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800662a:	2b02      	cmp	r3, #2
 800662c:	d130      	bne.n	8006690 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	005b      	lsls	r3, r3, #1
 8006638:	2203      	movs	r2, #3
 800663a:	fa02 f303 	lsl.w	r3, r2, r3
 800663e:	43db      	mvns	r3, r3
 8006640:	69ba      	ldr	r2, [r7, #24]
 8006642:	4013      	ands	r3, r2
 8006644:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	68da      	ldr	r2, [r3, #12]
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	005b      	lsls	r3, r3, #1
 800664e:	fa02 f303 	lsl.w	r3, r2, r3
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	4313      	orrs	r3, r2
 8006656:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	69ba      	ldr	r2, [r7, #24]
 800665c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006664:	2201      	movs	r2, #1
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	fa02 f303 	lsl.w	r3, r2, r3
 800666c:	43db      	mvns	r3, r3
 800666e:	69ba      	ldr	r2, [r7, #24]
 8006670:	4013      	ands	r3, r2
 8006672:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	091b      	lsrs	r3, r3, #4
 800667a:	f003 0201 	and.w	r2, r3, #1
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	fa02 f303 	lsl.w	r3, r2, r3
 8006684:	69ba      	ldr	r2, [r7, #24]
 8006686:	4313      	orrs	r3, r2
 8006688:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	69ba      	ldr	r2, [r7, #24]
 800668e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f003 0303 	and.w	r3, r3, #3
 8006698:	2b03      	cmp	r3, #3
 800669a:	d017      	beq.n	80066cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	005b      	lsls	r3, r3, #1
 80066a6:	2203      	movs	r2, #3
 80066a8:	fa02 f303 	lsl.w	r3, r2, r3
 80066ac:	43db      	mvns	r3, r3
 80066ae:	69ba      	ldr	r2, [r7, #24]
 80066b0:	4013      	ands	r3, r2
 80066b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	005b      	lsls	r3, r3, #1
 80066bc:	fa02 f303 	lsl.w	r3, r2, r3
 80066c0:	69ba      	ldr	r2, [r7, #24]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	69ba      	ldr	r2, [r7, #24]
 80066ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	f003 0303 	and.w	r3, r3, #3
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d123      	bne.n	8006720 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	08da      	lsrs	r2, r3, #3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	3208      	adds	r2, #8
 80066e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	f003 0307 	and.w	r3, r3, #7
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	220f      	movs	r2, #15
 80066f0:	fa02 f303 	lsl.w	r3, r2, r3
 80066f4:	43db      	mvns	r3, r3
 80066f6:	69ba      	ldr	r2, [r7, #24]
 80066f8:	4013      	ands	r3, r2
 80066fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	691a      	ldr	r2, [r3, #16]
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	f003 0307 	and.w	r3, r3, #7
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	fa02 f303 	lsl.w	r3, r2, r3
 800670c:	69ba      	ldr	r2, [r7, #24]
 800670e:	4313      	orrs	r3, r2
 8006710:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	08da      	lsrs	r2, r3, #3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	3208      	adds	r2, #8
 800671a:	69b9      	ldr	r1, [r7, #24]
 800671c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	005b      	lsls	r3, r3, #1
 800672a:	2203      	movs	r2, #3
 800672c:	fa02 f303 	lsl.w	r3, r2, r3
 8006730:	43db      	mvns	r3, r3
 8006732:	69ba      	ldr	r2, [r7, #24]
 8006734:	4013      	ands	r3, r2
 8006736:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	f003 0203 	and.w	r2, r3, #3
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	fa02 f303 	lsl.w	r3, r2, r3
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	4313      	orrs	r3, r2
 800674c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	69ba      	ldr	r2, [r7, #24]
 8006752:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800675c:	2b00      	cmp	r3, #0
 800675e:	f000 80c0 	beq.w	80068e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006762:	2300      	movs	r3, #0
 8006764:	60fb      	str	r3, [r7, #12]
 8006766:	4b66      	ldr	r3, [pc, #408]	@ (8006900 <HAL_GPIO_Init+0x324>)
 8006768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800676a:	4a65      	ldr	r2, [pc, #404]	@ (8006900 <HAL_GPIO_Init+0x324>)
 800676c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006770:	6453      	str	r3, [r2, #68]	@ 0x44
 8006772:	4b63      	ldr	r3, [pc, #396]	@ (8006900 <HAL_GPIO_Init+0x324>)
 8006774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006776:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800677a:	60fb      	str	r3, [r7, #12]
 800677c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800677e:	4a61      	ldr	r2, [pc, #388]	@ (8006904 <HAL_GPIO_Init+0x328>)
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	089b      	lsrs	r3, r3, #2
 8006784:	3302      	adds	r3, #2
 8006786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800678a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	f003 0303 	and.w	r3, r3, #3
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	220f      	movs	r2, #15
 8006796:	fa02 f303 	lsl.w	r3, r2, r3
 800679a:	43db      	mvns	r3, r3
 800679c:	69ba      	ldr	r2, [r7, #24]
 800679e:	4013      	ands	r3, r2
 80067a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a58      	ldr	r2, [pc, #352]	@ (8006908 <HAL_GPIO_Init+0x32c>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d037      	beq.n	800681a <HAL_GPIO_Init+0x23e>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a57      	ldr	r2, [pc, #348]	@ (800690c <HAL_GPIO_Init+0x330>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d031      	beq.n	8006816 <HAL_GPIO_Init+0x23a>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a56      	ldr	r2, [pc, #344]	@ (8006910 <HAL_GPIO_Init+0x334>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d02b      	beq.n	8006812 <HAL_GPIO_Init+0x236>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a55      	ldr	r2, [pc, #340]	@ (8006914 <HAL_GPIO_Init+0x338>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d025      	beq.n	800680e <HAL_GPIO_Init+0x232>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a54      	ldr	r2, [pc, #336]	@ (8006918 <HAL_GPIO_Init+0x33c>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d01f      	beq.n	800680a <HAL_GPIO_Init+0x22e>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a53      	ldr	r2, [pc, #332]	@ (800691c <HAL_GPIO_Init+0x340>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d019      	beq.n	8006806 <HAL_GPIO_Init+0x22a>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a52      	ldr	r2, [pc, #328]	@ (8006920 <HAL_GPIO_Init+0x344>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d013      	beq.n	8006802 <HAL_GPIO_Init+0x226>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a51      	ldr	r2, [pc, #324]	@ (8006924 <HAL_GPIO_Init+0x348>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d00d      	beq.n	80067fe <HAL_GPIO_Init+0x222>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a50      	ldr	r2, [pc, #320]	@ (8006928 <HAL_GPIO_Init+0x34c>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d007      	beq.n	80067fa <HAL_GPIO_Init+0x21e>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a4f      	ldr	r2, [pc, #316]	@ (800692c <HAL_GPIO_Init+0x350>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d101      	bne.n	80067f6 <HAL_GPIO_Init+0x21a>
 80067f2:	2309      	movs	r3, #9
 80067f4:	e012      	b.n	800681c <HAL_GPIO_Init+0x240>
 80067f6:	230a      	movs	r3, #10
 80067f8:	e010      	b.n	800681c <HAL_GPIO_Init+0x240>
 80067fa:	2308      	movs	r3, #8
 80067fc:	e00e      	b.n	800681c <HAL_GPIO_Init+0x240>
 80067fe:	2307      	movs	r3, #7
 8006800:	e00c      	b.n	800681c <HAL_GPIO_Init+0x240>
 8006802:	2306      	movs	r3, #6
 8006804:	e00a      	b.n	800681c <HAL_GPIO_Init+0x240>
 8006806:	2305      	movs	r3, #5
 8006808:	e008      	b.n	800681c <HAL_GPIO_Init+0x240>
 800680a:	2304      	movs	r3, #4
 800680c:	e006      	b.n	800681c <HAL_GPIO_Init+0x240>
 800680e:	2303      	movs	r3, #3
 8006810:	e004      	b.n	800681c <HAL_GPIO_Init+0x240>
 8006812:	2302      	movs	r3, #2
 8006814:	e002      	b.n	800681c <HAL_GPIO_Init+0x240>
 8006816:	2301      	movs	r3, #1
 8006818:	e000      	b.n	800681c <HAL_GPIO_Init+0x240>
 800681a:	2300      	movs	r3, #0
 800681c:	69fa      	ldr	r2, [r7, #28]
 800681e:	f002 0203 	and.w	r2, r2, #3
 8006822:	0092      	lsls	r2, r2, #2
 8006824:	4093      	lsls	r3, r2
 8006826:	69ba      	ldr	r2, [r7, #24]
 8006828:	4313      	orrs	r3, r2
 800682a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800682c:	4935      	ldr	r1, [pc, #212]	@ (8006904 <HAL_GPIO_Init+0x328>)
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	089b      	lsrs	r3, r3, #2
 8006832:	3302      	adds	r3, #2
 8006834:	69ba      	ldr	r2, [r7, #24]
 8006836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800683a:	4b3d      	ldr	r3, [pc, #244]	@ (8006930 <HAL_GPIO_Init+0x354>)
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	43db      	mvns	r3, r3
 8006844:	69ba      	ldr	r2, [r7, #24]
 8006846:	4013      	ands	r3, r2
 8006848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006856:	69ba      	ldr	r2, [r7, #24]
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	4313      	orrs	r3, r2
 800685c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800685e:	4a34      	ldr	r2, [pc, #208]	@ (8006930 <HAL_GPIO_Init+0x354>)
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006864:	4b32      	ldr	r3, [pc, #200]	@ (8006930 <HAL_GPIO_Init+0x354>)
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	43db      	mvns	r3, r3
 800686e:	69ba      	ldr	r2, [r7, #24]
 8006870:	4013      	ands	r3, r2
 8006872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d003      	beq.n	8006888 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006880:	69ba      	ldr	r2, [r7, #24]
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	4313      	orrs	r3, r2
 8006886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006888:	4a29      	ldr	r2, [pc, #164]	@ (8006930 <HAL_GPIO_Init+0x354>)
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800688e:	4b28      	ldr	r3, [pc, #160]	@ (8006930 <HAL_GPIO_Init+0x354>)
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	43db      	mvns	r3, r3
 8006898:	69ba      	ldr	r2, [r7, #24]
 800689a:	4013      	ands	r3, r2
 800689c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80068aa:	69ba      	ldr	r2, [r7, #24]
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80068b2:	4a1f      	ldr	r2, [pc, #124]	@ (8006930 <HAL_GPIO_Init+0x354>)
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80068b8:	4b1d      	ldr	r3, [pc, #116]	@ (8006930 <HAL_GPIO_Init+0x354>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	43db      	mvns	r3, r3
 80068c2:	69ba      	ldr	r2, [r7, #24]
 80068c4:	4013      	ands	r3, r2
 80068c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d003      	beq.n	80068dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80068d4:	69ba      	ldr	r2, [r7, #24]
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	4313      	orrs	r3, r2
 80068da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80068dc:	4a14      	ldr	r2, [pc, #80]	@ (8006930 <HAL_GPIO_Init+0x354>)
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	3301      	adds	r3, #1
 80068e6:	61fb      	str	r3, [r7, #28]
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	2b0f      	cmp	r3, #15
 80068ec:	f67f ae84 	bls.w	80065f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80068f0:	bf00      	nop
 80068f2:	bf00      	nop
 80068f4:	3724      	adds	r7, #36	@ 0x24
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	40023800 	.word	0x40023800
 8006904:	40013800 	.word	0x40013800
 8006908:	40020000 	.word	0x40020000
 800690c:	40020400 	.word	0x40020400
 8006910:	40020800 	.word	0x40020800
 8006914:	40020c00 	.word	0x40020c00
 8006918:	40021000 	.word	0x40021000
 800691c:	40021400 	.word	0x40021400
 8006920:	40021800 	.word	0x40021800
 8006924:	40021c00 	.word	0x40021c00
 8006928:	40022000 	.word	0x40022000
 800692c:	40022400 	.word	0x40022400
 8006930:	40013c00 	.word	0x40013c00

08006934 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	460b      	mov	r3, r1
 800693e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	691a      	ldr	r2, [r3, #16]
 8006944:	887b      	ldrh	r3, [r7, #2]
 8006946:	4013      	ands	r3, r2
 8006948:	2b00      	cmp	r3, #0
 800694a:	d002      	beq.n	8006952 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800694c:	2301      	movs	r3, #1
 800694e:	73fb      	strb	r3, [r7, #15]
 8006950:	e001      	b.n	8006956 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006952:	2300      	movs	r3, #0
 8006954:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006956:	7bfb      	ldrb	r3, [r7, #15]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3714      	adds	r7, #20
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	460b      	mov	r3, r1
 800696e:	807b      	strh	r3, [r7, #2]
 8006970:	4613      	mov	r3, r2
 8006972:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006974:	787b      	ldrb	r3, [r7, #1]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d003      	beq.n	8006982 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800697a:	887a      	ldrh	r2, [r7, #2]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006980:	e003      	b.n	800698a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006982:	887b      	ldrh	r3, [r7, #2]
 8006984:	041a      	lsls	r2, r3, #16
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	619a      	str	r2, [r3, #24]
}
 800698a:	bf00      	nop
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006996:	b480      	push	{r7}
 8006998:	b085      	sub	sp, #20
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
 800699e:	460b      	mov	r3, r1
 80069a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80069a8:	887a      	ldrh	r2, [r7, #2]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	4013      	ands	r3, r2
 80069ae:	041a      	lsls	r2, r3, #16
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	43d9      	mvns	r1, r3
 80069b4:	887b      	ldrh	r3, [r7, #2]
 80069b6:	400b      	ands	r3, r1
 80069b8:	431a      	orrs	r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	619a      	str	r2, [r3, #24]
}
 80069be:	bf00      	nop
 80069c0:	3714      	adds	r7, #20
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr

080069ca <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b086      	sub	sp, #24
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4618      	mov	r0, r3
 80069e2:	f005 fb1d 	bl	800c020 <USB_GetMode>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	f040 80fb 	bne.w	8006be4 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f005 fae0 	bl	800bfb8 <USB_ReadInterrupts>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f000 80f1 	beq.w	8006be2 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4618      	mov	r0, r3
 8006a06:	f005 fad7 	bl	800bfb8 <USB_ReadInterrupts>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a14:	d104      	bne.n	8006a20 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8006a1e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4618      	mov	r0, r3
 8006a26:	f005 fac7 	bl	800bfb8 <USB_ReadInterrupts>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a34:	d104      	bne.n	8006a40 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006a3e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4618      	mov	r0, r3
 8006a46:	f005 fab7 	bl	800bfb8 <USB_ReadInterrupts>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006a50:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a54:	d104      	bne.n	8006a60 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8006a5e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f005 faa7 	bl	800bfb8 <USB_ReadInterrupts>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	f003 0302 	and.w	r3, r3, #2
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d103      	bne.n	8006a7c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2202      	movs	r2, #2
 8006a7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4618      	mov	r0, r3
 8006a82:	f005 fa99 	bl	800bfb8 <USB_ReadInterrupts>
 8006a86:	4603      	mov	r3, r0
 8006a88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a90:	d120      	bne.n	8006ad4 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8006a9a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d113      	bne.n	8006ad4 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8006aac:	2110      	movs	r1, #16
 8006aae:	6938      	ldr	r0, [r7, #16]
 8006ab0:	f005 f9ca 	bl	800be48 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8006ab4:	6938      	ldr	r0, [r7, #16]
 8006ab6:	f005 f9f9 	bl	800beac <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	7a5b      	ldrb	r3, [r3, #9]
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d105      	bne.n	8006ace <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2101      	movs	r1, #1
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f005 fab7 	bl	800c03c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f006 fe02 	bl	800d6d8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f005 fa6d 	bl	800bfb8 <USB_ReadInterrupts>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ae4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ae8:	d102      	bne.n	8006af0 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f001 fca1 	bl	8008432 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4618      	mov	r0, r3
 8006af6:	f005 fa5f 	bl	800bfb8 <USB_ReadInterrupts>
 8006afa:	4603      	mov	r3, r0
 8006afc:	f003 0308 	and.w	r3, r3, #8
 8006b00:	2b08      	cmp	r3, #8
 8006b02:	d106      	bne.n	8006b12 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f006 fdcb 	bl	800d6a0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2208      	movs	r2, #8
 8006b10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4618      	mov	r0, r3
 8006b18:	f005 fa4e 	bl	800bfb8 <USB_ReadInterrupts>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b26:	d139      	bne.n	8006b9c <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f005 fac2 	bl	800c0b6 <USB_HC_ReadInterrupt>
 8006b32:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006b34:	2300      	movs	r3, #0
 8006b36:	617b      	str	r3, [r7, #20]
 8006b38:	e025      	b.n	8006b86 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	f003 030f 	and.w	r3, r3, #15
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	fa22 f303 	lsr.w	r3, r2, r3
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d018      	beq.n	8006b80 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	015a      	lsls	r2, r3, #5
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b64:	d106      	bne.n	8006b74 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f859 	bl	8006c24 <HCD_HC_IN_IRQHandler>
 8006b72:	e005      	b.n	8006b80 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	4619      	mov	r1, r3
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 febb 	bl	80078f6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	3301      	adds	r3, #1
 8006b84:	617b      	str	r3, [r7, #20]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	795b      	ldrb	r3, [r3, #5]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d3d3      	bcc.n	8006b3a <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006b9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f005 fa09 	bl	800bfb8 <USB_ReadInterrupts>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	f003 0310 	and.w	r3, r3, #16
 8006bac:	2b10      	cmp	r3, #16
 8006bae:	d101      	bne.n	8006bb4 <HAL_HCD_IRQHandler+0x1ea>
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e000      	b.n	8006bb6 <HAL_HCD_IRQHandler+0x1ec>
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d014      	beq.n	8006be4 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	699a      	ldr	r2, [r3, #24]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f022 0210 	bic.w	r2, r2, #16
 8006bc8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f001 fb52 	bl	8008274 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	699a      	ldr	r2, [r3, #24]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f042 0210 	orr.w	r2, r2, #16
 8006bde:	619a      	str	r2, [r3, #24]
 8006be0:	e000      	b.n	8006be4 <HAL_HCD_IRQHandler+0x21a>
      return;
 8006be2:	bf00      	nop
    }
  }
}
 8006be4:	3718      	adds	r7, #24
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b082      	sub	sp, #8
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d101      	bne.n	8006c00 <HAL_HCD_Stop+0x16>
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	e00d      	b.n	8006c1c <HAL_HCD_Stop+0x32>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f005 fb83 	bl	800c318 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b086      	sub	sp, #24
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	78fa      	ldrb	r2, [r7, #3]
 8006c40:	4611      	mov	r1, r2
 8006c42:	4618      	mov	r0, r3
 8006c44:	f005 f9cb 	bl	800bfde <USB_ReadChInterrupts>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	f003 0304 	and.w	r3, r3, #4
 8006c4e:	2b04      	cmp	r3, #4
 8006c50:	d11a      	bne.n	8006c88 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8006c52:	78fb      	ldrb	r3, [r7, #3]
 8006c54:	015a      	lsls	r2, r3, #5
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	4413      	add	r3, r2
 8006c5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c5e:	461a      	mov	r2, r3
 8006c60:	2304      	movs	r3, #4
 8006c62:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8006c64:	78fa      	ldrb	r2, [r7, #3]
 8006c66:	6879      	ldr	r1, [r7, #4]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	011b      	lsls	r3, r3, #4
 8006c6c:	1a9b      	subs	r3, r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	440b      	add	r3, r1
 8006c72:	334d      	adds	r3, #77	@ 0x4d
 8006c74:	2207      	movs	r2, #7
 8006c76:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	78fa      	ldrb	r2, [r7, #3]
 8006c7e:	4611      	mov	r1, r2
 8006c80:	4618      	mov	r0, r3
 8006c82:	f005 fa29 	bl	800c0d8 <USB_HC_Halt>
 8006c86:	e09e      	b.n	8006dc6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	78fa      	ldrb	r2, [r7, #3]
 8006c8e:	4611      	mov	r1, r2
 8006c90:	4618      	mov	r0, r3
 8006c92:	f005 f9a4 	bl	800bfde <USB_ReadChInterrupts>
 8006c96:	4603      	mov	r3, r0
 8006c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ca0:	d11b      	bne.n	8006cda <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8006ca2:	78fb      	ldrb	r3, [r7, #3]
 8006ca4:	015a      	lsls	r2, r3, #5
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cae:	461a      	mov	r2, r3
 8006cb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006cb4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8006cb6:	78fa      	ldrb	r2, [r7, #3]
 8006cb8:	6879      	ldr	r1, [r7, #4]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	011b      	lsls	r3, r3, #4
 8006cbe:	1a9b      	subs	r3, r3, r2
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	440b      	add	r3, r1
 8006cc4:	334d      	adds	r3, #77	@ 0x4d
 8006cc6:	2208      	movs	r2, #8
 8006cc8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	78fa      	ldrb	r2, [r7, #3]
 8006cd0:	4611      	mov	r1, r2
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f005 fa00 	bl	800c0d8 <USB_HC_Halt>
 8006cd8:	e075      	b.n	8006dc6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	78fa      	ldrb	r2, [r7, #3]
 8006ce0:	4611      	mov	r1, r2
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f005 f97b 	bl	800bfde <USB_ReadChInterrupts>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	f003 0308 	and.w	r3, r3, #8
 8006cee:	2b08      	cmp	r3, #8
 8006cf0:	d11a      	bne.n	8006d28 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8006cf2:	78fb      	ldrb	r3, [r7, #3]
 8006cf4:	015a      	lsls	r2, r3, #5
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cfe:	461a      	mov	r2, r3
 8006d00:	2308      	movs	r3, #8
 8006d02:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8006d04:	78fa      	ldrb	r2, [r7, #3]
 8006d06:	6879      	ldr	r1, [r7, #4]
 8006d08:	4613      	mov	r3, r2
 8006d0a:	011b      	lsls	r3, r3, #4
 8006d0c:	1a9b      	subs	r3, r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	440b      	add	r3, r1
 8006d12:	334d      	adds	r3, #77	@ 0x4d
 8006d14:	2206      	movs	r2, #6
 8006d16:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	78fa      	ldrb	r2, [r7, #3]
 8006d1e:	4611      	mov	r1, r2
 8006d20:	4618      	mov	r0, r3
 8006d22:	f005 f9d9 	bl	800c0d8 <USB_HC_Halt>
 8006d26:	e04e      	b.n	8006dc6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	78fa      	ldrb	r2, [r7, #3]
 8006d2e:	4611      	mov	r1, r2
 8006d30:	4618      	mov	r0, r3
 8006d32:	f005 f954 	bl	800bfde <USB_ReadChInterrupts>
 8006d36:	4603      	mov	r3, r0
 8006d38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d40:	d11b      	bne.n	8006d7a <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8006d42:	78fb      	ldrb	r3, [r7, #3]
 8006d44:	015a      	lsls	r2, r3, #5
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	4413      	add	r3, r2
 8006d4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d4e:	461a      	mov	r2, r3
 8006d50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d54:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8006d56:	78fa      	ldrb	r2, [r7, #3]
 8006d58:	6879      	ldr	r1, [r7, #4]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	011b      	lsls	r3, r3, #4
 8006d5e:	1a9b      	subs	r3, r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	440b      	add	r3, r1
 8006d64:	334d      	adds	r3, #77	@ 0x4d
 8006d66:	2209      	movs	r2, #9
 8006d68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	78fa      	ldrb	r2, [r7, #3]
 8006d70:	4611      	mov	r1, r2
 8006d72:	4618      	mov	r0, r3
 8006d74:	f005 f9b0 	bl	800c0d8 <USB_HC_Halt>
 8006d78:	e025      	b.n	8006dc6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	78fa      	ldrb	r2, [r7, #3]
 8006d80:	4611      	mov	r1, r2
 8006d82:	4618      	mov	r0, r3
 8006d84:	f005 f92b 	bl	800bfde <USB_ReadChInterrupts>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d8e:	2b80      	cmp	r3, #128	@ 0x80
 8006d90:	d119      	bne.n	8006dc6 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8006d92:	78fb      	ldrb	r3, [r7, #3]
 8006d94:	015a      	lsls	r2, r3, #5
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	4413      	add	r3, r2
 8006d9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d9e:	461a      	mov	r2, r3
 8006da0:	2380      	movs	r3, #128	@ 0x80
 8006da2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8006da4:	78fa      	ldrb	r2, [r7, #3]
 8006da6:	6879      	ldr	r1, [r7, #4]
 8006da8:	4613      	mov	r3, r2
 8006daa:	011b      	lsls	r3, r3, #4
 8006dac:	1a9b      	subs	r3, r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	440b      	add	r3, r1
 8006db2:	334d      	adds	r3, #77	@ 0x4d
 8006db4:	2207      	movs	r2, #7
 8006db6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	78fa      	ldrb	r2, [r7, #3]
 8006dbe:	4611      	mov	r1, r2
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f005 f989 	bl	800c0d8 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	78fa      	ldrb	r2, [r7, #3]
 8006dcc:	4611      	mov	r1, r2
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f005 f905 	bl	800bfde <USB_ReadChInterrupts>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006dda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dde:	d112      	bne.n	8006e06 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	78fa      	ldrb	r2, [r7, #3]
 8006de6:	4611      	mov	r1, r2
 8006de8:	4618      	mov	r0, r3
 8006dea:	f005 f975 	bl	800c0d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8006dee:	78fb      	ldrb	r3, [r7, #3]
 8006df0:	015a      	lsls	r2, r3, #5
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	4413      	add	r3, r2
 8006df6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e00:	6093      	str	r3, [r2, #8]
 8006e02:	f000 bd75 	b.w	80078f0 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	78fa      	ldrb	r2, [r7, #3]
 8006e0c:	4611      	mov	r1, r2
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f005 f8e5 	bl	800bfde <USB_ReadChInterrupts>
 8006e14:	4603      	mov	r3, r0
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	f040 8128 	bne.w	8007070 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006e20:	78fb      	ldrb	r3, [r7, #3]
 8006e22:	015a      	lsls	r2, r3, #5
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	4413      	add	r3, r2
 8006e28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	2320      	movs	r3, #32
 8006e30:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8006e32:	78fa      	ldrb	r2, [r7, #3]
 8006e34:	6879      	ldr	r1, [r7, #4]
 8006e36:	4613      	mov	r3, r2
 8006e38:	011b      	lsls	r3, r3, #4
 8006e3a:	1a9b      	subs	r3, r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	440b      	add	r3, r1
 8006e40:	331b      	adds	r3, #27
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d119      	bne.n	8006e7c <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006e48:	78fa      	ldrb	r2, [r7, #3]
 8006e4a:	6879      	ldr	r1, [r7, #4]
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	011b      	lsls	r3, r3, #4
 8006e50:	1a9b      	subs	r3, r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	440b      	add	r3, r1
 8006e56:	331b      	adds	r3, #27
 8006e58:	2200      	movs	r2, #0
 8006e5a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006e5c:	78fb      	ldrb	r3, [r7, #3]
 8006e5e:	015a      	lsls	r2, r3, #5
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	4413      	add	r3, r2
 8006e64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	78fa      	ldrb	r2, [r7, #3]
 8006e6c:	0151      	lsls	r1, r2, #5
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	440a      	add	r2, r1
 8006e72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e7a:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	799b      	ldrb	r3, [r3, #6]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d01b      	beq.n	8006ebc <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8006e84:	78fa      	ldrb	r2, [r7, #3]
 8006e86:	6879      	ldr	r1, [r7, #4]
 8006e88:	4613      	mov	r3, r2
 8006e8a:	011b      	lsls	r3, r3, #4
 8006e8c:	1a9b      	subs	r3, r3, r2
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	440b      	add	r3, r1
 8006e92:	3330      	adds	r3, #48	@ 0x30
 8006e94:	6819      	ldr	r1, [r3, #0]
 8006e96:	78fb      	ldrb	r3, [r7, #3]
 8006e98:	015a      	lsls	r2, r3, #5
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ea8:	78fa      	ldrb	r2, [r7, #3]
 8006eaa:	1ac9      	subs	r1, r1, r3
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	011b      	lsls	r3, r3, #4
 8006eb2:	1a9b      	subs	r3, r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4403      	add	r3, r0
 8006eb8:	3338      	adds	r3, #56	@ 0x38
 8006eba:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8006ebc:	78fa      	ldrb	r2, [r7, #3]
 8006ebe:	6879      	ldr	r1, [r7, #4]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	011b      	lsls	r3, r3, #4
 8006ec4:	1a9b      	subs	r3, r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	440b      	add	r3, r1
 8006eca:	334d      	adds	r3, #77	@ 0x4d
 8006ecc:	2201      	movs	r2, #1
 8006ece:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8006ed0:	78fa      	ldrb	r2, [r7, #3]
 8006ed2:	6879      	ldr	r1, [r7, #4]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	011b      	lsls	r3, r3, #4
 8006ed8:	1a9b      	subs	r3, r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	440b      	add	r3, r1
 8006ede:	3344      	adds	r3, #68	@ 0x44
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8006ee4:	78fb      	ldrb	r3, [r7, #3]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006ef6:	78fa      	ldrb	r2, [r7, #3]
 8006ef8:	6879      	ldr	r1, [r7, #4]
 8006efa:	4613      	mov	r3, r2
 8006efc:	011b      	lsls	r3, r3, #4
 8006efe:	1a9b      	subs	r3, r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	440b      	add	r3, r1
 8006f04:	3326      	adds	r3, #38	@ 0x26
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00a      	beq.n	8006f22 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006f0c:	78fa      	ldrb	r2, [r7, #3]
 8006f0e:	6879      	ldr	r1, [r7, #4]
 8006f10:	4613      	mov	r3, r2
 8006f12:	011b      	lsls	r3, r3, #4
 8006f14:	1a9b      	subs	r3, r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	440b      	add	r3, r1
 8006f1a:	3326      	adds	r3, #38	@ 0x26
 8006f1c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d110      	bne.n	8006f44 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	78fa      	ldrb	r2, [r7, #3]
 8006f28:	4611      	mov	r1, r2
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f005 f8d4 	bl	800c0d8 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006f30:	78fb      	ldrb	r3, [r7, #3]
 8006f32:	015a      	lsls	r2, r3, #5
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	4413      	add	r3, r2
 8006f38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	2310      	movs	r3, #16
 8006f40:	6093      	str	r3, [r2, #8]
 8006f42:	e03d      	b.n	8006fc0 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8006f44:	78fa      	ldrb	r2, [r7, #3]
 8006f46:	6879      	ldr	r1, [r7, #4]
 8006f48:	4613      	mov	r3, r2
 8006f4a:	011b      	lsls	r3, r3, #4
 8006f4c:	1a9b      	subs	r3, r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	440b      	add	r3, r1
 8006f52:	3326      	adds	r3, #38	@ 0x26
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	2b03      	cmp	r3, #3
 8006f58:	d00a      	beq.n	8006f70 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8006f5a:	78fa      	ldrb	r2, [r7, #3]
 8006f5c:	6879      	ldr	r1, [r7, #4]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	011b      	lsls	r3, r3, #4
 8006f62:	1a9b      	subs	r3, r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	440b      	add	r3, r1
 8006f68:	3326      	adds	r3, #38	@ 0x26
 8006f6a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d127      	bne.n	8006fc0 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006f70:	78fb      	ldrb	r3, [r7, #3]
 8006f72:	015a      	lsls	r2, r3, #5
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	4413      	add	r3, r2
 8006f78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	78fa      	ldrb	r2, [r7, #3]
 8006f80:	0151      	lsls	r1, r2, #5
 8006f82:	693a      	ldr	r2, [r7, #16]
 8006f84:	440a      	add	r2, r1
 8006f86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f8a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006f8e:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006f90:	78fa      	ldrb	r2, [r7, #3]
 8006f92:	6879      	ldr	r1, [r7, #4]
 8006f94:	4613      	mov	r3, r2
 8006f96:	011b      	lsls	r3, r3, #4
 8006f98:	1a9b      	subs	r3, r3, r2
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	440b      	add	r3, r1
 8006f9e:	334c      	adds	r3, #76	@ 0x4c
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006fa4:	78fa      	ldrb	r2, [r7, #3]
 8006fa6:	6879      	ldr	r1, [r7, #4]
 8006fa8:	4613      	mov	r3, r2
 8006faa:	011b      	lsls	r3, r3, #4
 8006fac:	1a9b      	subs	r3, r3, r2
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	440b      	add	r3, r1
 8006fb2:	334c      	adds	r3, #76	@ 0x4c
 8006fb4:	781a      	ldrb	r2, [r3, #0]
 8006fb6:	78fb      	ldrb	r3, [r7, #3]
 8006fb8:	4619      	mov	r1, r3
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f006 fb9a 	bl	800d6f4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	799b      	ldrb	r3, [r3, #6]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d13b      	bne.n	8007040 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8006fc8:	78fa      	ldrb	r2, [r7, #3]
 8006fca:	6879      	ldr	r1, [r7, #4]
 8006fcc:	4613      	mov	r3, r2
 8006fce:	011b      	lsls	r3, r3, #4
 8006fd0:	1a9b      	subs	r3, r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	440b      	add	r3, r1
 8006fd6:	3338      	adds	r3, #56	@ 0x38
 8006fd8:	6819      	ldr	r1, [r3, #0]
 8006fda:	78fa      	ldrb	r2, [r7, #3]
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	011b      	lsls	r3, r3, #4
 8006fe2:	1a9b      	subs	r3, r3, r2
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	4403      	add	r3, r0
 8006fe8:	3328      	adds	r3, #40	@ 0x28
 8006fea:	881b      	ldrh	r3, [r3, #0]
 8006fec:	440b      	add	r3, r1
 8006fee:	1e59      	subs	r1, r3, #1
 8006ff0:	78fa      	ldrb	r2, [r7, #3]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	011b      	lsls	r3, r3, #4
 8006ff8:	1a9b      	subs	r3, r3, r2
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	4403      	add	r3, r0
 8006ffe:	3328      	adds	r3, #40	@ 0x28
 8007000:	881b      	ldrh	r3, [r3, #0]
 8007002:	fbb1 f3f3 	udiv	r3, r1, r3
 8007006:	f003 0301 	and.w	r3, r3, #1
 800700a:	2b00      	cmp	r3, #0
 800700c:	f000 8470 	beq.w	80078f0 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8007010:	78fa      	ldrb	r2, [r7, #3]
 8007012:	6879      	ldr	r1, [r7, #4]
 8007014:	4613      	mov	r3, r2
 8007016:	011b      	lsls	r3, r3, #4
 8007018:	1a9b      	subs	r3, r3, r2
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	440b      	add	r3, r1
 800701e:	333c      	adds	r3, #60	@ 0x3c
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	78fa      	ldrb	r2, [r7, #3]
 8007024:	f083 0301 	eor.w	r3, r3, #1
 8007028:	b2d8      	uxtb	r0, r3
 800702a:	6879      	ldr	r1, [r7, #4]
 800702c:	4613      	mov	r3, r2
 800702e:	011b      	lsls	r3, r3, #4
 8007030:	1a9b      	subs	r3, r3, r2
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	440b      	add	r3, r1
 8007036:	333c      	adds	r3, #60	@ 0x3c
 8007038:	4602      	mov	r2, r0
 800703a:	701a      	strb	r2, [r3, #0]
 800703c:	f000 bc58 	b.w	80078f0 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8007040:	78fa      	ldrb	r2, [r7, #3]
 8007042:	6879      	ldr	r1, [r7, #4]
 8007044:	4613      	mov	r3, r2
 8007046:	011b      	lsls	r3, r3, #4
 8007048:	1a9b      	subs	r3, r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	440b      	add	r3, r1
 800704e:	333c      	adds	r3, #60	@ 0x3c
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	78fa      	ldrb	r2, [r7, #3]
 8007054:	f083 0301 	eor.w	r3, r3, #1
 8007058:	b2d8      	uxtb	r0, r3
 800705a:	6879      	ldr	r1, [r7, #4]
 800705c:	4613      	mov	r3, r2
 800705e:	011b      	lsls	r3, r3, #4
 8007060:	1a9b      	subs	r3, r3, r2
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	440b      	add	r3, r1
 8007066:	333c      	adds	r3, #60	@ 0x3c
 8007068:	4602      	mov	r2, r0
 800706a:	701a      	strb	r2, [r3, #0]
 800706c:	f000 bc40 	b.w	80078f0 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	78fa      	ldrb	r2, [r7, #3]
 8007076:	4611      	mov	r1, r2
 8007078:	4618      	mov	r0, r3
 800707a:	f004 ffb0 	bl	800bfde <USB_ReadChInterrupts>
 800707e:	4603      	mov	r3, r0
 8007080:	f003 0320 	and.w	r3, r3, #32
 8007084:	2b20      	cmp	r3, #32
 8007086:	d131      	bne.n	80070ec <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8007088:	78fb      	ldrb	r3, [r7, #3]
 800708a:	015a      	lsls	r2, r3, #5
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	4413      	add	r3, r2
 8007090:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007094:	461a      	mov	r2, r3
 8007096:	2320      	movs	r3, #32
 8007098:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800709a:	78fa      	ldrb	r2, [r7, #3]
 800709c:	6879      	ldr	r1, [r7, #4]
 800709e:	4613      	mov	r3, r2
 80070a0:	011b      	lsls	r3, r3, #4
 80070a2:	1a9b      	subs	r3, r3, r2
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	440b      	add	r3, r1
 80070a8:	331a      	adds	r3, #26
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	f040 841f 	bne.w	80078f0 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80070b2:	78fa      	ldrb	r2, [r7, #3]
 80070b4:	6879      	ldr	r1, [r7, #4]
 80070b6:	4613      	mov	r3, r2
 80070b8:	011b      	lsls	r3, r3, #4
 80070ba:	1a9b      	subs	r3, r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	440b      	add	r3, r1
 80070c0:	331b      	adds	r3, #27
 80070c2:	2201      	movs	r2, #1
 80070c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80070c6:	78fa      	ldrb	r2, [r7, #3]
 80070c8:	6879      	ldr	r1, [r7, #4]
 80070ca:	4613      	mov	r3, r2
 80070cc:	011b      	lsls	r3, r3, #4
 80070ce:	1a9b      	subs	r3, r3, r2
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	440b      	add	r3, r1
 80070d4:	334d      	adds	r3, #77	@ 0x4d
 80070d6:	2203      	movs	r2, #3
 80070d8:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	78fa      	ldrb	r2, [r7, #3]
 80070e0:	4611      	mov	r1, r2
 80070e2:	4618      	mov	r0, r3
 80070e4:	f004 fff8 	bl	800c0d8 <USB_HC_Halt>
 80070e8:	f000 bc02 	b.w	80078f0 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	78fa      	ldrb	r2, [r7, #3]
 80070f2:	4611      	mov	r1, r2
 80070f4:	4618      	mov	r0, r3
 80070f6:	f004 ff72 	bl	800bfde <USB_ReadChInterrupts>
 80070fa:	4603      	mov	r3, r0
 80070fc:	f003 0302 	and.w	r3, r3, #2
 8007100:	2b02      	cmp	r3, #2
 8007102:	f040 8305 	bne.w	8007710 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8007106:	78fb      	ldrb	r3, [r7, #3]
 8007108:	015a      	lsls	r2, r3, #5
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	4413      	add	r3, r2
 800710e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007112:	461a      	mov	r2, r3
 8007114:	2302      	movs	r3, #2
 8007116:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8007118:	78fa      	ldrb	r2, [r7, #3]
 800711a:	6879      	ldr	r1, [r7, #4]
 800711c:	4613      	mov	r3, r2
 800711e:	011b      	lsls	r3, r3, #4
 8007120:	1a9b      	subs	r3, r3, r2
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	440b      	add	r3, r1
 8007126:	334d      	adds	r3, #77	@ 0x4d
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d114      	bne.n	8007158 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800712e:	78fa      	ldrb	r2, [r7, #3]
 8007130:	6879      	ldr	r1, [r7, #4]
 8007132:	4613      	mov	r3, r2
 8007134:	011b      	lsls	r3, r3, #4
 8007136:	1a9b      	subs	r3, r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	440b      	add	r3, r1
 800713c:	334d      	adds	r3, #77	@ 0x4d
 800713e:	2202      	movs	r2, #2
 8007140:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8007142:	78fa      	ldrb	r2, [r7, #3]
 8007144:	6879      	ldr	r1, [r7, #4]
 8007146:	4613      	mov	r3, r2
 8007148:	011b      	lsls	r3, r3, #4
 800714a:	1a9b      	subs	r3, r3, r2
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	440b      	add	r3, r1
 8007150:	334c      	adds	r3, #76	@ 0x4c
 8007152:	2201      	movs	r2, #1
 8007154:	701a      	strb	r2, [r3, #0]
 8007156:	e2cc      	b.n	80076f2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8007158:	78fa      	ldrb	r2, [r7, #3]
 800715a:	6879      	ldr	r1, [r7, #4]
 800715c:	4613      	mov	r3, r2
 800715e:	011b      	lsls	r3, r3, #4
 8007160:	1a9b      	subs	r3, r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	440b      	add	r3, r1
 8007166:	334d      	adds	r3, #77	@ 0x4d
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	2b06      	cmp	r3, #6
 800716c:	d114      	bne.n	8007198 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800716e:	78fa      	ldrb	r2, [r7, #3]
 8007170:	6879      	ldr	r1, [r7, #4]
 8007172:	4613      	mov	r3, r2
 8007174:	011b      	lsls	r3, r3, #4
 8007176:	1a9b      	subs	r3, r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	440b      	add	r3, r1
 800717c:	334d      	adds	r3, #77	@ 0x4d
 800717e:	2202      	movs	r2, #2
 8007180:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8007182:	78fa      	ldrb	r2, [r7, #3]
 8007184:	6879      	ldr	r1, [r7, #4]
 8007186:	4613      	mov	r3, r2
 8007188:	011b      	lsls	r3, r3, #4
 800718a:	1a9b      	subs	r3, r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	440b      	add	r3, r1
 8007190:	334c      	adds	r3, #76	@ 0x4c
 8007192:	2205      	movs	r2, #5
 8007194:	701a      	strb	r2, [r3, #0]
 8007196:	e2ac      	b.n	80076f2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8007198:	78fa      	ldrb	r2, [r7, #3]
 800719a:	6879      	ldr	r1, [r7, #4]
 800719c:	4613      	mov	r3, r2
 800719e:	011b      	lsls	r3, r3, #4
 80071a0:	1a9b      	subs	r3, r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	440b      	add	r3, r1
 80071a6:	334d      	adds	r3, #77	@ 0x4d
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	2b07      	cmp	r3, #7
 80071ac:	d00b      	beq.n	80071c6 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80071ae:	78fa      	ldrb	r2, [r7, #3]
 80071b0:	6879      	ldr	r1, [r7, #4]
 80071b2:	4613      	mov	r3, r2
 80071b4:	011b      	lsls	r3, r3, #4
 80071b6:	1a9b      	subs	r3, r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	440b      	add	r3, r1
 80071bc:	334d      	adds	r3, #77	@ 0x4d
 80071be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80071c0:	2b09      	cmp	r3, #9
 80071c2:	f040 80a6 	bne.w	8007312 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80071c6:	78fa      	ldrb	r2, [r7, #3]
 80071c8:	6879      	ldr	r1, [r7, #4]
 80071ca:	4613      	mov	r3, r2
 80071cc:	011b      	lsls	r3, r3, #4
 80071ce:	1a9b      	subs	r3, r3, r2
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	440b      	add	r3, r1
 80071d4:	334d      	adds	r3, #77	@ 0x4d
 80071d6:	2202      	movs	r2, #2
 80071d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80071da:	78fa      	ldrb	r2, [r7, #3]
 80071dc:	6879      	ldr	r1, [r7, #4]
 80071de:	4613      	mov	r3, r2
 80071e0:	011b      	lsls	r3, r3, #4
 80071e2:	1a9b      	subs	r3, r3, r2
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	440b      	add	r3, r1
 80071e8:	3344      	adds	r3, #68	@ 0x44
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	1c59      	adds	r1, r3, #1
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	4613      	mov	r3, r2
 80071f2:	011b      	lsls	r3, r3, #4
 80071f4:	1a9b      	subs	r3, r3, r2
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	4403      	add	r3, r0
 80071fa:	3344      	adds	r3, #68	@ 0x44
 80071fc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80071fe:	78fa      	ldrb	r2, [r7, #3]
 8007200:	6879      	ldr	r1, [r7, #4]
 8007202:	4613      	mov	r3, r2
 8007204:	011b      	lsls	r3, r3, #4
 8007206:	1a9b      	subs	r3, r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	440b      	add	r3, r1
 800720c:	3344      	adds	r3, #68	@ 0x44
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2b02      	cmp	r3, #2
 8007212:	d943      	bls.n	800729c <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8007214:	78fa      	ldrb	r2, [r7, #3]
 8007216:	6879      	ldr	r1, [r7, #4]
 8007218:	4613      	mov	r3, r2
 800721a:	011b      	lsls	r3, r3, #4
 800721c:	1a9b      	subs	r3, r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	440b      	add	r3, r1
 8007222:	3344      	adds	r3, #68	@ 0x44
 8007224:	2200      	movs	r2, #0
 8007226:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8007228:	78fa      	ldrb	r2, [r7, #3]
 800722a:	6879      	ldr	r1, [r7, #4]
 800722c:	4613      	mov	r3, r2
 800722e:	011b      	lsls	r3, r3, #4
 8007230:	1a9b      	subs	r3, r3, r2
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	440b      	add	r3, r1
 8007236:	331a      	adds	r3, #26
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d123      	bne.n	8007286 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800723e:	78fa      	ldrb	r2, [r7, #3]
 8007240:	6879      	ldr	r1, [r7, #4]
 8007242:	4613      	mov	r3, r2
 8007244:	011b      	lsls	r3, r3, #4
 8007246:	1a9b      	subs	r3, r3, r2
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	440b      	add	r3, r1
 800724c:	331b      	adds	r3, #27
 800724e:	2200      	movs	r2, #0
 8007250:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8007252:	78fa      	ldrb	r2, [r7, #3]
 8007254:	6879      	ldr	r1, [r7, #4]
 8007256:	4613      	mov	r3, r2
 8007258:	011b      	lsls	r3, r3, #4
 800725a:	1a9b      	subs	r3, r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	440b      	add	r3, r1
 8007260:	331c      	adds	r3, #28
 8007262:	2200      	movs	r2, #0
 8007264:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007266:	78fb      	ldrb	r3, [r7, #3]
 8007268:	015a      	lsls	r2, r3, #5
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	4413      	add	r3, r2
 800726e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	78fa      	ldrb	r2, [r7, #3]
 8007276:	0151      	lsls	r1, r2, #5
 8007278:	693a      	ldr	r2, [r7, #16]
 800727a:	440a      	add	r2, r1
 800727c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007280:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007284:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8007286:	78fa      	ldrb	r2, [r7, #3]
 8007288:	6879      	ldr	r1, [r7, #4]
 800728a:	4613      	mov	r3, r2
 800728c:	011b      	lsls	r3, r3, #4
 800728e:	1a9b      	subs	r3, r3, r2
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	440b      	add	r3, r1
 8007294:	334c      	adds	r3, #76	@ 0x4c
 8007296:	2204      	movs	r2, #4
 8007298:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800729a:	e229      	b.n	80076f0 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800729c:	78fa      	ldrb	r2, [r7, #3]
 800729e:	6879      	ldr	r1, [r7, #4]
 80072a0:	4613      	mov	r3, r2
 80072a2:	011b      	lsls	r3, r3, #4
 80072a4:	1a9b      	subs	r3, r3, r2
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	440b      	add	r3, r1
 80072aa:	334c      	adds	r3, #76	@ 0x4c
 80072ac:	2202      	movs	r2, #2
 80072ae:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80072b0:	78fa      	ldrb	r2, [r7, #3]
 80072b2:	6879      	ldr	r1, [r7, #4]
 80072b4:	4613      	mov	r3, r2
 80072b6:	011b      	lsls	r3, r3, #4
 80072b8:	1a9b      	subs	r3, r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	440b      	add	r3, r1
 80072be:	3326      	adds	r3, #38	@ 0x26
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00b      	beq.n	80072de <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80072c6:	78fa      	ldrb	r2, [r7, #3]
 80072c8:	6879      	ldr	r1, [r7, #4]
 80072ca:	4613      	mov	r3, r2
 80072cc:	011b      	lsls	r3, r3, #4
 80072ce:	1a9b      	subs	r3, r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	440b      	add	r3, r1
 80072d4:	3326      	adds	r3, #38	@ 0x26
 80072d6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80072d8:	2b02      	cmp	r3, #2
 80072da:	f040 8209 	bne.w	80076f0 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80072de:	78fb      	ldrb	r3, [r7, #3]
 80072e0:	015a      	lsls	r2, r3, #5
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	4413      	add	r3, r2
 80072e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80072f4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80072fc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80072fe:	78fb      	ldrb	r3, [r7, #3]
 8007300:	015a      	lsls	r2, r3, #5
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	4413      	add	r3, r2
 8007306:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800730a:	461a      	mov	r2, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007310:	e1ee      	b.n	80076f0 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8007312:	78fa      	ldrb	r2, [r7, #3]
 8007314:	6879      	ldr	r1, [r7, #4]
 8007316:	4613      	mov	r3, r2
 8007318:	011b      	lsls	r3, r3, #4
 800731a:	1a9b      	subs	r3, r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	440b      	add	r3, r1
 8007320:	334d      	adds	r3, #77	@ 0x4d
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	2b05      	cmp	r3, #5
 8007326:	f040 80c8 	bne.w	80074ba <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800732a:	78fa      	ldrb	r2, [r7, #3]
 800732c:	6879      	ldr	r1, [r7, #4]
 800732e:	4613      	mov	r3, r2
 8007330:	011b      	lsls	r3, r3, #4
 8007332:	1a9b      	subs	r3, r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	440b      	add	r3, r1
 8007338:	334d      	adds	r3, #77	@ 0x4d
 800733a:	2202      	movs	r2, #2
 800733c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800733e:	78fa      	ldrb	r2, [r7, #3]
 8007340:	6879      	ldr	r1, [r7, #4]
 8007342:	4613      	mov	r3, r2
 8007344:	011b      	lsls	r3, r3, #4
 8007346:	1a9b      	subs	r3, r3, r2
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	440b      	add	r3, r1
 800734c:	331b      	adds	r3, #27
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	2b01      	cmp	r3, #1
 8007352:	f040 81ce 	bne.w	80076f2 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8007356:	78fa      	ldrb	r2, [r7, #3]
 8007358:	6879      	ldr	r1, [r7, #4]
 800735a:	4613      	mov	r3, r2
 800735c:	011b      	lsls	r3, r3, #4
 800735e:	1a9b      	subs	r3, r3, r2
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	440b      	add	r3, r1
 8007364:	3326      	adds	r3, #38	@ 0x26
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	2b03      	cmp	r3, #3
 800736a:	d16b      	bne.n	8007444 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800736c:	78fa      	ldrb	r2, [r7, #3]
 800736e:	6879      	ldr	r1, [r7, #4]
 8007370:	4613      	mov	r3, r2
 8007372:	011b      	lsls	r3, r3, #4
 8007374:	1a9b      	subs	r3, r3, r2
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	440b      	add	r3, r1
 800737a:	3348      	adds	r3, #72	@ 0x48
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	1c59      	adds	r1, r3, #1
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	4613      	mov	r3, r2
 8007384:	011b      	lsls	r3, r3, #4
 8007386:	1a9b      	subs	r3, r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	4403      	add	r3, r0
 800738c:	3348      	adds	r3, #72	@ 0x48
 800738e:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8007390:	78fa      	ldrb	r2, [r7, #3]
 8007392:	6879      	ldr	r1, [r7, #4]
 8007394:	4613      	mov	r3, r2
 8007396:	011b      	lsls	r3, r3, #4
 8007398:	1a9b      	subs	r3, r3, r2
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	440b      	add	r3, r1
 800739e:	3348      	adds	r3, #72	@ 0x48
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d943      	bls.n	800742e <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80073a6:	78fa      	ldrb	r2, [r7, #3]
 80073a8:	6879      	ldr	r1, [r7, #4]
 80073aa:	4613      	mov	r3, r2
 80073ac:	011b      	lsls	r3, r3, #4
 80073ae:	1a9b      	subs	r3, r3, r2
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	440b      	add	r3, r1
 80073b4:	3348      	adds	r3, #72	@ 0x48
 80073b6:	2200      	movs	r2, #0
 80073b8:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80073ba:	78fa      	ldrb	r2, [r7, #3]
 80073bc:	6879      	ldr	r1, [r7, #4]
 80073be:	4613      	mov	r3, r2
 80073c0:	011b      	lsls	r3, r3, #4
 80073c2:	1a9b      	subs	r3, r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	440b      	add	r3, r1
 80073c8:	331b      	adds	r3, #27
 80073ca:	2200      	movs	r2, #0
 80073cc:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80073ce:	78fa      	ldrb	r2, [r7, #3]
 80073d0:	6879      	ldr	r1, [r7, #4]
 80073d2:	4613      	mov	r3, r2
 80073d4:	011b      	lsls	r3, r3, #4
 80073d6:	1a9b      	subs	r3, r3, r2
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	440b      	add	r3, r1
 80073dc:	3344      	adds	r3, #68	@ 0x44
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d809      	bhi.n	80073f8 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80073e4:	78fa      	ldrb	r2, [r7, #3]
 80073e6:	6879      	ldr	r1, [r7, #4]
 80073e8:	4613      	mov	r3, r2
 80073ea:	011b      	lsls	r3, r3, #4
 80073ec:	1a9b      	subs	r3, r3, r2
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	440b      	add	r3, r1
 80073f2:	331c      	adds	r3, #28
 80073f4:	2201      	movs	r2, #1
 80073f6:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80073f8:	78fb      	ldrb	r3, [r7, #3]
 80073fa:	015a      	lsls	r2, r3, #5
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	4413      	add	r3, r2
 8007400:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	78fa      	ldrb	r2, [r7, #3]
 8007408:	0151      	lsls	r1, r2, #5
 800740a:	693a      	ldr	r2, [r7, #16]
 800740c:	440a      	add	r2, r1
 800740e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007412:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007416:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8007418:	78fa      	ldrb	r2, [r7, #3]
 800741a:	6879      	ldr	r1, [r7, #4]
 800741c:	4613      	mov	r3, r2
 800741e:	011b      	lsls	r3, r3, #4
 8007420:	1a9b      	subs	r3, r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	440b      	add	r3, r1
 8007426:	334c      	adds	r3, #76	@ 0x4c
 8007428:	2204      	movs	r2, #4
 800742a:	701a      	strb	r2, [r3, #0]
 800742c:	e014      	b.n	8007458 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800742e:	78fa      	ldrb	r2, [r7, #3]
 8007430:	6879      	ldr	r1, [r7, #4]
 8007432:	4613      	mov	r3, r2
 8007434:	011b      	lsls	r3, r3, #4
 8007436:	1a9b      	subs	r3, r3, r2
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	440b      	add	r3, r1
 800743c:	334c      	adds	r3, #76	@ 0x4c
 800743e:	2202      	movs	r2, #2
 8007440:	701a      	strb	r2, [r3, #0]
 8007442:	e009      	b.n	8007458 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007444:	78fa      	ldrb	r2, [r7, #3]
 8007446:	6879      	ldr	r1, [r7, #4]
 8007448:	4613      	mov	r3, r2
 800744a:	011b      	lsls	r3, r3, #4
 800744c:	1a9b      	subs	r3, r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	440b      	add	r3, r1
 8007452:	334c      	adds	r3, #76	@ 0x4c
 8007454:	2202      	movs	r2, #2
 8007456:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007458:	78fa      	ldrb	r2, [r7, #3]
 800745a:	6879      	ldr	r1, [r7, #4]
 800745c:	4613      	mov	r3, r2
 800745e:	011b      	lsls	r3, r3, #4
 8007460:	1a9b      	subs	r3, r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	440b      	add	r3, r1
 8007466:	3326      	adds	r3, #38	@ 0x26
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00b      	beq.n	8007486 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800746e:	78fa      	ldrb	r2, [r7, #3]
 8007470:	6879      	ldr	r1, [r7, #4]
 8007472:	4613      	mov	r3, r2
 8007474:	011b      	lsls	r3, r3, #4
 8007476:	1a9b      	subs	r3, r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	440b      	add	r3, r1
 800747c:	3326      	adds	r3, #38	@ 0x26
 800747e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007480:	2b02      	cmp	r3, #2
 8007482:	f040 8136 	bne.w	80076f2 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8007486:	78fb      	ldrb	r3, [r7, #3]
 8007488:	015a      	lsls	r2, r3, #5
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	4413      	add	r3, r2
 800748e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800749c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80074a4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80074a6:	78fb      	ldrb	r3, [r7, #3]
 80074a8:	015a      	lsls	r2, r3, #5
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	4413      	add	r3, r2
 80074ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074b2:	461a      	mov	r2, r3
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6013      	str	r3, [r2, #0]
 80074b8:	e11b      	b.n	80076f2 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80074ba:	78fa      	ldrb	r2, [r7, #3]
 80074bc:	6879      	ldr	r1, [r7, #4]
 80074be:	4613      	mov	r3, r2
 80074c0:	011b      	lsls	r3, r3, #4
 80074c2:	1a9b      	subs	r3, r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	440b      	add	r3, r1
 80074c8:	334d      	adds	r3, #77	@ 0x4d
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	2b03      	cmp	r3, #3
 80074ce:	f040 8081 	bne.w	80075d4 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80074d2:	78fa      	ldrb	r2, [r7, #3]
 80074d4:	6879      	ldr	r1, [r7, #4]
 80074d6:	4613      	mov	r3, r2
 80074d8:	011b      	lsls	r3, r3, #4
 80074da:	1a9b      	subs	r3, r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	440b      	add	r3, r1
 80074e0:	334d      	adds	r3, #77	@ 0x4d
 80074e2:	2202      	movs	r2, #2
 80074e4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80074e6:	78fa      	ldrb	r2, [r7, #3]
 80074e8:	6879      	ldr	r1, [r7, #4]
 80074ea:	4613      	mov	r3, r2
 80074ec:	011b      	lsls	r3, r3, #4
 80074ee:	1a9b      	subs	r3, r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	440b      	add	r3, r1
 80074f4:	331b      	adds	r3, #27
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	f040 80fa 	bne.w	80076f2 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80074fe:	78fa      	ldrb	r2, [r7, #3]
 8007500:	6879      	ldr	r1, [r7, #4]
 8007502:	4613      	mov	r3, r2
 8007504:	011b      	lsls	r3, r3, #4
 8007506:	1a9b      	subs	r3, r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	440b      	add	r3, r1
 800750c:	334c      	adds	r3, #76	@ 0x4c
 800750e:	2202      	movs	r2, #2
 8007510:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007512:	78fb      	ldrb	r3, [r7, #3]
 8007514:	015a      	lsls	r2, r3, #5
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	4413      	add	r3, r2
 800751a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	78fa      	ldrb	r2, [r7, #3]
 8007522:	0151      	lsls	r1, r2, #5
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	440a      	add	r2, r1
 8007528:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800752c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007530:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007532:	78fb      	ldrb	r3, [r7, #3]
 8007534:	015a      	lsls	r2, r3, #5
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	4413      	add	r3, r2
 800753a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	78fa      	ldrb	r2, [r7, #3]
 8007542:	0151      	lsls	r1, r2, #5
 8007544:	693a      	ldr	r2, [r7, #16]
 8007546:	440a      	add	r2, r1
 8007548:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800754c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007550:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8007552:	78fb      	ldrb	r3, [r7, #3]
 8007554:	015a      	lsls	r2, r3, #5
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	4413      	add	r3, r2
 800755a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	78fa      	ldrb	r2, [r7, #3]
 8007562:	0151      	lsls	r1, r2, #5
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	440a      	add	r2, r1
 8007568:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800756c:	f023 0320 	bic.w	r3, r3, #32
 8007570:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007572:	78fa      	ldrb	r2, [r7, #3]
 8007574:	6879      	ldr	r1, [r7, #4]
 8007576:	4613      	mov	r3, r2
 8007578:	011b      	lsls	r3, r3, #4
 800757a:	1a9b      	subs	r3, r3, r2
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	440b      	add	r3, r1
 8007580:	3326      	adds	r3, #38	@ 0x26
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00b      	beq.n	80075a0 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007588:	78fa      	ldrb	r2, [r7, #3]
 800758a:	6879      	ldr	r1, [r7, #4]
 800758c:	4613      	mov	r3, r2
 800758e:	011b      	lsls	r3, r3, #4
 8007590:	1a9b      	subs	r3, r3, r2
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	440b      	add	r3, r1
 8007596:	3326      	adds	r3, #38	@ 0x26
 8007598:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800759a:	2b02      	cmp	r3, #2
 800759c:	f040 80a9 	bne.w	80076f2 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80075a0:	78fb      	ldrb	r3, [r7, #3]
 80075a2:	015a      	lsls	r2, r3, #5
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	4413      	add	r3, r2
 80075a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80075b6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80075be:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80075c0:	78fb      	ldrb	r3, [r7, #3]
 80075c2:	015a      	lsls	r2, r3, #5
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	4413      	add	r3, r2
 80075c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075cc:	461a      	mov	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6013      	str	r3, [r2, #0]
 80075d2:	e08e      	b.n	80076f2 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80075d4:	78fa      	ldrb	r2, [r7, #3]
 80075d6:	6879      	ldr	r1, [r7, #4]
 80075d8:	4613      	mov	r3, r2
 80075da:	011b      	lsls	r3, r3, #4
 80075dc:	1a9b      	subs	r3, r3, r2
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	440b      	add	r3, r1
 80075e2:	334d      	adds	r3, #77	@ 0x4d
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	2b04      	cmp	r3, #4
 80075e8:	d143      	bne.n	8007672 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80075ea:	78fa      	ldrb	r2, [r7, #3]
 80075ec:	6879      	ldr	r1, [r7, #4]
 80075ee:	4613      	mov	r3, r2
 80075f0:	011b      	lsls	r3, r3, #4
 80075f2:	1a9b      	subs	r3, r3, r2
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	440b      	add	r3, r1
 80075f8:	334d      	adds	r3, #77	@ 0x4d
 80075fa:	2202      	movs	r2, #2
 80075fc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80075fe:	78fa      	ldrb	r2, [r7, #3]
 8007600:	6879      	ldr	r1, [r7, #4]
 8007602:	4613      	mov	r3, r2
 8007604:	011b      	lsls	r3, r3, #4
 8007606:	1a9b      	subs	r3, r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	440b      	add	r3, r1
 800760c:	334c      	adds	r3, #76	@ 0x4c
 800760e:	2202      	movs	r2, #2
 8007610:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007612:	78fa      	ldrb	r2, [r7, #3]
 8007614:	6879      	ldr	r1, [r7, #4]
 8007616:	4613      	mov	r3, r2
 8007618:	011b      	lsls	r3, r3, #4
 800761a:	1a9b      	subs	r3, r3, r2
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	440b      	add	r3, r1
 8007620:	3326      	adds	r3, #38	@ 0x26
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00a      	beq.n	800763e <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007628:	78fa      	ldrb	r2, [r7, #3]
 800762a:	6879      	ldr	r1, [r7, #4]
 800762c:	4613      	mov	r3, r2
 800762e:	011b      	lsls	r3, r3, #4
 8007630:	1a9b      	subs	r3, r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	440b      	add	r3, r1
 8007636:	3326      	adds	r3, #38	@ 0x26
 8007638:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800763a:	2b02      	cmp	r3, #2
 800763c:	d159      	bne.n	80076f2 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800763e:	78fb      	ldrb	r3, [r7, #3]
 8007640:	015a      	lsls	r2, r3, #5
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	4413      	add	r3, r2
 8007646:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007654:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800765c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800765e:	78fb      	ldrb	r3, [r7, #3]
 8007660:	015a      	lsls	r2, r3, #5
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	4413      	add	r3, r2
 8007666:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800766a:	461a      	mov	r2, r3
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6013      	str	r3, [r2, #0]
 8007670:	e03f      	b.n	80076f2 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8007672:	78fa      	ldrb	r2, [r7, #3]
 8007674:	6879      	ldr	r1, [r7, #4]
 8007676:	4613      	mov	r3, r2
 8007678:	011b      	lsls	r3, r3, #4
 800767a:	1a9b      	subs	r3, r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	440b      	add	r3, r1
 8007680:	334d      	adds	r3, #77	@ 0x4d
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	2b08      	cmp	r3, #8
 8007686:	d126      	bne.n	80076d6 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007688:	78fa      	ldrb	r2, [r7, #3]
 800768a:	6879      	ldr	r1, [r7, #4]
 800768c:	4613      	mov	r3, r2
 800768e:	011b      	lsls	r3, r3, #4
 8007690:	1a9b      	subs	r3, r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	440b      	add	r3, r1
 8007696:	334d      	adds	r3, #77	@ 0x4d
 8007698:	2202      	movs	r2, #2
 800769a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800769c:	78fa      	ldrb	r2, [r7, #3]
 800769e:	6879      	ldr	r1, [r7, #4]
 80076a0:	4613      	mov	r3, r2
 80076a2:	011b      	lsls	r3, r3, #4
 80076a4:	1a9b      	subs	r3, r3, r2
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	440b      	add	r3, r1
 80076aa:	3344      	adds	r3, #68	@ 0x44
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	1c59      	adds	r1, r3, #1
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	4613      	mov	r3, r2
 80076b4:	011b      	lsls	r3, r3, #4
 80076b6:	1a9b      	subs	r3, r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	4403      	add	r3, r0
 80076bc:	3344      	adds	r3, #68	@ 0x44
 80076be:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80076c0:	78fa      	ldrb	r2, [r7, #3]
 80076c2:	6879      	ldr	r1, [r7, #4]
 80076c4:	4613      	mov	r3, r2
 80076c6:	011b      	lsls	r3, r3, #4
 80076c8:	1a9b      	subs	r3, r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	440b      	add	r3, r1
 80076ce:	334c      	adds	r3, #76	@ 0x4c
 80076d0:	2204      	movs	r2, #4
 80076d2:	701a      	strb	r2, [r3, #0]
 80076d4:	e00d      	b.n	80076f2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80076d6:	78fa      	ldrb	r2, [r7, #3]
 80076d8:	6879      	ldr	r1, [r7, #4]
 80076da:	4613      	mov	r3, r2
 80076dc:	011b      	lsls	r3, r3, #4
 80076de:	1a9b      	subs	r3, r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	440b      	add	r3, r1
 80076e4:	334d      	adds	r3, #77	@ 0x4d
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	f000 8100 	beq.w	80078ee <HCD_HC_IN_IRQHandler+0xcca>
 80076ee:	e000      	b.n	80076f2 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80076f0:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80076f2:	78fa      	ldrb	r2, [r7, #3]
 80076f4:	6879      	ldr	r1, [r7, #4]
 80076f6:	4613      	mov	r3, r2
 80076f8:	011b      	lsls	r3, r3, #4
 80076fa:	1a9b      	subs	r3, r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	440b      	add	r3, r1
 8007700:	334c      	adds	r3, #76	@ 0x4c
 8007702:	781a      	ldrb	r2, [r3, #0]
 8007704:	78fb      	ldrb	r3, [r7, #3]
 8007706:	4619      	mov	r1, r3
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f005 fff3 	bl	800d6f4 <HAL_HCD_HC_NotifyURBChange_Callback>
 800770e:	e0ef      	b.n	80078f0 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	78fa      	ldrb	r2, [r7, #3]
 8007716:	4611      	mov	r1, r2
 8007718:	4618      	mov	r0, r3
 800771a:	f004 fc60 	bl	800bfde <USB_ReadChInterrupts>
 800771e:	4603      	mov	r3, r0
 8007720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007724:	2b40      	cmp	r3, #64	@ 0x40
 8007726:	d12f      	bne.n	8007788 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8007728:	78fb      	ldrb	r3, [r7, #3]
 800772a:	015a      	lsls	r2, r3, #5
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	4413      	add	r3, r2
 8007730:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007734:	461a      	mov	r2, r3
 8007736:	2340      	movs	r3, #64	@ 0x40
 8007738:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800773a:	78fa      	ldrb	r2, [r7, #3]
 800773c:	6879      	ldr	r1, [r7, #4]
 800773e:	4613      	mov	r3, r2
 8007740:	011b      	lsls	r3, r3, #4
 8007742:	1a9b      	subs	r3, r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	440b      	add	r3, r1
 8007748:	334d      	adds	r3, #77	@ 0x4d
 800774a:	2205      	movs	r2, #5
 800774c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800774e:	78fa      	ldrb	r2, [r7, #3]
 8007750:	6879      	ldr	r1, [r7, #4]
 8007752:	4613      	mov	r3, r2
 8007754:	011b      	lsls	r3, r3, #4
 8007756:	1a9b      	subs	r3, r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	440b      	add	r3, r1
 800775c:	331a      	adds	r3, #26
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d109      	bne.n	8007778 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8007764:	78fa      	ldrb	r2, [r7, #3]
 8007766:	6879      	ldr	r1, [r7, #4]
 8007768:	4613      	mov	r3, r2
 800776a:	011b      	lsls	r3, r3, #4
 800776c:	1a9b      	subs	r3, r3, r2
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	440b      	add	r3, r1
 8007772:	3344      	adds	r3, #68	@ 0x44
 8007774:	2200      	movs	r2, #0
 8007776:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	78fa      	ldrb	r2, [r7, #3]
 800777e:	4611      	mov	r1, r2
 8007780:	4618      	mov	r0, r3
 8007782:	f004 fca9 	bl	800c0d8 <USB_HC_Halt>
 8007786:	e0b3      	b.n	80078f0 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	78fa      	ldrb	r2, [r7, #3]
 800778e:	4611      	mov	r1, r2
 8007790:	4618      	mov	r0, r3
 8007792:	f004 fc24 	bl	800bfde <USB_ReadChInterrupts>
 8007796:	4603      	mov	r3, r0
 8007798:	f003 0310 	and.w	r3, r3, #16
 800779c:	2b10      	cmp	r3, #16
 800779e:	f040 80a7 	bne.w	80078f0 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80077a2:	78fa      	ldrb	r2, [r7, #3]
 80077a4:	6879      	ldr	r1, [r7, #4]
 80077a6:	4613      	mov	r3, r2
 80077a8:	011b      	lsls	r3, r3, #4
 80077aa:	1a9b      	subs	r3, r3, r2
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	440b      	add	r3, r1
 80077b0:	3326      	adds	r3, #38	@ 0x26
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	2b03      	cmp	r3, #3
 80077b6:	d11b      	bne.n	80077f0 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80077b8:	78fa      	ldrb	r2, [r7, #3]
 80077ba:	6879      	ldr	r1, [r7, #4]
 80077bc:	4613      	mov	r3, r2
 80077be:	011b      	lsls	r3, r3, #4
 80077c0:	1a9b      	subs	r3, r3, r2
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	440b      	add	r3, r1
 80077c6:	3344      	adds	r3, #68	@ 0x44
 80077c8:	2200      	movs	r2, #0
 80077ca:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80077cc:	78fa      	ldrb	r2, [r7, #3]
 80077ce:	6879      	ldr	r1, [r7, #4]
 80077d0:	4613      	mov	r3, r2
 80077d2:	011b      	lsls	r3, r3, #4
 80077d4:	1a9b      	subs	r3, r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	440b      	add	r3, r1
 80077da:	334d      	adds	r3, #77	@ 0x4d
 80077dc:	2204      	movs	r2, #4
 80077de:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	78fa      	ldrb	r2, [r7, #3]
 80077e6:	4611      	mov	r1, r2
 80077e8:	4618      	mov	r0, r3
 80077ea:	f004 fc75 	bl	800c0d8 <USB_HC_Halt>
 80077ee:	e03f      	b.n	8007870 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80077f0:	78fa      	ldrb	r2, [r7, #3]
 80077f2:	6879      	ldr	r1, [r7, #4]
 80077f4:	4613      	mov	r3, r2
 80077f6:	011b      	lsls	r3, r3, #4
 80077f8:	1a9b      	subs	r3, r3, r2
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	440b      	add	r3, r1
 80077fe:	3326      	adds	r3, #38	@ 0x26
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00a      	beq.n	800781c <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007806:	78fa      	ldrb	r2, [r7, #3]
 8007808:	6879      	ldr	r1, [r7, #4]
 800780a:	4613      	mov	r3, r2
 800780c:	011b      	lsls	r3, r3, #4
 800780e:	1a9b      	subs	r3, r3, r2
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	440b      	add	r3, r1
 8007814:	3326      	adds	r3, #38	@ 0x26
 8007816:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007818:	2b02      	cmp	r3, #2
 800781a:	d129      	bne.n	8007870 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800781c:	78fa      	ldrb	r2, [r7, #3]
 800781e:	6879      	ldr	r1, [r7, #4]
 8007820:	4613      	mov	r3, r2
 8007822:	011b      	lsls	r3, r3, #4
 8007824:	1a9b      	subs	r3, r3, r2
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	440b      	add	r3, r1
 800782a:	3344      	adds	r3, #68	@ 0x44
 800782c:	2200      	movs	r2, #0
 800782e:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	799b      	ldrb	r3, [r3, #6]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00a      	beq.n	800784e <HCD_HC_IN_IRQHandler+0xc2a>
 8007838:	78fa      	ldrb	r2, [r7, #3]
 800783a:	6879      	ldr	r1, [r7, #4]
 800783c:	4613      	mov	r3, r2
 800783e:	011b      	lsls	r3, r3, #4
 8007840:	1a9b      	subs	r3, r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	440b      	add	r3, r1
 8007846:	331b      	adds	r3, #27
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d110      	bne.n	8007870 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800784e:	78fa      	ldrb	r2, [r7, #3]
 8007850:	6879      	ldr	r1, [r7, #4]
 8007852:	4613      	mov	r3, r2
 8007854:	011b      	lsls	r3, r3, #4
 8007856:	1a9b      	subs	r3, r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	440b      	add	r3, r1
 800785c:	334d      	adds	r3, #77	@ 0x4d
 800785e:	2204      	movs	r2, #4
 8007860:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	78fa      	ldrb	r2, [r7, #3]
 8007868:	4611      	mov	r1, r2
 800786a:	4618      	mov	r0, r3
 800786c:	f004 fc34 	bl	800c0d8 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8007870:	78fa      	ldrb	r2, [r7, #3]
 8007872:	6879      	ldr	r1, [r7, #4]
 8007874:	4613      	mov	r3, r2
 8007876:	011b      	lsls	r3, r3, #4
 8007878:	1a9b      	subs	r3, r3, r2
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	440b      	add	r3, r1
 800787e:	331b      	adds	r3, #27
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	2b01      	cmp	r3, #1
 8007884:	d129      	bne.n	80078da <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8007886:	78fa      	ldrb	r2, [r7, #3]
 8007888:	6879      	ldr	r1, [r7, #4]
 800788a:	4613      	mov	r3, r2
 800788c:	011b      	lsls	r3, r3, #4
 800788e:	1a9b      	subs	r3, r3, r2
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	440b      	add	r3, r1
 8007894:	331b      	adds	r3, #27
 8007896:	2200      	movs	r2, #0
 8007898:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800789a:	78fb      	ldrb	r3, [r7, #3]
 800789c:	015a      	lsls	r2, r3, #5
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	4413      	add	r3, r2
 80078a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	78fa      	ldrb	r2, [r7, #3]
 80078aa:	0151      	lsls	r1, r2, #5
 80078ac:	693a      	ldr	r2, [r7, #16]
 80078ae:	440a      	add	r2, r1
 80078b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078b8:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80078ba:	78fb      	ldrb	r3, [r7, #3]
 80078bc:	015a      	lsls	r2, r3, #5
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	4413      	add	r3, r2
 80078c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	78fa      	ldrb	r2, [r7, #3]
 80078ca:	0151      	lsls	r1, r2, #5
 80078cc:	693a      	ldr	r2, [r7, #16]
 80078ce:	440a      	add	r2, r1
 80078d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078d4:	f043 0320 	orr.w	r3, r3, #32
 80078d8:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80078da:	78fb      	ldrb	r3, [r7, #3]
 80078dc:	015a      	lsls	r2, r3, #5
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	4413      	add	r3, r2
 80078e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078e6:	461a      	mov	r2, r3
 80078e8:	2310      	movs	r3, #16
 80078ea:	6093      	str	r3, [r2, #8]
 80078ec:	e000      	b.n	80078f0 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80078ee:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80078f0:	3718      	adds	r7, #24
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b086      	sub	sp, #24
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
 80078fe:	460b      	mov	r3, r1
 8007900:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	78fa      	ldrb	r2, [r7, #3]
 8007912:	4611      	mov	r1, r2
 8007914:	4618      	mov	r0, r3
 8007916:	f004 fb62 	bl	800bfde <USB_ReadChInterrupts>
 800791a:	4603      	mov	r3, r0
 800791c:	f003 0304 	and.w	r3, r3, #4
 8007920:	2b04      	cmp	r3, #4
 8007922:	d11b      	bne.n	800795c <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8007924:	78fb      	ldrb	r3, [r7, #3]
 8007926:	015a      	lsls	r2, r3, #5
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	4413      	add	r3, r2
 800792c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007930:	461a      	mov	r2, r3
 8007932:	2304      	movs	r3, #4
 8007934:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8007936:	78fa      	ldrb	r2, [r7, #3]
 8007938:	6879      	ldr	r1, [r7, #4]
 800793a:	4613      	mov	r3, r2
 800793c:	011b      	lsls	r3, r3, #4
 800793e:	1a9b      	subs	r3, r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	440b      	add	r3, r1
 8007944:	334d      	adds	r3, #77	@ 0x4d
 8007946:	2207      	movs	r2, #7
 8007948:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	78fa      	ldrb	r2, [r7, #3]
 8007950:	4611      	mov	r1, r2
 8007952:	4618      	mov	r0, r3
 8007954:	f004 fbc0 	bl	800c0d8 <USB_HC_Halt>
 8007958:	f000 bc89 	b.w	800826e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	78fa      	ldrb	r2, [r7, #3]
 8007962:	4611      	mov	r1, r2
 8007964:	4618      	mov	r0, r3
 8007966:	f004 fb3a 	bl	800bfde <USB_ReadChInterrupts>
 800796a:	4603      	mov	r3, r0
 800796c:	f003 0320 	and.w	r3, r3, #32
 8007970:	2b20      	cmp	r3, #32
 8007972:	f040 8082 	bne.w	8007a7a <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8007976:	78fb      	ldrb	r3, [r7, #3]
 8007978:	015a      	lsls	r2, r3, #5
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	4413      	add	r3, r2
 800797e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007982:	461a      	mov	r2, r3
 8007984:	2320      	movs	r3, #32
 8007986:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8007988:	78fa      	ldrb	r2, [r7, #3]
 800798a:	6879      	ldr	r1, [r7, #4]
 800798c:	4613      	mov	r3, r2
 800798e:	011b      	lsls	r3, r3, #4
 8007990:	1a9b      	subs	r3, r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	440b      	add	r3, r1
 8007996:	3319      	adds	r3, #25
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	2b01      	cmp	r3, #1
 800799c:	d124      	bne.n	80079e8 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800799e:	78fa      	ldrb	r2, [r7, #3]
 80079a0:	6879      	ldr	r1, [r7, #4]
 80079a2:	4613      	mov	r3, r2
 80079a4:	011b      	lsls	r3, r3, #4
 80079a6:	1a9b      	subs	r3, r3, r2
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	440b      	add	r3, r1
 80079ac:	3319      	adds	r3, #25
 80079ae:	2200      	movs	r2, #0
 80079b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80079b2:	78fa      	ldrb	r2, [r7, #3]
 80079b4:	6879      	ldr	r1, [r7, #4]
 80079b6:	4613      	mov	r3, r2
 80079b8:	011b      	lsls	r3, r3, #4
 80079ba:	1a9b      	subs	r3, r3, r2
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	440b      	add	r3, r1
 80079c0:	334c      	adds	r3, #76	@ 0x4c
 80079c2:	2202      	movs	r2, #2
 80079c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80079c6:	78fa      	ldrb	r2, [r7, #3]
 80079c8:	6879      	ldr	r1, [r7, #4]
 80079ca:	4613      	mov	r3, r2
 80079cc:	011b      	lsls	r3, r3, #4
 80079ce:	1a9b      	subs	r3, r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	440b      	add	r3, r1
 80079d4:	334d      	adds	r3, #77	@ 0x4d
 80079d6:	2203      	movs	r2, #3
 80079d8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	78fa      	ldrb	r2, [r7, #3]
 80079e0:	4611      	mov	r1, r2
 80079e2:	4618      	mov	r0, r3
 80079e4:	f004 fb78 	bl	800c0d8 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80079e8:	78fa      	ldrb	r2, [r7, #3]
 80079ea:	6879      	ldr	r1, [r7, #4]
 80079ec:	4613      	mov	r3, r2
 80079ee:	011b      	lsls	r3, r3, #4
 80079f0:	1a9b      	subs	r3, r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	440b      	add	r3, r1
 80079f6:	331a      	adds	r3, #26
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	f040 8437 	bne.w	800826e <HCD_HC_OUT_IRQHandler+0x978>
 8007a00:	78fa      	ldrb	r2, [r7, #3]
 8007a02:	6879      	ldr	r1, [r7, #4]
 8007a04:	4613      	mov	r3, r2
 8007a06:	011b      	lsls	r3, r3, #4
 8007a08:	1a9b      	subs	r3, r3, r2
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	440b      	add	r3, r1
 8007a0e:	331b      	adds	r3, #27
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	f040 842b 	bne.w	800826e <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8007a18:	78fa      	ldrb	r2, [r7, #3]
 8007a1a:	6879      	ldr	r1, [r7, #4]
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	011b      	lsls	r3, r3, #4
 8007a20:	1a9b      	subs	r3, r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	440b      	add	r3, r1
 8007a26:	3326      	adds	r3, #38	@ 0x26
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d009      	beq.n	8007a42 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8007a2e:	78fa      	ldrb	r2, [r7, #3]
 8007a30:	6879      	ldr	r1, [r7, #4]
 8007a32:	4613      	mov	r3, r2
 8007a34:	011b      	lsls	r3, r3, #4
 8007a36:	1a9b      	subs	r3, r3, r2
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	440b      	add	r3, r1
 8007a3c:	331b      	adds	r3, #27
 8007a3e:	2201      	movs	r2, #1
 8007a40:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8007a42:	78fa      	ldrb	r2, [r7, #3]
 8007a44:	6879      	ldr	r1, [r7, #4]
 8007a46:	4613      	mov	r3, r2
 8007a48:	011b      	lsls	r3, r3, #4
 8007a4a:	1a9b      	subs	r3, r3, r2
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	440b      	add	r3, r1
 8007a50:	334d      	adds	r3, #77	@ 0x4d
 8007a52:	2203      	movs	r2, #3
 8007a54:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	78fa      	ldrb	r2, [r7, #3]
 8007a5c:	4611      	mov	r1, r2
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f004 fb3a 	bl	800c0d8 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8007a64:	78fa      	ldrb	r2, [r7, #3]
 8007a66:	6879      	ldr	r1, [r7, #4]
 8007a68:	4613      	mov	r3, r2
 8007a6a:	011b      	lsls	r3, r3, #4
 8007a6c:	1a9b      	subs	r3, r3, r2
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	440b      	add	r3, r1
 8007a72:	3344      	adds	r3, #68	@ 0x44
 8007a74:	2200      	movs	r2, #0
 8007a76:	601a      	str	r2, [r3, #0]
 8007a78:	e3f9      	b.n	800826e <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	78fa      	ldrb	r2, [r7, #3]
 8007a80:	4611      	mov	r1, r2
 8007a82:	4618      	mov	r0, r3
 8007a84:	f004 faab 	bl	800bfde <USB_ReadChInterrupts>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a92:	d111      	bne.n	8007ab8 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8007a94:	78fb      	ldrb	r3, [r7, #3]
 8007a96:	015a      	lsls	r2, r3, #5
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007aa6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	78fa      	ldrb	r2, [r7, #3]
 8007aae:	4611      	mov	r1, r2
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f004 fb11 	bl	800c0d8 <USB_HC_Halt>
 8007ab6:	e3da      	b.n	800826e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	78fa      	ldrb	r2, [r7, #3]
 8007abe:	4611      	mov	r1, r2
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f004 fa8c 	bl	800bfde <USB_ReadChInterrupts>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	f003 0301 	and.w	r3, r3, #1
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d168      	bne.n	8007ba2 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8007ad0:	78fa      	ldrb	r2, [r7, #3]
 8007ad2:	6879      	ldr	r1, [r7, #4]
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	011b      	lsls	r3, r3, #4
 8007ad8:	1a9b      	subs	r3, r3, r2
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	440b      	add	r3, r1
 8007ade:	3344      	adds	r3, #68	@ 0x44
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	78fa      	ldrb	r2, [r7, #3]
 8007aea:	4611      	mov	r1, r2
 8007aec:	4618      	mov	r0, r3
 8007aee:	f004 fa76 	bl	800bfde <USB_ReadChInterrupts>
 8007af2:	4603      	mov	r3, r0
 8007af4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007af8:	2b40      	cmp	r3, #64	@ 0x40
 8007afa:	d112      	bne.n	8007b22 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8007afc:	78fa      	ldrb	r2, [r7, #3]
 8007afe:	6879      	ldr	r1, [r7, #4]
 8007b00:	4613      	mov	r3, r2
 8007b02:	011b      	lsls	r3, r3, #4
 8007b04:	1a9b      	subs	r3, r3, r2
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	440b      	add	r3, r1
 8007b0a:	3319      	adds	r3, #25
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8007b10:	78fb      	ldrb	r3, [r7, #3]
 8007b12:	015a      	lsls	r2, r3, #5
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	4413      	add	r3, r2
 8007b18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	2340      	movs	r3, #64	@ 0x40
 8007b20:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8007b22:	78fa      	ldrb	r2, [r7, #3]
 8007b24:	6879      	ldr	r1, [r7, #4]
 8007b26:	4613      	mov	r3, r2
 8007b28:	011b      	lsls	r3, r3, #4
 8007b2a:	1a9b      	subs	r3, r3, r2
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	440b      	add	r3, r1
 8007b30:	331b      	adds	r3, #27
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d019      	beq.n	8007b6c <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8007b38:	78fa      	ldrb	r2, [r7, #3]
 8007b3a:	6879      	ldr	r1, [r7, #4]
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	011b      	lsls	r3, r3, #4
 8007b40:	1a9b      	subs	r3, r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	440b      	add	r3, r1
 8007b46:	331b      	adds	r3, #27
 8007b48:	2200      	movs	r2, #0
 8007b4a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007b4c:	78fb      	ldrb	r3, [r7, #3]
 8007b4e:	015a      	lsls	r2, r3, #5
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	4413      	add	r3, r2
 8007b54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	78fa      	ldrb	r2, [r7, #3]
 8007b5c:	0151      	lsls	r1, r2, #5
 8007b5e:	693a      	ldr	r2, [r7, #16]
 8007b60:	440a      	add	r2, r1
 8007b62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b6a:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8007b6c:	78fb      	ldrb	r3, [r7, #3]
 8007b6e:	015a      	lsls	r2, r3, #5
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	4413      	add	r3, r2
 8007b74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b78:	461a      	mov	r2, r3
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8007b7e:	78fa      	ldrb	r2, [r7, #3]
 8007b80:	6879      	ldr	r1, [r7, #4]
 8007b82:	4613      	mov	r3, r2
 8007b84:	011b      	lsls	r3, r3, #4
 8007b86:	1a9b      	subs	r3, r3, r2
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	440b      	add	r3, r1
 8007b8c:	334d      	adds	r3, #77	@ 0x4d
 8007b8e:	2201      	movs	r2, #1
 8007b90:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	78fa      	ldrb	r2, [r7, #3]
 8007b98:	4611      	mov	r1, r2
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f004 fa9c 	bl	800c0d8 <USB_HC_Halt>
 8007ba0:	e365      	b.n	800826e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	78fa      	ldrb	r2, [r7, #3]
 8007ba8:	4611      	mov	r1, r2
 8007baa:	4618      	mov	r0, r3
 8007bac:	f004 fa17 	bl	800bfde <USB_ReadChInterrupts>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bb6:	2b40      	cmp	r3, #64	@ 0x40
 8007bb8:	d139      	bne.n	8007c2e <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8007bba:	78fa      	ldrb	r2, [r7, #3]
 8007bbc:	6879      	ldr	r1, [r7, #4]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	011b      	lsls	r3, r3, #4
 8007bc2:	1a9b      	subs	r3, r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	440b      	add	r3, r1
 8007bc8:	334d      	adds	r3, #77	@ 0x4d
 8007bca:	2205      	movs	r2, #5
 8007bcc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8007bce:	78fa      	ldrb	r2, [r7, #3]
 8007bd0:	6879      	ldr	r1, [r7, #4]
 8007bd2:	4613      	mov	r3, r2
 8007bd4:	011b      	lsls	r3, r3, #4
 8007bd6:	1a9b      	subs	r3, r3, r2
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	440b      	add	r3, r1
 8007bdc:	331a      	adds	r3, #26
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d109      	bne.n	8007bf8 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8007be4:	78fa      	ldrb	r2, [r7, #3]
 8007be6:	6879      	ldr	r1, [r7, #4]
 8007be8:	4613      	mov	r3, r2
 8007bea:	011b      	lsls	r3, r3, #4
 8007bec:	1a9b      	subs	r3, r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	440b      	add	r3, r1
 8007bf2:	3319      	adds	r3, #25
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8007bf8:	78fa      	ldrb	r2, [r7, #3]
 8007bfa:	6879      	ldr	r1, [r7, #4]
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	011b      	lsls	r3, r3, #4
 8007c00:	1a9b      	subs	r3, r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	440b      	add	r3, r1
 8007c06:	3344      	adds	r3, #68	@ 0x44
 8007c08:	2200      	movs	r2, #0
 8007c0a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	78fa      	ldrb	r2, [r7, #3]
 8007c12:	4611      	mov	r1, r2
 8007c14:	4618      	mov	r0, r3
 8007c16:	f004 fa5f 	bl	800c0d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8007c1a:	78fb      	ldrb	r3, [r7, #3]
 8007c1c:	015a      	lsls	r2, r3, #5
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	4413      	add	r3, r2
 8007c22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c26:	461a      	mov	r2, r3
 8007c28:	2340      	movs	r3, #64	@ 0x40
 8007c2a:	6093      	str	r3, [r2, #8]
 8007c2c:	e31f      	b.n	800826e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	78fa      	ldrb	r2, [r7, #3]
 8007c34:	4611      	mov	r1, r2
 8007c36:	4618      	mov	r0, r3
 8007c38:	f004 f9d1 	bl	800bfde <USB_ReadChInterrupts>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	f003 0308 	and.w	r3, r3, #8
 8007c42:	2b08      	cmp	r3, #8
 8007c44:	d11a      	bne.n	8007c7c <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8007c46:	78fb      	ldrb	r3, [r7, #3]
 8007c48:	015a      	lsls	r2, r3, #5
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c52:	461a      	mov	r2, r3
 8007c54:	2308      	movs	r3, #8
 8007c56:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8007c58:	78fa      	ldrb	r2, [r7, #3]
 8007c5a:	6879      	ldr	r1, [r7, #4]
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	011b      	lsls	r3, r3, #4
 8007c60:	1a9b      	subs	r3, r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	440b      	add	r3, r1
 8007c66:	334d      	adds	r3, #77	@ 0x4d
 8007c68:	2206      	movs	r2, #6
 8007c6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	78fa      	ldrb	r2, [r7, #3]
 8007c72:	4611      	mov	r1, r2
 8007c74:	4618      	mov	r0, r3
 8007c76:	f004 fa2f 	bl	800c0d8 <USB_HC_Halt>
 8007c7a:	e2f8      	b.n	800826e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	78fa      	ldrb	r2, [r7, #3]
 8007c82:	4611      	mov	r1, r2
 8007c84:	4618      	mov	r0, r3
 8007c86:	f004 f9aa 	bl	800bfde <USB_ReadChInterrupts>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	f003 0310 	and.w	r3, r3, #16
 8007c90:	2b10      	cmp	r3, #16
 8007c92:	d144      	bne.n	8007d1e <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8007c94:	78fa      	ldrb	r2, [r7, #3]
 8007c96:	6879      	ldr	r1, [r7, #4]
 8007c98:	4613      	mov	r3, r2
 8007c9a:	011b      	lsls	r3, r3, #4
 8007c9c:	1a9b      	subs	r3, r3, r2
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	440b      	add	r3, r1
 8007ca2:	3344      	adds	r3, #68	@ 0x44
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8007ca8:	78fa      	ldrb	r2, [r7, #3]
 8007caa:	6879      	ldr	r1, [r7, #4]
 8007cac:	4613      	mov	r3, r2
 8007cae:	011b      	lsls	r3, r3, #4
 8007cb0:	1a9b      	subs	r3, r3, r2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	440b      	add	r3, r1
 8007cb6:	334d      	adds	r3, #77	@ 0x4d
 8007cb8:	2204      	movs	r2, #4
 8007cba:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8007cbc:	78fa      	ldrb	r2, [r7, #3]
 8007cbe:	6879      	ldr	r1, [r7, #4]
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	011b      	lsls	r3, r3, #4
 8007cc4:	1a9b      	subs	r3, r3, r2
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	440b      	add	r3, r1
 8007cca:	3319      	adds	r3, #25
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d114      	bne.n	8007cfc <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8007cd2:	78fa      	ldrb	r2, [r7, #3]
 8007cd4:	6879      	ldr	r1, [r7, #4]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	011b      	lsls	r3, r3, #4
 8007cda:	1a9b      	subs	r3, r3, r2
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	440b      	add	r3, r1
 8007ce0:	3318      	adds	r3, #24
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d109      	bne.n	8007cfc <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8007ce8:	78fa      	ldrb	r2, [r7, #3]
 8007cea:	6879      	ldr	r1, [r7, #4]
 8007cec:	4613      	mov	r3, r2
 8007cee:	011b      	lsls	r3, r3, #4
 8007cf0:	1a9b      	subs	r3, r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	440b      	add	r3, r1
 8007cf6:	3319      	adds	r3, #25
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	78fa      	ldrb	r2, [r7, #3]
 8007d02:	4611      	mov	r1, r2
 8007d04:	4618      	mov	r0, r3
 8007d06:	f004 f9e7 	bl	800c0d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8007d0a:	78fb      	ldrb	r3, [r7, #3]
 8007d0c:	015a      	lsls	r2, r3, #5
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	4413      	add	r3, r2
 8007d12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d16:	461a      	mov	r2, r3
 8007d18:	2310      	movs	r3, #16
 8007d1a:	6093      	str	r3, [r2, #8]
 8007d1c:	e2a7      	b.n	800826e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	78fa      	ldrb	r2, [r7, #3]
 8007d24:	4611      	mov	r1, r2
 8007d26:	4618      	mov	r0, r3
 8007d28:	f004 f959 	bl	800bfde <USB_ReadChInterrupts>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d32:	2b80      	cmp	r3, #128	@ 0x80
 8007d34:	f040 8083 	bne.w	8007e3e <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	799b      	ldrb	r3, [r3, #6]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d111      	bne.n	8007d64 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8007d40:	78fa      	ldrb	r2, [r7, #3]
 8007d42:	6879      	ldr	r1, [r7, #4]
 8007d44:	4613      	mov	r3, r2
 8007d46:	011b      	lsls	r3, r3, #4
 8007d48:	1a9b      	subs	r3, r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	440b      	add	r3, r1
 8007d4e:	334d      	adds	r3, #77	@ 0x4d
 8007d50:	2207      	movs	r2, #7
 8007d52:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	78fa      	ldrb	r2, [r7, #3]
 8007d5a:	4611      	mov	r1, r2
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f004 f9bb 	bl	800c0d8 <USB_HC_Halt>
 8007d62:	e062      	b.n	8007e2a <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8007d64:	78fa      	ldrb	r2, [r7, #3]
 8007d66:	6879      	ldr	r1, [r7, #4]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	011b      	lsls	r3, r3, #4
 8007d6c:	1a9b      	subs	r3, r3, r2
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	440b      	add	r3, r1
 8007d72:	3344      	adds	r3, #68	@ 0x44
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	1c59      	adds	r1, r3, #1
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	011b      	lsls	r3, r3, #4
 8007d7e:	1a9b      	subs	r3, r3, r2
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4403      	add	r3, r0
 8007d84:	3344      	adds	r3, #68	@ 0x44
 8007d86:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007d88:	78fa      	ldrb	r2, [r7, #3]
 8007d8a:	6879      	ldr	r1, [r7, #4]
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	011b      	lsls	r3, r3, #4
 8007d90:	1a9b      	subs	r3, r3, r2
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	440b      	add	r3, r1
 8007d96:	3344      	adds	r3, #68	@ 0x44
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	d922      	bls.n	8007de4 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8007d9e:	78fa      	ldrb	r2, [r7, #3]
 8007da0:	6879      	ldr	r1, [r7, #4]
 8007da2:	4613      	mov	r3, r2
 8007da4:	011b      	lsls	r3, r3, #4
 8007da6:	1a9b      	subs	r3, r3, r2
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	440b      	add	r3, r1
 8007dac:	3344      	adds	r3, #68	@ 0x44
 8007dae:	2200      	movs	r2, #0
 8007db0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8007db2:	78fa      	ldrb	r2, [r7, #3]
 8007db4:	6879      	ldr	r1, [r7, #4]
 8007db6:	4613      	mov	r3, r2
 8007db8:	011b      	lsls	r3, r3, #4
 8007dba:	1a9b      	subs	r3, r3, r2
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	440b      	add	r3, r1
 8007dc0:	334c      	adds	r3, #76	@ 0x4c
 8007dc2:	2204      	movs	r2, #4
 8007dc4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007dc6:	78fa      	ldrb	r2, [r7, #3]
 8007dc8:	6879      	ldr	r1, [r7, #4]
 8007dca:	4613      	mov	r3, r2
 8007dcc:	011b      	lsls	r3, r3, #4
 8007dce:	1a9b      	subs	r3, r3, r2
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	440b      	add	r3, r1
 8007dd4:	334c      	adds	r3, #76	@ 0x4c
 8007dd6:	781a      	ldrb	r2, [r3, #0]
 8007dd8:	78fb      	ldrb	r3, [r7, #3]
 8007dda:	4619      	mov	r1, r3
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f005 fc89 	bl	800d6f4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007de2:	e022      	b.n	8007e2a <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007de4:	78fa      	ldrb	r2, [r7, #3]
 8007de6:	6879      	ldr	r1, [r7, #4]
 8007de8:	4613      	mov	r3, r2
 8007dea:	011b      	lsls	r3, r3, #4
 8007dec:	1a9b      	subs	r3, r3, r2
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	440b      	add	r3, r1
 8007df2:	334c      	adds	r3, #76	@ 0x4c
 8007df4:	2202      	movs	r2, #2
 8007df6:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8007df8:	78fb      	ldrb	r3, [r7, #3]
 8007dfa:	015a      	lsls	r2, r3, #5
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	4413      	add	r3, r2
 8007e00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007e0e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007e16:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8007e18:	78fb      	ldrb	r3, [r7, #3]
 8007e1a:	015a      	lsls	r2, r3, #5
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	4413      	add	r3, r2
 8007e20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e24:	461a      	mov	r2, r3
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8007e2a:	78fb      	ldrb	r3, [r7, #3]
 8007e2c:	015a      	lsls	r2, r3, #5
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	4413      	add	r3, r2
 8007e32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e36:	461a      	mov	r2, r3
 8007e38:	2380      	movs	r3, #128	@ 0x80
 8007e3a:	6093      	str	r3, [r2, #8]
 8007e3c:	e217      	b.n	800826e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	78fa      	ldrb	r2, [r7, #3]
 8007e44:	4611      	mov	r1, r2
 8007e46:	4618      	mov	r0, r3
 8007e48:	f004 f8c9 	bl	800bfde <USB_ReadChInterrupts>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e56:	d11b      	bne.n	8007e90 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8007e58:	78fa      	ldrb	r2, [r7, #3]
 8007e5a:	6879      	ldr	r1, [r7, #4]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	011b      	lsls	r3, r3, #4
 8007e60:	1a9b      	subs	r3, r3, r2
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	440b      	add	r3, r1
 8007e66:	334d      	adds	r3, #77	@ 0x4d
 8007e68:	2209      	movs	r2, #9
 8007e6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	78fa      	ldrb	r2, [r7, #3]
 8007e72:	4611      	mov	r1, r2
 8007e74:	4618      	mov	r0, r3
 8007e76:	f004 f92f 	bl	800c0d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8007e7a:	78fb      	ldrb	r3, [r7, #3]
 8007e7c:	015a      	lsls	r2, r3, #5
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	4413      	add	r3, r2
 8007e82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e86:	461a      	mov	r2, r3
 8007e88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e8c:	6093      	str	r3, [r2, #8]
 8007e8e:	e1ee      	b.n	800826e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	78fa      	ldrb	r2, [r7, #3]
 8007e96:	4611      	mov	r1, r2
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f004 f8a0 	bl	800bfde <USB_ReadChInterrupts>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	f003 0302 	and.w	r3, r3, #2
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	f040 81df 	bne.w	8008268 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8007eaa:	78fb      	ldrb	r3, [r7, #3]
 8007eac:	015a      	lsls	r2, r3, #5
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	2302      	movs	r3, #2
 8007eba:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8007ebc:	78fa      	ldrb	r2, [r7, #3]
 8007ebe:	6879      	ldr	r1, [r7, #4]
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	011b      	lsls	r3, r3, #4
 8007ec4:	1a9b      	subs	r3, r3, r2
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	440b      	add	r3, r1
 8007eca:	334d      	adds	r3, #77	@ 0x4d
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	f040 8093 	bne.w	8007ffa <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007ed4:	78fa      	ldrb	r2, [r7, #3]
 8007ed6:	6879      	ldr	r1, [r7, #4]
 8007ed8:	4613      	mov	r3, r2
 8007eda:	011b      	lsls	r3, r3, #4
 8007edc:	1a9b      	subs	r3, r3, r2
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	440b      	add	r3, r1
 8007ee2:	334d      	adds	r3, #77	@ 0x4d
 8007ee4:	2202      	movs	r2, #2
 8007ee6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8007ee8:	78fa      	ldrb	r2, [r7, #3]
 8007eea:	6879      	ldr	r1, [r7, #4]
 8007eec:	4613      	mov	r3, r2
 8007eee:	011b      	lsls	r3, r3, #4
 8007ef0:	1a9b      	subs	r3, r3, r2
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	440b      	add	r3, r1
 8007ef6:	334c      	adds	r3, #76	@ 0x4c
 8007ef8:	2201      	movs	r2, #1
 8007efa:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8007efc:	78fa      	ldrb	r2, [r7, #3]
 8007efe:	6879      	ldr	r1, [r7, #4]
 8007f00:	4613      	mov	r3, r2
 8007f02:	011b      	lsls	r3, r3, #4
 8007f04:	1a9b      	subs	r3, r3, r2
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	440b      	add	r3, r1
 8007f0a:	3326      	adds	r3, #38	@ 0x26
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d00b      	beq.n	8007f2a <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8007f12:	78fa      	ldrb	r2, [r7, #3]
 8007f14:	6879      	ldr	r1, [r7, #4]
 8007f16:	4613      	mov	r3, r2
 8007f18:	011b      	lsls	r3, r3, #4
 8007f1a:	1a9b      	subs	r3, r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	440b      	add	r3, r1
 8007f20:	3326      	adds	r3, #38	@ 0x26
 8007f22:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8007f24:	2b03      	cmp	r3, #3
 8007f26:	f040 8190 	bne.w	800824a <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	799b      	ldrb	r3, [r3, #6]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d115      	bne.n	8007f5e <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8007f32:	78fa      	ldrb	r2, [r7, #3]
 8007f34:	6879      	ldr	r1, [r7, #4]
 8007f36:	4613      	mov	r3, r2
 8007f38:	011b      	lsls	r3, r3, #4
 8007f3a:	1a9b      	subs	r3, r3, r2
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	440b      	add	r3, r1
 8007f40:	333d      	adds	r3, #61	@ 0x3d
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	78fa      	ldrb	r2, [r7, #3]
 8007f46:	f083 0301 	eor.w	r3, r3, #1
 8007f4a:	b2d8      	uxtb	r0, r3
 8007f4c:	6879      	ldr	r1, [r7, #4]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	011b      	lsls	r3, r3, #4
 8007f52:	1a9b      	subs	r3, r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	440b      	add	r3, r1
 8007f58:	333d      	adds	r3, #61	@ 0x3d
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	799b      	ldrb	r3, [r3, #6]
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	f040 8171 	bne.w	800824a <HCD_HC_OUT_IRQHandler+0x954>
 8007f68:	78fa      	ldrb	r2, [r7, #3]
 8007f6a:	6879      	ldr	r1, [r7, #4]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	011b      	lsls	r3, r3, #4
 8007f70:	1a9b      	subs	r3, r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	440b      	add	r3, r1
 8007f76:	3334      	adds	r3, #52	@ 0x34
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f000 8165 	beq.w	800824a <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8007f80:	78fa      	ldrb	r2, [r7, #3]
 8007f82:	6879      	ldr	r1, [r7, #4]
 8007f84:	4613      	mov	r3, r2
 8007f86:	011b      	lsls	r3, r3, #4
 8007f88:	1a9b      	subs	r3, r3, r2
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	440b      	add	r3, r1
 8007f8e:	3334      	adds	r3, #52	@ 0x34
 8007f90:	6819      	ldr	r1, [r3, #0]
 8007f92:	78fa      	ldrb	r2, [r7, #3]
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	4613      	mov	r3, r2
 8007f98:	011b      	lsls	r3, r3, #4
 8007f9a:	1a9b      	subs	r3, r3, r2
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	4403      	add	r3, r0
 8007fa0:	3328      	adds	r3, #40	@ 0x28
 8007fa2:	881b      	ldrh	r3, [r3, #0]
 8007fa4:	440b      	add	r3, r1
 8007fa6:	1e59      	subs	r1, r3, #1
 8007fa8:	78fa      	ldrb	r2, [r7, #3]
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	4613      	mov	r3, r2
 8007fae:	011b      	lsls	r3, r3, #4
 8007fb0:	1a9b      	subs	r3, r3, r2
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	4403      	add	r3, r0
 8007fb6:	3328      	adds	r3, #40	@ 0x28
 8007fb8:	881b      	ldrh	r3, [r3, #0]
 8007fba:	fbb1 f3f3 	udiv	r3, r1, r3
 8007fbe:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	f003 0301 	and.w	r3, r3, #1
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f000 813f 	beq.w	800824a <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8007fcc:	78fa      	ldrb	r2, [r7, #3]
 8007fce:	6879      	ldr	r1, [r7, #4]
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	011b      	lsls	r3, r3, #4
 8007fd4:	1a9b      	subs	r3, r3, r2
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	440b      	add	r3, r1
 8007fda:	333d      	adds	r3, #61	@ 0x3d
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	78fa      	ldrb	r2, [r7, #3]
 8007fe0:	f083 0301 	eor.w	r3, r3, #1
 8007fe4:	b2d8      	uxtb	r0, r3
 8007fe6:	6879      	ldr	r1, [r7, #4]
 8007fe8:	4613      	mov	r3, r2
 8007fea:	011b      	lsls	r3, r3, #4
 8007fec:	1a9b      	subs	r3, r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	440b      	add	r3, r1
 8007ff2:	333d      	adds	r3, #61	@ 0x3d
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	701a      	strb	r2, [r3, #0]
 8007ff8:	e127      	b.n	800824a <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8007ffa:	78fa      	ldrb	r2, [r7, #3]
 8007ffc:	6879      	ldr	r1, [r7, #4]
 8007ffe:	4613      	mov	r3, r2
 8008000:	011b      	lsls	r3, r3, #4
 8008002:	1a9b      	subs	r3, r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	440b      	add	r3, r1
 8008008:	334d      	adds	r3, #77	@ 0x4d
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	2b03      	cmp	r3, #3
 800800e:	d120      	bne.n	8008052 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008010:	78fa      	ldrb	r2, [r7, #3]
 8008012:	6879      	ldr	r1, [r7, #4]
 8008014:	4613      	mov	r3, r2
 8008016:	011b      	lsls	r3, r3, #4
 8008018:	1a9b      	subs	r3, r3, r2
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	440b      	add	r3, r1
 800801e:	334d      	adds	r3, #77	@ 0x4d
 8008020:	2202      	movs	r2, #2
 8008022:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008024:	78fa      	ldrb	r2, [r7, #3]
 8008026:	6879      	ldr	r1, [r7, #4]
 8008028:	4613      	mov	r3, r2
 800802a:	011b      	lsls	r3, r3, #4
 800802c:	1a9b      	subs	r3, r3, r2
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	440b      	add	r3, r1
 8008032:	331b      	adds	r3, #27
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	2b01      	cmp	r3, #1
 8008038:	f040 8107 	bne.w	800824a <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800803c:	78fa      	ldrb	r2, [r7, #3]
 800803e:	6879      	ldr	r1, [r7, #4]
 8008040:	4613      	mov	r3, r2
 8008042:	011b      	lsls	r3, r3, #4
 8008044:	1a9b      	subs	r3, r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	440b      	add	r3, r1
 800804a:	334c      	adds	r3, #76	@ 0x4c
 800804c:	2202      	movs	r2, #2
 800804e:	701a      	strb	r2, [r3, #0]
 8008050:	e0fb      	b.n	800824a <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8008052:	78fa      	ldrb	r2, [r7, #3]
 8008054:	6879      	ldr	r1, [r7, #4]
 8008056:	4613      	mov	r3, r2
 8008058:	011b      	lsls	r3, r3, #4
 800805a:	1a9b      	subs	r3, r3, r2
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	440b      	add	r3, r1
 8008060:	334d      	adds	r3, #77	@ 0x4d
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	2b04      	cmp	r3, #4
 8008066:	d13a      	bne.n	80080de <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008068:	78fa      	ldrb	r2, [r7, #3]
 800806a:	6879      	ldr	r1, [r7, #4]
 800806c:	4613      	mov	r3, r2
 800806e:	011b      	lsls	r3, r3, #4
 8008070:	1a9b      	subs	r3, r3, r2
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	440b      	add	r3, r1
 8008076:	334d      	adds	r3, #77	@ 0x4d
 8008078:	2202      	movs	r2, #2
 800807a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800807c:	78fa      	ldrb	r2, [r7, #3]
 800807e:	6879      	ldr	r1, [r7, #4]
 8008080:	4613      	mov	r3, r2
 8008082:	011b      	lsls	r3, r3, #4
 8008084:	1a9b      	subs	r3, r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	440b      	add	r3, r1
 800808a:	334c      	adds	r3, #76	@ 0x4c
 800808c:	2202      	movs	r2, #2
 800808e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008090:	78fa      	ldrb	r2, [r7, #3]
 8008092:	6879      	ldr	r1, [r7, #4]
 8008094:	4613      	mov	r3, r2
 8008096:	011b      	lsls	r3, r3, #4
 8008098:	1a9b      	subs	r3, r3, r2
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	440b      	add	r3, r1
 800809e:	331b      	adds	r3, #27
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	f040 80d1 	bne.w	800824a <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80080a8:	78fa      	ldrb	r2, [r7, #3]
 80080aa:	6879      	ldr	r1, [r7, #4]
 80080ac:	4613      	mov	r3, r2
 80080ae:	011b      	lsls	r3, r3, #4
 80080b0:	1a9b      	subs	r3, r3, r2
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	440b      	add	r3, r1
 80080b6:	331b      	adds	r3, #27
 80080b8:	2200      	movs	r2, #0
 80080ba:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80080bc:	78fb      	ldrb	r3, [r7, #3]
 80080be:	015a      	lsls	r2, r3, #5
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	4413      	add	r3, r2
 80080c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	78fa      	ldrb	r2, [r7, #3]
 80080cc:	0151      	lsls	r1, r2, #5
 80080ce:	693a      	ldr	r2, [r7, #16]
 80080d0:	440a      	add	r2, r1
 80080d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080da:	6053      	str	r3, [r2, #4]
 80080dc:	e0b5      	b.n	800824a <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80080de:	78fa      	ldrb	r2, [r7, #3]
 80080e0:	6879      	ldr	r1, [r7, #4]
 80080e2:	4613      	mov	r3, r2
 80080e4:	011b      	lsls	r3, r3, #4
 80080e6:	1a9b      	subs	r3, r3, r2
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	440b      	add	r3, r1
 80080ec:	334d      	adds	r3, #77	@ 0x4d
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	2b05      	cmp	r3, #5
 80080f2:	d114      	bne.n	800811e <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80080f4:	78fa      	ldrb	r2, [r7, #3]
 80080f6:	6879      	ldr	r1, [r7, #4]
 80080f8:	4613      	mov	r3, r2
 80080fa:	011b      	lsls	r3, r3, #4
 80080fc:	1a9b      	subs	r3, r3, r2
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	440b      	add	r3, r1
 8008102:	334d      	adds	r3, #77	@ 0x4d
 8008104:	2202      	movs	r2, #2
 8008106:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8008108:	78fa      	ldrb	r2, [r7, #3]
 800810a:	6879      	ldr	r1, [r7, #4]
 800810c:	4613      	mov	r3, r2
 800810e:	011b      	lsls	r3, r3, #4
 8008110:	1a9b      	subs	r3, r3, r2
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	440b      	add	r3, r1
 8008116:	334c      	adds	r3, #76	@ 0x4c
 8008118:	2202      	movs	r2, #2
 800811a:	701a      	strb	r2, [r3, #0]
 800811c:	e095      	b.n	800824a <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800811e:	78fa      	ldrb	r2, [r7, #3]
 8008120:	6879      	ldr	r1, [r7, #4]
 8008122:	4613      	mov	r3, r2
 8008124:	011b      	lsls	r3, r3, #4
 8008126:	1a9b      	subs	r3, r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	440b      	add	r3, r1
 800812c:	334d      	adds	r3, #77	@ 0x4d
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	2b06      	cmp	r3, #6
 8008132:	d114      	bne.n	800815e <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008134:	78fa      	ldrb	r2, [r7, #3]
 8008136:	6879      	ldr	r1, [r7, #4]
 8008138:	4613      	mov	r3, r2
 800813a:	011b      	lsls	r3, r3, #4
 800813c:	1a9b      	subs	r3, r3, r2
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	440b      	add	r3, r1
 8008142:	334d      	adds	r3, #77	@ 0x4d
 8008144:	2202      	movs	r2, #2
 8008146:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8008148:	78fa      	ldrb	r2, [r7, #3]
 800814a:	6879      	ldr	r1, [r7, #4]
 800814c:	4613      	mov	r3, r2
 800814e:	011b      	lsls	r3, r3, #4
 8008150:	1a9b      	subs	r3, r3, r2
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	440b      	add	r3, r1
 8008156:	334c      	adds	r3, #76	@ 0x4c
 8008158:	2205      	movs	r2, #5
 800815a:	701a      	strb	r2, [r3, #0]
 800815c:	e075      	b.n	800824a <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800815e:	78fa      	ldrb	r2, [r7, #3]
 8008160:	6879      	ldr	r1, [r7, #4]
 8008162:	4613      	mov	r3, r2
 8008164:	011b      	lsls	r3, r3, #4
 8008166:	1a9b      	subs	r3, r3, r2
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	440b      	add	r3, r1
 800816c:	334d      	adds	r3, #77	@ 0x4d
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	2b07      	cmp	r3, #7
 8008172:	d00a      	beq.n	800818a <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8008174:	78fa      	ldrb	r2, [r7, #3]
 8008176:	6879      	ldr	r1, [r7, #4]
 8008178:	4613      	mov	r3, r2
 800817a:	011b      	lsls	r3, r3, #4
 800817c:	1a9b      	subs	r3, r3, r2
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	440b      	add	r3, r1
 8008182:	334d      	adds	r3, #77	@ 0x4d
 8008184:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8008186:	2b09      	cmp	r3, #9
 8008188:	d170      	bne.n	800826c <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800818a:	78fa      	ldrb	r2, [r7, #3]
 800818c:	6879      	ldr	r1, [r7, #4]
 800818e:	4613      	mov	r3, r2
 8008190:	011b      	lsls	r3, r3, #4
 8008192:	1a9b      	subs	r3, r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	440b      	add	r3, r1
 8008198:	334d      	adds	r3, #77	@ 0x4d
 800819a:	2202      	movs	r2, #2
 800819c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800819e:	78fa      	ldrb	r2, [r7, #3]
 80081a0:	6879      	ldr	r1, [r7, #4]
 80081a2:	4613      	mov	r3, r2
 80081a4:	011b      	lsls	r3, r3, #4
 80081a6:	1a9b      	subs	r3, r3, r2
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	440b      	add	r3, r1
 80081ac:	3344      	adds	r3, #68	@ 0x44
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	1c59      	adds	r1, r3, #1
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	4613      	mov	r3, r2
 80081b6:	011b      	lsls	r3, r3, #4
 80081b8:	1a9b      	subs	r3, r3, r2
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	4403      	add	r3, r0
 80081be:	3344      	adds	r3, #68	@ 0x44
 80081c0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80081c2:	78fa      	ldrb	r2, [r7, #3]
 80081c4:	6879      	ldr	r1, [r7, #4]
 80081c6:	4613      	mov	r3, r2
 80081c8:	011b      	lsls	r3, r3, #4
 80081ca:	1a9b      	subs	r3, r3, r2
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	440b      	add	r3, r1
 80081d0:	3344      	adds	r3, #68	@ 0x44
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	d914      	bls.n	8008202 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80081d8:	78fa      	ldrb	r2, [r7, #3]
 80081da:	6879      	ldr	r1, [r7, #4]
 80081dc:	4613      	mov	r3, r2
 80081de:	011b      	lsls	r3, r3, #4
 80081e0:	1a9b      	subs	r3, r3, r2
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	440b      	add	r3, r1
 80081e6:	3344      	adds	r3, #68	@ 0x44
 80081e8:	2200      	movs	r2, #0
 80081ea:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80081ec:	78fa      	ldrb	r2, [r7, #3]
 80081ee:	6879      	ldr	r1, [r7, #4]
 80081f0:	4613      	mov	r3, r2
 80081f2:	011b      	lsls	r3, r3, #4
 80081f4:	1a9b      	subs	r3, r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	440b      	add	r3, r1
 80081fa:	334c      	adds	r3, #76	@ 0x4c
 80081fc:	2204      	movs	r2, #4
 80081fe:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008200:	e022      	b.n	8008248 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008202:	78fa      	ldrb	r2, [r7, #3]
 8008204:	6879      	ldr	r1, [r7, #4]
 8008206:	4613      	mov	r3, r2
 8008208:	011b      	lsls	r3, r3, #4
 800820a:	1a9b      	subs	r3, r3, r2
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	440b      	add	r3, r1
 8008210:	334c      	adds	r3, #76	@ 0x4c
 8008212:	2202      	movs	r2, #2
 8008214:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8008216:	78fb      	ldrb	r3, [r7, #3]
 8008218:	015a      	lsls	r2, r3, #5
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	4413      	add	r3, r2
 800821e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800822c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008234:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8008236:	78fb      	ldrb	r3, [r7, #3]
 8008238:	015a      	lsls	r2, r3, #5
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	4413      	add	r3, r2
 800823e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008242:	461a      	mov	r2, r3
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008248:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800824a:	78fa      	ldrb	r2, [r7, #3]
 800824c:	6879      	ldr	r1, [r7, #4]
 800824e:	4613      	mov	r3, r2
 8008250:	011b      	lsls	r3, r3, #4
 8008252:	1a9b      	subs	r3, r3, r2
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	440b      	add	r3, r1
 8008258:	334c      	adds	r3, #76	@ 0x4c
 800825a:	781a      	ldrb	r2, [r3, #0]
 800825c:	78fb      	ldrb	r3, [r7, #3]
 800825e:	4619      	mov	r1, r3
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f005 fa47 	bl	800d6f4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8008266:	e002      	b.n	800826e <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8008268:	bf00      	nop
 800826a:	e000      	b.n	800826e <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800826c:	bf00      	nop
  }
}
 800826e:	3718      	adds	r7, #24
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b08a      	sub	sp, #40	@ 0x28
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008284:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	6a1b      	ldr	r3, [r3, #32]
 800828c:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	f003 030f 	and.w	r3, r3, #15
 8008294:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	0c5b      	lsrs	r3, r3, #17
 800829a:	f003 030f 	and.w	r3, r3, #15
 800829e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	091b      	lsrs	r3, r3, #4
 80082a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80082a8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d004      	beq.n	80082ba <HCD_RXQLVL_IRQHandler+0x46>
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	2b05      	cmp	r3, #5
 80082b4:	f000 80b6 	beq.w	8008424 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80082b8:	e0b7      	b.n	800842a <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f000 80b3 	beq.w	8008428 <HCD_RXQLVL_IRQHandler+0x1b4>
 80082c2:	6879      	ldr	r1, [r7, #4]
 80082c4:	69ba      	ldr	r2, [r7, #24]
 80082c6:	4613      	mov	r3, r2
 80082c8:	011b      	lsls	r3, r3, #4
 80082ca:	1a9b      	subs	r3, r3, r2
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	440b      	add	r3, r1
 80082d0:	332c      	adds	r3, #44	@ 0x2c
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	f000 80a7 	beq.w	8008428 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80082da:	6879      	ldr	r1, [r7, #4]
 80082dc:	69ba      	ldr	r2, [r7, #24]
 80082de:	4613      	mov	r3, r2
 80082e0:	011b      	lsls	r3, r3, #4
 80082e2:	1a9b      	subs	r3, r3, r2
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	440b      	add	r3, r1
 80082e8:	3338      	adds	r3, #56	@ 0x38
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	18d1      	adds	r1, r2, r3
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	69ba      	ldr	r2, [r7, #24]
 80082f4:	4613      	mov	r3, r2
 80082f6:	011b      	lsls	r3, r3, #4
 80082f8:	1a9b      	subs	r3, r3, r2
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	4403      	add	r3, r0
 80082fe:	3334      	adds	r3, #52	@ 0x34
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4299      	cmp	r1, r3
 8008304:	f200 8083 	bhi.w	800840e <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6818      	ldr	r0, [r3, #0]
 800830c:	6879      	ldr	r1, [r7, #4]
 800830e:	69ba      	ldr	r2, [r7, #24]
 8008310:	4613      	mov	r3, r2
 8008312:	011b      	lsls	r3, r3, #4
 8008314:	1a9b      	subs	r3, r3, r2
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	440b      	add	r3, r1
 800831a:	332c      	adds	r3, #44	@ 0x2c
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	693a      	ldr	r2, [r7, #16]
 8008320:	b292      	uxth	r2, r2
 8008322:	4619      	mov	r1, r3
 8008324:	f003 fdf0 	bl	800bf08 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8008328:	6879      	ldr	r1, [r7, #4]
 800832a:	69ba      	ldr	r2, [r7, #24]
 800832c:	4613      	mov	r3, r2
 800832e:	011b      	lsls	r3, r3, #4
 8008330:	1a9b      	subs	r3, r3, r2
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	440b      	add	r3, r1
 8008336:	332c      	adds	r3, #44	@ 0x2c
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	18d1      	adds	r1, r2, r3
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	69ba      	ldr	r2, [r7, #24]
 8008342:	4613      	mov	r3, r2
 8008344:	011b      	lsls	r3, r3, #4
 8008346:	1a9b      	subs	r3, r3, r2
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	4403      	add	r3, r0
 800834c:	332c      	adds	r3, #44	@ 0x2c
 800834e:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8008350:	6879      	ldr	r1, [r7, #4]
 8008352:	69ba      	ldr	r2, [r7, #24]
 8008354:	4613      	mov	r3, r2
 8008356:	011b      	lsls	r3, r3, #4
 8008358:	1a9b      	subs	r3, r3, r2
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	440b      	add	r3, r1
 800835e:	3338      	adds	r3, #56	@ 0x38
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	18d1      	adds	r1, r2, r3
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	69ba      	ldr	r2, [r7, #24]
 800836a:	4613      	mov	r3, r2
 800836c:	011b      	lsls	r3, r3, #4
 800836e:	1a9b      	subs	r3, r3, r2
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	4403      	add	r3, r0
 8008374:	3338      	adds	r3, #56	@ 0x38
 8008376:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	015a      	lsls	r2, r3, #5
 800837c:	6a3b      	ldr	r3, [r7, #32]
 800837e:	4413      	add	r3, r2
 8008380:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	0cdb      	lsrs	r3, r3, #19
 8008388:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800838c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800838e:	6879      	ldr	r1, [r7, #4]
 8008390:	69ba      	ldr	r2, [r7, #24]
 8008392:	4613      	mov	r3, r2
 8008394:	011b      	lsls	r3, r3, #4
 8008396:	1a9b      	subs	r3, r3, r2
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	440b      	add	r3, r1
 800839c:	3328      	adds	r3, #40	@ 0x28
 800839e:	881b      	ldrh	r3, [r3, #0]
 80083a0:	461a      	mov	r2, r3
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d13f      	bne.n	8008428 <HCD_RXQLVL_IRQHandler+0x1b4>
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d03c      	beq.n	8008428 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	015a      	lsls	r2, r3, #5
 80083b2:	6a3b      	ldr	r3, [r7, #32]
 80083b4:	4413      	add	r3, r2
 80083b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80083c4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80083cc:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80083ce:	69bb      	ldr	r3, [r7, #24]
 80083d0:	015a      	lsls	r2, r3, #5
 80083d2:	6a3b      	ldr	r3, [r7, #32]
 80083d4:	4413      	add	r3, r2
 80083d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083da:	461a      	mov	r2, r3
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80083e0:	6879      	ldr	r1, [r7, #4]
 80083e2:	69ba      	ldr	r2, [r7, #24]
 80083e4:	4613      	mov	r3, r2
 80083e6:	011b      	lsls	r3, r3, #4
 80083e8:	1a9b      	subs	r3, r3, r2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	440b      	add	r3, r1
 80083ee:	333c      	adds	r3, #60	@ 0x3c
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	f083 0301 	eor.w	r3, r3, #1
 80083f6:	b2d8      	uxtb	r0, r3
 80083f8:	6879      	ldr	r1, [r7, #4]
 80083fa:	69ba      	ldr	r2, [r7, #24]
 80083fc:	4613      	mov	r3, r2
 80083fe:	011b      	lsls	r3, r3, #4
 8008400:	1a9b      	subs	r3, r3, r2
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	440b      	add	r3, r1
 8008406:	333c      	adds	r3, #60	@ 0x3c
 8008408:	4602      	mov	r2, r0
 800840a:	701a      	strb	r2, [r3, #0]
      break;
 800840c:	e00c      	b.n	8008428 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800840e:	6879      	ldr	r1, [r7, #4]
 8008410:	69ba      	ldr	r2, [r7, #24]
 8008412:	4613      	mov	r3, r2
 8008414:	011b      	lsls	r3, r3, #4
 8008416:	1a9b      	subs	r3, r3, r2
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	440b      	add	r3, r1
 800841c:	334c      	adds	r3, #76	@ 0x4c
 800841e:	2204      	movs	r2, #4
 8008420:	701a      	strb	r2, [r3, #0]
      break;
 8008422:	e001      	b.n	8008428 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8008424:	bf00      	nop
 8008426:	e000      	b.n	800842a <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8008428:	bf00      	nop
  }
}
 800842a:	bf00      	nop
 800842c:	3728      	adds	r7, #40	@ 0x28
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b086      	sub	sp, #24
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800845e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f003 0302 	and.w	r3, r3, #2
 8008466:	2b02      	cmp	r3, #2
 8008468:	d10b      	bne.n	8008482 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f003 0301 	and.w	r3, r3, #1
 8008470:	2b01      	cmp	r3, #1
 8008472:	d102      	bne.n	800847a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f005 f921 	bl	800d6bc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	f043 0302 	orr.w	r3, r3, #2
 8008480:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f003 0308 	and.w	r3, r3, #8
 8008488:	2b08      	cmp	r3, #8
 800848a:	d132      	bne.n	80084f2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	f043 0308 	orr.w	r3, r3, #8
 8008492:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f003 0304 	and.w	r3, r3, #4
 800849a:	2b04      	cmp	r3, #4
 800849c:	d126      	bne.n	80084ec <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	7a5b      	ldrb	r3, [r3, #9]
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	d113      	bne.n	80084ce <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80084ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80084b0:	d106      	bne.n	80084c0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2102      	movs	r1, #2
 80084b8:	4618      	mov	r0, r3
 80084ba:	f003 fdbf 	bl	800c03c <USB_InitFSLSPClkSel>
 80084be:	e011      	b.n	80084e4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	2101      	movs	r1, #1
 80084c6:	4618      	mov	r0, r3
 80084c8:	f003 fdb8 	bl	800c03c <USB_InitFSLSPClkSel>
 80084cc:	e00a      	b.n	80084e4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	79db      	ldrb	r3, [r3, #7]
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d106      	bne.n	80084e4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80084dc:	461a      	mov	r2, r3
 80084de:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80084e2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f005 f917 	bl	800d718 <HAL_HCD_PortEnabled_Callback>
 80084ea:	e002      	b.n	80084f2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f005 f921 	bl	800d734 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f003 0320 	and.w	r3, r3, #32
 80084f8:	2b20      	cmp	r3, #32
 80084fa:	d103      	bne.n	8008504 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	f043 0320 	orr.w	r3, r3, #32
 8008502:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800850a:	461a      	mov	r2, r3
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	6013      	str	r3, [r2, #0]
}
 8008510:	bf00      	nop
 8008512:	3718      	adds	r7, #24
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d101      	bne.n	800852a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	e12b      	b.n	8008782 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008530:	b2db      	uxtb	r3, r3
 8008532:	2b00      	cmp	r3, #0
 8008534:	d106      	bne.n	8008544 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f7f9 ff1a 	bl	8002378 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2224      	movs	r2, #36	@ 0x24
 8008548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f022 0201 	bic.w	r2, r2, #1
 800855a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800856a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800857a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800857c:	f001 f964 	bl	8009848 <HAL_RCC_GetPCLK1Freq>
 8008580:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	4a81      	ldr	r2, [pc, #516]	@ (800878c <HAL_I2C_Init+0x274>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d807      	bhi.n	800859c <HAL_I2C_Init+0x84>
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	4a80      	ldr	r2, [pc, #512]	@ (8008790 <HAL_I2C_Init+0x278>)
 8008590:	4293      	cmp	r3, r2
 8008592:	bf94      	ite	ls
 8008594:	2301      	movls	r3, #1
 8008596:	2300      	movhi	r3, #0
 8008598:	b2db      	uxtb	r3, r3
 800859a:	e006      	b.n	80085aa <HAL_I2C_Init+0x92>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	4a7d      	ldr	r2, [pc, #500]	@ (8008794 <HAL_I2C_Init+0x27c>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	bf94      	ite	ls
 80085a4:	2301      	movls	r3, #1
 80085a6:	2300      	movhi	r3, #0
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d001      	beq.n	80085b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	e0e7      	b.n	8008782 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	4a78      	ldr	r2, [pc, #480]	@ (8008798 <HAL_I2C_Init+0x280>)
 80085b6:	fba2 2303 	umull	r2, r3, r2, r3
 80085ba:	0c9b      	lsrs	r3, r3, #18
 80085bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68ba      	ldr	r2, [r7, #8]
 80085ce:	430a      	orrs	r2, r1
 80085d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	6a1b      	ldr	r3, [r3, #32]
 80085d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	4a6a      	ldr	r2, [pc, #424]	@ (800878c <HAL_I2C_Init+0x274>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d802      	bhi.n	80085ec <HAL_I2C_Init+0xd4>
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	3301      	adds	r3, #1
 80085ea:	e009      	b.n	8008600 <HAL_I2C_Init+0xe8>
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80085f2:	fb02 f303 	mul.w	r3, r2, r3
 80085f6:	4a69      	ldr	r2, [pc, #420]	@ (800879c <HAL_I2C_Init+0x284>)
 80085f8:	fba2 2303 	umull	r2, r3, r2, r3
 80085fc:	099b      	lsrs	r3, r3, #6
 80085fe:	3301      	adds	r3, #1
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	6812      	ldr	r2, [r2, #0]
 8008604:	430b      	orrs	r3, r1
 8008606:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	69db      	ldr	r3, [r3, #28]
 800860e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008612:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	495c      	ldr	r1, [pc, #368]	@ (800878c <HAL_I2C_Init+0x274>)
 800861c:	428b      	cmp	r3, r1
 800861e:	d819      	bhi.n	8008654 <HAL_I2C_Init+0x13c>
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	1e59      	subs	r1, r3, #1
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	005b      	lsls	r3, r3, #1
 800862a:	fbb1 f3f3 	udiv	r3, r1, r3
 800862e:	1c59      	adds	r1, r3, #1
 8008630:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008634:	400b      	ands	r3, r1
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00a      	beq.n	8008650 <HAL_I2C_Init+0x138>
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	1e59      	subs	r1, r3, #1
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	005b      	lsls	r3, r3, #1
 8008644:	fbb1 f3f3 	udiv	r3, r1, r3
 8008648:	3301      	adds	r3, #1
 800864a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800864e:	e051      	b.n	80086f4 <HAL_I2C_Init+0x1dc>
 8008650:	2304      	movs	r3, #4
 8008652:	e04f      	b.n	80086f4 <HAL_I2C_Init+0x1dc>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d111      	bne.n	8008680 <HAL_I2C_Init+0x168>
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	1e58      	subs	r0, r3, #1
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6859      	ldr	r1, [r3, #4]
 8008664:	460b      	mov	r3, r1
 8008666:	005b      	lsls	r3, r3, #1
 8008668:	440b      	add	r3, r1
 800866a:	fbb0 f3f3 	udiv	r3, r0, r3
 800866e:	3301      	adds	r3, #1
 8008670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008674:	2b00      	cmp	r3, #0
 8008676:	bf0c      	ite	eq
 8008678:	2301      	moveq	r3, #1
 800867a:	2300      	movne	r3, #0
 800867c:	b2db      	uxtb	r3, r3
 800867e:	e012      	b.n	80086a6 <HAL_I2C_Init+0x18e>
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	1e58      	subs	r0, r3, #1
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6859      	ldr	r1, [r3, #4]
 8008688:	460b      	mov	r3, r1
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	440b      	add	r3, r1
 800868e:	0099      	lsls	r1, r3, #2
 8008690:	440b      	add	r3, r1
 8008692:	fbb0 f3f3 	udiv	r3, r0, r3
 8008696:	3301      	adds	r3, #1
 8008698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800869c:	2b00      	cmp	r3, #0
 800869e:	bf0c      	ite	eq
 80086a0:	2301      	moveq	r3, #1
 80086a2:	2300      	movne	r3, #0
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d001      	beq.n	80086ae <HAL_I2C_Init+0x196>
 80086aa:	2301      	movs	r3, #1
 80086ac:	e022      	b.n	80086f4 <HAL_I2C_Init+0x1dc>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d10e      	bne.n	80086d4 <HAL_I2C_Init+0x1bc>
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	1e58      	subs	r0, r3, #1
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6859      	ldr	r1, [r3, #4]
 80086be:	460b      	mov	r3, r1
 80086c0:	005b      	lsls	r3, r3, #1
 80086c2:	440b      	add	r3, r1
 80086c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80086c8:	3301      	adds	r3, #1
 80086ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086d2:	e00f      	b.n	80086f4 <HAL_I2C_Init+0x1dc>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	1e58      	subs	r0, r3, #1
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6859      	ldr	r1, [r3, #4]
 80086dc:	460b      	mov	r3, r1
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	440b      	add	r3, r1
 80086e2:	0099      	lsls	r1, r3, #2
 80086e4:	440b      	add	r3, r1
 80086e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80086ea:	3301      	adds	r3, #1
 80086ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80086f4:	6879      	ldr	r1, [r7, #4]
 80086f6:	6809      	ldr	r1, [r1, #0]
 80086f8:	4313      	orrs	r3, r2
 80086fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	69da      	ldr	r2, [r3, #28]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a1b      	ldr	r3, [r3, #32]
 800870e:	431a      	orrs	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	430a      	orrs	r2, r1
 8008716:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008722:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	6911      	ldr	r1, [r2, #16]
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	68d2      	ldr	r2, [r2, #12]
 800872e:	4311      	orrs	r1, r2
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	6812      	ldr	r2, [r2, #0]
 8008734:	430b      	orrs	r3, r1
 8008736:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	695a      	ldr	r2, [r3, #20]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	699b      	ldr	r3, [r3, #24]
 800874a:	431a      	orrs	r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	430a      	orrs	r2, r1
 8008752:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f042 0201 	orr.w	r2, r2, #1
 8008762:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2220      	movs	r2, #32
 800876e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	000186a0 	.word	0x000186a0
 8008790:	001e847f 	.word	0x001e847f
 8008794:	003d08ff 	.word	0x003d08ff
 8008798:	431bde83 	.word	0x431bde83
 800879c:	10624dd3 	.word	0x10624dd3

080087a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	2b20      	cmp	r3, #32
 80087b4:	d129      	bne.n	800880a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2224      	movs	r2, #36	@ 0x24
 80087ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f022 0201 	bic.w	r2, r2, #1
 80087cc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f022 0210 	bic.w	r2, r2, #16
 80087dc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	683a      	ldr	r2, [r7, #0]
 80087ea:	430a      	orrs	r2, r1
 80087ec:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f042 0201 	orr.w	r2, r2, #1
 80087fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2220      	movs	r2, #32
 8008802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8008806:	2300      	movs	r3, #0
 8008808:	e000      	b.n	800880c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800880a:	2302      	movs	r3, #2
  }
}
 800880c:	4618      	mov	r0, r3
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8008822:	2300      	movs	r3, #0
 8008824:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800882c:	b2db      	uxtb	r3, r3
 800882e:	2b20      	cmp	r3, #32
 8008830:	d12a      	bne.n	8008888 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2224      	movs	r2, #36	@ 0x24
 8008836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f022 0201 	bic.w	r2, r2, #1
 8008848:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008850:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8008852:	89fb      	ldrh	r3, [r7, #14]
 8008854:	f023 030f 	bic.w	r3, r3, #15
 8008858:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	b29a      	uxth	r2, r3
 800885e:	89fb      	ldrh	r3, [r7, #14]
 8008860:	4313      	orrs	r3, r2
 8008862:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	89fa      	ldrh	r2, [r7, #14]
 800886a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f042 0201 	orr.w	r2, r2, #1
 800887a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2220      	movs	r2, #32
 8008880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8008884:	2300      	movs	r3, #0
 8008886:	e000      	b.n	800888a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8008888:	2302      	movs	r3, #2
  }
}
 800888a:	4618      	mov	r0, r3
 800888c:	3714      	adds	r7, #20
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr
	...

08008898 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d101      	bne.n	80088aa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	e0bf      	b.n	8008a2a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d106      	bne.n	80088c4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f7fa fd2c 	bl	800331c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2202      	movs	r2, #2
 80088c8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	699a      	ldr	r2, [r3, #24]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80088da:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	6999      	ldr	r1, [r3, #24]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	685a      	ldr	r2, [r3, #4]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80088f0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	430a      	orrs	r2, r1
 80088fe:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	6899      	ldr	r1, [r3, #8]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	4b4a      	ldr	r3, [pc, #296]	@ (8008a34 <HAL_LTDC_Init+0x19c>)
 800890c:	400b      	ands	r3, r1
 800890e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	695b      	ldr	r3, [r3, #20]
 8008914:	041b      	lsls	r3, r3, #16
 8008916:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	6899      	ldr	r1, [r3, #8]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	699a      	ldr	r2, [r3, #24]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	431a      	orrs	r2, r3
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	430a      	orrs	r2, r1
 800892c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68d9      	ldr	r1, [r3, #12]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	4b3e      	ldr	r3, [pc, #248]	@ (8008a34 <HAL_LTDC_Init+0x19c>)
 800893a:	400b      	ands	r3, r1
 800893c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	69db      	ldr	r3, [r3, #28]
 8008942:	041b      	lsls	r3, r3, #16
 8008944:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	68d9      	ldr	r1, [r3, #12]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a1a      	ldr	r2, [r3, #32]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	431a      	orrs	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	430a      	orrs	r2, r1
 800895a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	6919      	ldr	r1, [r3, #16]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	4b33      	ldr	r3, [pc, #204]	@ (8008a34 <HAL_LTDC_Init+0x19c>)
 8008968:	400b      	ands	r3, r1
 800896a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008970:	041b      	lsls	r3, r3, #16
 8008972:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	6919      	ldr	r1, [r3, #16]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	431a      	orrs	r2, r3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	430a      	orrs	r2, r1
 8008988:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	6959      	ldr	r1, [r3, #20]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	4b27      	ldr	r3, [pc, #156]	@ (8008a34 <HAL_LTDC_Init+0x19c>)
 8008996:	400b      	ands	r3, r1
 8008998:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800899e:	041b      	lsls	r3, r3, #16
 80089a0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	6959      	ldr	r1, [r3, #20]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	431a      	orrs	r2, r3
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	430a      	orrs	r2, r1
 80089b6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80089be:	021b      	lsls	r3, r3, #8
 80089c0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80089c8:	041b      	lsls	r3, r3, #16
 80089ca:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80089da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80089ee:	431a      	orrs	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	430a      	orrs	r2, r1
 80089f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f042 0206 	orr.w	r2, r2, #6
 8008a06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	699a      	ldr	r2, [r3, #24]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f042 0201 	orr.w	r2, r2, #1
 8008a16:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3710      	adds	r7, #16
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop
 8008a34:	f000f800 	.word	0xf000f800

08008a38 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a46:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a4e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f003 0304 	and.w	r3, r3, #4
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d023      	beq.n	8008aa2 <HAL_LTDC_IRQHandler+0x6a>
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	f003 0304 	and.w	r3, r3, #4
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d01e      	beq.n	8008aa2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f022 0204 	bic.w	r2, r2, #4
 8008a72:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2204      	movs	r2, #4
 8008a7a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008a82:	f043 0201 	orr.w	r2, r3, #1
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2204      	movs	r2, #4
 8008a90:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 f86f 	bl	8008b80 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f003 0302 	and.w	r3, r3, #2
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d023      	beq.n	8008af4 <HAL_LTDC_IRQHandler+0xbc>
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	f003 0302 	and.w	r3, r3, #2
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d01e      	beq.n	8008af4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f022 0202 	bic.w	r2, r2, #2
 8008ac4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2202      	movs	r2, #2
 8008acc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008ad4:	f043 0202 	orr.w	r2, r3, #2
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2204      	movs	r2, #4
 8008ae2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f846 	bl	8008b80 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f003 0301 	and.w	r3, r3, #1
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d01b      	beq.n	8008b36 <HAL_LTDC_IRQHandler+0xfe>
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	f003 0301 	and.w	r3, r3, #1
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d016      	beq.n	8008b36 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f022 0201 	bic.w	r2, r2, #1
 8008b16:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 f82f 	bl	8008b94 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f003 0308 	and.w	r3, r3, #8
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d01b      	beq.n	8008b78 <HAL_LTDC_IRQHandler+0x140>
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	f003 0308 	and.w	r3, r3, #8
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d016      	beq.n	8008b78 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f022 0208 	bic.w	r2, r2, #8
 8008b58:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2208      	movs	r2, #8
 8008b60:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2201      	movs	r2, #1
 8008b66:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 f818 	bl	8008ba8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008b78:	bf00      	nop
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008b88:	bf00      	nop
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8008b9c:	bf00      	nop
 8008b9e:	370c      	adds	r7, #12
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008bb0:	bf00      	nop
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008bbc:	b5b0      	push	{r4, r5, r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d101      	bne.n	8008bd6 <HAL_LTDC_ConfigLayer+0x1a>
 8008bd2:	2302      	movs	r3, #2
 8008bd4:	e02c      	b.n	8008c30 <HAL_LTDC_ConfigLayer+0x74>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2202      	movs	r2, #2
 8008be2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2134      	movs	r1, #52	@ 0x34
 8008bec:	fb01 f303 	mul.w	r3, r1, r3
 8008bf0:	4413      	add	r3, r2
 8008bf2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	4614      	mov	r4, r2
 8008bfa:	461d      	mov	r5, r3
 8008bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c08:	682b      	ldr	r3, [r5, #0]
 8008c0a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	68b9      	ldr	r1, [r7, #8]
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	f000 f811 	bl	8008c38 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2201      	movs	r2, #1
 8008c22:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3710      	adds	r7, #16
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bdb0      	pop	{r4, r5, r7, pc}

08008c38 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b089      	sub	sp, #36	@ 0x24
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	685a      	ldr	r2, [r3, #4]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	68db      	ldr	r3, [r3, #12]
 8008c4e:	0c1b      	lsrs	r3, r3, #16
 8008c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c54:	4413      	add	r3, r2
 8008c56:	041b      	lsls	r3, r3, #16
 8008c58:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	461a      	mov	r2, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	01db      	lsls	r3, r3, #7
 8008c64:	4413      	add	r3, r2
 8008c66:	3384      	adds	r3, #132	@ 0x84
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	6812      	ldr	r2, [r2, #0]
 8008c6e:	4611      	mov	r1, r2
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	01d2      	lsls	r2, r2, #7
 8008c74:	440a      	add	r2, r1
 8008c76:	3284      	adds	r2, #132	@ 0x84
 8008c78:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8008c7c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	0c1b      	lsrs	r3, r3, #16
 8008c8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008c8e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008c90:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4619      	mov	r1, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	01db      	lsls	r3, r3, #7
 8008c9c:	440b      	add	r3, r1
 8008c9e:	3384      	adds	r3, #132	@ 0x84
 8008ca0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008ca6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	68da      	ldr	r2, [r3, #12]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008cb6:	4413      	add	r3, r2
 8008cb8:	041b      	lsls	r3, r3, #16
 8008cba:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	01db      	lsls	r3, r3, #7
 8008cc6:	4413      	add	r3, r2
 8008cc8:	3384      	adds	r3, #132	@ 0x84
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	6812      	ldr	r2, [r2, #0]
 8008cd0:	4611      	mov	r1, r2
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	01d2      	lsls	r2, r2, #7
 8008cd6:	440a      	add	r2, r1
 8008cd8:	3284      	adds	r2, #132	@ 0x84
 8008cda:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8008cde:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	689a      	ldr	r2, [r3, #8]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008cee:	4413      	add	r3, r2
 8008cf0:	1c5a      	adds	r2, r3, #1
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	01db      	lsls	r3, r3, #7
 8008cfc:	440b      	add	r3, r1
 8008cfe:	3384      	adds	r3, #132	@ 0x84
 8008d00:	4619      	mov	r1, r3
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	01db      	lsls	r3, r3, #7
 8008d12:	4413      	add	r3, r2
 8008d14:	3384      	adds	r3, #132	@ 0x84
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	68fa      	ldr	r2, [r7, #12]
 8008d1a:	6812      	ldr	r2, [r2, #0]
 8008d1c:	4611      	mov	r1, r2
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	01d2      	lsls	r2, r2, #7
 8008d22:	440a      	add	r2, r1
 8008d24:	3284      	adds	r2, #132	@ 0x84
 8008d26:	f023 0307 	bic.w	r3, r3, #7
 8008d2a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	461a      	mov	r2, r3
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	01db      	lsls	r3, r3, #7
 8008d36:	4413      	add	r3, r2
 8008d38:	3384      	adds	r3, #132	@ 0x84
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	691b      	ldr	r3, [r3, #16]
 8008d40:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008d48:	021b      	lsls	r3, r3, #8
 8008d4a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008d52:	041b      	lsls	r3, r3, #16
 8008d54:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	699b      	ldr	r3, [r3, #24]
 8008d5a:	061b      	lsls	r3, r3, #24
 8008d5c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	461a      	mov	r2, r3
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	01db      	lsls	r3, r3, #7
 8008d68:	4413      	add	r3, r2
 8008d6a:	3384      	adds	r3, #132	@ 0x84
 8008d6c:	699b      	ldr	r3, [r3, #24]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	461a      	mov	r2, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	01db      	lsls	r3, r3, #7
 8008d78:	4413      	add	r3, r2
 8008d7a:	3384      	adds	r3, #132	@ 0x84
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	2300      	movs	r3, #0
 8008d80:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008d88:	461a      	mov	r2, r3
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	431a      	orrs	r2, r3
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	431a      	orrs	r2, r3
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4619      	mov	r1, r3
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	01db      	lsls	r3, r3, #7
 8008d9c:	440b      	add	r3, r1
 8008d9e:	3384      	adds	r3, #132	@ 0x84
 8008da0:	4619      	mov	r1, r3
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	461a      	mov	r2, r3
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	01db      	lsls	r3, r3, #7
 8008db2:	4413      	add	r3, r2
 8008db4:	3384      	adds	r3, #132	@ 0x84
 8008db6:	695b      	ldr	r3, [r3, #20]
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	6812      	ldr	r2, [r2, #0]
 8008dbc:	4611      	mov	r1, r2
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	01d2      	lsls	r2, r2, #7
 8008dc2:	440a      	add	r2, r1
 8008dc4:	3284      	adds	r2, #132	@ 0x84
 8008dc6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008dca:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	01db      	lsls	r3, r3, #7
 8008dd6:	4413      	add	r3, r2
 8008dd8:	3384      	adds	r3, #132	@ 0x84
 8008dda:	461a      	mov	r2, r3
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	695b      	ldr	r3, [r3, #20]
 8008de0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	461a      	mov	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	01db      	lsls	r3, r3, #7
 8008dec:	4413      	add	r3, r2
 8008dee:	3384      	adds	r3, #132	@ 0x84
 8008df0:	69db      	ldr	r3, [r3, #28]
 8008df2:	68fa      	ldr	r2, [r7, #12]
 8008df4:	6812      	ldr	r2, [r2, #0]
 8008df6:	4611      	mov	r1, r2
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	01d2      	lsls	r2, r2, #7
 8008dfc:	440a      	add	r2, r1
 8008dfe:	3284      	adds	r2, #132	@ 0x84
 8008e00:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8008e04:	f023 0307 	bic.w	r3, r3, #7
 8008e08:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	69da      	ldr	r2, [r3, #28]
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	6a1b      	ldr	r3, [r3, #32]
 8008e12:	68f9      	ldr	r1, [r7, #12]
 8008e14:	6809      	ldr	r1, [r1, #0]
 8008e16:	4608      	mov	r0, r1
 8008e18:	6879      	ldr	r1, [r7, #4]
 8008e1a:	01c9      	lsls	r1, r1, #7
 8008e1c:	4401      	add	r1, r0
 8008e1e:	3184      	adds	r1, #132	@ 0x84
 8008e20:	4313      	orrs	r3, r2
 8008e22:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	461a      	mov	r2, r3
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	01db      	lsls	r3, r3, #7
 8008e2e:	4413      	add	r3, r2
 8008e30:	3384      	adds	r3, #132	@ 0x84
 8008e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	461a      	mov	r2, r3
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	01db      	lsls	r3, r3, #7
 8008e3e:	4413      	add	r3, r2
 8008e40:	3384      	adds	r3, #132	@ 0x84
 8008e42:	461a      	mov	r2, r3
 8008e44:	2300      	movs	r3, #0
 8008e46:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	01db      	lsls	r3, r3, #7
 8008e52:	4413      	add	r3, r2
 8008e54:	3384      	adds	r3, #132	@ 0x84
 8008e56:	461a      	mov	r2, r3
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e5c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	691b      	ldr	r3, [r3, #16]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d102      	bne.n	8008e6c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8008e66:	2304      	movs	r3, #4
 8008e68:	61fb      	str	r3, [r7, #28]
 8008e6a:	e01b      	b.n	8008ea4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	691b      	ldr	r3, [r3, #16]
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d102      	bne.n	8008e7a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8008e74:	2303      	movs	r3, #3
 8008e76:	61fb      	str	r3, [r7, #28]
 8008e78:	e014      	b.n	8008ea4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	2b04      	cmp	r3, #4
 8008e80:	d00b      	beq.n	8008e9a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d007      	beq.n	8008e9a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008e8e:	2b03      	cmp	r3, #3
 8008e90:	d003      	beq.n	8008e9a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008e96:	2b07      	cmp	r3, #7
 8008e98:	d102      	bne.n	8008ea0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8008e9a:	2302      	movs	r3, #2
 8008e9c:	61fb      	str	r3, [r7, #28]
 8008e9e:	e001      	b.n	8008ea4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	01db      	lsls	r3, r3, #7
 8008eae:	4413      	add	r3, r2
 8008eb0:	3384      	adds	r3, #132	@ 0x84
 8008eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	6812      	ldr	r2, [r2, #0]
 8008eb8:	4611      	mov	r1, r2
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	01d2      	lsls	r2, r2, #7
 8008ebe:	440a      	add	r2, r1
 8008ec0:	3284      	adds	r2, #132	@ 0x84
 8008ec2:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8008ec6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ecc:	69fa      	ldr	r2, [r7, #28]
 8008ece:	fb02 f303 	mul.w	r3, r2, r3
 8008ed2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	6859      	ldr	r1, [r3, #4]
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	1acb      	subs	r3, r1, r3
 8008ede:	69f9      	ldr	r1, [r7, #28]
 8008ee0:	fb01 f303 	mul.w	r3, r1, r3
 8008ee4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008ee6:	68f9      	ldr	r1, [r7, #12]
 8008ee8:	6809      	ldr	r1, [r1, #0]
 8008eea:	4608      	mov	r0, r1
 8008eec:	6879      	ldr	r1, [r7, #4]
 8008eee:	01c9      	lsls	r1, r1, #7
 8008ef0:	4401      	add	r1, r0
 8008ef2:	3184      	adds	r1, #132	@ 0x84
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	461a      	mov	r2, r3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	01db      	lsls	r3, r3, #7
 8008f02:	4413      	add	r3, r2
 8008f04:	3384      	adds	r3, #132	@ 0x84
 8008f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f08:	68fa      	ldr	r2, [r7, #12]
 8008f0a:	6812      	ldr	r2, [r2, #0]
 8008f0c:	4611      	mov	r1, r2
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	01d2      	lsls	r2, r2, #7
 8008f12:	440a      	add	r2, r1
 8008f14:	3284      	adds	r2, #132	@ 0x84
 8008f16:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008f1a:	f023 0307 	bic.w	r3, r3, #7
 8008f1e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	461a      	mov	r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	01db      	lsls	r3, r3, #7
 8008f2a:	4413      	add	r3, r2
 8008f2c:	3384      	adds	r3, #132	@ 0x84
 8008f2e:	461a      	mov	r2, r3
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f34:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	01db      	lsls	r3, r3, #7
 8008f40:	4413      	add	r3, r2
 8008f42:	3384      	adds	r3, #132	@ 0x84
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	68fa      	ldr	r2, [r7, #12]
 8008f48:	6812      	ldr	r2, [r2, #0]
 8008f4a:	4611      	mov	r1, r2
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	01d2      	lsls	r2, r2, #7
 8008f50:	440a      	add	r2, r1
 8008f52:	3284      	adds	r2, #132	@ 0x84
 8008f54:	f043 0301 	orr.w	r3, r3, #1
 8008f58:	6013      	str	r3, [r2, #0]
}
 8008f5a:	bf00      	nop
 8008f5c:	3724      	adds	r7, #36	@ 0x24
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr
	...

08008f68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b086      	sub	sp, #24
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d101      	bne.n	8008f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	e267      	b.n	800944a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f003 0301 	and.w	r3, r3, #1
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d075      	beq.n	8009072 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008f86:	4b88      	ldr	r3, [pc, #544]	@ (80091a8 <HAL_RCC_OscConfig+0x240>)
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	f003 030c 	and.w	r3, r3, #12
 8008f8e:	2b04      	cmp	r3, #4
 8008f90:	d00c      	beq.n	8008fac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008f92:	4b85      	ldr	r3, [pc, #532]	@ (80091a8 <HAL_RCC_OscConfig+0x240>)
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008f9a:	2b08      	cmp	r3, #8
 8008f9c:	d112      	bne.n	8008fc4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008f9e:	4b82      	ldr	r3, [pc, #520]	@ (80091a8 <HAL_RCC_OscConfig+0x240>)
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008fa6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008faa:	d10b      	bne.n	8008fc4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fac:	4b7e      	ldr	r3, [pc, #504]	@ (80091a8 <HAL_RCC_OscConfig+0x240>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d05b      	beq.n	8009070 <HAL_RCC_OscConfig+0x108>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d157      	bne.n	8009070 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e242      	b.n	800944a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fcc:	d106      	bne.n	8008fdc <HAL_RCC_OscConfig+0x74>
 8008fce:	4b76      	ldr	r3, [pc, #472]	@ (80091a8 <HAL_RCC_OscConfig+0x240>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a75      	ldr	r2, [pc, #468]	@ (80091a8 <HAL_RCC_OscConfig+0x240>)
 8008fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008fd8:	6013      	str	r3, [r2, #0]
 8008fda:	e01d      	b.n	8009018 <HAL_RCC_OscConfig+0xb0>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008fe4:	d10c      	bne.n	8009000 <HAL_RCC_OscConfig+0x98>
 8008fe6:	4b70      	ldr	r3, [pc, #448]	@ (80091a8 <HAL_RCC_OscConfig+0x240>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a6f      	ldr	r2, [pc, #444]	@ (80091a8 <HAL_RCC_OscConfig+0x240>)
 8008fec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008ff0:	6013      	str	r3, [r2, #0]
 8008ff2:	4b6d      	ldr	r3, [pc, #436]	@ (80091a8 <HAL_RCC_OscConfig+0x240>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a6c      	ldr	r2, [pc, #432]	@ (80091a8 <HAL_RCC_OscConfig+0x240>)
 8008ff8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ffc:	6013      	str	r3, [r2, #0]
 8008ffe:	e00b      	b.n	8009018 <HAL_RCC_OscConfig+0xb0>
 8009000:	4b69      	ldr	r3, [pc, #420]	@ (80091a8 <HAL_RCC_OscConfig+0x240>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a68      	ldr	r2, [pc, #416]	@ (80091a8 <HAL_RCC_OscConfig+0x240>)
 8009006:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800900a:	6013      	str	r3, [r2, #0]
 800900c:	4b66      	ldr	r3, [pc, #408]	@ (80091a8 <HAL_RCC_OscConfig+0x240>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a65      	ldr	r2, [pc, #404]	@ (80091a8 <HAL_RCC_OscConfig+0x240>)
 8009012:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d013      	beq.n	8009048 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009020:	f7fc f94c 	bl	80052bc <HAL_GetTick>
 8009024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009026:	e008      	b.n	800903a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009028:	f7fc f948 	bl	80052bc <HAL_GetTick>
 800902c:	4602      	mov	r2, r0
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	1ad3      	subs	r3, r2, r3
 8009032:	2b64      	cmp	r3, #100	@ 0x64
 8009034:	d901      	bls.n	800903a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009036:	2303      	movs	r3, #3
 8009038:	e207      	b.n	800944a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800903a:	4b5b      	ldr	r3, [pc, #364]	@ (80091a8 <HAL_RCC_OscConfig+0x240>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009042:	2b00      	cmp	r3, #0
 8009044:	d0f0      	beq.n	8009028 <HAL_RCC_OscConfig+0xc0>
 8009046:	e014      	b.n	8009072 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009048:	f7fc f938 	bl	80052bc <HAL_GetTick>
 800904c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800904e:	e008      	b.n	8009062 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009050:	f7fc f934 	bl	80052bc <HAL_GetTick>
 8009054:	4602      	mov	r2, r0
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	1ad3      	subs	r3, r2, r3
 800905a:	2b64      	cmp	r3, #100	@ 0x64
 800905c:	d901      	bls.n	8009062 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800905e:	2303      	movs	r3, #3
 8009060:	e1f3      	b.n	800944a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009062:	4b51      	ldr	r3, [pc, #324]	@ (80091a8 <HAL_RCC_OscConfig+0x240>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800906a:	2b00      	cmp	r3, #0
 800906c:	d1f0      	bne.n	8009050 <HAL_RCC_OscConfig+0xe8>
 800906e:	e000      	b.n	8009072 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f003 0302 	and.w	r3, r3, #2
 800907a:	2b00      	cmp	r3, #0
 800907c:	d063      	beq.n	8009146 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800907e:	4b4a      	ldr	r3, [pc, #296]	@ (80091a8 <HAL_RCC_OscConfig+0x240>)
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	f003 030c 	and.w	r3, r3, #12
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00b      	beq.n	80090a2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800908a:	4b47      	ldr	r3, [pc, #284]	@ (80091a8 <HAL_RCC_OscConfig+0x240>)
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009092:	2b08      	cmp	r3, #8
 8009094:	d11c      	bne.n	80090d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009096:	4b44      	ldr	r3, [pc, #272]	@ (80091a8 <HAL_RCC_OscConfig+0x240>)
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d116      	bne.n	80090d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090a2:	4b41      	ldr	r3, [pc, #260]	@ (80091a8 <HAL_RCC_OscConfig+0x240>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f003 0302 	and.w	r3, r3, #2
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d005      	beq.n	80090ba <HAL_RCC_OscConfig+0x152>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d001      	beq.n	80090ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	e1c7      	b.n	800944a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090ba:	4b3b      	ldr	r3, [pc, #236]	@ (80091a8 <HAL_RCC_OscConfig+0x240>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	691b      	ldr	r3, [r3, #16]
 80090c6:	00db      	lsls	r3, r3, #3
 80090c8:	4937      	ldr	r1, [pc, #220]	@ (80091a8 <HAL_RCC_OscConfig+0x240>)
 80090ca:	4313      	orrs	r3, r2
 80090cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090ce:	e03a      	b.n	8009146 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d020      	beq.n	800911a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80090d8:	4b34      	ldr	r3, [pc, #208]	@ (80091ac <HAL_RCC_OscConfig+0x244>)
 80090da:	2201      	movs	r2, #1
 80090dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090de:	f7fc f8ed 	bl	80052bc <HAL_GetTick>
 80090e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090e4:	e008      	b.n	80090f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80090e6:	f7fc f8e9 	bl	80052bc <HAL_GetTick>
 80090ea:	4602      	mov	r2, r0
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	1ad3      	subs	r3, r2, r3
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d901      	bls.n	80090f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80090f4:	2303      	movs	r3, #3
 80090f6:	e1a8      	b.n	800944a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090f8:	4b2b      	ldr	r3, [pc, #172]	@ (80091a8 <HAL_RCC_OscConfig+0x240>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 0302 	and.w	r3, r3, #2
 8009100:	2b00      	cmp	r3, #0
 8009102:	d0f0      	beq.n	80090e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009104:	4b28      	ldr	r3, [pc, #160]	@ (80091a8 <HAL_RCC_OscConfig+0x240>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	691b      	ldr	r3, [r3, #16]
 8009110:	00db      	lsls	r3, r3, #3
 8009112:	4925      	ldr	r1, [pc, #148]	@ (80091a8 <HAL_RCC_OscConfig+0x240>)
 8009114:	4313      	orrs	r3, r2
 8009116:	600b      	str	r3, [r1, #0]
 8009118:	e015      	b.n	8009146 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800911a:	4b24      	ldr	r3, [pc, #144]	@ (80091ac <HAL_RCC_OscConfig+0x244>)
 800911c:	2200      	movs	r2, #0
 800911e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009120:	f7fc f8cc 	bl	80052bc <HAL_GetTick>
 8009124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009126:	e008      	b.n	800913a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009128:	f7fc f8c8 	bl	80052bc <HAL_GetTick>
 800912c:	4602      	mov	r2, r0
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	1ad3      	subs	r3, r2, r3
 8009132:	2b02      	cmp	r3, #2
 8009134:	d901      	bls.n	800913a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009136:	2303      	movs	r3, #3
 8009138:	e187      	b.n	800944a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800913a:	4b1b      	ldr	r3, [pc, #108]	@ (80091a8 <HAL_RCC_OscConfig+0x240>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f003 0302 	and.w	r3, r3, #2
 8009142:	2b00      	cmp	r3, #0
 8009144:	d1f0      	bne.n	8009128 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f003 0308 	and.w	r3, r3, #8
 800914e:	2b00      	cmp	r3, #0
 8009150:	d036      	beq.n	80091c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	695b      	ldr	r3, [r3, #20]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d016      	beq.n	8009188 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800915a:	4b15      	ldr	r3, [pc, #84]	@ (80091b0 <HAL_RCC_OscConfig+0x248>)
 800915c:	2201      	movs	r2, #1
 800915e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009160:	f7fc f8ac 	bl	80052bc <HAL_GetTick>
 8009164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009166:	e008      	b.n	800917a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009168:	f7fc f8a8 	bl	80052bc <HAL_GetTick>
 800916c:	4602      	mov	r2, r0
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	1ad3      	subs	r3, r2, r3
 8009172:	2b02      	cmp	r3, #2
 8009174:	d901      	bls.n	800917a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009176:	2303      	movs	r3, #3
 8009178:	e167      	b.n	800944a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800917a:	4b0b      	ldr	r3, [pc, #44]	@ (80091a8 <HAL_RCC_OscConfig+0x240>)
 800917c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800917e:	f003 0302 	and.w	r3, r3, #2
 8009182:	2b00      	cmp	r3, #0
 8009184:	d0f0      	beq.n	8009168 <HAL_RCC_OscConfig+0x200>
 8009186:	e01b      	b.n	80091c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009188:	4b09      	ldr	r3, [pc, #36]	@ (80091b0 <HAL_RCC_OscConfig+0x248>)
 800918a:	2200      	movs	r2, #0
 800918c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800918e:	f7fc f895 	bl	80052bc <HAL_GetTick>
 8009192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009194:	e00e      	b.n	80091b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009196:	f7fc f891 	bl	80052bc <HAL_GetTick>
 800919a:	4602      	mov	r2, r0
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	1ad3      	subs	r3, r2, r3
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	d907      	bls.n	80091b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80091a4:	2303      	movs	r3, #3
 80091a6:	e150      	b.n	800944a <HAL_RCC_OscConfig+0x4e2>
 80091a8:	40023800 	.word	0x40023800
 80091ac:	42470000 	.word	0x42470000
 80091b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091b4:	4b88      	ldr	r3, [pc, #544]	@ (80093d8 <HAL_RCC_OscConfig+0x470>)
 80091b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091b8:	f003 0302 	and.w	r3, r3, #2
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1ea      	bne.n	8009196 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f003 0304 	and.w	r3, r3, #4
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	f000 8097 	beq.w	80092fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80091ce:	2300      	movs	r3, #0
 80091d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80091d2:	4b81      	ldr	r3, [pc, #516]	@ (80093d8 <HAL_RCC_OscConfig+0x470>)
 80091d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d10f      	bne.n	80091fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80091de:	2300      	movs	r3, #0
 80091e0:	60bb      	str	r3, [r7, #8]
 80091e2:	4b7d      	ldr	r3, [pc, #500]	@ (80093d8 <HAL_RCC_OscConfig+0x470>)
 80091e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091e6:	4a7c      	ldr	r2, [pc, #496]	@ (80093d8 <HAL_RCC_OscConfig+0x470>)
 80091e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80091ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80091ee:	4b7a      	ldr	r3, [pc, #488]	@ (80093d8 <HAL_RCC_OscConfig+0x470>)
 80091f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091f6:	60bb      	str	r3, [r7, #8]
 80091f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80091fa:	2301      	movs	r3, #1
 80091fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80091fe:	4b77      	ldr	r3, [pc, #476]	@ (80093dc <HAL_RCC_OscConfig+0x474>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009206:	2b00      	cmp	r3, #0
 8009208:	d118      	bne.n	800923c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800920a:	4b74      	ldr	r3, [pc, #464]	@ (80093dc <HAL_RCC_OscConfig+0x474>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4a73      	ldr	r2, [pc, #460]	@ (80093dc <HAL_RCC_OscConfig+0x474>)
 8009210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009216:	f7fc f851 	bl	80052bc <HAL_GetTick>
 800921a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800921c:	e008      	b.n	8009230 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800921e:	f7fc f84d 	bl	80052bc <HAL_GetTick>
 8009222:	4602      	mov	r2, r0
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	1ad3      	subs	r3, r2, r3
 8009228:	2b02      	cmp	r3, #2
 800922a:	d901      	bls.n	8009230 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800922c:	2303      	movs	r3, #3
 800922e:	e10c      	b.n	800944a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009230:	4b6a      	ldr	r3, [pc, #424]	@ (80093dc <HAL_RCC_OscConfig+0x474>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009238:	2b00      	cmp	r3, #0
 800923a:	d0f0      	beq.n	800921e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	2b01      	cmp	r3, #1
 8009242:	d106      	bne.n	8009252 <HAL_RCC_OscConfig+0x2ea>
 8009244:	4b64      	ldr	r3, [pc, #400]	@ (80093d8 <HAL_RCC_OscConfig+0x470>)
 8009246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009248:	4a63      	ldr	r2, [pc, #396]	@ (80093d8 <HAL_RCC_OscConfig+0x470>)
 800924a:	f043 0301 	orr.w	r3, r3, #1
 800924e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009250:	e01c      	b.n	800928c <HAL_RCC_OscConfig+0x324>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	2b05      	cmp	r3, #5
 8009258:	d10c      	bne.n	8009274 <HAL_RCC_OscConfig+0x30c>
 800925a:	4b5f      	ldr	r3, [pc, #380]	@ (80093d8 <HAL_RCC_OscConfig+0x470>)
 800925c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800925e:	4a5e      	ldr	r2, [pc, #376]	@ (80093d8 <HAL_RCC_OscConfig+0x470>)
 8009260:	f043 0304 	orr.w	r3, r3, #4
 8009264:	6713      	str	r3, [r2, #112]	@ 0x70
 8009266:	4b5c      	ldr	r3, [pc, #368]	@ (80093d8 <HAL_RCC_OscConfig+0x470>)
 8009268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800926a:	4a5b      	ldr	r2, [pc, #364]	@ (80093d8 <HAL_RCC_OscConfig+0x470>)
 800926c:	f043 0301 	orr.w	r3, r3, #1
 8009270:	6713      	str	r3, [r2, #112]	@ 0x70
 8009272:	e00b      	b.n	800928c <HAL_RCC_OscConfig+0x324>
 8009274:	4b58      	ldr	r3, [pc, #352]	@ (80093d8 <HAL_RCC_OscConfig+0x470>)
 8009276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009278:	4a57      	ldr	r2, [pc, #348]	@ (80093d8 <HAL_RCC_OscConfig+0x470>)
 800927a:	f023 0301 	bic.w	r3, r3, #1
 800927e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009280:	4b55      	ldr	r3, [pc, #340]	@ (80093d8 <HAL_RCC_OscConfig+0x470>)
 8009282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009284:	4a54      	ldr	r2, [pc, #336]	@ (80093d8 <HAL_RCC_OscConfig+0x470>)
 8009286:	f023 0304 	bic.w	r3, r3, #4
 800928a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d015      	beq.n	80092c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009294:	f7fc f812 	bl	80052bc <HAL_GetTick>
 8009298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800929a:	e00a      	b.n	80092b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800929c:	f7fc f80e 	bl	80052bc <HAL_GetTick>
 80092a0:	4602      	mov	r2, r0
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	1ad3      	subs	r3, r2, r3
 80092a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d901      	bls.n	80092b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80092ae:	2303      	movs	r3, #3
 80092b0:	e0cb      	b.n	800944a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092b2:	4b49      	ldr	r3, [pc, #292]	@ (80093d8 <HAL_RCC_OscConfig+0x470>)
 80092b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092b6:	f003 0302 	and.w	r3, r3, #2
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d0ee      	beq.n	800929c <HAL_RCC_OscConfig+0x334>
 80092be:	e014      	b.n	80092ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80092c0:	f7fb fffc 	bl	80052bc <HAL_GetTick>
 80092c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092c6:	e00a      	b.n	80092de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092c8:	f7fb fff8 	bl	80052bc <HAL_GetTick>
 80092cc:	4602      	mov	r2, r0
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	1ad3      	subs	r3, r2, r3
 80092d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d901      	bls.n	80092de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80092da:	2303      	movs	r3, #3
 80092dc:	e0b5      	b.n	800944a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092de:	4b3e      	ldr	r3, [pc, #248]	@ (80093d8 <HAL_RCC_OscConfig+0x470>)
 80092e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092e2:	f003 0302 	and.w	r3, r3, #2
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d1ee      	bne.n	80092c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80092ea:	7dfb      	ldrb	r3, [r7, #23]
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d105      	bne.n	80092fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80092f0:	4b39      	ldr	r3, [pc, #228]	@ (80093d8 <HAL_RCC_OscConfig+0x470>)
 80092f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092f4:	4a38      	ldr	r2, [pc, #224]	@ (80093d8 <HAL_RCC_OscConfig+0x470>)
 80092f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80092fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	699b      	ldr	r3, [r3, #24]
 8009300:	2b00      	cmp	r3, #0
 8009302:	f000 80a1 	beq.w	8009448 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009306:	4b34      	ldr	r3, [pc, #208]	@ (80093d8 <HAL_RCC_OscConfig+0x470>)
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	f003 030c 	and.w	r3, r3, #12
 800930e:	2b08      	cmp	r3, #8
 8009310:	d05c      	beq.n	80093cc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	699b      	ldr	r3, [r3, #24]
 8009316:	2b02      	cmp	r3, #2
 8009318:	d141      	bne.n	800939e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800931a:	4b31      	ldr	r3, [pc, #196]	@ (80093e0 <HAL_RCC_OscConfig+0x478>)
 800931c:	2200      	movs	r2, #0
 800931e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009320:	f7fb ffcc 	bl	80052bc <HAL_GetTick>
 8009324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009326:	e008      	b.n	800933a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009328:	f7fb ffc8 	bl	80052bc <HAL_GetTick>
 800932c:	4602      	mov	r2, r0
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	2b02      	cmp	r3, #2
 8009334:	d901      	bls.n	800933a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009336:	2303      	movs	r3, #3
 8009338:	e087      	b.n	800944a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800933a:	4b27      	ldr	r3, [pc, #156]	@ (80093d8 <HAL_RCC_OscConfig+0x470>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009342:	2b00      	cmp	r3, #0
 8009344:	d1f0      	bne.n	8009328 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	69da      	ldr	r2, [r3, #28]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6a1b      	ldr	r3, [r3, #32]
 800934e:	431a      	orrs	r2, r3
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009354:	019b      	lsls	r3, r3, #6
 8009356:	431a      	orrs	r2, r3
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800935c:	085b      	lsrs	r3, r3, #1
 800935e:	3b01      	subs	r3, #1
 8009360:	041b      	lsls	r3, r3, #16
 8009362:	431a      	orrs	r2, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009368:	061b      	lsls	r3, r3, #24
 800936a:	491b      	ldr	r1, [pc, #108]	@ (80093d8 <HAL_RCC_OscConfig+0x470>)
 800936c:	4313      	orrs	r3, r2
 800936e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009370:	4b1b      	ldr	r3, [pc, #108]	@ (80093e0 <HAL_RCC_OscConfig+0x478>)
 8009372:	2201      	movs	r2, #1
 8009374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009376:	f7fb ffa1 	bl	80052bc <HAL_GetTick>
 800937a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800937c:	e008      	b.n	8009390 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800937e:	f7fb ff9d 	bl	80052bc <HAL_GetTick>
 8009382:	4602      	mov	r2, r0
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	1ad3      	subs	r3, r2, r3
 8009388:	2b02      	cmp	r3, #2
 800938a:	d901      	bls.n	8009390 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800938c:	2303      	movs	r3, #3
 800938e:	e05c      	b.n	800944a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009390:	4b11      	ldr	r3, [pc, #68]	@ (80093d8 <HAL_RCC_OscConfig+0x470>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009398:	2b00      	cmp	r3, #0
 800939a:	d0f0      	beq.n	800937e <HAL_RCC_OscConfig+0x416>
 800939c:	e054      	b.n	8009448 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800939e:	4b10      	ldr	r3, [pc, #64]	@ (80093e0 <HAL_RCC_OscConfig+0x478>)
 80093a0:	2200      	movs	r2, #0
 80093a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093a4:	f7fb ff8a 	bl	80052bc <HAL_GetTick>
 80093a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093aa:	e008      	b.n	80093be <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093ac:	f7fb ff86 	bl	80052bc <HAL_GetTick>
 80093b0:	4602      	mov	r2, r0
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	1ad3      	subs	r3, r2, r3
 80093b6:	2b02      	cmp	r3, #2
 80093b8:	d901      	bls.n	80093be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80093ba:	2303      	movs	r3, #3
 80093bc:	e045      	b.n	800944a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093be:	4b06      	ldr	r3, [pc, #24]	@ (80093d8 <HAL_RCC_OscConfig+0x470>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d1f0      	bne.n	80093ac <HAL_RCC_OscConfig+0x444>
 80093ca:	e03d      	b.n	8009448 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	699b      	ldr	r3, [r3, #24]
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d107      	bne.n	80093e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80093d4:	2301      	movs	r3, #1
 80093d6:	e038      	b.n	800944a <HAL_RCC_OscConfig+0x4e2>
 80093d8:	40023800 	.word	0x40023800
 80093dc:	40007000 	.word	0x40007000
 80093e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80093e4:	4b1b      	ldr	r3, [pc, #108]	@ (8009454 <HAL_RCC_OscConfig+0x4ec>)
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	699b      	ldr	r3, [r3, #24]
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d028      	beq.n	8009444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d121      	bne.n	8009444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800940a:	429a      	cmp	r2, r3
 800940c:	d11a      	bne.n	8009444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800940e:	68fa      	ldr	r2, [r7, #12]
 8009410:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009414:	4013      	ands	r3, r2
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800941a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800941c:	4293      	cmp	r3, r2
 800941e:	d111      	bne.n	8009444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800942a:	085b      	lsrs	r3, r3, #1
 800942c:	3b01      	subs	r3, #1
 800942e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009430:	429a      	cmp	r2, r3
 8009432:	d107      	bne.n	8009444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800943e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009440:	429a      	cmp	r2, r3
 8009442:	d001      	beq.n	8009448 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	e000      	b.n	800944a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	3718      	adds	r7, #24
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	40023800 	.word	0x40023800

08009458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d101      	bne.n	800946c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009468:	2301      	movs	r3, #1
 800946a:	e0cc      	b.n	8009606 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800946c:	4b68      	ldr	r3, [pc, #416]	@ (8009610 <HAL_RCC_ClockConfig+0x1b8>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f003 030f 	and.w	r3, r3, #15
 8009474:	683a      	ldr	r2, [r7, #0]
 8009476:	429a      	cmp	r2, r3
 8009478:	d90c      	bls.n	8009494 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800947a:	4b65      	ldr	r3, [pc, #404]	@ (8009610 <HAL_RCC_ClockConfig+0x1b8>)
 800947c:	683a      	ldr	r2, [r7, #0]
 800947e:	b2d2      	uxtb	r2, r2
 8009480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009482:	4b63      	ldr	r3, [pc, #396]	@ (8009610 <HAL_RCC_ClockConfig+0x1b8>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f003 030f 	and.w	r3, r3, #15
 800948a:	683a      	ldr	r2, [r7, #0]
 800948c:	429a      	cmp	r2, r3
 800948e:	d001      	beq.n	8009494 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	e0b8      	b.n	8009606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f003 0302 	and.w	r3, r3, #2
 800949c:	2b00      	cmp	r3, #0
 800949e:	d020      	beq.n	80094e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f003 0304 	and.w	r3, r3, #4
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d005      	beq.n	80094b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80094ac:	4b59      	ldr	r3, [pc, #356]	@ (8009614 <HAL_RCC_ClockConfig+0x1bc>)
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	4a58      	ldr	r2, [pc, #352]	@ (8009614 <HAL_RCC_ClockConfig+0x1bc>)
 80094b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80094b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f003 0308 	and.w	r3, r3, #8
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d005      	beq.n	80094d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80094c4:	4b53      	ldr	r3, [pc, #332]	@ (8009614 <HAL_RCC_ClockConfig+0x1bc>)
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	4a52      	ldr	r2, [pc, #328]	@ (8009614 <HAL_RCC_ClockConfig+0x1bc>)
 80094ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80094ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80094d0:	4b50      	ldr	r3, [pc, #320]	@ (8009614 <HAL_RCC_ClockConfig+0x1bc>)
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	494d      	ldr	r1, [pc, #308]	@ (8009614 <HAL_RCC_ClockConfig+0x1bc>)
 80094de:	4313      	orrs	r3, r2
 80094e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f003 0301 	and.w	r3, r3, #1
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d044      	beq.n	8009578 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d107      	bne.n	8009506 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094f6:	4b47      	ldr	r3, [pc, #284]	@ (8009614 <HAL_RCC_ClockConfig+0x1bc>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d119      	bne.n	8009536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	e07f      	b.n	8009606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	2b02      	cmp	r3, #2
 800950c:	d003      	beq.n	8009516 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009512:	2b03      	cmp	r3, #3
 8009514:	d107      	bne.n	8009526 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009516:	4b3f      	ldr	r3, [pc, #252]	@ (8009614 <HAL_RCC_ClockConfig+0x1bc>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800951e:	2b00      	cmp	r3, #0
 8009520:	d109      	bne.n	8009536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	e06f      	b.n	8009606 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009526:	4b3b      	ldr	r3, [pc, #236]	@ (8009614 <HAL_RCC_ClockConfig+0x1bc>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f003 0302 	and.w	r3, r3, #2
 800952e:	2b00      	cmp	r3, #0
 8009530:	d101      	bne.n	8009536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009532:	2301      	movs	r3, #1
 8009534:	e067      	b.n	8009606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009536:	4b37      	ldr	r3, [pc, #220]	@ (8009614 <HAL_RCC_ClockConfig+0x1bc>)
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	f023 0203 	bic.w	r2, r3, #3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	4934      	ldr	r1, [pc, #208]	@ (8009614 <HAL_RCC_ClockConfig+0x1bc>)
 8009544:	4313      	orrs	r3, r2
 8009546:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009548:	f7fb feb8 	bl	80052bc <HAL_GetTick>
 800954c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800954e:	e00a      	b.n	8009566 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009550:	f7fb feb4 	bl	80052bc <HAL_GetTick>
 8009554:	4602      	mov	r2, r0
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	1ad3      	subs	r3, r2, r3
 800955a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800955e:	4293      	cmp	r3, r2
 8009560:	d901      	bls.n	8009566 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009562:	2303      	movs	r3, #3
 8009564:	e04f      	b.n	8009606 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009566:	4b2b      	ldr	r3, [pc, #172]	@ (8009614 <HAL_RCC_ClockConfig+0x1bc>)
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	f003 020c 	and.w	r2, r3, #12
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	429a      	cmp	r2, r3
 8009576:	d1eb      	bne.n	8009550 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009578:	4b25      	ldr	r3, [pc, #148]	@ (8009610 <HAL_RCC_ClockConfig+0x1b8>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f003 030f 	and.w	r3, r3, #15
 8009580:	683a      	ldr	r2, [r7, #0]
 8009582:	429a      	cmp	r2, r3
 8009584:	d20c      	bcs.n	80095a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009586:	4b22      	ldr	r3, [pc, #136]	@ (8009610 <HAL_RCC_ClockConfig+0x1b8>)
 8009588:	683a      	ldr	r2, [r7, #0]
 800958a:	b2d2      	uxtb	r2, r2
 800958c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800958e:	4b20      	ldr	r3, [pc, #128]	@ (8009610 <HAL_RCC_ClockConfig+0x1b8>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f003 030f 	and.w	r3, r3, #15
 8009596:	683a      	ldr	r2, [r7, #0]
 8009598:	429a      	cmp	r2, r3
 800959a:	d001      	beq.n	80095a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	e032      	b.n	8009606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f003 0304 	and.w	r3, r3, #4
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d008      	beq.n	80095be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80095ac:	4b19      	ldr	r3, [pc, #100]	@ (8009614 <HAL_RCC_ClockConfig+0x1bc>)
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	4916      	ldr	r1, [pc, #88]	@ (8009614 <HAL_RCC_ClockConfig+0x1bc>)
 80095ba:	4313      	orrs	r3, r2
 80095bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f003 0308 	and.w	r3, r3, #8
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d009      	beq.n	80095de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80095ca:	4b12      	ldr	r3, [pc, #72]	@ (8009614 <HAL_RCC_ClockConfig+0x1bc>)
 80095cc:	689b      	ldr	r3, [r3, #8]
 80095ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	691b      	ldr	r3, [r3, #16]
 80095d6:	00db      	lsls	r3, r3, #3
 80095d8:	490e      	ldr	r1, [pc, #56]	@ (8009614 <HAL_RCC_ClockConfig+0x1bc>)
 80095da:	4313      	orrs	r3, r2
 80095dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80095de:	f000 f821 	bl	8009624 <HAL_RCC_GetSysClockFreq>
 80095e2:	4602      	mov	r2, r0
 80095e4:	4b0b      	ldr	r3, [pc, #44]	@ (8009614 <HAL_RCC_ClockConfig+0x1bc>)
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	091b      	lsrs	r3, r3, #4
 80095ea:	f003 030f 	and.w	r3, r3, #15
 80095ee:	490a      	ldr	r1, [pc, #40]	@ (8009618 <HAL_RCC_ClockConfig+0x1c0>)
 80095f0:	5ccb      	ldrb	r3, [r1, r3]
 80095f2:	fa22 f303 	lsr.w	r3, r2, r3
 80095f6:	4a09      	ldr	r2, [pc, #36]	@ (800961c <HAL_RCC_ClockConfig+0x1c4>)
 80095f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80095fa:	4b09      	ldr	r3, [pc, #36]	@ (8009620 <HAL_RCC_ClockConfig+0x1c8>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4618      	mov	r0, r3
 8009600:	f7fb fade 	bl	8004bc0 <HAL_InitTick>

  return HAL_OK;
 8009604:	2300      	movs	r3, #0
}
 8009606:	4618      	mov	r0, r3
 8009608:	3710      	adds	r7, #16
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	40023c00 	.word	0x40023c00
 8009614:	40023800 	.word	0x40023800
 8009618:	08010c54 	.word	0x08010c54
 800961c:	2000000c 	.word	0x2000000c
 8009620:	20000010 	.word	0x20000010

08009624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009628:	b094      	sub	sp, #80	@ 0x50
 800962a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800962c:	2300      	movs	r3, #0
 800962e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8009630:	2300      	movs	r3, #0
 8009632:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8009634:	2300      	movs	r3, #0
 8009636:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8009638:	2300      	movs	r3, #0
 800963a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800963c:	4b79      	ldr	r3, [pc, #484]	@ (8009824 <HAL_RCC_GetSysClockFreq+0x200>)
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	f003 030c 	and.w	r3, r3, #12
 8009644:	2b08      	cmp	r3, #8
 8009646:	d00d      	beq.n	8009664 <HAL_RCC_GetSysClockFreq+0x40>
 8009648:	2b08      	cmp	r3, #8
 800964a:	f200 80e1 	bhi.w	8009810 <HAL_RCC_GetSysClockFreq+0x1ec>
 800964e:	2b00      	cmp	r3, #0
 8009650:	d002      	beq.n	8009658 <HAL_RCC_GetSysClockFreq+0x34>
 8009652:	2b04      	cmp	r3, #4
 8009654:	d003      	beq.n	800965e <HAL_RCC_GetSysClockFreq+0x3a>
 8009656:	e0db      	b.n	8009810 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009658:	4b73      	ldr	r3, [pc, #460]	@ (8009828 <HAL_RCC_GetSysClockFreq+0x204>)
 800965a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800965c:	e0db      	b.n	8009816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800965e:	4b73      	ldr	r3, [pc, #460]	@ (800982c <HAL_RCC_GetSysClockFreq+0x208>)
 8009660:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009662:	e0d8      	b.n	8009816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009664:	4b6f      	ldr	r3, [pc, #444]	@ (8009824 <HAL_RCC_GetSysClockFreq+0x200>)
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800966c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800966e:	4b6d      	ldr	r3, [pc, #436]	@ (8009824 <HAL_RCC_GetSysClockFreq+0x200>)
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009676:	2b00      	cmp	r3, #0
 8009678:	d063      	beq.n	8009742 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800967a:	4b6a      	ldr	r3, [pc, #424]	@ (8009824 <HAL_RCC_GetSysClockFreq+0x200>)
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	099b      	lsrs	r3, r3, #6
 8009680:	2200      	movs	r2, #0
 8009682:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009684:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8009686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800968c:	633b      	str	r3, [r7, #48]	@ 0x30
 800968e:	2300      	movs	r3, #0
 8009690:	637b      	str	r3, [r7, #52]	@ 0x34
 8009692:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009696:	4622      	mov	r2, r4
 8009698:	462b      	mov	r3, r5
 800969a:	f04f 0000 	mov.w	r0, #0
 800969e:	f04f 0100 	mov.w	r1, #0
 80096a2:	0159      	lsls	r1, r3, #5
 80096a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80096a8:	0150      	lsls	r0, r2, #5
 80096aa:	4602      	mov	r2, r0
 80096ac:	460b      	mov	r3, r1
 80096ae:	4621      	mov	r1, r4
 80096b0:	1a51      	subs	r1, r2, r1
 80096b2:	6139      	str	r1, [r7, #16]
 80096b4:	4629      	mov	r1, r5
 80096b6:	eb63 0301 	sbc.w	r3, r3, r1
 80096ba:	617b      	str	r3, [r7, #20]
 80096bc:	f04f 0200 	mov.w	r2, #0
 80096c0:	f04f 0300 	mov.w	r3, #0
 80096c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80096c8:	4659      	mov	r1, fp
 80096ca:	018b      	lsls	r3, r1, #6
 80096cc:	4651      	mov	r1, sl
 80096ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80096d2:	4651      	mov	r1, sl
 80096d4:	018a      	lsls	r2, r1, #6
 80096d6:	4651      	mov	r1, sl
 80096d8:	ebb2 0801 	subs.w	r8, r2, r1
 80096dc:	4659      	mov	r1, fp
 80096de:	eb63 0901 	sbc.w	r9, r3, r1
 80096e2:	f04f 0200 	mov.w	r2, #0
 80096e6:	f04f 0300 	mov.w	r3, #0
 80096ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80096ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80096f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80096f6:	4690      	mov	r8, r2
 80096f8:	4699      	mov	r9, r3
 80096fa:	4623      	mov	r3, r4
 80096fc:	eb18 0303 	adds.w	r3, r8, r3
 8009700:	60bb      	str	r3, [r7, #8]
 8009702:	462b      	mov	r3, r5
 8009704:	eb49 0303 	adc.w	r3, r9, r3
 8009708:	60fb      	str	r3, [r7, #12]
 800970a:	f04f 0200 	mov.w	r2, #0
 800970e:	f04f 0300 	mov.w	r3, #0
 8009712:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009716:	4629      	mov	r1, r5
 8009718:	024b      	lsls	r3, r1, #9
 800971a:	4621      	mov	r1, r4
 800971c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009720:	4621      	mov	r1, r4
 8009722:	024a      	lsls	r2, r1, #9
 8009724:	4610      	mov	r0, r2
 8009726:	4619      	mov	r1, r3
 8009728:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800972a:	2200      	movs	r2, #0
 800972c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800972e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009730:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009734:	f7f7 fa98 	bl	8000c68 <__aeabi_uldivmod>
 8009738:	4602      	mov	r2, r0
 800973a:	460b      	mov	r3, r1
 800973c:	4613      	mov	r3, r2
 800973e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009740:	e058      	b.n	80097f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009742:	4b38      	ldr	r3, [pc, #224]	@ (8009824 <HAL_RCC_GetSysClockFreq+0x200>)
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	099b      	lsrs	r3, r3, #6
 8009748:	2200      	movs	r2, #0
 800974a:	4618      	mov	r0, r3
 800974c:	4611      	mov	r1, r2
 800974e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009752:	623b      	str	r3, [r7, #32]
 8009754:	2300      	movs	r3, #0
 8009756:	627b      	str	r3, [r7, #36]	@ 0x24
 8009758:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800975c:	4642      	mov	r2, r8
 800975e:	464b      	mov	r3, r9
 8009760:	f04f 0000 	mov.w	r0, #0
 8009764:	f04f 0100 	mov.w	r1, #0
 8009768:	0159      	lsls	r1, r3, #5
 800976a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800976e:	0150      	lsls	r0, r2, #5
 8009770:	4602      	mov	r2, r0
 8009772:	460b      	mov	r3, r1
 8009774:	4641      	mov	r1, r8
 8009776:	ebb2 0a01 	subs.w	sl, r2, r1
 800977a:	4649      	mov	r1, r9
 800977c:	eb63 0b01 	sbc.w	fp, r3, r1
 8009780:	f04f 0200 	mov.w	r2, #0
 8009784:	f04f 0300 	mov.w	r3, #0
 8009788:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800978c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009790:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009794:	ebb2 040a 	subs.w	r4, r2, sl
 8009798:	eb63 050b 	sbc.w	r5, r3, fp
 800979c:	f04f 0200 	mov.w	r2, #0
 80097a0:	f04f 0300 	mov.w	r3, #0
 80097a4:	00eb      	lsls	r3, r5, #3
 80097a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80097aa:	00e2      	lsls	r2, r4, #3
 80097ac:	4614      	mov	r4, r2
 80097ae:	461d      	mov	r5, r3
 80097b0:	4643      	mov	r3, r8
 80097b2:	18e3      	adds	r3, r4, r3
 80097b4:	603b      	str	r3, [r7, #0]
 80097b6:	464b      	mov	r3, r9
 80097b8:	eb45 0303 	adc.w	r3, r5, r3
 80097bc:	607b      	str	r3, [r7, #4]
 80097be:	f04f 0200 	mov.w	r2, #0
 80097c2:	f04f 0300 	mov.w	r3, #0
 80097c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80097ca:	4629      	mov	r1, r5
 80097cc:	028b      	lsls	r3, r1, #10
 80097ce:	4621      	mov	r1, r4
 80097d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80097d4:	4621      	mov	r1, r4
 80097d6:	028a      	lsls	r2, r1, #10
 80097d8:	4610      	mov	r0, r2
 80097da:	4619      	mov	r1, r3
 80097dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097de:	2200      	movs	r2, #0
 80097e0:	61bb      	str	r3, [r7, #24]
 80097e2:	61fa      	str	r2, [r7, #28]
 80097e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80097e8:	f7f7 fa3e 	bl	8000c68 <__aeabi_uldivmod>
 80097ec:	4602      	mov	r2, r0
 80097ee:	460b      	mov	r3, r1
 80097f0:	4613      	mov	r3, r2
 80097f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80097f4:	4b0b      	ldr	r3, [pc, #44]	@ (8009824 <HAL_RCC_GetSysClockFreq+0x200>)
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	0c1b      	lsrs	r3, r3, #16
 80097fa:	f003 0303 	and.w	r3, r3, #3
 80097fe:	3301      	adds	r3, #1
 8009800:	005b      	lsls	r3, r3, #1
 8009802:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8009804:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009806:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009808:	fbb2 f3f3 	udiv	r3, r2, r3
 800980c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800980e:	e002      	b.n	8009816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009810:	4b05      	ldr	r3, [pc, #20]	@ (8009828 <HAL_RCC_GetSysClockFreq+0x204>)
 8009812:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009816:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8009818:	4618      	mov	r0, r3
 800981a:	3750      	adds	r7, #80	@ 0x50
 800981c:	46bd      	mov	sp, r7
 800981e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009822:	bf00      	nop
 8009824:	40023800 	.word	0x40023800
 8009828:	00f42400 	.word	0x00f42400
 800982c:	007a1200 	.word	0x007a1200

08009830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009830:	b480      	push	{r7}
 8009832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009834:	4b03      	ldr	r3, [pc, #12]	@ (8009844 <HAL_RCC_GetHCLKFreq+0x14>)
 8009836:	681b      	ldr	r3, [r3, #0]
}
 8009838:	4618      	mov	r0, r3
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop
 8009844:	2000000c 	.word	0x2000000c

08009848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800984c:	f7ff fff0 	bl	8009830 <HAL_RCC_GetHCLKFreq>
 8009850:	4602      	mov	r2, r0
 8009852:	4b05      	ldr	r3, [pc, #20]	@ (8009868 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	0a9b      	lsrs	r3, r3, #10
 8009858:	f003 0307 	and.w	r3, r3, #7
 800985c:	4903      	ldr	r1, [pc, #12]	@ (800986c <HAL_RCC_GetPCLK1Freq+0x24>)
 800985e:	5ccb      	ldrb	r3, [r1, r3]
 8009860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009864:	4618      	mov	r0, r3
 8009866:	bd80      	pop	{r7, pc}
 8009868:	40023800 	.word	0x40023800
 800986c:	08010c64 	.word	0x08010c64

08009870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009874:	f7ff ffdc 	bl	8009830 <HAL_RCC_GetHCLKFreq>
 8009878:	4602      	mov	r2, r0
 800987a:	4b05      	ldr	r3, [pc, #20]	@ (8009890 <HAL_RCC_GetPCLK2Freq+0x20>)
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	0b5b      	lsrs	r3, r3, #13
 8009880:	f003 0307 	and.w	r3, r3, #7
 8009884:	4903      	ldr	r1, [pc, #12]	@ (8009894 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009886:	5ccb      	ldrb	r3, [r1, r3]
 8009888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800988c:	4618      	mov	r0, r3
 800988e:	bd80      	pop	{r7, pc}
 8009890:	40023800 	.word	0x40023800
 8009894:	08010c64 	.word	0x08010c64

08009898 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	220f      	movs	r2, #15
 80098a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80098a8:	4b12      	ldr	r3, [pc, #72]	@ (80098f4 <HAL_RCC_GetClockConfig+0x5c>)
 80098aa:	689b      	ldr	r3, [r3, #8]
 80098ac:	f003 0203 	and.w	r2, r3, #3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80098b4:	4b0f      	ldr	r3, [pc, #60]	@ (80098f4 <HAL_RCC_GetClockConfig+0x5c>)
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80098c0:	4b0c      	ldr	r3, [pc, #48]	@ (80098f4 <HAL_RCC_GetClockConfig+0x5c>)
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80098cc:	4b09      	ldr	r3, [pc, #36]	@ (80098f4 <HAL_RCC_GetClockConfig+0x5c>)
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	08db      	lsrs	r3, r3, #3
 80098d2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80098da:	4b07      	ldr	r3, [pc, #28]	@ (80098f8 <HAL_RCC_GetClockConfig+0x60>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f003 020f 	and.w	r2, r3, #15
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	601a      	str	r2, [r3, #0]
}
 80098e6:	bf00      	nop
 80098e8:	370c      	adds	r7, #12
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr
 80098f2:	bf00      	nop
 80098f4:	40023800 	.word	0x40023800
 80098f8:	40023c00 	.word	0x40023c00

080098fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b086      	sub	sp, #24
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009904:	2300      	movs	r3, #0
 8009906:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009908:	2300      	movs	r3, #0
 800990a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f003 0301 	and.w	r3, r3, #1
 8009914:	2b00      	cmp	r3, #0
 8009916:	d10b      	bne.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009920:	2b00      	cmp	r3, #0
 8009922:	d105      	bne.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800992c:	2b00      	cmp	r3, #0
 800992e:	d075      	beq.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009930:	4b91      	ldr	r3, [pc, #580]	@ (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8009932:	2200      	movs	r2, #0
 8009934:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009936:	f7fb fcc1 	bl	80052bc <HAL_GetTick>
 800993a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800993c:	e008      	b.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800993e:	f7fb fcbd 	bl	80052bc <HAL_GetTick>
 8009942:	4602      	mov	r2, r0
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	1ad3      	subs	r3, r2, r3
 8009948:	2b02      	cmp	r3, #2
 800994a:	d901      	bls.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800994c:	2303      	movs	r3, #3
 800994e:	e189      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009950:	4b8a      	ldr	r3, [pc, #552]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009958:	2b00      	cmp	r3, #0
 800995a:	d1f0      	bne.n	800993e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f003 0301 	and.w	r3, r3, #1
 8009964:	2b00      	cmp	r3, #0
 8009966:	d009      	beq.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	019a      	lsls	r2, r3, #6
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	071b      	lsls	r3, r3, #28
 8009974:	4981      	ldr	r1, [pc, #516]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009976:	4313      	orrs	r3, r2
 8009978:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f003 0302 	and.w	r3, r3, #2
 8009984:	2b00      	cmp	r3, #0
 8009986:	d01f      	beq.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009988:	4b7c      	ldr	r3, [pc, #496]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800998a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800998e:	0f1b      	lsrs	r3, r3, #28
 8009990:	f003 0307 	and.w	r3, r3, #7
 8009994:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	019a      	lsls	r2, r3, #6
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	061b      	lsls	r3, r3, #24
 80099a2:	431a      	orrs	r2, r3
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	071b      	lsls	r3, r3, #28
 80099a8:	4974      	ldr	r1, [pc, #464]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099aa:	4313      	orrs	r3, r2
 80099ac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80099b0:	4b72      	ldr	r3, [pc, #456]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099b6:	f023 021f 	bic.w	r2, r3, #31
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	69db      	ldr	r3, [r3, #28]
 80099be:	3b01      	subs	r3, #1
 80099c0:	496e      	ldr	r1, [pc, #440]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099c2:	4313      	orrs	r3, r2
 80099c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d00d      	beq.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	019a      	lsls	r2, r3, #6
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	061b      	lsls	r3, r3, #24
 80099e0:	431a      	orrs	r2, r3
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	071b      	lsls	r3, r3, #28
 80099e8:	4964      	ldr	r1, [pc, #400]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099ea:	4313      	orrs	r3, r2
 80099ec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80099f0:	4b61      	ldr	r3, [pc, #388]	@ (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80099f2:	2201      	movs	r2, #1
 80099f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80099f6:	f7fb fc61 	bl	80052bc <HAL_GetTick>
 80099fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80099fc:	e008      	b.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80099fe:	f7fb fc5d 	bl	80052bc <HAL_GetTick>
 8009a02:	4602      	mov	r2, r0
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	1ad3      	subs	r3, r2, r3
 8009a08:	2b02      	cmp	r3, #2
 8009a0a:	d901      	bls.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009a0c:	2303      	movs	r3, #3
 8009a0e:	e129      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009a10:	4b5a      	ldr	r3, [pc, #360]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d0f0      	beq.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f003 0304 	and.w	r3, r3, #4
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d105      	bne.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d079      	beq.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009a34:	4b52      	ldr	r3, [pc, #328]	@ (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009a36:	2200      	movs	r2, #0
 8009a38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009a3a:	f7fb fc3f 	bl	80052bc <HAL_GetTick>
 8009a3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009a40:	e008      	b.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009a42:	f7fb fc3b 	bl	80052bc <HAL_GetTick>
 8009a46:	4602      	mov	r2, r0
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	1ad3      	subs	r3, r2, r3
 8009a4c:	2b02      	cmp	r3, #2
 8009a4e:	d901      	bls.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009a50:	2303      	movs	r3, #3
 8009a52:	e107      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009a54:	4b49      	ldr	r3, [pc, #292]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a60:	d0ef      	beq.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f003 0304 	and.w	r3, r3, #4
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d020      	beq.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009a6e:	4b43      	ldr	r3, [pc, #268]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a74:	0f1b      	lsrs	r3, r3, #28
 8009a76:	f003 0307 	and.w	r3, r3, #7
 8009a7a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	691b      	ldr	r3, [r3, #16]
 8009a80:	019a      	lsls	r2, r3, #6
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	695b      	ldr	r3, [r3, #20]
 8009a86:	061b      	lsls	r3, r3, #24
 8009a88:	431a      	orrs	r2, r3
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	071b      	lsls	r3, r3, #28
 8009a8e:	493b      	ldr	r1, [pc, #236]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a90:	4313      	orrs	r3, r2
 8009a92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009a96:	4b39      	ldr	r3, [pc, #228]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a9c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6a1b      	ldr	r3, [r3, #32]
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	021b      	lsls	r3, r3, #8
 8009aa8:	4934      	ldr	r1, [pc, #208]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f003 0308 	and.w	r3, r3, #8
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d01e      	beq.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009abc:	4b2f      	ldr	r3, [pc, #188]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ac2:	0e1b      	lsrs	r3, r3, #24
 8009ac4:	f003 030f 	and.w	r3, r3, #15
 8009ac8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	691b      	ldr	r3, [r3, #16]
 8009ace:	019a      	lsls	r2, r3, #6
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	061b      	lsls	r3, r3, #24
 8009ad4:	431a      	orrs	r2, r3
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	699b      	ldr	r3, [r3, #24]
 8009ada:	071b      	lsls	r3, r3, #28
 8009adc:	4927      	ldr	r1, [pc, #156]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009ae4:	4b25      	ldr	r3, [pc, #148]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009ae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009aea:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009af2:	4922      	ldr	r1, [pc, #136]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009af4:	4313      	orrs	r3, r2
 8009af6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009afa:	4b21      	ldr	r3, [pc, #132]	@ (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009afc:	2201      	movs	r2, #1
 8009afe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009b00:	f7fb fbdc 	bl	80052bc <HAL_GetTick>
 8009b04:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009b06:	e008      	b.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009b08:	f7fb fbd8 	bl	80052bc <HAL_GetTick>
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	1ad3      	subs	r3, r2, r3
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	d901      	bls.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009b16:	2303      	movs	r3, #3
 8009b18:	e0a4      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009b1a:	4b18      	ldr	r3, [pc, #96]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b26:	d1ef      	bne.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f003 0320 	and.w	r3, r3, #32
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	f000 808b 	beq.w	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009b36:	2300      	movs	r3, #0
 8009b38:	60fb      	str	r3, [r7, #12]
 8009b3a:	4b10      	ldr	r3, [pc, #64]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b3e:	4a0f      	ldr	r2, [pc, #60]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b44:	6413      	str	r3, [r2, #64]	@ 0x40
 8009b46:	4b0d      	ldr	r3, [pc, #52]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b4e:	60fb      	str	r3, [r7, #12]
 8009b50:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009b52:	4b0c      	ldr	r3, [pc, #48]	@ (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a0b      	ldr	r2, [pc, #44]	@ (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009b58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b5c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009b5e:	f7fb fbad 	bl	80052bc <HAL_GetTick>
 8009b62:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8009b64:	e010      	b.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b66:	f7fb fba9 	bl	80052bc <HAL_GetTick>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	1ad3      	subs	r3, r2, r3
 8009b70:	2b02      	cmp	r3, #2
 8009b72:	d909      	bls.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8009b74:	2303      	movs	r3, #3
 8009b76:	e075      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8009b78:	42470068 	.word	0x42470068
 8009b7c:	40023800 	.word	0x40023800
 8009b80:	42470070 	.word	0x42470070
 8009b84:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8009b88:	4b38      	ldr	r3, [pc, #224]	@ (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d0e8      	beq.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009b94:	4b36      	ldr	r3, [pc, #216]	@ (8009c70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b9c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d02f      	beq.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ba8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009bac:	693a      	ldr	r2, [r7, #16]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d028      	beq.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009bb2:	4b2f      	ldr	r3, [pc, #188]	@ (8009c70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009bba:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009bbc:	4b2d      	ldr	r3, [pc, #180]	@ (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009bc2:	4b2c      	ldr	r3, [pc, #176]	@ (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009bc8:	4a29      	ldr	r2, [pc, #164]	@ (8009c70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009bce:	4b28      	ldr	r3, [pc, #160]	@ (8009c70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bd2:	f003 0301 	and.w	r3, r3, #1
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d114      	bne.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009bda:	f7fb fb6f 	bl	80052bc <HAL_GetTick>
 8009bde:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009be0:	e00a      	b.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009be2:	f7fb fb6b 	bl	80052bc <HAL_GetTick>
 8009be6:	4602      	mov	r2, r0
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	1ad3      	subs	r3, r2, r3
 8009bec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d901      	bls.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8009bf4:	2303      	movs	r3, #3
 8009bf6:	e035      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8009c70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bfc:	f003 0302 	and.w	r3, r3, #2
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d0ee      	beq.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c10:	d10d      	bne.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8009c12:	4b17      	ldr	r3, [pc, #92]	@ (8009c70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c1e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009c22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c26:	4912      	ldr	r1, [pc, #72]	@ (8009c70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	608b      	str	r3, [r1, #8]
 8009c2c:	e005      	b.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8009c2e:	4b10      	ldr	r3, [pc, #64]	@ (8009c70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	4a0f      	ldr	r2, [pc, #60]	@ (8009c70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009c34:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8009c38:	6093      	str	r3, [r2, #8]
 8009c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009c70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009c3c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c46:	490a      	ldr	r1, [pc, #40]	@ (8009c70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f003 0310 	and.w	r3, r3, #16
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d004      	beq.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8009c5e:	4b06      	ldr	r3, [pc, #24]	@ (8009c78 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8009c60:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8009c62:	2300      	movs	r3, #0
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3718      	adds	r7, #24
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	40007000 	.word	0x40007000
 8009c70:	40023800 	.word	0x40023800
 8009c74:	42470e40 	.word	0x42470e40
 8009c78:	424711e0 	.word	0x424711e0

08009c7c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d101      	bne.n	8009c90 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	e025      	b.n	8009cdc <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d106      	bne.n	8009caa <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f7f7 fef1 	bl	8001a8c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2202      	movs	r2, #2
 8009cae:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	3304      	adds	r3, #4
 8009cba:	4619      	mov	r1, r3
 8009cbc:	4610      	mov	r0, r2
 8009cbe:	f001 ffdb 	bl	800bc78 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6818      	ldr	r0, [r3, #0]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	461a      	mov	r2, r3
 8009ccc:	6839      	ldr	r1, [r7, #0]
 8009cce:	f002 f830 	bl	800bd32 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009cda:	2300      	movs	r3, #0
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3708      	adds	r7, #8
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b082      	sub	sp, #8
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d101      	bne.n	8009cf6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	e07b      	b.n	8009dee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d108      	bne.n	8009d10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009d06:	d009      	beq.n	8009d1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	61da      	str	r2, [r3, #28]
 8009d0e:	e005      	b.n	8009d1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2200      	movs	r2, #0
 8009d14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d106      	bne.n	8009d3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2200      	movs	r2, #0
 8009d32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f7fa fe9c 	bl	8004a74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2202      	movs	r2, #2
 8009d40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009d52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009d64:	431a      	orrs	r2, r3
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	68db      	ldr	r3, [r3, #12]
 8009d6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d6e:	431a      	orrs	r2, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	691b      	ldr	r3, [r3, #16]
 8009d74:	f003 0302 	and.w	r3, r3, #2
 8009d78:	431a      	orrs	r2, r3
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	695b      	ldr	r3, [r3, #20]
 8009d7e:	f003 0301 	and.w	r3, r3, #1
 8009d82:	431a      	orrs	r2, r3
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	699b      	ldr	r3, [r3, #24]
 8009d88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d8c:	431a      	orrs	r2, r3
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	69db      	ldr	r3, [r3, #28]
 8009d92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009d96:	431a      	orrs	r2, r3
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6a1b      	ldr	r3, [r3, #32]
 8009d9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009da0:	ea42 0103 	orr.w	r1, r2, r3
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009da8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	430a      	orrs	r2, r1
 8009db2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	699b      	ldr	r3, [r3, #24]
 8009db8:	0c1b      	lsrs	r3, r3, #16
 8009dba:	f003 0104 	and.w	r1, r3, #4
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dc2:	f003 0210 	and.w	r2, r3, #16
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	430a      	orrs	r2, r1
 8009dcc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	69da      	ldr	r2, [r3, #28]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009ddc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2201      	movs	r2, #1
 8009de8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8009dec:	2300      	movs	r3, #0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3708      	adds	r7, #8
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}

08009df6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009df6:	b580      	push	{r7, lr}
 8009df8:	b088      	sub	sp, #32
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	60f8      	str	r0, [r7, #12]
 8009dfe:	60b9      	str	r1, [r7, #8]
 8009e00:	603b      	str	r3, [r7, #0]
 8009e02:	4613      	mov	r3, r2
 8009e04:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009e06:	f7fb fa59 	bl	80052bc <HAL_GetTick>
 8009e0a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8009e0c:	88fb      	ldrh	r3, [r7, #6]
 8009e0e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d001      	beq.n	8009e20 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8009e1c:	2302      	movs	r3, #2
 8009e1e:	e12a      	b.n	800a076 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d002      	beq.n	8009e2c <HAL_SPI_Transmit+0x36>
 8009e26:	88fb      	ldrh	r3, [r7, #6]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d101      	bne.n	8009e30 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e122      	b.n	800a076 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d101      	bne.n	8009e3e <HAL_SPI_Transmit+0x48>
 8009e3a:	2302      	movs	r3, #2
 8009e3c:	e11b      	b.n	800a076 <HAL_SPI_Transmit+0x280>
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2201      	movs	r2, #1
 8009e42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2203      	movs	r2, #3
 8009e4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2200      	movs	r2, #0
 8009e52:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	68ba      	ldr	r2, [r7, #8]
 8009e58:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	88fa      	ldrh	r2, [r7, #6]
 8009e5e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	88fa      	ldrh	r2, [r7, #6]
 8009e64:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2200      	movs	r2, #0
 8009e76:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2200      	movs	r2, #0
 8009e82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	689b      	ldr	r3, [r3, #8]
 8009e88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e8c:	d10f      	bne.n	8009eae <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009e9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009eac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009eb8:	2b40      	cmp	r3, #64	@ 0x40
 8009eba:	d007      	beq.n	8009ecc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009eca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ed4:	d152      	bne.n	8009f7c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d002      	beq.n	8009ee4 <HAL_SPI_Transmit+0xee>
 8009ede:	8b7b      	ldrh	r3, [r7, #26]
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d145      	bne.n	8009f70 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ee8:	881a      	ldrh	r2, [r3, #0]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ef4:	1c9a      	adds	r2, r3, #2
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	3b01      	subs	r3, #1
 8009f02:	b29a      	uxth	r2, r3
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009f08:	e032      	b.n	8009f70 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	f003 0302 	and.w	r3, r3, #2
 8009f14:	2b02      	cmp	r3, #2
 8009f16:	d112      	bne.n	8009f3e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f1c:	881a      	ldrh	r2, [r3, #0]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f28:	1c9a      	adds	r2, r3, #2
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	3b01      	subs	r3, #1
 8009f36:	b29a      	uxth	r2, r3
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009f3c:	e018      	b.n	8009f70 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f3e:	f7fb f9bd 	bl	80052bc <HAL_GetTick>
 8009f42:	4602      	mov	r2, r0
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	1ad3      	subs	r3, r2, r3
 8009f48:	683a      	ldr	r2, [r7, #0]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d803      	bhi.n	8009f56 <HAL_SPI_Transmit+0x160>
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f54:	d102      	bne.n	8009f5c <HAL_SPI_Transmit+0x166>
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d109      	bne.n	8009f70 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2200      	movs	r2, #0
 8009f68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009f6c:	2303      	movs	r3, #3
 8009f6e:	e082      	b.n	800a076 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d1c7      	bne.n	8009f0a <HAL_SPI_Transmit+0x114>
 8009f7a:	e053      	b.n	800a024 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d002      	beq.n	8009f8a <HAL_SPI_Transmit+0x194>
 8009f84:	8b7b      	ldrh	r3, [r7, #26]
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d147      	bne.n	800a01a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	330c      	adds	r3, #12
 8009f94:	7812      	ldrb	r2, [r2, #0]
 8009f96:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f9c:	1c5a      	adds	r2, r3, #1
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	3b01      	subs	r3, #1
 8009faa:	b29a      	uxth	r2, r3
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009fb0:	e033      	b.n	800a01a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	f003 0302 	and.w	r3, r3, #2
 8009fbc:	2b02      	cmp	r3, #2
 8009fbe:	d113      	bne.n	8009fe8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	330c      	adds	r3, #12
 8009fca:	7812      	ldrb	r2, [r2, #0]
 8009fcc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fd2:	1c5a      	adds	r2, r3, #1
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	3b01      	subs	r3, #1
 8009fe0:	b29a      	uxth	r2, r3
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009fe6:	e018      	b.n	800a01a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009fe8:	f7fb f968 	bl	80052bc <HAL_GetTick>
 8009fec:	4602      	mov	r2, r0
 8009fee:	69fb      	ldr	r3, [r7, #28]
 8009ff0:	1ad3      	subs	r3, r2, r3
 8009ff2:	683a      	ldr	r2, [r7, #0]
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d803      	bhi.n	800a000 <HAL_SPI_Transmit+0x20a>
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ffe:	d102      	bne.n	800a006 <HAL_SPI_Transmit+0x210>
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d109      	bne.n	800a01a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2201      	movs	r2, #1
 800a00a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2200      	movs	r2, #0
 800a012:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800a016:	2303      	movs	r3, #3
 800a018:	e02d      	b.n	800a076 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a01e:	b29b      	uxth	r3, r3
 800a020:	2b00      	cmp	r3, #0
 800a022:	d1c6      	bne.n	8009fb2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a024:	69fa      	ldr	r2, [r7, #28]
 800a026:	6839      	ldr	r1, [r7, #0]
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f000 fd21 	bl	800aa70 <SPI_EndRxTxTransaction>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d002      	beq.n	800a03a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2220      	movs	r2, #32
 800a038:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d10a      	bne.n	800a058 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a042:	2300      	movs	r3, #0
 800a044:	617b      	str	r3, [r7, #20]
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	68db      	ldr	r3, [r3, #12]
 800a04c:	617b      	str	r3, [r7, #20]
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	689b      	ldr	r3, [r3, #8]
 800a054:	617b      	str	r3, [r7, #20]
 800a056:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2201      	movs	r2, #1
 800a05c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2200      	movs	r2, #0
 800a064:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d001      	beq.n	800a074 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800a070:	2301      	movs	r3, #1
 800a072:	e000      	b.n	800a076 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800a074:	2300      	movs	r3, #0
  }
}
 800a076:	4618      	mov	r0, r3
 800a078:	3720      	adds	r7, #32
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b088      	sub	sp, #32
 800a082:	af02      	add	r7, sp, #8
 800a084:	60f8      	str	r0, [r7, #12]
 800a086:	60b9      	str	r1, [r7, #8]
 800a088:	603b      	str	r3, [r7, #0]
 800a08a:	4613      	mov	r3, r2
 800a08c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a094:	b2db      	uxtb	r3, r3
 800a096:	2b01      	cmp	r3, #1
 800a098:	d001      	beq.n	800a09e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800a09a:	2302      	movs	r3, #2
 800a09c:	e104      	b.n	800a2a8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a0a6:	d112      	bne.n	800a0ce <HAL_SPI_Receive+0x50>
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	689b      	ldr	r3, [r3, #8]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d10e      	bne.n	800a0ce <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2204      	movs	r2, #4
 800a0b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a0b8:	88fa      	ldrh	r2, [r7, #6]
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	9300      	str	r3, [sp, #0]
 800a0be:	4613      	mov	r3, r2
 800a0c0:	68ba      	ldr	r2, [r7, #8]
 800a0c2:	68b9      	ldr	r1, [r7, #8]
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f000 f8f3 	bl	800a2b0 <HAL_SPI_TransmitReceive>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	e0ec      	b.n	800a2a8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a0ce:	f7fb f8f5 	bl	80052bc <HAL_GetTick>
 800a0d2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d002      	beq.n	800a0e0 <HAL_SPI_Receive+0x62>
 800a0da:	88fb      	ldrh	r3, [r7, #6]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d101      	bne.n	800a0e4 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e0e1      	b.n	800a2a8 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d101      	bne.n	800a0f2 <HAL_SPI_Receive+0x74>
 800a0ee:	2302      	movs	r3, #2
 800a0f0:	e0da      	b.n	800a2a8 <HAL_SPI_Receive+0x22a>
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2204      	movs	r2, #4
 800a0fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2200      	movs	r2, #0
 800a106:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	68ba      	ldr	r2, [r7, #8]
 800a10c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	88fa      	ldrh	r2, [r7, #6]
 800a112:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	88fa      	ldrh	r2, [r7, #6]
 800a118:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2200      	movs	r2, #0
 800a11e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2200      	movs	r2, #0
 800a124:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2200      	movs	r2, #0
 800a12a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2200      	movs	r2, #0
 800a130:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2200      	movs	r2, #0
 800a136:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a140:	d10f      	bne.n	800a162 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a150:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a160:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a16c:	2b40      	cmp	r3, #64	@ 0x40
 800a16e:	d007      	beq.n	800a180 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a17e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	68db      	ldr	r3, [r3, #12]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d170      	bne.n	800a26a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a188:	e035      	b.n	800a1f6 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	689b      	ldr	r3, [r3, #8]
 800a190:	f003 0301 	and.w	r3, r3, #1
 800a194:	2b01      	cmp	r3, #1
 800a196:	d115      	bne.n	800a1c4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f103 020c 	add.w	r2, r3, #12
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1a4:	7812      	ldrb	r2, [r2, #0]
 800a1a6:	b2d2      	uxtb	r2, r2
 800a1a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1ae:	1c5a      	adds	r2, r3, #1
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	3b01      	subs	r3, #1
 800a1bc:	b29a      	uxth	r2, r3
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a1c2:	e018      	b.n	800a1f6 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a1c4:	f7fb f87a 	bl	80052bc <HAL_GetTick>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	1ad3      	subs	r3, r2, r3
 800a1ce:	683a      	ldr	r2, [r7, #0]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d803      	bhi.n	800a1dc <HAL_SPI_Receive+0x15e>
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1da:	d102      	bne.n	800a1e2 <HAL_SPI_Receive+0x164>
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d109      	bne.n	800a1f6 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800a1f2:	2303      	movs	r3, #3
 800a1f4:	e058      	b.n	800a2a8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d1c4      	bne.n	800a18a <HAL_SPI_Receive+0x10c>
 800a200:	e038      	b.n	800a274 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	689b      	ldr	r3, [r3, #8]
 800a208:	f003 0301 	and.w	r3, r3, #1
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d113      	bne.n	800a238 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	68da      	ldr	r2, [r3, #12]
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a21a:	b292      	uxth	r2, r2
 800a21c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a222:	1c9a      	adds	r2, r3, #2
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	3b01      	subs	r3, #1
 800a230:	b29a      	uxth	r2, r3
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a236:	e018      	b.n	800a26a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a238:	f7fb f840 	bl	80052bc <HAL_GetTick>
 800a23c:	4602      	mov	r2, r0
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	1ad3      	subs	r3, r2, r3
 800a242:	683a      	ldr	r2, [r7, #0]
 800a244:	429a      	cmp	r2, r3
 800a246:	d803      	bhi.n	800a250 <HAL_SPI_Receive+0x1d2>
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a24e:	d102      	bne.n	800a256 <HAL_SPI_Receive+0x1d8>
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d109      	bne.n	800a26a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2201      	movs	r2, #1
 800a25a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2200      	movs	r2, #0
 800a262:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800a266:	2303      	movs	r3, #3
 800a268:	e01e      	b.n	800a2a8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a26e:	b29b      	uxth	r3, r3
 800a270:	2b00      	cmp	r3, #0
 800a272:	d1c6      	bne.n	800a202 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a274:	697a      	ldr	r2, [r7, #20]
 800a276:	6839      	ldr	r1, [r7, #0]
 800a278:	68f8      	ldr	r0, [r7, #12]
 800a27a:	f000 fb93 	bl	800a9a4 <SPI_EndRxTransaction>
 800a27e:	4603      	mov	r3, r0
 800a280:	2b00      	cmp	r3, #0
 800a282:	d002      	beq.n	800a28a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2220      	movs	r2, #32
 800a288:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2201      	movs	r2, #1
 800a28e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2200      	movs	r2, #0
 800a296:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d001      	beq.n	800a2a6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e000      	b.n	800a2a8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800a2a6:	2300      	movs	r3, #0
  }
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3718      	adds	r7, #24
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b08a      	sub	sp, #40	@ 0x28
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	607a      	str	r2, [r7, #4]
 800a2bc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a2c2:	f7fa fffb 	bl	80052bc <HAL_GetTick>
 800a2c6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a2ce:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800a2d6:	887b      	ldrh	r3, [r7, #2]
 800a2d8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a2da:	7ffb      	ldrb	r3, [r7, #31]
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d00c      	beq.n	800a2fa <HAL_SPI_TransmitReceive+0x4a>
 800a2e0:	69bb      	ldr	r3, [r7, #24]
 800a2e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a2e6:	d106      	bne.n	800a2f6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	689b      	ldr	r3, [r3, #8]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d102      	bne.n	800a2f6 <HAL_SPI_TransmitReceive+0x46>
 800a2f0:	7ffb      	ldrb	r3, [r7, #31]
 800a2f2:	2b04      	cmp	r3, #4
 800a2f4:	d001      	beq.n	800a2fa <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800a2f6:	2302      	movs	r3, #2
 800a2f8:	e17f      	b.n	800a5fa <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d005      	beq.n	800a30c <HAL_SPI_TransmitReceive+0x5c>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d002      	beq.n	800a30c <HAL_SPI_TransmitReceive+0x5c>
 800a306:	887b      	ldrh	r3, [r7, #2]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d101      	bne.n	800a310 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800a30c:	2301      	movs	r3, #1
 800a30e:	e174      	b.n	800a5fa <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a316:	2b01      	cmp	r3, #1
 800a318:	d101      	bne.n	800a31e <HAL_SPI_TransmitReceive+0x6e>
 800a31a:	2302      	movs	r3, #2
 800a31c:	e16d      	b.n	800a5fa <HAL_SPI_TransmitReceive+0x34a>
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2201      	movs	r2, #1
 800a322:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	2b04      	cmp	r3, #4
 800a330:	d003      	beq.n	800a33a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2205      	movs	r2, #5
 800a336:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2200      	movs	r2, #0
 800a33e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	887a      	ldrh	r2, [r7, #2]
 800a34a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	887a      	ldrh	r2, [r7, #2]
 800a350:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	68ba      	ldr	r2, [r7, #8]
 800a356:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	887a      	ldrh	r2, [r7, #2]
 800a35c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	887a      	ldrh	r2, [r7, #2]
 800a362:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2200      	movs	r2, #0
 800a368:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2200      	movs	r2, #0
 800a36e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a37a:	2b40      	cmp	r3, #64	@ 0x40
 800a37c:	d007      	beq.n	800a38e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a38c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	68db      	ldr	r3, [r3, #12]
 800a392:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a396:	d17e      	bne.n	800a496 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d002      	beq.n	800a3a6 <HAL_SPI_TransmitReceive+0xf6>
 800a3a0:	8afb      	ldrh	r3, [r7, #22]
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d16c      	bne.n	800a480 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3aa:	881a      	ldrh	r2, [r3, #0]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3b6:	1c9a      	adds	r2, r3, #2
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	3b01      	subs	r3, #1
 800a3c4:	b29a      	uxth	r2, r3
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a3ca:	e059      	b.n	800a480 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	689b      	ldr	r3, [r3, #8]
 800a3d2:	f003 0302 	and.w	r3, r3, #2
 800a3d6:	2b02      	cmp	r3, #2
 800a3d8:	d11b      	bne.n	800a412 <HAL_SPI_TransmitReceive+0x162>
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d016      	beq.n	800a412 <HAL_SPI_TransmitReceive+0x162>
 800a3e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d113      	bne.n	800a412 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3ee:	881a      	ldrh	r2, [r3, #0]
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3fa:	1c9a      	adds	r2, r3, #2
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a404:	b29b      	uxth	r3, r3
 800a406:	3b01      	subs	r3, #1
 800a408:	b29a      	uxth	r2, r3
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a40e:	2300      	movs	r3, #0
 800a410:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	689b      	ldr	r3, [r3, #8]
 800a418:	f003 0301 	and.w	r3, r3, #1
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d119      	bne.n	800a454 <HAL_SPI_TransmitReceive+0x1a4>
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a424:	b29b      	uxth	r3, r3
 800a426:	2b00      	cmp	r3, #0
 800a428:	d014      	beq.n	800a454 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	68da      	ldr	r2, [r3, #12]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a434:	b292      	uxth	r2, r2
 800a436:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a43c:	1c9a      	adds	r2, r3, #2
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a446:	b29b      	uxth	r3, r3
 800a448:	3b01      	subs	r3, #1
 800a44a:	b29a      	uxth	r2, r3
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a450:	2301      	movs	r3, #1
 800a452:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a454:	f7fa ff32 	bl	80052bc <HAL_GetTick>
 800a458:	4602      	mov	r2, r0
 800a45a:	6a3b      	ldr	r3, [r7, #32]
 800a45c:	1ad3      	subs	r3, r2, r3
 800a45e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a460:	429a      	cmp	r2, r3
 800a462:	d80d      	bhi.n	800a480 <HAL_SPI_TransmitReceive+0x1d0>
 800a464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a46a:	d009      	beq.n	800a480 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2201      	movs	r2, #1
 800a470:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2200      	movs	r2, #0
 800a478:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800a47c:	2303      	movs	r3, #3
 800a47e:	e0bc      	b.n	800a5fa <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a484:	b29b      	uxth	r3, r3
 800a486:	2b00      	cmp	r3, #0
 800a488:	d1a0      	bne.n	800a3cc <HAL_SPI_TransmitReceive+0x11c>
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a48e:	b29b      	uxth	r3, r3
 800a490:	2b00      	cmp	r3, #0
 800a492:	d19b      	bne.n	800a3cc <HAL_SPI_TransmitReceive+0x11c>
 800a494:	e082      	b.n	800a59c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d002      	beq.n	800a4a4 <HAL_SPI_TransmitReceive+0x1f4>
 800a49e:	8afb      	ldrh	r3, [r7, #22]
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d171      	bne.n	800a588 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	330c      	adds	r3, #12
 800a4ae:	7812      	ldrb	r2, [r2, #0]
 800a4b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4b6:	1c5a      	adds	r2, r3, #1
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	3b01      	subs	r3, #1
 800a4c4:	b29a      	uxth	r2, r3
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a4ca:	e05d      	b.n	800a588 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	689b      	ldr	r3, [r3, #8]
 800a4d2:	f003 0302 	and.w	r3, r3, #2
 800a4d6:	2b02      	cmp	r3, #2
 800a4d8:	d11c      	bne.n	800a514 <HAL_SPI_TransmitReceive+0x264>
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d017      	beq.n	800a514 <HAL_SPI_TransmitReceive+0x264>
 800a4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d114      	bne.n	800a514 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	330c      	adds	r3, #12
 800a4f4:	7812      	ldrb	r2, [r2, #0]
 800a4f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4fc:	1c5a      	adds	r2, r3, #1
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a506:	b29b      	uxth	r3, r3
 800a508:	3b01      	subs	r3, #1
 800a50a:	b29a      	uxth	r2, r3
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a510:	2300      	movs	r3, #0
 800a512:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	689b      	ldr	r3, [r3, #8]
 800a51a:	f003 0301 	and.w	r3, r3, #1
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d119      	bne.n	800a556 <HAL_SPI_TransmitReceive+0x2a6>
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a526:	b29b      	uxth	r3, r3
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d014      	beq.n	800a556 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	68da      	ldr	r2, [r3, #12]
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a536:	b2d2      	uxtb	r2, r2
 800a538:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a53e:	1c5a      	adds	r2, r3, #1
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a548:	b29b      	uxth	r3, r3
 800a54a:	3b01      	subs	r3, #1
 800a54c:	b29a      	uxth	r2, r3
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a552:	2301      	movs	r3, #1
 800a554:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a556:	f7fa feb1 	bl	80052bc <HAL_GetTick>
 800a55a:	4602      	mov	r2, r0
 800a55c:	6a3b      	ldr	r3, [r7, #32]
 800a55e:	1ad3      	subs	r3, r2, r3
 800a560:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a562:	429a      	cmp	r2, r3
 800a564:	d803      	bhi.n	800a56e <HAL_SPI_TransmitReceive+0x2be>
 800a566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a56c:	d102      	bne.n	800a574 <HAL_SPI_TransmitReceive+0x2c4>
 800a56e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a570:	2b00      	cmp	r3, #0
 800a572:	d109      	bne.n	800a588 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2201      	movs	r2, #1
 800a578:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2200      	movs	r2, #0
 800a580:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800a584:	2303      	movs	r3, #3
 800a586:	e038      	b.n	800a5fa <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d19c      	bne.n	800a4cc <HAL_SPI_TransmitReceive+0x21c>
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a596:	b29b      	uxth	r3, r3
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d197      	bne.n	800a4cc <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a59c:	6a3a      	ldr	r2, [r7, #32]
 800a59e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	f000 fa65 	bl	800aa70 <SPI_EndRxTxTransaction>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d008      	beq.n	800a5be <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2220      	movs	r2, #32
 800a5b0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	e01d      	b.n	800a5fa <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	689b      	ldr	r3, [r3, #8]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d10a      	bne.n	800a5dc <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	613b      	str	r3, [r7, #16]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	68db      	ldr	r3, [r3, #12]
 800a5d0:	613b      	str	r3, [r7, #16]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	613b      	str	r3, [r7, #16]
 800a5da:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d001      	beq.n	800a5f8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	e000      	b.n	800a5fa <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800a5f8:	2300      	movs	r3, #0
  }
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3728      	adds	r7, #40	@ 0x28
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
	...

0800a604 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b084      	sub	sp, #16
 800a608:	af00      	add	r7, sp, #0
 800a60a:	60f8      	str	r0, [r7, #12]
 800a60c:	60b9      	str	r1, [r7, #8]
 800a60e:	4613      	mov	r3, r2
 800a610:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d001      	beq.n	800a622 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800a61e:	2302      	movs	r3, #2
 800a620:	e097      	b.n	800a752 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d002      	beq.n	800a62e <HAL_SPI_Transmit_DMA+0x2a>
 800a628:	88fb      	ldrh	r3, [r7, #6]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d101      	bne.n	800a632 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800a62e:	2301      	movs	r3, #1
 800a630:	e08f      	b.n	800a752 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d101      	bne.n	800a640 <HAL_SPI_Transmit_DMA+0x3c>
 800a63c:	2302      	movs	r3, #2
 800a63e:	e088      	b.n	800a752 <HAL_SPI_Transmit_DMA+0x14e>
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2201      	movs	r2, #1
 800a644:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2203      	movs	r2, #3
 800a64c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2200      	movs	r2, #0
 800a654:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	68ba      	ldr	r2, [r7, #8]
 800a65a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	88fa      	ldrh	r2, [r7, #6]
 800a660:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	88fa      	ldrh	r2, [r7, #6]
 800a666:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2200      	movs	r2, #0
 800a66c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2200      	movs	r2, #0
 800a672:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2200      	movs	r2, #0
 800a678:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2200      	movs	r2, #0
 800a67e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2200      	movs	r2, #0
 800a684:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	689b      	ldr	r3, [r3, #8]
 800a68a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a68e:	d10f      	bne.n	800a6b0 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	681a      	ldr	r2, [r3, #0]
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a69e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a6ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a6b4:	4a29      	ldr	r2, [pc, #164]	@ (800a75c <HAL_SPI_Transmit_DMA+0x158>)
 800a6b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a6bc:	4a28      	ldr	r2, [pc, #160]	@ (800a760 <HAL_SPI_Transmit_DMA+0x15c>)
 800a6be:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a6c4:	4a27      	ldr	r2, [pc, #156]	@ (800a764 <HAL_SPI_Transmit_DMA+0x160>)
 800a6c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6d8:	4619      	mov	r1, r3
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	330c      	adds	r3, #12
 800a6e0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a6e6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a6e8:	f7fa ffc4 	bl	8005674 <HAL_DMA_Start_IT>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00b      	beq.n	800a70a <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6f6:	f043 0210 	orr.w	r2, r3, #16
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2200      	movs	r2, #0
 800a702:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800a706:	2301      	movs	r3, #1
 800a708:	e023      	b.n	800a752 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a714:	2b40      	cmp	r3, #64	@ 0x40
 800a716:	d007      	beq.n	800a728 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a726:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2200      	movs	r2, #0
 800a72c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	685a      	ldr	r2, [r3, #4]
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f042 0220 	orr.w	r2, r2, #32
 800a73e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	685a      	ldr	r2, [r3, #4]
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f042 0202 	orr.w	r2, r2, #2
 800a74e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a750:	2300      	movs	r3, #0
}
 800a752:	4618      	mov	r0, r3
 800a754:	3710      	adds	r7, #16
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	0800a839 	.word	0x0800a839
 800a760:	0800a791 	.word	0x0800a791
 800a764:	0800a855 	.word	0x0800a855

0800a768 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a768:	b480      	push	{r7}
 800a76a:	b083      	sub	sp, #12
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a770:	bf00      	nop
 800a772:	370c      	adds	r7, #12
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr

0800a77c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b083      	sub	sp, #12
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a784:	bf00      	nop
 800a786:	370c      	adds	r7, #12
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b086      	sub	sp, #24
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a79c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a79e:	f7fa fd8d 	bl	80052bc <HAL_GetTick>
 800a7a2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7b2:	d03b      	beq.n	800a82c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	685a      	ldr	r2, [r3, #4]
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f022 0220 	bic.w	r2, r2, #32
 800a7c2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	685a      	ldr	r2, [r3, #4]
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f022 0202 	bic.w	r2, r2, #2
 800a7d2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a7d4:	693a      	ldr	r2, [r7, #16]
 800a7d6:	2164      	movs	r1, #100	@ 0x64
 800a7d8:	6978      	ldr	r0, [r7, #20]
 800a7da:	f000 f949 	bl	800aa70 <SPI_EndRxTxTransaction>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d005      	beq.n	800a7f0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7e8:	f043 0220 	orr.w	r2, r3, #32
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	689b      	ldr	r3, [r3, #8]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d10a      	bne.n	800a80e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	60fb      	str	r3, [r7, #12]
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	68db      	ldr	r3, [r3, #12]
 800a802:	60fb      	str	r3, [r7, #12]
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	60fb      	str	r3, [r7, #12]
 800a80c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	2200      	movs	r2, #0
 800a812:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	2201      	movs	r2, #1
 800a818:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a820:	2b00      	cmp	r3, #0
 800a822:	d003      	beq.n	800a82c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a824:	6978      	ldr	r0, [r7, #20]
 800a826:	f7ff ffa9 	bl	800a77c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a82a:	e002      	b.n	800a832 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800a82c:	6978      	ldr	r0, [r7, #20]
 800a82e:	f7f8 ff1f 	bl	8003670 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a832:	3718      	adds	r7, #24
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a844:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800a846:	68f8      	ldr	r0, [r7, #12]
 800a848:	f7ff ff8e 	bl	800a768 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a84c:	bf00      	nop
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a860:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	685a      	ldr	r2, [r3, #4]
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f022 0203 	bic.w	r2, r2, #3
 800a870:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a876:	f043 0210 	orr.w	r2, r3, #16
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2201      	movs	r2, #1
 800a882:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a886:	68f8      	ldr	r0, [r7, #12]
 800a888:	f7ff ff78 	bl	800a77c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a88c:	bf00      	nop
 800a88e:	3710      	adds	r7, #16
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}

0800a894 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b088      	sub	sp, #32
 800a898:	af00      	add	r7, sp, #0
 800a89a:	60f8      	str	r0, [r7, #12]
 800a89c:	60b9      	str	r1, [r7, #8]
 800a89e:	603b      	str	r3, [r7, #0]
 800a8a0:	4613      	mov	r3, r2
 800a8a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a8a4:	f7fa fd0a 	bl	80052bc <HAL_GetTick>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ac:	1a9b      	subs	r3, r3, r2
 800a8ae:	683a      	ldr	r2, [r7, #0]
 800a8b0:	4413      	add	r3, r2
 800a8b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a8b4:	f7fa fd02 	bl	80052bc <HAL_GetTick>
 800a8b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a8ba:	4b39      	ldr	r3, [pc, #228]	@ (800a9a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	015b      	lsls	r3, r3, #5
 800a8c0:	0d1b      	lsrs	r3, r3, #20
 800a8c2:	69fa      	ldr	r2, [r7, #28]
 800a8c4:	fb02 f303 	mul.w	r3, r2, r3
 800a8c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a8ca:	e054      	b.n	800a976 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8d2:	d050      	beq.n	800a976 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a8d4:	f7fa fcf2 	bl	80052bc <HAL_GetTick>
 800a8d8:	4602      	mov	r2, r0
 800a8da:	69bb      	ldr	r3, [r7, #24]
 800a8dc:	1ad3      	subs	r3, r2, r3
 800a8de:	69fa      	ldr	r2, [r7, #28]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d902      	bls.n	800a8ea <SPI_WaitFlagStateUntilTimeout+0x56>
 800a8e4:	69fb      	ldr	r3, [r7, #28]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d13d      	bne.n	800a966 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	685a      	ldr	r2, [r3, #4]
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a8f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a902:	d111      	bne.n	800a928 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	689b      	ldr	r3, [r3, #8]
 800a908:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a90c:	d004      	beq.n	800a918 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a916:	d107      	bne.n	800a928 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a926:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a92c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a930:	d10f      	bne.n	800a952 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a940:	601a      	str	r2, [r3, #0]
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	681a      	ldr	r2, [r3, #0]
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a950:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2201      	movs	r2, #1
 800a956:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2200      	movs	r2, #0
 800a95e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800a962:	2303      	movs	r3, #3
 800a964:	e017      	b.n	800a996 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d101      	bne.n	800a970 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a96c:	2300      	movs	r3, #0
 800a96e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	3b01      	subs	r3, #1
 800a974:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	689a      	ldr	r2, [r3, #8]
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	4013      	ands	r3, r2
 800a980:	68ba      	ldr	r2, [r7, #8]
 800a982:	429a      	cmp	r2, r3
 800a984:	bf0c      	ite	eq
 800a986:	2301      	moveq	r3, #1
 800a988:	2300      	movne	r3, #0
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	461a      	mov	r2, r3
 800a98e:	79fb      	ldrb	r3, [r7, #7]
 800a990:	429a      	cmp	r2, r3
 800a992:	d19b      	bne.n	800a8cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a994:	2300      	movs	r3, #0
}
 800a996:	4618      	mov	r0, r3
 800a998:	3720      	adds	r7, #32
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	2000000c 	.word	0x2000000c

0800a9a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b086      	sub	sp, #24
 800a9a8:	af02      	add	r7, sp, #8
 800a9aa:	60f8      	str	r0, [r7, #12]
 800a9ac:	60b9      	str	r1, [r7, #8]
 800a9ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a9b8:	d111      	bne.n	800a9de <SPI_EndRxTransaction+0x3a>
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	689b      	ldr	r3, [r3, #8]
 800a9be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a9c2:	d004      	beq.n	800a9ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	689b      	ldr	r3, [r3, #8]
 800a9c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a9cc:	d107      	bne.n	800a9de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a9dc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a9e6:	d12a      	bne.n	800aa3e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	689b      	ldr	r3, [r3, #8]
 800a9ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a9f0:	d012      	beq.n	800aa18 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	9300      	str	r3, [sp, #0]
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	2180      	movs	r1, #128	@ 0x80
 800a9fc:	68f8      	ldr	r0, [r7, #12]
 800a9fe:	f7ff ff49 	bl	800a894 <SPI_WaitFlagStateUntilTimeout>
 800aa02:	4603      	mov	r3, r0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d02d      	beq.n	800aa64 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa0c:	f043 0220 	orr.w	r2, r3, #32
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800aa14:	2303      	movs	r3, #3
 800aa16:	e026      	b.n	800aa66 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	9300      	str	r3, [sp, #0]
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	2101      	movs	r1, #1
 800aa22:	68f8      	ldr	r0, [r7, #12]
 800aa24:	f7ff ff36 	bl	800a894 <SPI_WaitFlagStateUntilTimeout>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d01a      	beq.n	800aa64 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa32:	f043 0220 	orr.w	r2, r3, #32
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800aa3a:	2303      	movs	r3, #3
 800aa3c:	e013      	b.n	800aa66 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	9300      	str	r3, [sp, #0]
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	2200      	movs	r2, #0
 800aa46:	2101      	movs	r1, #1
 800aa48:	68f8      	ldr	r0, [r7, #12]
 800aa4a:	f7ff ff23 	bl	800a894 <SPI_WaitFlagStateUntilTimeout>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d007      	beq.n	800aa64 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa58:	f043 0220 	orr.w	r2, r3, #32
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800aa60:	2303      	movs	r3, #3
 800aa62:	e000      	b.n	800aa66 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800aa64:	2300      	movs	r3, #0
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3710      	adds	r7, #16
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
	...

0800aa70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b088      	sub	sp, #32
 800aa74:	af02      	add	r7, sp, #8
 800aa76:	60f8      	str	r0, [r7, #12]
 800aa78:	60b9      	str	r1, [r7, #8]
 800aa7a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	9300      	str	r3, [sp, #0]
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	2201      	movs	r2, #1
 800aa84:	2102      	movs	r1, #2
 800aa86:	68f8      	ldr	r0, [r7, #12]
 800aa88:	f7ff ff04 	bl	800a894 <SPI_WaitFlagStateUntilTimeout>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d007      	beq.n	800aaa2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa96:	f043 0220 	orr.w	r2, r3, #32
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800aa9e:	2303      	movs	r3, #3
 800aaa0:	e032      	b.n	800ab08 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800aaa2:	4b1b      	ldr	r3, [pc, #108]	@ (800ab10 <SPI_EndRxTxTransaction+0xa0>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4a1b      	ldr	r2, [pc, #108]	@ (800ab14 <SPI_EndRxTxTransaction+0xa4>)
 800aaa8:	fba2 2303 	umull	r2, r3, r2, r3
 800aaac:	0d5b      	lsrs	r3, r3, #21
 800aaae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800aab2:	fb02 f303 	mul.w	r3, r2, r3
 800aab6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800aac0:	d112      	bne.n	800aae8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	9300      	str	r3, [sp, #0]
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	2200      	movs	r2, #0
 800aaca:	2180      	movs	r1, #128	@ 0x80
 800aacc:	68f8      	ldr	r0, [r7, #12]
 800aace:	f7ff fee1 	bl	800a894 <SPI_WaitFlagStateUntilTimeout>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d016      	beq.n	800ab06 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aadc:	f043 0220 	orr.w	r2, r3, #32
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800aae4:	2303      	movs	r3, #3
 800aae6:	e00f      	b.n	800ab08 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d00a      	beq.n	800ab04 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	3b01      	subs	r3, #1
 800aaf2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	689b      	ldr	r3, [r3, #8]
 800aafa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aafe:	2b80      	cmp	r3, #128	@ 0x80
 800ab00:	d0f2      	beq.n	800aae8 <SPI_EndRxTxTransaction+0x78>
 800ab02:	e000      	b.n	800ab06 <SPI_EndRxTxTransaction+0x96>
        break;
 800ab04:	bf00      	nop
  }

  return HAL_OK;
 800ab06:	2300      	movs	r3, #0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3718      	adds	r7, #24
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}
 800ab10:	2000000c 	.word	0x2000000c
 800ab14:	165e9f81 	.word	0x165e9f81

0800ab18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d101      	bne.n	800ab2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ab26:	2301      	movs	r3, #1
 800ab28:	e041      	b.n	800abae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab30:	b2db      	uxtb	r3, r3
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d106      	bne.n	800ab44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f7fa fa86 	bl	8005050 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2202      	movs	r2, #2
 800ab48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	3304      	adds	r3, #4
 800ab54:	4619      	mov	r1, r3
 800ab56:	4610      	mov	r0, r2
 800ab58:	f000 faac 	bl	800b0b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2201      	movs	r2, #1
 800ab68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2201      	movs	r2, #1
 800ab70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2201      	movs	r2, #1
 800ab78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2201      	movs	r2, #1
 800ab88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2201      	movs	r2, #1
 800ab90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2201      	movs	r2, #1
 800ab98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2201      	movs	r2, #1
 800aba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800abac:	2300      	movs	r3, #0
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3708      	adds	r7, #8
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
	...

0800abb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800abb8:	b480      	push	{r7}
 800abba:	b085      	sub	sp, #20
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d001      	beq.n	800abd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800abcc:	2301      	movs	r3, #1
 800abce:	e04e      	b.n	800ac6e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2202      	movs	r2, #2
 800abd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	68da      	ldr	r2, [r3, #12]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f042 0201 	orr.w	r2, r2, #1
 800abe6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4a23      	ldr	r2, [pc, #140]	@ (800ac7c <HAL_TIM_Base_Start_IT+0xc4>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d022      	beq.n	800ac38 <HAL_TIM_Base_Start_IT+0x80>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abfa:	d01d      	beq.n	800ac38 <HAL_TIM_Base_Start_IT+0x80>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a1f      	ldr	r2, [pc, #124]	@ (800ac80 <HAL_TIM_Base_Start_IT+0xc8>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d018      	beq.n	800ac38 <HAL_TIM_Base_Start_IT+0x80>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a1e      	ldr	r2, [pc, #120]	@ (800ac84 <HAL_TIM_Base_Start_IT+0xcc>)
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d013      	beq.n	800ac38 <HAL_TIM_Base_Start_IT+0x80>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4a1c      	ldr	r2, [pc, #112]	@ (800ac88 <HAL_TIM_Base_Start_IT+0xd0>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d00e      	beq.n	800ac38 <HAL_TIM_Base_Start_IT+0x80>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4a1b      	ldr	r2, [pc, #108]	@ (800ac8c <HAL_TIM_Base_Start_IT+0xd4>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d009      	beq.n	800ac38 <HAL_TIM_Base_Start_IT+0x80>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4a19      	ldr	r2, [pc, #100]	@ (800ac90 <HAL_TIM_Base_Start_IT+0xd8>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d004      	beq.n	800ac38 <HAL_TIM_Base_Start_IT+0x80>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	4a18      	ldr	r2, [pc, #96]	@ (800ac94 <HAL_TIM_Base_Start_IT+0xdc>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d111      	bne.n	800ac5c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	689b      	ldr	r3, [r3, #8]
 800ac3e:	f003 0307 	and.w	r3, r3, #7
 800ac42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2b06      	cmp	r3, #6
 800ac48:	d010      	beq.n	800ac6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	681a      	ldr	r2, [r3, #0]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f042 0201 	orr.w	r2, r2, #1
 800ac58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac5a:	e007      	b.n	800ac6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f042 0201 	orr.w	r2, r2, #1
 800ac6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ac6c:	2300      	movs	r3, #0
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3714      	adds	r7, #20
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr
 800ac7a:	bf00      	nop
 800ac7c:	40010000 	.word	0x40010000
 800ac80:	40000400 	.word	0x40000400
 800ac84:	40000800 	.word	0x40000800
 800ac88:	40000c00 	.word	0x40000c00
 800ac8c:	40010400 	.word	0x40010400
 800ac90:	40014000 	.word	0x40014000
 800ac94:	40001800 	.word	0x40001800

0800ac98 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b083      	sub	sp, #12
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	68da      	ldr	r2, [r3, #12]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f022 0201 	bic.w	r2, r2, #1
 800acae:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	6a1a      	ldr	r2, [r3, #32]
 800acb6:	f241 1311 	movw	r3, #4369	@ 0x1111
 800acba:	4013      	ands	r3, r2
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d10f      	bne.n	800ace0 <HAL_TIM_Base_Stop_IT+0x48>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	6a1a      	ldr	r2, [r3, #32]
 800acc6:	f240 4344 	movw	r3, #1092	@ 0x444
 800acca:	4013      	ands	r3, r2
 800accc:	2b00      	cmp	r3, #0
 800acce:	d107      	bne.n	800ace0 <HAL_TIM_Base_Stop_IT+0x48>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f022 0201 	bic.w	r2, r2, #1
 800acde:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2201      	movs	r2, #1
 800ace4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	370c      	adds	r7, #12
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr

0800acf6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800acf6:	b580      	push	{r7, lr}
 800acf8:	b084      	sub	sp, #16
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	68db      	ldr	r3, [r3, #12]
 800ad04:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	691b      	ldr	r3, [r3, #16]
 800ad0c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	f003 0302 	and.w	r3, r3, #2
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d020      	beq.n	800ad5a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f003 0302 	and.w	r3, r3, #2
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d01b      	beq.n	800ad5a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f06f 0202 	mvn.w	r2, #2
 800ad2a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2201      	movs	r2, #1
 800ad30:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	699b      	ldr	r3, [r3, #24]
 800ad38:	f003 0303 	and.w	r3, r3, #3
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d003      	beq.n	800ad48 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f000 f999 	bl	800b078 <HAL_TIM_IC_CaptureCallback>
 800ad46:	e005      	b.n	800ad54 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f000 f98b 	bl	800b064 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 f99c 	bl	800b08c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2200      	movs	r2, #0
 800ad58:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	f003 0304 	and.w	r3, r3, #4
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d020      	beq.n	800ada6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f003 0304 	and.w	r3, r3, #4
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d01b      	beq.n	800ada6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f06f 0204 	mvn.w	r2, #4
 800ad76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2202      	movs	r2, #2
 800ad7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	699b      	ldr	r3, [r3, #24]
 800ad84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d003      	beq.n	800ad94 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 f973 	bl	800b078 <HAL_TIM_IC_CaptureCallback>
 800ad92:	e005      	b.n	800ada0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f000 f965 	bl	800b064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 f976 	bl	800b08c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2200      	movs	r2, #0
 800ada4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	f003 0308 	and.w	r3, r3, #8
 800adac:	2b00      	cmp	r3, #0
 800adae:	d020      	beq.n	800adf2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	f003 0308 	and.w	r3, r3, #8
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d01b      	beq.n	800adf2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f06f 0208 	mvn.w	r2, #8
 800adc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2204      	movs	r2, #4
 800adc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	69db      	ldr	r3, [r3, #28]
 800add0:	f003 0303 	and.w	r3, r3, #3
 800add4:	2b00      	cmp	r3, #0
 800add6:	d003      	beq.n	800ade0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f000 f94d 	bl	800b078 <HAL_TIM_IC_CaptureCallback>
 800adde:	e005      	b.n	800adec <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 f93f 	bl	800b064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 f950 	bl	800b08c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2200      	movs	r2, #0
 800adf0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	f003 0310 	and.w	r3, r3, #16
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d020      	beq.n	800ae3e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f003 0310 	and.w	r3, r3, #16
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d01b      	beq.n	800ae3e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f06f 0210 	mvn.w	r2, #16
 800ae0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2208      	movs	r2, #8
 800ae14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	69db      	ldr	r3, [r3, #28]
 800ae1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d003      	beq.n	800ae2c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f000 f927 	bl	800b078 <HAL_TIM_IC_CaptureCallback>
 800ae2a:	e005      	b.n	800ae38 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 f919 	bl	800b064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 f92a 	bl	800b08c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	f003 0301 	and.w	r3, r3, #1
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d00c      	beq.n	800ae62 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f003 0301 	and.w	r3, r3, #1
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d007      	beq.n	800ae62 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f06f 0201 	mvn.w	r2, #1
 800ae5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f7f9 fd6b 	bl	8004938 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d00c      	beq.n	800ae86 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d007      	beq.n	800ae86 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800ae7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 fae3 	bl	800b44c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d00c      	beq.n	800aeaa <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d007      	beq.n	800aeaa <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800aea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 f8fb 	bl	800b0a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	f003 0320 	and.w	r3, r3, #32
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d00c      	beq.n	800aece <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f003 0320 	and.w	r3, r3, #32
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d007      	beq.n	800aece <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f06f 0220 	mvn.w	r2, #32
 800aec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 fab5 	bl	800b438 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aece:	bf00      	nop
 800aed0:	3710      	adds	r7, #16
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}

0800aed6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b084      	sub	sp, #16
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
 800aede:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aee0:	2300      	movs	r3, #0
 800aee2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aeea:	2b01      	cmp	r3, #1
 800aeec:	d101      	bne.n	800aef2 <HAL_TIM_ConfigClockSource+0x1c>
 800aeee:	2302      	movs	r3, #2
 800aef0:	e0b4      	b.n	800b05c <HAL_TIM_ConfigClockSource+0x186>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2201      	movs	r2, #1
 800aef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2202      	movs	r2, #2
 800aefe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	689b      	ldr	r3, [r3, #8]
 800af08:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800af10:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800af18:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	68ba      	ldr	r2, [r7, #8]
 800af20:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af2a:	d03e      	beq.n	800afaa <HAL_TIM_ConfigClockSource+0xd4>
 800af2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af30:	f200 8087 	bhi.w	800b042 <HAL_TIM_ConfigClockSource+0x16c>
 800af34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af38:	f000 8086 	beq.w	800b048 <HAL_TIM_ConfigClockSource+0x172>
 800af3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af40:	d87f      	bhi.n	800b042 <HAL_TIM_ConfigClockSource+0x16c>
 800af42:	2b70      	cmp	r3, #112	@ 0x70
 800af44:	d01a      	beq.n	800af7c <HAL_TIM_ConfigClockSource+0xa6>
 800af46:	2b70      	cmp	r3, #112	@ 0x70
 800af48:	d87b      	bhi.n	800b042 <HAL_TIM_ConfigClockSource+0x16c>
 800af4a:	2b60      	cmp	r3, #96	@ 0x60
 800af4c:	d050      	beq.n	800aff0 <HAL_TIM_ConfigClockSource+0x11a>
 800af4e:	2b60      	cmp	r3, #96	@ 0x60
 800af50:	d877      	bhi.n	800b042 <HAL_TIM_ConfigClockSource+0x16c>
 800af52:	2b50      	cmp	r3, #80	@ 0x50
 800af54:	d03c      	beq.n	800afd0 <HAL_TIM_ConfigClockSource+0xfa>
 800af56:	2b50      	cmp	r3, #80	@ 0x50
 800af58:	d873      	bhi.n	800b042 <HAL_TIM_ConfigClockSource+0x16c>
 800af5a:	2b40      	cmp	r3, #64	@ 0x40
 800af5c:	d058      	beq.n	800b010 <HAL_TIM_ConfigClockSource+0x13a>
 800af5e:	2b40      	cmp	r3, #64	@ 0x40
 800af60:	d86f      	bhi.n	800b042 <HAL_TIM_ConfigClockSource+0x16c>
 800af62:	2b30      	cmp	r3, #48	@ 0x30
 800af64:	d064      	beq.n	800b030 <HAL_TIM_ConfigClockSource+0x15a>
 800af66:	2b30      	cmp	r3, #48	@ 0x30
 800af68:	d86b      	bhi.n	800b042 <HAL_TIM_ConfigClockSource+0x16c>
 800af6a:	2b20      	cmp	r3, #32
 800af6c:	d060      	beq.n	800b030 <HAL_TIM_ConfigClockSource+0x15a>
 800af6e:	2b20      	cmp	r3, #32
 800af70:	d867      	bhi.n	800b042 <HAL_TIM_ConfigClockSource+0x16c>
 800af72:	2b00      	cmp	r3, #0
 800af74:	d05c      	beq.n	800b030 <HAL_TIM_ConfigClockSource+0x15a>
 800af76:	2b10      	cmp	r3, #16
 800af78:	d05a      	beq.n	800b030 <HAL_TIM_ConfigClockSource+0x15a>
 800af7a:	e062      	b.n	800b042 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800af8c:	f000 f9b8 	bl	800b300 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	689b      	ldr	r3, [r3, #8]
 800af96:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800af9e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	68ba      	ldr	r2, [r7, #8]
 800afa6:	609a      	str	r2, [r3, #8]
      break;
 800afa8:	e04f      	b.n	800b04a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800afba:	f000 f9a1 	bl	800b300 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	689a      	ldr	r2, [r3, #8]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800afcc:	609a      	str	r2, [r3, #8]
      break;
 800afce:	e03c      	b.n	800b04a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800afdc:	461a      	mov	r2, r3
 800afde:	f000 f915 	bl	800b20c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	2150      	movs	r1, #80	@ 0x50
 800afe8:	4618      	mov	r0, r3
 800afea:	f000 f96e 	bl	800b2ca <TIM_ITRx_SetConfig>
      break;
 800afee:	e02c      	b.n	800b04a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800affc:	461a      	mov	r2, r3
 800affe:	f000 f934 	bl	800b26a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	2160      	movs	r1, #96	@ 0x60
 800b008:	4618      	mov	r0, r3
 800b00a:	f000 f95e 	bl	800b2ca <TIM_ITRx_SetConfig>
      break;
 800b00e:	e01c      	b.n	800b04a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b01c:	461a      	mov	r2, r3
 800b01e:	f000 f8f5 	bl	800b20c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2140      	movs	r1, #64	@ 0x40
 800b028:	4618      	mov	r0, r3
 800b02a:	f000 f94e 	bl	800b2ca <TIM_ITRx_SetConfig>
      break;
 800b02e:	e00c      	b.n	800b04a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	4619      	mov	r1, r3
 800b03a:	4610      	mov	r0, r2
 800b03c:	f000 f945 	bl	800b2ca <TIM_ITRx_SetConfig>
      break;
 800b040:	e003      	b.n	800b04a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b042:	2301      	movs	r3, #1
 800b044:	73fb      	strb	r3, [r7, #15]
      break;
 800b046:	e000      	b.n	800b04a <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b048:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2201      	movs	r2, #1
 800b04e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2200      	movs	r2, #0
 800b056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b05a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3710      	adds	r7, #16
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b064:	b480      	push	{r7}
 800b066:	b083      	sub	sp, #12
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b06c:	bf00      	nop
 800b06e:	370c      	adds	r7, #12
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b078:	b480      	push	{r7}
 800b07a:	b083      	sub	sp, #12
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b080:	bf00      	nop
 800b082:	370c      	adds	r7, #12
 800b084:	46bd      	mov	sp, r7
 800b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08a:	4770      	bx	lr

0800b08c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b083      	sub	sp, #12
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b094:	bf00      	nop
 800b096:	370c      	adds	r7, #12
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr

0800b0a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b083      	sub	sp, #12
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b0a8:	bf00      	nop
 800b0aa:	370c      	adds	r7, #12
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr

0800b0b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b085      	sub	sp, #20
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	4a46      	ldr	r2, [pc, #280]	@ (800b1e0 <TIM_Base_SetConfig+0x12c>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d013      	beq.n	800b0f4 <TIM_Base_SetConfig+0x40>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0d2:	d00f      	beq.n	800b0f4 <TIM_Base_SetConfig+0x40>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	4a43      	ldr	r2, [pc, #268]	@ (800b1e4 <TIM_Base_SetConfig+0x130>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d00b      	beq.n	800b0f4 <TIM_Base_SetConfig+0x40>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	4a42      	ldr	r2, [pc, #264]	@ (800b1e8 <TIM_Base_SetConfig+0x134>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d007      	beq.n	800b0f4 <TIM_Base_SetConfig+0x40>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	4a41      	ldr	r2, [pc, #260]	@ (800b1ec <TIM_Base_SetConfig+0x138>)
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d003      	beq.n	800b0f4 <TIM_Base_SetConfig+0x40>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	4a40      	ldr	r2, [pc, #256]	@ (800b1f0 <TIM_Base_SetConfig+0x13c>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d108      	bne.n	800b106 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	68fa      	ldr	r2, [r7, #12]
 800b102:	4313      	orrs	r3, r2
 800b104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	4a35      	ldr	r2, [pc, #212]	@ (800b1e0 <TIM_Base_SetConfig+0x12c>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d02b      	beq.n	800b166 <TIM_Base_SetConfig+0xb2>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b114:	d027      	beq.n	800b166 <TIM_Base_SetConfig+0xb2>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	4a32      	ldr	r2, [pc, #200]	@ (800b1e4 <TIM_Base_SetConfig+0x130>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d023      	beq.n	800b166 <TIM_Base_SetConfig+0xb2>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	4a31      	ldr	r2, [pc, #196]	@ (800b1e8 <TIM_Base_SetConfig+0x134>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d01f      	beq.n	800b166 <TIM_Base_SetConfig+0xb2>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	4a30      	ldr	r2, [pc, #192]	@ (800b1ec <TIM_Base_SetConfig+0x138>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d01b      	beq.n	800b166 <TIM_Base_SetConfig+0xb2>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	4a2f      	ldr	r2, [pc, #188]	@ (800b1f0 <TIM_Base_SetConfig+0x13c>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d017      	beq.n	800b166 <TIM_Base_SetConfig+0xb2>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	4a2e      	ldr	r2, [pc, #184]	@ (800b1f4 <TIM_Base_SetConfig+0x140>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d013      	beq.n	800b166 <TIM_Base_SetConfig+0xb2>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	4a2d      	ldr	r2, [pc, #180]	@ (800b1f8 <TIM_Base_SetConfig+0x144>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d00f      	beq.n	800b166 <TIM_Base_SetConfig+0xb2>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	4a2c      	ldr	r2, [pc, #176]	@ (800b1fc <TIM_Base_SetConfig+0x148>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d00b      	beq.n	800b166 <TIM_Base_SetConfig+0xb2>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	4a2b      	ldr	r2, [pc, #172]	@ (800b200 <TIM_Base_SetConfig+0x14c>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d007      	beq.n	800b166 <TIM_Base_SetConfig+0xb2>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	4a2a      	ldr	r2, [pc, #168]	@ (800b204 <TIM_Base_SetConfig+0x150>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d003      	beq.n	800b166 <TIM_Base_SetConfig+0xb2>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	4a29      	ldr	r2, [pc, #164]	@ (800b208 <TIM_Base_SetConfig+0x154>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d108      	bne.n	800b178 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b16c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	68db      	ldr	r3, [r3, #12]
 800b172:	68fa      	ldr	r2, [r7, #12]
 800b174:	4313      	orrs	r3, r2
 800b176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	695b      	ldr	r3, [r3, #20]
 800b182:	4313      	orrs	r3, r2
 800b184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	68fa      	ldr	r2, [r7, #12]
 800b18a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	689a      	ldr	r2, [r3, #8]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	4a10      	ldr	r2, [pc, #64]	@ (800b1e0 <TIM_Base_SetConfig+0x12c>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d003      	beq.n	800b1ac <TIM_Base_SetConfig+0xf8>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	4a12      	ldr	r2, [pc, #72]	@ (800b1f0 <TIM_Base_SetConfig+0x13c>)
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d103      	bne.n	800b1b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	691a      	ldr	r2, [r3, #16]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	691b      	ldr	r3, [r3, #16]
 800b1be:	f003 0301 	and.w	r3, r3, #1
 800b1c2:	2b01      	cmp	r3, #1
 800b1c4:	d105      	bne.n	800b1d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	691b      	ldr	r3, [r3, #16]
 800b1ca:	f023 0201 	bic.w	r2, r3, #1
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	611a      	str	r2, [r3, #16]
  }
}
 800b1d2:	bf00      	nop
 800b1d4:	3714      	adds	r7, #20
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1dc:	4770      	bx	lr
 800b1de:	bf00      	nop
 800b1e0:	40010000 	.word	0x40010000
 800b1e4:	40000400 	.word	0x40000400
 800b1e8:	40000800 	.word	0x40000800
 800b1ec:	40000c00 	.word	0x40000c00
 800b1f0:	40010400 	.word	0x40010400
 800b1f4:	40014000 	.word	0x40014000
 800b1f8:	40014400 	.word	0x40014400
 800b1fc:	40014800 	.word	0x40014800
 800b200:	40001800 	.word	0x40001800
 800b204:	40001c00 	.word	0x40001c00
 800b208:	40002000 	.word	0x40002000

0800b20c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b087      	sub	sp, #28
 800b210:	af00      	add	r7, sp, #0
 800b212:	60f8      	str	r0, [r7, #12]
 800b214:	60b9      	str	r1, [r7, #8]
 800b216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	6a1b      	ldr	r3, [r3, #32]
 800b21c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	6a1b      	ldr	r3, [r3, #32]
 800b222:	f023 0201 	bic.w	r2, r3, #1
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	699b      	ldr	r3, [r3, #24]
 800b22e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	011b      	lsls	r3, r3, #4
 800b23c:	693a      	ldr	r2, [r7, #16]
 800b23e:	4313      	orrs	r3, r2
 800b240:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	f023 030a 	bic.w	r3, r3, #10
 800b248:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b24a:	697a      	ldr	r2, [r7, #20]
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	4313      	orrs	r3, r2
 800b250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	693a      	ldr	r2, [r7, #16]
 800b256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	697a      	ldr	r2, [r7, #20]
 800b25c:	621a      	str	r2, [r3, #32]
}
 800b25e:	bf00      	nop
 800b260:	371c      	adds	r7, #28
 800b262:	46bd      	mov	sp, r7
 800b264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b268:	4770      	bx	lr

0800b26a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b26a:	b480      	push	{r7}
 800b26c:	b087      	sub	sp, #28
 800b26e:	af00      	add	r7, sp, #0
 800b270:	60f8      	str	r0, [r7, #12]
 800b272:	60b9      	str	r1, [r7, #8]
 800b274:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	6a1b      	ldr	r3, [r3, #32]
 800b27a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	6a1b      	ldr	r3, [r3, #32]
 800b280:	f023 0210 	bic.w	r2, r3, #16
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	699b      	ldr	r3, [r3, #24]
 800b28c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b294:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	031b      	lsls	r3, r3, #12
 800b29a:	693a      	ldr	r2, [r7, #16]
 800b29c:	4313      	orrs	r3, r2
 800b29e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b2a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	011b      	lsls	r3, r3, #4
 800b2ac:	697a      	ldr	r2, [r7, #20]
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	693a      	ldr	r2, [r7, #16]
 800b2b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	697a      	ldr	r2, [r7, #20]
 800b2bc:	621a      	str	r2, [r3, #32]
}
 800b2be:	bf00      	nop
 800b2c0:	371c      	adds	r7, #28
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c8:	4770      	bx	lr

0800b2ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b2ca:	b480      	push	{r7}
 800b2cc:	b085      	sub	sp, #20
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	6078      	str	r0, [r7, #4]
 800b2d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b2e2:	683a      	ldr	r2, [r7, #0]
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	f043 0307 	orr.w	r3, r3, #7
 800b2ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	68fa      	ldr	r2, [r7, #12]
 800b2f2:	609a      	str	r2, [r3, #8]
}
 800b2f4:	bf00      	nop
 800b2f6:	3714      	adds	r7, #20
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b300:	b480      	push	{r7}
 800b302:	b087      	sub	sp, #28
 800b304:	af00      	add	r7, sp, #0
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	607a      	str	r2, [r7, #4]
 800b30c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	689b      	ldr	r3, [r3, #8]
 800b312:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b31a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	021a      	lsls	r2, r3, #8
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	431a      	orrs	r2, r3
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	4313      	orrs	r3, r2
 800b328:	697a      	ldr	r2, [r7, #20]
 800b32a:	4313      	orrs	r3, r2
 800b32c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	697a      	ldr	r2, [r7, #20]
 800b332:	609a      	str	r2, [r3, #8]
}
 800b334:	bf00      	nop
 800b336:	371c      	adds	r7, #28
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr

0800b340 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b340:	b480      	push	{r7}
 800b342:	b085      	sub	sp, #20
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b350:	2b01      	cmp	r3, #1
 800b352:	d101      	bne.n	800b358 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b354:	2302      	movs	r3, #2
 800b356:	e05a      	b.n	800b40e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2201      	movs	r2, #1
 800b35c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2202      	movs	r2, #2
 800b364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	689b      	ldr	r3, [r3, #8]
 800b376:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b37e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	68fa      	ldr	r2, [r7, #12]
 800b386:	4313      	orrs	r3, r2
 800b388:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	68fa      	ldr	r2, [r7, #12]
 800b390:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	4a21      	ldr	r2, [pc, #132]	@ (800b41c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d022      	beq.n	800b3e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3a4:	d01d      	beq.n	800b3e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4a1d      	ldr	r2, [pc, #116]	@ (800b420 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d018      	beq.n	800b3e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4a1b      	ldr	r2, [pc, #108]	@ (800b424 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d013      	beq.n	800b3e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4a1a      	ldr	r2, [pc, #104]	@ (800b428 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d00e      	beq.n	800b3e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	4a18      	ldr	r2, [pc, #96]	@ (800b42c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d009      	beq.n	800b3e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	4a17      	ldr	r2, [pc, #92]	@ (800b430 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d004      	beq.n	800b3e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4a15      	ldr	r2, [pc, #84]	@ (800b434 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d10c      	bne.n	800b3fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b3e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	68ba      	ldr	r2, [r7, #8]
 800b3f0:	4313      	orrs	r3, r2
 800b3f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	68ba      	ldr	r2, [r7, #8]
 800b3fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2201      	movs	r2, #1
 800b400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2200      	movs	r2, #0
 800b408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b40c:	2300      	movs	r3, #0
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3714      	adds	r7, #20
 800b412:	46bd      	mov	sp, r7
 800b414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b418:	4770      	bx	lr
 800b41a:	bf00      	nop
 800b41c:	40010000 	.word	0x40010000
 800b420:	40000400 	.word	0x40000400
 800b424:	40000800 	.word	0x40000800
 800b428:	40000c00 	.word	0x40000c00
 800b42c:	40010400 	.word	0x40010400
 800b430:	40014000 	.word	0x40014000
 800b434:	40001800 	.word	0x40001800

0800b438 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b438:	b480      	push	{r7}
 800b43a:	b083      	sub	sp, #12
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b440:	bf00      	nop
 800b442:	370c      	adds	r7, #12
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr

0800b44c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b083      	sub	sp, #12
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b454:	bf00      	nop
 800b456:	370c      	adds	r7, #12
 800b458:	46bd      	mov	sp, r7
 800b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45e:	4770      	bx	lr

0800b460 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b082      	sub	sp, #8
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d101      	bne.n	800b472 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b46e:	2301      	movs	r3, #1
 800b470:	e042      	b.n	800b4f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b478:	b2db      	uxtb	r3, r3
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d106      	bne.n	800b48c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2200      	movs	r2, #0
 800b482:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f7f9 fe70 	bl	800516c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2224      	movs	r2, #36	@ 0x24
 800b490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	68da      	ldr	r2, [r3, #12]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b4a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 f973 	bl	800b790 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	691a      	ldr	r2, [r3, #16]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b4b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	695a      	ldr	r2, [r3, #20]
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b4c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	68da      	ldr	r2, [r3, #12]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b4d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2220      	movs	r2, #32
 800b4e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2220      	movs	r2, #32
 800b4ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b4f6:	2300      	movs	r3, #0
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3708      	adds	r7, #8
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}

0800b500 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b08a      	sub	sp, #40	@ 0x28
 800b504:	af02      	add	r7, sp, #8
 800b506:	60f8      	str	r0, [r7, #12]
 800b508:	60b9      	str	r1, [r7, #8]
 800b50a:	603b      	str	r3, [r7, #0]
 800b50c:	4613      	mov	r3, r2
 800b50e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b510:	2300      	movs	r3, #0
 800b512:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b51a:	b2db      	uxtb	r3, r3
 800b51c:	2b20      	cmp	r3, #32
 800b51e:	d175      	bne.n	800b60c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d002      	beq.n	800b52c <HAL_UART_Transmit+0x2c>
 800b526:	88fb      	ldrh	r3, [r7, #6]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d101      	bne.n	800b530 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b52c:	2301      	movs	r3, #1
 800b52e:	e06e      	b.n	800b60e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2200      	movs	r2, #0
 800b534:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2221      	movs	r2, #33	@ 0x21
 800b53a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b53e:	f7f9 febd 	bl	80052bc <HAL_GetTick>
 800b542:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	88fa      	ldrh	r2, [r7, #6]
 800b548:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	88fa      	ldrh	r2, [r7, #6]
 800b54e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	689b      	ldr	r3, [r3, #8]
 800b554:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b558:	d108      	bne.n	800b56c <HAL_UART_Transmit+0x6c>
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	691b      	ldr	r3, [r3, #16]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d104      	bne.n	800b56c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b562:	2300      	movs	r3, #0
 800b564:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	61bb      	str	r3, [r7, #24]
 800b56a:	e003      	b.n	800b574 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b570:	2300      	movs	r3, #0
 800b572:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b574:	e02e      	b.n	800b5d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	9300      	str	r3, [sp, #0]
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	2200      	movs	r2, #0
 800b57e:	2180      	movs	r1, #128	@ 0x80
 800b580:	68f8      	ldr	r0, [r7, #12]
 800b582:	f000 f848 	bl	800b616 <UART_WaitOnFlagUntilTimeout>
 800b586:	4603      	mov	r3, r0
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d005      	beq.n	800b598 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2220      	movs	r2, #32
 800b590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800b594:	2303      	movs	r3, #3
 800b596:	e03a      	b.n	800b60e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800b598:	69fb      	ldr	r3, [r7, #28]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d10b      	bne.n	800b5b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b59e:	69bb      	ldr	r3, [r7, #24]
 800b5a0:	881b      	ldrh	r3, [r3, #0]
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b5ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b5ae:	69bb      	ldr	r3, [r7, #24]
 800b5b0:	3302      	adds	r3, #2
 800b5b2:	61bb      	str	r3, [r7, #24]
 800b5b4:	e007      	b.n	800b5c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b5b6:	69fb      	ldr	r3, [r7, #28]
 800b5b8:	781a      	ldrb	r2, [r3, #0]
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b5c0:	69fb      	ldr	r3, [r7, #28]
 800b5c2:	3301      	adds	r3, #1
 800b5c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	3b01      	subs	r3, #1
 800b5ce:	b29a      	uxth	r2, r3
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b5d8:	b29b      	uxth	r3, r3
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d1cb      	bne.n	800b576 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	9300      	str	r3, [sp, #0]
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	2140      	movs	r1, #64	@ 0x40
 800b5e8:	68f8      	ldr	r0, [r7, #12]
 800b5ea:	f000 f814 	bl	800b616 <UART_WaitOnFlagUntilTimeout>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d005      	beq.n	800b600 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	2220      	movs	r2, #32
 800b5f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800b5fc:	2303      	movs	r3, #3
 800b5fe:	e006      	b.n	800b60e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2220      	movs	r2, #32
 800b604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800b608:	2300      	movs	r3, #0
 800b60a:	e000      	b.n	800b60e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800b60c:	2302      	movs	r3, #2
  }
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3720      	adds	r7, #32
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}

0800b616 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b616:	b580      	push	{r7, lr}
 800b618:	b086      	sub	sp, #24
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	60f8      	str	r0, [r7, #12]
 800b61e:	60b9      	str	r1, [r7, #8]
 800b620:	603b      	str	r3, [r7, #0]
 800b622:	4613      	mov	r3, r2
 800b624:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b626:	e03b      	b.n	800b6a0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b628:	6a3b      	ldr	r3, [r7, #32]
 800b62a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b62e:	d037      	beq.n	800b6a0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b630:	f7f9 fe44 	bl	80052bc <HAL_GetTick>
 800b634:	4602      	mov	r2, r0
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	1ad3      	subs	r3, r2, r3
 800b63a:	6a3a      	ldr	r2, [r7, #32]
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d302      	bcc.n	800b646 <UART_WaitOnFlagUntilTimeout+0x30>
 800b640:	6a3b      	ldr	r3, [r7, #32]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d101      	bne.n	800b64a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b646:	2303      	movs	r3, #3
 800b648:	e03a      	b.n	800b6c0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	68db      	ldr	r3, [r3, #12]
 800b650:	f003 0304 	and.w	r3, r3, #4
 800b654:	2b00      	cmp	r3, #0
 800b656:	d023      	beq.n	800b6a0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	2b80      	cmp	r3, #128	@ 0x80
 800b65c:	d020      	beq.n	800b6a0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	2b40      	cmp	r3, #64	@ 0x40
 800b662:	d01d      	beq.n	800b6a0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f003 0308 	and.w	r3, r3, #8
 800b66e:	2b08      	cmp	r3, #8
 800b670:	d116      	bne.n	800b6a0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800b672:	2300      	movs	r3, #0
 800b674:	617b      	str	r3, [r7, #20]
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	617b      	str	r3, [r7, #20]
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	617b      	str	r3, [r7, #20]
 800b686:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b688:	68f8      	ldr	r0, [r7, #12]
 800b68a:	f000 f81d 	bl	800b6c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2208      	movs	r2, #8
 800b692:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	2200      	movs	r2, #0
 800b698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b69c:	2301      	movs	r3, #1
 800b69e:	e00f      	b.n	800b6c0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	681a      	ldr	r2, [r3, #0]
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	4013      	ands	r3, r2
 800b6aa:	68ba      	ldr	r2, [r7, #8]
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	bf0c      	ite	eq
 800b6b0:	2301      	moveq	r3, #1
 800b6b2:	2300      	movne	r3, #0
 800b6b4:	b2db      	uxtb	r3, r3
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	79fb      	ldrb	r3, [r7, #7]
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d0b4      	beq.n	800b628 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b6be:	2300      	movs	r3, #0
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3718      	adds	r7, #24
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b095      	sub	sp, #84	@ 0x54
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	330c      	adds	r3, #12
 800b6d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6da:	e853 3f00 	ldrex	r3, [r3]
 800b6de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b6e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b6e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	330c      	adds	r3, #12
 800b6ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b6f0:	643a      	str	r2, [r7, #64]	@ 0x40
 800b6f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b6f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b6f8:	e841 2300 	strex	r3, r2, [r1]
 800b6fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b6fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b700:	2b00      	cmp	r3, #0
 800b702:	d1e5      	bne.n	800b6d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	3314      	adds	r3, #20
 800b70a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b70c:	6a3b      	ldr	r3, [r7, #32]
 800b70e:	e853 3f00 	ldrex	r3, [r3]
 800b712:	61fb      	str	r3, [r7, #28]
   return(result);
 800b714:	69fb      	ldr	r3, [r7, #28]
 800b716:	f023 0301 	bic.w	r3, r3, #1
 800b71a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	3314      	adds	r3, #20
 800b722:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b724:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b726:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b728:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b72a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b72c:	e841 2300 	strex	r3, r2, [r1]
 800b730:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b734:	2b00      	cmp	r3, #0
 800b736:	d1e5      	bne.n	800b704 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b73c:	2b01      	cmp	r3, #1
 800b73e:	d119      	bne.n	800b774 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	330c      	adds	r3, #12
 800b746:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	e853 3f00 	ldrex	r3, [r3]
 800b74e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	f023 0310 	bic.w	r3, r3, #16
 800b756:	647b      	str	r3, [r7, #68]	@ 0x44
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	330c      	adds	r3, #12
 800b75e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b760:	61ba      	str	r2, [r7, #24]
 800b762:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b764:	6979      	ldr	r1, [r7, #20]
 800b766:	69ba      	ldr	r2, [r7, #24]
 800b768:	e841 2300 	strex	r3, r2, [r1]
 800b76c:	613b      	str	r3, [r7, #16]
   return(result);
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d1e5      	bne.n	800b740 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2220      	movs	r2, #32
 800b778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2200      	movs	r2, #0
 800b780:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b782:	bf00      	nop
 800b784:	3754      	adds	r7, #84	@ 0x54
 800b786:	46bd      	mov	sp, r7
 800b788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78c:	4770      	bx	lr
	...

0800b790 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b794:	b0c0      	sub	sp, #256	@ 0x100
 800b796:	af00      	add	r7, sp, #0
 800b798:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b79c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	691b      	ldr	r3, [r3, #16]
 800b7a4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b7a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7ac:	68d9      	ldr	r1, [r3, #12]
 800b7ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7b2:	681a      	ldr	r2, [r3, #0]
 800b7b4:	ea40 0301 	orr.w	r3, r0, r1
 800b7b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b7ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7be:	689a      	ldr	r2, [r3, #8]
 800b7c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7c4:	691b      	ldr	r3, [r3, #16]
 800b7c6:	431a      	orrs	r2, r3
 800b7c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7cc:	695b      	ldr	r3, [r3, #20]
 800b7ce:	431a      	orrs	r2, r3
 800b7d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7d4:	69db      	ldr	r3, [r3, #28]
 800b7d6:	4313      	orrs	r3, r2
 800b7d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b7dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	68db      	ldr	r3, [r3, #12]
 800b7e4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b7e8:	f021 010c 	bic.w	r1, r1, #12
 800b7ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7f0:	681a      	ldr	r2, [r3, #0]
 800b7f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b7f6:	430b      	orrs	r3, r1
 800b7f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b7fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	695b      	ldr	r3, [r3, #20]
 800b802:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b80a:	6999      	ldr	r1, [r3, #24]
 800b80c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b810:	681a      	ldr	r2, [r3, #0]
 800b812:	ea40 0301 	orr.w	r3, r0, r1
 800b816:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b81c:	681a      	ldr	r2, [r3, #0]
 800b81e:	4b8f      	ldr	r3, [pc, #572]	@ (800ba5c <UART_SetConfig+0x2cc>)
 800b820:	429a      	cmp	r2, r3
 800b822:	d005      	beq.n	800b830 <UART_SetConfig+0xa0>
 800b824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b828:	681a      	ldr	r2, [r3, #0]
 800b82a:	4b8d      	ldr	r3, [pc, #564]	@ (800ba60 <UART_SetConfig+0x2d0>)
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d104      	bne.n	800b83a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b830:	f7fe f81e 	bl	8009870 <HAL_RCC_GetPCLK2Freq>
 800b834:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b838:	e003      	b.n	800b842 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b83a:	f7fe f805 	bl	8009848 <HAL_RCC_GetPCLK1Freq>
 800b83e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b846:	69db      	ldr	r3, [r3, #28]
 800b848:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b84c:	f040 810c 	bne.w	800ba68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b850:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b854:	2200      	movs	r2, #0
 800b856:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b85a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b85e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b862:	4622      	mov	r2, r4
 800b864:	462b      	mov	r3, r5
 800b866:	1891      	adds	r1, r2, r2
 800b868:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b86a:	415b      	adcs	r3, r3
 800b86c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b86e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b872:	4621      	mov	r1, r4
 800b874:	eb12 0801 	adds.w	r8, r2, r1
 800b878:	4629      	mov	r1, r5
 800b87a:	eb43 0901 	adc.w	r9, r3, r1
 800b87e:	f04f 0200 	mov.w	r2, #0
 800b882:	f04f 0300 	mov.w	r3, #0
 800b886:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b88a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b88e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b892:	4690      	mov	r8, r2
 800b894:	4699      	mov	r9, r3
 800b896:	4623      	mov	r3, r4
 800b898:	eb18 0303 	adds.w	r3, r8, r3
 800b89c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b8a0:	462b      	mov	r3, r5
 800b8a2:	eb49 0303 	adc.w	r3, r9, r3
 800b8a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b8aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b8b6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b8ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b8be:	460b      	mov	r3, r1
 800b8c0:	18db      	adds	r3, r3, r3
 800b8c2:	653b      	str	r3, [r7, #80]	@ 0x50
 800b8c4:	4613      	mov	r3, r2
 800b8c6:	eb42 0303 	adc.w	r3, r2, r3
 800b8ca:	657b      	str	r3, [r7, #84]	@ 0x54
 800b8cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b8d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b8d4:	f7f5 f9c8 	bl	8000c68 <__aeabi_uldivmod>
 800b8d8:	4602      	mov	r2, r0
 800b8da:	460b      	mov	r3, r1
 800b8dc:	4b61      	ldr	r3, [pc, #388]	@ (800ba64 <UART_SetConfig+0x2d4>)
 800b8de:	fba3 2302 	umull	r2, r3, r3, r2
 800b8e2:	095b      	lsrs	r3, r3, #5
 800b8e4:	011c      	lsls	r4, r3, #4
 800b8e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b8f0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b8f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b8f8:	4642      	mov	r2, r8
 800b8fa:	464b      	mov	r3, r9
 800b8fc:	1891      	adds	r1, r2, r2
 800b8fe:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b900:	415b      	adcs	r3, r3
 800b902:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b904:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b908:	4641      	mov	r1, r8
 800b90a:	eb12 0a01 	adds.w	sl, r2, r1
 800b90e:	4649      	mov	r1, r9
 800b910:	eb43 0b01 	adc.w	fp, r3, r1
 800b914:	f04f 0200 	mov.w	r2, #0
 800b918:	f04f 0300 	mov.w	r3, #0
 800b91c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b920:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b924:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b928:	4692      	mov	sl, r2
 800b92a:	469b      	mov	fp, r3
 800b92c:	4643      	mov	r3, r8
 800b92e:	eb1a 0303 	adds.w	r3, sl, r3
 800b932:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b936:	464b      	mov	r3, r9
 800b938:	eb4b 0303 	adc.w	r3, fp, r3
 800b93c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b944:	685b      	ldr	r3, [r3, #4]
 800b946:	2200      	movs	r2, #0
 800b948:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b94c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b950:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b954:	460b      	mov	r3, r1
 800b956:	18db      	adds	r3, r3, r3
 800b958:	643b      	str	r3, [r7, #64]	@ 0x40
 800b95a:	4613      	mov	r3, r2
 800b95c:	eb42 0303 	adc.w	r3, r2, r3
 800b960:	647b      	str	r3, [r7, #68]	@ 0x44
 800b962:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b966:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b96a:	f7f5 f97d 	bl	8000c68 <__aeabi_uldivmod>
 800b96e:	4602      	mov	r2, r0
 800b970:	460b      	mov	r3, r1
 800b972:	4611      	mov	r1, r2
 800b974:	4b3b      	ldr	r3, [pc, #236]	@ (800ba64 <UART_SetConfig+0x2d4>)
 800b976:	fba3 2301 	umull	r2, r3, r3, r1
 800b97a:	095b      	lsrs	r3, r3, #5
 800b97c:	2264      	movs	r2, #100	@ 0x64
 800b97e:	fb02 f303 	mul.w	r3, r2, r3
 800b982:	1acb      	subs	r3, r1, r3
 800b984:	00db      	lsls	r3, r3, #3
 800b986:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b98a:	4b36      	ldr	r3, [pc, #216]	@ (800ba64 <UART_SetConfig+0x2d4>)
 800b98c:	fba3 2302 	umull	r2, r3, r3, r2
 800b990:	095b      	lsrs	r3, r3, #5
 800b992:	005b      	lsls	r3, r3, #1
 800b994:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b998:	441c      	add	r4, r3
 800b99a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b99e:	2200      	movs	r2, #0
 800b9a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b9a4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b9a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b9ac:	4642      	mov	r2, r8
 800b9ae:	464b      	mov	r3, r9
 800b9b0:	1891      	adds	r1, r2, r2
 800b9b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b9b4:	415b      	adcs	r3, r3
 800b9b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b9b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b9bc:	4641      	mov	r1, r8
 800b9be:	1851      	adds	r1, r2, r1
 800b9c0:	6339      	str	r1, [r7, #48]	@ 0x30
 800b9c2:	4649      	mov	r1, r9
 800b9c4:	414b      	adcs	r3, r1
 800b9c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9c8:	f04f 0200 	mov.w	r2, #0
 800b9cc:	f04f 0300 	mov.w	r3, #0
 800b9d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b9d4:	4659      	mov	r1, fp
 800b9d6:	00cb      	lsls	r3, r1, #3
 800b9d8:	4651      	mov	r1, sl
 800b9da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b9de:	4651      	mov	r1, sl
 800b9e0:	00ca      	lsls	r2, r1, #3
 800b9e2:	4610      	mov	r0, r2
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	4642      	mov	r2, r8
 800b9ea:	189b      	adds	r3, r3, r2
 800b9ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b9f0:	464b      	mov	r3, r9
 800b9f2:	460a      	mov	r2, r1
 800b9f4:	eb42 0303 	adc.w	r3, r2, r3
 800b9f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b9fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ba00:	685b      	ldr	r3, [r3, #4]
 800ba02:	2200      	movs	r2, #0
 800ba04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ba08:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ba0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ba10:	460b      	mov	r3, r1
 800ba12:	18db      	adds	r3, r3, r3
 800ba14:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ba16:	4613      	mov	r3, r2
 800ba18:	eb42 0303 	adc.w	r3, r2, r3
 800ba1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ba1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ba22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800ba26:	f7f5 f91f 	bl	8000c68 <__aeabi_uldivmod>
 800ba2a:	4602      	mov	r2, r0
 800ba2c:	460b      	mov	r3, r1
 800ba2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ba64 <UART_SetConfig+0x2d4>)
 800ba30:	fba3 1302 	umull	r1, r3, r3, r2
 800ba34:	095b      	lsrs	r3, r3, #5
 800ba36:	2164      	movs	r1, #100	@ 0x64
 800ba38:	fb01 f303 	mul.w	r3, r1, r3
 800ba3c:	1ad3      	subs	r3, r2, r3
 800ba3e:	00db      	lsls	r3, r3, #3
 800ba40:	3332      	adds	r3, #50	@ 0x32
 800ba42:	4a08      	ldr	r2, [pc, #32]	@ (800ba64 <UART_SetConfig+0x2d4>)
 800ba44:	fba2 2303 	umull	r2, r3, r2, r3
 800ba48:	095b      	lsrs	r3, r3, #5
 800ba4a:	f003 0207 	and.w	r2, r3, #7
 800ba4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4422      	add	r2, r4
 800ba56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ba58:	e106      	b.n	800bc68 <UART_SetConfig+0x4d8>
 800ba5a:	bf00      	nop
 800ba5c:	40011000 	.word	0x40011000
 800ba60:	40011400 	.word	0x40011400
 800ba64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ba68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ba72:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800ba76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800ba7a:	4642      	mov	r2, r8
 800ba7c:	464b      	mov	r3, r9
 800ba7e:	1891      	adds	r1, r2, r2
 800ba80:	6239      	str	r1, [r7, #32]
 800ba82:	415b      	adcs	r3, r3
 800ba84:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ba8a:	4641      	mov	r1, r8
 800ba8c:	1854      	adds	r4, r2, r1
 800ba8e:	4649      	mov	r1, r9
 800ba90:	eb43 0501 	adc.w	r5, r3, r1
 800ba94:	f04f 0200 	mov.w	r2, #0
 800ba98:	f04f 0300 	mov.w	r3, #0
 800ba9c:	00eb      	lsls	r3, r5, #3
 800ba9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800baa2:	00e2      	lsls	r2, r4, #3
 800baa4:	4614      	mov	r4, r2
 800baa6:	461d      	mov	r5, r3
 800baa8:	4643      	mov	r3, r8
 800baaa:	18e3      	adds	r3, r4, r3
 800baac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bab0:	464b      	mov	r3, r9
 800bab2:	eb45 0303 	adc.w	r3, r5, r3
 800bab6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800baba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800babe:	685b      	ldr	r3, [r3, #4]
 800bac0:	2200      	movs	r2, #0
 800bac2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bac6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800baca:	f04f 0200 	mov.w	r2, #0
 800bace:	f04f 0300 	mov.w	r3, #0
 800bad2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800bad6:	4629      	mov	r1, r5
 800bad8:	008b      	lsls	r3, r1, #2
 800bada:	4621      	mov	r1, r4
 800badc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bae0:	4621      	mov	r1, r4
 800bae2:	008a      	lsls	r2, r1, #2
 800bae4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800bae8:	f7f5 f8be 	bl	8000c68 <__aeabi_uldivmod>
 800baec:	4602      	mov	r2, r0
 800baee:	460b      	mov	r3, r1
 800baf0:	4b60      	ldr	r3, [pc, #384]	@ (800bc74 <UART_SetConfig+0x4e4>)
 800baf2:	fba3 2302 	umull	r2, r3, r3, r2
 800baf6:	095b      	lsrs	r3, r3, #5
 800baf8:	011c      	lsls	r4, r3, #4
 800bafa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bafe:	2200      	movs	r2, #0
 800bb00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bb04:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800bb08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800bb0c:	4642      	mov	r2, r8
 800bb0e:	464b      	mov	r3, r9
 800bb10:	1891      	adds	r1, r2, r2
 800bb12:	61b9      	str	r1, [r7, #24]
 800bb14:	415b      	adcs	r3, r3
 800bb16:	61fb      	str	r3, [r7, #28]
 800bb18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bb1c:	4641      	mov	r1, r8
 800bb1e:	1851      	adds	r1, r2, r1
 800bb20:	6139      	str	r1, [r7, #16]
 800bb22:	4649      	mov	r1, r9
 800bb24:	414b      	adcs	r3, r1
 800bb26:	617b      	str	r3, [r7, #20]
 800bb28:	f04f 0200 	mov.w	r2, #0
 800bb2c:	f04f 0300 	mov.w	r3, #0
 800bb30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bb34:	4659      	mov	r1, fp
 800bb36:	00cb      	lsls	r3, r1, #3
 800bb38:	4651      	mov	r1, sl
 800bb3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bb3e:	4651      	mov	r1, sl
 800bb40:	00ca      	lsls	r2, r1, #3
 800bb42:	4610      	mov	r0, r2
 800bb44:	4619      	mov	r1, r3
 800bb46:	4603      	mov	r3, r0
 800bb48:	4642      	mov	r2, r8
 800bb4a:	189b      	adds	r3, r3, r2
 800bb4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bb50:	464b      	mov	r3, r9
 800bb52:	460a      	mov	r2, r1
 800bb54:	eb42 0303 	adc.w	r3, r2, r3
 800bb58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bb5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	2200      	movs	r2, #0
 800bb64:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bb66:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800bb68:	f04f 0200 	mov.w	r2, #0
 800bb6c:	f04f 0300 	mov.w	r3, #0
 800bb70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800bb74:	4649      	mov	r1, r9
 800bb76:	008b      	lsls	r3, r1, #2
 800bb78:	4641      	mov	r1, r8
 800bb7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bb7e:	4641      	mov	r1, r8
 800bb80:	008a      	lsls	r2, r1, #2
 800bb82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800bb86:	f7f5 f86f 	bl	8000c68 <__aeabi_uldivmod>
 800bb8a:	4602      	mov	r2, r0
 800bb8c:	460b      	mov	r3, r1
 800bb8e:	4611      	mov	r1, r2
 800bb90:	4b38      	ldr	r3, [pc, #224]	@ (800bc74 <UART_SetConfig+0x4e4>)
 800bb92:	fba3 2301 	umull	r2, r3, r3, r1
 800bb96:	095b      	lsrs	r3, r3, #5
 800bb98:	2264      	movs	r2, #100	@ 0x64
 800bb9a:	fb02 f303 	mul.w	r3, r2, r3
 800bb9e:	1acb      	subs	r3, r1, r3
 800bba0:	011b      	lsls	r3, r3, #4
 800bba2:	3332      	adds	r3, #50	@ 0x32
 800bba4:	4a33      	ldr	r2, [pc, #204]	@ (800bc74 <UART_SetConfig+0x4e4>)
 800bba6:	fba2 2303 	umull	r2, r3, r2, r3
 800bbaa:	095b      	lsrs	r3, r3, #5
 800bbac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bbb0:	441c      	add	r4, r3
 800bbb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	673b      	str	r3, [r7, #112]	@ 0x70
 800bbba:	677a      	str	r2, [r7, #116]	@ 0x74
 800bbbc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800bbc0:	4642      	mov	r2, r8
 800bbc2:	464b      	mov	r3, r9
 800bbc4:	1891      	adds	r1, r2, r2
 800bbc6:	60b9      	str	r1, [r7, #8]
 800bbc8:	415b      	adcs	r3, r3
 800bbca:	60fb      	str	r3, [r7, #12]
 800bbcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bbd0:	4641      	mov	r1, r8
 800bbd2:	1851      	adds	r1, r2, r1
 800bbd4:	6039      	str	r1, [r7, #0]
 800bbd6:	4649      	mov	r1, r9
 800bbd8:	414b      	adcs	r3, r1
 800bbda:	607b      	str	r3, [r7, #4]
 800bbdc:	f04f 0200 	mov.w	r2, #0
 800bbe0:	f04f 0300 	mov.w	r3, #0
 800bbe4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bbe8:	4659      	mov	r1, fp
 800bbea:	00cb      	lsls	r3, r1, #3
 800bbec:	4651      	mov	r1, sl
 800bbee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bbf2:	4651      	mov	r1, sl
 800bbf4:	00ca      	lsls	r2, r1, #3
 800bbf6:	4610      	mov	r0, r2
 800bbf8:	4619      	mov	r1, r3
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	4642      	mov	r2, r8
 800bbfe:	189b      	adds	r3, r3, r2
 800bc00:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bc02:	464b      	mov	r3, r9
 800bc04:	460a      	mov	r2, r1
 800bc06:	eb42 0303 	adc.w	r3, r2, r3
 800bc0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bc0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc10:	685b      	ldr	r3, [r3, #4]
 800bc12:	2200      	movs	r2, #0
 800bc14:	663b      	str	r3, [r7, #96]	@ 0x60
 800bc16:	667a      	str	r2, [r7, #100]	@ 0x64
 800bc18:	f04f 0200 	mov.w	r2, #0
 800bc1c:	f04f 0300 	mov.w	r3, #0
 800bc20:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800bc24:	4649      	mov	r1, r9
 800bc26:	008b      	lsls	r3, r1, #2
 800bc28:	4641      	mov	r1, r8
 800bc2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bc2e:	4641      	mov	r1, r8
 800bc30:	008a      	lsls	r2, r1, #2
 800bc32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800bc36:	f7f5 f817 	bl	8000c68 <__aeabi_uldivmod>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	4b0d      	ldr	r3, [pc, #52]	@ (800bc74 <UART_SetConfig+0x4e4>)
 800bc40:	fba3 1302 	umull	r1, r3, r3, r2
 800bc44:	095b      	lsrs	r3, r3, #5
 800bc46:	2164      	movs	r1, #100	@ 0x64
 800bc48:	fb01 f303 	mul.w	r3, r1, r3
 800bc4c:	1ad3      	subs	r3, r2, r3
 800bc4e:	011b      	lsls	r3, r3, #4
 800bc50:	3332      	adds	r3, #50	@ 0x32
 800bc52:	4a08      	ldr	r2, [pc, #32]	@ (800bc74 <UART_SetConfig+0x4e4>)
 800bc54:	fba2 2303 	umull	r2, r3, r2, r3
 800bc58:	095b      	lsrs	r3, r3, #5
 800bc5a:	f003 020f 	and.w	r2, r3, #15
 800bc5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	4422      	add	r2, r4
 800bc66:	609a      	str	r2, [r3, #8]
}
 800bc68:	bf00      	nop
 800bc6a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bc74:	51eb851f 	.word	0x51eb851f

0800bc78 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b083      	sub	sp, #12
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d123      	bne.n	800bcd2 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800bc92:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bc96:	683a      	ldr	r2, [r7, #0]
 800bc98:	6851      	ldr	r1, [r2, #4]
 800bc9a:	683a      	ldr	r2, [r7, #0]
 800bc9c:	6892      	ldr	r2, [r2, #8]
 800bc9e:	4311      	orrs	r1, r2
 800bca0:	683a      	ldr	r2, [r7, #0]
 800bca2:	68d2      	ldr	r2, [r2, #12]
 800bca4:	4311      	orrs	r1, r2
 800bca6:	683a      	ldr	r2, [r7, #0]
 800bca8:	6912      	ldr	r2, [r2, #16]
 800bcaa:	4311      	orrs	r1, r2
 800bcac:	683a      	ldr	r2, [r7, #0]
 800bcae:	6952      	ldr	r2, [r2, #20]
 800bcb0:	4311      	orrs	r1, r2
 800bcb2:	683a      	ldr	r2, [r7, #0]
 800bcb4:	6992      	ldr	r2, [r2, #24]
 800bcb6:	4311      	orrs	r1, r2
 800bcb8:	683a      	ldr	r2, [r7, #0]
 800bcba:	69d2      	ldr	r2, [r2, #28]
 800bcbc:	4311      	orrs	r1, r2
 800bcbe:	683a      	ldr	r2, [r7, #0]
 800bcc0:	6a12      	ldr	r2, [r2, #32]
 800bcc2:	4311      	orrs	r1, r2
 800bcc4:	683a      	ldr	r2, [r7, #0]
 800bcc6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800bcc8:	430a      	orrs	r2, r1
 800bcca:	431a      	orrs	r2, r3
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	601a      	str	r2, [r3, #0]
 800bcd0:	e028      	b.n	800bd24 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	69d9      	ldr	r1, [r3, #28]
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	6a1b      	ldr	r3, [r3, #32]
 800bce2:	4319      	orrs	r1, r3
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bce8:	430b      	orrs	r3, r1
 800bcea:	431a      	orrs	r2, r3
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	685b      	ldr	r3, [r3, #4]
 800bcf4:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800bcf8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bcfc:	683a      	ldr	r2, [r7, #0]
 800bcfe:	6851      	ldr	r1, [r2, #4]
 800bd00:	683a      	ldr	r2, [r7, #0]
 800bd02:	6892      	ldr	r2, [r2, #8]
 800bd04:	4311      	orrs	r1, r2
 800bd06:	683a      	ldr	r2, [r7, #0]
 800bd08:	68d2      	ldr	r2, [r2, #12]
 800bd0a:	4311      	orrs	r1, r2
 800bd0c:	683a      	ldr	r2, [r7, #0]
 800bd0e:	6912      	ldr	r2, [r2, #16]
 800bd10:	4311      	orrs	r1, r2
 800bd12:	683a      	ldr	r2, [r7, #0]
 800bd14:	6952      	ldr	r2, [r2, #20]
 800bd16:	4311      	orrs	r1, r2
 800bd18:	683a      	ldr	r2, [r7, #0]
 800bd1a:	6992      	ldr	r2, [r2, #24]
 800bd1c:	430a      	orrs	r2, r1
 800bd1e:	431a      	orrs	r2, r3
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800bd24:	2300      	movs	r3, #0
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	370c      	adds	r7, #12
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd30:	4770      	bx	lr

0800bd32 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bd32:	b480      	push	{r7}
 800bd34:	b085      	sub	sp, #20
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	60f8      	str	r0, [r7, #12]
 800bd3a:	60b9      	str	r1, [r7, #8]
 800bd3c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d128      	bne.n	800bd96 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	689b      	ldr	r3, [r3, #8]
 800bd48:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	1e59      	subs	r1, r3, #1
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	3b01      	subs	r3, #1
 800bd58:	011b      	lsls	r3, r3, #4
 800bd5a:	4319      	orrs	r1, r3
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	689b      	ldr	r3, [r3, #8]
 800bd60:	3b01      	subs	r3, #1
 800bd62:	021b      	lsls	r3, r3, #8
 800bd64:	4319      	orrs	r1, r3
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	68db      	ldr	r3, [r3, #12]
 800bd6a:	3b01      	subs	r3, #1
 800bd6c:	031b      	lsls	r3, r3, #12
 800bd6e:	4319      	orrs	r1, r3
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	691b      	ldr	r3, [r3, #16]
 800bd74:	3b01      	subs	r3, #1
 800bd76:	041b      	lsls	r3, r3, #16
 800bd78:	4319      	orrs	r1, r3
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	695b      	ldr	r3, [r3, #20]
 800bd7e:	3b01      	subs	r3, #1
 800bd80:	051b      	lsls	r3, r3, #20
 800bd82:	4319      	orrs	r1, r3
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	699b      	ldr	r3, [r3, #24]
 800bd88:	3b01      	subs	r3, #1
 800bd8a:	061b      	lsls	r3, r3, #24
 800bd8c:	430b      	orrs	r3, r1
 800bd8e:	431a      	orrs	r2, r3
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	609a      	str	r2, [r3, #8]
 800bd94:	e02f      	b.n	800bdf6 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	689b      	ldr	r3, [r3, #8]
 800bd9a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bd9e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bda2:	68ba      	ldr	r2, [r7, #8]
 800bda4:	68d2      	ldr	r2, [r2, #12]
 800bda6:	3a01      	subs	r2, #1
 800bda8:	0311      	lsls	r1, r2, #12
 800bdaa:	68ba      	ldr	r2, [r7, #8]
 800bdac:	6952      	ldr	r2, [r2, #20]
 800bdae:	3a01      	subs	r2, #1
 800bdb0:	0512      	lsls	r2, r2, #20
 800bdb2:	430a      	orrs	r2, r1
 800bdb4:	431a      	orrs	r2, r3
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	68db      	ldr	r3, [r3, #12]
 800bdbe:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	1e59      	subs	r1, r3, #1
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	685b      	ldr	r3, [r3, #4]
 800bdcc:	3b01      	subs	r3, #1
 800bdce:	011b      	lsls	r3, r3, #4
 800bdd0:	4319      	orrs	r1, r3
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	689b      	ldr	r3, [r3, #8]
 800bdd6:	3b01      	subs	r3, #1
 800bdd8:	021b      	lsls	r3, r3, #8
 800bdda:	4319      	orrs	r1, r3
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	691b      	ldr	r3, [r3, #16]
 800bde0:	3b01      	subs	r3, #1
 800bde2:	041b      	lsls	r3, r3, #16
 800bde4:	4319      	orrs	r1, r3
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	699b      	ldr	r3, [r3, #24]
 800bdea:	3b01      	subs	r3, #1
 800bdec:	061b      	lsls	r3, r3, #24
 800bdee:	430b      	orrs	r3, r1
 800bdf0:	431a      	orrs	r2, r3
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800bdf6:	2300      	movs	r3, #0
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3714      	adds	r7, #20
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be02:	4770      	bx	lr

0800be04 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800be04:	b480      	push	{r7}
 800be06:	b083      	sub	sp, #12
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	689b      	ldr	r3, [r3, #8]
 800be10:	f043 0201 	orr.w	r2, r3, #1
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800be18:	2300      	movs	r3, #0
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	370c      	adds	r7, #12
 800be1e:	46bd      	mov	sp, r7
 800be20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be24:	4770      	bx	lr

0800be26 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800be26:	b480      	push	{r7}
 800be28:	b083      	sub	sp, #12
 800be2a:	af00      	add	r7, sp, #0
 800be2c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	689b      	ldr	r3, [r3, #8]
 800be32:	f023 0201 	bic.w	r2, r3, #1
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800be3a:	2300      	movs	r3, #0
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	370c      	adds	r7, #12
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr

0800be48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800be48:	b480      	push	{r7}
 800be4a:	b085      	sub	sp, #20
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800be52:	2300      	movs	r3, #0
 800be54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	3301      	adds	r3, #1
 800be5a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800be62:	d901      	bls.n	800be68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800be64:	2303      	movs	r3, #3
 800be66:	e01b      	b.n	800bea0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	691b      	ldr	r3, [r3, #16]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	daf2      	bge.n	800be56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800be70:	2300      	movs	r3, #0
 800be72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	019b      	lsls	r3, r3, #6
 800be78:	f043 0220 	orr.w	r2, r3, #32
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	3301      	adds	r3, #1
 800be84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800be8c:	d901      	bls.n	800be92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800be8e:	2303      	movs	r3, #3
 800be90:	e006      	b.n	800bea0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	691b      	ldr	r3, [r3, #16]
 800be96:	f003 0320 	and.w	r3, r3, #32
 800be9a:	2b20      	cmp	r3, #32
 800be9c:	d0f0      	beq.n	800be80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800be9e:	2300      	movs	r3, #0
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3714      	adds	r7, #20
 800bea4:	46bd      	mov	sp, r7
 800bea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beaa:	4770      	bx	lr

0800beac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800beac:	b480      	push	{r7}
 800beae:	b085      	sub	sp, #20
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800beb4:	2300      	movs	r3, #0
 800beb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	3301      	adds	r3, #1
 800bebc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bec4:	d901      	bls.n	800beca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bec6:	2303      	movs	r3, #3
 800bec8:	e018      	b.n	800befc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	691b      	ldr	r3, [r3, #16]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	daf2      	bge.n	800beb8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bed2:	2300      	movs	r3, #0
 800bed4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2210      	movs	r2, #16
 800beda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	3301      	adds	r3, #1
 800bee0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bee8:	d901      	bls.n	800beee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800beea:	2303      	movs	r3, #3
 800beec:	e006      	b.n	800befc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	691b      	ldr	r3, [r3, #16]
 800bef2:	f003 0310 	and.w	r3, r3, #16
 800bef6:	2b10      	cmp	r3, #16
 800bef8:	d0f0      	beq.n	800bedc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800befa:	2300      	movs	r3, #0
}
 800befc:	4618      	mov	r0, r3
 800befe:	3714      	adds	r7, #20
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr

0800bf08 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b08b      	sub	sp, #44	@ 0x2c
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	4613      	mov	r3, r2
 800bf14:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bf1e:	88fb      	ldrh	r3, [r7, #6]
 800bf20:	089b      	lsrs	r3, r3, #2
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bf26:	88fb      	ldrh	r3, [r7, #6]
 800bf28:	f003 0303 	and.w	r3, r3, #3
 800bf2c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bf2e:	2300      	movs	r3, #0
 800bf30:	623b      	str	r3, [r7, #32]
 800bf32:	e014      	b.n	800bf5e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bf34:	69bb      	ldr	r3, [r7, #24]
 800bf36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bf3a:	681a      	ldr	r2, [r3, #0]
 800bf3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf3e:	601a      	str	r2, [r3, #0]
    pDest++;
 800bf40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf42:	3301      	adds	r3, #1
 800bf44:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800bf46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf48:	3301      	adds	r3, #1
 800bf4a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800bf4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf4e:	3301      	adds	r3, #1
 800bf50:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800bf52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf54:	3301      	adds	r3, #1
 800bf56:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800bf58:	6a3b      	ldr	r3, [r7, #32]
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	623b      	str	r3, [r7, #32]
 800bf5e:	6a3a      	ldr	r2, [r7, #32]
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d3e6      	bcc.n	800bf34 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bf66:	8bfb      	ldrh	r3, [r7, #30]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d01e      	beq.n	800bfaa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bf70:	69bb      	ldr	r3, [r7, #24]
 800bf72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bf76:	461a      	mov	r2, r3
 800bf78:	f107 0310 	add.w	r3, r7, #16
 800bf7c:	6812      	ldr	r2, [r2, #0]
 800bf7e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bf80:	693a      	ldr	r2, [r7, #16]
 800bf82:	6a3b      	ldr	r3, [r7, #32]
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	00db      	lsls	r3, r3, #3
 800bf88:	fa22 f303 	lsr.w	r3, r2, r3
 800bf8c:	b2da      	uxtb	r2, r3
 800bf8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf90:	701a      	strb	r2, [r3, #0]
      i++;
 800bf92:	6a3b      	ldr	r3, [r7, #32]
 800bf94:	3301      	adds	r3, #1
 800bf96:	623b      	str	r3, [r7, #32]
      pDest++;
 800bf98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf9a:	3301      	adds	r3, #1
 800bf9c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800bf9e:	8bfb      	ldrh	r3, [r7, #30]
 800bfa0:	3b01      	subs	r3, #1
 800bfa2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bfa4:	8bfb      	ldrh	r3, [r7, #30]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d1ea      	bne.n	800bf80 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bfaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	372c      	adds	r7, #44	@ 0x2c
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb6:	4770      	bx	lr

0800bfb8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b085      	sub	sp, #20
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	695b      	ldr	r3, [r3, #20]
 800bfc4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	699b      	ldr	r3, [r3, #24]
 800bfca:	68fa      	ldr	r2, [r7, #12]
 800bfcc:	4013      	ands	r3, r2
 800bfce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3714      	adds	r7, #20
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr

0800bfde <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800bfde:	b480      	push	{r7}
 800bfe0:	b085      	sub	sp, #20
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
 800bfe6:	460b      	mov	r3, r1
 800bfe8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800bfee:	78fb      	ldrb	r3, [r7, #3]
 800bff0:	015a      	lsls	r2, r3, #5
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	4413      	add	r3, r2
 800bff6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bffa:	689b      	ldr	r3, [r3, #8]
 800bffc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800bffe:	78fb      	ldrb	r3, [r7, #3]
 800c000:	015a      	lsls	r2, r3, #5
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	4413      	add	r3, r2
 800c006:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c00a:	68db      	ldr	r3, [r3, #12]
 800c00c:	68ba      	ldr	r2, [r7, #8]
 800c00e:	4013      	ands	r3, r2
 800c010:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c012:	68bb      	ldr	r3, [r7, #8]
}
 800c014:	4618      	mov	r0, r3
 800c016:	3714      	adds	r7, #20
 800c018:	46bd      	mov	sp, r7
 800c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01e:	4770      	bx	lr

0800c020 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800c020:	b480      	push	{r7}
 800c022:	b083      	sub	sp, #12
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	695b      	ldr	r3, [r3, #20]
 800c02c:	f003 0301 	and.w	r3, r3, #1
}
 800c030:	4618      	mov	r0, r3
 800c032:	370c      	adds	r7, #12
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr

0800c03c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b085      	sub	sp, #20
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	460b      	mov	r3, r1
 800c046:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	68fa      	ldr	r2, [r7, #12]
 800c056:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c05a:	f023 0303 	bic.w	r3, r3, #3
 800c05e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c066:	681a      	ldr	r2, [r3, #0]
 800c068:	78fb      	ldrb	r3, [r7, #3]
 800c06a:	f003 0303 	and.w	r3, r3, #3
 800c06e:	68f9      	ldr	r1, [r7, #12]
 800c070:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800c074:	4313      	orrs	r3, r2
 800c076:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800c078:	78fb      	ldrb	r3, [r7, #3]
 800c07a:	2b01      	cmp	r3, #1
 800c07c:	d107      	bne.n	800c08e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c084:	461a      	mov	r2, r3
 800c086:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c08a:	6053      	str	r3, [r2, #4]
 800c08c:	e00c      	b.n	800c0a8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800c08e:	78fb      	ldrb	r3, [r7, #3]
 800c090:	2b02      	cmp	r3, #2
 800c092:	d107      	bne.n	800c0a4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c09a:	461a      	mov	r2, r3
 800c09c:	f241 7370 	movw	r3, #6000	@ 0x1770
 800c0a0:	6053      	str	r3, [r2, #4]
 800c0a2:	e001      	b.n	800c0a8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	e000      	b.n	800c0aa <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800c0a8:	2300      	movs	r3, #0
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3714      	adds	r7, #20
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b4:	4770      	bx	lr

0800c0b6 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c0b6:	b480      	push	{r7}
 800c0b8:	b085      	sub	sp, #20
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c0c8:	695b      	ldr	r3, [r3, #20]
 800c0ca:	b29b      	uxth	r3, r3
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3714      	adds	r7, #20
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d6:	4770      	bx	lr

0800c0d8 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b089      	sub	sp, #36	@ 0x24
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
 800c0e0:	460b      	mov	r3, r1
 800c0e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800c0e8:	78fb      	ldrb	r3, [r7, #3]
 800c0ea:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c0f0:	69bb      	ldr	r3, [r7, #24]
 800c0f2:	015a      	lsls	r2, r3, #5
 800c0f4:	69fb      	ldr	r3, [r7, #28]
 800c0f6:	4413      	add	r3, r2
 800c0f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	0c9b      	lsrs	r3, r3, #18
 800c100:	f003 0303 	and.w	r3, r3, #3
 800c104:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800c106:	69bb      	ldr	r3, [r7, #24]
 800c108:	015a      	lsls	r2, r3, #5
 800c10a:	69fb      	ldr	r3, [r7, #28]
 800c10c:	4413      	add	r3, r2
 800c10e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	0fdb      	lsrs	r3, r3, #31
 800c116:	f003 0301 	and.w	r3, r3, #1
 800c11a:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800c11c:	69bb      	ldr	r3, [r7, #24]
 800c11e:	015a      	lsls	r2, r3, #5
 800c120:	69fb      	ldr	r3, [r7, #28]
 800c122:	4413      	add	r3, r2
 800c124:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c128:	685b      	ldr	r3, [r3, #4]
 800c12a:	0fdb      	lsrs	r3, r3, #31
 800c12c:	f003 0301 	and.w	r3, r3, #1
 800c130:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	689b      	ldr	r3, [r3, #8]
 800c136:	f003 0320 	and.w	r3, r3, #32
 800c13a:	2b20      	cmp	r3, #32
 800c13c:	d10d      	bne.n	800c15a <USB_HC_Halt+0x82>
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d10a      	bne.n	800c15a <USB_HC_Halt+0x82>
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d005      	beq.n	800c156 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	d002      	beq.n	800c156 <USB_HC_Halt+0x7e>
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	2b03      	cmp	r3, #3
 800c154:	d101      	bne.n	800c15a <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800c156:	2300      	movs	r3, #0
 800c158:	e0d8      	b.n	800c30c <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d002      	beq.n	800c166 <USB_HC_Halt+0x8e>
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	2b02      	cmp	r3, #2
 800c164:	d173      	bne.n	800c24e <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c166:	69bb      	ldr	r3, [r7, #24]
 800c168:	015a      	lsls	r2, r3, #5
 800c16a:	69fb      	ldr	r3, [r7, #28]
 800c16c:	4413      	add	r3, r2
 800c16e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	69ba      	ldr	r2, [r7, #24]
 800c176:	0151      	lsls	r1, r2, #5
 800c178:	69fa      	ldr	r2, [r7, #28]
 800c17a:	440a      	add	r2, r1
 800c17c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c180:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c184:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	689b      	ldr	r3, [r3, #8]
 800c18a:	f003 0320 	and.w	r3, r3, #32
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d14a      	bne.n	800c228 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c196:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d133      	bne.n	800c206 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c19e:	69bb      	ldr	r3, [r7, #24]
 800c1a0:	015a      	lsls	r2, r3, #5
 800c1a2:	69fb      	ldr	r3, [r7, #28]
 800c1a4:	4413      	add	r3, r2
 800c1a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	69ba      	ldr	r2, [r7, #24]
 800c1ae:	0151      	lsls	r1, r2, #5
 800c1b0:	69fa      	ldr	r2, [r7, #28]
 800c1b2:	440a      	add	r2, r1
 800c1b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c1b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c1bc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c1be:	69bb      	ldr	r3, [r7, #24]
 800c1c0:	015a      	lsls	r2, r3, #5
 800c1c2:	69fb      	ldr	r3, [r7, #28]
 800c1c4:	4413      	add	r3, r2
 800c1c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	69ba      	ldr	r2, [r7, #24]
 800c1ce:	0151      	lsls	r1, r2, #5
 800c1d0:	69fa      	ldr	r2, [r7, #28]
 800c1d2:	440a      	add	r2, r1
 800c1d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c1d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c1dc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	3301      	adds	r3, #1
 800c1e2:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c1ea:	d82e      	bhi.n	800c24a <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c1ec:	69bb      	ldr	r3, [r7, #24]
 800c1ee:	015a      	lsls	r2, r3, #5
 800c1f0:	69fb      	ldr	r3, [r7, #28]
 800c1f2:	4413      	add	r3, r2
 800c1f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c1fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c202:	d0ec      	beq.n	800c1de <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c204:	e081      	b.n	800c30a <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c206:	69bb      	ldr	r3, [r7, #24]
 800c208:	015a      	lsls	r2, r3, #5
 800c20a:	69fb      	ldr	r3, [r7, #28]
 800c20c:	4413      	add	r3, r2
 800c20e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	69ba      	ldr	r2, [r7, #24]
 800c216:	0151      	lsls	r1, r2, #5
 800c218:	69fa      	ldr	r2, [r7, #28]
 800c21a:	440a      	add	r2, r1
 800c21c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c220:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c224:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c226:	e070      	b.n	800c30a <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c228:	69bb      	ldr	r3, [r7, #24]
 800c22a:	015a      	lsls	r2, r3, #5
 800c22c:	69fb      	ldr	r3, [r7, #28]
 800c22e:	4413      	add	r3, r2
 800c230:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	69ba      	ldr	r2, [r7, #24]
 800c238:	0151      	lsls	r1, r2, #5
 800c23a:	69fa      	ldr	r2, [r7, #28]
 800c23c:	440a      	add	r2, r1
 800c23e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c242:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c246:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c248:	e05f      	b.n	800c30a <USB_HC_Halt+0x232>
            break;
 800c24a:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c24c:	e05d      	b.n	800c30a <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c24e:	69bb      	ldr	r3, [r7, #24]
 800c250:	015a      	lsls	r2, r3, #5
 800c252:	69fb      	ldr	r3, [r7, #28]
 800c254:	4413      	add	r3, r2
 800c256:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	69ba      	ldr	r2, [r7, #24]
 800c25e:	0151      	lsls	r1, r2, #5
 800c260:	69fa      	ldr	r2, [r7, #28]
 800c262:	440a      	add	r2, r1
 800c264:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c268:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c26c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c26e:	69fb      	ldr	r3, [r7, #28]
 800c270:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c274:	691b      	ldr	r3, [r3, #16]
 800c276:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d133      	bne.n	800c2e6 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c27e:	69bb      	ldr	r3, [r7, #24]
 800c280:	015a      	lsls	r2, r3, #5
 800c282:	69fb      	ldr	r3, [r7, #28]
 800c284:	4413      	add	r3, r2
 800c286:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	69ba      	ldr	r2, [r7, #24]
 800c28e:	0151      	lsls	r1, r2, #5
 800c290:	69fa      	ldr	r2, [r7, #28]
 800c292:	440a      	add	r2, r1
 800c294:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c298:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c29c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c29e:	69bb      	ldr	r3, [r7, #24]
 800c2a0:	015a      	lsls	r2, r3, #5
 800c2a2:	69fb      	ldr	r3, [r7, #28]
 800c2a4:	4413      	add	r3, r2
 800c2a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	69ba      	ldr	r2, [r7, #24]
 800c2ae:	0151      	lsls	r1, r2, #5
 800c2b0:	69fa      	ldr	r2, [r7, #28]
 800c2b2:	440a      	add	r2, r1
 800c2b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c2b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c2bc:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	3301      	adds	r3, #1
 800c2c2:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c2ca:	d81d      	bhi.n	800c308 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c2cc:	69bb      	ldr	r3, [r7, #24]
 800c2ce:	015a      	lsls	r2, r3, #5
 800c2d0:	69fb      	ldr	r3, [r7, #28]
 800c2d2:	4413      	add	r3, r2
 800c2d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c2de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c2e2:	d0ec      	beq.n	800c2be <USB_HC_Halt+0x1e6>
 800c2e4:	e011      	b.n	800c30a <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c2e6:	69bb      	ldr	r3, [r7, #24]
 800c2e8:	015a      	lsls	r2, r3, #5
 800c2ea:	69fb      	ldr	r3, [r7, #28]
 800c2ec:	4413      	add	r3, r2
 800c2ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	69ba      	ldr	r2, [r7, #24]
 800c2f6:	0151      	lsls	r1, r2, #5
 800c2f8:	69fa      	ldr	r2, [r7, #28]
 800c2fa:	440a      	add	r2, r1
 800c2fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c300:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c304:	6013      	str	r3, [r2, #0]
 800c306:	e000      	b.n	800c30a <USB_HC_Halt+0x232>
          break;
 800c308:	bf00      	nop
    }
  }

  return HAL_OK;
 800c30a:	2300      	movs	r3, #0
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3724      	adds	r7, #36	@ 0x24
 800c310:	46bd      	mov	sp, r7
 800c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c316:	4770      	bx	lr

0800c318 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b088      	sub	sp, #32
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800c320:	2300      	movs	r3, #0
 800c322:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800c328:	2300      	movs	r3, #0
 800c32a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f7ff fd7a 	bl	800be26 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c332:	2110      	movs	r1, #16
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f7ff fd87 	bl	800be48 <USB_FlushTxFifo>
 800c33a:	4603      	mov	r3, r0
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d001      	beq.n	800c344 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800c340:	2301      	movs	r3, #1
 800c342:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f7ff fdb1 	bl	800beac <USB_FlushRxFifo>
 800c34a:	4603      	mov	r3, r0
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d001      	beq.n	800c354 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800c350:	2301      	movs	r3, #1
 800c352:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800c354:	2300      	movs	r3, #0
 800c356:	61bb      	str	r3, [r7, #24]
 800c358:	e01f      	b.n	800c39a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800c35a:	69bb      	ldr	r3, [r7, #24]
 800c35c:	015a      	lsls	r2, r3, #5
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	4413      	add	r3, r2
 800c362:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c370:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c378:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c380:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800c382:	69bb      	ldr	r3, [r7, #24]
 800c384:	015a      	lsls	r2, r3, #5
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	4413      	add	r3, r2
 800c38a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c38e:	461a      	mov	r2, r3
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800c394:	69bb      	ldr	r3, [r7, #24]
 800c396:	3301      	adds	r3, #1
 800c398:	61bb      	str	r3, [r7, #24]
 800c39a:	69bb      	ldr	r3, [r7, #24]
 800c39c:	2b0f      	cmp	r3, #15
 800c39e:	d9dc      	bls.n	800c35a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	61bb      	str	r3, [r7, #24]
 800c3a4:	e034      	b.n	800c410 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800c3a6:	69bb      	ldr	r3, [r7, #24]
 800c3a8:	015a      	lsls	r2, r3, #5
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	4413      	add	r3, r2
 800c3ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c3bc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800c3be:	693b      	ldr	r3, [r7, #16]
 800c3c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c3c4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c3cc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800c3ce:	69bb      	ldr	r3, [r7, #24]
 800c3d0:	015a      	lsls	r2, r3, #5
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	4413      	add	r3, r2
 800c3d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c3da:	461a      	mov	r2, r3
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	3301      	adds	r3, #1
 800c3e4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c3ec:	d80c      	bhi.n	800c408 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c3ee:	69bb      	ldr	r3, [r7, #24]
 800c3f0:	015a      	lsls	r2, r3, #5
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	4413      	add	r3, r2
 800c3f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c400:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c404:	d0ec      	beq.n	800c3e0 <USB_StopHost+0xc8>
 800c406:	e000      	b.n	800c40a <USB_StopHost+0xf2>
        break;
 800c408:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800c40a:	69bb      	ldr	r3, [r7, #24]
 800c40c:	3301      	adds	r3, #1
 800c40e:	61bb      	str	r3, [r7, #24]
 800c410:	69bb      	ldr	r3, [r7, #24]
 800c412:	2b0f      	cmp	r3, #15
 800c414:	d9c7      	bls.n	800c3a6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c41c:	461a      	mov	r2, r3
 800c41e:	f04f 33ff 	mov.w	r3, #4294967295
 800c422:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f04f 32ff 	mov.w	r2, #4294967295
 800c42a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f7ff fce9 	bl	800be04 <USB_EnableGlobalInt>

  return ret;
 800c432:	7ffb      	ldrb	r3, [r7, #31]
}
 800c434:	4618      	mov	r0, r3
 800c436:	3720      	adds	r7, #32
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c44a:	1c5a      	adds	r2, r3, #1
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800c452:	6878      	ldr	r0, [r7, #4]
 800c454:	f000 f804 	bl	800c460 <USBH_HandleSof>
}
 800c458:	bf00      	nop
 800c45a:	3708      	adds	r7, #8
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b082      	sub	sp, #8
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	b2db      	uxtb	r3, r3
 800c46e:	2b0b      	cmp	r3, #11
 800c470:	d10a      	bne.n	800c488 <USBH_HandleSof+0x28>
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d005      	beq.n	800c488 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c482:	699b      	ldr	r3, [r3, #24]
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	4798      	blx	r3
  }
}
 800c488:	bf00      	nop
 800c48a:	3708      	adds	r7, #8
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}

0800c490 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b082      	sub	sp, #8
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2201      	movs	r2, #1
 800c49c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	4619      	mov	r1, r3
 800c4b8:	f000 f8ae 	bl	800c618 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800c4bc:	bf00      	nop
}
 800c4be:	3708      	adds	r7, #8
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b083      	sub	sp, #12
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800c4d4:	bf00      	nop
}
 800c4d6:	370c      	adds	r7, #12
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr

0800c4e0 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b082      	sub	sp, #8
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2201      	movs	r2, #1
 800c504:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c514:	2200      	movs	r2, #0
 800c516:	4619      	mov	r1, r3
 800c518:	f000 f87e 	bl	800c618 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c51c:	2300      	movs	r3, #0
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3708      	adds	r7, #8
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}

0800c526 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c526:	b580      	push	{r7, lr}
 800c528:	b082      	sub	sp, #8
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2201      	movs	r2, #1
 800c532:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2200      	movs	r2, #0
 800c53a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2200      	movs	r2, #0
 800c542:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f001 f902 	bl	800d750 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	791b      	ldrb	r3, [r3, #4]
 800c550:	4619      	mov	r1, r3
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f000 f830 	bl	800c5b8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	795b      	ldrb	r3, [r3, #5]
 800c55c:	4619      	mov	r1, r3
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f000 f82a 	bl	800c5b8 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2201      	movs	r2, #1
 800c568:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c578:	2200      	movs	r2, #0
 800c57a:	4619      	mov	r1, r3
 800c57c:	f000 f84c 	bl	800c618 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c580:	2300      	movs	r3, #0
}
 800c582:	4618      	mov	r0, r3
 800c584:	3708      	adds	r7, #8
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}

0800c58a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800c58a:	b580      	push	{r7, lr}
 800c58c:	b082      	sub	sp, #8
 800c58e:	af00      	add	r7, sp, #0
 800c590:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2201      	movs	r2, #1
 800c596:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	4619      	mov	r1, r3
 800c5aa:	f000 f835 	bl	800c618 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800c5ae:	2300      	movs	r3, #0
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3708      	adds	r7, #8
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b083      	sub	sp, #12
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
 800c5c0:	460b      	mov	r3, r1
 800c5c2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800c5c4:	78fb      	ldrb	r3, [r7, #3]
 800c5c6:	2b0f      	cmp	r3, #15
 800c5c8:	d80d      	bhi.n	800c5e6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c5ca:	78fb      	ldrb	r3, [r7, #3]
 800c5cc:	687a      	ldr	r2, [r7, #4]
 800c5ce:	33e0      	adds	r3, #224	@ 0xe0
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	4413      	add	r3, r2
 800c5d4:	685a      	ldr	r2, [r3, #4]
 800c5d6:	78fb      	ldrb	r3, [r7, #3]
 800c5d8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c5dc:	6879      	ldr	r1, [r7, #4]
 800c5de:	33e0      	adds	r3, #224	@ 0xe0
 800c5e0:	009b      	lsls	r3, r3, #2
 800c5e2:	440b      	add	r3, r1
 800c5e4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c5e6:	2300      	movs	r3, #0
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	370c      	adds	r7, #12
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f2:	4770      	bx	lr

0800c5f4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b083      	sub	sp, #12
 800c5f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5fa:	f3ef 8305 	mrs	r3, IPSR
 800c5fe:	607b      	str	r3, [r7, #4]
  return(result);
 800c600:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c602:	2b00      	cmp	r3, #0
 800c604:	bf14      	ite	ne
 800c606:	2301      	movne	r3, #1
 800c608:	2300      	moveq	r3, #0
 800c60a:	b2db      	uxtb	r3, r3
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	370c      	adds	r7, #12
 800c610:	46bd      	mov	sp, r7
 800c612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c616:	4770      	bx	lr

0800c618 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b086      	sub	sp, #24
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	60f8      	str	r0, [r7, #12]
 800c620:	60b9      	str	r1, [r7, #8]
 800c622:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c624:	2300      	movs	r3, #0
 800c626:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d101      	bne.n	800c636 <osMessagePut+0x1e>
    ticks = 1;
 800c632:	2301      	movs	r3, #1
 800c634:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c636:	f7ff ffdd 	bl	800c5f4 <inHandlerMode>
 800c63a:	4603      	mov	r3, r0
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d018      	beq.n	800c672 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c640:	f107 0210 	add.w	r2, r7, #16
 800c644:	f107 0108 	add.w	r1, r7, #8
 800c648:	2300      	movs	r3, #0
 800c64a:	68f8      	ldr	r0, [r7, #12]
 800c64c:	f000 f9ae 	bl	800c9ac <xQueueGenericSendFromISR>
 800c650:	4603      	mov	r3, r0
 800c652:	2b01      	cmp	r3, #1
 800c654:	d001      	beq.n	800c65a <osMessagePut+0x42>
      return osErrorOS;
 800c656:	23ff      	movs	r3, #255	@ 0xff
 800c658:	e018      	b.n	800c68c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d014      	beq.n	800c68a <osMessagePut+0x72>
 800c660:	4b0c      	ldr	r3, [pc, #48]	@ (800c694 <osMessagePut+0x7c>)
 800c662:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c666:	601a      	str	r2, [r3, #0]
 800c668:	f3bf 8f4f 	dsb	sy
 800c66c:	f3bf 8f6f 	isb	sy
 800c670:	e00b      	b.n	800c68a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c672:	f107 0108 	add.w	r1, r7, #8
 800c676:	2300      	movs	r3, #0
 800c678:	697a      	ldr	r2, [r7, #20]
 800c67a:	68f8      	ldr	r0, [r7, #12]
 800c67c:	f000 f894 	bl	800c7a8 <xQueueGenericSend>
 800c680:	4603      	mov	r3, r0
 800c682:	2b01      	cmp	r3, #1
 800c684:	d001      	beq.n	800c68a <osMessagePut+0x72>
      return osErrorOS;
 800c686:	23ff      	movs	r3, #255	@ 0xff
 800c688:	e000      	b.n	800c68c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800c68a:	2300      	movs	r3, #0
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3718      	adds	r7, #24
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}
 800c694:	e000ed04 	.word	0xe000ed04

0800c698 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c698:	b480      	push	{r7}
 800c69a:	b085      	sub	sp, #20
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	685b      	ldr	r3, [r3, #4]
 800c6a6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	68fa      	ldr	r2, [r7, #12]
 800c6ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	689a      	ldr	r2, [r3, #8]
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	689b      	ldr	r3, [r3, #8]
 800c6ba:	683a      	ldr	r2, [r7, #0]
 800c6bc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	683a      	ldr	r2, [r7, #0]
 800c6c2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	687a      	ldr	r2, [r7, #4]
 800c6c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	1c5a      	adds	r2, r3, #1
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	601a      	str	r2, [r3, #0]
}
 800c6d4:	bf00      	nop
 800c6d6:	3714      	adds	r7, #20
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr

0800c6e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b085      	sub	sp, #20
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6f6:	d103      	bne.n	800c700 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	691b      	ldr	r3, [r3, #16]
 800c6fc:	60fb      	str	r3, [r7, #12]
 800c6fe:	e00c      	b.n	800c71a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	3308      	adds	r3, #8
 800c704:	60fb      	str	r3, [r7, #12]
 800c706:	e002      	b.n	800c70e <vListInsert+0x2e>
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	685b      	ldr	r3, [r3, #4]
 800c70c:	60fb      	str	r3, [r7, #12]
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	685b      	ldr	r3, [r3, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	68ba      	ldr	r2, [r7, #8]
 800c716:	429a      	cmp	r2, r3
 800c718:	d2f6      	bcs.n	800c708 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	685a      	ldr	r2, [r3, #4]
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	683a      	ldr	r2, [r7, #0]
 800c728:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	68fa      	ldr	r2, [r7, #12]
 800c72e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	683a      	ldr	r2, [r7, #0]
 800c734:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	687a      	ldr	r2, [r7, #4]
 800c73a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	1c5a      	adds	r2, r3, #1
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	601a      	str	r2, [r3, #0]
}
 800c746:	bf00      	nop
 800c748:	3714      	adds	r7, #20
 800c74a:	46bd      	mov	sp, r7
 800c74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c750:	4770      	bx	lr

0800c752 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c752:	b480      	push	{r7}
 800c754:	b085      	sub	sp, #20
 800c756:	af00      	add	r7, sp, #0
 800c758:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	691b      	ldr	r3, [r3, #16]
 800c75e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	685b      	ldr	r3, [r3, #4]
 800c764:	687a      	ldr	r2, [r7, #4]
 800c766:	6892      	ldr	r2, [r2, #8]
 800c768:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	689b      	ldr	r3, [r3, #8]
 800c76e:	687a      	ldr	r2, [r7, #4]
 800c770:	6852      	ldr	r2, [r2, #4]
 800c772:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	687a      	ldr	r2, [r7, #4]
 800c77a:	429a      	cmp	r2, r3
 800c77c:	d103      	bne.n	800c786 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	689a      	ldr	r2, [r3, #8]
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2200      	movs	r2, #0
 800c78a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	1e5a      	subs	r2, r3, #1
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681b      	ldr	r3, [r3, #0]
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3714      	adds	r7, #20
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a4:	4770      	bx	lr
	...

0800c7a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b08e      	sub	sp, #56	@ 0x38
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	60f8      	str	r0, [r7, #12]
 800c7b0:	60b9      	str	r1, [r7, #8]
 800c7b2:	607a      	str	r2, [r7, #4]
 800c7b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c7be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d10b      	bne.n	800c7dc <xQueueGenericSend+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c7c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7c8:	f383 8811 	msr	BASEPRI, r3
 800c7cc:	f3bf 8f6f 	isb	sy
 800c7d0:	f3bf 8f4f 	dsb	sy
 800c7d4:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c7d6:	bf00      	nop
 800c7d8:	bf00      	nop
 800c7da:	e7fd      	b.n	800c7d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d103      	bne.n	800c7ea <xQueueGenericSend+0x42>
 800c7e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d101      	bne.n	800c7ee <xQueueGenericSend+0x46>
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	e000      	b.n	800c7f0 <xQueueGenericSend+0x48>
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d10b      	bne.n	800c80c <xQueueGenericSend+0x64>
	__asm volatile
 800c7f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7f8:	f383 8811 	msr	BASEPRI, r3
 800c7fc:	f3bf 8f6f 	isb	sy
 800c800:	f3bf 8f4f 	dsb	sy
 800c804:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c806:	bf00      	nop
 800c808:	bf00      	nop
 800c80a:	e7fd      	b.n	800c808 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	2b02      	cmp	r3, #2
 800c810:	d103      	bne.n	800c81a <xQueueGenericSend+0x72>
 800c812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c816:	2b01      	cmp	r3, #1
 800c818:	d101      	bne.n	800c81e <xQueueGenericSend+0x76>
 800c81a:	2301      	movs	r3, #1
 800c81c:	e000      	b.n	800c820 <xQueueGenericSend+0x78>
 800c81e:	2300      	movs	r3, #0
 800c820:	2b00      	cmp	r3, #0
 800c822:	d10b      	bne.n	800c83c <xQueueGenericSend+0x94>
	__asm volatile
 800c824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c828:	f383 8811 	msr	BASEPRI, r3
 800c82c:	f3bf 8f6f 	isb	sy
 800c830:	f3bf 8f4f 	dsb	sy
 800c834:	623b      	str	r3, [r7, #32]
}
 800c836:	bf00      	nop
 800c838:	bf00      	nop
 800c83a:	e7fd      	b.n	800c838 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c83c:	f000 fd1a 	bl	800d274 <xTaskGetSchedulerState>
 800c840:	4603      	mov	r3, r0
 800c842:	2b00      	cmp	r3, #0
 800c844:	d102      	bne.n	800c84c <xQueueGenericSend+0xa4>
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d101      	bne.n	800c850 <xQueueGenericSend+0xa8>
 800c84c:	2301      	movs	r3, #1
 800c84e:	e000      	b.n	800c852 <xQueueGenericSend+0xaa>
 800c850:	2300      	movs	r3, #0
 800c852:	2b00      	cmp	r3, #0
 800c854:	d10b      	bne.n	800c86e <xQueueGenericSend+0xc6>
	__asm volatile
 800c856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c85a:	f383 8811 	msr	BASEPRI, r3
 800c85e:	f3bf 8f6f 	isb	sy
 800c862:	f3bf 8f4f 	dsb	sy
 800c866:	61fb      	str	r3, [r7, #28]
}
 800c868:	bf00      	nop
 800c86a:	bf00      	nop
 800c86c:	e7fd      	b.n	800c86a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c86e:	f000 fe23 	bl	800d4b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c874:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d302      	bcc.n	800c884 <xQueueGenericSend+0xdc>
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	2b02      	cmp	r3, #2
 800c882:	d129      	bne.n	800c8d8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c884:	683a      	ldr	r2, [r7, #0]
 800c886:	68b9      	ldr	r1, [r7, #8]
 800c888:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c88a:	f000 f92d 	bl	800cae8 <prvCopyDataToQueue>
 800c88e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c894:	2b00      	cmp	r3, #0
 800c896:	d010      	beq.n	800c8ba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c89a:	3324      	adds	r3, #36	@ 0x24
 800c89c:	4618      	mov	r0, r3
 800c89e:	f000 fbdf 	bl	800d060 <xTaskRemoveFromEventList>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d013      	beq.n	800c8d0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c8a8:	4b3f      	ldr	r3, [pc, #252]	@ (800c9a8 <xQueueGenericSend+0x200>)
 800c8aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8ae:	601a      	str	r2, [r3, #0]
 800c8b0:	f3bf 8f4f 	dsb	sy
 800c8b4:	f3bf 8f6f 	isb	sy
 800c8b8:	e00a      	b.n	800c8d0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c8ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d007      	beq.n	800c8d0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c8c0:	4b39      	ldr	r3, [pc, #228]	@ (800c9a8 <xQueueGenericSend+0x200>)
 800c8c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8c6:	601a      	str	r2, [r3, #0]
 800c8c8:	f3bf 8f4f 	dsb	sy
 800c8cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c8d0:	f000 fe24 	bl	800d51c <vPortExitCritical>
				return pdPASS;
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	e063      	b.n	800c9a0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d103      	bne.n	800c8e6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c8de:	f000 fe1d 	bl	800d51c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	e05c      	b.n	800c9a0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c8e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d106      	bne.n	800c8fa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c8ec:	f107 0314 	add.w	r3, r7, #20
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f000 fc19 	bl	800d128 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c8fa:	f000 fe0f 	bl	800d51c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c8fe:	f000 f9c7 	bl	800cc90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c902:	f000 fdd9 	bl	800d4b8 <vPortEnterCritical>
 800c906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c908:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c90c:	b25b      	sxtb	r3, r3
 800c90e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c912:	d103      	bne.n	800c91c <xQueueGenericSend+0x174>
 800c914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c916:	2200      	movs	r2, #0
 800c918:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c91c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c91e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c922:	b25b      	sxtb	r3, r3
 800c924:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c928:	d103      	bne.n	800c932 <xQueueGenericSend+0x18a>
 800c92a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c92c:	2200      	movs	r2, #0
 800c92e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c932:	f000 fdf3 	bl	800d51c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c936:	1d3a      	adds	r2, r7, #4
 800c938:	f107 0314 	add.w	r3, r7, #20
 800c93c:	4611      	mov	r1, r2
 800c93e:	4618      	mov	r0, r3
 800c940:	f000 fc08 	bl	800d154 <xTaskCheckForTimeOut>
 800c944:	4603      	mov	r3, r0
 800c946:	2b00      	cmp	r3, #0
 800c948:	d124      	bne.n	800c994 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c94a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c94c:	f000 f988 	bl	800cc60 <prvIsQueueFull>
 800c950:	4603      	mov	r3, r0
 800c952:	2b00      	cmp	r3, #0
 800c954:	d018      	beq.n	800c988 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c958:	3310      	adds	r3, #16
 800c95a:	687a      	ldr	r2, [r7, #4]
 800c95c:	4611      	mov	r1, r2
 800c95e:	4618      	mov	r0, r3
 800c960:	f000 fb58 	bl	800d014 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c964:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c966:	f000 f929 	bl	800cbbc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c96a:	f000 f99f 	bl	800ccac <xTaskResumeAll>
 800c96e:	4603      	mov	r3, r0
 800c970:	2b00      	cmp	r3, #0
 800c972:	f47f af7c 	bne.w	800c86e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c976:	4b0c      	ldr	r3, [pc, #48]	@ (800c9a8 <xQueueGenericSend+0x200>)
 800c978:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c97c:	601a      	str	r2, [r3, #0]
 800c97e:	f3bf 8f4f 	dsb	sy
 800c982:	f3bf 8f6f 	isb	sy
 800c986:	e772      	b.n	800c86e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c988:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c98a:	f000 f917 	bl	800cbbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c98e:	f000 f98d 	bl	800ccac <xTaskResumeAll>
 800c992:	e76c      	b.n	800c86e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c994:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c996:	f000 f911 	bl	800cbbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c99a:	f000 f987 	bl	800ccac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c99e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	3738      	adds	r7, #56	@ 0x38
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}
 800c9a8:	e000ed04 	.word	0xe000ed04

0800c9ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b090      	sub	sp, #64	@ 0x40
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	60f8      	str	r0, [r7, #12]
 800c9b4:	60b9      	str	r1, [r7, #8]
 800c9b6:	607a      	str	r2, [r7, #4]
 800c9b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c9be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d10b      	bne.n	800c9dc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c9c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9c8:	f383 8811 	msr	BASEPRI, r3
 800c9cc:	f3bf 8f6f 	isb	sy
 800c9d0:	f3bf 8f4f 	dsb	sy
 800c9d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c9d6:	bf00      	nop
 800c9d8:	bf00      	nop
 800c9da:	e7fd      	b.n	800c9d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d103      	bne.n	800c9ea <xQueueGenericSendFromISR+0x3e>
 800c9e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d101      	bne.n	800c9ee <xQueueGenericSendFromISR+0x42>
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	e000      	b.n	800c9f0 <xQueueGenericSendFromISR+0x44>
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d10b      	bne.n	800ca0c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c9f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9f8:	f383 8811 	msr	BASEPRI, r3
 800c9fc:	f3bf 8f6f 	isb	sy
 800ca00:	f3bf 8f4f 	dsb	sy
 800ca04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ca06:	bf00      	nop
 800ca08:	bf00      	nop
 800ca0a:	e7fd      	b.n	800ca08 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	2b02      	cmp	r3, #2
 800ca10:	d103      	bne.n	800ca1a <xQueueGenericSendFromISR+0x6e>
 800ca12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca16:	2b01      	cmp	r3, #1
 800ca18:	d101      	bne.n	800ca1e <xQueueGenericSendFromISR+0x72>
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	e000      	b.n	800ca20 <xQueueGenericSendFromISR+0x74>
 800ca1e:	2300      	movs	r3, #0
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d10b      	bne.n	800ca3c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ca24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca28:	f383 8811 	msr	BASEPRI, r3
 800ca2c:	f3bf 8f6f 	isb	sy
 800ca30:	f3bf 8f4f 	dsb	sy
 800ca34:	623b      	str	r3, [r7, #32]
}
 800ca36:	bf00      	nop
 800ca38:	bf00      	nop
 800ca3a:	e7fd      	b.n	800ca38 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ca3c:	f000 fdee 	bl	800d61c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ca40:	f3ef 8211 	mrs	r2, BASEPRI
 800ca44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca48:	f383 8811 	msr	BASEPRI, r3
 800ca4c:	f3bf 8f6f 	isb	sy
 800ca50:	f3bf 8f4f 	dsb	sy
 800ca54:	61fa      	str	r2, [r7, #28]
 800ca56:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ca58:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ca5a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ca5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca64:	429a      	cmp	r2, r3
 800ca66:	d302      	bcc.n	800ca6e <xQueueGenericSendFromISR+0xc2>
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	2b02      	cmp	r3, #2
 800ca6c:	d12f      	bne.n	800cace <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ca6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ca74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ca7e:	683a      	ldr	r2, [r7, #0]
 800ca80:	68b9      	ldr	r1, [r7, #8]
 800ca82:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ca84:	f000 f830 	bl	800cae8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ca88:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ca8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca90:	d112      	bne.n	800cab8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d016      	beq.n	800cac8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca9c:	3324      	adds	r3, #36	@ 0x24
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f000 fade 	bl	800d060 <xTaskRemoveFromEventList>
 800caa4:	4603      	mov	r3, r0
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d00e      	beq.n	800cac8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d00b      	beq.n	800cac8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2201      	movs	r2, #1
 800cab4:	601a      	str	r2, [r3, #0]
 800cab6:	e007      	b.n	800cac8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cab8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800cabc:	3301      	adds	r3, #1
 800cabe:	b2db      	uxtb	r3, r3
 800cac0:	b25a      	sxtb	r2, r3
 800cac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cac4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800cac8:	2301      	movs	r3, #1
 800caca:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800cacc:	e001      	b.n	800cad2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cace:	2300      	movs	r3, #0
 800cad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cad4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cadc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	3740      	adds	r7, #64	@ 0x40
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b086      	sub	sp, #24
 800caec:	af00      	add	r7, sp, #0
 800caee:	60f8      	str	r0, [r7, #12]
 800caf0:	60b9      	str	r1, [r7, #8]
 800caf2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800caf4:	2300      	movs	r3, #0
 800caf6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cafc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d10d      	bne.n	800cb22 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d14d      	bne.n	800cbaa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	689b      	ldr	r3, [r3, #8]
 800cb12:	4618      	mov	r0, r3
 800cb14:	f000 fbcc 	bl	800d2b0 <xTaskPriorityDisinherit>
 800cb18:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	609a      	str	r2, [r3, #8]
 800cb20:	e043      	b.n	800cbaa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d119      	bne.n	800cb5c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	6858      	ldr	r0, [r3, #4]
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb30:	461a      	mov	r2, r3
 800cb32:	68b9      	ldr	r1, [r7, #8]
 800cb34:	f001 fe2f 	bl	800e796 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	685a      	ldr	r2, [r3, #4]
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb40:	441a      	add	r2, r3
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	685a      	ldr	r2, [r3, #4]
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	689b      	ldr	r3, [r3, #8]
 800cb4e:	429a      	cmp	r2, r3
 800cb50:	d32b      	bcc.n	800cbaa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	681a      	ldr	r2, [r3, #0]
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	605a      	str	r2, [r3, #4]
 800cb5a:	e026      	b.n	800cbaa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	68d8      	ldr	r0, [r3, #12]
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb64:	461a      	mov	r2, r3
 800cb66:	68b9      	ldr	r1, [r7, #8]
 800cb68:	f001 fe15 	bl	800e796 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	68da      	ldr	r2, [r3, #12]
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb74:	425b      	negs	r3, r3
 800cb76:	441a      	add	r2, r3
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	68da      	ldr	r2, [r3, #12]
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d207      	bcs.n	800cb98 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	689a      	ldr	r2, [r3, #8]
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb90:	425b      	negs	r3, r3
 800cb92:	441a      	add	r2, r3
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2b02      	cmp	r3, #2
 800cb9c:	d105      	bne.n	800cbaa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d002      	beq.n	800cbaa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	3b01      	subs	r3, #1
 800cba8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cbaa:	693b      	ldr	r3, [r7, #16]
 800cbac:	1c5a      	adds	r2, r3, #1
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800cbb2:	697b      	ldr	r3, [r7, #20]
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3718      	adds	r7, #24
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b084      	sub	sp, #16
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cbc4:	f000 fc78 	bl	800d4b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cbce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cbd0:	e011      	b.n	800cbf6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d012      	beq.n	800cc00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	3324      	adds	r3, #36	@ 0x24
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f000 fa3e 	bl	800d060 <xTaskRemoveFromEventList>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d001      	beq.n	800cbee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cbea:	f000 fb17 	bl	800d21c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cbee:	7bfb      	ldrb	r3, [r7, #15]
 800cbf0:	3b01      	subs	r3, #1
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cbf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	dce9      	bgt.n	800cbd2 <prvUnlockQueue+0x16>
 800cbfe:	e000      	b.n	800cc02 <prvUnlockQueue+0x46>
					break;
 800cc00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	22ff      	movs	r2, #255	@ 0xff
 800cc06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800cc0a:	f000 fc87 	bl	800d51c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cc0e:	f000 fc53 	bl	800d4b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cc18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cc1a:	e011      	b.n	800cc40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	691b      	ldr	r3, [r3, #16]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d012      	beq.n	800cc4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	3310      	adds	r3, #16
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f000 fa19 	bl	800d060 <xTaskRemoveFromEventList>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d001      	beq.n	800cc38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cc34:	f000 faf2 	bl	800d21c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cc38:	7bbb      	ldrb	r3, [r7, #14]
 800cc3a:	3b01      	subs	r3, #1
 800cc3c:	b2db      	uxtb	r3, r3
 800cc3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cc40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	dce9      	bgt.n	800cc1c <prvUnlockQueue+0x60>
 800cc48:	e000      	b.n	800cc4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cc4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	22ff      	movs	r2, #255	@ 0xff
 800cc50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800cc54:	f000 fc62 	bl	800d51c <vPortExitCritical>
}
 800cc58:	bf00      	nop
 800cc5a:	3710      	adds	r7, #16
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}

0800cc60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b084      	sub	sp, #16
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cc68:	f000 fc26 	bl	800d4b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc74:	429a      	cmp	r2, r3
 800cc76:	d102      	bne.n	800cc7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cc78:	2301      	movs	r3, #1
 800cc7a:	60fb      	str	r3, [r7, #12]
 800cc7c:	e001      	b.n	800cc82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cc82:	f000 fc4b 	bl	800d51c <vPortExitCritical>

	return xReturn;
 800cc86:	68fb      	ldr	r3, [r7, #12]
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3710      	adds	r7, #16
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cc90:	b480      	push	{r7}
 800cc92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cc94:	4b04      	ldr	r3, [pc, #16]	@ (800cca8 <vTaskSuspendAll+0x18>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	3301      	adds	r3, #1
 800cc9a:	4a03      	ldr	r2, [pc, #12]	@ (800cca8 <vTaskSuspendAll+0x18>)
 800cc9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cc9e:	bf00      	nop
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr
 800cca8:	200266e0 	.word	0x200266e0

0800ccac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b084      	sub	sp, #16
 800ccb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ccba:	4b42      	ldr	r3, [pc, #264]	@ (800cdc4 <xTaskResumeAll+0x118>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d10b      	bne.n	800ccda <xTaskResumeAll+0x2e>
	__asm volatile
 800ccc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccc6:	f383 8811 	msr	BASEPRI, r3
 800ccca:	f3bf 8f6f 	isb	sy
 800ccce:	f3bf 8f4f 	dsb	sy
 800ccd2:	603b      	str	r3, [r7, #0]
}
 800ccd4:	bf00      	nop
 800ccd6:	bf00      	nop
 800ccd8:	e7fd      	b.n	800ccd6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ccda:	f000 fbed 	bl	800d4b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ccde:	4b39      	ldr	r3, [pc, #228]	@ (800cdc4 <xTaskResumeAll+0x118>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	3b01      	subs	r3, #1
 800cce4:	4a37      	ldr	r2, [pc, #220]	@ (800cdc4 <xTaskResumeAll+0x118>)
 800cce6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cce8:	4b36      	ldr	r3, [pc, #216]	@ (800cdc4 <xTaskResumeAll+0x118>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d161      	bne.n	800cdb4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ccf0:	4b35      	ldr	r3, [pc, #212]	@ (800cdc8 <xTaskResumeAll+0x11c>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d05d      	beq.n	800cdb4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ccf8:	e02e      	b.n	800cd58 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccfa:	4b34      	ldr	r3, [pc, #208]	@ (800cdcc <xTaskResumeAll+0x120>)
 800ccfc:	68db      	ldr	r3, [r3, #12]
 800ccfe:	68db      	ldr	r3, [r3, #12]
 800cd00:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	3318      	adds	r3, #24
 800cd06:	4618      	mov	r0, r3
 800cd08:	f7ff fd23 	bl	800c752 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	3304      	adds	r3, #4
 800cd10:	4618      	mov	r0, r3
 800cd12:	f7ff fd1e 	bl	800c752 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd1a:	2201      	movs	r2, #1
 800cd1c:	409a      	lsls	r2, r3
 800cd1e:	4b2c      	ldr	r3, [pc, #176]	@ (800cdd0 <xTaskResumeAll+0x124>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	4313      	orrs	r3, r2
 800cd24:	4a2a      	ldr	r2, [pc, #168]	@ (800cdd0 <xTaskResumeAll+0x124>)
 800cd26:	6013      	str	r3, [r2, #0]
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd2c:	4613      	mov	r3, r2
 800cd2e:	009b      	lsls	r3, r3, #2
 800cd30:	4413      	add	r3, r2
 800cd32:	009b      	lsls	r3, r3, #2
 800cd34:	4a27      	ldr	r2, [pc, #156]	@ (800cdd4 <xTaskResumeAll+0x128>)
 800cd36:	441a      	add	r2, r3
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	3304      	adds	r3, #4
 800cd3c:	4619      	mov	r1, r3
 800cd3e:	4610      	mov	r0, r2
 800cd40:	f7ff fcaa 	bl	800c698 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd48:	4b23      	ldr	r3, [pc, #140]	@ (800cdd8 <xTaskResumeAll+0x12c>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd4e:	429a      	cmp	r2, r3
 800cd50:	d302      	bcc.n	800cd58 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cd52:	4b22      	ldr	r3, [pc, #136]	@ (800cddc <xTaskResumeAll+0x130>)
 800cd54:	2201      	movs	r2, #1
 800cd56:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cd58:	4b1c      	ldr	r3, [pc, #112]	@ (800cdcc <xTaskResumeAll+0x120>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d1cc      	bne.n	800ccfa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d001      	beq.n	800cd6a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cd66:	f000 fa65 	bl	800d234 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cd6a:	4b1d      	ldr	r3, [pc, #116]	@ (800cde0 <xTaskResumeAll+0x134>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d010      	beq.n	800cd98 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cd76:	f000 f837 	bl	800cde8 <xTaskIncrementTick>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d002      	beq.n	800cd86 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cd80:	4b16      	ldr	r3, [pc, #88]	@ (800cddc <xTaskResumeAll+0x130>)
 800cd82:	2201      	movs	r2, #1
 800cd84:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	3b01      	subs	r3, #1
 800cd8a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d1f1      	bne.n	800cd76 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800cd92:	4b13      	ldr	r3, [pc, #76]	@ (800cde0 <xTaskResumeAll+0x134>)
 800cd94:	2200      	movs	r2, #0
 800cd96:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cd98:	4b10      	ldr	r3, [pc, #64]	@ (800cddc <xTaskResumeAll+0x130>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d009      	beq.n	800cdb4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cda0:	2301      	movs	r3, #1
 800cda2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cda4:	4b0f      	ldr	r3, [pc, #60]	@ (800cde4 <xTaskResumeAll+0x138>)
 800cda6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cdaa:	601a      	str	r2, [r3, #0]
 800cdac:	f3bf 8f4f 	dsb	sy
 800cdb0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cdb4:	f000 fbb2 	bl	800d51c <vPortExitCritical>

	return xAlreadyYielded;
 800cdb8:	68bb      	ldr	r3, [r7, #8]
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3710      	adds	r7, #16
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}
 800cdc2:	bf00      	nop
 800cdc4:	200266e0 	.word	0x200266e0
 800cdc8:	200266c0 	.word	0x200266c0
 800cdcc:	20026698 	.word	0x20026698
 800cdd0:	200266c8 	.word	0x200266c8
 800cdd4:	20026604 	.word	0x20026604
 800cdd8:	20026600 	.word	0x20026600
 800cddc:	200266d4 	.word	0x200266d4
 800cde0:	200266d0 	.word	0x200266d0
 800cde4:	e000ed04 	.word	0xe000ed04

0800cde8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b086      	sub	sp, #24
 800cdec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cdf2:	4b4f      	ldr	r3, [pc, #316]	@ (800cf30 <xTaskIncrementTick+0x148>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	f040 808f 	bne.w	800cf1a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cdfc:	4b4d      	ldr	r3, [pc, #308]	@ (800cf34 <xTaskIncrementTick+0x14c>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	3301      	adds	r3, #1
 800ce02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ce04:	4a4b      	ldr	r2, [pc, #300]	@ (800cf34 <xTaskIncrementTick+0x14c>)
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ce0a:	693b      	ldr	r3, [r7, #16]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d121      	bne.n	800ce54 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ce10:	4b49      	ldr	r3, [pc, #292]	@ (800cf38 <xTaskIncrementTick+0x150>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d00b      	beq.n	800ce32 <xTaskIncrementTick+0x4a>
	__asm volatile
 800ce1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce1e:	f383 8811 	msr	BASEPRI, r3
 800ce22:	f3bf 8f6f 	isb	sy
 800ce26:	f3bf 8f4f 	dsb	sy
 800ce2a:	603b      	str	r3, [r7, #0]
}
 800ce2c:	bf00      	nop
 800ce2e:	bf00      	nop
 800ce30:	e7fd      	b.n	800ce2e <xTaskIncrementTick+0x46>
 800ce32:	4b41      	ldr	r3, [pc, #260]	@ (800cf38 <xTaskIncrementTick+0x150>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	60fb      	str	r3, [r7, #12]
 800ce38:	4b40      	ldr	r3, [pc, #256]	@ (800cf3c <xTaskIncrementTick+0x154>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	4a3e      	ldr	r2, [pc, #248]	@ (800cf38 <xTaskIncrementTick+0x150>)
 800ce3e:	6013      	str	r3, [r2, #0]
 800ce40:	4a3e      	ldr	r2, [pc, #248]	@ (800cf3c <xTaskIncrementTick+0x154>)
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	6013      	str	r3, [r2, #0]
 800ce46:	4b3e      	ldr	r3, [pc, #248]	@ (800cf40 <xTaskIncrementTick+0x158>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	3301      	adds	r3, #1
 800ce4c:	4a3c      	ldr	r2, [pc, #240]	@ (800cf40 <xTaskIncrementTick+0x158>)
 800ce4e:	6013      	str	r3, [r2, #0]
 800ce50:	f000 f9f0 	bl	800d234 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ce54:	4b3b      	ldr	r3, [pc, #236]	@ (800cf44 <xTaskIncrementTick+0x15c>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	693a      	ldr	r2, [r7, #16]
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d348      	bcc.n	800cef0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ce5e:	4b36      	ldr	r3, [pc, #216]	@ (800cf38 <xTaskIncrementTick+0x150>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d104      	bne.n	800ce72 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce68:	4b36      	ldr	r3, [pc, #216]	@ (800cf44 <xTaskIncrementTick+0x15c>)
 800ce6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ce6e:	601a      	str	r2, [r3, #0]
					break;
 800ce70:	e03e      	b.n	800cef0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce72:	4b31      	ldr	r3, [pc, #196]	@ (800cf38 <xTaskIncrementTick+0x150>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	68db      	ldr	r3, [r3, #12]
 800ce78:	68db      	ldr	r3, [r3, #12]
 800ce7a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	685b      	ldr	r3, [r3, #4]
 800ce80:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ce82:	693a      	ldr	r2, [r7, #16]
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	429a      	cmp	r2, r3
 800ce88:	d203      	bcs.n	800ce92 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ce8a:	4a2e      	ldr	r2, [pc, #184]	@ (800cf44 <xTaskIncrementTick+0x15c>)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ce90:	e02e      	b.n	800cef0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	3304      	adds	r3, #4
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7ff fc5b 	bl	800c752 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d004      	beq.n	800ceae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	3318      	adds	r3, #24
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f7ff fc52 	bl	800c752 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ceb2:	2201      	movs	r2, #1
 800ceb4:	409a      	lsls	r2, r3
 800ceb6:	4b24      	ldr	r3, [pc, #144]	@ (800cf48 <xTaskIncrementTick+0x160>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	4313      	orrs	r3, r2
 800cebc:	4a22      	ldr	r2, [pc, #136]	@ (800cf48 <xTaskIncrementTick+0x160>)
 800cebe:	6013      	str	r3, [r2, #0]
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cec4:	4613      	mov	r3, r2
 800cec6:	009b      	lsls	r3, r3, #2
 800cec8:	4413      	add	r3, r2
 800ceca:	009b      	lsls	r3, r3, #2
 800cecc:	4a1f      	ldr	r2, [pc, #124]	@ (800cf4c <xTaskIncrementTick+0x164>)
 800cece:	441a      	add	r2, r3
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	3304      	adds	r3, #4
 800ced4:	4619      	mov	r1, r3
 800ced6:	4610      	mov	r0, r2
 800ced8:	f7ff fbde 	bl	800c698 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cee0:	4b1b      	ldr	r3, [pc, #108]	@ (800cf50 <xTaskIncrementTick+0x168>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cee6:	429a      	cmp	r2, r3
 800cee8:	d3b9      	bcc.n	800ce5e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ceea:	2301      	movs	r3, #1
 800ceec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ceee:	e7b6      	b.n	800ce5e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cef0:	4b17      	ldr	r3, [pc, #92]	@ (800cf50 <xTaskIncrementTick+0x168>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cef6:	4915      	ldr	r1, [pc, #84]	@ (800cf4c <xTaskIncrementTick+0x164>)
 800cef8:	4613      	mov	r3, r2
 800cefa:	009b      	lsls	r3, r3, #2
 800cefc:	4413      	add	r3, r2
 800cefe:	009b      	lsls	r3, r3, #2
 800cf00:	440b      	add	r3, r1
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	2b01      	cmp	r3, #1
 800cf06:	d901      	bls.n	800cf0c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cf08:	2301      	movs	r3, #1
 800cf0a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cf0c:	4b11      	ldr	r3, [pc, #68]	@ (800cf54 <xTaskIncrementTick+0x16c>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d007      	beq.n	800cf24 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800cf14:	2301      	movs	r3, #1
 800cf16:	617b      	str	r3, [r7, #20]
 800cf18:	e004      	b.n	800cf24 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cf1a:	4b0f      	ldr	r3, [pc, #60]	@ (800cf58 <xTaskIncrementTick+0x170>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	3301      	adds	r3, #1
 800cf20:	4a0d      	ldr	r2, [pc, #52]	@ (800cf58 <xTaskIncrementTick+0x170>)
 800cf22:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cf24:	697b      	ldr	r3, [r7, #20]
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3718      	adds	r7, #24
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}
 800cf2e:	bf00      	nop
 800cf30:	200266e0 	.word	0x200266e0
 800cf34:	200266c4 	.word	0x200266c4
 800cf38:	20026690 	.word	0x20026690
 800cf3c:	20026694 	.word	0x20026694
 800cf40:	200266d8 	.word	0x200266d8
 800cf44:	200266dc 	.word	0x200266dc
 800cf48:	200266c8 	.word	0x200266c8
 800cf4c:	20026604 	.word	0x20026604
 800cf50:	20026600 	.word	0x20026600
 800cf54:	200266d4 	.word	0x200266d4
 800cf58:	200266d0 	.word	0x200266d0

0800cf5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cf5c:	b480      	push	{r7}
 800cf5e:	b087      	sub	sp, #28
 800cf60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cf62:	4b27      	ldr	r3, [pc, #156]	@ (800d000 <vTaskSwitchContext+0xa4>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d003      	beq.n	800cf72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cf6a:	4b26      	ldr	r3, [pc, #152]	@ (800d004 <vTaskSwitchContext+0xa8>)
 800cf6c:	2201      	movs	r2, #1
 800cf6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cf70:	e040      	b.n	800cff4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800cf72:	4b24      	ldr	r3, [pc, #144]	@ (800d004 <vTaskSwitchContext+0xa8>)
 800cf74:	2200      	movs	r2, #0
 800cf76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf78:	4b23      	ldr	r3, [pc, #140]	@ (800d008 <vTaskSwitchContext+0xac>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	fab3 f383 	clz	r3, r3
 800cf84:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cf86:	7afb      	ldrb	r3, [r7, #11]
 800cf88:	f1c3 031f 	rsb	r3, r3, #31
 800cf8c:	617b      	str	r3, [r7, #20]
 800cf8e:	491f      	ldr	r1, [pc, #124]	@ (800d00c <vTaskSwitchContext+0xb0>)
 800cf90:	697a      	ldr	r2, [r7, #20]
 800cf92:	4613      	mov	r3, r2
 800cf94:	009b      	lsls	r3, r3, #2
 800cf96:	4413      	add	r3, r2
 800cf98:	009b      	lsls	r3, r3, #2
 800cf9a:	440b      	add	r3, r1
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d10b      	bne.n	800cfba <vTaskSwitchContext+0x5e>
	__asm volatile
 800cfa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfa6:	f383 8811 	msr	BASEPRI, r3
 800cfaa:	f3bf 8f6f 	isb	sy
 800cfae:	f3bf 8f4f 	dsb	sy
 800cfb2:	607b      	str	r3, [r7, #4]
}
 800cfb4:	bf00      	nop
 800cfb6:	bf00      	nop
 800cfb8:	e7fd      	b.n	800cfb6 <vTaskSwitchContext+0x5a>
 800cfba:	697a      	ldr	r2, [r7, #20]
 800cfbc:	4613      	mov	r3, r2
 800cfbe:	009b      	lsls	r3, r3, #2
 800cfc0:	4413      	add	r3, r2
 800cfc2:	009b      	lsls	r3, r3, #2
 800cfc4:	4a11      	ldr	r2, [pc, #68]	@ (800d00c <vTaskSwitchContext+0xb0>)
 800cfc6:	4413      	add	r3, r2
 800cfc8:	613b      	str	r3, [r7, #16]
 800cfca:	693b      	ldr	r3, [r7, #16]
 800cfcc:	685b      	ldr	r3, [r3, #4]
 800cfce:	685a      	ldr	r2, [r3, #4]
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	605a      	str	r2, [r3, #4]
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	685a      	ldr	r2, [r3, #4]
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	3308      	adds	r3, #8
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	d104      	bne.n	800cfea <vTaskSwitchContext+0x8e>
 800cfe0:	693b      	ldr	r3, [r7, #16]
 800cfe2:	685b      	ldr	r3, [r3, #4]
 800cfe4:	685a      	ldr	r2, [r3, #4]
 800cfe6:	693b      	ldr	r3, [r7, #16]
 800cfe8:	605a      	str	r2, [r3, #4]
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	685b      	ldr	r3, [r3, #4]
 800cfee:	68db      	ldr	r3, [r3, #12]
 800cff0:	4a07      	ldr	r2, [pc, #28]	@ (800d010 <vTaskSwitchContext+0xb4>)
 800cff2:	6013      	str	r3, [r2, #0]
}
 800cff4:	bf00      	nop
 800cff6:	371c      	adds	r7, #28
 800cff8:	46bd      	mov	sp, r7
 800cffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffe:	4770      	bx	lr
 800d000:	200266e0 	.word	0x200266e0
 800d004:	200266d4 	.word	0x200266d4
 800d008:	200266c8 	.word	0x200266c8
 800d00c:	20026604 	.word	0x20026604
 800d010:	20026600 	.word	0x20026600

0800d014 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b084      	sub	sp, #16
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
 800d01c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d10b      	bne.n	800d03c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d028:	f383 8811 	msr	BASEPRI, r3
 800d02c:	f3bf 8f6f 	isb	sy
 800d030:	f3bf 8f4f 	dsb	sy
 800d034:	60fb      	str	r3, [r7, #12]
}
 800d036:	bf00      	nop
 800d038:	bf00      	nop
 800d03a:	e7fd      	b.n	800d038 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d03c:	4b07      	ldr	r3, [pc, #28]	@ (800d05c <vTaskPlaceOnEventList+0x48>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	3318      	adds	r3, #24
 800d042:	4619      	mov	r1, r3
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f7ff fb4b 	bl	800c6e0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d04a:	2101      	movs	r1, #1
 800d04c:	6838      	ldr	r0, [r7, #0]
 800d04e:	f000 f9b7 	bl	800d3c0 <prvAddCurrentTaskToDelayedList>
}
 800d052:	bf00      	nop
 800d054:	3710      	adds	r7, #16
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
 800d05a:	bf00      	nop
 800d05c:	20026600 	.word	0x20026600

0800d060 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b086      	sub	sp, #24
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	68db      	ldr	r3, [r3, #12]
 800d06c:	68db      	ldr	r3, [r3, #12]
 800d06e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d10b      	bne.n	800d08e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d07a:	f383 8811 	msr	BASEPRI, r3
 800d07e:	f3bf 8f6f 	isb	sy
 800d082:	f3bf 8f4f 	dsb	sy
 800d086:	60fb      	str	r3, [r7, #12]
}
 800d088:	bf00      	nop
 800d08a:	bf00      	nop
 800d08c:	e7fd      	b.n	800d08a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d08e:	693b      	ldr	r3, [r7, #16]
 800d090:	3318      	adds	r3, #24
 800d092:	4618      	mov	r0, r3
 800d094:	f7ff fb5d 	bl	800c752 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d098:	4b1d      	ldr	r3, [pc, #116]	@ (800d110 <xTaskRemoveFromEventList+0xb0>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d11c      	bne.n	800d0da <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d0a0:	693b      	ldr	r3, [r7, #16]
 800d0a2:	3304      	adds	r3, #4
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	f7ff fb54 	bl	800c752 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0ae:	2201      	movs	r2, #1
 800d0b0:	409a      	lsls	r2, r3
 800d0b2:	4b18      	ldr	r3, [pc, #96]	@ (800d114 <xTaskRemoveFromEventList+0xb4>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	4313      	orrs	r3, r2
 800d0b8:	4a16      	ldr	r2, [pc, #88]	@ (800d114 <xTaskRemoveFromEventList+0xb4>)
 800d0ba:	6013      	str	r3, [r2, #0]
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0c0:	4613      	mov	r3, r2
 800d0c2:	009b      	lsls	r3, r3, #2
 800d0c4:	4413      	add	r3, r2
 800d0c6:	009b      	lsls	r3, r3, #2
 800d0c8:	4a13      	ldr	r2, [pc, #76]	@ (800d118 <xTaskRemoveFromEventList+0xb8>)
 800d0ca:	441a      	add	r2, r3
 800d0cc:	693b      	ldr	r3, [r7, #16]
 800d0ce:	3304      	adds	r3, #4
 800d0d0:	4619      	mov	r1, r3
 800d0d2:	4610      	mov	r0, r2
 800d0d4:	f7ff fae0 	bl	800c698 <vListInsertEnd>
 800d0d8:	e005      	b.n	800d0e6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	3318      	adds	r3, #24
 800d0de:	4619      	mov	r1, r3
 800d0e0:	480e      	ldr	r0, [pc, #56]	@ (800d11c <xTaskRemoveFromEventList+0xbc>)
 800d0e2:	f7ff fad9 	bl	800c698 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d0e6:	693b      	ldr	r3, [r7, #16]
 800d0e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0ea:	4b0d      	ldr	r3, [pc, #52]	@ (800d120 <xTaskRemoveFromEventList+0xc0>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0f0:	429a      	cmp	r2, r3
 800d0f2:	d905      	bls.n	800d100 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d0f8:	4b0a      	ldr	r3, [pc, #40]	@ (800d124 <xTaskRemoveFromEventList+0xc4>)
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	601a      	str	r2, [r3, #0]
 800d0fe:	e001      	b.n	800d104 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d100:	2300      	movs	r3, #0
 800d102:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d104:	697b      	ldr	r3, [r7, #20]
}
 800d106:	4618      	mov	r0, r3
 800d108:	3718      	adds	r7, #24
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	bf00      	nop
 800d110:	200266e0 	.word	0x200266e0
 800d114:	200266c8 	.word	0x200266c8
 800d118:	20026604 	.word	0x20026604
 800d11c:	20026698 	.word	0x20026698
 800d120:	20026600 	.word	0x20026600
 800d124:	200266d4 	.word	0x200266d4

0800d128 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d128:	b480      	push	{r7}
 800d12a:	b083      	sub	sp, #12
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d130:	4b06      	ldr	r3, [pc, #24]	@ (800d14c <vTaskInternalSetTimeOutState+0x24>)
 800d132:	681a      	ldr	r2, [r3, #0]
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d138:	4b05      	ldr	r3, [pc, #20]	@ (800d150 <vTaskInternalSetTimeOutState+0x28>)
 800d13a:	681a      	ldr	r2, [r3, #0]
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	605a      	str	r2, [r3, #4]
}
 800d140:	bf00      	nop
 800d142:	370c      	adds	r7, #12
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr
 800d14c:	200266d8 	.word	0x200266d8
 800d150:	200266c4 	.word	0x200266c4

0800d154 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b088      	sub	sp, #32
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d10b      	bne.n	800d17c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d168:	f383 8811 	msr	BASEPRI, r3
 800d16c:	f3bf 8f6f 	isb	sy
 800d170:	f3bf 8f4f 	dsb	sy
 800d174:	613b      	str	r3, [r7, #16]
}
 800d176:	bf00      	nop
 800d178:	bf00      	nop
 800d17a:	e7fd      	b.n	800d178 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d10b      	bne.n	800d19a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d186:	f383 8811 	msr	BASEPRI, r3
 800d18a:	f3bf 8f6f 	isb	sy
 800d18e:	f3bf 8f4f 	dsb	sy
 800d192:	60fb      	str	r3, [r7, #12]
}
 800d194:	bf00      	nop
 800d196:	bf00      	nop
 800d198:	e7fd      	b.n	800d196 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d19a:	f000 f98d 	bl	800d4b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d19e:	4b1d      	ldr	r3, [pc, #116]	@ (800d214 <xTaskCheckForTimeOut+0xc0>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	685b      	ldr	r3, [r3, #4]
 800d1a8:	69ba      	ldr	r2, [r7, #24]
 800d1aa:	1ad3      	subs	r3, r2, r3
 800d1ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1b6:	d102      	bne.n	800d1be <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	61fb      	str	r3, [r7, #28]
 800d1bc:	e023      	b.n	800d206 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681a      	ldr	r2, [r3, #0]
 800d1c2:	4b15      	ldr	r3, [pc, #84]	@ (800d218 <xTaskCheckForTimeOut+0xc4>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d007      	beq.n	800d1da <xTaskCheckForTimeOut+0x86>
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	685b      	ldr	r3, [r3, #4]
 800d1ce:	69ba      	ldr	r2, [r7, #24]
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d302      	bcc.n	800d1da <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	61fb      	str	r3, [r7, #28]
 800d1d8:	e015      	b.n	800d206 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	697a      	ldr	r2, [r7, #20]
 800d1e0:	429a      	cmp	r2, r3
 800d1e2:	d20b      	bcs.n	800d1fc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	681a      	ldr	r2, [r3, #0]
 800d1e8:	697b      	ldr	r3, [r7, #20]
 800d1ea:	1ad2      	subs	r2, r2, r3
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f7ff ff99 	bl	800d128 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	61fb      	str	r3, [r7, #28]
 800d1fa:	e004      	b.n	800d206 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	2200      	movs	r2, #0
 800d200:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d202:	2301      	movs	r3, #1
 800d204:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d206:	f000 f989 	bl	800d51c <vPortExitCritical>

	return xReturn;
 800d20a:	69fb      	ldr	r3, [r7, #28]
}
 800d20c:	4618      	mov	r0, r3
 800d20e:	3720      	adds	r7, #32
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}
 800d214:	200266c4 	.word	0x200266c4
 800d218:	200266d8 	.word	0x200266d8

0800d21c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d21c:	b480      	push	{r7}
 800d21e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d220:	4b03      	ldr	r3, [pc, #12]	@ (800d230 <vTaskMissedYield+0x14>)
 800d222:	2201      	movs	r2, #1
 800d224:	601a      	str	r2, [r3, #0]
}
 800d226:	bf00      	nop
 800d228:	46bd      	mov	sp, r7
 800d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22e:	4770      	bx	lr
 800d230:	200266d4 	.word	0x200266d4

0800d234 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d234:	b480      	push	{r7}
 800d236:	b083      	sub	sp, #12
 800d238:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d23a:	4b0c      	ldr	r3, [pc, #48]	@ (800d26c <prvResetNextTaskUnblockTime+0x38>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d104      	bne.n	800d24e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d244:	4b0a      	ldr	r3, [pc, #40]	@ (800d270 <prvResetNextTaskUnblockTime+0x3c>)
 800d246:	f04f 32ff 	mov.w	r2, #4294967295
 800d24a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d24c:	e008      	b.n	800d260 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d24e:	4b07      	ldr	r3, [pc, #28]	@ (800d26c <prvResetNextTaskUnblockTime+0x38>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	68db      	ldr	r3, [r3, #12]
 800d254:	68db      	ldr	r3, [r3, #12]
 800d256:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	685b      	ldr	r3, [r3, #4]
 800d25c:	4a04      	ldr	r2, [pc, #16]	@ (800d270 <prvResetNextTaskUnblockTime+0x3c>)
 800d25e:	6013      	str	r3, [r2, #0]
}
 800d260:	bf00      	nop
 800d262:	370c      	adds	r7, #12
 800d264:	46bd      	mov	sp, r7
 800d266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26a:	4770      	bx	lr
 800d26c:	20026690 	.word	0x20026690
 800d270:	200266dc 	.word	0x200266dc

0800d274 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d274:	b480      	push	{r7}
 800d276:	b083      	sub	sp, #12
 800d278:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d27a:	4b0b      	ldr	r3, [pc, #44]	@ (800d2a8 <xTaskGetSchedulerState+0x34>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d102      	bne.n	800d288 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d282:	2301      	movs	r3, #1
 800d284:	607b      	str	r3, [r7, #4]
 800d286:	e008      	b.n	800d29a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d288:	4b08      	ldr	r3, [pc, #32]	@ (800d2ac <xTaskGetSchedulerState+0x38>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d102      	bne.n	800d296 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d290:	2302      	movs	r3, #2
 800d292:	607b      	str	r3, [r7, #4]
 800d294:	e001      	b.n	800d29a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d296:	2300      	movs	r3, #0
 800d298:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d29a:	687b      	ldr	r3, [r7, #4]
	}
 800d29c:	4618      	mov	r0, r3
 800d29e:	370c      	adds	r7, #12
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a6:	4770      	bx	lr
 800d2a8:	200266cc 	.word	0x200266cc
 800d2ac:	200266e0 	.word	0x200266e0

0800d2b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b086      	sub	sp, #24
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d070      	beq.n	800d3a8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d2c6:	4b3b      	ldr	r3, [pc, #236]	@ (800d3b4 <xTaskPriorityDisinherit+0x104>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	693a      	ldr	r2, [r7, #16]
 800d2cc:	429a      	cmp	r2, r3
 800d2ce:	d00b      	beq.n	800d2e8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d2d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2d4:	f383 8811 	msr	BASEPRI, r3
 800d2d8:	f3bf 8f6f 	isb	sy
 800d2dc:	f3bf 8f4f 	dsb	sy
 800d2e0:	60fb      	str	r3, [r7, #12]
}
 800d2e2:	bf00      	nop
 800d2e4:	bf00      	nop
 800d2e6:	e7fd      	b.n	800d2e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d10b      	bne.n	800d308 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d2f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2f4:	f383 8811 	msr	BASEPRI, r3
 800d2f8:	f3bf 8f6f 	isb	sy
 800d2fc:	f3bf 8f4f 	dsb	sy
 800d300:	60bb      	str	r3, [r7, #8]
}
 800d302:	bf00      	nop
 800d304:	bf00      	nop
 800d306:	e7fd      	b.n	800d304 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d308:	693b      	ldr	r3, [r7, #16]
 800d30a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d30c:	1e5a      	subs	r2, r3, #1
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d044      	beq.n	800d3a8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d31e:	693b      	ldr	r3, [r7, #16]
 800d320:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d322:	2b00      	cmp	r3, #0
 800d324:	d140      	bne.n	800d3a8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d326:	693b      	ldr	r3, [r7, #16]
 800d328:	3304      	adds	r3, #4
 800d32a:	4618      	mov	r0, r3
 800d32c:	f7ff fa11 	bl	800c752 <uxListRemove>
 800d330:	4603      	mov	r3, r0
 800d332:	2b00      	cmp	r3, #0
 800d334:	d115      	bne.n	800d362 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d33a:	491f      	ldr	r1, [pc, #124]	@ (800d3b8 <xTaskPriorityDisinherit+0x108>)
 800d33c:	4613      	mov	r3, r2
 800d33e:	009b      	lsls	r3, r3, #2
 800d340:	4413      	add	r3, r2
 800d342:	009b      	lsls	r3, r3, #2
 800d344:	440b      	add	r3, r1
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d10a      	bne.n	800d362 <xTaskPriorityDisinherit+0xb2>
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d350:	2201      	movs	r2, #1
 800d352:	fa02 f303 	lsl.w	r3, r2, r3
 800d356:	43da      	mvns	r2, r3
 800d358:	4b18      	ldr	r3, [pc, #96]	@ (800d3bc <xTaskPriorityDisinherit+0x10c>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	4013      	ands	r3, r2
 800d35e:	4a17      	ldr	r2, [pc, #92]	@ (800d3bc <xTaskPriorityDisinherit+0x10c>)
 800d360:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d36e:	f1c3 0207 	rsb	r2, r3, #7
 800d372:	693b      	ldr	r3, [r7, #16]
 800d374:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d376:	693b      	ldr	r3, [r7, #16]
 800d378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d37a:	2201      	movs	r2, #1
 800d37c:	409a      	lsls	r2, r3
 800d37e:	4b0f      	ldr	r3, [pc, #60]	@ (800d3bc <xTaskPriorityDisinherit+0x10c>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	4313      	orrs	r3, r2
 800d384:	4a0d      	ldr	r2, [pc, #52]	@ (800d3bc <xTaskPriorityDisinherit+0x10c>)
 800d386:	6013      	str	r3, [r2, #0]
 800d388:	693b      	ldr	r3, [r7, #16]
 800d38a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d38c:	4613      	mov	r3, r2
 800d38e:	009b      	lsls	r3, r3, #2
 800d390:	4413      	add	r3, r2
 800d392:	009b      	lsls	r3, r3, #2
 800d394:	4a08      	ldr	r2, [pc, #32]	@ (800d3b8 <xTaskPriorityDisinherit+0x108>)
 800d396:	441a      	add	r2, r3
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	3304      	adds	r3, #4
 800d39c:	4619      	mov	r1, r3
 800d39e:	4610      	mov	r0, r2
 800d3a0:	f7ff f97a 	bl	800c698 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d3a8:	697b      	ldr	r3, [r7, #20]
	}
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	3718      	adds	r7, #24
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}
 800d3b2:	bf00      	nop
 800d3b4:	20026600 	.word	0x20026600
 800d3b8:	20026604 	.word	0x20026604
 800d3bc:	200266c8 	.word	0x200266c8

0800d3c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b084      	sub	sp, #16
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d3ca:	4b29      	ldr	r3, [pc, #164]	@ (800d470 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3d0:	4b28      	ldr	r3, [pc, #160]	@ (800d474 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	3304      	adds	r3, #4
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f7ff f9bb 	bl	800c752 <uxListRemove>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d10b      	bne.n	800d3fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d3e2:	4b24      	ldr	r3, [pc, #144]	@ (800d474 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3e8:	2201      	movs	r2, #1
 800d3ea:	fa02 f303 	lsl.w	r3, r2, r3
 800d3ee:	43da      	mvns	r2, r3
 800d3f0:	4b21      	ldr	r3, [pc, #132]	@ (800d478 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	4013      	ands	r3, r2
 800d3f6:	4a20      	ldr	r2, [pc, #128]	@ (800d478 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d3f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d400:	d10a      	bne.n	800d418 <prvAddCurrentTaskToDelayedList+0x58>
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d007      	beq.n	800d418 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d408:	4b1a      	ldr	r3, [pc, #104]	@ (800d474 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	3304      	adds	r3, #4
 800d40e:	4619      	mov	r1, r3
 800d410:	481a      	ldr	r0, [pc, #104]	@ (800d47c <prvAddCurrentTaskToDelayedList+0xbc>)
 800d412:	f7ff f941 	bl	800c698 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d416:	e026      	b.n	800d466 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d418:	68fa      	ldr	r2, [r7, #12]
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	4413      	add	r3, r2
 800d41e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d420:	4b14      	ldr	r3, [pc, #80]	@ (800d474 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	68ba      	ldr	r2, [r7, #8]
 800d426:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d428:	68ba      	ldr	r2, [r7, #8]
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	429a      	cmp	r2, r3
 800d42e:	d209      	bcs.n	800d444 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d430:	4b13      	ldr	r3, [pc, #76]	@ (800d480 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d432:	681a      	ldr	r2, [r3, #0]
 800d434:	4b0f      	ldr	r3, [pc, #60]	@ (800d474 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	3304      	adds	r3, #4
 800d43a:	4619      	mov	r1, r3
 800d43c:	4610      	mov	r0, r2
 800d43e:	f7ff f94f 	bl	800c6e0 <vListInsert>
}
 800d442:	e010      	b.n	800d466 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d444:	4b0f      	ldr	r3, [pc, #60]	@ (800d484 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d446:	681a      	ldr	r2, [r3, #0]
 800d448:	4b0a      	ldr	r3, [pc, #40]	@ (800d474 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	3304      	adds	r3, #4
 800d44e:	4619      	mov	r1, r3
 800d450:	4610      	mov	r0, r2
 800d452:	f7ff f945 	bl	800c6e0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d456:	4b0c      	ldr	r3, [pc, #48]	@ (800d488 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	68ba      	ldr	r2, [r7, #8]
 800d45c:	429a      	cmp	r2, r3
 800d45e:	d202      	bcs.n	800d466 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d460:	4a09      	ldr	r2, [pc, #36]	@ (800d488 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	6013      	str	r3, [r2, #0]
}
 800d466:	bf00      	nop
 800d468:	3710      	adds	r7, #16
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}
 800d46e:	bf00      	nop
 800d470:	200266c4 	.word	0x200266c4
 800d474:	20026600 	.word	0x20026600
 800d478:	200266c8 	.word	0x200266c8
 800d47c:	200266ac 	.word	0x200266ac
 800d480:	20026694 	.word	0x20026694
 800d484:	20026690 	.word	0x20026690
 800d488:	200266dc 	.word	0x200266dc
 800d48c:	00000000 	.word	0x00000000

0800d490 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d490:	4b07      	ldr	r3, [pc, #28]	@ (800d4b0 <pxCurrentTCBConst2>)
 800d492:	6819      	ldr	r1, [r3, #0]
 800d494:	6808      	ldr	r0, [r1, #0]
 800d496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d49a:	f380 8809 	msr	PSP, r0
 800d49e:	f3bf 8f6f 	isb	sy
 800d4a2:	f04f 0000 	mov.w	r0, #0
 800d4a6:	f380 8811 	msr	BASEPRI, r0
 800d4aa:	4770      	bx	lr
 800d4ac:	f3af 8000 	nop.w

0800d4b0 <pxCurrentTCBConst2>:
 800d4b0:	20026600 	.word	0x20026600
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d4b4:	bf00      	nop
 800d4b6:	bf00      	nop

0800d4b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d4b8:	b480      	push	{r7}
 800d4ba:	b083      	sub	sp, #12
 800d4bc:	af00      	add	r7, sp, #0
	__asm volatile
 800d4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4c2:	f383 8811 	msr	BASEPRI, r3
 800d4c6:	f3bf 8f6f 	isb	sy
 800d4ca:	f3bf 8f4f 	dsb	sy
 800d4ce:	607b      	str	r3, [r7, #4]
}
 800d4d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d4d2:	4b10      	ldr	r3, [pc, #64]	@ (800d514 <vPortEnterCritical+0x5c>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	3301      	adds	r3, #1
 800d4d8:	4a0e      	ldr	r2, [pc, #56]	@ (800d514 <vPortEnterCritical+0x5c>)
 800d4da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d4dc:	4b0d      	ldr	r3, [pc, #52]	@ (800d514 <vPortEnterCritical+0x5c>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	2b01      	cmp	r3, #1
 800d4e2:	d110      	bne.n	800d506 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d4e4:	4b0c      	ldr	r3, [pc, #48]	@ (800d518 <vPortEnterCritical+0x60>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	b2db      	uxtb	r3, r3
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d00b      	beq.n	800d506 <vPortEnterCritical+0x4e>
	__asm volatile
 800d4ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4f2:	f383 8811 	msr	BASEPRI, r3
 800d4f6:	f3bf 8f6f 	isb	sy
 800d4fa:	f3bf 8f4f 	dsb	sy
 800d4fe:	603b      	str	r3, [r7, #0]
}
 800d500:	bf00      	nop
 800d502:	bf00      	nop
 800d504:	e7fd      	b.n	800d502 <vPortEnterCritical+0x4a>
	}
}
 800d506:	bf00      	nop
 800d508:	370c      	adds	r7, #12
 800d50a:	46bd      	mov	sp, r7
 800d50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d510:	4770      	bx	lr
 800d512:	bf00      	nop
 800d514:	20000018 	.word	0x20000018
 800d518:	e000ed04 	.word	0xe000ed04

0800d51c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d51c:	b480      	push	{r7}
 800d51e:	b083      	sub	sp, #12
 800d520:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d522:	4b12      	ldr	r3, [pc, #72]	@ (800d56c <vPortExitCritical+0x50>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d10b      	bne.n	800d542 <vPortExitCritical+0x26>
	__asm volatile
 800d52a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d52e:	f383 8811 	msr	BASEPRI, r3
 800d532:	f3bf 8f6f 	isb	sy
 800d536:	f3bf 8f4f 	dsb	sy
 800d53a:	607b      	str	r3, [r7, #4]
}
 800d53c:	bf00      	nop
 800d53e:	bf00      	nop
 800d540:	e7fd      	b.n	800d53e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d542:	4b0a      	ldr	r3, [pc, #40]	@ (800d56c <vPortExitCritical+0x50>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	3b01      	subs	r3, #1
 800d548:	4a08      	ldr	r2, [pc, #32]	@ (800d56c <vPortExitCritical+0x50>)
 800d54a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d54c:	4b07      	ldr	r3, [pc, #28]	@ (800d56c <vPortExitCritical+0x50>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d105      	bne.n	800d560 <vPortExitCritical+0x44>
 800d554:	2300      	movs	r3, #0
 800d556:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	f383 8811 	msr	BASEPRI, r3
}
 800d55e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d560:	bf00      	nop
 800d562:	370c      	adds	r7, #12
 800d564:	46bd      	mov	sp, r7
 800d566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56a:	4770      	bx	lr
 800d56c:	20000018 	.word	0x20000018

0800d570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d570:	f3ef 8009 	mrs	r0, PSP
 800d574:	f3bf 8f6f 	isb	sy
 800d578:	4b15      	ldr	r3, [pc, #84]	@ (800d5d0 <pxCurrentTCBConst>)
 800d57a:	681a      	ldr	r2, [r3, #0]
 800d57c:	f01e 0f10 	tst.w	lr, #16
 800d580:	bf08      	it	eq
 800d582:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d586:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d58a:	6010      	str	r0, [r2, #0]
 800d58c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d590:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d594:	f380 8811 	msr	BASEPRI, r0
 800d598:	f3bf 8f4f 	dsb	sy
 800d59c:	f3bf 8f6f 	isb	sy
 800d5a0:	f7ff fcdc 	bl	800cf5c <vTaskSwitchContext>
 800d5a4:	f04f 0000 	mov.w	r0, #0
 800d5a8:	f380 8811 	msr	BASEPRI, r0
 800d5ac:	bc09      	pop	{r0, r3}
 800d5ae:	6819      	ldr	r1, [r3, #0]
 800d5b0:	6808      	ldr	r0, [r1, #0]
 800d5b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5b6:	f01e 0f10 	tst.w	lr, #16
 800d5ba:	bf08      	it	eq
 800d5bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d5c0:	f380 8809 	msr	PSP, r0
 800d5c4:	f3bf 8f6f 	isb	sy
 800d5c8:	4770      	bx	lr
 800d5ca:	bf00      	nop
 800d5cc:	f3af 8000 	nop.w

0800d5d0 <pxCurrentTCBConst>:
 800d5d0:	20026600 	.word	0x20026600
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d5d4:	bf00      	nop
 800d5d6:	bf00      	nop

0800d5d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b082      	sub	sp, #8
 800d5dc:	af00      	add	r7, sp, #0
	__asm volatile
 800d5de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5e2:	f383 8811 	msr	BASEPRI, r3
 800d5e6:	f3bf 8f6f 	isb	sy
 800d5ea:	f3bf 8f4f 	dsb	sy
 800d5ee:	607b      	str	r3, [r7, #4]
}
 800d5f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d5f2:	f7ff fbf9 	bl	800cde8 <xTaskIncrementTick>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d003      	beq.n	800d604 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d5fc:	4b06      	ldr	r3, [pc, #24]	@ (800d618 <SysTick_Handler+0x40>)
 800d5fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d602:	601a      	str	r2, [r3, #0]
 800d604:	2300      	movs	r3, #0
 800d606:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	f383 8811 	msr	BASEPRI, r3
}
 800d60e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d610:	bf00      	nop
 800d612:	3708      	adds	r7, #8
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}
 800d618:	e000ed04 	.word	0xe000ed04

0800d61c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d61c:	b480      	push	{r7}
 800d61e:	b085      	sub	sp, #20
 800d620:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d622:	f3ef 8305 	mrs	r3, IPSR
 800d626:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	2b0f      	cmp	r3, #15
 800d62c:	d915      	bls.n	800d65a <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d62e:	4a18      	ldr	r2, [pc, #96]	@ (800d690 <vPortValidateInterruptPriority+0x74>)
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	4413      	add	r3, r2
 800d634:	781b      	ldrb	r3, [r3, #0]
 800d636:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d638:	4b16      	ldr	r3, [pc, #88]	@ (800d694 <vPortValidateInterruptPriority+0x78>)
 800d63a:	781b      	ldrb	r3, [r3, #0]
 800d63c:	7afa      	ldrb	r2, [r7, #11]
 800d63e:	429a      	cmp	r2, r3
 800d640:	d20b      	bcs.n	800d65a <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d646:	f383 8811 	msr	BASEPRI, r3
 800d64a:	f3bf 8f6f 	isb	sy
 800d64e:	f3bf 8f4f 	dsb	sy
 800d652:	607b      	str	r3, [r7, #4]
}
 800d654:	bf00      	nop
 800d656:	bf00      	nop
 800d658:	e7fd      	b.n	800d656 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d65a:	4b0f      	ldr	r3, [pc, #60]	@ (800d698 <vPortValidateInterruptPriority+0x7c>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d662:	4b0e      	ldr	r3, [pc, #56]	@ (800d69c <vPortValidateInterruptPriority+0x80>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	429a      	cmp	r2, r3
 800d668:	d90b      	bls.n	800d682 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d66a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d66e:	f383 8811 	msr	BASEPRI, r3
 800d672:	f3bf 8f6f 	isb	sy
 800d676:	f3bf 8f4f 	dsb	sy
 800d67a:	603b      	str	r3, [r7, #0]
}
 800d67c:	bf00      	nop
 800d67e:	bf00      	nop
 800d680:	e7fd      	b.n	800d67e <vPortValidateInterruptPriority+0x62>
	}
 800d682:	bf00      	nop
 800d684:	3714      	adds	r7, #20
 800d686:	46bd      	mov	sp, r7
 800d688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68c:	4770      	bx	lr
 800d68e:	bf00      	nop
 800d690:	e000e3f0 	.word	0xe000e3f0
 800d694:	200266e4 	.word	0x200266e4
 800d698:	e000ed0c 	.word	0xe000ed0c
 800d69c:	200266e8 	.word	0x200266e8

0800d6a0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b082      	sub	sp, #8
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7fe fec4 	bl	800c43c <USBH_LL_IncTimer>
}
 800d6b4:	bf00      	nop
 800d6b6:	3708      	adds	r7, #8
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b082      	sub	sp, #8
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f7fe ff08 	bl	800c4e0 <USBH_LL_Connect>
}
 800d6d0:	bf00      	nop
 800d6d2:	3708      	adds	r7, #8
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}

0800d6d8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b082      	sub	sp, #8
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f7fe ff1d 	bl	800c526 <USBH_LL_Disconnect>
}
 800d6ec:	bf00      	nop
 800d6ee:	3708      	adds	r7, #8
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}

0800d6f4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b082      	sub	sp, #8
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
 800d6fc:	460b      	mov	r3, r1
 800d6fe:	70fb      	strb	r3, [r7, #3]
 800d700:	4613      	mov	r3, r2
 800d702:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7fe ff3d 	bl	800c58a <USBH_LL_NotifyURBChange>
#endif
}
 800d710:	bf00      	nop
 800d712:	3708      	adds	r7, #8
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}

0800d718 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b082      	sub	sp, #8
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d726:	4618      	mov	r0, r3
 800d728:	f7fe feb2 	bl	800c490 <USBH_LL_PortEnabled>
}
 800d72c:	bf00      	nop
 800d72e:	3708      	adds	r7, #8
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}

0800d734 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b082      	sub	sp, #8
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d742:	4618      	mov	r0, r3
 800d744:	f7fe febe 	bl	800c4c4 <USBH_LL_PortDisabled>
}
 800d748:	bf00      	nop
 800d74a:	3708      	adds	r7, #8
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}

0800d750 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b084      	sub	sp, #16
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d758:	2300      	movs	r3, #0
 800d75a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d75c:	2300      	movs	r3, #0
 800d75e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d766:	4618      	mov	r0, r3
 800d768:	f7f9 fa3f 	bl	8006bea <HAL_HCD_Stop>
 800d76c:	4603      	mov	r3, r0
 800d76e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d770:	7bfb      	ldrb	r3, [r7, #15]
 800d772:	4618      	mov	r0, r3
 800d774:	f000 f808 	bl	800d788 <USBH_Get_USB_Status>
 800d778:	4603      	mov	r3, r0
 800d77a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d77c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d77e:	4618      	mov	r0, r3
 800d780:	3710      	adds	r7, #16
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}
	...

0800d788 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d788:	b480      	push	{r7}
 800d78a:	b085      	sub	sp, #20
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	4603      	mov	r3, r0
 800d790:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d792:	2300      	movs	r3, #0
 800d794:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d796:	79fb      	ldrb	r3, [r7, #7]
 800d798:	2b03      	cmp	r3, #3
 800d79a:	d817      	bhi.n	800d7cc <USBH_Get_USB_Status+0x44>
 800d79c:	a201      	add	r2, pc, #4	@ (adr r2, 800d7a4 <USBH_Get_USB_Status+0x1c>)
 800d79e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7a2:	bf00      	nop
 800d7a4:	0800d7b5 	.word	0x0800d7b5
 800d7a8:	0800d7bb 	.word	0x0800d7bb
 800d7ac:	0800d7c1 	.word	0x0800d7c1
 800d7b0:	0800d7c7 	.word	0x0800d7c7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	73fb      	strb	r3, [r7, #15]
    break;
 800d7b8:	e00b      	b.n	800d7d2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d7ba:	2302      	movs	r3, #2
 800d7bc:	73fb      	strb	r3, [r7, #15]
    break;
 800d7be:	e008      	b.n	800d7d2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	73fb      	strb	r3, [r7, #15]
    break;
 800d7c4:	e005      	b.n	800d7d2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d7c6:	2302      	movs	r3, #2
 800d7c8:	73fb      	strb	r3, [r7, #15]
    break;
 800d7ca:	e002      	b.n	800d7d2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d7cc:	2302      	movs	r3, #2
 800d7ce:	73fb      	strb	r3, [r7, #15]
    break;
 800d7d0:	bf00      	nop
  }
  return usb_status;
 800d7d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3714      	adds	r7, #20
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7de:	4770      	bx	lr

0800d7e0 <malloc>:
 800d7e0:	4b02      	ldr	r3, [pc, #8]	@ (800d7ec <malloc+0xc>)
 800d7e2:	4601      	mov	r1, r0
 800d7e4:	6818      	ldr	r0, [r3, #0]
 800d7e6:	f000 b825 	b.w	800d834 <_malloc_r>
 800d7ea:	bf00      	nop
 800d7ec:	20000028 	.word	0x20000028

0800d7f0 <sbrk_aligned>:
 800d7f0:	b570      	push	{r4, r5, r6, lr}
 800d7f2:	4e0f      	ldr	r6, [pc, #60]	@ (800d830 <sbrk_aligned+0x40>)
 800d7f4:	460c      	mov	r4, r1
 800d7f6:	6831      	ldr	r1, [r6, #0]
 800d7f8:	4605      	mov	r5, r0
 800d7fa:	b911      	cbnz	r1, 800d802 <sbrk_aligned+0x12>
 800d7fc:	f000 ff7c 	bl	800e6f8 <_sbrk_r>
 800d800:	6030      	str	r0, [r6, #0]
 800d802:	4621      	mov	r1, r4
 800d804:	4628      	mov	r0, r5
 800d806:	f000 ff77 	bl	800e6f8 <_sbrk_r>
 800d80a:	1c43      	adds	r3, r0, #1
 800d80c:	d103      	bne.n	800d816 <sbrk_aligned+0x26>
 800d80e:	f04f 34ff 	mov.w	r4, #4294967295
 800d812:	4620      	mov	r0, r4
 800d814:	bd70      	pop	{r4, r5, r6, pc}
 800d816:	1cc4      	adds	r4, r0, #3
 800d818:	f024 0403 	bic.w	r4, r4, #3
 800d81c:	42a0      	cmp	r0, r4
 800d81e:	d0f8      	beq.n	800d812 <sbrk_aligned+0x22>
 800d820:	1a21      	subs	r1, r4, r0
 800d822:	4628      	mov	r0, r5
 800d824:	f000 ff68 	bl	800e6f8 <_sbrk_r>
 800d828:	3001      	adds	r0, #1
 800d82a:	d1f2      	bne.n	800d812 <sbrk_aligned+0x22>
 800d82c:	e7ef      	b.n	800d80e <sbrk_aligned+0x1e>
 800d82e:	bf00      	nop
 800d830:	20026acc 	.word	0x20026acc

0800d834 <_malloc_r>:
 800d834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d838:	1ccd      	adds	r5, r1, #3
 800d83a:	f025 0503 	bic.w	r5, r5, #3
 800d83e:	3508      	adds	r5, #8
 800d840:	2d0c      	cmp	r5, #12
 800d842:	bf38      	it	cc
 800d844:	250c      	movcc	r5, #12
 800d846:	2d00      	cmp	r5, #0
 800d848:	4606      	mov	r6, r0
 800d84a:	db01      	blt.n	800d850 <_malloc_r+0x1c>
 800d84c:	42a9      	cmp	r1, r5
 800d84e:	d904      	bls.n	800d85a <_malloc_r+0x26>
 800d850:	230c      	movs	r3, #12
 800d852:	6033      	str	r3, [r6, #0]
 800d854:	2000      	movs	r0, #0
 800d856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d85a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d930 <_malloc_r+0xfc>
 800d85e:	f000 f869 	bl	800d934 <__malloc_lock>
 800d862:	f8d8 3000 	ldr.w	r3, [r8]
 800d866:	461c      	mov	r4, r3
 800d868:	bb44      	cbnz	r4, 800d8bc <_malloc_r+0x88>
 800d86a:	4629      	mov	r1, r5
 800d86c:	4630      	mov	r0, r6
 800d86e:	f7ff ffbf 	bl	800d7f0 <sbrk_aligned>
 800d872:	1c43      	adds	r3, r0, #1
 800d874:	4604      	mov	r4, r0
 800d876:	d158      	bne.n	800d92a <_malloc_r+0xf6>
 800d878:	f8d8 4000 	ldr.w	r4, [r8]
 800d87c:	4627      	mov	r7, r4
 800d87e:	2f00      	cmp	r7, #0
 800d880:	d143      	bne.n	800d90a <_malloc_r+0xd6>
 800d882:	2c00      	cmp	r4, #0
 800d884:	d04b      	beq.n	800d91e <_malloc_r+0xea>
 800d886:	6823      	ldr	r3, [r4, #0]
 800d888:	4639      	mov	r1, r7
 800d88a:	4630      	mov	r0, r6
 800d88c:	eb04 0903 	add.w	r9, r4, r3
 800d890:	f000 ff32 	bl	800e6f8 <_sbrk_r>
 800d894:	4581      	cmp	r9, r0
 800d896:	d142      	bne.n	800d91e <_malloc_r+0xea>
 800d898:	6821      	ldr	r1, [r4, #0]
 800d89a:	1a6d      	subs	r5, r5, r1
 800d89c:	4629      	mov	r1, r5
 800d89e:	4630      	mov	r0, r6
 800d8a0:	f7ff ffa6 	bl	800d7f0 <sbrk_aligned>
 800d8a4:	3001      	adds	r0, #1
 800d8a6:	d03a      	beq.n	800d91e <_malloc_r+0xea>
 800d8a8:	6823      	ldr	r3, [r4, #0]
 800d8aa:	442b      	add	r3, r5
 800d8ac:	6023      	str	r3, [r4, #0]
 800d8ae:	f8d8 3000 	ldr.w	r3, [r8]
 800d8b2:	685a      	ldr	r2, [r3, #4]
 800d8b4:	bb62      	cbnz	r2, 800d910 <_malloc_r+0xdc>
 800d8b6:	f8c8 7000 	str.w	r7, [r8]
 800d8ba:	e00f      	b.n	800d8dc <_malloc_r+0xa8>
 800d8bc:	6822      	ldr	r2, [r4, #0]
 800d8be:	1b52      	subs	r2, r2, r5
 800d8c0:	d420      	bmi.n	800d904 <_malloc_r+0xd0>
 800d8c2:	2a0b      	cmp	r2, #11
 800d8c4:	d917      	bls.n	800d8f6 <_malloc_r+0xc2>
 800d8c6:	1961      	adds	r1, r4, r5
 800d8c8:	42a3      	cmp	r3, r4
 800d8ca:	6025      	str	r5, [r4, #0]
 800d8cc:	bf18      	it	ne
 800d8ce:	6059      	strne	r1, [r3, #4]
 800d8d0:	6863      	ldr	r3, [r4, #4]
 800d8d2:	bf08      	it	eq
 800d8d4:	f8c8 1000 	streq.w	r1, [r8]
 800d8d8:	5162      	str	r2, [r4, r5]
 800d8da:	604b      	str	r3, [r1, #4]
 800d8dc:	4630      	mov	r0, r6
 800d8de:	f000 f82f 	bl	800d940 <__malloc_unlock>
 800d8e2:	f104 000b 	add.w	r0, r4, #11
 800d8e6:	1d23      	adds	r3, r4, #4
 800d8e8:	f020 0007 	bic.w	r0, r0, #7
 800d8ec:	1ac2      	subs	r2, r0, r3
 800d8ee:	bf1c      	itt	ne
 800d8f0:	1a1b      	subne	r3, r3, r0
 800d8f2:	50a3      	strne	r3, [r4, r2]
 800d8f4:	e7af      	b.n	800d856 <_malloc_r+0x22>
 800d8f6:	6862      	ldr	r2, [r4, #4]
 800d8f8:	42a3      	cmp	r3, r4
 800d8fa:	bf0c      	ite	eq
 800d8fc:	f8c8 2000 	streq.w	r2, [r8]
 800d900:	605a      	strne	r2, [r3, #4]
 800d902:	e7eb      	b.n	800d8dc <_malloc_r+0xa8>
 800d904:	4623      	mov	r3, r4
 800d906:	6864      	ldr	r4, [r4, #4]
 800d908:	e7ae      	b.n	800d868 <_malloc_r+0x34>
 800d90a:	463c      	mov	r4, r7
 800d90c:	687f      	ldr	r7, [r7, #4]
 800d90e:	e7b6      	b.n	800d87e <_malloc_r+0x4a>
 800d910:	461a      	mov	r2, r3
 800d912:	685b      	ldr	r3, [r3, #4]
 800d914:	42a3      	cmp	r3, r4
 800d916:	d1fb      	bne.n	800d910 <_malloc_r+0xdc>
 800d918:	2300      	movs	r3, #0
 800d91a:	6053      	str	r3, [r2, #4]
 800d91c:	e7de      	b.n	800d8dc <_malloc_r+0xa8>
 800d91e:	230c      	movs	r3, #12
 800d920:	6033      	str	r3, [r6, #0]
 800d922:	4630      	mov	r0, r6
 800d924:	f000 f80c 	bl	800d940 <__malloc_unlock>
 800d928:	e794      	b.n	800d854 <_malloc_r+0x20>
 800d92a:	6005      	str	r5, [r0, #0]
 800d92c:	e7d6      	b.n	800d8dc <_malloc_r+0xa8>
 800d92e:	bf00      	nop
 800d930:	20026ad0 	.word	0x20026ad0

0800d934 <__malloc_lock>:
 800d934:	4801      	ldr	r0, [pc, #4]	@ (800d93c <__malloc_lock+0x8>)
 800d936:	f000 bf2c 	b.w	800e792 <__retarget_lock_acquire_recursive>
 800d93a:	bf00      	nop
 800d93c:	20026c14 	.word	0x20026c14

0800d940 <__malloc_unlock>:
 800d940:	4801      	ldr	r0, [pc, #4]	@ (800d948 <__malloc_unlock+0x8>)
 800d942:	f000 bf27 	b.w	800e794 <__retarget_lock_release_recursive>
 800d946:	bf00      	nop
 800d948:	20026c14 	.word	0x20026c14

0800d94c <__cvt>:
 800d94c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d950:	ec57 6b10 	vmov	r6, r7, d0
 800d954:	2f00      	cmp	r7, #0
 800d956:	460c      	mov	r4, r1
 800d958:	4619      	mov	r1, r3
 800d95a:	463b      	mov	r3, r7
 800d95c:	bfbb      	ittet	lt
 800d95e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d962:	461f      	movlt	r7, r3
 800d964:	2300      	movge	r3, #0
 800d966:	232d      	movlt	r3, #45	@ 0x2d
 800d968:	700b      	strb	r3, [r1, #0]
 800d96a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d96c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d970:	4691      	mov	r9, r2
 800d972:	f023 0820 	bic.w	r8, r3, #32
 800d976:	bfbc      	itt	lt
 800d978:	4632      	movlt	r2, r6
 800d97a:	4616      	movlt	r6, r2
 800d97c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d980:	d005      	beq.n	800d98e <__cvt+0x42>
 800d982:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d986:	d100      	bne.n	800d98a <__cvt+0x3e>
 800d988:	3401      	adds	r4, #1
 800d98a:	2102      	movs	r1, #2
 800d98c:	e000      	b.n	800d990 <__cvt+0x44>
 800d98e:	2103      	movs	r1, #3
 800d990:	ab03      	add	r3, sp, #12
 800d992:	9301      	str	r3, [sp, #4]
 800d994:	ab02      	add	r3, sp, #8
 800d996:	9300      	str	r3, [sp, #0]
 800d998:	ec47 6b10 	vmov	d0, r6, r7
 800d99c:	4653      	mov	r3, sl
 800d99e:	4622      	mov	r2, r4
 800d9a0:	f000 ff92 	bl	800e8c8 <_dtoa_r>
 800d9a4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d9a8:	4605      	mov	r5, r0
 800d9aa:	d119      	bne.n	800d9e0 <__cvt+0x94>
 800d9ac:	f019 0f01 	tst.w	r9, #1
 800d9b0:	d00e      	beq.n	800d9d0 <__cvt+0x84>
 800d9b2:	eb00 0904 	add.w	r9, r0, r4
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	4630      	mov	r0, r6
 800d9bc:	4639      	mov	r1, r7
 800d9be:	f7f3 f893 	bl	8000ae8 <__aeabi_dcmpeq>
 800d9c2:	b108      	cbz	r0, 800d9c8 <__cvt+0x7c>
 800d9c4:	f8cd 900c 	str.w	r9, [sp, #12]
 800d9c8:	2230      	movs	r2, #48	@ 0x30
 800d9ca:	9b03      	ldr	r3, [sp, #12]
 800d9cc:	454b      	cmp	r3, r9
 800d9ce:	d31e      	bcc.n	800da0e <__cvt+0xc2>
 800d9d0:	9b03      	ldr	r3, [sp, #12]
 800d9d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d9d4:	1b5b      	subs	r3, r3, r5
 800d9d6:	4628      	mov	r0, r5
 800d9d8:	6013      	str	r3, [r2, #0]
 800d9da:	b004      	add	sp, #16
 800d9dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d9e4:	eb00 0904 	add.w	r9, r0, r4
 800d9e8:	d1e5      	bne.n	800d9b6 <__cvt+0x6a>
 800d9ea:	7803      	ldrb	r3, [r0, #0]
 800d9ec:	2b30      	cmp	r3, #48	@ 0x30
 800d9ee:	d10a      	bne.n	800da06 <__cvt+0xba>
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	4630      	mov	r0, r6
 800d9f6:	4639      	mov	r1, r7
 800d9f8:	f7f3 f876 	bl	8000ae8 <__aeabi_dcmpeq>
 800d9fc:	b918      	cbnz	r0, 800da06 <__cvt+0xba>
 800d9fe:	f1c4 0401 	rsb	r4, r4, #1
 800da02:	f8ca 4000 	str.w	r4, [sl]
 800da06:	f8da 3000 	ldr.w	r3, [sl]
 800da0a:	4499      	add	r9, r3
 800da0c:	e7d3      	b.n	800d9b6 <__cvt+0x6a>
 800da0e:	1c59      	adds	r1, r3, #1
 800da10:	9103      	str	r1, [sp, #12]
 800da12:	701a      	strb	r2, [r3, #0]
 800da14:	e7d9      	b.n	800d9ca <__cvt+0x7e>

0800da16 <__exponent>:
 800da16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da18:	2900      	cmp	r1, #0
 800da1a:	bfba      	itte	lt
 800da1c:	4249      	neglt	r1, r1
 800da1e:	232d      	movlt	r3, #45	@ 0x2d
 800da20:	232b      	movge	r3, #43	@ 0x2b
 800da22:	2909      	cmp	r1, #9
 800da24:	7002      	strb	r2, [r0, #0]
 800da26:	7043      	strb	r3, [r0, #1]
 800da28:	dd29      	ble.n	800da7e <__exponent+0x68>
 800da2a:	f10d 0307 	add.w	r3, sp, #7
 800da2e:	461d      	mov	r5, r3
 800da30:	270a      	movs	r7, #10
 800da32:	461a      	mov	r2, r3
 800da34:	fbb1 f6f7 	udiv	r6, r1, r7
 800da38:	fb07 1416 	mls	r4, r7, r6, r1
 800da3c:	3430      	adds	r4, #48	@ 0x30
 800da3e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800da42:	460c      	mov	r4, r1
 800da44:	2c63      	cmp	r4, #99	@ 0x63
 800da46:	f103 33ff 	add.w	r3, r3, #4294967295
 800da4a:	4631      	mov	r1, r6
 800da4c:	dcf1      	bgt.n	800da32 <__exponent+0x1c>
 800da4e:	3130      	adds	r1, #48	@ 0x30
 800da50:	1e94      	subs	r4, r2, #2
 800da52:	f803 1c01 	strb.w	r1, [r3, #-1]
 800da56:	1c41      	adds	r1, r0, #1
 800da58:	4623      	mov	r3, r4
 800da5a:	42ab      	cmp	r3, r5
 800da5c:	d30a      	bcc.n	800da74 <__exponent+0x5e>
 800da5e:	f10d 0309 	add.w	r3, sp, #9
 800da62:	1a9b      	subs	r3, r3, r2
 800da64:	42ac      	cmp	r4, r5
 800da66:	bf88      	it	hi
 800da68:	2300      	movhi	r3, #0
 800da6a:	3302      	adds	r3, #2
 800da6c:	4403      	add	r3, r0
 800da6e:	1a18      	subs	r0, r3, r0
 800da70:	b003      	add	sp, #12
 800da72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da74:	f813 6b01 	ldrb.w	r6, [r3], #1
 800da78:	f801 6f01 	strb.w	r6, [r1, #1]!
 800da7c:	e7ed      	b.n	800da5a <__exponent+0x44>
 800da7e:	2330      	movs	r3, #48	@ 0x30
 800da80:	3130      	adds	r1, #48	@ 0x30
 800da82:	7083      	strb	r3, [r0, #2]
 800da84:	70c1      	strb	r1, [r0, #3]
 800da86:	1d03      	adds	r3, r0, #4
 800da88:	e7f1      	b.n	800da6e <__exponent+0x58>
	...

0800da8c <_printf_float>:
 800da8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da90:	b08d      	sub	sp, #52	@ 0x34
 800da92:	460c      	mov	r4, r1
 800da94:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800da98:	4616      	mov	r6, r2
 800da9a:	461f      	mov	r7, r3
 800da9c:	4605      	mov	r5, r0
 800da9e:	f000 fdf3 	bl	800e688 <_localeconv_r>
 800daa2:	6803      	ldr	r3, [r0, #0]
 800daa4:	9304      	str	r3, [sp, #16]
 800daa6:	4618      	mov	r0, r3
 800daa8:	f7f2 fbf2 	bl	8000290 <strlen>
 800daac:	2300      	movs	r3, #0
 800daae:	930a      	str	r3, [sp, #40]	@ 0x28
 800dab0:	f8d8 3000 	ldr.w	r3, [r8]
 800dab4:	9005      	str	r0, [sp, #20]
 800dab6:	3307      	adds	r3, #7
 800dab8:	f023 0307 	bic.w	r3, r3, #7
 800dabc:	f103 0208 	add.w	r2, r3, #8
 800dac0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800dac4:	f8d4 b000 	ldr.w	fp, [r4]
 800dac8:	f8c8 2000 	str.w	r2, [r8]
 800dacc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dad0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800dad4:	9307      	str	r3, [sp, #28]
 800dad6:	f8cd 8018 	str.w	r8, [sp, #24]
 800dada:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800dade:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dae2:	4b9c      	ldr	r3, [pc, #624]	@ (800dd54 <_printf_float+0x2c8>)
 800dae4:	f04f 32ff 	mov.w	r2, #4294967295
 800dae8:	f7f3 f830 	bl	8000b4c <__aeabi_dcmpun>
 800daec:	bb70      	cbnz	r0, 800db4c <_printf_float+0xc0>
 800daee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800daf2:	4b98      	ldr	r3, [pc, #608]	@ (800dd54 <_printf_float+0x2c8>)
 800daf4:	f04f 32ff 	mov.w	r2, #4294967295
 800daf8:	f7f3 f80a 	bl	8000b10 <__aeabi_dcmple>
 800dafc:	bb30      	cbnz	r0, 800db4c <_printf_float+0xc0>
 800dafe:	2200      	movs	r2, #0
 800db00:	2300      	movs	r3, #0
 800db02:	4640      	mov	r0, r8
 800db04:	4649      	mov	r1, r9
 800db06:	f7f2 fff9 	bl	8000afc <__aeabi_dcmplt>
 800db0a:	b110      	cbz	r0, 800db12 <_printf_float+0x86>
 800db0c:	232d      	movs	r3, #45	@ 0x2d
 800db0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db12:	4a91      	ldr	r2, [pc, #580]	@ (800dd58 <_printf_float+0x2cc>)
 800db14:	4b91      	ldr	r3, [pc, #580]	@ (800dd5c <_printf_float+0x2d0>)
 800db16:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800db1a:	bf8c      	ite	hi
 800db1c:	4690      	movhi	r8, r2
 800db1e:	4698      	movls	r8, r3
 800db20:	2303      	movs	r3, #3
 800db22:	6123      	str	r3, [r4, #16]
 800db24:	f02b 0304 	bic.w	r3, fp, #4
 800db28:	6023      	str	r3, [r4, #0]
 800db2a:	f04f 0900 	mov.w	r9, #0
 800db2e:	9700      	str	r7, [sp, #0]
 800db30:	4633      	mov	r3, r6
 800db32:	aa0b      	add	r2, sp, #44	@ 0x2c
 800db34:	4621      	mov	r1, r4
 800db36:	4628      	mov	r0, r5
 800db38:	f000 f9d2 	bl	800dee0 <_printf_common>
 800db3c:	3001      	adds	r0, #1
 800db3e:	f040 808d 	bne.w	800dc5c <_printf_float+0x1d0>
 800db42:	f04f 30ff 	mov.w	r0, #4294967295
 800db46:	b00d      	add	sp, #52	@ 0x34
 800db48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db4c:	4642      	mov	r2, r8
 800db4e:	464b      	mov	r3, r9
 800db50:	4640      	mov	r0, r8
 800db52:	4649      	mov	r1, r9
 800db54:	f7f2 fffa 	bl	8000b4c <__aeabi_dcmpun>
 800db58:	b140      	cbz	r0, 800db6c <_printf_float+0xe0>
 800db5a:	464b      	mov	r3, r9
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	bfbc      	itt	lt
 800db60:	232d      	movlt	r3, #45	@ 0x2d
 800db62:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800db66:	4a7e      	ldr	r2, [pc, #504]	@ (800dd60 <_printf_float+0x2d4>)
 800db68:	4b7e      	ldr	r3, [pc, #504]	@ (800dd64 <_printf_float+0x2d8>)
 800db6a:	e7d4      	b.n	800db16 <_printf_float+0x8a>
 800db6c:	6863      	ldr	r3, [r4, #4]
 800db6e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800db72:	9206      	str	r2, [sp, #24]
 800db74:	1c5a      	adds	r2, r3, #1
 800db76:	d13b      	bne.n	800dbf0 <_printf_float+0x164>
 800db78:	2306      	movs	r3, #6
 800db7a:	6063      	str	r3, [r4, #4]
 800db7c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800db80:	2300      	movs	r3, #0
 800db82:	6022      	str	r2, [r4, #0]
 800db84:	9303      	str	r3, [sp, #12]
 800db86:	ab0a      	add	r3, sp, #40	@ 0x28
 800db88:	e9cd a301 	strd	sl, r3, [sp, #4]
 800db8c:	ab09      	add	r3, sp, #36	@ 0x24
 800db8e:	9300      	str	r3, [sp, #0]
 800db90:	6861      	ldr	r1, [r4, #4]
 800db92:	ec49 8b10 	vmov	d0, r8, r9
 800db96:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800db9a:	4628      	mov	r0, r5
 800db9c:	f7ff fed6 	bl	800d94c <__cvt>
 800dba0:	9b06      	ldr	r3, [sp, #24]
 800dba2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dba4:	2b47      	cmp	r3, #71	@ 0x47
 800dba6:	4680      	mov	r8, r0
 800dba8:	d129      	bne.n	800dbfe <_printf_float+0x172>
 800dbaa:	1cc8      	adds	r0, r1, #3
 800dbac:	db02      	blt.n	800dbb4 <_printf_float+0x128>
 800dbae:	6863      	ldr	r3, [r4, #4]
 800dbb0:	4299      	cmp	r1, r3
 800dbb2:	dd41      	ble.n	800dc38 <_printf_float+0x1ac>
 800dbb4:	f1aa 0a02 	sub.w	sl, sl, #2
 800dbb8:	fa5f fa8a 	uxtb.w	sl, sl
 800dbbc:	3901      	subs	r1, #1
 800dbbe:	4652      	mov	r2, sl
 800dbc0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800dbc4:	9109      	str	r1, [sp, #36]	@ 0x24
 800dbc6:	f7ff ff26 	bl	800da16 <__exponent>
 800dbca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dbcc:	1813      	adds	r3, r2, r0
 800dbce:	2a01      	cmp	r2, #1
 800dbd0:	4681      	mov	r9, r0
 800dbd2:	6123      	str	r3, [r4, #16]
 800dbd4:	dc02      	bgt.n	800dbdc <_printf_float+0x150>
 800dbd6:	6822      	ldr	r2, [r4, #0]
 800dbd8:	07d2      	lsls	r2, r2, #31
 800dbda:	d501      	bpl.n	800dbe0 <_printf_float+0x154>
 800dbdc:	3301      	adds	r3, #1
 800dbde:	6123      	str	r3, [r4, #16]
 800dbe0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d0a2      	beq.n	800db2e <_printf_float+0xa2>
 800dbe8:	232d      	movs	r3, #45	@ 0x2d
 800dbea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dbee:	e79e      	b.n	800db2e <_printf_float+0xa2>
 800dbf0:	9a06      	ldr	r2, [sp, #24]
 800dbf2:	2a47      	cmp	r2, #71	@ 0x47
 800dbf4:	d1c2      	bne.n	800db7c <_printf_float+0xf0>
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d1c0      	bne.n	800db7c <_printf_float+0xf0>
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	e7bd      	b.n	800db7a <_printf_float+0xee>
 800dbfe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dc02:	d9db      	bls.n	800dbbc <_printf_float+0x130>
 800dc04:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800dc08:	d118      	bne.n	800dc3c <_printf_float+0x1b0>
 800dc0a:	2900      	cmp	r1, #0
 800dc0c:	6863      	ldr	r3, [r4, #4]
 800dc0e:	dd0b      	ble.n	800dc28 <_printf_float+0x19c>
 800dc10:	6121      	str	r1, [r4, #16]
 800dc12:	b913      	cbnz	r3, 800dc1a <_printf_float+0x18e>
 800dc14:	6822      	ldr	r2, [r4, #0]
 800dc16:	07d0      	lsls	r0, r2, #31
 800dc18:	d502      	bpl.n	800dc20 <_printf_float+0x194>
 800dc1a:	3301      	adds	r3, #1
 800dc1c:	440b      	add	r3, r1
 800dc1e:	6123      	str	r3, [r4, #16]
 800dc20:	65a1      	str	r1, [r4, #88]	@ 0x58
 800dc22:	f04f 0900 	mov.w	r9, #0
 800dc26:	e7db      	b.n	800dbe0 <_printf_float+0x154>
 800dc28:	b913      	cbnz	r3, 800dc30 <_printf_float+0x1a4>
 800dc2a:	6822      	ldr	r2, [r4, #0]
 800dc2c:	07d2      	lsls	r2, r2, #31
 800dc2e:	d501      	bpl.n	800dc34 <_printf_float+0x1a8>
 800dc30:	3302      	adds	r3, #2
 800dc32:	e7f4      	b.n	800dc1e <_printf_float+0x192>
 800dc34:	2301      	movs	r3, #1
 800dc36:	e7f2      	b.n	800dc1e <_printf_float+0x192>
 800dc38:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800dc3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc3e:	4299      	cmp	r1, r3
 800dc40:	db05      	blt.n	800dc4e <_printf_float+0x1c2>
 800dc42:	6823      	ldr	r3, [r4, #0]
 800dc44:	6121      	str	r1, [r4, #16]
 800dc46:	07d8      	lsls	r0, r3, #31
 800dc48:	d5ea      	bpl.n	800dc20 <_printf_float+0x194>
 800dc4a:	1c4b      	adds	r3, r1, #1
 800dc4c:	e7e7      	b.n	800dc1e <_printf_float+0x192>
 800dc4e:	2900      	cmp	r1, #0
 800dc50:	bfd4      	ite	le
 800dc52:	f1c1 0202 	rsble	r2, r1, #2
 800dc56:	2201      	movgt	r2, #1
 800dc58:	4413      	add	r3, r2
 800dc5a:	e7e0      	b.n	800dc1e <_printf_float+0x192>
 800dc5c:	6823      	ldr	r3, [r4, #0]
 800dc5e:	055a      	lsls	r2, r3, #21
 800dc60:	d407      	bmi.n	800dc72 <_printf_float+0x1e6>
 800dc62:	6923      	ldr	r3, [r4, #16]
 800dc64:	4642      	mov	r2, r8
 800dc66:	4631      	mov	r1, r6
 800dc68:	4628      	mov	r0, r5
 800dc6a:	47b8      	blx	r7
 800dc6c:	3001      	adds	r0, #1
 800dc6e:	d12b      	bne.n	800dcc8 <_printf_float+0x23c>
 800dc70:	e767      	b.n	800db42 <_printf_float+0xb6>
 800dc72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dc76:	f240 80dd 	bls.w	800de34 <_printf_float+0x3a8>
 800dc7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800dc7e:	2200      	movs	r2, #0
 800dc80:	2300      	movs	r3, #0
 800dc82:	f7f2 ff31 	bl	8000ae8 <__aeabi_dcmpeq>
 800dc86:	2800      	cmp	r0, #0
 800dc88:	d033      	beq.n	800dcf2 <_printf_float+0x266>
 800dc8a:	4a37      	ldr	r2, [pc, #220]	@ (800dd68 <_printf_float+0x2dc>)
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	4631      	mov	r1, r6
 800dc90:	4628      	mov	r0, r5
 800dc92:	47b8      	blx	r7
 800dc94:	3001      	adds	r0, #1
 800dc96:	f43f af54 	beq.w	800db42 <_printf_float+0xb6>
 800dc9a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800dc9e:	4543      	cmp	r3, r8
 800dca0:	db02      	blt.n	800dca8 <_printf_float+0x21c>
 800dca2:	6823      	ldr	r3, [r4, #0]
 800dca4:	07d8      	lsls	r0, r3, #31
 800dca6:	d50f      	bpl.n	800dcc8 <_printf_float+0x23c>
 800dca8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dcac:	4631      	mov	r1, r6
 800dcae:	4628      	mov	r0, r5
 800dcb0:	47b8      	blx	r7
 800dcb2:	3001      	adds	r0, #1
 800dcb4:	f43f af45 	beq.w	800db42 <_printf_float+0xb6>
 800dcb8:	f04f 0900 	mov.w	r9, #0
 800dcbc:	f108 38ff 	add.w	r8, r8, #4294967295
 800dcc0:	f104 0a1a 	add.w	sl, r4, #26
 800dcc4:	45c8      	cmp	r8, r9
 800dcc6:	dc09      	bgt.n	800dcdc <_printf_float+0x250>
 800dcc8:	6823      	ldr	r3, [r4, #0]
 800dcca:	079b      	lsls	r3, r3, #30
 800dccc:	f100 8103 	bmi.w	800ded6 <_printf_float+0x44a>
 800dcd0:	68e0      	ldr	r0, [r4, #12]
 800dcd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dcd4:	4298      	cmp	r0, r3
 800dcd6:	bfb8      	it	lt
 800dcd8:	4618      	movlt	r0, r3
 800dcda:	e734      	b.n	800db46 <_printf_float+0xba>
 800dcdc:	2301      	movs	r3, #1
 800dcde:	4652      	mov	r2, sl
 800dce0:	4631      	mov	r1, r6
 800dce2:	4628      	mov	r0, r5
 800dce4:	47b8      	blx	r7
 800dce6:	3001      	adds	r0, #1
 800dce8:	f43f af2b 	beq.w	800db42 <_printf_float+0xb6>
 800dcec:	f109 0901 	add.w	r9, r9, #1
 800dcf0:	e7e8      	b.n	800dcc4 <_printf_float+0x238>
 800dcf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	dc39      	bgt.n	800dd6c <_printf_float+0x2e0>
 800dcf8:	4a1b      	ldr	r2, [pc, #108]	@ (800dd68 <_printf_float+0x2dc>)
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	4631      	mov	r1, r6
 800dcfe:	4628      	mov	r0, r5
 800dd00:	47b8      	blx	r7
 800dd02:	3001      	adds	r0, #1
 800dd04:	f43f af1d 	beq.w	800db42 <_printf_float+0xb6>
 800dd08:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800dd0c:	ea59 0303 	orrs.w	r3, r9, r3
 800dd10:	d102      	bne.n	800dd18 <_printf_float+0x28c>
 800dd12:	6823      	ldr	r3, [r4, #0]
 800dd14:	07d9      	lsls	r1, r3, #31
 800dd16:	d5d7      	bpl.n	800dcc8 <_printf_float+0x23c>
 800dd18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd1c:	4631      	mov	r1, r6
 800dd1e:	4628      	mov	r0, r5
 800dd20:	47b8      	blx	r7
 800dd22:	3001      	adds	r0, #1
 800dd24:	f43f af0d 	beq.w	800db42 <_printf_float+0xb6>
 800dd28:	f04f 0a00 	mov.w	sl, #0
 800dd2c:	f104 0b1a 	add.w	fp, r4, #26
 800dd30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd32:	425b      	negs	r3, r3
 800dd34:	4553      	cmp	r3, sl
 800dd36:	dc01      	bgt.n	800dd3c <_printf_float+0x2b0>
 800dd38:	464b      	mov	r3, r9
 800dd3a:	e793      	b.n	800dc64 <_printf_float+0x1d8>
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	465a      	mov	r2, fp
 800dd40:	4631      	mov	r1, r6
 800dd42:	4628      	mov	r0, r5
 800dd44:	47b8      	blx	r7
 800dd46:	3001      	adds	r0, #1
 800dd48:	f43f aefb 	beq.w	800db42 <_printf_float+0xb6>
 800dd4c:	f10a 0a01 	add.w	sl, sl, #1
 800dd50:	e7ee      	b.n	800dd30 <_printf_float+0x2a4>
 800dd52:	bf00      	nop
 800dd54:	7fefffff 	.word	0x7fefffff
 800dd58:	08010c78 	.word	0x08010c78
 800dd5c:	08010c74 	.word	0x08010c74
 800dd60:	08010c80 	.word	0x08010c80
 800dd64:	08010c7c 	.word	0x08010c7c
 800dd68:	08010c84 	.word	0x08010c84
 800dd6c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dd6e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dd72:	4553      	cmp	r3, sl
 800dd74:	bfa8      	it	ge
 800dd76:	4653      	movge	r3, sl
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	4699      	mov	r9, r3
 800dd7c:	dc36      	bgt.n	800ddec <_printf_float+0x360>
 800dd7e:	f04f 0b00 	mov.w	fp, #0
 800dd82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dd86:	f104 021a 	add.w	r2, r4, #26
 800dd8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dd8c:	9306      	str	r3, [sp, #24]
 800dd8e:	eba3 0309 	sub.w	r3, r3, r9
 800dd92:	455b      	cmp	r3, fp
 800dd94:	dc31      	bgt.n	800ddfa <_printf_float+0x36e>
 800dd96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd98:	459a      	cmp	sl, r3
 800dd9a:	dc3a      	bgt.n	800de12 <_printf_float+0x386>
 800dd9c:	6823      	ldr	r3, [r4, #0]
 800dd9e:	07da      	lsls	r2, r3, #31
 800dda0:	d437      	bmi.n	800de12 <_printf_float+0x386>
 800dda2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dda4:	ebaa 0903 	sub.w	r9, sl, r3
 800dda8:	9b06      	ldr	r3, [sp, #24]
 800ddaa:	ebaa 0303 	sub.w	r3, sl, r3
 800ddae:	4599      	cmp	r9, r3
 800ddb0:	bfa8      	it	ge
 800ddb2:	4699      	movge	r9, r3
 800ddb4:	f1b9 0f00 	cmp.w	r9, #0
 800ddb8:	dc33      	bgt.n	800de22 <_printf_float+0x396>
 800ddba:	f04f 0800 	mov.w	r8, #0
 800ddbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ddc2:	f104 0b1a 	add.w	fp, r4, #26
 800ddc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddc8:	ebaa 0303 	sub.w	r3, sl, r3
 800ddcc:	eba3 0309 	sub.w	r3, r3, r9
 800ddd0:	4543      	cmp	r3, r8
 800ddd2:	f77f af79 	ble.w	800dcc8 <_printf_float+0x23c>
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	465a      	mov	r2, fp
 800ddda:	4631      	mov	r1, r6
 800dddc:	4628      	mov	r0, r5
 800ddde:	47b8      	blx	r7
 800dde0:	3001      	adds	r0, #1
 800dde2:	f43f aeae 	beq.w	800db42 <_printf_float+0xb6>
 800dde6:	f108 0801 	add.w	r8, r8, #1
 800ddea:	e7ec      	b.n	800ddc6 <_printf_float+0x33a>
 800ddec:	4642      	mov	r2, r8
 800ddee:	4631      	mov	r1, r6
 800ddf0:	4628      	mov	r0, r5
 800ddf2:	47b8      	blx	r7
 800ddf4:	3001      	adds	r0, #1
 800ddf6:	d1c2      	bne.n	800dd7e <_printf_float+0x2f2>
 800ddf8:	e6a3      	b.n	800db42 <_printf_float+0xb6>
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	4631      	mov	r1, r6
 800ddfe:	4628      	mov	r0, r5
 800de00:	9206      	str	r2, [sp, #24]
 800de02:	47b8      	blx	r7
 800de04:	3001      	adds	r0, #1
 800de06:	f43f ae9c 	beq.w	800db42 <_printf_float+0xb6>
 800de0a:	9a06      	ldr	r2, [sp, #24]
 800de0c:	f10b 0b01 	add.w	fp, fp, #1
 800de10:	e7bb      	b.n	800dd8a <_printf_float+0x2fe>
 800de12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800de16:	4631      	mov	r1, r6
 800de18:	4628      	mov	r0, r5
 800de1a:	47b8      	blx	r7
 800de1c:	3001      	adds	r0, #1
 800de1e:	d1c0      	bne.n	800dda2 <_printf_float+0x316>
 800de20:	e68f      	b.n	800db42 <_printf_float+0xb6>
 800de22:	9a06      	ldr	r2, [sp, #24]
 800de24:	464b      	mov	r3, r9
 800de26:	4442      	add	r2, r8
 800de28:	4631      	mov	r1, r6
 800de2a:	4628      	mov	r0, r5
 800de2c:	47b8      	blx	r7
 800de2e:	3001      	adds	r0, #1
 800de30:	d1c3      	bne.n	800ddba <_printf_float+0x32e>
 800de32:	e686      	b.n	800db42 <_printf_float+0xb6>
 800de34:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800de38:	f1ba 0f01 	cmp.w	sl, #1
 800de3c:	dc01      	bgt.n	800de42 <_printf_float+0x3b6>
 800de3e:	07db      	lsls	r3, r3, #31
 800de40:	d536      	bpl.n	800deb0 <_printf_float+0x424>
 800de42:	2301      	movs	r3, #1
 800de44:	4642      	mov	r2, r8
 800de46:	4631      	mov	r1, r6
 800de48:	4628      	mov	r0, r5
 800de4a:	47b8      	blx	r7
 800de4c:	3001      	adds	r0, #1
 800de4e:	f43f ae78 	beq.w	800db42 <_printf_float+0xb6>
 800de52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800de56:	4631      	mov	r1, r6
 800de58:	4628      	mov	r0, r5
 800de5a:	47b8      	blx	r7
 800de5c:	3001      	adds	r0, #1
 800de5e:	f43f ae70 	beq.w	800db42 <_printf_float+0xb6>
 800de62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800de66:	2200      	movs	r2, #0
 800de68:	2300      	movs	r3, #0
 800de6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800de6e:	f7f2 fe3b 	bl	8000ae8 <__aeabi_dcmpeq>
 800de72:	b9c0      	cbnz	r0, 800dea6 <_printf_float+0x41a>
 800de74:	4653      	mov	r3, sl
 800de76:	f108 0201 	add.w	r2, r8, #1
 800de7a:	4631      	mov	r1, r6
 800de7c:	4628      	mov	r0, r5
 800de7e:	47b8      	blx	r7
 800de80:	3001      	adds	r0, #1
 800de82:	d10c      	bne.n	800de9e <_printf_float+0x412>
 800de84:	e65d      	b.n	800db42 <_printf_float+0xb6>
 800de86:	2301      	movs	r3, #1
 800de88:	465a      	mov	r2, fp
 800de8a:	4631      	mov	r1, r6
 800de8c:	4628      	mov	r0, r5
 800de8e:	47b8      	blx	r7
 800de90:	3001      	adds	r0, #1
 800de92:	f43f ae56 	beq.w	800db42 <_printf_float+0xb6>
 800de96:	f108 0801 	add.w	r8, r8, #1
 800de9a:	45d0      	cmp	r8, sl
 800de9c:	dbf3      	blt.n	800de86 <_printf_float+0x3fa>
 800de9e:	464b      	mov	r3, r9
 800dea0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800dea4:	e6df      	b.n	800dc66 <_printf_float+0x1da>
 800dea6:	f04f 0800 	mov.w	r8, #0
 800deaa:	f104 0b1a 	add.w	fp, r4, #26
 800deae:	e7f4      	b.n	800de9a <_printf_float+0x40e>
 800deb0:	2301      	movs	r3, #1
 800deb2:	4642      	mov	r2, r8
 800deb4:	e7e1      	b.n	800de7a <_printf_float+0x3ee>
 800deb6:	2301      	movs	r3, #1
 800deb8:	464a      	mov	r2, r9
 800deba:	4631      	mov	r1, r6
 800debc:	4628      	mov	r0, r5
 800debe:	47b8      	blx	r7
 800dec0:	3001      	adds	r0, #1
 800dec2:	f43f ae3e 	beq.w	800db42 <_printf_float+0xb6>
 800dec6:	f108 0801 	add.w	r8, r8, #1
 800deca:	68e3      	ldr	r3, [r4, #12]
 800decc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dece:	1a5b      	subs	r3, r3, r1
 800ded0:	4543      	cmp	r3, r8
 800ded2:	dcf0      	bgt.n	800deb6 <_printf_float+0x42a>
 800ded4:	e6fc      	b.n	800dcd0 <_printf_float+0x244>
 800ded6:	f04f 0800 	mov.w	r8, #0
 800deda:	f104 0919 	add.w	r9, r4, #25
 800dede:	e7f4      	b.n	800deca <_printf_float+0x43e>

0800dee0 <_printf_common>:
 800dee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dee4:	4616      	mov	r6, r2
 800dee6:	4698      	mov	r8, r3
 800dee8:	688a      	ldr	r2, [r1, #8]
 800deea:	690b      	ldr	r3, [r1, #16]
 800deec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800def0:	4293      	cmp	r3, r2
 800def2:	bfb8      	it	lt
 800def4:	4613      	movlt	r3, r2
 800def6:	6033      	str	r3, [r6, #0]
 800def8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800defc:	4607      	mov	r7, r0
 800defe:	460c      	mov	r4, r1
 800df00:	b10a      	cbz	r2, 800df06 <_printf_common+0x26>
 800df02:	3301      	adds	r3, #1
 800df04:	6033      	str	r3, [r6, #0]
 800df06:	6823      	ldr	r3, [r4, #0]
 800df08:	0699      	lsls	r1, r3, #26
 800df0a:	bf42      	ittt	mi
 800df0c:	6833      	ldrmi	r3, [r6, #0]
 800df0e:	3302      	addmi	r3, #2
 800df10:	6033      	strmi	r3, [r6, #0]
 800df12:	6825      	ldr	r5, [r4, #0]
 800df14:	f015 0506 	ands.w	r5, r5, #6
 800df18:	d106      	bne.n	800df28 <_printf_common+0x48>
 800df1a:	f104 0a19 	add.w	sl, r4, #25
 800df1e:	68e3      	ldr	r3, [r4, #12]
 800df20:	6832      	ldr	r2, [r6, #0]
 800df22:	1a9b      	subs	r3, r3, r2
 800df24:	42ab      	cmp	r3, r5
 800df26:	dc26      	bgt.n	800df76 <_printf_common+0x96>
 800df28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800df2c:	6822      	ldr	r2, [r4, #0]
 800df2e:	3b00      	subs	r3, #0
 800df30:	bf18      	it	ne
 800df32:	2301      	movne	r3, #1
 800df34:	0692      	lsls	r2, r2, #26
 800df36:	d42b      	bmi.n	800df90 <_printf_common+0xb0>
 800df38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800df3c:	4641      	mov	r1, r8
 800df3e:	4638      	mov	r0, r7
 800df40:	47c8      	blx	r9
 800df42:	3001      	adds	r0, #1
 800df44:	d01e      	beq.n	800df84 <_printf_common+0xa4>
 800df46:	6823      	ldr	r3, [r4, #0]
 800df48:	6922      	ldr	r2, [r4, #16]
 800df4a:	f003 0306 	and.w	r3, r3, #6
 800df4e:	2b04      	cmp	r3, #4
 800df50:	bf02      	ittt	eq
 800df52:	68e5      	ldreq	r5, [r4, #12]
 800df54:	6833      	ldreq	r3, [r6, #0]
 800df56:	1aed      	subeq	r5, r5, r3
 800df58:	68a3      	ldr	r3, [r4, #8]
 800df5a:	bf0c      	ite	eq
 800df5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800df60:	2500      	movne	r5, #0
 800df62:	4293      	cmp	r3, r2
 800df64:	bfc4      	itt	gt
 800df66:	1a9b      	subgt	r3, r3, r2
 800df68:	18ed      	addgt	r5, r5, r3
 800df6a:	2600      	movs	r6, #0
 800df6c:	341a      	adds	r4, #26
 800df6e:	42b5      	cmp	r5, r6
 800df70:	d11a      	bne.n	800dfa8 <_printf_common+0xc8>
 800df72:	2000      	movs	r0, #0
 800df74:	e008      	b.n	800df88 <_printf_common+0xa8>
 800df76:	2301      	movs	r3, #1
 800df78:	4652      	mov	r2, sl
 800df7a:	4641      	mov	r1, r8
 800df7c:	4638      	mov	r0, r7
 800df7e:	47c8      	blx	r9
 800df80:	3001      	adds	r0, #1
 800df82:	d103      	bne.n	800df8c <_printf_common+0xac>
 800df84:	f04f 30ff 	mov.w	r0, #4294967295
 800df88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df8c:	3501      	adds	r5, #1
 800df8e:	e7c6      	b.n	800df1e <_printf_common+0x3e>
 800df90:	18e1      	adds	r1, r4, r3
 800df92:	1c5a      	adds	r2, r3, #1
 800df94:	2030      	movs	r0, #48	@ 0x30
 800df96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800df9a:	4422      	add	r2, r4
 800df9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dfa0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dfa4:	3302      	adds	r3, #2
 800dfa6:	e7c7      	b.n	800df38 <_printf_common+0x58>
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	4622      	mov	r2, r4
 800dfac:	4641      	mov	r1, r8
 800dfae:	4638      	mov	r0, r7
 800dfb0:	47c8      	blx	r9
 800dfb2:	3001      	adds	r0, #1
 800dfb4:	d0e6      	beq.n	800df84 <_printf_common+0xa4>
 800dfb6:	3601      	adds	r6, #1
 800dfb8:	e7d9      	b.n	800df6e <_printf_common+0x8e>
	...

0800dfbc <_printf_i>:
 800dfbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dfc0:	7e0f      	ldrb	r7, [r1, #24]
 800dfc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dfc4:	2f78      	cmp	r7, #120	@ 0x78
 800dfc6:	4691      	mov	r9, r2
 800dfc8:	4680      	mov	r8, r0
 800dfca:	460c      	mov	r4, r1
 800dfcc:	469a      	mov	sl, r3
 800dfce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dfd2:	d807      	bhi.n	800dfe4 <_printf_i+0x28>
 800dfd4:	2f62      	cmp	r7, #98	@ 0x62
 800dfd6:	d80a      	bhi.n	800dfee <_printf_i+0x32>
 800dfd8:	2f00      	cmp	r7, #0
 800dfda:	f000 80d1 	beq.w	800e180 <_printf_i+0x1c4>
 800dfde:	2f58      	cmp	r7, #88	@ 0x58
 800dfe0:	f000 80b8 	beq.w	800e154 <_printf_i+0x198>
 800dfe4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dfe8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dfec:	e03a      	b.n	800e064 <_printf_i+0xa8>
 800dfee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dff2:	2b15      	cmp	r3, #21
 800dff4:	d8f6      	bhi.n	800dfe4 <_printf_i+0x28>
 800dff6:	a101      	add	r1, pc, #4	@ (adr r1, 800dffc <_printf_i+0x40>)
 800dff8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dffc:	0800e055 	.word	0x0800e055
 800e000:	0800e069 	.word	0x0800e069
 800e004:	0800dfe5 	.word	0x0800dfe5
 800e008:	0800dfe5 	.word	0x0800dfe5
 800e00c:	0800dfe5 	.word	0x0800dfe5
 800e010:	0800dfe5 	.word	0x0800dfe5
 800e014:	0800e069 	.word	0x0800e069
 800e018:	0800dfe5 	.word	0x0800dfe5
 800e01c:	0800dfe5 	.word	0x0800dfe5
 800e020:	0800dfe5 	.word	0x0800dfe5
 800e024:	0800dfe5 	.word	0x0800dfe5
 800e028:	0800e167 	.word	0x0800e167
 800e02c:	0800e093 	.word	0x0800e093
 800e030:	0800e121 	.word	0x0800e121
 800e034:	0800dfe5 	.word	0x0800dfe5
 800e038:	0800dfe5 	.word	0x0800dfe5
 800e03c:	0800e189 	.word	0x0800e189
 800e040:	0800dfe5 	.word	0x0800dfe5
 800e044:	0800e093 	.word	0x0800e093
 800e048:	0800dfe5 	.word	0x0800dfe5
 800e04c:	0800dfe5 	.word	0x0800dfe5
 800e050:	0800e129 	.word	0x0800e129
 800e054:	6833      	ldr	r3, [r6, #0]
 800e056:	1d1a      	adds	r2, r3, #4
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	6032      	str	r2, [r6, #0]
 800e05c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e060:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e064:	2301      	movs	r3, #1
 800e066:	e09c      	b.n	800e1a2 <_printf_i+0x1e6>
 800e068:	6833      	ldr	r3, [r6, #0]
 800e06a:	6820      	ldr	r0, [r4, #0]
 800e06c:	1d19      	adds	r1, r3, #4
 800e06e:	6031      	str	r1, [r6, #0]
 800e070:	0606      	lsls	r6, r0, #24
 800e072:	d501      	bpl.n	800e078 <_printf_i+0xbc>
 800e074:	681d      	ldr	r5, [r3, #0]
 800e076:	e003      	b.n	800e080 <_printf_i+0xc4>
 800e078:	0645      	lsls	r5, r0, #25
 800e07a:	d5fb      	bpl.n	800e074 <_printf_i+0xb8>
 800e07c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e080:	2d00      	cmp	r5, #0
 800e082:	da03      	bge.n	800e08c <_printf_i+0xd0>
 800e084:	232d      	movs	r3, #45	@ 0x2d
 800e086:	426d      	negs	r5, r5
 800e088:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e08c:	4858      	ldr	r0, [pc, #352]	@ (800e1f0 <_printf_i+0x234>)
 800e08e:	230a      	movs	r3, #10
 800e090:	e011      	b.n	800e0b6 <_printf_i+0xfa>
 800e092:	6821      	ldr	r1, [r4, #0]
 800e094:	6833      	ldr	r3, [r6, #0]
 800e096:	0608      	lsls	r0, r1, #24
 800e098:	f853 5b04 	ldr.w	r5, [r3], #4
 800e09c:	d402      	bmi.n	800e0a4 <_printf_i+0xe8>
 800e09e:	0649      	lsls	r1, r1, #25
 800e0a0:	bf48      	it	mi
 800e0a2:	b2ad      	uxthmi	r5, r5
 800e0a4:	2f6f      	cmp	r7, #111	@ 0x6f
 800e0a6:	4852      	ldr	r0, [pc, #328]	@ (800e1f0 <_printf_i+0x234>)
 800e0a8:	6033      	str	r3, [r6, #0]
 800e0aa:	bf14      	ite	ne
 800e0ac:	230a      	movne	r3, #10
 800e0ae:	2308      	moveq	r3, #8
 800e0b0:	2100      	movs	r1, #0
 800e0b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e0b6:	6866      	ldr	r6, [r4, #4]
 800e0b8:	60a6      	str	r6, [r4, #8]
 800e0ba:	2e00      	cmp	r6, #0
 800e0bc:	db05      	blt.n	800e0ca <_printf_i+0x10e>
 800e0be:	6821      	ldr	r1, [r4, #0]
 800e0c0:	432e      	orrs	r6, r5
 800e0c2:	f021 0104 	bic.w	r1, r1, #4
 800e0c6:	6021      	str	r1, [r4, #0]
 800e0c8:	d04b      	beq.n	800e162 <_printf_i+0x1a6>
 800e0ca:	4616      	mov	r6, r2
 800e0cc:	fbb5 f1f3 	udiv	r1, r5, r3
 800e0d0:	fb03 5711 	mls	r7, r3, r1, r5
 800e0d4:	5dc7      	ldrb	r7, [r0, r7]
 800e0d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e0da:	462f      	mov	r7, r5
 800e0dc:	42bb      	cmp	r3, r7
 800e0de:	460d      	mov	r5, r1
 800e0e0:	d9f4      	bls.n	800e0cc <_printf_i+0x110>
 800e0e2:	2b08      	cmp	r3, #8
 800e0e4:	d10b      	bne.n	800e0fe <_printf_i+0x142>
 800e0e6:	6823      	ldr	r3, [r4, #0]
 800e0e8:	07df      	lsls	r7, r3, #31
 800e0ea:	d508      	bpl.n	800e0fe <_printf_i+0x142>
 800e0ec:	6923      	ldr	r3, [r4, #16]
 800e0ee:	6861      	ldr	r1, [r4, #4]
 800e0f0:	4299      	cmp	r1, r3
 800e0f2:	bfde      	ittt	le
 800e0f4:	2330      	movle	r3, #48	@ 0x30
 800e0f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e0fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e0fe:	1b92      	subs	r2, r2, r6
 800e100:	6122      	str	r2, [r4, #16]
 800e102:	f8cd a000 	str.w	sl, [sp]
 800e106:	464b      	mov	r3, r9
 800e108:	aa03      	add	r2, sp, #12
 800e10a:	4621      	mov	r1, r4
 800e10c:	4640      	mov	r0, r8
 800e10e:	f7ff fee7 	bl	800dee0 <_printf_common>
 800e112:	3001      	adds	r0, #1
 800e114:	d14a      	bne.n	800e1ac <_printf_i+0x1f0>
 800e116:	f04f 30ff 	mov.w	r0, #4294967295
 800e11a:	b004      	add	sp, #16
 800e11c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e120:	6823      	ldr	r3, [r4, #0]
 800e122:	f043 0320 	orr.w	r3, r3, #32
 800e126:	6023      	str	r3, [r4, #0]
 800e128:	4832      	ldr	r0, [pc, #200]	@ (800e1f4 <_printf_i+0x238>)
 800e12a:	2778      	movs	r7, #120	@ 0x78
 800e12c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e130:	6823      	ldr	r3, [r4, #0]
 800e132:	6831      	ldr	r1, [r6, #0]
 800e134:	061f      	lsls	r7, r3, #24
 800e136:	f851 5b04 	ldr.w	r5, [r1], #4
 800e13a:	d402      	bmi.n	800e142 <_printf_i+0x186>
 800e13c:	065f      	lsls	r7, r3, #25
 800e13e:	bf48      	it	mi
 800e140:	b2ad      	uxthmi	r5, r5
 800e142:	6031      	str	r1, [r6, #0]
 800e144:	07d9      	lsls	r1, r3, #31
 800e146:	bf44      	itt	mi
 800e148:	f043 0320 	orrmi.w	r3, r3, #32
 800e14c:	6023      	strmi	r3, [r4, #0]
 800e14e:	b11d      	cbz	r5, 800e158 <_printf_i+0x19c>
 800e150:	2310      	movs	r3, #16
 800e152:	e7ad      	b.n	800e0b0 <_printf_i+0xf4>
 800e154:	4826      	ldr	r0, [pc, #152]	@ (800e1f0 <_printf_i+0x234>)
 800e156:	e7e9      	b.n	800e12c <_printf_i+0x170>
 800e158:	6823      	ldr	r3, [r4, #0]
 800e15a:	f023 0320 	bic.w	r3, r3, #32
 800e15e:	6023      	str	r3, [r4, #0]
 800e160:	e7f6      	b.n	800e150 <_printf_i+0x194>
 800e162:	4616      	mov	r6, r2
 800e164:	e7bd      	b.n	800e0e2 <_printf_i+0x126>
 800e166:	6833      	ldr	r3, [r6, #0]
 800e168:	6825      	ldr	r5, [r4, #0]
 800e16a:	6961      	ldr	r1, [r4, #20]
 800e16c:	1d18      	adds	r0, r3, #4
 800e16e:	6030      	str	r0, [r6, #0]
 800e170:	062e      	lsls	r6, r5, #24
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	d501      	bpl.n	800e17a <_printf_i+0x1be>
 800e176:	6019      	str	r1, [r3, #0]
 800e178:	e002      	b.n	800e180 <_printf_i+0x1c4>
 800e17a:	0668      	lsls	r0, r5, #25
 800e17c:	d5fb      	bpl.n	800e176 <_printf_i+0x1ba>
 800e17e:	8019      	strh	r1, [r3, #0]
 800e180:	2300      	movs	r3, #0
 800e182:	6123      	str	r3, [r4, #16]
 800e184:	4616      	mov	r6, r2
 800e186:	e7bc      	b.n	800e102 <_printf_i+0x146>
 800e188:	6833      	ldr	r3, [r6, #0]
 800e18a:	1d1a      	adds	r2, r3, #4
 800e18c:	6032      	str	r2, [r6, #0]
 800e18e:	681e      	ldr	r6, [r3, #0]
 800e190:	6862      	ldr	r2, [r4, #4]
 800e192:	2100      	movs	r1, #0
 800e194:	4630      	mov	r0, r6
 800e196:	f7f2 f82b 	bl	80001f0 <memchr>
 800e19a:	b108      	cbz	r0, 800e1a0 <_printf_i+0x1e4>
 800e19c:	1b80      	subs	r0, r0, r6
 800e19e:	6060      	str	r0, [r4, #4]
 800e1a0:	6863      	ldr	r3, [r4, #4]
 800e1a2:	6123      	str	r3, [r4, #16]
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e1aa:	e7aa      	b.n	800e102 <_printf_i+0x146>
 800e1ac:	6923      	ldr	r3, [r4, #16]
 800e1ae:	4632      	mov	r2, r6
 800e1b0:	4649      	mov	r1, r9
 800e1b2:	4640      	mov	r0, r8
 800e1b4:	47d0      	blx	sl
 800e1b6:	3001      	adds	r0, #1
 800e1b8:	d0ad      	beq.n	800e116 <_printf_i+0x15a>
 800e1ba:	6823      	ldr	r3, [r4, #0]
 800e1bc:	079b      	lsls	r3, r3, #30
 800e1be:	d413      	bmi.n	800e1e8 <_printf_i+0x22c>
 800e1c0:	68e0      	ldr	r0, [r4, #12]
 800e1c2:	9b03      	ldr	r3, [sp, #12]
 800e1c4:	4298      	cmp	r0, r3
 800e1c6:	bfb8      	it	lt
 800e1c8:	4618      	movlt	r0, r3
 800e1ca:	e7a6      	b.n	800e11a <_printf_i+0x15e>
 800e1cc:	2301      	movs	r3, #1
 800e1ce:	4632      	mov	r2, r6
 800e1d0:	4649      	mov	r1, r9
 800e1d2:	4640      	mov	r0, r8
 800e1d4:	47d0      	blx	sl
 800e1d6:	3001      	adds	r0, #1
 800e1d8:	d09d      	beq.n	800e116 <_printf_i+0x15a>
 800e1da:	3501      	adds	r5, #1
 800e1dc:	68e3      	ldr	r3, [r4, #12]
 800e1de:	9903      	ldr	r1, [sp, #12]
 800e1e0:	1a5b      	subs	r3, r3, r1
 800e1e2:	42ab      	cmp	r3, r5
 800e1e4:	dcf2      	bgt.n	800e1cc <_printf_i+0x210>
 800e1e6:	e7eb      	b.n	800e1c0 <_printf_i+0x204>
 800e1e8:	2500      	movs	r5, #0
 800e1ea:	f104 0619 	add.w	r6, r4, #25
 800e1ee:	e7f5      	b.n	800e1dc <_printf_i+0x220>
 800e1f0:	08010c86 	.word	0x08010c86
 800e1f4:	08010c97 	.word	0x08010c97

0800e1f8 <std>:
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	b510      	push	{r4, lr}
 800e1fc:	4604      	mov	r4, r0
 800e1fe:	e9c0 3300 	strd	r3, r3, [r0]
 800e202:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e206:	6083      	str	r3, [r0, #8]
 800e208:	8181      	strh	r1, [r0, #12]
 800e20a:	6643      	str	r3, [r0, #100]	@ 0x64
 800e20c:	81c2      	strh	r2, [r0, #14]
 800e20e:	6183      	str	r3, [r0, #24]
 800e210:	4619      	mov	r1, r3
 800e212:	2208      	movs	r2, #8
 800e214:	305c      	adds	r0, #92	@ 0x5c
 800e216:	f000 fa2f 	bl	800e678 <memset>
 800e21a:	4b0d      	ldr	r3, [pc, #52]	@ (800e250 <std+0x58>)
 800e21c:	6263      	str	r3, [r4, #36]	@ 0x24
 800e21e:	4b0d      	ldr	r3, [pc, #52]	@ (800e254 <std+0x5c>)
 800e220:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e222:	4b0d      	ldr	r3, [pc, #52]	@ (800e258 <std+0x60>)
 800e224:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e226:	4b0d      	ldr	r3, [pc, #52]	@ (800e25c <std+0x64>)
 800e228:	6323      	str	r3, [r4, #48]	@ 0x30
 800e22a:	4b0d      	ldr	r3, [pc, #52]	@ (800e260 <std+0x68>)
 800e22c:	6224      	str	r4, [r4, #32]
 800e22e:	429c      	cmp	r4, r3
 800e230:	d006      	beq.n	800e240 <std+0x48>
 800e232:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e236:	4294      	cmp	r4, r2
 800e238:	d002      	beq.n	800e240 <std+0x48>
 800e23a:	33d0      	adds	r3, #208	@ 0xd0
 800e23c:	429c      	cmp	r4, r3
 800e23e:	d105      	bne.n	800e24c <std+0x54>
 800e240:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e248:	f000 baa2 	b.w	800e790 <__retarget_lock_init_recursive>
 800e24c:	bd10      	pop	{r4, pc}
 800e24e:	bf00      	nop
 800e250:	0800e4c9 	.word	0x0800e4c9
 800e254:	0800e4eb 	.word	0x0800e4eb
 800e258:	0800e523 	.word	0x0800e523
 800e25c:	0800e547 	.word	0x0800e547
 800e260:	20026ad4 	.word	0x20026ad4

0800e264 <stdio_exit_handler>:
 800e264:	4a02      	ldr	r2, [pc, #8]	@ (800e270 <stdio_exit_handler+0xc>)
 800e266:	4903      	ldr	r1, [pc, #12]	@ (800e274 <stdio_exit_handler+0x10>)
 800e268:	4803      	ldr	r0, [pc, #12]	@ (800e278 <stdio_exit_handler+0x14>)
 800e26a:	f000 b869 	b.w	800e340 <_fwalk_sglue>
 800e26e:	bf00      	nop
 800e270:	2000001c 	.word	0x2000001c
 800e274:	0801022d 	.word	0x0801022d
 800e278:	2000002c 	.word	0x2000002c

0800e27c <cleanup_stdio>:
 800e27c:	6841      	ldr	r1, [r0, #4]
 800e27e:	4b0c      	ldr	r3, [pc, #48]	@ (800e2b0 <cleanup_stdio+0x34>)
 800e280:	4299      	cmp	r1, r3
 800e282:	b510      	push	{r4, lr}
 800e284:	4604      	mov	r4, r0
 800e286:	d001      	beq.n	800e28c <cleanup_stdio+0x10>
 800e288:	f001 ffd0 	bl	801022c <_fflush_r>
 800e28c:	68a1      	ldr	r1, [r4, #8]
 800e28e:	4b09      	ldr	r3, [pc, #36]	@ (800e2b4 <cleanup_stdio+0x38>)
 800e290:	4299      	cmp	r1, r3
 800e292:	d002      	beq.n	800e29a <cleanup_stdio+0x1e>
 800e294:	4620      	mov	r0, r4
 800e296:	f001 ffc9 	bl	801022c <_fflush_r>
 800e29a:	68e1      	ldr	r1, [r4, #12]
 800e29c:	4b06      	ldr	r3, [pc, #24]	@ (800e2b8 <cleanup_stdio+0x3c>)
 800e29e:	4299      	cmp	r1, r3
 800e2a0:	d004      	beq.n	800e2ac <cleanup_stdio+0x30>
 800e2a2:	4620      	mov	r0, r4
 800e2a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2a8:	f001 bfc0 	b.w	801022c <_fflush_r>
 800e2ac:	bd10      	pop	{r4, pc}
 800e2ae:	bf00      	nop
 800e2b0:	20026ad4 	.word	0x20026ad4
 800e2b4:	20026b3c 	.word	0x20026b3c
 800e2b8:	20026ba4 	.word	0x20026ba4

0800e2bc <global_stdio_init.part.0>:
 800e2bc:	b510      	push	{r4, lr}
 800e2be:	4b0b      	ldr	r3, [pc, #44]	@ (800e2ec <global_stdio_init.part.0+0x30>)
 800e2c0:	4c0b      	ldr	r4, [pc, #44]	@ (800e2f0 <global_stdio_init.part.0+0x34>)
 800e2c2:	4a0c      	ldr	r2, [pc, #48]	@ (800e2f4 <global_stdio_init.part.0+0x38>)
 800e2c4:	601a      	str	r2, [r3, #0]
 800e2c6:	4620      	mov	r0, r4
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	2104      	movs	r1, #4
 800e2cc:	f7ff ff94 	bl	800e1f8 <std>
 800e2d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e2d4:	2201      	movs	r2, #1
 800e2d6:	2109      	movs	r1, #9
 800e2d8:	f7ff ff8e 	bl	800e1f8 <std>
 800e2dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e2e0:	2202      	movs	r2, #2
 800e2e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2e6:	2112      	movs	r1, #18
 800e2e8:	f7ff bf86 	b.w	800e1f8 <std>
 800e2ec:	20026c0c 	.word	0x20026c0c
 800e2f0:	20026ad4 	.word	0x20026ad4
 800e2f4:	0800e265 	.word	0x0800e265

0800e2f8 <__sfp_lock_acquire>:
 800e2f8:	4801      	ldr	r0, [pc, #4]	@ (800e300 <__sfp_lock_acquire+0x8>)
 800e2fa:	f000 ba4a 	b.w	800e792 <__retarget_lock_acquire_recursive>
 800e2fe:	bf00      	nop
 800e300:	20026c15 	.word	0x20026c15

0800e304 <__sfp_lock_release>:
 800e304:	4801      	ldr	r0, [pc, #4]	@ (800e30c <__sfp_lock_release+0x8>)
 800e306:	f000 ba45 	b.w	800e794 <__retarget_lock_release_recursive>
 800e30a:	bf00      	nop
 800e30c:	20026c15 	.word	0x20026c15

0800e310 <__sinit>:
 800e310:	b510      	push	{r4, lr}
 800e312:	4604      	mov	r4, r0
 800e314:	f7ff fff0 	bl	800e2f8 <__sfp_lock_acquire>
 800e318:	6a23      	ldr	r3, [r4, #32]
 800e31a:	b11b      	cbz	r3, 800e324 <__sinit+0x14>
 800e31c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e320:	f7ff bff0 	b.w	800e304 <__sfp_lock_release>
 800e324:	4b04      	ldr	r3, [pc, #16]	@ (800e338 <__sinit+0x28>)
 800e326:	6223      	str	r3, [r4, #32]
 800e328:	4b04      	ldr	r3, [pc, #16]	@ (800e33c <__sinit+0x2c>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d1f5      	bne.n	800e31c <__sinit+0xc>
 800e330:	f7ff ffc4 	bl	800e2bc <global_stdio_init.part.0>
 800e334:	e7f2      	b.n	800e31c <__sinit+0xc>
 800e336:	bf00      	nop
 800e338:	0800e27d 	.word	0x0800e27d
 800e33c:	20026c0c 	.word	0x20026c0c

0800e340 <_fwalk_sglue>:
 800e340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e344:	4607      	mov	r7, r0
 800e346:	4688      	mov	r8, r1
 800e348:	4614      	mov	r4, r2
 800e34a:	2600      	movs	r6, #0
 800e34c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e350:	f1b9 0901 	subs.w	r9, r9, #1
 800e354:	d505      	bpl.n	800e362 <_fwalk_sglue+0x22>
 800e356:	6824      	ldr	r4, [r4, #0]
 800e358:	2c00      	cmp	r4, #0
 800e35a:	d1f7      	bne.n	800e34c <_fwalk_sglue+0xc>
 800e35c:	4630      	mov	r0, r6
 800e35e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e362:	89ab      	ldrh	r3, [r5, #12]
 800e364:	2b01      	cmp	r3, #1
 800e366:	d907      	bls.n	800e378 <_fwalk_sglue+0x38>
 800e368:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e36c:	3301      	adds	r3, #1
 800e36e:	d003      	beq.n	800e378 <_fwalk_sglue+0x38>
 800e370:	4629      	mov	r1, r5
 800e372:	4638      	mov	r0, r7
 800e374:	47c0      	blx	r8
 800e376:	4306      	orrs	r6, r0
 800e378:	3568      	adds	r5, #104	@ 0x68
 800e37a:	e7e9      	b.n	800e350 <_fwalk_sglue+0x10>

0800e37c <iprintf>:
 800e37c:	b40f      	push	{r0, r1, r2, r3}
 800e37e:	b507      	push	{r0, r1, r2, lr}
 800e380:	4906      	ldr	r1, [pc, #24]	@ (800e39c <iprintf+0x20>)
 800e382:	ab04      	add	r3, sp, #16
 800e384:	6808      	ldr	r0, [r1, #0]
 800e386:	f853 2b04 	ldr.w	r2, [r3], #4
 800e38a:	6881      	ldr	r1, [r0, #8]
 800e38c:	9301      	str	r3, [sp, #4]
 800e38e:	f001 fdb1 	bl	800fef4 <_vfiprintf_r>
 800e392:	b003      	add	sp, #12
 800e394:	f85d eb04 	ldr.w	lr, [sp], #4
 800e398:	b004      	add	sp, #16
 800e39a:	4770      	bx	lr
 800e39c:	20000028 	.word	0x20000028

0800e3a0 <_puts_r>:
 800e3a0:	6a03      	ldr	r3, [r0, #32]
 800e3a2:	b570      	push	{r4, r5, r6, lr}
 800e3a4:	6884      	ldr	r4, [r0, #8]
 800e3a6:	4605      	mov	r5, r0
 800e3a8:	460e      	mov	r6, r1
 800e3aa:	b90b      	cbnz	r3, 800e3b0 <_puts_r+0x10>
 800e3ac:	f7ff ffb0 	bl	800e310 <__sinit>
 800e3b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e3b2:	07db      	lsls	r3, r3, #31
 800e3b4:	d405      	bmi.n	800e3c2 <_puts_r+0x22>
 800e3b6:	89a3      	ldrh	r3, [r4, #12]
 800e3b8:	0598      	lsls	r0, r3, #22
 800e3ba:	d402      	bmi.n	800e3c2 <_puts_r+0x22>
 800e3bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e3be:	f000 f9e8 	bl	800e792 <__retarget_lock_acquire_recursive>
 800e3c2:	89a3      	ldrh	r3, [r4, #12]
 800e3c4:	0719      	lsls	r1, r3, #28
 800e3c6:	d502      	bpl.n	800e3ce <_puts_r+0x2e>
 800e3c8:	6923      	ldr	r3, [r4, #16]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d135      	bne.n	800e43a <_puts_r+0x9a>
 800e3ce:	4621      	mov	r1, r4
 800e3d0:	4628      	mov	r0, r5
 800e3d2:	f000 f8fb 	bl	800e5cc <__swsetup_r>
 800e3d6:	b380      	cbz	r0, 800e43a <_puts_r+0x9a>
 800e3d8:	f04f 35ff 	mov.w	r5, #4294967295
 800e3dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e3de:	07da      	lsls	r2, r3, #31
 800e3e0:	d405      	bmi.n	800e3ee <_puts_r+0x4e>
 800e3e2:	89a3      	ldrh	r3, [r4, #12]
 800e3e4:	059b      	lsls	r3, r3, #22
 800e3e6:	d402      	bmi.n	800e3ee <_puts_r+0x4e>
 800e3e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e3ea:	f000 f9d3 	bl	800e794 <__retarget_lock_release_recursive>
 800e3ee:	4628      	mov	r0, r5
 800e3f0:	bd70      	pop	{r4, r5, r6, pc}
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	da04      	bge.n	800e400 <_puts_r+0x60>
 800e3f6:	69a2      	ldr	r2, [r4, #24]
 800e3f8:	429a      	cmp	r2, r3
 800e3fa:	dc17      	bgt.n	800e42c <_puts_r+0x8c>
 800e3fc:	290a      	cmp	r1, #10
 800e3fe:	d015      	beq.n	800e42c <_puts_r+0x8c>
 800e400:	6823      	ldr	r3, [r4, #0]
 800e402:	1c5a      	adds	r2, r3, #1
 800e404:	6022      	str	r2, [r4, #0]
 800e406:	7019      	strb	r1, [r3, #0]
 800e408:	68a3      	ldr	r3, [r4, #8]
 800e40a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e40e:	3b01      	subs	r3, #1
 800e410:	60a3      	str	r3, [r4, #8]
 800e412:	2900      	cmp	r1, #0
 800e414:	d1ed      	bne.n	800e3f2 <_puts_r+0x52>
 800e416:	2b00      	cmp	r3, #0
 800e418:	da11      	bge.n	800e43e <_puts_r+0x9e>
 800e41a:	4622      	mov	r2, r4
 800e41c:	210a      	movs	r1, #10
 800e41e:	4628      	mov	r0, r5
 800e420:	f000 f895 	bl	800e54e <__swbuf_r>
 800e424:	3001      	adds	r0, #1
 800e426:	d0d7      	beq.n	800e3d8 <_puts_r+0x38>
 800e428:	250a      	movs	r5, #10
 800e42a:	e7d7      	b.n	800e3dc <_puts_r+0x3c>
 800e42c:	4622      	mov	r2, r4
 800e42e:	4628      	mov	r0, r5
 800e430:	f000 f88d 	bl	800e54e <__swbuf_r>
 800e434:	3001      	adds	r0, #1
 800e436:	d1e7      	bne.n	800e408 <_puts_r+0x68>
 800e438:	e7ce      	b.n	800e3d8 <_puts_r+0x38>
 800e43a:	3e01      	subs	r6, #1
 800e43c:	e7e4      	b.n	800e408 <_puts_r+0x68>
 800e43e:	6823      	ldr	r3, [r4, #0]
 800e440:	1c5a      	adds	r2, r3, #1
 800e442:	6022      	str	r2, [r4, #0]
 800e444:	220a      	movs	r2, #10
 800e446:	701a      	strb	r2, [r3, #0]
 800e448:	e7ee      	b.n	800e428 <_puts_r+0x88>
	...

0800e44c <puts>:
 800e44c:	4b02      	ldr	r3, [pc, #8]	@ (800e458 <puts+0xc>)
 800e44e:	4601      	mov	r1, r0
 800e450:	6818      	ldr	r0, [r3, #0]
 800e452:	f7ff bfa5 	b.w	800e3a0 <_puts_r>
 800e456:	bf00      	nop
 800e458:	20000028 	.word	0x20000028

0800e45c <sniprintf>:
 800e45c:	b40c      	push	{r2, r3}
 800e45e:	b530      	push	{r4, r5, lr}
 800e460:	4b18      	ldr	r3, [pc, #96]	@ (800e4c4 <sniprintf+0x68>)
 800e462:	1e0c      	subs	r4, r1, #0
 800e464:	681d      	ldr	r5, [r3, #0]
 800e466:	b09d      	sub	sp, #116	@ 0x74
 800e468:	da08      	bge.n	800e47c <sniprintf+0x20>
 800e46a:	238b      	movs	r3, #139	@ 0x8b
 800e46c:	602b      	str	r3, [r5, #0]
 800e46e:	f04f 30ff 	mov.w	r0, #4294967295
 800e472:	b01d      	add	sp, #116	@ 0x74
 800e474:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e478:	b002      	add	sp, #8
 800e47a:	4770      	bx	lr
 800e47c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e480:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e484:	f04f 0300 	mov.w	r3, #0
 800e488:	931b      	str	r3, [sp, #108]	@ 0x6c
 800e48a:	bf14      	ite	ne
 800e48c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e490:	4623      	moveq	r3, r4
 800e492:	9304      	str	r3, [sp, #16]
 800e494:	9307      	str	r3, [sp, #28]
 800e496:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e49a:	9002      	str	r0, [sp, #8]
 800e49c:	9006      	str	r0, [sp, #24]
 800e49e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e4a2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e4a4:	ab21      	add	r3, sp, #132	@ 0x84
 800e4a6:	a902      	add	r1, sp, #8
 800e4a8:	4628      	mov	r0, r5
 800e4aa:	9301      	str	r3, [sp, #4]
 800e4ac:	f001 fbfc 	bl	800fca8 <_svfiprintf_r>
 800e4b0:	1c43      	adds	r3, r0, #1
 800e4b2:	bfbc      	itt	lt
 800e4b4:	238b      	movlt	r3, #139	@ 0x8b
 800e4b6:	602b      	strlt	r3, [r5, #0]
 800e4b8:	2c00      	cmp	r4, #0
 800e4ba:	d0da      	beq.n	800e472 <sniprintf+0x16>
 800e4bc:	9b02      	ldr	r3, [sp, #8]
 800e4be:	2200      	movs	r2, #0
 800e4c0:	701a      	strb	r2, [r3, #0]
 800e4c2:	e7d6      	b.n	800e472 <sniprintf+0x16>
 800e4c4:	20000028 	.word	0x20000028

0800e4c8 <__sread>:
 800e4c8:	b510      	push	{r4, lr}
 800e4ca:	460c      	mov	r4, r1
 800e4cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4d0:	f000 f900 	bl	800e6d4 <_read_r>
 800e4d4:	2800      	cmp	r0, #0
 800e4d6:	bfab      	itete	ge
 800e4d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e4da:	89a3      	ldrhlt	r3, [r4, #12]
 800e4dc:	181b      	addge	r3, r3, r0
 800e4de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e4e2:	bfac      	ite	ge
 800e4e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e4e6:	81a3      	strhlt	r3, [r4, #12]
 800e4e8:	bd10      	pop	{r4, pc}

0800e4ea <__swrite>:
 800e4ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4ee:	461f      	mov	r7, r3
 800e4f0:	898b      	ldrh	r3, [r1, #12]
 800e4f2:	05db      	lsls	r3, r3, #23
 800e4f4:	4605      	mov	r5, r0
 800e4f6:	460c      	mov	r4, r1
 800e4f8:	4616      	mov	r6, r2
 800e4fa:	d505      	bpl.n	800e508 <__swrite+0x1e>
 800e4fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e500:	2302      	movs	r3, #2
 800e502:	2200      	movs	r2, #0
 800e504:	f000 f8d4 	bl	800e6b0 <_lseek_r>
 800e508:	89a3      	ldrh	r3, [r4, #12]
 800e50a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e50e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e512:	81a3      	strh	r3, [r4, #12]
 800e514:	4632      	mov	r2, r6
 800e516:	463b      	mov	r3, r7
 800e518:	4628      	mov	r0, r5
 800e51a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e51e:	f000 b8fb 	b.w	800e718 <_write_r>

0800e522 <__sseek>:
 800e522:	b510      	push	{r4, lr}
 800e524:	460c      	mov	r4, r1
 800e526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e52a:	f000 f8c1 	bl	800e6b0 <_lseek_r>
 800e52e:	1c43      	adds	r3, r0, #1
 800e530:	89a3      	ldrh	r3, [r4, #12]
 800e532:	bf15      	itete	ne
 800e534:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e536:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e53a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e53e:	81a3      	strheq	r3, [r4, #12]
 800e540:	bf18      	it	ne
 800e542:	81a3      	strhne	r3, [r4, #12]
 800e544:	bd10      	pop	{r4, pc}

0800e546 <__sclose>:
 800e546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e54a:	f000 b8a1 	b.w	800e690 <_close_r>

0800e54e <__swbuf_r>:
 800e54e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e550:	460e      	mov	r6, r1
 800e552:	4614      	mov	r4, r2
 800e554:	4605      	mov	r5, r0
 800e556:	b118      	cbz	r0, 800e560 <__swbuf_r+0x12>
 800e558:	6a03      	ldr	r3, [r0, #32]
 800e55a:	b90b      	cbnz	r3, 800e560 <__swbuf_r+0x12>
 800e55c:	f7ff fed8 	bl	800e310 <__sinit>
 800e560:	69a3      	ldr	r3, [r4, #24]
 800e562:	60a3      	str	r3, [r4, #8]
 800e564:	89a3      	ldrh	r3, [r4, #12]
 800e566:	071a      	lsls	r2, r3, #28
 800e568:	d501      	bpl.n	800e56e <__swbuf_r+0x20>
 800e56a:	6923      	ldr	r3, [r4, #16]
 800e56c:	b943      	cbnz	r3, 800e580 <__swbuf_r+0x32>
 800e56e:	4621      	mov	r1, r4
 800e570:	4628      	mov	r0, r5
 800e572:	f000 f82b 	bl	800e5cc <__swsetup_r>
 800e576:	b118      	cbz	r0, 800e580 <__swbuf_r+0x32>
 800e578:	f04f 37ff 	mov.w	r7, #4294967295
 800e57c:	4638      	mov	r0, r7
 800e57e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e580:	6823      	ldr	r3, [r4, #0]
 800e582:	6922      	ldr	r2, [r4, #16]
 800e584:	1a98      	subs	r0, r3, r2
 800e586:	6963      	ldr	r3, [r4, #20]
 800e588:	b2f6      	uxtb	r6, r6
 800e58a:	4283      	cmp	r3, r0
 800e58c:	4637      	mov	r7, r6
 800e58e:	dc05      	bgt.n	800e59c <__swbuf_r+0x4e>
 800e590:	4621      	mov	r1, r4
 800e592:	4628      	mov	r0, r5
 800e594:	f001 fe4a 	bl	801022c <_fflush_r>
 800e598:	2800      	cmp	r0, #0
 800e59a:	d1ed      	bne.n	800e578 <__swbuf_r+0x2a>
 800e59c:	68a3      	ldr	r3, [r4, #8]
 800e59e:	3b01      	subs	r3, #1
 800e5a0:	60a3      	str	r3, [r4, #8]
 800e5a2:	6823      	ldr	r3, [r4, #0]
 800e5a4:	1c5a      	adds	r2, r3, #1
 800e5a6:	6022      	str	r2, [r4, #0]
 800e5a8:	701e      	strb	r6, [r3, #0]
 800e5aa:	6962      	ldr	r2, [r4, #20]
 800e5ac:	1c43      	adds	r3, r0, #1
 800e5ae:	429a      	cmp	r2, r3
 800e5b0:	d004      	beq.n	800e5bc <__swbuf_r+0x6e>
 800e5b2:	89a3      	ldrh	r3, [r4, #12]
 800e5b4:	07db      	lsls	r3, r3, #31
 800e5b6:	d5e1      	bpl.n	800e57c <__swbuf_r+0x2e>
 800e5b8:	2e0a      	cmp	r6, #10
 800e5ba:	d1df      	bne.n	800e57c <__swbuf_r+0x2e>
 800e5bc:	4621      	mov	r1, r4
 800e5be:	4628      	mov	r0, r5
 800e5c0:	f001 fe34 	bl	801022c <_fflush_r>
 800e5c4:	2800      	cmp	r0, #0
 800e5c6:	d0d9      	beq.n	800e57c <__swbuf_r+0x2e>
 800e5c8:	e7d6      	b.n	800e578 <__swbuf_r+0x2a>
	...

0800e5cc <__swsetup_r>:
 800e5cc:	b538      	push	{r3, r4, r5, lr}
 800e5ce:	4b29      	ldr	r3, [pc, #164]	@ (800e674 <__swsetup_r+0xa8>)
 800e5d0:	4605      	mov	r5, r0
 800e5d2:	6818      	ldr	r0, [r3, #0]
 800e5d4:	460c      	mov	r4, r1
 800e5d6:	b118      	cbz	r0, 800e5e0 <__swsetup_r+0x14>
 800e5d8:	6a03      	ldr	r3, [r0, #32]
 800e5da:	b90b      	cbnz	r3, 800e5e0 <__swsetup_r+0x14>
 800e5dc:	f7ff fe98 	bl	800e310 <__sinit>
 800e5e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5e4:	0719      	lsls	r1, r3, #28
 800e5e6:	d422      	bmi.n	800e62e <__swsetup_r+0x62>
 800e5e8:	06da      	lsls	r2, r3, #27
 800e5ea:	d407      	bmi.n	800e5fc <__swsetup_r+0x30>
 800e5ec:	2209      	movs	r2, #9
 800e5ee:	602a      	str	r2, [r5, #0]
 800e5f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5f4:	81a3      	strh	r3, [r4, #12]
 800e5f6:	f04f 30ff 	mov.w	r0, #4294967295
 800e5fa:	e033      	b.n	800e664 <__swsetup_r+0x98>
 800e5fc:	0758      	lsls	r0, r3, #29
 800e5fe:	d512      	bpl.n	800e626 <__swsetup_r+0x5a>
 800e600:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e602:	b141      	cbz	r1, 800e616 <__swsetup_r+0x4a>
 800e604:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e608:	4299      	cmp	r1, r3
 800e60a:	d002      	beq.n	800e612 <__swsetup_r+0x46>
 800e60c:	4628      	mov	r0, r5
 800e60e:	f000 ff2b 	bl	800f468 <_free_r>
 800e612:	2300      	movs	r3, #0
 800e614:	6363      	str	r3, [r4, #52]	@ 0x34
 800e616:	89a3      	ldrh	r3, [r4, #12]
 800e618:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e61c:	81a3      	strh	r3, [r4, #12]
 800e61e:	2300      	movs	r3, #0
 800e620:	6063      	str	r3, [r4, #4]
 800e622:	6923      	ldr	r3, [r4, #16]
 800e624:	6023      	str	r3, [r4, #0]
 800e626:	89a3      	ldrh	r3, [r4, #12]
 800e628:	f043 0308 	orr.w	r3, r3, #8
 800e62c:	81a3      	strh	r3, [r4, #12]
 800e62e:	6923      	ldr	r3, [r4, #16]
 800e630:	b94b      	cbnz	r3, 800e646 <__swsetup_r+0x7a>
 800e632:	89a3      	ldrh	r3, [r4, #12]
 800e634:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e638:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e63c:	d003      	beq.n	800e646 <__swsetup_r+0x7a>
 800e63e:	4621      	mov	r1, r4
 800e640:	4628      	mov	r0, r5
 800e642:	f001 fe41 	bl	80102c8 <__smakebuf_r>
 800e646:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e64a:	f013 0201 	ands.w	r2, r3, #1
 800e64e:	d00a      	beq.n	800e666 <__swsetup_r+0x9a>
 800e650:	2200      	movs	r2, #0
 800e652:	60a2      	str	r2, [r4, #8]
 800e654:	6962      	ldr	r2, [r4, #20]
 800e656:	4252      	negs	r2, r2
 800e658:	61a2      	str	r2, [r4, #24]
 800e65a:	6922      	ldr	r2, [r4, #16]
 800e65c:	b942      	cbnz	r2, 800e670 <__swsetup_r+0xa4>
 800e65e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e662:	d1c5      	bne.n	800e5f0 <__swsetup_r+0x24>
 800e664:	bd38      	pop	{r3, r4, r5, pc}
 800e666:	0799      	lsls	r1, r3, #30
 800e668:	bf58      	it	pl
 800e66a:	6962      	ldrpl	r2, [r4, #20]
 800e66c:	60a2      	str	r2, [r4, #8]
 800e66e:	e7f4      	b.n	800e65a <__swsetup_r+0x8e>
 800e670:	2000      	movs	r0, #0
 800e672:	e7f7      	b.n	800e664 <__swsetup_r+0x98>
 800e674:	20000028 	.word	0x20000028

0800e678 <memset>:
 800e678:	4402      	add	r2, r0
 800e67a:	4603      	mov	r3, r0
 800e67c:	4293      	cmp	r3, r2
 800e67e:	d100      	bne.n	800e682 <memset+0xa>
 800e680:	4770      	bx	lr
 800e682:	f803 1b01 	strb.w	r1, [r3], #1
 800e686:	e7f9      	b.n	800e67c <memset+0x4>

0800e688 <_localeconv_r>:
 800e688:	4800      	ldr	r0, [pc, #0]	@ (800e68c <_localeconv_r+0x4>)
 800e68a:	4770      	bx	lr
 800e68c:	20000168 	.word	0x20000168

0800e690 <_close_r>:
 800e690:	b538      	push	{r3, r4, r5, lr}
 800e692:	4d06      	ldr	r5, [pc, #24]	@ (800e6ac <_close_r+0x1c>)
 800e694:	2300      	movs	r3, #0
 800e696:	4604      	mov	r4, r0
 800e698:	4608      	mov	r0, r1
 800e69a:	602b      	str	r3, [r5, #0]
 800e69c:	f7f6 fbb2 	bl	8004e04 <_close>
 800e6a0:	1c43      	adds	r3, r0, #1
 800e6a2:	d102      	bne.n	800e6aa <_close_r+0x1a>
 800e6a4:	682b      	ldr	r3, [r5, #0]
 800e6a6:	b103      	cbz	r3, 800e6aa <_close_r+0x1a>
 800e6a8:	6023      	str	r3, [r4, #0]
 800e6aa:	bd38      	pop	{r3, r4, r5, pc}
 800e6ac:	20026c10 	.word	0x20026c10

0800e6b0 <_lseek_r>:
 800e6b0:	b538      	push	{r3, r4, r5, lr}
 800e6b2:	4d07      	ldr	r5, [pc, #28]	@ (800e6d0 <_lseek_r+0x20>)
 800e6b4:	4604      	mov	r4, r0
 800e6b6:	4608      	mov	r0, r1
 800e6b8:	4611      	mov	r1, r2
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	602a      	str	r2, [r5, #0]
 800e6be:	461a      	mov	r2, r3
 800e6c0:	f7f6 fbc7 	bl	8004e52 <_lseek>
 800e6c4:	1c43      	adds	r3, r0, #1
 800e6c6:	d102      	bne.n	800e6ce <_lseek_r+0x1e>
 800e6c8:	682b      	ldr	r3, [r5, #0]
 800e6ca:	b103      	cbz	r3, 800e6ce <_lseek_r+0x1e>
 800e6cc:	6023      	str	r3, [r4, #0]
 800e6ce:	bd38      	pop	{r3, r4, r5, pc}
 800e6d0:	20026c10 	.word	0x20026c10

0800e6d4 <_read_r>:
 800e6d4:	b538      	push	{r3, r4, r5, lr}
 800e6d6:	4d07      	ldr	r5, [pc, #28]	@ (800e6f4 <_read_r+0x20>)
 800e6d8:	4604      	mov	r4, r0
 800e6da:	4608      	mov	r0, r1
 800e6dc:	4611      	mov	r1, r2
 800e6de:	2200      	movs	r2, #0
 800e6e0:	602a      	str	r2, [r5, #0]
 800e6e2:	461a      	mov	r2, r3
 800e6e4:	f7f6 fb71 	bl	8004dca <_read>
 800e6e8:	1c43      	adds	r3, r0, #1
 800e6ea:	d102      	bne.n	800e6f2 <_read_r+0x1e>
 800e6ec:	682b      	ldr	r3, [r5, #0]
 800e6ee:	b103      	cbz	r3, 800e6f2 <_read_r+0x1e>
 800e6f0:	6023      	str	r3, [r4, #0]
 800e6f2:	bd38      	pop	{r3, r4, r5, pc}
 800e6f4:	20026c10 	.word	0x20026c10

0800e6f8 <_sbrk_r>:
 800e6f8:	b538      	push	{r3, r4, r5, lr}
 800e6fa:	4d06      	ldr	r5, [pc, #24]	@ (800e714 <_sbrk_r+0x1c>)
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	4604      	mov	r4, r0
 800e700:	4608      	mov	r0, r1
 800e702:	602b      	str	r3, [r5, #0]
 800e704:	f7f6 fbb2 	bl	8004e6c <_sbrk>
 800e708:	1c43      	adds	r3, r0, #1
 800e70a:	d102      	bne.n	800e712 <_sbrk_r+0x1a>
 800e70c:	682b      	ldr	r3, [r5, #0]
 800e70e:	b103      	cbz	r3, 800e712 <_sbrk_r+0x1a>
 800e710:	6023      	str	r3, [r4, #0]
 800e712:	bd38      	pop	{r3, r4, r5, pc}
 800e714:	20026c10 	.word	0x20026c10

0800e718 <_write_r>:
 800e718:	b538      	push	{r3, r4, r5, lr}
 800e71a:	4d07      	ldr	r5, [pc, #28]	@ (800e738 <_write_r+0x20>)
 800e71c:	4604      	mov	r4, r0
 800e71e:	4608      	mov	r0, r1
 800e720:	4611      	mov	r1, r2
 800e722:	2200      	movs	r2, #0
 800e724:	602a      	str	r2, [r5, #0]
 800e726:	461a      	mov	r2, r3
 800e728:	f7f3 fae4 	bl	8001cf4 <_write>
 800e72c:	1c43      	adds	r3, r0, #1
 800e72e:	d102      	bne.n	800e736 <_write_r+0x1e>
 800e730:	682b      	ldr	r3, [r5, #0]
 800e732:	b103      	cbz	r3, 800e736 <_write_r+0x1e>
 800e734:	6023      	str	r3, [r4, #0]
 800e736:	bd38      	pop	{r3, r4, r5, pc}
 800e738:	20026c10 	.word	0x20026c10

0800e73c <__errno>:
 800e73c:	4b01      	ldr	r3, [pc, #4]	@ (800e744 <__errno+0x8>)
 800e73e:	6818      	ldr	r0, [r3, #0]
 800e740:	4770      	bx	lr
 800e742:	bf00      	nop
 800e744:	20000028 	.word	0x20000028

0800e748 <__libc_init_array>:
 800e748:	b570      	push	{r4, r5, r6, lr}
 800e74a:	4d0d      	ldr	r5, [pc, #52]	@ (800e780 <__libc_init_array+0x38>)
 800e74c:	4c0d      	ldr	r4, [pc, #52]	@ (800e784 <__libc_init_array+0x3c>)
 800e74e:	1b64      	subs	r4, r4, r5
 800e750:	10a4      	asrs	r4, r4, #2
 800e752:	2600      	movs	r6, #0
 800e754:	42a6      	cmp	r6, r4
 800e756:	d109      	bne.n	800e76c <__libc_init_array+0x24>
 800e758:	4d0b      	ldr	r5, [pc, #44]	@ (800e788 <__libc_init_array+0x40>)
 800e75a:	4c0c      	ldr	r4, [pc, #48]	@ (800e78c <__libc_init_array+0x44>)
 800e75c:	f001 ff12 	bl	8010584 <_init>
 800e760:	1b64      	subs	r4, r4, r5
 800e762:	10a4      	asrs	r4, r4, #2
 800e764:	2600      	movs	r6, #0
 800e766:	42a6      	cmp	r6, r4
 800e768:	d105      	bne.n	800e776 <__libc_init_array+0x2e>
 800e76a:	bd70      	pop	{r4, r5, r6, pc}
 800e76c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e770:	4798      	blx	r3
 800e772:	3601      	adds	r6, #1
 800e774:	e7ee      	b.n	800e754 <__libc_init_array+0xc>
 800e776:	f855 3b04 	ldr.w	r3, [r5], #4
 800e77a:	4798      	blx	r3
 800e77c:	3601      	adds	r6, #1
 800e77e:	e7f2      	b.n	800e766 <__libc_init_array+0x1e>
 800e780:	08010ff4 	.word	0x08010ff4
 800e784:	08010ff4 	.word	0x08010ff4
 800e788:	08010ff4 	.word	0x08010ff4
 800e78c:	08010ff8 	.word	0x08010ff8

0800e790 <__retarget_lock_init_recursive>:
 800e790:	4770      	bx	lr

0800e792 <__retarget_lock_acquire_recursive>:
 800e792:	4770      	bx	lr

0800e794 <__retarget_lock_release_recursive>:
 800e794:	4770      	bx	lr

0800e796 <memcpy>:
 800e796:	440a      	add	r2, r1
 800e798:	4291      	cmp	r1, r2
 800e79a:	f100 33ff 	add.w	r3, r0, #4294967295
 800e79e:	d100      	bne.n	800e7a2 <memcpy+0xc>
 800e7a0:	4770      	bx	lr
 800e7a2:	b510      	push	{r4, lr}
 800e7a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e7a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e7ac:	4291      	cmp	r1, r2
 800e7ae:	d1f9      	bne.n	800e7a4 <memcpy+0xe>
 800e7b0:	bd10      	pop	{r4, pc}

0800e7b2 <quorem>:
 800e7b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7b6:	6903      	ldr	r3, [r0, #16]
 800e7b8:	690c      	ldr	r4, [r1, #16]
 800e7ba:	42a3      	cmp	r3, r4
 800e7bc:	4607      	mov	r7, r0
 800e7be:	db7e      	blt.n	800e8be <quorem+0x10c>
 800e7c0:	3c01      	subs	r4, #1
 800e7c2:	f101 0814 	add.w	r8, r1, #20
 800e7c6:	00a3      	lsls	r3, r4, #2
 800e7c8:	f100 0514 	add.w	r5, r0, #20
 800e7cc:	9300      	str	r3, [sp, #0]
 800e7ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e7d2:	9301      	str	r3, [sp, #4]
 800e7d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e7d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e7dc:	3301      	adds	r3, #1
 800e7de:	429a      	cmp	r2, r3
 800e7e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e7e4:	fbb2 f6f3 	udiv	r6, r2, r3
 800e7e8:	d32e      	bcc.n	800e848 <quorem+0x96>
 800e7ea:	f04f 0a00 	mov.w	sl, #0
 800e7ee:	46c4      	mov	ip, r8
 800e7f0:	46ae      	mov	lr, r5
 800e7f2:	46d3      	mov	fp, sl
 800e7f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e7f8:	b298      	uxth	r0, r3
 800e7fa:	fb06 a000 	mla	r0, r6, r0, sl
 800e7fe:	0c02      	lsrs	r2, r0, #16
 800e800:	0c1b      	lsrs	r3, r3, #16
 800e802:	fb06 2303 	mla	r3, r6, r3, r2
 800e806:	f8de 2000 	ldr.w	r2, [lr]
 800e80a:	b280      	uxth	r0, r0
 800e80c:	b292      	uxth	r2, r2
 800e80e:	1a12      	subs	r2, r2, r0
 800e810:	445a      	add	r2, fp
 800e812:	f8de 0000 	ldr.w	r0, [lr]
 800e816:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e81a:	b29b      	uxth	r3, r3
 800e81c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e820:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e824:	b292      	uxth	r2, r2
 800e826:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e82a:	45e1      	cmp	r9, ip
 800e82c:	f84e 2b04 	str.w	r2, [lr], #4
 800e830:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e834:	d2de      	bcs.n	800e7f4 <quorem+0x42>
 800e836:	9b00      	ldr	r3, [sp, #0]
 800e838:	58eb      	ldr	r3, [r5, r3]
 800e83a:	b92b      	cbnz	r3, 800e848 <quorem+0x96>
 800e83c:	9b01      	ldr	r3, [sp, #4]
 800e83e:	3b04      	subs	r3, #4
 800e840:	429d      	cmp	r5, r3
 800e842:	461a      	mov	r2, r3
 800e844:	d32f      	bcc.n	800e8a6 <quorem+0xf4>
 800e846:	613c      	str	r4, [r7, #16]
 800e848:	4638      	mov	r0, r7
 800e84a:	f001 f8c9 	bl	800f9e0 <__mcmp>
 800e84e:	2800      	cmp	r0, #0
 800e850:	db25      	blt.n	800e89e <quorem+0xec>
 800e852:	4629      	mov	r1, r5
 800e854:	2000      	movs	r0, #0
 800e856:	f858 2b04 	ldr.w	r2, [r8], #4
 800e85a:	f8d1 c000 	ldr.w	ip, [r1]
 800e85e:	fa1f fe82 	uxth.w	lr, r2
 800e862:	fa1f f38c 	uxth.w	r3, ip
 800e866:	eba3 030e 	sub.w	r3, r3, lr
 800e86a:	4403      	add	r3, r0
 800e86c:	0c12      	lsrs	r2, r2, #16
 800e86e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e872:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e876:	b29b      	uxth	r3, r3
 800e878:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e87c:	45c1      	cmp	r9, r8
 800e87e:	f841 3b04 	str.w	r3, [r1], #4
 800e882:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e886:	d2e6      	bcs.n	800e856 <quorem+0xa4>
 800e888:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e88c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e890:	b922      	cbnz	r2, 800e89c <quorem+0xea>
 800e892:	3b04      	subs	r3, #4
 800e894:	429d      	cmp	r5, r3
 800e896:	461a      	mov	r2, r3
 800e898:	d30b      	bcc.n	800e8b2 <quorem+0x100>
 800e89a:	613c      	str	r4, [r7, #16]
 800e89c:	3601      	adds	r6, #1
 800e89e:	4630      	mov	r0, r6
 800e8a0:	b003      	add	sp, #12
 800e8a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8a6:	6812      	ldr	r2, [r2, #0]
 800e8a8:	3b04      	subs	r3, #4
 800e8aa:	2a00      	cmp	r2, #0
 800e8ac:	d1cb      	bne.n	800e846 <quorem+0x94>
 800e8ae:	3c01      	subs	r4, #1
 800e8b0:	e7c6      	b.n	800e840 <quorem+0x8e>
 800e8b2:	6812      	ldr	r2, [r2, #0]
 800e8b4:	3b04      	subs	r3, #4
 800e8b6:	2a00      	cmp	r2, #0
 800e8b8:	d1ef      	bne.n	800e89a <quorem+0xe8>
 800e8ba:	3c01      	subs	r4, #1
 800e8bc:	e7ea      	b.n	800e894 <quorem+0xe2>
 800e8be:	2000      	movs	r0, #0
 800e8c0:	e7ee      	b.n	800e8a0 <quorem+0xee>
 800e8c2:	0000      	movs	r0, r0
 800e8c4:	0000      	movs	r0, r0
	...

0800e8c8 <_dtoa_r>:
 800e8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8cc:	69c7      	ldr	r7, [r0, #28]
 800e8ce:	b097      	sub	sp, #92	@ 0x5c
 800e8d0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e8d4:	ec55 4b10 	vmov	r4, r5, d0
 800e8d8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e8da:	9107      	str	r1, [sp, #28]
 800e8dc:	4681      	mov	r9, r0
 800e8de:	920c      	str	r2, [sp, #48]	@ 0x30
 800e8e0:	9311      	str	r3, [sp, #68]	@ 0x44
 800e8e2:	b97f      	cbnz	r7, 800e904 <_dtoa_r+0x3c>
 800e8e4:	2010      	movs	r0, #16
 800e8e6:	f7fe ff7b 	bl	800d7e0 <malloc>
 800e8ea:	4602      	mov	r2, r0
 800e8ec:	f8c9 001c 	str.w	r0, [r9, #28]
 800e8f0:	b920      	cbnz	r0, 800e8fc <_dtoa_r+0x34>
 800e8f2:	4ba9      	ldr	r3, [pc, #676]	@ (800eb98 <_dtoa_r+0x2d0>)
 800e8f4:	21ef      	movs	r1, #239	@ 0xef
 800e8f6:	48a9      	ldr	r0, [pc, #676]	@ (800eb9c <_dtoa_r+0x2d4>)
 800e8f8:	f001 fd5e 	bl	80103b8 <__assert_func>
 800e8fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e900:	6007      	str	r7, [r0, #0]
 800e902:	60c7      	str	r7, [r0, #12]
 800e904:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e908:	6819      	ldr	r1, [r3, #0]
 800e90a:	b159      	cbz	r1, 800e924 <_dtoa_r+0x5c>
 800e90c:	685a      	ldr	r2, [r3, #4]
 800e90e:	604a      	str	r2, [r1, #4]
 800e910:	2301      	movs	r3, #1
 800e912:	4093      	lsls	r3, r2
 800e914:	608b      	str	r3, [r1, #8]
 800e916:	4648      	mov	r0, r9
 800e918:	f000 fe30 	bl	800f57c <_Bfree>
 800e91c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e920:	2200      	movs	r2, #0
 800e922:	601a      	str	r2, [r3, #0]
 800e924:	1e2b      	subs	r3, r5, #0
 800e926:	bfb9      	ittee	lt
 800e928:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e92c:	9305      	strlt	r3, [sp, #20]
 800e92e:	2300      	movge	r3, #0
 800e930:	6033      	strge	r3, [r6, #0]
 800e932:	9f05      	ldr	r7, [sp, #20]
 800e934:	4b9a      	ldr	r3, [pc, #616]	@ (800eba0 <_dtoa_r+0x2d8>)
 800e936:	bfbc      	itt	lt
 800e938:	2201      	movlt	r2, #1
 800e93a:	6032      	strlt	r2, [r6, #0]
 800e93c:	43bb      	bics	r3, r7
 800e93e:	d112      	bne.n	800e966 <_dtoa_r+0x9e>
 800e940:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e942:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e946:	6013      	str	r3, [r2, #0]
 800e948:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e94c:	4323      	orrs	r3, r4
 800e94e:	f000 855a 	beq.w	800f406 <_dtoa_r+0xb3e>
 800e952:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e954:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800ebb4 <_dtoa_r+0x2ec>
 800e958:	2b00      	cmp	r3, #0
 800e95a:	f000 855c 	beq.w	800f416 <_dtoa_r+0xb4e>
 800e95e:	f10a 0303 	add.w	r3, sl, #3
 800e962:	f000 bd56 	b.w	800f412 <_dtoa_r+0xb4a>
 800e966:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e96a:	2200      	movs	r2, #0
 800e96c:	ec51 0b17 	vmov	r0, r1, d7
 800e970:	2300      	movs	r3, #0
 800e972:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800e976:	f7f2 f8b7 	bl	8000ae8 <__aeabi_dcmpeq>
 800e97a:	4680      	mov	r8, r0
 800e97c:	b158      	cbz	r0, 800e996 <_dtoa_r+0xce>
 800e97e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e980:	2301      	movs	r3, #1
 800e982:	6013      	str	r3, [r2, #0]
 800e984:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e986:	b113      	cbz	r3, 800e98e <_dtoa_r+0xc6>
 800e988:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e98a:	4b86      	ldr	r3, [pc, #536]	@ (800eba4 <_dtoa_r+0x2dc>)
 800e98c:	6013      	str	r3, [r2, #0]
 800e98e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800ebb8 <_dtoa_r+0x2f0>
 800e992:	f000 bd40 	b.w	800f416 <_dtoa_r+0xb4e>
 800e996:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800e99a:	aa14      	add	r2, sp, #80	@ 0x50
 800e99c:	a915      	add	r1, sp, #84	@ 0x54
 800e99e:	4648      	mov	r0, r9
 800e9a0:	f001 f8ce 	bl	800fb40 <__d2b>
 800e9a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e9a8:	9002      	str	r0, [sp, #8]
 800e9aa:	2e00      	cmp	r6, #0
 800e9ac:	d078      	beq.n	800eaa0 <_dtoa_r+0x1d8>
 800e9ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e9b0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800e9b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e9b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e9bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e9c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e9c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e9c8:	4619      	mov	r1, r3
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	4b76      	ldr	r3, [pc, #472]	@ (800eba8 <_dtoa_r+0x2e0>)
 800e9ce:	f7f1 fc6b 	bl	80002a8 <__aeabi_dsub>
 800e9d2:	a36b      	add	r3, pc, #428	@ (adr r3, 800eb80 <_dtoa_r+0x2b8>)
 800e9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d8:	f7f1 fe1e 	bl	8000618 <__aeabi_dmul>
 800e9dc:	a36a      	add	r3, pc, #424	@ (adr r3, 800eb88 <_dtoa_r+0x2c0>)
 800e9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e2:	f7f1 fc63 	bl	80002ac <__adddf3>
 800e9e6:	4604      	mov	r4, r0
 800e9e8:	4630      	mov	r0, r6
 800e9ea:	460d      	mov	r5, r1
 800e9ec:	f7f1 fdaa 	bl	8000544 <__aeabi_i2d>
 800e9f0:	a367      	add	r3, pc, #412	@ (adr r3, 800eb90 <_dtoa_r+0x2c8>)
 800e9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9f6:	f7f1 fe0f 	bl	8000618 <__aeabi_dmul>
 800e9fa:	4602      	mov	r2, r0
 800e9fc:	460b      	mov	r3, r1
 800e9fe:	4620      	mov	r0, r4
 800ea00:	4629      	mov	r1, r5
 800ea02:	f7f1 fc53 	bl	80002ac <__adddf3>
 800ea06:	4604      	mov	r4, r0
 800ea08:	460d      	mov	r5, r1
 800ea0a:	f7f2 f8b5 	bl	8000b78 <__aeabi_d2iz>
 800ea0e:	2200      	movs	r2, #0
 800ea10:	4607      	mov	r7, r0
 800ea12:	2300      	movs	r3, #0
 800ea14:	4620      	mov	r0, r4
 800ea16:	4629      	mov	r1, r5
 800ea18:	f7f2 f870 	bl	8000afc <__aeabi_dcmplt>
 800ea1c:	b140      	cbz	r0, 800ea30 <_dtoa_r+0x168>
 800ea1e:	4638      	mov	r0, r7
 800ea20:	f7f1 fd90 	bl	8000544 <__aeabi_i2d>
 800ea24:	4622      	mov	r2, r4
 800ea26:	462b      	mov	r3, r5
 800ea28:	f7f2 f85e 	bl	8000ae8 <__aeabi_dcmpeq>
 800ea2c:	b900      	cbnz	r0, 800ea30 <_dtoa_r+0x168>
 800ea2e:	3f01      	subs	r7, #1
 800ea30:	2f16      	cmp	r7, #22
 800ea32:	d852      	bhi.n	800eada <_dtoa_r+0x212>
 800ea34:	4b5d      	ldr	r3, [pc, #372]	@ (800ebac <_dtoa_r+0x2e4>)
 800ea36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ea3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ea42:	f7f2 f85b 	bl	8000afc <__aeabi_dcmplt>
 800ea46:	2800      	cmp	r0, #0
 800ea48:	d049      	beq.n	800eade <_dtoa_r+0x216>
 800ea4a:	3f01      	subs	r7, #1
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ea50:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ea52:	1b9b      	subs	r3, r3, r6
 800ea54:	1e5a      	subs	r2, r3, #1
 800ea56:	bf45      	ittet	mi
 800ea58:	f1c3 0301 	rsbmi	r3, r3, #1
 800ea5c:	9300      	strmi	r3, [sp, #0]
 800ea5e:	2300      	movpl	r3, #0
 800ea60:	2300      	movmi	r3, #0
 800ea62:	9206      	str	r2, [sp, #24]
 800ea64:	bf54      	ite	pl
 800ea66:	9300      	strpl	r3, [sp, #0]
 800ea68:	9306      	strmi	r3, [sp, #24]
 800ea6a:	2f00      	cmp	r7, #0
 800ea6c:	db39      	blt.n	800eae2 <_dtoa_r+0x21a>
 800ea6e:	9b06      	ldr	r3, [sp, #24]
 800ea70:	970d      	str	r7, [sp, #52]	@ 0x34
 800ea72:	443b      	add	r3, r7
 800ea74:	9306      	str	r3, [sp, #24]
 800ea76:	2300      	movs	r3, #0
 800ea78:	9308      	str	r3, [sp, #32]
 800ea7a:	9b07      	ldr	r3, [sp, #28]
 800ea7c:	2b09      	cmp	r3, #9
 800ea7e:	d863      	bhi.n	800eb48 <_dtoa_r+0x280>
 800ea80:	2b05      	cmp	r3, #5
 800ea82:	bfc4      	itt	gt
 800ea84:	3b04      	subgt	r3, #4
 800ea86:	9307      	strgt	r3, [sp, #28]
 800ea88:	9b07      	ldr	r3, [sp, #28]
 800ea8a:	f1a3 0302 	sub.w	r3, r3, #2
 800ea8e:	bfcc      	ite	gt
 800ea90:	2400      	movgt	r4, #0
 800ea92:	2401      	movle	r4, #1
 800ea94:	2b03      	cmp	r3, #3
 800ea96:	d863      	bhi.n	800eb60 <_dtoa_r+0x298>
 800ea98:	e8df f003 	tbb	[pc, r3]
 800ea9c:	2b375452 	.word	0x2b375452
 800eaa0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800eaa4:	441e      	add	r6, r3
 800eaa6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800eaaa:	2b20      	cmp	r3, #32
 800eaac:	bfc1      	itttt	gt
 800eaae:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800eab2:	409f      	lslgt	r7, r3
 800eab4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800eab8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800eabc:	bfd6      	itet	le
 800eabe:	f1c3 0320 	rsble	r3, r3, #32
 800eac2:	ea47 0003 	orrgt.w	r0, r7, r3
 800eac6:	fa04 f003 	lslle.w	r0, r4, r3
 800eaca:	f7f1 fd2b 	bl	8000524 <__aeabi_ui2d>
 800eace:	2201      	movs	r2, #1
 800ead0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ead4:	3e01      	subs	r6, #1
 800ead6:	9212      	str	r2, [sp, #72]	@ 0x48
 800ead8:	e776      	b.n	800e9c8 <_dtoa_r+0x100>
 800eada:	2301      	movs	r3, #1
 800eadc:	e7b7      	b.n	800ea4e <_dtoa_r+0x186>
 800eade:	9010      	str	r0, [sp, #64]	@ 0x40
 800eae0:	e7b6      	b.n	800ea50 <_dtoa_r+0x188>
 800eae2:	9b00      	ldr	r3, [sp, #0]
 800eae4:	1bdb      	subs	r3, r3, r7
 800eae6:	9300      	str	r3, [sp, #0]
 800eae8:	427b      	negs	r3, r7
 800eaea:	9308      	str	r3, [sp, #32]
 800eaec:	2300      	movs	r3, #0
 800eaee:	930d      	str	r3, [sp, #52]	@ 0x34
 800eaf0:	e7c3      	b.n	800ea7a <_dtoa_r+0x1b2>
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800eaf6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eaf8:	eb07 0b03 	add.w	fp, r7, r3
 800eafc:	f10b 0301 	add.w	r3, fp, #1
 800eb00:	2b01      	cmp	r3, #1
 800eb02:	9303      	str	r3, [sp, #12]
 800eb04:	bfb8      	it	lt
 800eb06:	2301      	movlt	r3, #1
 800eb08:	e006      	b.n	800eb18 <_dtoa_r+0x250>
 800eb0a:	2301      	movs	r3, #1
 800eb0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	dd28      	ble.n	800eb66 <_dtoa_r+0x29e>
 800eb14:	469b      	mov	fp, r3
 800eb16:	9303      	str	r3, [sp, #12]
 800eb18:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800eb1c:	2100      	movs	r1, #0
 800eb1e:	2204      	movs	r2, #4
 800eb20:	f102 0514 	add.w	r5, r2, #20
 800eb24:	429d      	cmp	r5, r3
 800eb26:	d926      	bls.n	800eb76 <_dtoa_r+0x2ae>
 800eb28:	6041      	str	r1, [r0, #4]
 800eb2a:	4648      	mov	r0, r9
 800eb2c:	f000 fce6 	bl	800f4fc <_Balloc>
 800eb30:	4682      	mov	sl, r0
 800eb32:	2800      	cmp	r0, #0
 800eb34:	d142      	bne.n	800ebbc <_dtoa_r+0x2f4>
 800eb36:	4b1e      	ldr	r3, [pc, #120]	@ (800ebb0 <_dtoa_r+0x2e8>)
 800eb38:	4602      	mov	r2, r0
 800eb3a:	f240 11af 	movw	r1, #431	@ 0x1af
 800eb3e:	e6da      	b.n	800e8f6 <_dtoa_r+0x2e>
 800eb40:	2300      	movs	r3, #0
 800eb42:	e7e3      	b.n	800eb0c <_dtoa_r+0x244>
 800eb44:	2300      	movs	r3, #0
 800eb46:	e7d5      	b.n	800eaf4 <_dtoa_r+0x22c>
 800eb48:	2401      	movs	r4, #1
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	9307      	str	r3, [sp, #28]
 800eb4e:	9409      	str	r4, [sp, #36]	@ 0x24
 800eb50:	f04f 3bff 	mov.w	fp, #4294967295
 800eb54:	2200      	movs	r2, #0
 800eb56:	f8cd b00c 	str.w	fp, [sp, #12]
 800eb5a:	2312      	movs	r3, #18
 800eb5c:	920c      	str	r2, [sp, #48]	@ 0x30
 800eb5e:	e7db      	b.n	800eb18 <_dtoa_r+0x250>
 800eb60:	2301      	movs	r3, #1
 800eb62:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb64:	e7f4      	b.n	800eb50 <_dtoa_r+0x288>
 800eb66:	f04f 0b01 	mov.w	fp, #1
 800eb6a:	f8cd b00c 	str.w	fp, [sp, #12]
 800eb6e:	465b      	mov	r3, fp
 800eb70:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800eb74:	e7d0      	b.n	800eb18 <_dtoa_r+0x250>
 800eb76:	3101      	adds	r1, #1
 800eb78:	0052      	lsls	r2, r2, #1
 800eb7a:	e7d1      	b.n	800eb20 <_dtoa_r+0x258>
 800eb7c:	f3af 8000 	nop.w
 800eb80:	636f4361 	.word	0x636f4361
 800eb84:	3fd287a7 	.word	0x3fd287a7
 800eb88:	8b60c8b3 	.word	0x8b60c8b3
 800eb8c:	3fc68a28 	.word	0x3fc68a28
 800eb90:	509f79fb 	.word	0x509f79fb
 800eb94:	3fd34413 	.word	0x3fd34413
 800eb98:	08010cb5 	.word	0x08010cb5
 800eb9c:	08010ccc 	.word	0x08010ccc
 800eba0:	7ff00000 	.word	0x7ff00000
 800eba4:	08010c85 	.word	0x08010c85
 800eba8:	3ff80000 	.word	0x3ff80000
 800ebac:	08010e20 	.word	0x08010e20
 800ebb0:	08010d24 	.word	0x08010d24
 800ebb4:	08010cb1 	.word	0x08010cb1
 800ebb8:	08010c84 	.word	0x08010c84
 800ebbc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ebc0:	6018      	str	r0, [r3, #0]
 800ebc2:	9b03      	ldr	r3, [sp, #12]
 800ebc4:	2b0e      	cmp	r3, #14
 800ebc6:	f200 80a1 	bhi.w	800ed0c <_dtoa_r+0x444>
 800ebca:	2c00      	cmp	r4, #0
 800ebcc:	f000 809e 	beq.w	800ed0c <_dtoa_r+0x444>
 800ebd0:	2f00      	cmp	r7, #0
 800ebd2:	dd33      	ble.n	800ec3c <_dtoa_r+0x374>
 800ebd4:	4b9c      	ldr	r3, [pc, #624]	@ (800ee48 <_dtoa_r+0x580>)
 800ebd6:	f007 020f 	and.w	r2, r7, #15
 800ebda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ebde:	ed93 7b00 	vldr	d7, [r3]
 800ebe2:	05f8      	lsls	r0, r7, #23
 800ebe4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800ebe8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ebec:	d516      	bpl.n	800ec1c <_dtoa_r+0x354>
 800ebee:	4b97      	ldr	r3, [pc, #604]	@ (800ee4c <_dtoa_r+0x584>)
 800ebf0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ebf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ebf8:	f7f1 fe38 	bl	800086c <__aeabi_ddiv>
 800ebfc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ec00:	f004 040f 	and.w	r4, r4, #15
 800ec04:	2603      	movs	r6, #3
 800ec06:	4d91      	ldr	r5, [pc, #580]	@ (800ee4c <_dtoa_r+0x584>)
 800ec08:	b954      	cbnz	r4, 800ec20 <_dtoa_r+0x358>
 800ec0a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ec0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ec12:	f7f1 fe2b 	bl	800086c <__aeabi_ddiv>
 800ec16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ec1a:	e028      	b.n	800ec6e <_dtoa_r+0x3a6>
 800ec1c:	2602      	movs	r6, #2
 800ec1e:	e7f2      	b.n	800ec06 <_dtoa_r+0x33e>
 800ec20:	07e1      	lsls	r1, r4, #31
 800ec22:	d508      	bpl.n	800ec36 <_dtoa_r+0x36e>
 800ec24:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ec28:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ec2c:	f7f1 fcf4 	bl	8000618 <__aeabi_dmul>
 800ec30:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ec34:	3601      	adds	r6, #1
 800ec36:	1064      	asrs	r4, r4, #1
 800ec38:	3508      	adds	r5, #8
 800ec3a:	e7e5      	b.n	800ec08 <_dtoa_r+0x340>
 800ec3c:	f000 80af 	beq.w	800ed9e <_dtoa_r+0x4d6>
 800ec40:	427c      	negs	r4, r7
 800ec42:	4b81      	ldr	r3, [pc, #516]	@ (800ee48 <_dtoa_r+0x580>)
 800ec44:	4d81      	ldr	r5, [pc, #516]	@ (800ee4c <_dtoa_r+0x584>)
 800ec46:	f004 020f 	and.w	r2, r4, #15
 800ec4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ec4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ec56:	f7f1 fcdf 	bl	8000618 <__aeabi_dmul>
 800ec5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ec5e:	1124      	asrs	r4, r4, #4
 800ec60:	2300      	movs	r3, #0
 800ec62:	2602      	movs	r6, #2
 800ec64:	2c00      	cmp	r4, #0
 800ec66:	f040 808f 	bne.w	800ed88 <_dtoa_r+0x4c0>
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d1d3      	bne.n	800ec16 <_dtoa_r+0x34e>
 800ec6e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ec70:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	f000 8094 	beq.w	800eda2 <_dtoa_r+0x4da>
 800ec7a:	4b75      	ldr	r3, [pc, #468]	@ (800ee50 <_dtoa_r+0x588>)
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	4620      	mov	r0, r4
 800ec80:	4629      	mov	r1, r5
 800ec82:	f7f1 ff3b 	bl	8000afc <__aeabi_dcmplt>
 800ec86:	2800      	cmp	r0, #0
 800ec88:	f000 808b 	beq.w	800eda2 <_dtoa_r+0x4da>
 800ec8c:	9b03      	ldr	r3, [sp, #12]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	f000 8087 	beq.w	800eda2 <_dtoa_r+0x4da>
 800ec94:	f1bb 0f00 	cmp.w	fp, #0
 800ec98:	dd34      	ble.n	800ed04 <_dtoa_r+0x43c>
 800ec9a:	4620      	mov	r0, r4
 800ec9c:	4b6d      	ldr	r3, [pc, #436]	@ (800ee54 <_dtoa_r+0x58c>)
 800ec9e:	2200      	movs	r2, #0
 800eca0:	4629      	mov	r1, r5
 800eca2:	f7f1 fcb9 	bl	8000618 <__aeabi_dmul>
 800eca6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ecaa:	f107 38ff 	add.w	r8, r7, #4294967295
 800ecae:	3601      	adds	r6, #1
 800ecb0:	465c      	mov	r4, fp
 800ecb2:	4630      	mov	r0, r6
 800ecb4:	f7f1 fc46 	bl	8000544 <__aeabi_i2d>
 800ecb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ecbc:	f7f1 fcac 	bl	8000618 <__aeabi_dmul>
 800ecc0:	4b65      	ldr	r3, [pc, #404]	@ (800ee58 <_dtoa_r+0x590>)
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	f7f1 faf2 	bl	80002ac <__adddf3>
 800ecc8:	4605      	mov	r5, r0
 800ecca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ecce:	2c00      	cmp	r4, #0
 800ecd0:	d16a      	bne.n	800eda8 <_dtoa_r+0x4e0>
 800ecd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ecd6:	4b61      	ldr	r3, [pc, #388]	@ (800ee5c <_dtoa_r+0x594>)
 800ecd8:	2200      	movs	r2, #0
 800ecda:	f7f1 fae5 	bl	80002a8 <__aeabi_dsub>
 800ecde:	4602      	mov	r2, r0
 800ece0:	460b      	mov	r3, r1
 800ece2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ece6:	462a      	mov	r2, r5
 800ece8:	4633      	mov	r3, r6
 800ecea:	f7f1 ff25 	bl	8000b38 <__aeabi_dcmpgt>
 800ecee:	2800      	cmp	r0, #0
 800ecf0:	f040 8298 	bne.w	800f224 <_dtoa_r+0x95c>
 800ecf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ecf8:	462a      	mov	r2, r5
 800ecfa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ecfe:	f7f1 fefd 	bl	8000afc <__aeabi_dcmplt>
 800ed02:	bb38      	cbnz	r0, 800ed54 <_dtoa_r+0x48c>
 800ed04:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800ed08:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ed0c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	f2c0 8157 	blt.w	800efc2 <_dtoa_r+0x6fa>
 800ed14:	2f0e      	cmp	r7, #14
 800ed16:	f300 8154 	bgt.w	800efc2 <_dtoa_r+0x6fa>
 800ed1a:	4b4b      	ldr	r3, [pc, #300]	@ (800ee48 <_dtoa_r+0x580>)
 800ed1c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ed20:	ed93 7b00 	vldr	d7, [r3]
 800ed24:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	ed8d 7b00 	vstr	d7, [sp]
 800ed2c:	f280 80e5 	bge.w	800eefa <_dtoa_r+0x632>
 800ed30:	9b03      	ldr	r3, [sp, #12]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	f300 80e1 	bgt.w	800eefa <_dtoa_r+0x632>
 800ed38:	d10c      	bne.n	800ed54 <_dtoa_r+0x48c>
 800ed3a:	4b48      	ldr	r3, [pc, #288]	@ (800ee5c <_dtoa_r+0x594>)
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	ec51 0b17 	vmov	r0, r1, d7
 800ed42:	f7f1 fc69 	bl	8000618 <__aeabi_dmul>
 800ed46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ed4a:	f7f1 feeb 	bl	8000b24 <__aeabi_dcmpge>
 800ed4e:	2800      	cmp	r0, #0
 800ed50:	f000 8266 	beq.w	800f220 <_dtoa_r+0x958>
 800ed54:	2400      	movs	r4, #0
 800ed56:	4625      	mov	r5, r4
 800ed58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ed5a:	4656      	mov	r6, sl
 800ed5c:	ea6f 0803 	mvn.w	r8, r3
 800ed60:	2700      	movs	r7, #0
 800ed62:	4621      	mov	r1, r4
 800ed64:	4648      	mov	r0, r9
 800ed66:	f000 fc09 	bl	800f57c <_Bfree>
 800ed6a:	2d00      	cmp	r5, #0
 800ed6c:	f000 80bd 	beq.w	800eeea <_dtoa_r+0x622>
 800ed70:	b12f      	cbz	r7, 800ed7e <_dtoa_r+0x4b6>
 800ed72:	42af      	cmp	r7, r5
 800ed74:	d003      	beq.n	800ed7e <_dtoa_r+0x4b6>
 800ed76:	4639      	mov	r1, r7
 800ed78:	4648      	mov	r0, r9
 800ed7a:	f000 fbff 	bl	800f57c <_Bfree>
 800ed7e:	4629      	mov	r1, r5
 800ed80:	4648      	mov	r0, r9
 800ed82:	f000 fbfb 	bl	800f57c <_Bfree>
 800ed86:	e0b0      	b.n	800eeea <_dtoa_r+0x622>
 800ed88:	07e2      	lsls	r2, r4, #31
 800ed8a:	d505      	bpl.n	800ed98 <_dtoa_r+0x4d0>
 800ed8c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ed90:	f7f1 fc42 	bl	8000618 <__aeabi_dmul>
 800ed94:	3601      	adds	r6, #1
 800ed96:	2301      	movs	r3, #1
 800ed98:	1064      	asrs	r4, r4, #1
 800ed9a:	3508      	adds	r5, #8
 800ed9c:	e762      	b.n	800ec64 <_dtoa_r+0x39c>
 800ed9e:	2602      	movs	r6, #2
 800eda0:	e765      	b.n	800ec6e <_dtoa_r+0x3a6>
 800eda2:	9c03      	ldr	r4, [sp, #12]
 800eda4:	46b8      	mov	r8, r7
 800eda6:	e784      	b.n	800ecb2 <_dtoa_r+0x3ea>
 800eda8:	4b27      	ldr	r3, [pc, #156]	@ (800ee48 <_dtoa_r+0x580>)
 800edaa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800edac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800edb0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800edb4:	4454      	add	r4, sl
 800edb6:	2900      	cmp	r1, #0
 800edb8:	d054      	beq.n	800ee64 <_dtoa_r+0x59c>
 800edba:	4929      	ldr	r1, [pc, #164]	@ (800ee60 <_dtoa_r+0x598>)
 800edbc:	2000      	movs	r0, #0
 800edbe:	f7f1 fd55 	bl	800086c <__aeabi_ddiv>
 800edc2:	4633      	mov	r3, r6
 800edc4:	462a      	mov	r2, r5
 800edc6:	f7f1 fa6f 	bl	80002a8 <__aeabi_dsub>
 800edca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800edce:	4656      	mov	r6, sl
 800edd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800edd4:	f7f1 fed0 	bl	8000b78 <__aeabi_d2iz>
 800edd8:	4605      	mov	r5, r0
 800edda:	f7f1 fbb3 	bl	8000544 <__aeabi_i2d>
 800edde:	4602      	mov	r2, r0
 800ede0:	460b      	mov	r3, r1
 800ede2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ede6:	f7f1 fa5f 	bl	80002a8 <__aeabi_dsub>
 800edea:	3530      	adds	r5, #48	@ 0x30
 800edec:	4602      	mov	r2, r0
 800edee:	460b      	mov	r3, r1
 800edf0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800edf4:	f806 5b01 	strb.w	r5, [r6], #1
 800edf8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800edfc:	f7f1 fe7e 	bl	8000afc <__aeabi_dcmplt>
 800ee00:	2800      	cmp	r0, #0
 800ee02:	d172      	bne.n	800eeea <_dtoa_r+0x622>
 800ee04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ee08:	4911      	ldr	r1, [pc, #68]	@ (800ee50 <_dtoa_r+0x588>)
 800ee0a:	2000      	movs	r0, #0
 800ee0c:	f7f1 fa4c 	bl	80002a8 <__aeabi_dsub>
 800ee10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ee14:	f7f1 fe72 	bl	8000afc <__aeabi_dcmplt>
 800ee18:	2800      	cmp	r0, #0
 800ee1a:	f040 80b4 	bne.w	800ef86 <_dtoa_r+0x6be>
 800ee1e:	42a6      	cmp	r6, r4
 800ee20:	f43f af70 	beq.w	800ed04 <_dtoa_r+0x43c>
 800ee24:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ee28:	4b0a      	ldr	r3, [pc, #40]	@ (800ee54 <_dtoa_r+0x58c>)
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	f7f1 fbf4 	bl	8000618 <__aeabi_dmul>
 800ee30:	4b08      	ldr	r3, [pc, #32]	@ (800ee54 <_dtoa_r+0x58c>)
 800ee32:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ee36:	2200      	movs	r2, #0
 800ee38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ee3c:	f7f1 fbec 	bl	8000618 <__aeabi_dmul>
 800ee40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee44:	e7c4      	b.n	800edd0 <_dtoa_r+0x508>
 800ee46:	bf00      	nop
 800ee48:	08010e20 	.word	0x08010e20
 800ee4c:	08010df8 	.word	0x08010df8
 800ee50:	3ff00000 	.word	0x3ff00000
 800ee54:	40240000 	.word	0x40240000
 800ee58:	401c0000 	.word	0x401c0000
 800ee5c:	40140000 	.word	0x40140000
 800ee60:	3fe00000 	.word	0x3fe00000
 800ee64:	4631      	mov	r1, r6
 800ee66:	4628      	mov	r0, r5
 800ee68:	f7f1 fbd6 	bl	8000618 <__aeabi_dmul>
 800ee6c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ee70:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ee72:	4656      	mov	r6, sl
 800ee74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ee78:	f7f1 fe7e 	bl	8000b78 <__aeabi_d2iz>
 800ee7c:	4605      	mov	r5, r0
 800ee7e:	f7f1 fb61 	bl	8000544 <__aeabi_i2d>
 800ee82:	4602      	mov	r2, r0
 800ee84:	460b      	mov	r3, r1
 800ee86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ee8a:	f7f1 fa0d 	bl	80002a8 <__aeabi_dsub>
 800ee8e:	3530      	adds	r5, #48	@ 0x30
 800ee90:	f806 5b01 	strb.w	r5, [r6], #1
 800ee94:	4602      	mov	r2, r0
 800ee96:	460b      	mov	r3, r1
 800ee98:	42a6      	cmp	r6, r4
 800ee9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ee9e:	f04f 0200 	mov.w	r2, #0
 800eea2:	d124      	bne.n	800eeee <_dtoa_r+0x626>
 800eea4:	4baf      	ldr	r3, [pc, #700]	@ (800f164 <_dtoa_r+0x89c>)
 800eea6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800eeaa:	f7f1 f9ff 	bl	80002ac <__adddf3>
 800eeae:	4602      	mov	r2, r0
 800eeb0:	460b      	mov	r3, r1
 800eeb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eeb6:	f7f1 fe3f 	bl	8000b38 <__aeabi_dcmpgt>
 800eeba:	2800      	cmp	r0, #0
 800eebc:	d163      	bne.n	800ef86 <_dtoa_r+0x6be>
 800eebe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800eec2:	49a8      	ldr	r1, [pc, #672]	@ (800f164 <_dtoa_r+0x89c>)
 800eec4:	2000      	movs	r0, #0
 800eec6:	f7f1 f9ef 	bl	80002a8 <__aeabi_dsub>
 800eeca:	4602      	mov	r2, r0
 800eecc:	460b      	mov	r3, r1
 800eece:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eed2:	f7f1 fe13 	bl	8000afc <__aeabi_dcmplt>
 800eed6:	2800      	cmp	r0, #0
 800eed8:	f43f af14 	beq.w	800ed04 <_dtoa_r+0x43c>
 800eedc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800eede:	1e73      	subs	r3, r6, #1
 800eee0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800eee2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800eee6:	2b30      	cmp	r3, #48	@ 0x30
 800eee8:	d0f8      	beq.n	800eedc <_dtoa_r+0x614>
 800eeea:	4647      	mov	r7, r8
 800eeec:	e03b      	b.n	800ef66 <_dtoa_r+0x69e>
 800eeee:	4b9e      	ldr	r3, [pc, #632]	@ (800f168 <_dtoa_r+0x8a0>)
 800eef0:	f7f1 fb92 	bl	8000618 <__aeabi_dmul>
 800eef4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eef8:	e7bc      	b.n	800ee74 <_dtoa_r+0x5ac>
 800eefa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800eefe:	4656      	mov	r6, sl
 800ef00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ef04:	4620      	mov	r0, r4
 800ef06:	4629      	mov	r1, r5
 800ef08:	f7f1 fcb0 	bl	800086c <__aeabi_ddiv>
 800ef0c:	f7f1 fe34 	bl	8000b78 <__aeabi_d2iz>
 800ef10:	4680      	mov	r8, r0
 800ef12:	f7f1 fb17 	bl	8000544 <__aeabi_i2d>
 800ef16:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ef1a:	f7f1 fb7d 	bl	8000618 <__aeabi_dmul>
 800ef1e:	4602      	mov	r2, r0
 800ef20:	460b      	mov	r3, r1
 800ef22:	4620      	mov	r0, r4
 800ef24:	4629      	mov	r1, r5
 800ef26:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ef2a:	f7f1 f9bd 	bl	80002a8 <__aeabi_dsub>
 800ef2e:	f806 4b01 	strb.w	r4, [r6], #1
 800ef32:	9d03      	ldr	r5, [sp, #12]
 800ef34:	eba6 040a 	sub.w	r4, r6, sl
 800ef38:	42a5      	cmp	r5, r4
 800ef3a:	4602      	mov	r2, r0
 800ef3c:	460b      	mov	r3, r1
 800ef3e:	d133      	bne.n	800efa8 <_dtoa_r+0x6e0>
 800ef40:	f7f1 f9b4 	bl	80002ac <__adddf3>
 800ef44:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ef48:	4604      	mov	r4, r0
 800ef4a:	460d      	mov	r5, r1
 800ef4c:	f7f1 fdf4 	bl	8000b38 <__aeabi_dcmpgt>
 800ef50:	b9c0      	cbnz	r0, 800ef84 <_dtoa_r+0x6bc>
 800ef52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ef56:	4620      	mov	r0, r4
 800ef58:	4629      	mov	r1, r5
 800ef5a:	f7f1 fdc5 	bl	8000ae8 <__aeabi_dcmpeq>
 800ef5e:	b110      	cbz	r0, 800ef66 <_dtoa_r+0x69e>
 800ef60:	f018 0f01 	tst.w	r8, #1
 800ef64:	d10e      	bne.n	800ef84 <_dtoa_r+0x6bc>
 800ef66:	9902      	ldr	r1, [sp, #8]
 800ef68:	4648      	mov	r0, r9
 800ef6a:	f000 fb07 	bl	800f57c <_Bfree>
 800ef6e:	2300      	movs	r3, #0
 800ef70:	7033      	strb	r3, [r6, #0]
 800ef72:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ef74:	3701      	adds	r7, #1
 800ef76:	601f      	str	r7, [r3, #0]
 800ef78:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	f000 824b 	beq.w	800f416 <_dtoa_r+0xb4e>
 800ef80:	601e      	str	r6, [r3, #0]
 800ef82:	e248      	b.n	800f416 <_dtoa_r+0xb4e>
 800ef84:	46b8      	mov	r8, r7
 800ef86:	4633      	mov	r3, r6
 800ef88:	461e      	mov	r6, r3
 800ef8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ef8e:	2a39      	cmp	r2, #57	@ 0x39
 800ef90:	d106      	bne.n	800efa0 <_dtoa_r+0x6d8>
 800ef92:	459a      	cmp	sl, r3
 800ef94:	d1f8      	bne.n	800ef88 <_dtoa_r+0x6c0>
 800ef96:	2230      	movs	r2, #48	@ 0x30
 800ef98:	f108 0801 	add.w	r8, r8, #1
 800ef9c:	f88a 2000 	strb.w	r2, [sl]
 800efa0:	781a      	ldrb	r2, [r3, #0]
 800efa2:	3201      	adds	r2, #1
 800efa4:	701a      	strb	r2, [r3, #0]
 800efa6:	e7a0      	b.n	800eeea <_dtoa_r+0x622>
 800efa8:	4b6f      	ldr	r3, [pc, #444]	@ (800f168 <_dtoa_r+0x8a0>)
 800efaa:	2200      	movs	r2, #0
 800efac:	f7f1 fb34 	bl	8000618 <__aeabi_dmul>
 800efb0:	2200      	movs	r2, #0
 800efb2:	2300      	movs	r3, #0
 800efb4:	4604      	mov	r4, r0
 800efb6:	460d      	mov	r5, r1
 800efb8:	f7f1 fd96 	bl	8000ae8 <__aeabi_dcmpeq>
 800efbc:	2800      	cmp	r0, #0
 800efbe:	d09f      	beq.n	800ef00 <_dtoa_r+0x638>
 800efc0:	e7d1      	b.n	800ef66 <_dtoa_r+0x69e>
 800efc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800efc4:	2a00      	cmp	r2, #0
 800efc6:	f000 80ea 	beq.w	800f19e <_dtoa_r+0x8d6>
 800efca:	9a07      	ldr	r2, [sp, #28]
 800efcc:	2a01      	cmp	r2, #1
 800efce:	f300 80cd 	bgt.w	800f16c <_dtoa_r+0x8a4>
 800efd2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800efd4:	2a00      	cmp	r2, #0
 800efd6:	f000 80c1 	beq.w	800f15c <_dtoa_r+0x894>
 800efda:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800efde:	9c08      	ldr	r4, [sp, #32]
 800efe0:	9e00      	ldr	r6, [sp, #0]
 800efe2:	9a00      	ldr	r2, [sp, #0]
 800efe4:	441a      	add	r2, r3
 800efe6:	9200      	str	r2, [sp, #0]
 800efe8:	9a06      	ldr	r2, [sp, #24]
 800efea:	2101      	movs	r1, #1
 800efec:	441a      	add	r2, r3
 800efee:	4648      	mov	r0, r9
 800eff0:	9206      	str	r2, [sp, #24]
 800eff2:	f000 fb77 	bl	800f6e4 <__i2b>
 800eff6:	4605      	mov	r5, r0
 800eff8:	b166      	cbz	r6, 800f014 <_dtoa_r+0x74c>
 800effa:	9b06      	ldr	r3, [sp, #24]
 800effc:	2b00      	cmp	r3, #0
 800effe:	dd09      	ble.n	800f014 <_dtoa_r+0x74c>
 800f000:	42b3      	cmp	r3, r6
 800f002:	9a00      	ldr	r2, [sp, #0]
 800f004:	bfa8      	it	ge
 800f006:	4633      	movge	r3, r6
 800f008:	1ad2      	subs	r2, r2, r3
 800f00a:	9200      	str	r2, [sp, #0]
 800f00c:	9a06      	ldr	r2, [sp, #24]
 800f00e:	1af6      	subs	r6, r6, r3
 800f010:	1ad3      	subs	r3, r2, r3
 800f012:	9306      	str	r3, [sp, #24]
 800f014:	9b08      	ldr	r3, [sp, #32]
 800f016:	b30b      	cbz	r3, 800f05c <_dtoa_r+0x794>
 800f018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	f000 80c6 	beq.w	800f1ac <_dtoa_r+0x8e4>
 800f020:	2c00      	cmp	r4, #0
 800f022:	f000 80c0 	beq.w	800f1a6 <_dtoa_r+0x8de>
 800f026:	4629      	mov	r1, r5
 800f028:	4622      	mov	r2, r4
 800f02a:	4648      	mov	r0, r9
 800f02c:	f000 fc12 	bl	800f854 <__pow5mult>
 800f030:	9a02      	ldr	r2, [sp, #8]
 800f032:	4601      	mov	r1, r0
 800f034:	4605      	mov	r5, r0
 800f036:	4648      	mov	r0, r9
 800f038:	f000 fb6a 	bl	800f710 <__multiply>
 800f03c:	9902      	ldr	r1, [sp, #8]
 800f03e:	4680      	mov	r8, r0
 800f040:	4648      	mov	r0, r9
 800f042:	f000 fa9b 	bl	800f57c <_Bfree>
 800f046:	9b08      	ldr	r3, [sp, #32]
 800f048:	1b1b      	subs	r3, r3, r4
 800f04a:	9308      	str	r3, [sp, #32]
 800f04c:	f000 80b1 	beq.w	800f1b2 <_dtoa_r+0x8ea>
 800f050:	9a08      	ldr	r2, [sp, #32]
 800f052:	4641      	mov	r1, r8
 800f054:	4648      	mov	r0, r9
 800f056:	f000 fbfd 	bl	800f854 <__pow5mult>
 800f05a:	9002      	str	r0, [sp, #8]
 800f05c:	2101      	movs	r1, #1
 800f05e:	4648      	mov	r0, r9
 800f060:	f000 fb40 	bl	800f6e4 <__i2b>
 800f064:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f066:	4604      	mov	r4, r0
 800f068:	2b00      	cmp	r3, #0
 800f06a:	f000 81d8 	beq.w	800f41e <_dtoa_r+0xb56>
 800f06e:	461a      	mov	r2, r3
 800f070:	4601      	mov	r1, r0
 800f072:	4648      	mov	r0, r9
 800f074:	f000 fbee 	bl	800f854 <__pow5mult>
 800f078:	9b07      	ldr	r3, [sp, #28]
 800f07a:	2b01      	cmp	r3, #1
 800f07c:	4604      	mov	r4, r0
 800f07e:	f300 809f 	bgt.w	800f1c0 <_dtoa_r+0x8f8>
 800f082:	9b04      	ldr	r3, [sp, #16]
 800f084:	2b00      	cmp	r3, #0
 800f086:	f040 8097 	bne.w	800f1b8 <_dtoa_r+0x8f0>
 800f08a:	9b05      	ldr	r3, [sp, #20]
 800f08c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f090:	2b00      	cmp	r3, #0
 800f092:	f040 8093 	bne.w	800f1bc <_dtoa_r+0x8f4>
 800f096:	9b05      	ldr	r3, [sp, #20]
 800f098:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f09c:	0d1b      	lsrs	r3, r3, #20
 800f09e:	051b      	lsls	r3, r3, #20
 800f0a0:	b133      	cbz	r3, 800f0b0 <_dtoa_r+0x7e8>
 800f0a2:	9b00      	ldr	r3, [sp, #0]
 800f0a4:	3301      	adds	r3, #1
 800f0a6:	9300      	str	r3, [sp, #0]
 800f0a8:	9b06      	ldr	r3, [sp, #24]
 800f0aa:	3301      	adds	r3, #1
 800f0ac:	9306      	str	r3, [sp, #24]
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	9308      	str	r3, [sp, #32]
 800f0b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	f000 81b8 	beq.w	800f42a <_dtoa_r+0xb62>
 800f0ba:	6923      	ldr	r3, [r4, #16]
 800f0bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f0c0:	6918      	ldr	r0, [r3, #16]
 800f0c2:	f000 fac3 	bl	800f64c <__hi0bits>
 800f0c6:	f1c0 0020 	rsb	r0, r0, #32
 800f0ca:	9b06      	ldr	r3, [sp, #24]
 800f0cc:	4418      	add	r0, r3
 800f0ce:	f010 001f 	ands.w	r0, r0, #31
 800f0d2:	f000 8082 	beq.w	800f1da <_dtoa_r+0x912>
 800f0d6:	f1c0 0320 	rsb	r3, r0, #32
 800f0da:	2b04      	cmp	r3, #4
 800f0dc:	dd73      	ble.n	800f1c6 <_dtoa_r+0x8fe>
 800f0de:	9b00      	ldr	r3, [sp, #0]
 800f0e0:	f1c0 001c 	rsb	r0, r0, #28
 800f0e4:	4403      	add	r3, r0
 800f0e6:	9300      	str	r3, [sp, #0]
 800f0e8:	9b06      	ldr	r3, [sp, #24]
 800f0ea:	4403      	add	r3, r0
 800f0ec:	4406      	add	r6, r0
 800f0ee:	9306      	str	r3, [sp, #24]
 800f0f0:	9b00      	ldr	r3, [sp, #0]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	dd05      	ble.n	800f102 <_dtoa_r+0x83a>
 800f0f6:	9902      	ldr	r1, [sp, #8]
 800f0f8:	461a      	mov	r2, r3
 800f0fa:	4648      	mov	r0, r9
 800f0fc:	f000 fc04 	bl	800f908 <__lshift>
 800f100:	9002      	str	r0, [sp, #8]
 800f102:	9b06      	ldr	r3, [sp, #24]
 800f104:	2b00      	cmp	r3, #0
 800f106:	dd05      	ble.n	800f114 <_dtoa_r+0x84c>
 800f108:	4621      	mov	r1, r4
 800f10a:	461a      	mov	r2, r3
 800f10c:	4648      	mov	r0, r9
 800f10e:	f000 fbfb 	bl	800f908 <__lshift>
 800f112:	4604      	mov	r4, r0
 800f114:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f116:	2b00      	cmp	r3, #0
 800f118:	d061      	beq.n	800f1de <_dtoa_r+0x916>
 800f11a:	9802      	ldr	r0, [sp, #8]
 800f11c:	4621      	mov	r1, r4
 800f11e:	f000 fc5f 	bl	800f9e0 <__mcmp>
 800f122:	2800      	cmp	r0, #0
 800f124:	da5b      	bge.n	800f1de <_dtoa_r+0x916>
 800f126:	2300      	movs	r3, #0
 800f128:	9902      	ldr	r1, [sp, #8]
 800f12a:	220a      	movs	r2, #10
 800f12c:	4648      	mov	r0, r9
 800f12e:	f000 fa47 	bl	800f5c0 <__multadd>
 800f132:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f134:	9002      	str	r0, [sp, #8]
 800f136:	f107 38ff 	add.w	r8, r7, #4294967295
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	f000 8177 	beq.w	800f42e <_dtoa_r+0xb66>
 800f140:	4629      	mov	r1, r5
 800f142:	2300      	movs	r3, #0
 800f144:	220a      	movs	r2, #10
 800f146:	4648      	mov	r0, r9
 800f148:	f000 fa3a 	bl	800f5c0 <__multadd>
 800f14c:	f1bb 0f00 	cmp.w	fp, #0
 800f150:	4605      	mov	r5, r0
 800f152:	dc6f      	bgt.n	800f234 <_dtoa_r+0x96c>
 800f154:	9b07      	ldr	r3, [sp, #28]
 800f156:	2b02      	cmp	r3, #2
 800f158:	dc49      	bgt.n	800f1ee <_dtoa_r+0x926>
 800f15a:	e06b      	b.n	800f234 <_dtoa_r+0x96c>
 800f15c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f15e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f162:	e73c      	b.n	800efde <_dtoa_r+0x716>
 800f164:	3fe00000 	.word	0x3fe00000
 800f168:	40240000 	.word	0x40240000
 800f16c:	9b03      	ldr	r3, [sp, #12]
 800f16e:	1e5c      	subs	r4, r3, #1
 800f170:	9b08      	ldr	r3, [sp, #32]
 800f172:	42a3      	cmp	r3, r4
 800f174:	db09      	blt.n	800f18a <_dtoa_r+0x8c2>
 800f176:	1b1c      	subs	r4, r3, r4
 800f178:	9b03      	ldr	r3, [sp, #12]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	f6bf af30 	bge.w	800efe0 <_dtoa_r+0x718>
 800f180:	9b00      	ldr	r3, [sp, #0]
 800f182:	9a03      	ldr	r2, [sp, #12]
 800f184:	1a9e      	subs	r6, r3, r2
 800f186:	2300      	movs	r3, #0
 800f188:	e72b      	b.n	800efe2 <_dtoa_r+0x71a>
 800f18a:	9b08      	ldr	r3, [sp, #32]
 800f18c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f18e:	9408      	str	r4, [sp, #32]
 800f190:	1ae3      	subs	r3, r4, r3
 800f192:	441a      	add	r2, r3
 800f194:	9e00      	ldr	r6, [sp, #0]
 800f196:	9b03      	ldr	r3, [sp, #12]
 800f198:	920d      	str	r2, [sp, #52]	@ 0x34
 800f19a:	2400      	movs	r4, #0
 800f19c:	e721      	b.n	800efe2 <_dtoa_r+0x71a>
 800f19e:	9c08      	ldr	r4, [sp, #32]
 800f1a0:	9e00      	ldr	r6, [sp, #0]
 800f1a2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800f1a4:	e728      	b.n	800eff8 <_dtoa_r+0x730>
 800f1a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800f1aa:	e751      	b.n	800f050 <_dtoa_r+0x788>
 800f1ac:	9a08      	ldr	r2, [sp, #32]
 800f1ae:	9902      	ldr	r1, [sp, #8]
 800f1b0:	e750      	b.n	800f054 <_dtoa_r+0x78c>
 800f1b2:	f8cd 8008 	str.w	r8, [sp, #8]
 800f1b6:	e751      	b.n	800f05c <_dtoa_r+0x794>
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	e779      	b.n	800f0b0 <_dtoa_r+0x7e8>
 800f1bc:	9b04      	ldr	r3, [sp, #16]
 800f1be:	e777      	b.n	800f0b0 <_dtoa_r+0x7e8>
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	9308      	str	r3, [sp, #32]
 800f1c4:	e779      	b.n	800f0ba <_dtoa_r+0x7f2>
 800f1c6:	d093      	beq.n	800f0f0 <_dtoa_r+0x828>
 800f1c8:	9a00      	ldr	r2, [sp, #0]
 800f1ca:	331c      	adds	r3, #28
 800f1cc:	441a      	add	r2, r3
 800f1ce:	9200      	str	r2, [sp, #0]
 800f1d0:	9a06      	ldr	r2, [sp, #24]
 800f1d2:	441a      	add	r2, r3
 800f1d4:	441e      	add	r6, r3
 800f1d6:	9206      	str	r2, [sp, #24]
 800f1d8:	e78a      	b.n	800f0f0 <_dtoa_r+0x828>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	e7f4      	b.n	800f1c8 <_dtoa_r+0x900>
 800f1de:	9b03      	ldr	r3, [sp, #12]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	46b8      	mov	r8, r7
 800f1e4:	dc20      	bgt.n	800f228 <_dtoa_r+0x960>
 800f1e6:	469b      	mov	fp, r3
 800f1e8:	9b07      	ldr	r3, [sp, #28]
 800f1ea:	2b02      	cmp	r3, #2
 800f1ec:	dd1e      	ble.n	800f22c <_dtoa_r+0x964>
 800f1ee:	f1bb 0f00 	cmp.w	fp, #0
 800f1f2:	f47f adb1 	bne.w	800ed58 <_dtoa_r+0x490>
 800f1f6:	4621      	mov	r1, r4
 800f1f8:	465b      	mov	r3, fp
 800f1fa:	2205      	movs	r2, #5
 800f1fc:	4648      	mov	r0, r9
 800f1fe:	f000 f9df 	bl	800f5c0 <__multadd>
 800f202:	4601      	mov	r1, r0
 800f204:	4604      	mov	r4, r0
 800f206:	9802      	ldr	r0, [sp, #8]
 800f208:	f000 fbea 	bl	800f9e0 <__mcmp>
 800f20c:	2800      	cmp	r0, #0
 800f20e:	f77f ada3 	ble.w	800ed58 <_dtoa_r+0x490>
 800f212:	4656      	mov	r6, sl
 800f214:	2331      	movs	r3, #49	@ 0x31
 800f216:	f806 3b01 	strb.w	r3, [r6], #1
 800f21a:	f108 0801 	add.w	r8, r8, #1
 800f21e:	e59f      	b.n	800ed60 <_dtoa_r+0x498>
 800f220:	9c03      	ldr	r4, [sp, #12]
 800f222:	46b8      	mov	r8, r7
 800f224:	4625      	mov	r5, r4
 800f226:	e7f4      	b.n	800f212 <_dtoa_r+0x94a>
 800f228:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800f22c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f22e:	2b00      	cmp	r3, #0
 800f230:	f000 8101 	beq.w	800f436 <_dtoa_r+0xb6e>
 800f234:	2e00      	cmp	r6, #0
 800f236:	dd05      	ble.n	800f244 <_dtoa_r+0x97c>
 800f238:	4629      	mov	r1, r5
 800f23a:	4632      	mov	r2, r6
 800f23c:	4648      	mov	r0, r9
 800f23e:	f000 fb63 	bl	800f908 <__lshift>
 800f242:	4605      	mov	r5, r0
 800f244:	9b08      	ldr	r3, [sp, #32]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d05c      	beq.n	800f304 <_dtoa_r+0xa3c>
 800f24a:	6869      	ldr	r1, [r5, #4]
 800f24c:	4648      	mov	r0, r9
 800f24e:	f000 f955 	bl	800f4fc <_Balloc>
 800f252:	4606      	mov	r6, r0
 800f254:	b928      	cbnz	r0, 800f262 <_dtoa_r+0x99a>
 800f256:	4b82      	ldr	r3, [pc, #520]	@ (800f460 <_dtoa_r+0xb98>)
 800f258:	4602      	mov	r2, r0
 800f25a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f25e:	f7ff bb4a 	b.w	800e8f6 <_dtoa_r+0x2e>
 800f262:	692a      	ldr	r2, [r5, #16]
 800f264:	3202      	adds	r2, #2
 800f266:	0092      	lsls	r2, r2, #2
 800f268:	f105 010c 	add.w	r1, r5, #12
 800f26c:	300c      	adds	r0, #12
 800f26e:	f7ff fa92 	bl	800e796 <memcpy>
 800f272:	2201      	movs	r2, #1
 800f274:	4631      	mov	r1, r6
 800f276:	4648      	mov	r0, r9
 800f278:	f000 fb46 	bl	800f908 <__lshift>
 800f27c:	f10a 0301 	add.w	r3, sl, #1
 800f280:	9300      	str	r3, [sp, #0]
 800f282:	eb0a 030b 	add.w	r3, sl, fp
 800f286:	9308      	str	r3, [sp, #32]
 800f288:	9b04      	ldr	r3, [sp, #16]
 800f28a:	f003 0301 	and.w	r3, r3, #1
 800f28e:	462f      	mov	r7, r5
 800f290:	9306      	str	r3, [sp, #24]
 800f292:	4605      	mov	r5, r0
 800f294:	9b00      	ldr	r3, [sp, #0]
 800f296:	9802      	ldr	r0, [sp, #8]
 800f298:	4621      	mov	r1, r4
 800f29a:	f103 3bff 	add.w	fp, r3, #4294967295
 800f29e:	f7ff fa88 	bl	800e7b2 <quorem>
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	3330      	adds	r3, #48	@ 0x30
 800f2a6:	9003      	str	r0, [sp, #12]
 800f2a8:	4639      	mov	r1, r7
 800f2aa:	9802      	ldr	r0, [sp, #8]
 800f2ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2ae:	f000 fb97 	bl	800f9e0 <__mcmp>
 800f2b2:	462a      	mov	r2, r5
 800f2b4:	9004      	str	r0, [sp, #16]
 800f2b6:	4621      	mov	r1, r4
 800f2b8:	4648      	mov	r0, r9
 800f2ba:	f000 fbad 	bl	800fa18 <__mdiff>
 800f2be:	68c2      	ldr	r2, [r0, #12]
 800f2c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2c2:	4606      	mov	r6, r0
 800f2c4:	bb02      	cbnz	r2, 800f308 <_dtoa_r+0xa40>
 800f2c6:	4601      	mov	r1, r0
 800f2c8:	9802      	ldr	r0, [sp, #8]
 800f2ca:	f000 fb89 	bl	800f9e0 <__mcmp>
 800f2ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2d0:	4602      	mov	r2, r0
 800f2d2:	4631      	mov	r1, r6
 800f2d4:	4648      	mov	r0, r9
 800f2d6:	920c      	str	r2, [sp, #48]	@ 0x30
 800f2d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2da:	f000 f94f 	bl	800f57c <_Bfree>
 800f2de:	9b07      	ldr	r3, [sp, #28]
 800f2e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f2e2:	9e00      	ldr	r6, [sp, #0]
 800f2e4:	ea42 0103 	orr.w	r1, r2, r3
 800f2e8:	9b06      	ldr	r3, [sp, #24]
 800f2ea:	4319      	orrs	r1, r3
 800f2ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2ee:	d10d      	bne.n	800f30c <_dtoa_r+0xa44>
 800f2f0:	2b39      	cmp	r3, #57	@ 0x39
 800f2f2:	d027      	beq.n	800f344 <_dtoa_r+0xa7c>
 800f2f4:	9a04      	ldr	r2, [sp, #16]
 800f2f6:	2a00      	cmp	r2, #0
 800f2f8:	dd01      	ble.n	800f2fe <_dtoa_r+0xa36>
 800f2fa:	9b03      	ldr	r3, [sp, #12]
 800f2fc:	3331      	adds	r3, #49	@ 0x31
 800f2fe:	f88b 3000 	strb.w	r3, [fp]
 800f302:	e52e      	b.n	800ed62 <_dtoa_r+0x49a>
 800f304:	4628      	mov	r0, r5
 800f306:	e7b9      	b.n	800f27c <_dtoa_r+0x9b4>
 800f308:	2201      	movs	r2, #1
 800f30a:	e7e2      	b.n	800f2d2 <_dtoa_r+0xa0a>
 800f30c:	9904      	ldr	r1, [sp, #16]
 800f30e:	2900      	cmp	r1, #0
 800f310:	db04      	blt.n	800f31c <_dtoa_r+0xa54>
 800f312:	9807      	ldr	r0, [sp, #28]
 800f314:	4301      	orrs	r1, r0
 800f316:	9806      	ldr	r0, [sp, #24]
 800f318:	4301      	orrs	r1, r0
 800f31a:	d120      	bne.n	800f35e <_dtoa_r+0xa96>
 800f31c:	2a00      	cmp	r2, #0
 800f31e:	ddee      	ble.n	800f2fe <_dtoa_r+0xa36>
 800f320:	9902      	ldr	r1, [sp, #8]
 800f322:	9300      	str	r3, [sp, #0]
 800f324:	2201      	movs	r2, #1
 800f326:	4648      	mov	r0, r9
 800f328:	f000 faee 	bl	800f908 <__lshift>
 800f32c:	4621      	mov	r1, r4
 800f32e:	9002      	str	r0, [sp, #8]
 800f330:	f000 fb56 	bl	800f9e0 <__mcmp>
 800f334:	2800      	cmp	r0, #0
 800f336:	9b00      	ldr	r3, [sp, #0]
 800f338:	dc02      	bgt.n	800f340 <_dtoa_r+0xa78>
 800f33a:	d1e0      	bne.n	800f2fe <_dtoa_r+0xa36>
 800f33c:	07da      	lsls	r2, r3, #31
 800f33e:	d5de      	bpl.n	800f2fe <_dtoa_r+0xa36>
 800f340:	2b39      	cmp	r3, #57	@ 0x39
 800f342:	d1da      	bne.n	800f2fa <_dtoa_r+0xa32>
 800f344:	2339      	movs	r3, #57	@ 0x39
 800f346:	f88b 3000 	strb.w	r3, [fp]
 800f34a:	4633      	mov	r3, r6
 800f34c:	461e      	mov	r6, r3
 800f34e:	3b01      	subs	r3, #1
 800f350:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f354:	2a39      	cmp	r2, #57	@ 0x39
 800f356:	d04e      	beq.n	800f3f6 <_dtoa_r+0xb2e>
 800f358:	3201      	adds	r2, #1
 800f35a:	701a      	strb	r2, [r3, #0]
 800f35c:	e501      	b.n	800ed62 <_dtoa_r+0x49a>
 800f35e:	2a00      	cmp	r2, #0
 800f360:	dd03      	ble.n	800f36a <_dtoa_r+0xaa2>
 800f362:	2b39      	cmp	r3, #57	@ 0x39
 800f364:	d0ee      	beq.n	800f344 <_dtoa_r+0xa7c>
 800f366:	3301      	adds	r3, #1
 800f368:	e7c9      	b.n	800f2fe <_dtoa_r+0xa36>
 800f36a:	9a00      	ldr	r2, [sp, #0]
 800f36c:	9908      	ldr	r1, [sp, #32]
 800f36e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f372:	428a      	cmp	r2, r1
 800f374:	d028      	beq.n	800f3c8 <_dtoa_r+0xb00>
 800f376:	9902      	ldr	r1, [sp, #8]
 800f378:	2300      	movs	r3, #0
 800f37a:	220a      	movs	r2, #10
 800f37c:	4648      	mov	r0, r9
 800f37e:	f000 f91f 	bl	800f5c0 <__multadd>
 800f382:	42af      	cmp	r7, r5
 800f384:	9002      	str	r0, [sp, #8]
 800f386:	f04f 0300 	mov.w	r3, #0
 800f38a:	f04f 020a 	mov.w	r2, #10
 800f38e:	4639      	mov	r1, r7
 800f390:	4648      	mov	r0, r9
 800f392:	d107      	bne.n	800f3a4 <_dtoa_r+0xadc>
 800f394:	f000 f914 	bl	800f5c0 <__multadd>
 800f398:	4607      	mov	r7, r0
 800f39a:	4605      	mov	r5, r0
 800f39c:	9b00      	ldr	r3, [sp, #0]
 800f39e:	3301      	adds	r3, #1
 800f3a0:	9300      	str	r3, [sp, #0]
 800f3a2:	e777      	b.n	800f294 <_dtoa_r+0x9cc>
 800f3a4:	f000 f90c 	bl	800f5c0 <__multadd>
 800f3a8:	4629      	mov	r1, r5
 800f3aa:	4607      	mov	r7, r0
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	220a      	movs	r2, #10
 800f3b0:	4648      	mov	r0, r9
 800f3b2:	f000 f905 	bl	800f5c0 <__multadd>
 800f3b6:	4605      	mov	r5, r0
 800f3b8:	e7f0      	b.n	800f39c <_dtoa_r+0xad4>
 800f3ba:	f1bb 0f00 	cmp.w	fp, #0
 800f3be:	bfcc      	ite	gt
 800f3c0:	465e      	movgt	r6, fp
 800f3c2:	2601      	movle	r6, #1
 800f3c4:	4456      	add	r6, sl
 800f3c6:	2700      	movs	r7, #0
 800f3c8:	9902      	ldr	r1, [sp, #8]
 800f3ca:	9300      	str	r3, [sp, #0]
 800f3cc:	2201      	movs	r2, #1
 800f3ce:	4648      	mov	r0, r9
 800f3d0:	f000 fa9a 	bl	800f908 <__lshift>
 800f3d4:	4621      	mov	r1, r4
 800f3d6:	9002      	str	r0, [sp, #8]
 800f3d8:	f000 fb02 	bl	800f9e0 <__mcmp>
 800f3dc:	2800      	cmp	r0, #0
 800f3de:	dcb4      	bgt.n	800f34a <_dtoa_r+0xa82>
 800f3e0:	d102      	bne.n	800f3e8 <_dtoa_r+0xb20>
 800f3e2:	9b00      	ldr	r3, [sp, #0]
 800f3e4:	07db      	lsls	r3, r3, #31
 800f3e6:	d4b0      	bmi.n	800f34a <_dtoa_r+0xa82>
 800f3e8:	4633      	mov	r3, r6
 800f3ea:	461e      	mov	r6, r3
 800f3ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f3f0:	2a30      	cmp	r2, #48	@ 0x30
 800f3f2:	d0fa      	beq.n	800f3ea <_dtoa_r+0xb22>
 800f3f4:	e4b5      	b.n	800ed62 <_dtoa_r+0x49a>
 800f3f6:	459a      	cmp	sl, r3
 800f3f8:	d1a8      	bne.n	800f34c <_dtoa_r+0xa84>
 800f3fa:	2331      	movs	r3, #49	@ 0x31
 800f3fc:	f108 0801 	add.w	r8, r8, #1
 800f400:	f88a 3000 	strb.w	r3, [sl]
 800f404:	e4ad      	b.n	800ed62 <_dtoa_r+0x49a>
 800f406:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f408:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800f464 <_dtoa_r+0xb9c>
 800f40c:	b11b      	cbz	r3, 800f416 <_dtoa_r+0xb4e>
 800f40e:	f10a 0308 	add.w	r3, sl, #8
 800f412:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f414:	6013      	str	r3, [r2, #0]
 800f416:	4650      	mov	r0, sl
 800f418:	b017      	add	sp, #92	@ 0x5c
 800f41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f41e:	9b07      	ldr	r3, [sp, #28]
 800f420:	2b01      	cmp	r3, #1
 800f422:	f77f ae2e 	ble.w	800f082 <_dtoa_r+0x7ba>
 800f426:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f428:	9308      	str	r3, [sp, #32]
 800f42a:	2001      	movs	r0, #1
 800f42c:	e64d      	b.n	800f0ca <_dtoa_r+0x802>
 800f42e:	f1bb 0f00 	cmp.w	fp, #0
 800f432:	f77f aed9 	ble.w	800f1e8 <_dtoa_r+0x920>
 800f436:	4656      	mov	r6, sl
 800f438:	9802      	ldr	r0, [sp, #8]
 800f43a:	4621      	mov	r1, r4
 800f43c:	f7ff f9b9 	bl	800e7b2 <quorem>
 800f440:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800f444:	f806 3b01 	strb.w	r3, [r6], #1
 800f448:	eba6 020a 	sub.w	r2, r6, sl
 800f44c:	4593      	cmp	fp, r2
 800f44e:	ddb4      	ble.n	800f3ba <_dtoa_r+0xaf2>
 800f450:	9902      	ldr	r1, [sp, #8]
 800f452:	2300      	movs	r3, #0
 800f454:	220a      	movs	r2, #10
 800f456:	4648      	mov	r0, r9
 800f458:	f000 f8b2 	bl	800f5c0 <__multadd>
 800f45c:	9002      	str	r0, [sp, #8]
 800f45e:	e7eb      	b.n	800f438 <_dtoa_r+0xb70>
 800f460:	08010d24 	.word	0x08010d24
 800f464:	08010ca8 	.word	0x08010ca8

0800f468 <_free_r>:
 800f468:	b538      	push	{r3, r4, r5, lr}
 800f46a:	4605      	mov	r5, r0
 800f46c:	2900      	cmp	r1, #0
 800f46e:	d041      	beq.n	800f4f4 <_free_r+0x8c>
 800f470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f474:	1f0c      	subs	r4, r1, #4
 800f476:	2b00      	cmp	r3, #0
 800f478:	bfb8      	it	lt
 800f47a:	18e4      	addlt	r4, r4, r3
 800f47c:	f7fe fa5a 	bl	800d934 <__malloc_lock>
 800f480:	4a1d      	ldr	r2, [pc, #116]	@ (800f4f8 <_free_r+0x90>)
 800f482:	6813      	ldr	r3, [r2, #0]
 800f484:	b933      	cbnz	r3, 800f494 <_free_r+0x2c>
 800f486:	6063      	str	r3, [r4, #4]
 800f488:	6014      	str	r4, [r2, #0]
 800f48a:	4628      	mov	r0, r5
 800f48c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f490:	f7fe ba56 	b.w	800d940 <__malloc_unlock>
 800f494:	42a3      	cmp	r3, r4
 800f496:	d908      	bls.n	800f4aa <_free_r+0x42>
 800f498:	6820      	ldr	r0, [r4, #0]
 800f49a:	1821      	adds	r1, r4, r0
 800f49c:	428b      	cmp	r3, r1
 800f49e:	bf01      	itttt	eq
 800f4a0:	6819      	ldreq	r1, [r3, #0]
 800f4a2:	685b      	ldreq	r3, [r3, #4]
 800f4a4:	1809      	addeq	r1, r1, r0
 800f4a6:	6021      	streq	r1, [r4, #0]
 800f4a8:	e7ed      	b.n	800f486 <_free_r+0x1e>
 800f4aa:	461a      	mov	r2, r3
 800f4ac:	685b      	ldr	r3, [r3, #4]
 800f4ae:	b10b      	cbz	r3, 800f4b4 <_free_r+0x4c>
 800f4b0:	42a3      	cmp	r3, r4
 800f4b2:	d9fa      	bls.n	800f4aa <_free_r+0x42>
 800f4b4:	6811      	ldr	r1, [r2, #0]
 800f4b6:	1850      	adds	r0, r2, r1
 800f4b8:	42a0      	cmp	r0, r4
 800f4ba:	d10b      	bne.n	800f4d4 <_free_r+0x6c>
 800f4bc:	6820      	ldr	r0, [r4, #0]
 800f4be:	4401      	add	r1, r0
 800f4c0:	1850      	adds	r0, r2, r1
 800f4c2:	4283      	cmp	r3, r0
 800f4c4:	6011      	str	r1, [r2, #0]
 800f4c6:	d1e0      	bne.n	800f48a <_free_r+0x22>
 800f4c8:	6818      	ldr	r0, [r3, #0]
 800f4ca:	685b      	ldr	r3, [r3, #4]
 800f4cc:	6053      	str	r3, [r2, #4]
 800f4ce:	4408      	add	r0, r1
 800f4d0:	6010      	str	r0, [r2, #0]
 800f4d2:	e7da      	b.n	800f48a <_free_r+0x22>
 800f4d4:	d902      	bls.n	800f4dc <_free_r+0x74>
 800f4d6:	230c      	movs	r3, #12
 800f4d8:	602b      	str	r3, [r5, #0]
 800f4da:	e7d6      	b.n	800f48a <_free_r+0x22>
 800f4dc:	6820      	ldr	r0, [r4, #0]
 800f4de:	1821      	adds	r1, r4, r0
 800f4e0:	428b      	cmp	r3, r1
 800f4e2:	bf04      	itt	eq
 800f4e4:	6819      	ldreq	r1, [r3, #0]
 800f4e6:	685b      	ldreq	r3, [r3, #4]
 800f4e8:	6063      	str	r3, [r4, #4]
 800f4ea:	bf04      	itt	eq
 800f4ec:	1809      	addeq	r1, r1, r0
 800f4ee:	6021      	streq	r1, [r4, #0]
 800f4f0:	6054      	str	r4, [r2, #4]
 800f4f2:	e7ca      	b.n	800f48a <_free_r+0x22>
 800f4f4:	bd38      	pop	{r3, r4, r5, pc}
 800f4f6:	bf00      	nop
 800f4f8:	20026ad0 	.word	0x20026ad0

0800f4fc <_Balloc>:
 800f4fc:	b570      	push	{r4, r5, r6, lr}
 800f4fe:	69c6      	ldr	r6, [r0, #28]
 800f500:	4604      	mov	r4, r0
 800f502:	460d      	mov	r5, r1
 800f504:	b976      	cbnz	r6, 800f524 <_Balloc+0x28>
 800f506:	2010      	movs	r0, #16
 800f508:	f7fe f96a 	bl	800d7e0 <malloc>
 800f50c:	4602      	mov	r2, r0
 800f50e:	61e0      	str	r0, [r4, #28]
 800f510:	b920      	cbnz	r0, 800f51c <_Balloc+0x20>
 800f512:	4b18      	ldr	r3, [pc, #96]	@ (800f574 <_Balloc+0x78>)
 800f514:	4818      	ldr	r0, [pc, #96]	@ (800f578 <_Balloc+0x7c>)
 800f516:	216b      	movs	r1, #107	@ 0x6b
 800f518:	f000 ff4e 	bl	80103b8 <__assert_func>
 800f51c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f520:	6006      	str	r6, [r0, #0]
 800f522:	60c6      	str	r6, [r0, #12]
 800f524:	69e6      	ldr	r6, [r4, #28]
 800f526:	68f3      	ldr	r3, [r6, #12]
 800f528:	b183      	cbz	r3, 800f54c <_Balloc+0x50>
 800f52a:	69e3      	ldr	r3, [r4, #28]
 800f52c:	68db      	ldr	r3, [r3, #12]
 800f52e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f532:	b9b8      	cbnz	r0, 800f564 <_Balloc+0x68>
 800f534:	2101      	movs	r1, #1
 800f536:	fa01 f605 	lsl.w	r6, r1, r5
 800f53a:	1d72      	adds	r2, r6, #5
 800f53c:	0092      	lsls	r2, r2, #2
 800f53e:	4620      	mov	r0, r4
 800f540:	f000 ff58 	bl	80103f4 <_calloc_r>
 800f544:	b160      	cbz	r0, 800f560 <_Balloc+0x64>
 800f546:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f54a:	e00e      	b.n	800f56a <_Balloc+0x6e>
 800f54c:	2221      	movs	r2, #33	@ 0x21
 800f54e:	2104      	movs	r1, #4
 800f550:	4620      	mov	r0, r4
 800f552:	f000 ff4f 	bl	80103f4 <_calloc_r>
 800f556:	69e3      	ldr	r3, [r4, #28]
 800f558:	60f0      	str	r0, [r6, #12]
 800f55a:	68db      	ldr	r3, [r3, #12]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d1e4      	bne.n	800f52a <_Balloc+0x2e>
 800f560:	2000      	movs	r0, #0
 800f562:	bd70      	pop	{r4, r5, r6, pc}
 800f564:	6802      	ldr	r2, [r0, #0]
 800f566:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f56a:	2300      	movs	r3, #0
 800f56c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f570:	e7f7      	b.n	800f562 <_Balloc+0x66>
 800f572:	bf00      	nop
 800f574:	08010cb5 	.word	0x08010cb5
 800f578:	08010d35 	.word	0x08010d35

0800f57c <_Bfree>:
 800f57c:	b570      	push	{r4, r5, r6, lr}
 800f57e:	69c6      	ldr	r6, [r0, #28]
 800f580:	4605      	mov	r5, r0
 800f582:	460c      	mov	r4, r1
 800f584:	b976      	cbnz	r6, 800f5a4 <_Bfree+0x28>
 800f586:	2010      	movs	r0, #16
 800f588:	f7fe f92a 	bl	800d7e0 <malloc>
 800f58c:	4602      	mov	r2, r0
 800f58e:	61e8      	str	r0, [r5, #28]
 800f590:	b920      	cbnz	r0, 800f59c <_Bfree+0x20>
 800f592:	4b09      	ldr	r3, [pc, #36]	@ (800f5b8 <_Bfree+0x3c>)
 800f594:	4809      	ldr	r0, [pc, #36]	@ (800f5bc <_Bfree+0x40>)
 800f596:	218f      	movs	r1, #143	@ 0x8f
 800f598:	f000 ff0e 	bl	80103b8 <__assert_func>
 800f59c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f5a0:	6006      	str	r6, [r0, #0]
 800f5a2:	60c6      	str	r6, [r0, #12]
 800f5a4:	b13c      	cbz	r4, 800f5b6 <_Bfree+0x3a>
 800f5a6:	69eb      	ldr	r3, [r5, #28]
 800f5a8:	6862      	ldr	r2, [r4, #4]
 800f5aa:	68db      	ldr	r3, [r3, #12]
 800f5ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f5b0:	6021      	str	r1, [r4, #0]
 800f5b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f5b6:	bd70      	pop	{r4, r5, r6, pc}
 800f5b8:	08010cb5 	.word	0x08010cb5
 800f5bc:	08010d35 	.word	0x08010d35

0800f5c0 <__multadd>:
 800f5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5c4:	690d      	ldr	r5, [r1, #16]
 800f5c6:	4607      	mov	r7, r0
 800f5c8:	460c      	mov	r4, r1
 800f5ca:	461e      	mov	r6, r3
 800f5cc:	f101 0c14 	add.w	ip, r1, #20
 800f5d0:	2000      	movs	r0, #0
 800f5d2:	f8dc 3000 	ldr.w	r3, [ip]
 800f5d6:	b299      	uxth	r1, r3
 800f5d8:	fb02 6101 	mla	r1, r2, r1, r6
 800f5dc:	0c1e      	lsrs	r6, r3, #16
 800f5de:	0c0b      	lsrs	r3, r1, #16
 800f5e0:	fb02 3306 	mla	r3, r2, r6, r3
 800f5e4:	b289      	uxth	r1, r1
 800f5e6:	3001      	adds	r0, #1
 800f5e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f5ec:	4285      	cmp	r5, r0
 800f5ee:	f84c 1b04 	str.w	r1, [ip], #4
 800f5f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f5f6:	dcec      	bgt.n	800f5d2 <__multadd+0x12>
 800f5f8:	b30e      	cbz	r6, 800f63e <__multadd+0x7e>
 800f5fa:	68a3      	ldr	r3, [r4, #8]
 800f5fc:	42ab      	cmp	r3, r5
 800f5fe:	dc19      	bgt.n	800f634 <__multadd+0x74>
 800f600:	6861      	ldr	r1, [r4, #4]
 800f602:	4638      	mov	r0, r7
 800f604:	3101      	adds	r1, #1
 800f606:	f7ff ff79 	bl	800f4fc <_Balloc>
 800f60a:	4680      	mov	r8, r0
 800f60c:	b928      	cbnz	r0, 800f61a <__multadd+0x5a>
 800f60e:	4602      	mov	r2, r0
 800f610:	4b0c      	ldr	r3, [pc, #48]	@ (800f644 <__multadd+0x84>)
 800f612:	480d      	ldr	r0, [pc, #52]	@ (800f648 <__multadd+0x88>)
 800f614:	21ba      	movs	r1, #186	@ 0xba
 800f616:	f000 fecf 	bl	80103b8 <__assert_func>
 800f61a:	6922      	ldr	r2, [r4, #16]
 800f61c:	3202      	adds	r2, #2
 800f61e:	f104 010c 	add.w	r1, r4, #12
 800f622:	0092      	lsls	r2, r2, #2
 800f624:	300c      	adds	r0, #12
 800f626:	f7ff f8b6 	bl	800e796 <memcpy>
 800f62a:	4621      	mov	r1, r4
 800f62c:	4638      	mov	r0, r7
 800f62e:	f7ff ffa5 	bl	800f57c <_Bfree>
 800f632:	4644      	mov	r4, r8
 800f634:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f638:	3501      	adds	r5, #1
 800f63a:	615e      	str	r6, [r3, #20]
 800f63c:	6125      	str	r5, [r4, #16]
 800f63e:	4620      	mov	r0, r4
 800f640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f644:	08010d24 	.word	0x08010d24
 800f648:	08010d35 	.word	0x08010d35

0800f64c <__hi0bits>:
 800f64c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f650:	4603      	mov	r3, r0
 800f652:	bf36      	itet	cc
 800f654:	0403      	lslcc	r3, r0, #16
 800f656:	2000      	movcs	r0, #0
 800f658:	2010      	movcc	r0, #16
 800f65a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f65e:	bf3c      	itt	cc
 800f660:	021b      	lslcc	r3, r3, #8
 800f662:	3008      	addcc	r0, #8
 800f664:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f668:	bf3c      	itt	cc
 800f66a:	011b      	lslcc	r3, r3, #4
 800f66c:	3004      	addcc	r0, #4
 800f66e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f672:	bf3c      	itt	cc
 800f674:	009b      	lslcc	r3, r3, #2
 800f676:	3002      	addcc	r0, #2
 800f678:	2b00      	cmp	r3, #0
 800f67a:	db05      	blt.n	800f688 <__hi0bits+0x3c>
 800f67c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f680:	f100 0001 	add.w	r0, r0, #1
 800f684:	bf08      	it	eq
 800f686:	2020      	moveq	r0, #32
 800f688:	4770      	bx	lr

0800f68a <__lo0bits>:
 800f68a:	6803      	ldr	r3, [r0, #0]
 800f68c:	4602      	mov	r2, r0
 800f68e:	f013 0007 	ands.w	r0, r3, #7
 800f692:	d00b      	beq.n	800f6ac <__lo0bits+0x22>
 800f694:	07d9      	lsls	r1, r3, #31
 800f696:	d421      	bmi.n	800f6dc <__lo0bits+0x52>
 800f698:	0798      	lsls	r0, r3, #30
 800f69a:	bf49      	itett	mi
 800f69c:	085b      	lsrmi	r3, r3, #1
 800f69e:	089b      	lsrpl	r3, r3, #2
 800f6a0:	2001      	movmi	r0, #1
 800f6a2:	6013      	strmi	r3, [r2, #0]
 800f6a4:	bf5c      	itt	pl
 800f6a6:	6013      	strpl	r3, [r2, #0]
 800f6a8:	2002      	movpl	r0, #2
 800f6aa:	4770      	bx	lr
 800f6ac:	b299      	uxth	r1, r3
 800f6ae:	b909      	cbnz	r1, 800f6b4 <__lo0bits+0x2a>
 800f6b0:	0c1b      	lsrs	r3, r3, #16
 800f6b2:	2010      	movs	r0, #16
 800f6b4:	b2d9      	uxtb	r1, r3
 800f6b6:	b909      	cbnz	r1, 800f6bc <__lo0bits+0x32>
 800f6b8:	3008      	adds	r0, #8
 800f6ba:	0a1b      	lsrs	r3, r3, #8
 800f6bc:	0719      	lsls	r1, r3, #28
 800f6be:	bf04      	itt	eq
 800f6c0:	091b      	lsreq	r3, r3, #4
 800f6c2:	3004      	addeq	r0, #4
 800f6c4:	0799      	lsls	r1, r3, #30
 800f6c6:	bf04      	itt	eq
 800f6c8:	089b      	lsreq	r3, r3, #2
 800f6ca:	3002      	addeq	r0, #2
 800f6cc:	07d9      	lsls	r1, r3, #31
 800f6ce:	d403      	bmi.n	800f6d8 <__lo0bits+0x4e>
 800f6d0:	085b      	lsrs	r3, r3, #1
 800f6d2:	f100 0001 	add.w	r0, r0, #1
 800f6d6:	d003      	beq.n	800f6e0 <__lo0bits+0x56>
 800f6d8:	6013      	str	r3, [r2, #0]
 800f6da:	4770      	bx	lr
 800f6dc:	2000      	movs	r0, #0
 800f6de:	4770      	bx	lr
 800f6e0:	2020      	movs	r0, #32
 800f6e2:	4770      	bx	lr

0800f6e4 <__i2b>:
 800f6e4:	b510      	push	{r4, lr}
 800f6e6:	460c      	mov	r4, r1
 800f6e8:	2101      	movs	r1, #1
 800f6ea:	f7ff ff07 	bl	800f4fc <_Balloc>
 800f6ee:	4602      	mov	r2, r0
 800f6f0:	b928      	cbnz	r0, 800f6fe <__i2b+0x1a>
 800f6f2:	4b05      	ldr	r3, [pc, #20]	@ (800f708 <__i2b+0x24>)
 800f6f4:	4805      	ldr	r0, [pc, #20]	@ (800f70c <__i2b+0x28>)
 800f6f6:	f240 1145 	movw	r1, #325	@ 0x145
 800f6fa:	f000 fe5d 	bl	80103b8 <__assert_func>
 800f6fe:	2301      	movs	r3, #1
 800f700:	6144      	str	r4, [r0, #20]
 800f702:	6103      	str	r3, [r0, #16]
 800f704:	bd10      	pop	{r4, pc}
 800f706:	bf00      	nop
 800f708:	08010d24 	.word	0x08010d24
 800f70c:	08010d35 	.word	0x08010d35

0800f710 <__multiply>:
 800f710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f714:	4617      	mov	r7, r2
 800f716:	690a      	ldr	r2, [r1, #16]
 800f718:	693b      	ldr	r3, [r7, #16]
 800f71a:	429a      	cmp	r2, r3
 800f71c:	bfa8      	it	ge
 800f71e:	463b      	movge	r3, r7
 800f720:	4689      	mov	r9, r1
 800f722:	bfa4      	itt	ge
 800f724:	460f      	movge	r7, r1
 800f726:	4699      	movge	r9, r3
 800f728:	693d      	ldr	r5, [r7, #16]
 800f72a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f72e:	68bb      	ldr	r3, [r7, #8]
 800f730:	6879      	ldr	r1, [r7, #4]
 800f732:	eb05 060a 	add.w	r6, r5, sl
 800f736:	42b3      	cmp	r3, r6
 800f738:	b085      	sub	sp, #20
 800f73a:	bfb8      	it	lt
 800f73c:	3101      	addlt	r1, #1
 800f73e:	f7ff fedd 	bl	800f4fc <_Balloc>
 800f742:	b930      	cbnz	r0, 800f752 <__multiply+0x42>
 800f744:	4602      	mov	r2, r0
 800f746:	4b41      	ldr	r3, [pc, #260]	@ (800f84c <__multiply+0x13c>)
 800f748:	4841      	ldr	r0, [pc, #260]	@ (800f850 <__multiply+0x140>)
 800f74a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f74e:	f000 fe33 	bl	80103b8 <__assert_func>
 800f752:	f100 0414 	add.w	r4, r0, #20
 800f756:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800f75a:	4623      	mov	r3, r4
 800f75c:	2200      	movs	r2, #0
 800f75e:	4573      	cmp	r3, lr
 800f760:	d320      	bcc.n	800f7a4 <__multiply+0x94>
 800f762:	f107 0814 	add.w	r8, r7, #20
 800f766:	f109 0114 	add.w	r1, r9, #20
 800f76a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800f76e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800f772:	9302      	str	r3, [sp, #8]
 800f774:	1beb      	subs	r3, r5, r7
 800f776:	3b15      	subs	r3, #21
 800f778:	f023 0303 	bic.w	r3, r3, #3
 800f77c:	3304      	adds	r3, #4
 800f77e:	3715      	adds	r7, #21
 800f780:	42bd      	cmp	r5, r7
 800f782:	bf38      	it	cc
 800f784:	2304      	movcc	r3, #4
 800f786:	9301      	str	r3, [sp, #4]
 800f788:	9b02      	ldr	r3, [sp, #8]
 800f78a:	9103      	str	r1, [sp, #12]
 800f78c:	428b      	cmp	r3, r1
 800f78e:	d80c      	bhi.n	800f7aa <__multiply+0x9a>
 800f790:	2e00      	cmp	r6, #0
 800f792:	dd03      	ble.n	800f79c <__multiply+0x8c>
 800f794:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d055      	beq.n	800f848 <__multiply+0x138>
 800f79c:	6106      	str	r6, [r0, #16]
 800f79e:	b005      	add	sp, #20
 800f7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7a4:	f843 2b04 	str.w	r2, [r3], #4
 800f7a8:	e7d9      	b.n	800f75e <__multiply+0x4e>
 800f7aa:	f8b1 a000 	ldrh.w	sl, [r1]
 800f7ae:	f1ba 0f00 	cmp.w	sl, #0
 800f7b2:	d01f      	beq.n	800f7f4 <__multiply+0xe4>
 800f7b4:	46c4      	mov	ip, r8
 800f7b6:	46a1      	mov	r9, r4
 800f7b8:	2700      	movs	r7, #0
 800f7ba:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f7be:	f8d9 3000 	ldr.w	r3, [r9]
 800f7c2:	fa1f fb82 	uxth.w	fp, r2
 800f7c6:	b29b      	uxth	r3, r3
 800f7c8:	fb0a 330b 	mla	r3, sl, fp, r3
 800f7cc:	443b      	add	r3, r7
 800f7ce:	f8d9 7000 	ldr.w	r7, [r9]
 800f7d2:	0c12      	lsrs	r2, r2, #16
 800f7d4:	0c3f      	lsrs	r7, r7, #16
 800f7d6:	fb0a 7202 	mla	r2, sl, r2, r7
 800f7da:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800f7de:	b29b      	uxth	r3, r3
 800f7e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f7e4:	4565      	cmp	r5, ip
 800f7e6:	f849 3b04 	str.w	r3, [r9], #4
 800f7ea:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800f7ee:	d8e4      	bhi.n	800f7ba <__multiply+0xaa>
 800f7f0:	9b01      	ldr	r3, [sp, #4]
 800f7f2:	50e7      	str	r7, [r4, r3]
 800f7f4:	9b03      	ldr	r3, [sp, #12]
 800f7f6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f7fa:	3104      	adds	r1, #4
 800f7fc:	f1b9 0f00 	cmp.w	r9, #0
 800f800:	d020      	beq.n	800f844 <__multiply+0x134>
 800f802:	6823      	ldr	r3, [r4, #0]
 800f804:	4647      	mov	r7, r8
 800f806:	46a4      	mov	ip, r4
 800f808:	f04f 0a00 	mov.w	sl, #0
 800f80c:	f8b7 b000 	ldrh.w	fp, [r7]
 800f810:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800f814:	fb09 220b 	mla	r2, r9, fp, r2
 800f818:	4452      	add	r2, sl
 800f81a:	b29b      	uxth	r3, r3
 800f81c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f820:	f84c 3b04 	str.w	r3, [ip], #4
 800f824:	f857 3b04 	ldr.w	r3, [r7], #4
 800f828:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f82c:	f8bc 3000 	ldrh.w	r3, [ip]
 800f830:	fb09 330a 	mla	r3, r9, sl, r3
 800f834:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800f838:	42bd      	cmp	r5, r7
 800f83a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f83e:	d8e5      	bhi.n	800f80c <__multiply+0xfc>
 800f840:	9a01      	ldr	r2, [sp, #4]
 800f842:	50a3      	str	r3, [r4, r2]
 800f844:	3404      	adds	r4, #4
 800f846:	e79f      	b.n	800f788 <__multiply+0x78>
 800f848:	3e01      	subs	r6, #1
 800f84a:	e7a1      	b.n	800f790 <__multiply+0x80>
 800f84c:	08010d24 	.word	0x08010d24
 800f850:	08010d35 	.word	0x08010d35

0800f854 <__pow5mult>:
 800f854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f858:	4615      	mov	r5, r2
 800f85a:	f012 0203 	ands.w	r2, r2, #3
 800f85e:	4607      	mov	r7, r0
 800f860:	460e      	mov	r6, r1
 800f862:	d007      	beq.n	800f874 <__pow5mult+0x20>
 800f864:	4c25      	ldr	r4, [pc, #148]	@ (800f8fc <__pow5mult+0xa8>)
 800f866:	3a01      	subs	r2, #1
 800f868:	2300      	movs	r3, #0
 800f86a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f86e:	f7ff fea7 	bl	800f5c0 <__multadd>
 800f872:	4606      	mov	r6, r0
 800f874:	10ad      	asrs	r5, r5, #2
 800f876:	d03d      	beq.n	800f8f4 <__pow5mult+0xa0>
 800f878:	69fc      	ldr	r4, [r7, #28]
 800f87a:	b97c      	cbnz	r4, 800f89c <__pow5mult+0x48>
 800f87c:	2010      	movs	r0, #16
 800f87e:	f7fd ffaf 	bl	800d7e0 <malloc>
 800f882:	4602      	mov	r2, r0
 800f884:	61f8      	str	r0, [r7, #28]
 800f886:	b928      	cbnz	r0, 800f894 <__pow5mult+0x40>
 800f888:	4b1d      	ldr	r3, [pc, #116]	@ (800f900 <__pow5mult+0xac>)
 800f88a:	481e      	ldr	r0, [pc, #120]	@ (800f904 <__pow5mult+0xb0>)
 800f88c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f890:	f000 fd92 	bl	80103b8 <__assert_func>
 800f894:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f898:	6004      	str	r4, [r0, #0]
 800f89a:	60c4      	str	r4, [r0, #12]
 800f89c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f8a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f8a4:	b94c      	cbnz	r4, 800f8ba <__pow5mult+0x66>
 800f8a6:	f240 2171 	movw	r1, #625	@ 0x271
 800f8aa:	4638      	mov	r0, r7
 800f8ac:	f7ff ff1a 	bl	800f6e4 <__i2b>
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	f8c8 0008 	str.w	r0, [r8, #8]
 800f8b6:	4604      	mov	r4, r0
 800f8b8:	6003      	str	r3, [r0, #0]
 800f8ba:	f04f 0900 	mov.w	r9, #0
 800f8be:	07eb      	lsls	r3, r5, #31
 800f8c0:	d50a      	bpl.n	800f8d8 <__pow5mult+0x84>
 800f8c2:	4631      	mov	r1, r6
 800f8c4:	4622      	mov	r2, r4
 800f8c6:	4638      	mov	r0, r7
 800f8c8:	f7ff ff22 	bl	800f710 <__multiply>
 800f8cc:	4631      	mov	r1, r6
 800f8ce:	4680      	mov	r8, r0
 800f8d0:	4638      	mov	r0, r7
 800f8d2:	f7ff fe53 	bl	800f57c <_Bfree>
 800f8d6:	4646      	mov	r6, r8
 800f8d8:	106d      	asrs	r5, r5, #1
 800f8da:	d00b      	beq.n	800f8f4 <__pow5mult+0xa0>
 800f8dc:	6820      	ldr	r0, [r4, #0]
 800f8de:	b938      	cbnz	r0, 800f8f0 <__pow5mult+0x9c>
 800f8e0:	4622      	mov	r2, r4
 800f8e2:	4621      	mov	r1, r4
 800f8e4:	4638      	mov	r0, r7
 800f8e6:	f7ff ff13 	bl	800f710 <__multiply>
 800f8ea:	6020      	str	r0, [r4, #0]
 800f8ec:	f8c0 9000 	str.w	r9, [r0]
 800f8f0:	4604      	mov	r4, r0
 800f8f2:	e7e4      	b.n	800f8be <__pow5mult+0x6a>
 800f8f4:	4630      	mov	r0, r6
 800f8f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8fa:	bf00      	nop
 800f8fc:	08010de8 	.word	0x08010de8
 800f900:	08010cb5 	.word	0x08010cb5
 800f904:	08010d35 	.word	0x08010d35

0800f908 <__lshift>:
 800f908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f90c:	460c      	mov	r4, r1
 800f90e:	6849      	ldr	r1, [r1, #4]
 800f910:	6923      	ldr	r3, [r4, #16]
 800f912:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f916:	68a3      	ldr	r3, [r4, #8]
 800f918:	4607      	mov	r7, r0
 800f91a:	4691      	mov	r9, r2
 800f91c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f920:	f108 0601 	add.w	r6, r8, #1
 800f924:	42b3      	cmp	r3, r6
 800f926:	db0b      	blt.n	800f940 <__lshift+0x38>
 800f928:	4638      	mov	r0, r7
 800f92a:	f7ff fde7 	bl	800f4fc <_Balloc>
 800f92e:	4605      	mov	r5, r0
 800f930:	b948      	cbnz	r0, 800f946 <__lshift+0x3e>
 800f932:	4602      	mov	r2, r0
 800f934:	4b28      	ldr	r3, [pc, #160]	@ (800f9d8 <__lshift+0xd0>)
 800f936:	4829      	ldr	r0, [pc, #164]	@ (800f9dc <__lshift+0xd4>)
 800f938:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f93c:	f000 fd3c 	bl	80103b8 <__assert_func>
 800f940:	3101      	adds	r1, #1
 800f942:	005b      	lsls	r3, r3, #1
 800f944:	e7ee      	b.n	800f924 <__lshift+0x1c>
 800f946:	2300      	movs	r3, #0
 800f948:	f100 0114 	add.w	r1, r0, #20
 800f94c:	f100 0210 	add.w	r2, r0, #16
 800f950:	4618      	mov	r0, r3
 800f952:	4553      	cmp	r3, sl
 800f954:	db33      	blt.n	800f9be <__lshift+0xb6>
 800f956:	6920      	ldr	r0, [r4, #16]
 800f958:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f95c:	f104 0314 	add.w	r3, r4, #20
 800f960:	f019 091f 	ands.w	r9, r9, #31
 800f964:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f968:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f96c:	d02b      	beq.n	800f9c6 <__lshift+0xbe>
 800f96e:	f1c9 0e20 	rsb	lr, r9, #32
 800f972:	468a      	mov	sl, r1
 800f974:	2200      	movs	r2, #0
 800f976:	6818      	ldr	r0, [r3, #0]
 800f978:	fa00 f009 	lsl.w	r0, r0, r9
 800f97c:	4310      	orrs	r0, r2
 800f97e:	f84a 0b04 	str.w	r0, [sl], #4
 800f982:	f853 2b04 	ldr.w	r2, [r3], #4
 800f986:	459c      	cmp	ip, r3
 800f988:	fa22 f20e 	lsr.w	r2, r2, lr
 800f98c:	d8f3      	bhi.n	800f976 <__lshift+0x6e>
 800f98e:	ebac 0304 	sub.w	r3, ip, r4
 800f992:	3b15      	subs	r3, #21
 800f994:	f023 0303 	bic.w	r3, r3, #3
 800f998:	3304      	adds	r3, #4
 800f99a:	f104 0015 	add.w	r0, r4, #21
 800f99e:	4560      	cmp	r0, ip
 800f9a0:	bf88      	it	hi
 800f9a2:	2304      	movhi	r3, #4
 800f9a4:	50ca      	str	r2, [r1, r3]
 800f9a6:	b10a      	cbz	r2, 800f9ac <__lshift+0xa4>
 800f9a8:	f108 0602 	add.w	r6, r8, #2
 800f9ac:	3e01      	subs	r6, #1
 800f9ae:	4638      	mov	r0, r7
 800f9b0:	612e      	str	r6, [r5, #16]
 800f9b2:	4621      	mov	r1, r4
 800f9b4:	f7ff fde2 	bl	800f57c <_Bfree>
 800f9b8:	4628      	mov	r0, r5
 800f9ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9be:	f842 0f04 	str.w	r0, [r2, #4]!
 800f9c2:	3301      	adds	r3, #1
 800f9c4:	e7c5      	b.n	800f952 <__lshift+0x4a>
 800f9c6:	3904      	subs	r1, #4
 800f9c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9cc:	f841 2f04 	str.w	r2, [r1, #4]!
 800f9d0:	459c      	cmp	ip, r3
 800f9d2:	d8f9      	bhi.n	800f9c8 <__lshift+0xc0>
 800f9d4:	e7ea      	b.n	800f9ac <__lshift+0xa4>
 800f9d6:	bf00      	nop
 800f9d8:	08010d24 	.word	0x08010d24
 800f9dc:	08010d35 	.word	0x08010d35

0800f9e0 <__mcmp>:
 800f9e0:	690a      	ldr	r2, [r1, #16]
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	6900      	ldr	r0, [r0, #16]
 800f9e6:	1a80      	subs	r0, r0, r2
 800f9e8:	b530      	push	{r4, r5, lr}
 800f9ea:	d10e      	bne.n	800fa0a <__mcmp+0x2a>
 800f9ec:	3314      	adds	r3, #20
 800f9ee:	3114      	adds	r1, #20
 800f9f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f9f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f9f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f9fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fa00:	4295      	cmp	r5, r2
 800fa02:	d003      	beq.n	800fa0c <__mcmp+0x2c>
 800fa04:	d205      	bcs.n	800fa12 <__mcmp+0x32>
 800fa06:	f04f 30ff 	mov.w	r0, #4294967295
 800fa0a:	bd30      	pop	{r4, r5, pc}
 800fa0c:	42a3      	cmp	r3, r4
 800fa0e:	d3f3      	bcc.n	800f9f8 <__mcmp+0x18>
 800fa10:	e7fb      	b.n	800fa0a <__mcmp+0x2a>
 800fa12:	2001      	movs	r0, #1
 800fa14:	e7f9      	b.n	800fa0a <__mcmp+0x2a>
	...

0800fa18 <__mdiff>:
 800fa18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa1c:	4689      	mov	r9, r1
 800fa1e:	4606      	mov	r6, r0
 800fa20:	4611      	mov	r1, r2
 800fa22:	4648      	mov	r0, r9
 800fa24:	4614      	mov	r4, r2
 800fa26:	f7ff ffdb 	bl	800f9e0 <__mcmp>
 800fa2a:	1e05      	subs	r5, r0, #0
 800fa2c:	d112      	bne.n	800fa54 <__mdiff+0x3c>
 800fa2e:	4629      	mov	r1, r5
 800fa30:	4630      	mov	r0, r6
 800fa32:	f7ff fd63 	bl	800f4fc <_Balloc>
 800fa36:	4602      	mov	r2, r0
 800fa38:	b928      	cbnz	r0, 800fa46 <__mdiff+0x2e>
 800fa3a:	4b3f      	ldr	r3, [pc, #252]	@ (800fb38 <__mdiff+0x120>)
 800fa3c:	f240 2137 	movw	r1, #567	@ 0x237
 800fa40:	483e      	ldr	r0, [pc, #248]	@ (800fb3c <__mdiff+0x124>)
 800fa42:	f000 fcb9 	bl	80103b8 <__assert_func>
 800fa46:	2301      	movs	r3, #1
 800fa48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fa4c:	4610      	mov	r0, r2
 800fa4e:	b003      	add	sp, #12
 800fa50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa54:	bfbc      	itt	lt
 800fa56:	464b      	movlt	r3, r9
 800fa58:	46a1      	movlt	r9, r4
 800fa5a:	4630      	mov	r0, r6
 800fa5c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fa60:	bfba      	itte	lt
 800fa62:	461c      	movlt	r4, r3
 800fa64:	2501      	movlt	r5, #1
 800fa66:	2500      	movge	r5, #0
 800fa68:	f7ff fd48 	bl	800f4fc <_Balloc>
 800fa6c:	4602      	mov	r2, r0
 800fa6e:	b918      	cbnz	r0, 800fa78 <__mdiff+0x60>
 800fa70:	4b31      	ldr	r3, [pc, #196]	@ (800fb38 <__mdiff+0x120>)
 800fa72:	f240 2145 	movw	r1, #581	@ 0x245
 800fa76:	e7e3      	b.n	800fa40 <__mdiff+0x28>
 800fa78:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fa7c:	6926      	ldr	r6, [r4, #16]
 800fa7e:	60c5      	str	r5, [r0, #12]
 800fa80:	f109 0310 	add.w	r3, r9, #16
 800fa84:	f109 0514 	add.w	r5, r9, #20
 800fa88:	f104 0e14 	add.w	lr, r4, #20
 800fa8c:	f100 0b14 	add.w	fp, r0, #20
 800fa90:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fa94:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fa98:	9301      	str	r3, [sp, #4]
 800fa9a:	46d9      	mov	r9, fp
 800fa9c:	f04f 0c00 	mov.w	ip, #0
 800faa0:	9b01      	ldr	r3, [sp, #4]
 800faa2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800faa6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800faaa:	9301      	str	r3, [sp, #4]
 800faac:	fa1f f38a 	uxth.w	r3, sl
 800fab0:	4619      	mov	r1, r3
 800fab2:	b283      	uxth	r3, r0
 800fab4:	1acb      	subs	r3, r1, r3
 800fab6:	0c00      	lsrs	r0, r0, #16
 800fab8:	4463      	add	r3, ip
 800faba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fabe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fac2:	b29b      	uxth	r3, r3
 800fac4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fac8:	4576      	cmp	r6, lr
 800faca:	f849 3b04 	str.w	r3, [r9], #4
 800face:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fad2:	d8e5      	bhi.n	800faa0 <__mdiff+0x88>
 800fad4:	1b33      	subs	r3, r6, r4
 800fad6:	3b15      	subs	r3, #21
 800fad8:	f023 0303 	bic.w	r3, r3, #3
 800fadc:	3415      	adds	r4, #21
 800fade:	3304      	adds	r3, #4
 800fae0:	42a6      	cmp	r6, r4
 800fae2:	bf38      	it	cc
 800fae4:	2304      	movcc	r3, #4
 800fae6:	441d      	add	r5, r3
 800fae8:	445b      	add	r3, fp
 800faea:	461e      	mov	r6, r3
 800faec:	462c      	mov	r4, r5
 800faee:	4544      	cmp	r4, r8
 800faf0:	d30e      	bcc.n	800fb10 <__mdiff+0xf8>
 800faf2:	f108 0103 	add.w	r1, r8, #3
 800faf6:	1b49      	subs	r1, r1, r5
 800faf8:	f021 0103 	bic.w	r1, r1, #3
 800fafc:	3d03      	subs	r5, #3
 800fafe:	45a8      	cmp	r8, r5
 800fb00:	bf38      	it	cc
 800fb02:	2100      	movcc	r1, #0
 800fb04:	440b      	add	r3, r1
 800fb06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fb0a:	b191      	cbz	r1, 800fb32 <__mdiff+0x11a>
 800fb0c:	6117      	str	r7, [r2, #16]
 800fb0e:	e79d      	b.n	800fa4c <__mdiff+0x34>
 800fb10:	f854 1b04 	ldr.w	r1, [r4], #4
 800fb14:	46e6      	mov	lr, ip
 800fb16:	0c08      	lsrs	r0, r1, #16
 800fb18:	fa1c fc81 	uxtah	ip, ip, r1
 800fb1c:	4471      	add	r1, lr
 800fb1e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800fb22:	b289      	uxth	r1, r1
 800fb24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fb28:	f846 1b04 	str.w	r1, [r6], #4
 800fb2c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fb30:	e7dd      	b.n	800faee <__mdiff+0xd6>
 800fb32:	3f01      	subs	r7, #1
 800fb34:	e7e7      	b.n	800fb06 <__mdiff+0xee>
 800fb36:	bf00      	nop
 800fb38:	08010d24 	.word	0x08010d24
 800fb3c:	08010d35 	.word	0x08010d35

0800fb40 <__d2b>:
 800fb40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fb44:	460f      	mov	r7, r1
 800fb46:	2101      	movs	r1, #1
 800fb48:	ec59 8b10 	vmov	r8, r9, d0
 800fb4c:	4616      	mov	r6, r2
 800fb4e:	f7ff fcd5 	bl	800f4fc <_Balloc>
 800fb52:	4604      	mov	r4, r0
 800fb54:	b930      	cbnz	r0, 800fb64 <__d2b+0x24>
 800fb56:	4602      	mov	r2, r0
 800fb58:	4b23      	ldr	r3, [pc, #140]	@ (800fbe8 <__d2b+0xa8>)
 800fb5a:	4824      	ldr	r0, [pc, #144]	@ (800fbec <__d2b+0xac>)
 800fb5c:	f240 310f 	movw	r1, #783	@ 0x30f
 800fb60:	f000 fc2a 	bl	80103b8 <__assert_func>
 800fb64:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fb68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fb6c:	b10d      	cbz	r5, 800fb72 <__d2b+0x32>
 800fb6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fb72:	9301      	str	r3, [sp, #4]
 800fb74:	f1b8 0300 	subs.w	r3, r8, #0
 800fb78:	d023      	beq.n	800fbc2 <__d2b+0x82>
 800fb7a:	4668      	mov	r0, sp
 800fb7c:	9300      	str	r3, [sp, #0]
 800fb7e:	f7ff fd84 	bl	800f68a <__lo0bits>
 800fb82:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fb86:	b1d0      	cbz	r0, 800fbbe <__d2b+0x7e>
 800fb88:	f1c0 0320 	rsb	r3, r0, #32
 800fb8c:	fa02 f303 	lsl.w	r3, r2, r3
 800fb90:	430b      	orrs	r3, r1
 800fb92:	40c2      	lsrs	r2, r0
 800fb94:	6163      	str	r3, [r4, #20]
 800fb96:	9201      	str	r2, [sp, #4]
 800fb98:	9b01      	ldr	r3, [sp, #4]
 800fb9a:	61a3      	str	r3, [r4, #24]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	bf0c      	ite	eq
 800fba0:	2201      	moveq	r2, #1
 800fba2:	2202      	movne	r2, #2
 800fba4:	6122      	str	r2, [r4, #16]
 800fba6:	b1a5      	cbz	r5, 800fbd2 <__d2b+0x92>
 800fba8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fbac:	4405      	add	r5, r0
 800fbae:	603d      	str	r5, [r7, #0]
 800fbb0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fbb4:	6030      	str	r0, [r6, #0]
 800fbb6:	4620      	mov	r0, r4
 800fbb8:	b003      	add	sp, #12
 800fbba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbbe:	6161      	str	r1, [r4, #20]
 800fbc0:	e7ea      	b.n	800fb98 <__d2b+0x58>
 800fbc2:	a801      	add	r0, sp, #4
 800fbc4:	f7ff fd61 	bl	800f68a <__lo0bits>
 800fbc8:	9b01      	ldr	r3, [sp, #4]
 800fbca:	6163      	str	r3, [r4, #20]
 800fbcc:	3020      	adds	r0, #32
 800fbce:	2201      	movs	r2, #1
 800fbd0:	e7e8      	b.n	800fba4 <__d2b+0x64>
 800fbd2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fbd6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fbda:	6038      	str	r0, [r7, #0]
 800fbdc:	6918      	ldr	r0, [r3, #16]
 800fbde:	f7ff fd35 	bl	800f64c <__hi0bits>
 800fbe2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fbe6:	e7e5      	b.n	800fbb4 <__d2b+0x74>
 800fbe8:	08010d24 	.word	0x08010d24
 800fbec:	08010d35 	.word	0x08010d35

0800fbf0 <__ssputs_r>:
 800fbf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbf4:	688e      	ldr	r6, [r1, #8]
 800fbf6:	461f      	mov	r7, r3
 800fbf8:	42be      	cmp	r6, r7
 800fbfa:	680b      	ldr	r3, [r1, #0]
 800fbfc:	4682      	mov	sl, r0
 800fbfe:	460c      	mov	r4, r1
 800fc00:	4690      	mov	r8, r2
 800fc02:	d82d      	bhi.n	800fc60 <__ssputs_r+0x70>
 800fc04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fc08:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fc0c:	d026      	beq.n	800fc5c <__ssputs_r+0x6c>
 800fc0e:	6965      	ldr	r5, [r4, #20]
 800fc10:	6909      	ldr	r1, [r1, #16]
 800fc12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc16:	eba3 0901 	sub.w	r9, r3, r1
 800fc1a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fc1e:	1c7b      	adds	r3, r7, #1
 800fc20:	444b      	add	r3, r9
 800fc22:	106d      	asrs	r5, r5, #1
 800fc24:	429d      	cmp	r5, r3
 800fc26:	bf38      	it	cc
 800fc28:	461d      	movcc	r5, r3
 800fc2a:	0553      	lsls	r3, r2, #21
 800fc2c:	d527      	bpl.n	800fc7e <__ssputs_r+0x8e>
 800fc2e:	4629      	mov	r1, r5
 800fc30:	f7fd fe00 	bl	800d834 <_malloc_r>
 800fc34:	4606      	mov	r6, r0
 800fc36:	b360      	cbz	r0, 800fc92 <__ssputs_r+0xa2>
 800fc38:	6921      	ldr	r1, [r4, #16]
 800fc3a:	464a      	mov	r2, r9
 800fc3c:	f7fe fdab 	bl	800e796 <memcpy>
 800fc40:	89a3      	ldrh	r3, [r4, #12]
 800fc42:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fc46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fc4a:	81a3      	strh	r3, [r4, #12]
 800fc4c:	6126      	str	r6, [r4, #16]
 800fc4e:	6165      	str	r5, [r4, #20]
 800fc50:	444e      	add	r6, r9
 800fc52:	eba5 0509 	sub.w	r5, r5, r9
 800fc56:	6026      	str	r6, [r4, #0]
 800fc58:	60a5      	str	r5, [r4, #8]
 800fc5a:	463e      	mov	r6, r7
 800fc5c:	42be      	cmp	r6, r7
 800fc5e:	d900      	bls.n	800fc62 <__ssputs_r+0x72>
 800fc60:	463e      	mov	r6, r7
 800fc62:	6820      	ldr	r0, [r4, #0]
 800fc64:	4632      	mov	r2, r6
 800fc66:	4641      	mov	r1, r8
 800fc68:	f000 fb6a 	bl	8010340 <memmove>
 800fc6c:	68a3      	ldr	r3, [r4, #8]
 800fc6e:	1b9b      	subs	r3, r3, r6
 800fc70:	60a3      	str	r3, [r4, #8]
 800fc72:	6823      	ldr	r3, [r4, #0]
 800fc74:	4433      	add	r3, r6
 800fc76:	6023      	str	r3, [r4, #0]
 800fc78:	2000      	movs	r0, #0
 800fc7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc7e:	462a      	mov	r2, r5
 800fc80:	f000 fbde 	bl	8010440 <_realloc_r>
 800fc84:	4606      	mov	r6, r0
 800fc86:	2800      	cmp	r0, #0
 800fc88:	d1e0      	bne.n	800fc4c <__ssputs_r+0x5c>
 800fc8a:	6921      	ldr	r1, [r4, #16]
 800fc8c:	4650      	mov	r0, sl
 800fc8e:	f7ff fbeb 	bl	800f468 <_free_r>
 800fc92:	230c      	movs	r3, #12
 800fc94:	f8ca 3000 	str.w	r3, [sl]
 800fc98:	89a3      	ldrh	r3, [r4, #12]
 800fc9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fc9e:	81a3      	strh	r3, [r4, #12]
 800fca0:	f04f 30ff 	mov.w	r0, #4294967295
 800fca4:	e7e9      	b.n	800fc7a <__ssputs_r+0x8a>
	...

0800fca8 <_svfiprintf_r>:
 800fca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcac:	4698      	mov	r8, r3
 800fcae:	898b      	ldrh	r3, [r1, #12]
 800fcb0:	061b      	lsls	r3, r3, #24
 800fcb2:	b09d      	sub	sp, #116	@ 0x74
 800fcb4:	4607      	mov	r7, r0
 800fcb6:	460d      	mov	r5, r1
 800fcb8:	4614      	mov	r4, r2
 800fcba:	d510      	bpl.n	800fcde <_svfiprintf_r+0x36>
 800fcbc:	690b      	ldr	r3, [r1, #16]
 800fcbe:	b973      	cbnz	r3, 800fcde <_svfiprintf_r+0x36>
 800fcc0:	2140      	movs	r1, #64	@ 0x40
 800fcc2:	f7fd fdb7 	bl	800d834 <_malloc_r>
 800fcc6:	6028      	str	r0, [r5, #0]
 800fcc8:	6128      	str	r0, [r5, #16]
 800fcca:	b930      	cbnz	r0, 800fcda <_svfiprintf_r+0x32>
 800fccc:	230c      	movs	r3, #12
 800fcce:	603b      	str	r3, [r7, #0]
 800fcd0:	f04f 30ff 	mov.w	r0, #4294967295
 800fcd4:	b01d      	add	sp, #116	@ 0x74
 800fcd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcda:	2340      	movs	r3, #64	@ 0x40
 800fcdc:	616b      	str	r3, [r5, #20]
 800fcde:	2300      	movs	r3, #0
 800fce0:	9309      	str	r3, [sp, #36]	@ 0x24
 800fce2:	2320      	movs	r3, #32
 800fce4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fce8:	f8cd 800c 	str.w	r8, [sp, #12]
 800fcec:	2330      	movs	r3, #48	@ 0x30
 800fcee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fe8c <_svfiprintf_r+0x1e4>
 800fcf2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fcf6:	f04f 0901 	mov.w	r9, #1
 800fcfa:	4623      	mov	r3, r4
 800fcfc:	469a      	mov	sl, r3
 800fcfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd02:	b10a      	cbz	r2, 800fd08 <_svfiprintf_r+0x60>
 800fd04:	2a25      	cmp	r2, #37	@ 0x25
 800fd06:	d1f9      	bne.n	800fcfc <_svfiprintf_r+0x54>
 800fd08:	ebba 0b04 	subs.w	fp, sl, r4
 800fd0c:	d00b      	beq.n	800fd26 <_svfiprintf_r+0x7e>
 800fd0e:	465b      	mov	r3, fp
 800fd10:	4622      	mov	r2, r4
 800fd12:	4629      	mov	r1, r5
 800fd14:	4638      	mov	r0, r7
 800fd16:	f7ff ff6b 	bl	800fbf0 <__ssputs_r>
 800fd1a:	3001      	adds	r0, #1
 800fd1c:	f000 80a7 	beq.w	800fe6e <_svfiprintf_r+0x1c6>
 800fd20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fd22:	445a      	add	r2, fp
 800fd24:	9209      	str	r2, [sp, #36]	@ 0x24
 800fd26:	f89a 3000 	ldrb.w	r3, [sl]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	f000 809f 	beq.w	800fe6e <_svfiprintf_r+0x1c6>
 800fd30:	2300      	movs	r3, #0
 800fd32:	f04f 32ff 	mov.w	r2, #4294967295
 800fd36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd3a:	f10a 0a01 	add.w	sl, sl, #1
 800fd3e:	9304      	str	r3, [sp, #16]
 800fd40:	9307      	str	r3, [sp, #28]
 800fd42:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fd46:	931a      	str	r3, [sp, #104]	@ 0x68
 800fd48:	4654      	mov	r4, sl
 800fd4a:	2205      	movs	r2, #5
 800fd4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd50:	484e      	ldr	r0, [pc, #312]	@ (800fe8c <_svfiprintf_r+0x1e4>)
 800fd52:	f7f0 fa4d 	bl	80001f0 <memchr>
 800fd56:	9a04      	ldr	r2, [sp, #16]
 800fd58:	b9d8      	cbnz	r0, 800fd92 <_svfiprintf_r+0xea>
 800fd5a:	06d0      	lsls	r0, r2, #27
 800fd5c:	bf44      	itt	mi
 800fd5e:	2320      	movmi	r3, #32
 800fd60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fd64:	0711      	lsls	r1, r2, #28
 800fd66:	bf44      	itt	mi
 800fd68:	232b      	movmi	r3, #43	@ 0x2b
 800fd6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fd6e:	f89a 3000 	ldrb.w	r3, [sl]
 800fd72:	2b2a      	cmp	r3, #42	@ 0x2a
 800fd74:	d015      	beq.n	800fda2 <_svfiprintf_r+0xfa>
 800fd76:	9a07      	ldr	r2, [sp, #28]
 800fd78:	4654      	mov	r4, sl
 800fd7a:	2000      	movs	r0, #0
 800fd7c:	f04f 0c0a 	mov.w	ip, #10
 800fd80:	4621      	mov	r1, r4
 800fd82:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd86:	3b30      	subs	r3, #48	@ 0x30
 800fd88:	2b09      	cmp	r3, #9
 800fd8a:	d94b      	bls.n	800fe24 <_svfiprintf_r+0x17c>
 800fd8c:	b1b0      	cbz	r0, 800fdbc <_svfiprintf_r+0x114>
 800fd8e:	9207      	str	r2, [sp, #28]
 800fd90:	e014      	b.n	800fdbc <_svfiprintf_r+0x114>
 800fd92:	eba0 0308 	sub.w	r3, r0, r8
 800fd96:	fa09 f303 	lsl.w	r3, r9, r3
 800fd9a:	4313      	orrs	r3, r2
 800fd9c:	9304      	str	r3, [sp, #16]
 800fd9e:	46a2      	mov	sl, r4
 800fda0:	e7d2      	b.n	800fd48 <_svfiprintf_r+0xa0>
 800fda2:	9b03      	ldr	r3, [sp, #12]
 800fda4:	1d19      	adds	r1, r3, #4
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	9103      	str	r1, [sp, #12]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	bfbb      	ittet	lt
 800fdae:	425b      	neglt	r3, r3
 800fdb0:	f042 0202 	orrlt.w	r2, r2, #2
 800fdb4:	9307      	strge	r3, [sp, #28]
 800fdb6:	9307      	strlt	r3, [sp, #28]
 800fdb8:	bfb8      	it	lt
 800fdba:	9204      	strlt	r2, [sp, #16]
 800fdbc:	7823      	ldrb	r3, [r4, #0]
 800fdbe:	2b2e      	cmp	r3, #46	@ 0x2e
 800fdc0:	d10a      	bne.n	800fdd8 <_svfiprintf_r+0x130>
 800fdc2:	7863      	ldrb	r3, [r4, #1]
 800fdc4:	2b2a      	cmp	r3, #42	@ 0x2a
 800fdc6:	d132      	bne.n	800fe2e <_svfiprintf_r+0x186>
 800fdc8:	9b03      	ldr	r3, [sp, #12]
 800fdca:	1d1a      	adds	r2, r3, #4
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	9203      	str	r2, [sp, #12]
 800fdd0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fdd4:	3402      	adds	r4, #2
 800fdd6:	9305      	str	r3, [sp, #20]
 800fdd8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fe9c <_svfiprintf_r+0x1f4>
 800fddc:	7821      	ldrb	r1, [r4, #0]
 800fdde:	2203      	movs	r2, #3
 800fde0:	4650      	mov	r0, sl
 800fde2:	f7f0 fa05 	bl	80001f0 <memchr>
 800fde6:	b138      	cbz	r0, 800fdf8 <_svfiprintf_r+0x150>
 800fde8:	9b04      	ldr	r3, [sp, #16]
 800fdea:	eba0 000a 	sub.w	r0, r0, sl
 800fdee:	2240      	movs	r2, #64	@ 0x40
 800fdf0:	4082      	lsls	r2, r0
 800fdf2:	4313      	orrs	r3, r2
 800fdf4:	3401      	adds	r4, #1
 800fdf6:	9304      	str	r3, [sp, #16]
 800fdf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdfc:	4824      	ldr	r0, [pc, #144]	@ (800fe90 <_svfiprintf_r+0x1e8>)
 800fdfe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fe02:	2206      	movs	r2, #6
 800fe04:	f7f0 f9f4 	bl	80001f0 <memchr>
 800fe08:	2800      	cmp	r0, #0
 800fe0a:	d036      	beq.n	800fe7a <_svfiprintf_r+0x1d2>
 800fe0c:	4b21      	ldr	r3, [pc, #132]	@ (800fe94 <_svfiprintf_r+0x1ec>)
 800fe0e:	bb1b      	cbnz	r3, 800fe58 <_svfiprintf_r+0x1b0>
 800fe10:	9b03      	ldr	r3, [sp, #12]
 800fe12:	3307      	adds	r3, #7
 800fe14:	f023 0307 	bic.w	r3, r3, #7
 800fe18:	3308      	adds	r3, #8
 800fe1a:	9303      	str	r3, [sp, #12]
 800fe1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe1e:	4433      	add	r3, r6
 800fe20:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe22:	e76a      	b.n	800fcfa <_svfiprintf_r+0x52>
 800fe24:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe28:	460c      	mov	r4, r1
 800fe2a:	2001      	movs	r0, #1
 800fe2c:	e7a8      	b.n	800fd80 <_svfiprintf_r+0xd8>
 800fe2e:	2300      	movs	r3, #0
 800fe30:	3401      	adds	r4, #1
 800fe32:	9305      	str	r3, [sp, #20]
 800fe34:	4619      	mov	r1, r3
 800fe36:	f04f 0c0a 	mov.w	ip, #10
 800fe3a:	4620      	mov	r0, r4
 800fe3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe40:	3a30      	subs	r2, #48	@ 0x30
 800fe42:	2a09      	cmp	r2, #9
 800fe44:	d903      	bls.n	800fe4e <_svfiprintf_r+0x1a6>
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d0c6      	beq.n	800fdd8 <_svfiprintf_r+0x130>
 800fe4a:	9105      	str	r1, [sp, #20]
 800fe4c:	e7c4      	b.n	800fdd8 <_svfiprintf_r+0x130>
 800fe4e:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe52:	4604      	mov	r4, r0
 800fe54:	2301      	movs	r3, #1
 800fe56:	e7f0      	b.n	800fe3a <_svfiprintf_r+0x192>
 800fe58:	ab03      	add	r3, sp, #12
 800fe5a:	9300      	str	r3, [sp, #0]
 800fe5c:	462a      	mov	r2, r5
 800fe5e:	4b0e      	ldr	r3, [pc, #56]	@ (800fe98 <_svfiprintf_r+0x1f0>)
 800fe60:	a904      	add	r1, sp, #16
 800fe62:	4638      	mov	r0, r7
 800fe64:	f7fd fe12 	bl	800da8c <_printf_float>
 800fe68:	1c42      	adds	r2, r0, #1
 800fe6a:	4606      	mov	r6, r0
 800fe6c:	d1d6      	bne.n	800fe1c <_svfiprintf_r+0x174>
 800fe6e:	89ab      	ldrh	r3, [r5, #12]
 800fe70:	065b      	lsls	r3, r3, #25
 800fe72:	f53f af2d 	bmi.w	800fcd0 <_svfiprintf_r+0x28>
 800fe76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fe78:	e72c      	b.n	800fcd4 <_svfiprintf_r+0x2c>
 800fe7a:	ab03      	add	r3, sp, #12
 800fe7c:	9300      	str	r3, [sp, #0]
 800fe7e:	462a      	mov	r2, r5
 800fe80:	4b05      	ldr	r3, [pc, #20]	@ (800fe98 <_svfiprintf_r+0x1f0>)
 800fe82:	a904      	add	r1, sp, #16
 800fe84:	4638      	mov	r0, r7
 800fe86:	f7fe f899 	bl	800dfbc <_printf_i>
 800fe8a:	e7ed      	b.n	800fe68 <_svfiprintf_r+0x1c0>
 800fe8c:	08010d8e 	.word	0x08010d8e
 800fe90:	08010d98 	.word	0x08010d98
 800fe94:	0800da8d 	.word	0x0800da8d
 800fe98:	0800fbf1 	.word	0x0800fbf1
 800fe9c:	08010d94 	.word	0x08010d94

0800fea0 <__sfputc_r>:
 800fea0:	6893      	ldr	r3, [r2, #8]
 800fea2:	3b01      	subs	r3, #1
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	b410      	push	{r4}
 800fea8:	6093      	str	r3, [r2, #8]
 800feaa:	da08      	bge.n	800febe <__sfputc_r+0x1e>
 800feac:	6994      	ldr	r4, [r2, #24]
 800feae:	42a3      	cmp	r3, r4
 800feb0:	db01      	blt.n	800feb6 <__sfputc_r+0x16>
 800feb2:	290a      	cmp	r1, #10
 800feb4:	d103      	bne.n	800febe <__sfputc_r+0x1e>
 800feb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800feba:	f7fe bb48 	b.w	800e54e <__swbuf_r>
 800febe:	6813      	ldr	r3, [r2, #0]
 800fec0:	1c58      	adds	r0, r3, #1
 800fec2:	6010      	str	r0, [r2, #0]
 800fec4:	7019      	strb	r1, [r3, #0]
 800fec6:	4608      	mov	r0, r1
 800fec8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fecc:	4770      	bx	lr

0800fece <__sfputs_r>:
 800fece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fed0:	4606      	mov	r6, r0
 800fed2:	460f      	mov	r7, r1
 800fed4:	4614      	mov	r4, r2
 800fed6:	18d5      	adds	r5, r2, r3
 800fed8:	42ac      	cmp	r4, r5
 800feda:	d101      	bne.n	800fee0 <__sfputs_r+0x12>
 800fedc:	2000      	movs	r0, #0
 800fede:	e007      	b.n	800fef0 <__sfputs_r+0x22>
 800fee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fee4:	463a      	mov	r2, r7
 800fee6:	4630      	mov	r0, r6
 800fee8:	f7ff ffda 	bl	800fea0 <__sfputc_r>
 800feec:	1c43      	adds	r3, r0, #1
 800feee:	d1f3      	bne.n	800fed8 <__sfputs_r+0xa>
 800fef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fef4 <_vfiprintf_r>:
 800fef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fef8:	460d      	mov	r5, r1
 800fefa:	b09d      	sub	sp, #116	@ 0x74
 800fefc:	4614      	mov	r4, r2
 800fefe:	4698      	mov	r8, r3
 800ff00:	4606      	mov	r6, r0
 800ff02:	b118      	cbz	r0, 800ff0c <_vfiprintf_r+0x18>
 800ff04:	6a03      	ldr	r3, [r0, #32]
 800ff06:	b90b      	cbnz	r3, 800ff0c <_vfiprintf_r+0x18>
 800ff08:	f7fe fa02 	bl	800e310 <__sinit>
 800ff0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ff0e:	07d9      	lsls	r1, r3, #31
 800ff10:	d405      	bmi.n	800ff1e <_vfiprintf_r+0x2a>
 800ff12:	89ab      	ldrh	r3, [r5, #12]
 800ff14:	059a      	lsls	r2, r3, #22
 800ff16:	d402      	bmi.n	800ff1e <_vfiprintf_r+0x2a>
 800ff18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ff1a:	f7fe fc3a 	bl	800e792 <__retarget_lock_acquire_recursive>
 800ff1e:	89ab      	ldrh	r3, [r5, #12]
 800ff20:	071b      	lsls	r3, r3, #28
 800ff22:	d501      	bpl.n	800ff28 <_vfiprintf_r+0x34>
 800ff24:	692b      	ldr	r3, [r5, #16]
 800ff26:	b99b      	cbnz	r3, 800ff50 <_vfiprintf_r+0x5c>
 800ff28:	4629      	mov	r1, r5
 800ff2a:	4630      	mov	r0, r6
 800ff2c:	f7fe fb4e 	bl	800e5cc <__swsetup_r>
 800ff30:	b170      	cbz	r0, 800ff50 <_vfiprintf_r+0x5c>
 800ff32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ff34:	07dc      	lsls	r4, r3, #31
 800ff36:	d504      	bpl.n	800ff42 <_vfiprintf_r+0x4e>
 800ff38:	f04f 30ff 	mov.w	r0, #4294967295
 800ff3c:	b01d      	add	sp, #116	@ 0x74
 800ff3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff42:	89ab      	ldrh	r3, [r5, #12]
 800ff44:	0598      	lsls	r0, r3, #22
 800ff46:	d4f7      	bmi.n	800ff38 <_vfiprintf_r+0x44>
 800ff48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ff4a:	f7fe fc23 	bl	800e794 <__retarget_lock_release_recursive>
 800ff4e:	e7f3      	b.n	800ff38 <_vfiprintf_r+0x44>
 800ff50:	2300      	movs	r3, #0
 800ff52:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff54:	2320      	movs	r3, #32
 800ff56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ff5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff5e:	2330      	movs	r3, #48	@ 0x30
 800ff60:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010110 <_vfiprintf_r+0x21c>
 800ff64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ff68:	f04f 0901 	mov.w	r9, #1
 800ff6c:	4623      	mov	r3, r4
 800ff6e:	469a      	mov	sl, r3
 800ff70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff74:	b10a      	cbz	r2, 800ff7a <_vfiprintf_r+0x86>
 800ff76:	2a25      	cmp	r2, #37	@ 0x25
 800ff78:	d1f9      	bne.n	800ff6e <_vfiprintf_r+0x7a>
 800ff7a:	ebba 0b04 	subs.w	fp, sl, r4
 800ff7e:	d00b      	beq.n	800ff98 <_vfiprintf_r+0xa4>
 800ff80:	465b      	mov	r3, fp
 800ff82:	4622      	mov	r2, r4
 800ff84:	4629      	mov	r1, r5
 800ff86:	4630      	mov	r0, r6
 800ff88:	f7ff ffa1 	bl	800fece <__sfputs_r>
 800ff8c:	3001      	adds	r0, #1
 800ff8e:	f000 80a7 	beq.w	80100e0 <_vfiprintf_r+0x1ec>
 800ff92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ff94:	445a      	add	r2, fp
 800ff96:	9209      	str	r2, [sp, #36]	@ 0x24
 800ff98:	f89a 3000 	ldrb.w	r3, [sl]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	f000 809f 	beq.w	80100e0 <_vfiprintf_r+0x1ec>
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	f04f 32ff 	mov.w	r2, #4294967295
 800ffa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ffac:	f10a 0a01 	add.w	sl, sl, #1
 800ffb0:	9304      	str	r3, [sp, #16]
 800ffb2:	9307      	str	r3, [sp, #28]
 800ffb4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ffb8:	931a      	str	r3, [sp, #104]	@ 0x68
 800ffba:	4654      	mov	r4, sl
 800ffbc:	2205      	movs	r2, #5
 800ffbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffc2:	4853      	ldr	r0, [pc, #332]	@ (8010110 <_vfiprintf_r+0x21c>)
 800ffc4:	f7f0 f914 	bl	80001f0 <memchr>
 800ffc8:	9a04      	ldr	r2, [sp, #16]
 800ffca:	b9d8      	cbnz	r0, 8010004 <_vfiprintf_r+0x110>
 800ffcc:	06d1      	lsls	r1, r2, #27
 800ffce:	bf44      	itt	mi
 800ffd0:	2320      	movmi	r3, #32
 800ffd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ffd6:	0713      	lsls	r3, r2, #28
 800ffd8:	bf44      	itt	mi
 800ffda:	232b      	movmi	r3, #43	@ 0x2b
 800ffdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ffe0:	f89a 3000 	ldrb.w	r3, [sl]
 800ffe4:	2b2a      	cmp	r3, #42	@ 0x2a
 800ffe6:	d015      	beq.n	8010014 <_vfiprintf_r+0x120>
 800ffe8:	9a07      	ldr	r2, [sp, #28]
 800ffea:	4654      	mov	r4, sl
 800ffec:	2000      	movs	r0, #0
 800ffee:	f04f 0c0a 	mov.w	ip, #10
 800fff2:	4621      	mov	r1, r4
 800fff4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fff8:	3b30      	subs	r3, #48	@ 0x30
 800fffa:	2b09      	cmp	r3, #9
 800fffc:	d94b      	bls.n	8010096 <_vfiprintf_r+0x1a2>
 800fffe:	b1b0      	cbz	r0, 801002e <_vfiprintf_r+0x13a>
 8010000:	9207      	str	r2, [sp, #28]
 8010002:	e014      	b.n	801002e <_vfiprintf_r+0x13a>
 8010004:	eba0 0308 	sub.w	r3, r0, r8
 8010008:	fa09 f303 	lsl.w	r3, r9, r3
 801000c:	4313      	orrs	r3, r2
 801000e:	9304      	str	r3, [sp, #16]
 8010010:	46a2      	mov	sl, r4
 8010012:	e7d2      	b.n	800ffba <_vfiprintf_r+0xc6>
 8010014:	9b03      	ldr	r3, [sp, #12]
 8010016:	1d19      	adds	r1, r3, #4
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	9103      	str	r1, [sp, #12]
 801001c:	2b00      	cmp	r3, #0
 801001e:	bfbb      	ittet	lt
 8010020:	425b      	neglt	r3, r3
 8010022:	f042 0202 	orrlt.w	r2, r2, #2
 8010026:	9307      	strge	r3, [sp, #28]
 8010028:	9307      	strlt	r3, [sp, #28]
 801002a:	bfb8      	it	lt
 801002c:	9204      	strlt	r2, [sp, #16]
 801002e:	7823      	ldrb	r3, [r4, #0]
 8010030:	2b2e      	cmp	r3, #46	@ 0x2e
 8010032:	d10a      	bne.n	801004a <_vfiprintf_r+0x156>
 8010034:	7863      	ldrb	r3, [r4, #1]
 8010036:	2b2a      	cmp	r3, #42	@ 0x2a
 8010038:	d132      	bne.n	80100a0 <_vfiprintf_r+0x1ac>
 801003a:	9b03      	ldr	r3, [sp, #12]
 801003c:	1d1a      	adds	r2, r3, #4
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	9203      	str	r2, [sp, #12]
 8010042:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010046:	3402      	adds	r4, #2
 8010048:	9305      	str	r3, [sp, #20]
 801004a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010120 <_vfiprintf_r+0x22c>
 801004e:	7821      	ldrb	r1, [r4, #0]
 8010050:	2203      	movs	r2, #3
 8010052:	4650      	mov	r0, sl
 8010054:	f7f0 f8cc 	bl	80001f0 <memchr>
 8010058:	b138      	cbz	r0, 801006a <_vfiprintf_r+0x176>
 801005a:	9b04      	ldr	r3, [sp, #16]
 801005c:	eba0 000a 	sub.w	r0, r0, sl
 8010060:	2240      	movs	r2, #64	@ 0x40
 8010062:	4082      	lsls	r2, r0
 8010064:	4313      	orrs	r3, r2
 8010066:	3401      	adds	r4, #1
 8010068:	9304      	str	r3, [sp, #16]
 801006a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801006e:	4829      	ldr	r0, [pc, #164]	@ (8010114 <_vfiprintf_r+0x220>)
 8010070:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010074:	2206      	movs	r2, #6
 8010076:	f7f0 f8bb 	bl	80001f0 <memchr>
 801007a:	2800      	cmp	r0, #0
 801007c:	d03f      	beq.n	80100fe <_vfiprintf_r+0x20a>
 801007e:	4b26      	ldr	r3, [pc, #152]	@ (8010118 <_vfiprintf_r+0x224>)
 8010080:	bb1b      	cbnz	r3, 80100ca <_vfiprintf_r+0x1d6>
 8010082:	9b03      	ldr	r3, [sp, #12]
 8010084:	3307      	adds	r3, #7
 8010086:	f023 0307 	bic.w	r3, r3, #7
 801008a:	3308      	adds	r3, #8
 801008c:	9303      	str	r3, [sp, #12]
 801008e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010090:	443b      	add	r3, r7
 8010092:	9309      	str	r3, [sp, #36]	@ 0x24
 8010094:	e76a      	b.n	800ff6c <_vfiprintf_r+0x78>
 8010096:	fb0c 3202 	mla	r2, ip, r2, r3
 801009a:	460c      	mov	r4, r1
 801009c:	2001      	movs	r0, #1
 801009e:	e7a8      	b.n	800fff2 <_vfiprintf_r+0xfe>
 80100a0:	2300      	movs	r3, #0
 80100a2:	3401      	adds	r4, #1
 80100a4:	9305      	str	r3, [sp, #20]
 80100a6:	4619      	mov	r1, r3
 80100a8:	f04f 0c0a 	mov.w	ip, #10
 80100ac:	4620      	mov	r0, r4
 80100ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80100b2:	3a30      	subs	r2, #48	@ 0x30
 80100b4:	2a09      	cmp	r2, #9
 80100b6:	d903      	bls.n	80100c0 <_vfiprintf_r+0x1cc>
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d0c6      	beq.n	801004a <_vfiprintf_r+0x156>
 80100bc:	9105      	str	r1, [sp, #20]
 80100be:	e7c4      	b.n	801004a <_vfiprintf_r+0x156>
 80100c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80100c4:	4604      	mov	r4, r0
 80100c6:	2301      	movs	r3, #1
 80100c8:	e7f0      	b.n	80100ac <_vfiprintf_r+0x1b8>
 80100ca:	ab03      	add	r3, sp, #12
 80100cc:	9300      	str	r3, [sp, #0]
 80100ce:	462a      	mov	r2, r5
 80100d0:	4b12      	ldr	r3, [pc, #72]	@ (801011c <_vfiprintf_r+0x228>)
 80100d2:	a904      	add	r1, sp, #16
 80100d4:	4630      	mov	r0, r6
 80100d6:	f7fd fcd9 	bl	800da8c <_printf_float>
 80100da:	4607      	mov	r7, r0
 80100dc:	1c78      	adds	r0, r7, #1
 80100de:	d1d6      	bne.n	801008e <_vfiprintf_r+0x19a>
 80100e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80100e2:	07d9      	lsls	r1, r3, #31
 80100e4:	d405      	bmi.n	80100f2 <_vfiprintf_r+0x1fe>
 80100e6:	89ab      	ldrh	r3, [r5, #12]
 80100e8:	059a      	lsls	r2, r3, #22
 80100ea:	d402      	bmi.n	80100f2 <_vfiprintf_r+0x1fe>
 80100ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80100ee:	f7fe fb51 	bl	800e794 <__retarget_lock_release_recursive>
 80100f2:	89ab      	ldrh	r3, [r5, #12]
 80100f4:	065b      	lsls	r3, r3, #25
 80100f6:	f53f af1f 	bmi.w	800ff38 <_vfiprintf_r+0x44>
 80100fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80100fc:	e71e      	b.n	800ff3c <_vfiprintf_r+0x48>
 80100fe:	ab03      	add	r3, sp, #12
 8010100:	9300      	str	r3, [sp, #0]
 8010102:	462a      	mov	r2, r5
 8010104:	4b05      	ldr	r3, [pc, #20]	@ (801011c <_vfiprintf_r+0x228>)
 8010106:	a904      	add	r1, sp, #16
 8010108:	4630      	mov	r0, r6
 801010a:	f7fd ff57 	bl	800dfbc <_printf_i>
 801010e:	e7e4      	b.n	80100da <_vfiprintf_r+0x1e6>
 8010110:	08010d8e 	.word	0x08010d8e
 8010114:	08010d98 	.word	0x08010d98
 8010118:	0800da8d 	.word	0x0800da8d
 801011c:	0800fecf 	.word	0x0800fecf
 8010120:	08010d94 	.word	0x08010d94

08010124 <__sflush_r>:
 8010124:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801012c:	0716      	lsls	r6, r2, #28
 801012e:	4605      	mov	r5, r0
 8010130:	460c      	mov	r4, r1
 8010132:	d454      	bmi.n	80101de <__sflush_r+0xba>
 8010134:	684b      	ldr	r3, [r1, #4]
 8010136:	2b00      	cmp	r3, #0
 8010138:	dc02      	bgt.n	8010140 <__sflush_r+0x1c>
 801013a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801013c:	2b00      	cmp	r3, #0
 801013e:	dd48      	ble.n	80101d2 <__sflush_r+0xae>
 8010140:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010142:	2e00      	cmp	r6, #0
 8010144:	d045      	beq.n	80101d2 <__sflush_r+0xae>
 8010146:	2300      	movs	r3, #0
 8010148:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801014c:	682f      	ldr	r7, [r5, #0]
 801014e:	6a21      	ldr	r1, [r4, #32]
 8010150:	602b      	str	r3, [r5, #0]
 8010152:	d030      	beq.n	80101b6 <__sflush_r+0x92>
 8010154:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010156:	89a3      	ldrh	r3, [r4, #12]
 8010158:	0759      	lsls	r1, r3, #29
 801015a:	d505      	bpl.n	8010168 <__sflush_r+0x44>
 801015c:	6863      	ldr	r3, [r4, #4]
 801015e:	1ad2      	subs	r2, r2, r3
 8010160:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010162:	b10b      	cbz	r3, 8010168 <__sflush_r+0x44>
 8010164:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010166:	1ad2      	subs	r2, r2, r3
 8010168:	2300      	movs	r3, #0
 801016a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801016c:	6a21      	ldr	r1, [r4, #32]
 801016e:	4628      	mov	r0, r5
 8010170:	47b0      	blx	r6
 8010172:	1c43      	adds	r3, r0, #1
 8010174:	89a3      	ldrh	r3, [r4, #12]
 8010176:	d106      	bne.n	8010186 <__sflush_r+0x62>
 8010178:	6829      	ldr	r1, [r5, #0]
 801017a:	291d      	cmp	r1, #29
 801017c:	d82b      	bhi.n	80101d6 <__sflush_r+0xb2>
 801017e:	4a2a      	ldr	r2, [pc, #168]	@ (8010228 <__sflush_r+0x104>)
 8010180:	40ca      	lsrs	r2, r1
 8010182:	07d6      	lsls	r6, r2, #31
 8010184:	d527      	bpl.n	80101d6 <__sflush_r+0xb2>
 8010186:	2200      	movs	r2, #0
 8010188:	6062      	str	r2, [r4, #4]
 801018a:	04d9      	lsls	r1, r3, #19
 801018c:	6922      	ldr	r2, [r4, #16]
 801018e:	6022      	str	r2, [r4, #0]
 8010190:	d504      	bpl.n	801019c <__sflush_r+0x78>
 8010192:	1c42      	adds	r2, r0, #1
 8010194:	d101      	bne.n	801019a <__sflush_r+0x76>
 8010196:	682b      	ldr	r3, [r5, #0]
 8010198:	b903      	cbnz	r3, 801019c <__sflush_r+0x78>
 801019a:	6560      	str	r0, [r4, #84]	@ 0x54
 801019c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801019e:	602f      	str	r7, [r5, #0]
 80101a0:	b1b9      	cbz	r1, 80101d2 <__sflush_r+0xae>
 80101a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80101a6:	4299      	cmp	r1, r3
 80101a8:	d002      	beq.n	80101b0 <__sflush_r+0x8c>
 80101aa:	4628      	mov	r0, r5
 80101ac:	f7ff f95c 	bl	800f468 <_free_r>
 80101b0:	2300      	movs	r3, #0
 80101b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80101b4:	e00d      	b.n	80101d2 <__sflush_r+0xae>
 80101b6:	2301      	movs	r3, #1
 80101b8:	4628      	mov	r0, r5
 80101ba:	47b0      	blx	r6
 80101bc:	4602      	mov	r2, r0
 80101be:	1c50      	adds	r0, r2, #1
 80101c0:	d1c9      	bne.n	8010156 <__sflush_r+0x32>
 80101c2:	682b      	ldr	r3, [r5, #0]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d0c6      	beq.n	8010156 <__sflush_r+0x32>
 80101c8:	2b1d      	cmp	r3, #29
 80101ca:	d001      	beq.n	80101d0 <__sflush_r+0xac>
 80101cc:	2b16      	cmp	r3, #22
 80101ce:	d11e      	bne.n	801020e <__sflush_r+0xea>
 80101d0:	602f      	str	r7, [r5, #0]
 80101d2:	2000      	movs	r0, #0
 80101d4:	e022      	b.n	801021c <__sflush_r+0xf8>
 80101d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80101da:	b21b      	sxth	r3, r3
 80101dc:	e01b      	b.n	8010216 <__sflush_r+0xf2>
 80101de:	690f      	ldr	r7, [r1, #16]
 80101e0:	2f00      	cmp	r7, #0
 80101e2:	d0f6      	beq.n	80101d2 <__sflush_r+0xae>
 80101e4:	0793      	lsls	r3, r2, #30
 80101e6:	680e      	ldr	r6, [r1, #0]
 80101e8:	bf08      	it	eq
 80101ea:	694b      	ldreq	r3, [r1, #20]
 80101ec:	600f      	str	r7, [r1, #0]
 80101ee:	bf18      	it	ne
 80101f0:	2300      	movne	r3, #0
 80101f2:	eba6 0807 	sub.w	r8, r6, r7
 80101f6:	608b      	str	r3, [r1, #8]
 80101f8:	f1b8 0f00 	cmp.w	r8, #0
 80101fc:	dde9      	ble.n	80101d2 <__sflush_r+0xae>
 80101fe:	6a21      	ldr	r1, [r4, #32]
 8010200:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010202:	4643      	mov	r3, r8
 8010204:	463a      	mov	r2, r7
 8010206:	4628      	mov	r0, r5
 8010208:	47b0      	blx	r6
 801020a:	2800      	cmp	r0, #0
 801020c:	dc08      	bgt.n	8010220 <__sflush_r+0xfc>
 801020e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010212:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010216:	81a3      	strh	r3, [r4, #12]
 8010218:	f04f 30ff 	mov.w	r0, #4294967295
 801021c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010220:	4407      	add	r7, r0
 8010222:	eba8 0800 	sub.w	r8, r8, r0
 8010226:	e7e7      	b.n	80101f8 <__sflush_r+0xd4>
 8010228:	20400001 	.word	0x20400001

0801022c <_fflush_r>:
 801022c:	b538      	push	{r3, r4, r5, lr}
 801022e:	690b      	ldr	r3, [r1, #16]
 8010230:	4605      	mov	r5, r0
 8010232:	460c      	mov	r4, r1
 8010234:	b913      	cbnz	r3, 801023c <_fflush_r+0x10>
 8010236:	2500      	movs	r5, #0
 8010238:	4628      	mov	r0, r5
 801023a:	bd38      	pop	{r3, r4, r5, pc}
 801023c:	b118      	cbz	r0, 8010246 <_fflush_r+0x1a>
 801023e:	6a03      	ldr	r3, [r0, #32]
 8010240:	b90b      	cbnz	r3, 8010246 <_fflush_r+0x1a>
 8010242:	f7fe f865 	bl	800e310 <__sinit>
 8010246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d0f3      	beq.n	8010236 <_fflush_r+0xa>
 801024e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010250:	07d0      	lsls	r0, r2, #31
 8010252:	d404      	bmi.n	801025e <_fflush_r+0x32>
 8010254:	0599      	lsls	r1, r3, #22
 8010256:	d402      	bmi.n	801025e <_fflush_r+0x32>
 8010258:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801025a:	f7fe fa9a 	bl	800e792 <__retarget_lock_acquire_recursive>
 801025e:	4628      	mov	r0, r5
 8010260:	4621      	mov	r1, r4
 8010262:	f7ff ff5f 	bl	8010124 <__sflush_r>
 8010266:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010268:	07da      	lsls	r2, r3, #31
 801026a:	4605      	mov	r5, r0
 801026c:	d4e4      	bmi.n	8010238 <_fflush_r+0xc>
 801026e:	89a3      	ldrh	r3, [r4, #12]
 8010270:	059b      	lsls	r3, r3, #22
 8010272:	d4e1      	bmi.n	8010238 <_fflush_r+0xc>
 8010274:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010276:	f7fe fa8d 	bl	800e794 <__retarget_lock_release_recursive>
 801027a:	e7dd      	b.n	8010238 <_fflush_r+0xc>

0801027c <__swhatbuf_r>:
 801027c:	b570      	push	{r4, r5, r6, lr}
 801027e:	460c      	mov	r4, r1
 8010280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010284:	2900      	cmp	r1, #0
 8010286:	b096      	sub	sp, #88	@ 0x58
 8010288:	4615      	mov	r5, r2
 801028a:	461e      	mov	r6, r3
 801028c:	da0d      	bge.n	80102aa <__swhatbuf_r+0x2e>
 801028e:	89a3      	ldrh	r3, [r4, #12]
 8010290:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010294:	f04f 0100 	mov.w	r1, #0
 8010298:	bf14      	ite	ne
 801029a:	2340      	movne	r3, #64	@ 0x40
 801029c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80102a0:	2000      	movs	r0, #0
 80102a2:	6031      	str	r1, [r6, #0]
 80102a4:	602b      	str	r3, [r5, #0]
 80102a6:	b016      	add	sp, #88	@ 0x58
 80102a8:	bd70      	pop	{r4, r5, r6, pc}
 80102aa:	466a      	mov	r2, sp
 80102ac:	f000 f862 	bl	8010374 <_fstat_r>
 80102b0:	2800      	cmp	r0, #0
 80102b2:	dbec      	blt.n	801028e <__swhatbuf_r+0x12>
 80102b4:	9901      	ldr	r1, [sp, #4]
 80102b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80102ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80102be:	4259      	negs	r1, r3
 80102c0:	4159      	adcs	r1, r3
 80102c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80102c6:	e7eb      	b.n	80102a0 <__swhatbuf_r+0x24>

080102c8 <__smakebuf_r>:
 80102c8:	898b      	ldrh	r3, [r1, #12]
 80102ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80102cc:	079d      	lsls	r5, r3, #30
 80102ce:	4606      	mov	r6, r0
 80102d0:	460c      	mov	r4, r1
 80102d2:	d507      	bpl.n	80102e4 <__smakebuf_r+0x1c>
 80102d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80102d8:	6023      	str	r3, [r4, #0]
 80102da:	6123      	str	r3, [r4, #16]
 80102dc:	2301      	movs	r3, #1
 80102de:	6163      	str	r3, [r4, #20]
 80102e0:	b003      	add	sp, #12
 80102e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102e4:	ab01      	add	r3, sp, #4
 80102e6:	466a      	mov	r2, sp
 80102e8:	f7ff ffc8 	bl	801027c <__swhatbuf_r>
 80102ec:	9f00      	ldr	r7, [sp, #0]
 80102ee:	4605      	mov	r5, r0
 80102f0:	4639      	mov	r1, r7
 80102f2:	4630      	mov	r0, r6
 80102f4:	f7fd fa9e 	bl	800d834 <_malloc_r>
 80102f8:	b948      	cbnz	r0, 801030e <__smakebuf_r+0x46>
 80102fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102fe:	059a      	lsls	r2, r3, #22
 8010300:	d4ee      	bmi.n	80102e0 <__smakebuf_r+0x18>
 8010302:	f023 0303 	bic.w	r3, r3, #3
 8010306:	f043 0302 	orr.w	r3, r3, #2
 801030a:	81a3      	strh	r3, [r4, #12]
 801030c:	e7e2      	b.n	80102d4 <__smakebuf_r+0xc>
 801030e:	89a3      	ldrh	r3, [r4, #12]
 8010310:	6020      	str	r0, [r4, #0]
 8010312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010316:	81a3      	strh	r3, [r4, #12]
 8010318:	9b01      	ldr	r3, [sp, #4]
 801031a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801031e:	b15b      	cbz	r3, 8010338 <__smakebuf_r+0x70>
 8010320:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010324:	4630      	mov	r0, r6
 8010326:	f000 f837 	bl	8010398 <_isatty_r>
 801032a:	b128      	cbz	r0, 8010338 <__smakebuf_r+0x70>
 801032c:	89a3      	ldrh	r3, [r4, #12]
 801032e:	f023 0303 	bic.w	r3, r3, #3
 8010332:	f043 0301 	orr.w	r3, r3, #1
 8010336:	81a3      	strh	r3, [r4, #12]
 8010338:	89a3      	ldrh	r3, [r4, #12]
 801033a:	431d      	orrs	r5, r3
 801033c:	81a5      	strh	r5, [r4, #12]
 801033e:	e7cf      	b.n	80102e0 <__smakebuf_r+0x18>

08010340 <memmove>:
 8010340:	4288      	cmp	r0, r1
 8010342:	b510      	push	{r4, lr}
 8010344:	eb01 0402 	add.w	r4, r1, r2
 8010348:	d902      	bls.n	8010350 <memmove+0x10>
 801034a:	4284      	cmp	r4, r0
 801034c:	4623      	mov	r3, r4
 801034e:	d807      	bhi.n	8010360 <memmove+0x20>
 8010350:	1e43      	subs	r3, r0, #1
 8010352:	42a1      	cmp	r1, r4
 8010354:	d008      	beq.n	8010368 <memmove+0x28>
 8010356:	f811 2b01 	ldrb.w	r2, [r1], #1
 801035a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801035e:	e7f8      	b.n	8010352 <memmove+0x12>
 8010360:	4402      	add	r2, r0
 8010362:	4601      	mov	r1, r0
 8010364:	428a      	cmp	r2, r1
 8010366:	d100      	bne.n	801036a <memmove+0x2a>
 8010368:	bd10      	pop	{r4, pc}
 801036a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801036e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010372:	e7f7      	b.n	8010364 <memmove+0x24>

08010374 <_fstat_r>:
 8010374:	b538      	push	{r3, r4, r5, lr}
 8010376:	4d07      	ldr	r5, [pc, #28]	@ (8010394 <_fstat_r+0x20>)
 8010378:	2300      	movs	r3, #0
 801037a:	4604      	mov	r4, r0
 801037c:	4608      	mov	r0, r1
 801037e:	4611      	mov	r1, r2
 8010380:	602b      	str	r3, [r5, #0]
 8010382:	f7f4 fd4b 	bl	8004e1c <_fstat>
 8010386:	1c43      	adds	r3, r0, #1
 8010388:	d102      	bne.n	8010390 <_fstat_r+0x1c>
 801038a:	682b      	ldr	r3, [r5, #0]
 801038c:	b103      	cbz	r3, 8010390 <_fstat_r+0x1c>
 801038e:	6023      	str	r3, [r4, #0]
 8010390:	bd38      	pop	{r3, r4, r5, pc}
 8010392:	bf00      	nop
 8010394:	20026c10 	.word	0x20026c10

08010398 <_isatty_r>:
 8010398:	b538      	push	{r3, r4, r5, lr}
 801039a:	4d06      	ldr	r5, [pc, #24]	@ (80103b4 <_isatty_r+0x1c>)
 801039c:	2300      	movs	r3, #0
 801039e:	4604      	mov	r4, r0
 80103a0:	4608      	mov	r0, r1
 80103a2:	602b      	str	r3, [r5, #0]
 80103a4:	f7f4 fd4a 	bl	8004e3c <_isatty>
 80103a8:	1c43      	adds	r3, r0, #1
 80103aa:	d102      	bne.n	80103b2 <_isatty_r+0x1a>
 80103ac:	682b      	ldr	r3, [r5, #0]
 80103ae:	b103      	cbz	r3, 80103b2 <_isatty_r+0x1a>
 80103b0:	6023      	str	r3, [r4, #0]
 80103b2:	bd38      	pop	{r3, r4, r5, pc}
 80103b4:	20026c10 	.word	0x20026c10

080103b8 <__assert_func>:
 80103b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80103ba:	4614      	mov	r4, r2
 80103bc:	461a      	mov	r2, r3
 80103be:	4b09      	ldr	r3, [pc, #36]	@ (80103e4 <__assert_func+0x2c>)
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	4605      	mov	r5, r0
 80103c4:	68d8      	ldr	r0, [r3, #12]
 80103c6:	b14c      	cbz	r4, 80103dc <__assert_func+0x24>
 80103c8:	4b07      	ldr	r3, [pc, #28]	@ (80103e8 <__assert_func+0x30>)
 80103ca:	9100      	str	r1, [sp, #0]
 80103cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80103d0:	4906      	ldr	r1, [pc, #24]	@ (80103ec <__assert_func+0x34>)
 80103d2:	462b      	mov	r3, r5
 80103d4:	f000 f870 	bl	80104b8 <fiprintf>
 80103d8:	f000 f880 	bl	80104dc <abort>
 80103dc:	4b04      	ldr	r3, [pc, #16]	@ (80103f0 <__assert_func+0x38>)
 80103de:	461c      	mov	r4, r3
 80103e0:	e7f3      	b.n	80103ca <__assert_func+0x12>
 80103e2:	bf00      	nop
 80103e4:	20000028 	.word	0x20000028
 80103e8:	08010da9 	.word	0x08010da9
 80103ec:	08010db6 	.word	0x08010db6
 80103f0:	08010de4 	.word	0x08010de4

080103f4 <_calloc_r>:
 80103f4:	b570      	push	{r4, r5, r6, lr}
 80103f6:	fba1 5402 	umull	r5, r4, r1, r2
 80103fa:	b934      	cbnz	r4, 801040a <_calloc_r+0x16>
 80103fc:	4629      	mov	r1, r5
 80103fe:	f7fd fa19 	bl	800d834 <_malloc_r>
 8010402:	4606      	mov	r6, r0
 8010404:	b928      	cbnz	r0, 8010412 <_calloc_r+0x1e>
 8010406:	4630      	mov	r0, r6
 8010408:	bd70      	pop	{r4, r5, r6, pc}
 801040a:	220c      	movs	r2, #12
 801040c:	6002      	str	r2, [r0, #0]
 801040e:	2600      	movs	r6, #0
 8010410:	e7f9      	b.n	8010406 <_calloc_r+0x12>
 8010412:	462a      	mov	r2, r5
 8010414:	4621      	mov	r1, r4
 8010416:	f7fe f92f 	bl	800e678 <memset>
 801041a:	e7f4      	b.n	8010406 <_calloc_r+0x12>

0801041c <__ascii_mbtowc>:
 801041c:	b082      	sub	sp, #8
 801041e:	b901      	cbnz	r1, 8010422 <__ascii_mbtowc+0x6>
 8010420:	a901      	add	r1, sp, #4
 8010422:	b142      	cbz	r2, 8010436 <__ascii_mbtowc+0x1a>
 8010424:	b14b      	cbz	r3, 801043a <__ascii_mbtowc+0x1e>
 8010426:	7813      	ldrb	r3, [r2, #0]
 8010428:	600b      	str	r3, [r1, #0]
 801042a:	7812      	ldrb	r2, [r2, #0]
 801042c:	1e10      	subs	r0, r2, #0
 801042e:	bf18      	it	ne
 8010430:	2001      	movne	r0, #1
 8010432:	b002      	add	sp, #8
 8010434:	4770      	bx	lr
 8010436:	4610      	mov	r0, r2
 8010438:	e7fb      	b.n	8010432 <__ascii_mbtowc+0x16>
 801043a:	f06f 0001 	mvn.w	r0, #1
 801043e:	e7f8      	b.n	8010432 <__ascii_mbtowc+0x16>

08010440 <_realloc_r>:
 8010440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010444:	4607      	mov	r7, r0
 8010446:	4614      	mov	r4, r2
 8010448:	460d      	mov	r5, r1
 801044a:	b921      	cbnz	r1, 8010456 <_realloc_r+0x16>
 801044c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010450:	4611      	mov	r1, r2
 8010452:	f7fd b9ef 	b.w	800d834 <_malloc_r>
 8010456:	b92a      	cbnz	r2, 8010464 <_realloc_r+0x24>
 8010458:	f7ff f806 	bl	800f468 <_free_r>
 801045c:	4625      	mov	r5, r4
 801045e:	4628      	mov	r0, r5
 8010460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010464:	f000 f841 	bl	80104ea <_malloc_usable_size_r>
 8010468:	4284      	cmp	r4, r0
 801046a:	4606      	mov	r6, r0
 801046c:	d802      	bhi.n	8010474 <_realloc_r+0x34>
 801046e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010472:	d8f4      	bhi.n	801045e <_realloc_r+0x1e>
 8010474:	4621      	mov	r1, r4
 8010476:	4638      	mov	r0, r7
 8010478:	f7fd f9dc 	bl	800d834 <_malloc_r>
 801047c:	4680      	mov	r8, r0
 801047e:	b908      	cbnz	r0, 8010484 <_realloc_r+0x44>
 8010480:	4645      	mov	r5, r8
 8010482:	e7ec      	b.n	801045e <_realloc_r+0x1e>
 8010484:	42b4      	cmp	r4, r6
 8010486:	4622      	mov	r2, r4
 8010488:	4629      	mov	r1, r5
 801048a:	bf28      	it	cs
 801048c:	4632      	movcs	r2, r6
 801048e:	f7fe f982 	bl	800e796 <memcpy>
 8010492:	4629      	mov	r1, r5
 8010494:	4638      	mov	r0, r7
 8010496:	f7fe ffe7 	bl	800f468 <_free_r>
 801049a:	e7f1      	b.n	8010480 <_realloc_r+0x40>

0801049c <__ascii_wctomb>:
 801049c:	4603      	mov	r3, r0
 801049e:	4608      	mov	r0, r1
 80104a0:	b141      	cbz	r1, 80104b4 <__ascii_wctomb+0x18>
 80104a2:	2aff      	cmp	r2, #255	@ 0xff
 80104a4:	d904      	bls.n	80104b0 <__ascii_wctomb+0x14>
 80104a6:	228a      	movs	r2, #138	@ 0x8a
 80104a8:	601a      	str	r2, [r3, #0]
 80104aa:	f04f 30ff 	mov.w	r0, #4294967295
 80104ae:	4770      	bx	lr
 80104b0:	700a      	strb	r2, [r1, #0]
 80104b2:	2001      	movs	r0, #1
 80104b4:	4770      	bx	lr
	...

080104b8 <fiprintf>:
 80104b8:	b40e      	push	{r1, r2, r3}
 80104ba:	b503      	push	{r0, r1, lr}
 80104bc:	4601      	mov	r1, r0
 80104be:	ab03      	add	r3, sp, #12
 80104c0:	4805      	ldr	r0, [pc, #20]	@ (80104d8 <fiprintf+0x20>)
 80104c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80104c6:	6800      	ldr	r0, [r0, #0]
 80104c8:	9301      	str	r3, [sp, #4]
 80104ca:	f7ff fd13 	bl	800fef4 <_vfiprintf_r>
 80104ce:	b002      	add	sp, #8
 80104d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80104d4:	b003      	add	sp, #12
 80104d6:	4770      	bx	lr
 80104d8:	20000028 	.word	0x20000028

080104dc <abort>:
 80104dc:	b508      	push	{r3, lr}
 80104de:	2006      	movs	r0, #6
 80104e0:	f000 f834 	bl	801054c <raise>
 80104e4:	2001      	movs	r0, #1
 80104e6:	f7f4 fc65 	bl	8004db4 <_exit>

080104ea <_malloc_usable_size_r>:
 80104ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80104ee:	1f18      	subs	r0, r3, #4
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	bfbc      	itt	lt
 80104f4:	580b      	ldrlt	r3, [r1, r0]
 80104f6:	18c0      	addlt	r0, r0, r3
 80104f8:	4770      	bx	lr

080104fa <_raise_r>:
 80104fa:	291f      	cmp	r1, #31
 80104fc:	b538      	push	{r3, r4, r5, lr}
 80104fe:	4605      	mov	r5, r0
 8010500:	460c      	mov	r4, r1
 8010502:	d904      	bls.n	801050e <_raise_r+0x14>
 8010504:	2316      	movs	r3, #22
 8010506:	6003      	str	r3, [r0, #0]
 8010508:	f04f 30ff 	mov.w	r0, #4294967295
 801050c:	bd38      	pop	{r3, r4, r5, pc}
 801050e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010510:	b112      	cbz	r2, 8010518 <_raise_r+0x1e>
 8010512:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010516:	b94b      	cbnz	r3, 801052c <_raise_r+0x32>
 8010518:	4628      	mov	r0, r5
 801051a:	f000 f831 	bl	8010580 <_getpid_r>
 801051e:	4622      	mov	r2, r4
 8010520:	4601      	mov	r1, r0
 8010522:	4628      	mov	r0, r5
 8010524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010528:	f000 b818 	b.w	801055c <_kill_r>
 801052c:	2b01      	cmp	r3, #1
 801052e:	d00a      	beq.n	8010546 <_raise_r+0x4c>
 8010530:	1c59      	adds	r1, r3, #1
 8010532:	d103      	bne.n	801053c <_raise_r+0x42>
 8010534:	2316      	movs	r3, #22
 8010536:	6003      	str	r3, [r0, #0]
 8010538:	2001      	movs	r0, #1
 801053a:	e7e7      	b.n	801050c <_raise_r+0x12>
 801053c:	2100      	movs	r1, #0
 801053e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010542:	4620      	mov	r0, r4
 8010544:	4798      	blx	r3
 8010546:	2000      	movs	r0, #0
 8010548:	e7e0      	b.n	801050c <_raise_r+0x12>
	...

0801054c <raise>:
 801054c:	4b02      	ldr	r3, [pc, #8]	@ (8010558 <raise+0xc>)
 801054e:	4601      	mov	r1, r0
 8010550:	6818      	ldr	r0, [r3, #0]
 8010552:	f7ff bfd2 	b.w	80104fa <_raise_r>
 8010556:	bf00      	nop
 8010558:	20000028 	.word	0x20000028

0801055c <_kill_r>:
 801055c:	b538      	push	{r3, r4, r5, lr}
 801055e:	4d07      	ldr	r5, [pc, #28]	@ (801057c <_kill_r+0x20>)
 8010560:	2300      	movs	r3, #0
 8010562:	4604      	mov	r4, r0
 8010564:	4608      	mov	r0, r1
 8010566:	4611      	mov	r1, r2
 8010568:	602b      	str	r3, [r5, #0]
 801056a:	f7f4 fc13 	bl	8004d94 <_kill>
 801056e:	1c43      	adds	r3, r0, #1
 8010570:	d102      	bne.n	8010578 <_kill_r+0x1c>
 8010572:	682b      	ldr	r3, [r5, #0]
 8010574:	b103      	cbz	r3, 8010578 <_kill_r+0x1c>
 8010576:	6023      	str	r3, [r4, #0]
 8010578:	bd38      	pop	{r3, r4, r5, pc}
 801057a:	bf00      	nop
 801057c:	20026c10 	.word	0x20026c10

08010580 <_getpid_r>:
 8010580:	f7f4 bc00 	b.w	8004d84 <_getpid>

08010584 <_init>:
 8010584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010586:	bf00      	nop
 8010588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801058a:	bc08      	pop	{r3}
 801058c:	469e      	mov	lr, r3
 801058e:	4770      	bx	lr

08010590 <_fini>:
 8010590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010592:	bf00      	nop
 8010594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010596:	bc08      	pop	{r3}
 8010598:	469e      	mov	lr, r3
 801059a:	4770      	bx	lr
