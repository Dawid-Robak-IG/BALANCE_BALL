
BALANCE_BALL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000900c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080091bc  080091bc  0000a1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009248  08009248  0000b014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009248  08009248  0000a248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009250  08009250  0000b014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009250  08009250  0000a250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009254  08009254  0000a254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08009258  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b014  2**0
                  CONTENTS
 10 .bss          00026008  20000014  20000014  0000b014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2002601c  2002601c  0000b014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028529  00000000  00000000  0000b044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000062d9  00000000  00000000  0003356d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002288  00000000  00000000  00039848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001aa5  00000000  00000000  0003bad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a9fe  00000000  00000000  0003d575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b0a3  00000000  00000000  00067f73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f46fc  00000000  00000000  00093016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00187712  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000090c8  00000000  00000000  00187758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00190820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000014 	.word	0x20000014
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080091a4 	.word	0x080091a4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000018 	.word	0x20000018
 80001ec:	080091a4 	.word	0x080091a4

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000204:	f000 b988 	b.w	8000518 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	468e      	mov	lr, r1
 8000228:	4604      	mov	r4, r0
 800022a:	4688      	mov	r8, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d962      	bls.n	80002fc <__udivmoddi4+0xdc>
 8000236:	fab2 f682 	clz	r6, r2
 800023a:	b14e      	cbz	r6, 8000250 <__udivmoddi4+0x30>
 800023c:	f1c6 0320 	rsb	r3, r6, #32
 8000240:	fa01 f806 	lsl.w	r8, r1, r6
 8000244:	fa20 f303 	lsr.w	r3, r0, r3
 8000248:	40b7      	lsls	r7, r6
 800024a:	ea43 0808 	orr.w	r8, r3, r8
 800024e:	40b4      	lsls	r4, r6
 8000250:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000254:	fa1f fc87 	uxth.w	ip, r7
 8000258:	fbb8 f1fe 	udiv	r1, r8, lr
 800025c:	0c23      	lsrs	r3, r4, #16
 800025e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000262:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000266:	fb01 f20c 	mul.w	r2, r1, ip
 800026a:	429a      	cmp	r2, r3
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0x62>
 800026e:	18fb      	adds	r3, r7, r3
 8000270:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000274:	f080 80ea 	bcs.w	800044c <__udivmoddi4+0x22c>
 8000278:	429a      	cmp	r2, r3
 800027a:	f240 80e7 	bls.w	800044c <__udivmoddi4+0x22c>
 800027e:	3902      	subs	r1, #2
 8000280:	443b      	add	r3, r7
 8000282:	1a9a      	subs	r2, r3, r2
 8000284:	b2a3      	uxth	r3, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000292:	fb00 fc0c 	mul.w	ip, r0, ip
 8000296:	459c      	cmp	ip, r3
 8000298:	d909      	bls.n	80002ae <__udivmoddi4+0x8e>
 800029a:	18fb      	adds	r3, r7, r3
 800029c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002a0:	f080 80d6 	bcs.w	8000450 <__udivmoddi4+0x230>
 80002a4:	459c      	cmp	ip, r3
 80002a6:	f240 80d3 	bls.w	8000450 <__udivmoddi4+0x230>
 80002aa:	443b      	add	r3, r7
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b2:	eba3 030c 	sub.w	r3, r3, ip
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40f3      	lsrs	r3, r6
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xb6>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb0>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x14c>
 80002de:	4573      	cmp	r3, lr
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xc8>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 8105 	bhi.w	80004f2 <__udivmoddi4+0x2d2>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4690      	mov	r8, r2
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e5      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002f6:	e9c5 4800 	strd	r4, r8, [r5]
 80002fa:	e7e2      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f000 8090 	beq.w	8000422 <__udivmoddi4+0x202>
 8000302:	fab2 f682 	clz	r6, r2
 8000306:	2e00      	cmp	r6, #0
 8000308:	f040 80a4 	bne.w	8000454 <__udivmoddi4+0x234>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	0c03      	lsrs	r3, r0, #16
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	b280      	uxth	r0, r0
 8000316:	b2bc      	uxth	r4, r7
 8000318:	2101      	movs	r1, #1
 800031a:	fbb2 fcfe 	udiv	ip, r2, lr
 800031e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000326:	fb04 f20c 	mul.w	r2, r4, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d907      	bls.n	800033e <__udivmoddi4+0x11e>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0x11c>
 8000336:	429a      	cmp	r2, r3
 8000338:	f200 80e0 	bhi.w	80004fc <__udivmoddi4+0x2dc>
 800033c:	46c4      	mov	ip, r8
 800033e:	1a9b      	subs	r3, r3, r2
 8000340:	fbb3 f2fe 	udiv	r2, r3, lr
 8000344:	fb0e 3312 	mls	r3, lr, r2, r3
 8000348:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800034c:	fb02 f404 	mul.w	r4, r2, r4
 8000350:	429c      	cmp	r4, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x144>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x142>
 800035c:	429c      	cmp	r4, r3
 800035e:	f200 80ca 	bhi.w	80004f6 <__udivmoddi4+0x2d6>
 8000362:	4602      	mov	r2, r0
 8000364:	1b1b      	subs	r3, r3, r4
 8000366:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x98>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa0e f401 	lsl.w	r4, lr, r1
 800037c:	fa20 f306 	lsr.w	r3, r0, r6
 8000380:	fa2e fe06 	lsr.w	lr, lr, r6
 8000384:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000388:	4323      	orrs	r3, r4
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	fa1f fc87 	uxth.w	ip, r7
 8000392:	fbbe f0f9 	udiv	r0, lr, r9
 8000396:	0c1c      	lsrs	r4, r3, #16
 8000398:	fb09 ee10 	mls	lr, r9, r0, lr
 800039c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a4:	45a6      	cmp	lr, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1a0>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003b2:	f080 809c 	bcs.w	80004ee <__udivmoddi4+0x2ce>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f240 8099 	bls.w	80004ee <__udivmoddi4+0x2ce>
 80003bc:	3802      	subs	r0, #2
 80003be:	443c      	add	r4, r7
 80003c0:	eba4 040e 	sub.w	r4, r4, lr
 80003c4:	fa1f fe83 	uxth.w	lr, r3
 80003c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003cc:	fb09 4413 	mls	r4, r9, r3, r4
 80003d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d8:	45a4      	cmp	ip, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1ce>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003e2:	f080 8082 	bcs.w	80004ea <__udivmoddi4+0x2ca>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d97f      	bls.n	80004ea <__udivmoddi4+0x2ca>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003fa:	4564      	cmp	r4, ip
 80003fc:	4673      	mov	r3, lr
 80003fe:	46e1      	mov	r9, ip
 8000400:	d362      	bcc.n	80004c8 <__udivmoddi4+0x2a8>
 8000402:	d05f      	beq.n	80004c4 <__udivmoddi4+0x2a4>
 8000404:	b15d      	cbz	r5, 800041e <__udivmoddi4+0x1fe>
 8000406:	ebb8 0203 	subs.w	r2, r8, r3
 800040a:	eb64 0409 	sbc.w	r4, r4, r9
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	fa22 f301 	lsr.w	r3, r2, r1
 8000416:	431e      	orrs	r6, r3
 8000418:	40cc      	lsrs	r4, r1
 800041a:	e9c5 6400 	strd	r6, r4, [r5]
 800041e:	2100      	movs	r1, #0
 8000420:	e74f      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000422:	fbb1 fcf2 	udiv	ip, r1, r2
 8000426:	0c01      	lsrs	r1, r0, #16
 8000428:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800042c:	b280      	uxth	r0, r0
 800042e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000432:	463b      	mov	r3, r7
 8000434:	4638      	mov	r0, r7
 8000436:	463c      	mov	r4, r7
 8000438:	46b8      	mov	r8, r7
 800043a:	46be      	mov	lr, r7
 800043c:	2620      	movs	r6, #32
 800043e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000442:	eba2 0208 	sub.w	r2, r2, r8
 8000446:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800044a:	e766      	b.n	800031a <__udivmoddi4+0xfa>
 800044c:	4601      	mov	r1, r0
 800044e:	e718      	b.n	8000282 <__udivmoddi4+0x62>
 8000450:	4610      	mov	r0, r2
 8000452:	e72c      	b.n	80002ae <__udivmoddi4+0x8e>
 8000454:	f1c6 0220 	rsb	r2, r6, #32
 8000458:	fa2e f302 	lsr.w	r3, lr, r2
 800045c:	40b7      	lsls	r7, r6
 800045e:	40b1      	lsls	r1, r6
 8000460:	fa20 f202 	lsr.w	r2, r0, r2
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	430a      	orrs	r2, r1
 800046a:	fbb3 f8fe 	udiv	r8, r3, lr
 800046e:	b2bc      	uxth	r4, r7
 8000470:	fb0e 3318 	mls	r3, lr, r8, r3
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb08 f904 	mul.w	r9, r8, r4
 800047e:	40b0      	lsls	r0, r6
 8000480:	4589      	cmp	r9, r1
 8000482:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000486:	b280      	uxth	r0, r0
 8000488:	d93e      	bls.n	8000508 <__udivmoddi4+0x2e8>
 800048a:	1879      	adds	r1, r7, r1
 800048c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x276>
 8000492:	4589      	cmp	r9, r1
 8000494:	d81f      	bhi.n	80004d6 <__udivmoddi4+0x2b6>
 8000496:	eba1 0109 	sub.w	r1, r1, r9
 800049a:	fbb1 f9fe 	udiv	r9, r1, lr
 800049e:	fb09 f804 	mul.w	r8, r9, r4
 80004a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a6:	b292      	uxth	r2, r2
 80004a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ac:	4542      	cmp	r2, r8
 80004ae:	d229      	bcs.n	8000504 <__udivmoddi4+0x2e4>
 80004b0:	18ba      	adds	r2, r7, r2
 80004b2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004b6:	d2c4      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d2c2      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004bc:	f1a9 0102 	sub.w	r1, r9, #2
 80004c0:	443a      	add	r2, r7
 80004c2:	e7be      	b.n	8000442 <__udivmoddi4+0x222>
 80004c4:	45f0      	cmp	r8, lr
 80004c6:	d29d      	bcs.n	8000404 <__udivmoddi4+0x1e4>
 80004c8:	ebbe 0302 	subs.w	r3, lr, r2
 80004cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004d0:	3801      	subs	r0, #1
 80004d2:	46e1      	mov	r9, ip
 80004d4:	e796      	b.n	8000404 <__udivmoddi4+0x1e4>
 80004d6:	eba7 0909 	sub.w	r9, r7, r9
 80004da:	4449      	add	r1, r9
 80004dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e4:	fb09 f804 	mul.w	r8, r9, r4
 80004e8:	e7db      	b.n	80004a2 <__udivmoddi4+0x282>
 80004ea:	4673      	mov	r3, lr
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1ce>
 80004ee:	4650      	mov	r0, sl
 80004f0:	e766      	b.n	80003c0 <__udivmoddi4+0x1a0>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e6fd      	b.n	80002f2 <__udivmoddi4+0xd2>
 80004f6:	443b      	add	r3, r7
 80004f8:	3a02      	subs	r2, #2
 80004fa:	e733      	b.n	8000364 <__udivmoddi4+0x144>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	443b      	add	r3, r7
 8000502:	e71c      	b.n	800033e <__udivmoddi4+0x11e>
 8000504:	4649      	mov	r1, r9
 8000506:	e79c      	b.n	8000442 <__udivmoddi4+0x222>
 8000508:	eba1 0109 	sub.w	r1, r1, r9
 800050c:	46c4      	mov	ip, r8
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fb09 f804 	mul.w	r8, r9, r4
 8000516:	e7c4      	b.n	80004a2 <__udivmoddi4+0x282>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000520:	4b06      	ldr	r3, [pc, #24]	@ (800053c <MX_CRC_Init+0x20>)
 8000522:	4a07      	ldr	r2, [pc, #28]	@ (8000540 <MX_CRC_Init+0x24>)
 8000524:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000526:	4805      	ldr	r0, [pc, #20]	@ (800053c <MX_CRC_Init+0x20>)
 8000528:	f001 fbfe 	bl	8001d28 <HAL_CRC_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000532:	f000 ffe5 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000030 	.word	0x20000030
 8000540:	40023000 	.word	0x40023000

08000544 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a0b      	ldr	r2, [pc, #44]	@ (8000580 <HAL_CRC_MspInit+0x3c>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d10d      	bne.n	8000572 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	4b0a      	ldr	r3, [pc, #40]	@ (8000584 <HAL_CRC_MspInit+0x40>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055e:	4a09      	ldr	r2, [pc, #36]	@ (8000584 <HAL_CRC_MspInit+0x40>)
 8000560:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000564:	6313      	str	r3, [r2, #48]	@ 0x30
 8000566:	4b07      	ldr	r3, [pc, #28]	@ (8000584 <HAL_CRC_MspInit+0x40>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000572:	bf00      	nop
 8000574:	3714      	adds	r7, #20
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40023000 	.word	0x40023000
 8000584:	40023800 	.word	0x40023800

08000588 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	4b0c      	ldr	r3, [pc, #48]	@ (80005c4 <MX_DMA_Init+0x3c>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000596:	4a0b      	ldr	r2, [pc, #44]	@ (80005c4 <MX_DMA_Init+0x3c>)
 8000598:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800059c:	6313      	str	r3, [r2, #48]	@ 0x30
 800059e:	4b09      	ldr	r3, [pc, #36]	@ (80005c4 <MX_DMA_Init+0x3c>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2105      	movs	r1, #5
 80005ae:	203c      	movs	r0, #60	@ 0x3c
 80005b0:	f001 fb90 	bl	8001cd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80005b4:	203c      	movs	r0, #60	@ 0x3c
 80005b6:	f001 fba9 	bl	8001d0c <HAL_NVIC_EnableIRQ>

}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40023800 	.word	0x40023800

080005c8 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80005cc:	4b15      	ldr	r3, [pc, #84]	@ (8000624 <MX_DMA2D_Init+0x5c>)
 80005ce:	4a16      	ldr	r2, [pc, #88]	@ (8000628 <MX_DMA2D_Init+0x60>)
 80005d0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80005d2:	4b14      	ldr	r3, [pc, #80]	@ (8000624 <MX_DMA2D_Init+0x5c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80005d8:	4b12      	ldr	r3, [pc, #72]	@ (8000624 <MX_DMA2D_Init+0x5c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80005de:	4b11      	ldr	r3, [pc, #68]	@ (8000624 <MX_DMA2D_Init+0x5c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000624 <MX_DMA2D_Init+0x5c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000624 <MX_DMA2D_Init+0x5c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000624 <MX_DMA2D_Init+0x5c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80005f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000624 <MX_DMA2D_Init+0x5c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80005fc:	4809      	ldr	r0, [pc, #36]	@ (8000624 <MX_DMA2D_Init+0x5c>)
 80005fe:	f001 ff1f 	bl	8002440 <HAL_DMA2D_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000608:	f000 ff7a 	bl	8001500 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800060c:	2101      	movs	r1, #1
 800060e:	4805      	ldr	r0, [pc, #20]	@ (8000624 <MX_DMA2D_Init+0x5c>)
 8000610:	f002 f870 	bl	80026f4 <HAL_DMA2D_ConfigLayer>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800061a:	f000 ff71 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000038 	.word	0x20000038
 8000628:	4002b000 	.word	0x4002b000

0800062c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a0e      	ldr	r2, [pc, #56]	@ (8000674 <HAL_DMA2D_MspInit+0x48>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d115      	bne.n	800066a <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	4b0d      	ldr	r3, [pc, #52]	@ (8000678 <HAL_DMA2D_MspInit+0x4c>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000646:	4a0c      	ldr	r2, [pc, #48]	@ (8000678 <HAL_DMA2D_MspInit+0x4c>)
 8000648:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800064c:	6313      	str	r3, [r2, #48]	@ 0x30
 800064e:	4b0a      	ldr	r3, [pc, #40]	@ (8000678 <HAL_DMA2D_MspInit+0x4c>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800065a:	2200      	movs	r2, #0
 800065c:	2105      	movs	r1, #5
 800065e:	205a      	movs	r0, #90	@ 0x5a
 8000660:	f001 fb38 	bl	8001cd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000664:	205a      	movs	r0, #90	@ 0x5a
 8000666:	f001 fb51 	bl	8001d0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	4002b000 	.word	0x4002b000
 8000678:	40023800 	.word	0x40023800

0800067c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]
 8000690:	615a      	str	r2, [r3, #20]
 8000692:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000694:	4b1f      	ldr	r3, [pc, #124]	@ (8000714 <MX_FMC_Init+0x98>)
 8000696:	4a20      	ldr	r2, [pc, #128]	@ (8000718 <MX_FMC_Init+0x9c>)
 8000698:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800069a:	4b1e      	ldr	r3, [pc, #120]	@ (8000714 <MX_FMC_Init+0x98>)
 800069c:	2201      	movs	r2, #1
 800069e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80006a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000714 <MX_FMC_Init+0x98>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80006a6:	4b1b      	ldr	r3, [pc, #108]	@ (8000714 <MX_FMC_Init+0x98>)
 80006a8:	2204      	movs	r2, #4
 80006aa:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80006ac:	4b19      	ldr	r3, [pc, #100]	@ (8000714 <MX_FMC_Init+0x98>)
 80006ae:	2210      	movs	r2, #16
 80006b0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80006b2:	4b18      	ldr	r3, [pc, #96]	@ (8000714 <MX_FMC_Init+0x98>)
 80006b4:	2240      	movs	r2, #64	@ 0x40
 80006b6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80006b8:	4b16      	ldr	r3, [pc, #88]	@ (8000714 <MX_FMC_Init+0x98>)
 80006ba:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80006be:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80006c0:	4b14      	ldr	r3, [pc, #80]	@ (8000714 <MX_FMC_Init+0x98>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80006c6:	4b13      	ldr	r3, [pc, #76]	@ (8000714 <MX_FMC_Init+0x98>)
 80006c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80006cc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80006ce:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <MX_FMC_Init+0x98>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000714 <MX_FMC_Init+0x98>)
 80006d6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006da:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80006dc:	2302      	movs	r3, #2
 80006de:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80006e0:	2307      	movs	r3, #7
 80006e2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80006e4:	2304      	movs	r3, #4
 80006e6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80006e8:	2307      	movs	r3, #7
 80006ea:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80006ec:	2303      	movs	r3, #3
 80006ee:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	4619      	mov	r1, r3
 80006fc:	4805      	ldr	r0, [pc, #20]	@ (8000714 <MX_FMC_Init+0x98>)
 80006fe:	f005 fbdb 	bl	8005eb8 <HAL_SDRAM_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000708:	f000 fefa 	bl	8001500 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800070c:	bf00      	nop
 800070e:	3720      	adds	r7, #32
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000078 	.word	0x20000078
 8000718:	a0000140 	.word	0xa0000140

0800071c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000730:	4b3b      	ldr	r3, [pc, #236]	@ (8000820 <HAL_FMC_MspInit+0x104>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d16f      	bne.n	8000818 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000738:	4b39      	ldr	r3, [pc, #228]	@ (8000820 <HAL_FMC_MspInit+0x104>)
 800073a:	2201      	movs	r2, #1
 800073c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	4b38      	ldr	r3, [pc, #224]	@ (8000824 <HAL_FMC_MspInit+0x108>)
 8000744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000746:	4a37      	ldr	r2, [pc, #220]	@ (8000824 <HAL_FMC_MspInit+0x108>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6393      	str	r3, [r2, #56]	@ 0x38
 800074e:	4b35      	ldr	r3, [pc, #212]	@ (8000824 <HAL_FMC_MspInit+0x108>)
 8000750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800075a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800075e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000760:	2302      	movs	r3, #2
 8000762:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000768:	2303      	movs	r3, #3
 800076a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800076c:	230c      	movs	r3, #12
 800076e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	4619      	mov	r1, r3
 8000774:	482c      	ldr	r0, [pc, #176]	@ (8000828 <HAL_FMC_MspInit+0x10c>)
 8000776:	f002 f84f 	bl	8002818 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800077a:	2301      	movs	r3, #1
 800077c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077e:	2302      	movs	r3, #2
 8000780:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000786:	2303      	movs	r3, #3
 8000788:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800078a:	230c      	movs	r3, #12
 800078c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	4619      	mov	r1, r3
 8000792:	4826      	ldr	r0, [pc, #152]	@ (800082c <HAL_FMC_MspInit+0x110>)
 8000794:	f002 f840 	bl	8002818 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000798:	f248 1333 	movw	r3, #33075	@ 0x8133
 800079c:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079e:	2302      	movs	r3, #2
 80007a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a6:	2303      	movs	r3, #3
 80007a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007aa:	230c      	movs	r3, #12
 80007ac:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	4619      	mov	r1, r3
 80007b2:	481f      	ldr	r0, [pc, #124]	@ (8000830 <HAL_FMC_MspInit+0x114>)
 80007b4:	f002 f830 	bl	8002818 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80007b8:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80007bc:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007be:	2302      	movs	r3, #2
 80007c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c6:	2303      	movs	r3, #3
 80007c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007ca:	230c      	movs	r3, #12
 80007cc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	4619      	mov	r1, r3
 80007d2:	4818      	ldr	r0, [pc, #96]	@ (8000834 <HAL_FMC_MspInit+0x118>)
 80007d4:	f002 f820 	bl	8002818 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80007d8:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80007dc:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007de:	2302      	movs	r3, #2
 80007e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e6:	2303      	movs	r3, #3
 80007e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007ea:	230c      	movs	r3, #12
 80007ec:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	4619      	mov	r1, r3
 80007f2:	4811      	ldr	r0, [pc, #68]	@ (8000838 <HAL_FMC_MspInit+0x11c>)
 80007f4:	f002 f810 	bl	8002818 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80007f8:	2360      	movs	r3, #96	@ 0x60
 80007fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fc:	2302      	movs	r3, #2
 80007fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000804:	2303      	movs	r3, #3
 8000806:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000808:	230c      	movs	r3, #12
 800080a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	4619      	mov	r1, r3
 8000810:	480a      	ldr	r0, [pc, #40]	@ (800083c <HAL_FMC_MspInit+0x120>)
 8000812:	f002 f801 	bl	8002818 <HAL_GPIO_Init>
 8000816:	e000      	b.n	800081a <HAL_FMC_MspInit+0xfe>
    return;
 8000818:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200000ac 	.word	0x200000ac
 8000824:	40023800 	.word	0x40023800
 8000828:	40021400 	.word	0x40021400
 800082c:	40020800 	.word	0x40020800
 8000830:	40021800 	.word	0x40021800
 8000834:	40021000 	.word	0x40021000
 8000838:	40020c00 	.word	0x40020c00
 800083c:	40020400 	.word	0x40020400

08000840 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000848:	f7ff ff68 	bl	800071c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
	...

0800086c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08e      	sub	sp, #56	@ 0x38
 8000870:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
 8000886:	4b81      	ldr	r3, [pc, #516]	@ (8000a8c <MX_GPIO_Init+0x220>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a80      	ldr	r2, [pc, #512]	@ (8000a8c <MX_GPIO_Init+0x220>)
 800088c:	f043 0304 	orr.w	r3, r3, #4
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b7e      	ldr	r3, [pc, #504]	@ (8000a8c <MX_GPIO_Init+0x220>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0304 	and.w	r3, r3, #4
 800089a:	623b      	str	r3, [r7, #32]
 800089c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
 80008a2:	4b7a      	ldr	r3, [pc, #488]	@ (8000a8c <MX_GPIO_Init+0x220>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a79      	ldr	r2, [pc, #484]	@ (8000a8c <MX_GPIO_Init+0x220>)
 80008a8:	f043 0320 	orr.w	r3, r3, #32
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b77      	ldr	r3, [pc, #476]	@ (8000a8c <MX_GPIO_Init+0x220>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0320 	and.w	r3, r3, #32
 80008b6:	61fb      	str	r3, [r7, #28]
 80008b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	61bb      	str	r3, [r7, #24]
 80008be:	4b73      	ldr	r3, [pc, #460]	@ (8000a8c <MX_GPIO_Init+0x220>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a72      	ldr	r2, [pc, #456]	@ (8000a8c <MX_GPIO_Init+0x220>)
 80008c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4b70      	ldr	r3, [pc, #448]	@ (8000a8c <MX_GPIO_Init+0x220>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008d2:	61bb      	str	r3, [r7, #24]
 80008d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
 80008da:	4b6c      	ldr	r3, [pc, #432]	@ (8000a8c <MX_GPIO_Init+0x220>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a6b      	ldr	r2, [pc, #428]	@ (8000a8c <MX_GPIO_Init+0x220>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b69      	ldr	r3, [pc, #420]	@ (8000a8c <MX_GPIO_Init+0x220>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	4b65      	ldr	r3, [pc, #404]	@ (8000a8c <MX_GPIO_Init+0x220>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	4a64      	ldr	r2, [pc, #400]	@ (8000a8c <MX_GPIO_Init+0x220>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	6313      	str	r3, [r2, #48]	@ 0x30
 8000902:	4b62      	ldr	r3, [pc, #392]	@ (8000a8c <MX_GPIO_Init+0x220>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	4b5e      	ldr	r3, [pc, #376]	@ (8000a8c <MX_GPIO_Init+0x220>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	4a5d      	ldr	r2, [pc, #372]	@ (8000a8c <MX_GPIO_Init+0x220>)
 8000918:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800091c:	6313      	str	r3, [r2, #48]	@ 0x30
 800091e:	4b5b      	ldr	r3, [pc, #364]	@ (8000a8c <MX_GPIO_Init+0x220>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	4b57      	ldr	r3, [pc, #348]	@ (8000a8c <MX_GPIO_Init+0x220>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4a56      	ldr	r2, [pc, #344]	@ (8000a8c <MX_GPIO_Init+0x220>)
 8000934:	f043 0310 	orr.w	r3, r3, #16
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b54      	ldr	r3, [pc, #336]	@ (8000a8c <MX_GPIO_Init+0x220>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f003 0310 	and.w	r3, r3, #16
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b50      	ldr	r3, [pc, #320]	@ (8000a8c <MX_GPIO_Init+0x220>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a4f      	ldr	r2, [pc, #316]	@ (8000a8c <MX_GPIO_Init+0x220>)
 8000950:	f043 0308 	orr.w	r3, r3, #8
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b4d      	ldr	r3, [pc, #308]	@ (8000a8c <MX_GPIO_Init+0x220>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f003 0308 	and.w	r3, r3, #8
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2116      	movs	r1, #22
 8000966:	484a      	ldr	r0, [pc, #296]	@ (8000a90 <MX_GPIO_Init+0x224>)
 8000968:	f002 f91a 	bl	8002ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	2180      	movs	r1, #128	@ 0x80
 8000970:	4848      	ldr	r0, [pc, #288]	@ (8000a94 <MX_GPIO_Init+0x228>)
 8000972:	f002 f915 	bl	8002ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800097c:	4846      	ldr	r0, [pc, #280]	@ (8000a98 <MX_GPIO_Init+0x22c>)
 800097e:	f002 f90f 	bl	8002ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000988:	4844      	ldr	r0, [pc, #272]	@ (8000a9c <MX_GPIO_Init+0x230>)
 800098a:	f002 f909 	bl	8002ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800098e:	2316      	movs	r3, #22
 8000990:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009a2:	4619      	mov	r1, r3
 80009a4:	483a      	ldr	r0, [pc, #232]	@ (8000a90 <MX_GPIO_Init+0x224>)
 80009a6:	f001 ff37 	bl	8002818 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 80009aa:	2301      	movs	r3, #1
 80009ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ba:	4619      	mov	r1, r3
 80009bc:	4835      	ldr	r0, [pc, #212]	@ (8000a94 <MX_GPIO_Init+0x228>)
 80009be:	f001 ff2b 	bl	8002818 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80009c2:	f248 0306 	movw	r3, #32774	@ 0x8006
 80009c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009c8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009d6:	4619      	mov	r1, r3
 80009d8:	482e      	ldr	r0, [pc, #184]	@ (8000a94 <MX_GPIO_Init+0x228>)
 80009da:	f001 ff1d 	bl	8002818 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80009de:	2380      	movs	r3, #128	@ 0x80
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009f2:	4619      	mov	r1, r3
 80009f4:	4827      	ldr	r0, [pc, #156]	@ (8000a94 <MX_GPIO_Init+0x228>)
 80009f6:	f001 ff0f 	bl	8002818 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80009fa:	2320      	movs	r3, #32
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009fe:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000a08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4820      	ldr	r0, [pc, #128]	@ (8000a90 <MX_GPIO_Init+0x224>)
 8000a10:	f001 ff02 	bl	8002818 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a14:	2304      	movs	r3, #4
 8000a16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a24:	4619      	mov	r1, r3
 8000a26:	481e      	ldr	r0, [pc, #120]	@ (8000aa0 <MX_GPIO_Init+0x234>)
 8000a28:	f001 fef6 	bl	8002818 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000a2c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000a30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4815      	ldr	r0, [pc, #84]	@ (8000a98 <MX_GPIO_Init+0x22c>)
 8000a42:	f001 fee9 	bl	8002818 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000a46:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000a4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	480e      	ldr	r0, [pc, #56]	@ (8000a98 <MX_GPIO_Init+0x22c>)
 8000a60:	f001 feda 	bl	8002818 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000a64:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000a68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4807      	ldr	r0, [pc, #28]	@ (8000a9c <MX_GPIO_Init+0x230>)
 8000a7e:	f001 fecb 	bl	8002818 <HAL_GPIO_Init>

}
 8000a82:	bf00      	nop
 8000a84:	3738      	adds	r7, #56	@ 0x38
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020800 	.word	0x40020800
 8000a94:	40020000 	.word	0x40020000
 8000a98:	40020c00 	.word	0x40020c00
 8000a9c:	40021800 	.word	0x40021800
 8000aa0:	40020400 	.word	0x40020400

08000aa4 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b18 <MX_I2C3_Init+0x74>)
 8000aaa:	4a1c      	ldr	r2, [pc, #112]	@ (8000b1c <MX_I2C3_Init+0x78>)
 8000aac:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000aae:	4b1a      	ldr	r3, [pc, #104]	@ (8000b18 <MX_I2C3_Init+0x74>)
 8000ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b20 <MX_I2C3_Init+0x7c>)
 8000ab2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ab4:	4b18      	ldr	r3, [pc, #96]	@ (8000b18 <MX_I2C3_Init+0x74>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000aba:	4b17      	ldr	r3, [pc, #92]	@ (8000b18 <MX_I2C3_Init+0x74>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac0:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <MX_I2C3_Init+0x74>)
 8000ac2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ac6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac8:	4b13      	ldr	r3, [pc, #76]	@ (8000b18 <MX_I2C3_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000ace:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <MX_I2C3_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad4:	4b10      	ldr	r3, [pc, #64]	@ (8000b18 <MX_I2C3_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ada:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <MX_I2C3_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ae0:	480d      	ldr	r0, [pc, #52]	@ (8000b18 <MX_I2C3_Init+0x74>)
 8000ae2:	f003 fe37 	bl	8004754 <HAL_I2C_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000aec:	f000 fd08 	bl	8001500 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000af0:	2100      	movs	r1, #0
 8000af2:	4809      	ldr	r0, [pc, #36]	@ (8000b18 <MX_I2C3_Init+0x74>)
 8000af4:	f003 ff72 	bl	80049dc <HAL_I2CEx_ConfigAnalogFilter>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000afe:	f000 fcff 	bl	8001500 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b02:	2100      	movs	r1, #0
 8000b04:	4804      	ldr	r0, [pc, #16]	@ (8000b18 <MX_I2C3_Init+0x74>)
 8000b06:	f003 ffa5 	bl	8004a54 <HAL_I2CEx_ConfigDigitalFilter>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000b10:	f000 fcf6 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	200000b0 	.word	0x200000b0
 8000b1c:	40005c00 	.word	0x40005c00
 8000b20:	000186a0 	.word	0x000186a0

08000b24 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	@ 0x28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a29      	ldr	r2, [pc, #164]	@ (8000be8 <HAL_I2C_MspInit+0xc4>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d14b      	bne.n	8000bde <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	4b28      	ldr	r3, [pc, #160]	@ (8000bec <HAL_I2C_MspInit+0xc8>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	4a27      	ldr	r2, [pc, #156]	@ (8000bec <HAL_I2C_MspInit+0xc8>)
 8000b50:	f043 0304 	orr.w	r3, r3, #4
 8000b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b56:	4b25      	ldr	r3, [pc, #148]	@ (8000bec <HAL_I2C_MspInit+0xc8>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	f003 0304 	and.w	r3, r3, #4
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	4b21      	ldr	r3, [pc, #132]	@ (8000bec <HAL_I2C_MspInit+0xc8>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	4a20      	ldr	r2, [pc, #128]	@ (8000bec <HAL_I2C_MspInit+0xc8>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b72:	4b1e      	ldr	r3, [pc, #120]	@ (8000bec <HAL_I2C_MspInit+0xc8>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000b7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b84:	2312      	movs	r3, #18
 8000b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b90:	2304      	movs	r3, #4
 8000b92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4815      	ldr	r0, [pc, #84]	@ (8000bf0 <HAL_I2C_MspInit+0xcc>)
 8000b9c:	f001 fe3c 	bl	8002818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000ba0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ba6:	2312      	movs	r3, #18
 8000ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000baa:	2301      	movs	r3, #1
 8000bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bb2:	2304      	movs	r3, #4
 8000bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	480d      	ldr	r0, [pc, #52]	@ (8000bf4 <HAL_I2C_MspInit+0xd0>)
 8000bbe:	f001 fe2b 	bl	8002818 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	4b09      	ldr	r3, [pc, #36]	@ (8000bec <HAL_I2C_MspInit+0xc8>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bca:	4a08      	ldr	r2, [pc, #32]	@ (8000bec <HAL_I2C_MspInit+0xc8>)
 8000bcc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000bd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bd2:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <HAL_I2C_MspInit+0xc8>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000bde:	bf00      	nop
 8000be0:	3728      	adds	r7, #40	@ 0x28
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40005c00 	.word	0x40005c00
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020800 	.word	0x40020800
 8000bf4:	40020000 	.word	0x40020000

08000bf8 <lcd_cmd>:
		CMD(COLMOD), 0x05, // chosen 16-bit, R5, G6, B5
		CMD(MAC), 0x48, //in documentation this means BGR but it turned out to be RGB, also it set (0,0) to up left corner
		CMD(POS_GAMMA_COR), 0x1F, 0x1A, 0x18, 0x0A, 0x0F, 0x06, 0x45, 0x87, 0x32, 0x0A, 0x07, 0x02, 0x07, 0x05, 0x00,
		CMD(NEG_GAMMA_COR), 0x00, 0x25, 0x27, 0x05, 0x10, 0x09, 0x3A, 0x56, 0x4C, 0x05, 0x0D, 0x0C, 0x2E, 0x2F, 0x0F,
};
static void lcd_cmd(uint8_t cmd){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_RESET); //teraz komendy
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c08:	480b      	ldr	r0, [pc, #44]	@ (8000c38 <lcd_cmd+0x40>)
 8000c0a:	f001 ffc9 	bl	8002ba0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2104      	movs	r1, #4
 8000c12:	480a      	ldr	r0, [pc, #40]	@ (8000c3c <lcd_cmd+0x44>)
 8000c14:	f001 ffc4 	bl	8002ba0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &cmd, 1, HAL_MAX_DELAY);
 8000c18:	1df9      	adds	r1, r7, #7
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c1e:	2201      	movs	r2, #1
 8000c20:	4807      	ldr	r0, [pc, #28]	@ (8000c40 <lcd_cmd+0x48>)
 8000c22:	f005 fa06 	bl	8006032 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_SET);
 8000c26:	2201      	movs	r2, #1
 8000c28:	2104      	movs	r1, #4
 8000c2a:	4804      	ldr	r0, [pc, #16]	@ (8000c3c <lcd_cmd+0x44>)
 8000c2c:	f001 ffb8 	bl	8002ba0 <HAL_GPIO_WritePin>
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40020c00 	.word	0x40020c00
 8000c3c:	40020800 	.word	0x40020800
 8000c40:	200259bc 	.word	0x200259bc

08000c44 <lcd_data>:
static void lcd_data(uint8_t data){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_SET); //teraz dane
 8000c4e:	2201      	movs	r2, #1
 8000c50:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c54:	480b      	ldr	r0, [pc, #44]	@ (8000c84 <lcd_data+0x40>)
 8000c56:	f001 ffa3 	bl	8002ba0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2104      	movs	r1, #4
 8000c5e:	480a      	ldr	r0, [pc, #40]	@ (8000c88 <lcd_data+0x44>)
 8000c60:	f001 ff9e 	bl	8002ba0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &data, 1, HAL_MAX_DELAY);
 8000c64:	1df9      	adds	r1, r7, #7
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	4807      	ldr	r0, [pc, #28]	@ (8000c8c <lcd_data+0x48>)
 8000c6e:	f005 f9e0 	bl	8006032 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_SET);
 8000c72:	2201      	movs	r2, #1
 8000c74:	2104      	movs	r1, #4
 8000c76:	4804      	ldr	r0, [pc, #16]	@ (8000c88 <lcd_data+0x44>)
 8000c78:	f001 ff92 	bl	8002ba0 <HAL_GPIO_WritePin>
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40020c00 	.word	0x40020c00
 8000c88:	40020800 	.word	0x40020800
 8000c8c:	200259bc 	.word	0x200259bc

08000c90 <lcd_data16>:
static void lcd_data16(uint16_t value){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	0a1b      	lsrs	r3, r3, #8
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff ffce 	bl	8000c44 <lcd_data>
	lcd_data(value);
 8000ca8:	88fb      	ldrh	r3, [r7, #6]
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ffc9 	bl	8000c44 <lcd_data>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <lcd_send>:
static void lcd_send(uint16_t value){
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 8000cc4:	88fb      	ldrh	r3, [r7, #6]
 8000cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d005      	beq.n	8000cda <lcd_send+0x20>
		lcd_cmd(value);
 8000cce:	88fb      	ldrh	r3, [r7, #6]
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ff90 	bl	8000bf8 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 8000cd8:	e004      	b.n	8000ce4 <lcd_send+0x2a>
		lcd_data(value);
 8000cda:	88fb      	ldrh	r3, [r7, #6]
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff ffb0 	bl	8000c44 <lcd_data>
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <lcd_init>:
void lcd_init(void){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
  chunk_size = (LCD_HEIGHT * LCD_WIDTH) / how_many_chunks;
 8000cf2:	4b23      	ldr	r3, [pc, #140]	@ (8000d80 <lcd_init+0x94>)
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8000cfc:	fb93 f3f2 	sdiv	r3, r3, r2
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	4b20      	ldr	r3, [pc, #128]	@ (8000d84 <lcd_init+0x98>)
 8000d04:	801a      	strh	r2, [r3, #0]
  y_per_chunk = LCD_HEIGHT / how_many_chunks;
 8000d06:	4b1e      	ldr	r3, [pc, #120]	@ (8000d80 <lcd_init+0x94>)
 8000d08:	881b      	ldrh	r3, [r3, #0]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000d10:	fb93 f3f2 	sdiv	r3, r3, r2
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	4b1c      	ldr	r3, [pc, #112]	@ (8000d88 <lcd_init+0x9c>)
 8000d18:	801a      	strh	r2, [r3, #0]

  int i;
  HAL_GPIO_WritePin(RDX_GPIO_Port, RDX_Pin, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d20:	481a      	ldr	r0, [pc, #104]	@ (8000d8c <lcd_init+0xa0>)
 8000d22:	f001 ff3d 	bl	8002ba0 <HAL_GPIO_WritePin>
  HAL_Delay(100); // w nocie 10 mikro sec
 8000d26:	2064      	movs	r0, #100	@ 0x64
 8000d28:	f000 fef8 	bl	8001b1c <HAL_Delay>
  HAL_GPIO_WritePin(RDX_GPIO_Port, RDX_Pin, GPIO_PIN_SET);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d32:	4816      	ldr	r0, [pc, #88]	@ (8000d8c <lcd_init+0xa0>)
 8000d34:	f001 ff34 	bl	8002ba0 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000d38:	2064      	movs	r0, #100	@ 0x64
 8000d3a:	f000 feef 	bl	8001b1c <HAL_Delay>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	e009      	b.n	8000d58 <lcd_init+0x6c>
    lcd_send(init_table[i]);
 8000d44:	4a12      	ldr	r2, [pc, #72]	@ (8000d90 <lcd_init+0xa4>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ffb4 	bl	8000cba <lcd_send>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	3301      	adds	r3, #1
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b35      	cmp	r3, #53	@ 0x35
 8000d5c:	d9f2      	bls.n	8000d44 <lcd_init+0x58>
  }
  HAL_Delay(200);
 8000d5e:	20c8      	movs	r0, #200	@ 0xc8
 8000d60:	f000 fedc 	bl	8001b1c <HAL_Delay>
  lcd_cmd(SLEEP_OUT);
 8000d64:	2011      	movs	r0, #17
 8000d66:	f7ff ff47 	bl	8000bf8 <lcd_cmd>
  HAL_Delay(120);
 8000d6a:	2078      	movs	r0, #120	@ 0x78
 8000d6c:	f000 fed6 	bl	8001b1c <HAL_Delay>
  lcd_cmd(DISPLAY_ON);
 8000d70:	2029      	movs	r0, #41	@ 0x29
 8000d72:	f7ff ff41 	bl	8000bf8 <lcd_cmd>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000000 	.word	0x20000000
 8000d84:	20025906 	.word	0x20025906
 8000d88:	20025908 	.word	0x20025908
 8000d8c:	40020c00 	.word	0x40020c00
 8000d90:	080091bc 	.word	0x080091bc

08000d94 <lcd_set_window>:
static void lcd_set_window(int x, int y, int width, int height){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
 8000da0:	603b      	str	r3, [r7, #0]
	lcd_cmd(COL_ADR_SET);
 8000da2:	202a      	movs	r0, #42	@ 0x2a
 8000da4:	f7ff ff28 	bl	8000bf8 <lcd_cmd>
	lcd_data16(x);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff6f 	bl	8000c90 <lcd_data16>
	lcd_data16(x+width-1);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	4413      	add	r3, r2
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff ff64 	bl	8000c90 <lcd_data16>
	lcd_cmd(PAGE_ADR_SET);
 8000dc8:	202b      	movs	r0, #43	@ 0x2b
 8000dca:	f7ff ff15 	bl	8000bf8 <lcd_cmd>
	lcd_data16(y);
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ff5c 	bl	8000c90 <lcd_data16>
	lcd_data16(y+height-1);
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	4413      	add	r3, r2
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	3b01      	subs	r3, #1
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff51 	bl	8000c90 <lcd_data16>
}
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <lcd_put_pixel>:
	lcd_cmd(MEM_WRITE);
	for(int i=0;i<width*height;i++){
		lcd_data16(color); //start pos accoridng to MADCTL setting ( i named it MAC)
	}
}
void lcd_put_pixel(int x, int y, uint16_t color){
 8000df8:	b480      	push	{r7}
 8000dfa:	b087      	sub	sp, #28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	4613      	mov	r3, r2
 8000e04:	80fb      	strh	r3, [r7, #6]
	screen_buffer[ (LCD_WIDTH*y) + x] = __REV16(color); //to make send most significant bit first
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	ba5b      	rev16	r3, r3
 8000e0e:	613b      	str	r3, [r7, #16]
  return result;
 8000e10:	6939      	ldr	r1, [r7, #16]
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	4613      	mov	r3, r2
 8000e16:	011b      	lsls	r3, r3, #4
 8000e18:	1a9b      	subs	r3, r3, r2
 8000e1a:	011b      	lsls	r3, r3, #4
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	4413      	add	r3, r2
 8000e22:	b289      	uxth	r1, r1
 8000e24:	4a04      	ldr	r2, [pc, #16]	@ (8000e38 <lcd_put_pixel+0x40>)
 8000e26:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8000e2a:	bf00      	nop
 8000e2c:	371c      	adds	r7, #28
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000104 	.word	0x20000104

08000e3c <lcd_update>:
void lcd_update(void){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
	current_chunk = 0;
 8000e40:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb0 <lcd_update+0x74>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	801a      	strh	r2, [r3, #0]
	lcd_set_window(0, current_chunk*y_per_chunk, LCD_WIDTH, LCD_HEIGHT/how_many_chunks);
 8000e46:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb0 <lcd_update+0x74>)
 8000e48:	881b      	ldrh	r3, [r3, #0]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	4b19      	ldr	r3, [pc, #100]	@ (8000eb4 <lcd_update+0x78>)
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	fb03 f102 	mul.w	r1, r3, r2
 8000e54:	4b18      	ldr	r3, [pc, #96]	@ (8000eb8 <lcd_update+0x7c>)
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000e5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8000e62:	22f0      	movs	r2, #240	@ 0xf0
 8000e64:	2000      	movs	r0, #0
 8000e66:	f7ff ff95 	bl	8000d94 <lcd_set_window>
	lcd_cmd(MEM_WRITE);
 8000e6a:	202c      	movs	r0, #44	@ 0x2c
 8000e6c:	f7ff fec4 	bl	8000bf8 <lcd_cmd>
	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_SET);
 8000e70:	2201      	movs	r2, #1
 8000e72:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e76:	4811      	ldr	r0, [pc, #68]	@ (8000ebc <lcd_update+0x80>)
 8000e78:	f001 fe92 	bl	8002ba0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2104      	movs	r1, #4
 8000e80:	480f      	ldr	r0, [pc, #60]	@ (8000ec0 <lcd_update+0x84>)
 8000e82:	f001 fe8d 	bl	8002ba0 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit_DMA(&hspi5, (uint8_t*)(screen_buffer + (current_chunk * chunk_size)), 2*chunk_size);
 8000e86:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb0 <lcd_update+0x74>)
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec4 <lcd_update+0x88>)
 8000e8e:	881b      	ldrh	r3, [r3, #0]
 8000e90:	fb02 f303 	mul.w	r3, r2, r3
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	4a0c      	ldr	r2, [pc, #48]	@ (8000ec8 <lcd_update+0x8c>)
 8000e98:	1899      	adds	r1, r3, r2
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <lcd_update+0x88>)
 8000e9c:	881b      	ldrh	r3, [r3, #0]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4809      	ldr	r0, [pc, #36]	@ (8000ecc <lcd_update+0x90>)
 8000ea6:	f005 fa09 	bl	80062bc <HAL_SPI_Transmit_DMA>
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20025904 	.word	0x20025904
 8000eb4:	20025908 	.word	0x20025908
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	40020c00 	.word	0x40020c00
 8000ec0:	40020800 	.word	0x40020800
 8000ec4:	20025906 	.word	0x20025906
 8000ec8:	20000104 	.word	0x20000104
 8000ecc:	200259bc 	.word	0x200259bc

08000ed0 <lcd_transfer_done>:
void lcd_transfer_done(void){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	2104      	movs	r1, #4
 8000ed8:	4802      	ldr	r0, [pc, #8]	@ (8000ee4 <lcd_transfer_done+0x14>)
 8000eda:	f001 fe61 	bl	8002ba0 <HAL_GPIO_WritePin>
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40020800 	.word	0x40020800

08000ee8 <send_next_chunk>:
bool lcd_is_busy(void){
	if (HAL_SPI_GetState(&hspi5) == HAL_SPI_STATE_BUSY) return true;
	else return false;
}
void send_next_chunk(void){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	lcd_set_window(0, current_chunk*y_per_chunk, LCD_WIDTH, LCD_HEIGHT/how_many_chunks);
 8000eec:	4b19      	ldr	r3, [pc, #100]	@ (8000f54 <send_next_chunk+0x6c>)
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b19      	ldr	r3, [pc, #100]	@ (8000f58 <send_next_chunk+0x70>)
 8000ef4:	881b      	ldrh	r3, [r3, #0]
 8000ef6:	fb03 f102 	mul.w	r1, r3, r2
 8000efa:	4b18      	ldr	r3, [pc, #96]	@ (8000f5c <send_next_chunk+0x74>)
 8000efc:	881b      	ldrh	r3, [r3, #0]
 8000efe:	461a      	mov	r2, r3
 8000f00:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000f04:	fb93 f3f2 	sdiv	r3, r3, r2
 8000f08:	22f0      	movs	r2, #240	@ 0xf0
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	f7ff ff42 	bl	8000d94 <lcd_set_window>
	lcd_cmd(MEM_WRITE);
 8000f10:	202c      	movs	r0, #44	@ 0x2c
 8000f12:	f7ff fe71 	bl	8000bf8 <lcd_cmd>
	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_SET);
 8000f16:	2201      	movs	r2, #1
 8000f18:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f1c:	4810      	ldr	r0, [pc, #64]	@ (8000f60 <send_next_chunk+0x78>)
 8000f1e:	f001 fe3f 	bl	8002ba0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2104      	movs	r1, #4
 8000f26:	480f      	ldr	r0, [pc, #60]	@ (8000f64 <send_next_chunk+0x7c>)
 8000f28:	f001 fe3a 	bl	8002ba0 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit_DMA(&hspi5, (uint8_t*)(screen_buffer + (current_chunk * chunk_size)), 2*chunk_size);
 8000f2c:	4b09      	ldr	r3, [pc, #36]	@ (8000f54 <send_next_chunk+0x6c>)
 8000f2e:	881b      	ldrh	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b0d      	ldr	r3, [pc, #52]	@ (8000f68 <send_next_chunk+0x80>)
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	fb02 f303 	mul.w	r3, r2, r3
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f6c <send_next_chunk+0x84>)
 8000f3e:	1899      	adds	r1, r3, r2
 8000f40:	4b09      	ldr	r3, [pc, #36]	@ (8000f68 <send_next_chunk+0x80>)
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4809      	ldr	r0, [pc, #36]	@ (8000f70 <send_next_chunk+0x88>)
 8000f4c:	f005 f9b6 	bl	80062bc <HAL_SPI_Transmit_DMA>
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20025904 	.word	0x20025904
 8000f58:	20025908 	.word	0x20025908
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	40020c00 	.word	0x40020c00
 8000f64:	40020800 	.word	0x40020800
 8000f68:	20025906 	.word	0x20025906
 8000f6c:	20000104 	.word	0x20000104
 8000f70:	200259bc 	.word	0x200259bc

08000f74 <go_for_next_chunk>:
void go_for_next_chunk(void){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	current_chunk++;
 8000f78:	4b09      	ldr	r3, [pc, #36]	@ (8000fa0 <go_for_next_chunk+0x2c>)
 8000f7a:	881b      	ldrh	r3, [r3, #0]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	4b07      	ldr	r3, [pc, #28]	@ (8000fa0 <go_for_next_chunk+0x2c>)
 8000f82:	801a      	strh	r2, [r3, #0]
	if (current_chunk < how_many_chunks) {
 8000f84:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <go_for_next_chunk+0x2c>)
 8000f86:	881a      	ldrh	r2, [r3, #0]
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <go_for_next_chunk+0x30>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d202      	bcs.n	8000f96 <go_for_next_chunk+0x22>
		send_next_chunk();
 8000f90:	f7ff ffaa 	bl	8000ee8 <send_next_chunk>
	}
	else {
		lcd_transfer_done();
	}
}
 8000f94:	e001      	b.n	8000f9a <go_for_next_chunk+0x26>
		lcd_transfer_done();
 8000f96:	f7ff ff9b 	bl	8000ed0 <lcd_transfer_done>
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20025904 	.word	0x20025904
 8000fa4:	20000000 	.word	0x20000000

08000fa8 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08e      	sub	sp, #56	@ 0x38
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	2234      	movs	r2, #52	@ 0x34
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f008 f8bb 	bl	8009130 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000fba:	4b39      	ldr	r3, [pc, #228]	@ (80010a0 <MX_LTDC_Init+0xf8>)
 8000fbc:	4a39      	ldr	r2, [pc, #228]	@ (80010a4 <MX_LTDC_Init+0xfc>)
 8000fbe:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000fc0:	4b37      	ldr	r3, [pc, #220]	@ (80010a0 <MX_LTDC_Init+0xf8>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000fc6:	4b36      	ldr	r3, [pc, #216]	@ (80010a0 <MX_LTDC_Init+0xf8>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000fcc:	4b34      	ldr	r3, [pc, #208]	@ (80010a0 <MX_LTDC_Init+0xf8>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000fd2:	4b33      	ldr	r3, [pc, #204]	@ (80010a0 <MX_LTDC_Init+0xf8>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000fd8:	4b31      	ldr	r3, [pc, #196]	@ (80010a0 <MX_LTDC_Init+0xf8>)
 8000fda:	2209      	movs	r2, #9
 8000fdc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000fde:	4b30      	ldr	r3, [pc, #192]	@ (80010a0 <MX_LTDC_Init+0xf8>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000fe4:	4b2e      	ldr	r3, [pc, #184]	@ (80010a0 <MX_LTDC_Init+0xf8>)
 8000fe6:	221d      	movs	r2, #29
 8000fe8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000fea:	4b2d      	ldr	r3, [pc, #180]	@ (80010a0 <MX_LTDC_Init+0xf8>)
 8000fec:	2203      	movs	r2, #3
 8000fee:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000ff0:	4b2b      	ldr	r3, [pc, #172]	@ (80010a0 <MX_LTDC_Init+0xf8>)
 8000ff2:	f240 120d 	movw	r2, #269	@ 0x10d
 8000ff6:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000ff8:	4b29      	ldr	r3, [pc, #164]	@ (80010a0 <MX_LTDC_Init+0xf8>)
 8000ffa:	f240 1243 	movw	r2, #323	@ 0x143
 8000ffe:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 8001000:	4b27      	ldr	r3, [pc, #156]	@ (80010a0 <MX_LTDC_Init+0xf8>)
 8001002:	f240 1217 	movw	r2, #279	@ 0x117
 8001006:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 8001008:	4b25      	ldr	r3, [pc, #148]	@ (80010a0 <MX_LTDC_Init+0xf8>)
 800100a:	f240 1247 	movw	r2, #327	@ 0x147
 800100e:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001010:	4b23      	ldr	r3, [pc, #140]	@ (80010a0 <MX_LTDC_Init+0xf8>)
 8001012:	2200      	movs	r2, #0
 8001014:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001018:	4b21      	ldr	r3, [pc, #132]	@ (80010a0 <MX_LTDC_Init+0xf8>)
 800101a:	2200      	movs	r2, #0
 800101c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001020:	4b1f      	ldr	r3, [pc, #124]	@ (80010a0 <MX_LTDC_Init+0xf8>)
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001028:	481d      	ldr	r0, [pc, #116]	@ (80010a0 <MX_LTDC_Init+0xf8>)
 800102a:	f003 fd53 	bl	8004ad4 <HAL_LTDC_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001034:	f000 fa64 	bl	8001500 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 800103c:	23f0      	movs	r3, #240	@ 0xf0
 800103e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8001044:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001048:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800104a:	2302      	movs	r3, #2
 800104c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800104e:	23ff      	movs	r3, #255	@ 0xff
 8001050:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001056:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800105a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800105c:	2307      	movs	r3, #7
 800105e:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8001060:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8001064:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 8001066:	23f0      	movs	r3, #240	@ 0xf0
 8001068:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 800106a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800106e:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	2200      	movs	r2, #0
 8001086:	4619      	mov	r1, r3
 8001088:	4805      	ldr	r0, [pc, #20]	@ (80010a0 <MX_LTDC_Init+0xf8>)
 800108a:	f003 feb5 	bl	8004df8 <HAL_LTDC_ConfigLayer>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8001094:	f000 fa34 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001098:	bf00      	nop
 800109a:	3738      	adds	r7, #56	@ 0x38
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	2002590c 	.word	0x2002590c
 80010a4:	40016800 	.word	0x40016800

080010a8 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b09a      	sub	sp, #104	@ 0x68
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010c4:	2230      	movs	r2, #48	@ 0x30
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f008 f831 	bl	8009130 <memset>
  if(ltdcHandle->Instance==LTDC)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a85      	ldr	r2, [pc, #532]	@ (80012e8 <HAL_LTDC_MspInit+0x240>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	f040 8102 	bne.w	80012de <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80010da:	2308      	movs	r3, #8
 80010dc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80010de:	2332      	movs	r3, #50	@ 0x32
 80010e0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80010e2:	2302      	movs	r3, #2
 80010e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80010e6:	2300      	movs	r3, #0
 80010e8:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ee:	4618      	mov	r0, r3
 80010f0:	f004 fd22 	bl	8005b38 <HAL_RCCEx_PeriphCLKConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80010fa:	f000 fa01 	bl	8001500 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	623b      	str	r3, [r7, #32]
 8001102:	4b7a      	ldr	r3, [pc, #488]	@ (80012ec <HAL_LTDC_MspInit+0x244>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001106:	4a79      	ldr	r2, [pc, #484]	@ (80012ec <HAL_LTDC_MspInit+0x244>)
 8001108:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800110c:	6453      	str	r3, [r2, #68]	@ 0x44
 800110e:	4b77      	ldr	r3, [pc, #476]	@ (80012ec <HAL_LTDC_MspInit+0x244>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001112:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001116:	623b      	str	r3, [r7, #32]
 8001118:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
 800111e:	4b73      	ldr	r3, [pc, #460]	@ (80012ec <HAL_LTDC_MspInit+0x244>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	4a72      	ldr	r2, [pc, #456]	@ (80012ec <HAL_LTDC_MspInit+0x244>)
 8001124:	f043 0320 	orr.w	r3, r3, #32
 8001128:	6313      	str	r3, [r2, #48]	@ 0x30
 800112a:	4b70      	ldr	r3, [pc, #448]	@ (80012ec <HAL_LTDC_MspInit+0x244>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	f003 0320 	and.w	r3, r3, #32
 8001132:	61fb      	str	r3, [r7, #28]
 8001134:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
 800113a:	4b6c      	ldr	r3, [pc, #432]	@ (80012ec <HAL_LTDC_MspInit+0x244>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	4a6b      	ldr	r2, [pc, #428]	@ (80012ec <HAL_LTDC_MspInit+0x244>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6313      	str	r3, [r2, #48]	@ 0x30
 8001146:	4b69      	ldr	r3, [pc, #420]	@ (80012ec <HAL_LTDC_MspInit+0x244>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	61bb      	str	r3, [r7, #24]
 8001150:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	4b65      	ldr	r3, [pc, #404]	@ (80012ec <HAL_LTDC_MspInit+0x244>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	4a64      	ldr	r2, [pc, #400]	@ (80012ec <HAL_LTDC_MspInit+0x244>)
 800115c:	f043 0302 	orr.w	r3, r3, #2
 8001160:	6313      	str	r3, [r2, #48]	@ 0x30
 8001162:	4b62      	ldr	r3, [pc, #392]	@ (80012ec <HAL_LTDC_MspInit+0x244>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	4b5e      	ldr	r3, [pc, #376]	@ (80012ec <HAL_LTDC_MspInit+0x244>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	4a5d      	ldr	r2, [pc, #372]	@ (80012ec <HAL_LTDC_MspInit+0x244>)
 8001178:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800117c:	6313      	str	r3, [r2, #48]	@ 0x30
 800117e:	4b5b      	ldr	r3, [pc, #364]	@ (80012ec <HAL_LTDC_MspInit+0x244>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b57      	ldr	r3, [pc, #348]	@ (80012ec <HAL_LTDC_MspInit+0x244>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	4a56      	ldr	r2, [pc, #344]	@ (80012ec <HAL_LTDC_MspInit+0x244>)
 8001194:	f043 0304 	orr.w	r3, r3, #4
 8001198:	6313      	str	r3, [r2, #48]	@ 0x30
 800119a:	4b54      	ldr	r3, [pc, #336]	@ (80012ec <HAL_LTDC_MspInit+0x244>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	f003 0304 	and.w	r3, r3, #4
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	4b50      	ldr	r3, [pc, #320]	@ (80012ec <HAL_LTDC_MspInit+0x244>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	4a4f      	ldr	r2, [pc, #316]	@ (80012ec <HAL_LTDC_MspInit+0x244>)
 80011b0:	f043 0308 	orr.w	r3, r3, #8
 80011b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b6:	4b4d      	ldr	r3, [pc, #308]	@ (80012ec <HAL_LTDC_MspInit+0x244>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80011c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011c6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c8:	2302      	movs	r3, #2
 80011ca:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2300      	movs	r3, #0
 80011d2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011d4:	230e      	movs	r3, #14
 80011d6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80011d8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011dc:	4619      	mov	r1, r3
 80011de:	4844      	ldr	r0, [pc, #272]	@ (80012f0 <HAL_LTDC_MspInit+0x248>)
 80011e0:	f001 fb1a 	bl	8002818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80011e4:	f641 0358 	movw	r3, #6232	@ 0x1858
 80011e8:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011f6:	230e      	movs	r3, #14
 80011f8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011fe:	4619      	mov	r1, r3
 8001200:	483c      	ldr	r0, [pc, #240]	@ (80012f4 <HAL_LTDC_MspInit+0x24c>)
 8001202:	f001 fb09 	bl	8002818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001206:	2303      	movs	r3, #3
 8001208:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001216:	2309      	movs	r3, #9
 8001218:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800121e:	4619      	mov	r1, r3
 8001220:	4835      	ldr	r0, [pc, #212]	@ (80012f8 <HAL_LTDC_MspInit+0x250>)
 8001222:	f001 faf9 	bl	8002818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001226:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800122a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2300      	movs	r3, #0
 8001236:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001238:	230e      	movs	r3, #14
 800123a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001240:	4619      	mov	r1, r3
 8001242:	482d      	ldr	r0, [pc, #180]	@ (80012f8 <HAL_LTDC_MspInit+0x250>)
 8001244:	f001 fae8 	bl	8002818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001248:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800124c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800125a:	230e      	movs	r3, #14
 800125c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800125e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001262:	4619      	mov	r1, r3
 8001264:	4825      	ldr	r0, [pc, #148]	@ (80012fc <HAL_LTDC_MspInit+0x254>)
 8001266:	f001 fad7 	bl	8002818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800126a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800126e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800127c:	230e      	movs	r3, #14
 800127e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001280:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001284:	4619      	mov	r1, r3
 8001286:	481e      	ldr	r0, [pc, #120]	@ (8001300 <HAL_LTDC_MspInit+0x258>)
 8001288:	f001 fac6 	bl	8002818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2D6_Pin;
 800128c:	2348      	movs	r3, #72	@ 0x48
 800128e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800129c:	230e      	movs	r3, #14
 800129e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012a0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012a4:	4619      	mov	r1, r3
 80012a6:	4817      	ldr	r0, [pc, #92]	@ (8001304 <HAL_LTDC_MspInit+0x25c>)
 80012a8:	f001 fab6 	bl	8002818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80012ac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012b0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80012be:	2309      	movs	r3, #9
 80012c0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012c2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012c6:	4619      	mov	r1, r3
 80012c8:	480c      	ldr	r0, [pc, #48]	@ (80012fc <HAL_LTDC_MspInit+0x254>)
 80012ca:	f001 faa5 	bl	8002818 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2105      	movs	r1, #5
 80012d2:	2058      	movs	r0, #88	@ 0x58
 80012d4:	f000 fcfe 	bl	8001cd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80012d8:	2058      	movs	r0, #88	@ 0x58
 80012da:	f000 fd17 	bl	8001d0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80012de:	bf00      	nop
 80012e0:	3768      	adds	r7, #104	@ 0x68
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40016800 	.word	0x40016800
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40021400 	.word	0x40021400
 80012f4:	40020000 	.word	0x40020000
 80012f8:	40020400 	.word	0x40020400
 80012fc:	40021800 	.word	0x40021800
 8001300:	40020800 	.word	0x40020800
 8001304:	40020c00 	.word	0x40020c00

08001308 <click_led>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void click_led(){
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	static uint8_t clicked;
	static uint32_t time;
	if(HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin)==GPIO_PIN_SET){
 800130c:	2101      	movs	r1, #1
 800130e:	4815      	ldr	r0, [pc, #84]	@ (8001364 <click_led+0x5c>)
 8001310:	f001 fc2e 	bl	8002b70 <HAL_GPIO_ReadPin>
 8001314:	4603      	mov	r3, r0
 8001316:	2b01      	cmp	r3, #1
 8001318:	d11e      	bne.n	8001358 <click_led+0x50>
		if((HAL_GetTick()-time)>50){
 800131a:	f000 fbf3 	bl	8001b04 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <click_led+0x60>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b32      	cmp	r3, #50	@ 0x32
 8001328:	d919      	bls.n	800135e <click_led+0x56>
			time=HAL_GetTick();
 800132a:	f000 fbeb 	bl	8001b04 <HAL_GetTick>
 800132e:	4603      	mov	r3, r0
 8001330:	4a0d      	ldr	r2, [pc, #52]	@ (8001368 <click_led+0x60>)
 8001332:	6013      	str	r3, [r2, #0]
			if(clicked==0){
 8001334:	4b0d      	ldr	r3, [pc, #52]	@ (800136c <click_led+0x64>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d110      	bne.n	800135e <click_led+0x56>
				clicked=1;
 800133c:	4b0b      	ldr	r3, [pc, #44]	@ (800136c <click_led+0x64>)
 800133e:	2201      	movs	r2, #1
 8001340:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001342:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001346:	480a      	ldr	r0, [pc, #40]	@ (8001370 <click_led+0x68>)
 8001348:	f001 fc43 	bl	8002bd2 <HAL_GPIO_TogglePin>
				time=HAL_GetTick();
 800134c:	f000 fbda 	bl	8001b04 <HAL_GetTick>
 8001350:	4603      	mov	r3, r0
 8001352:	4a05      	ldr	r2, [pc, #20]	@ (8001368 <click_led+0x60>)
 8001354:	6013      	str	r3, [r2, #0]
		}
	}
	else{
		clicked=0;
	}
}
 8001356:	e002      	b.n	800135e <click_led+0x56>
		clicked=0;
 8001358:	4b04      	ldr	r3, [pc, #16]	@ (800136c <click_led+0x64>)
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40020000 	.word	0x40020000
 8001368:	200259b4 	.word	0x200259b4
 800136c:	200259b8 	.word	0x200259b8
 8001370:	40021800 	.word	0x40021800

08001374 <HAL_SPI_TxCpltCallback>:
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi5){
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a04      	ldr	r2, [pc, #16]	@ (8001390 <HAL_SPI_TxCpltCallback+0x1c>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d101      	bne.n	8001388 <HAL_SPI_TxCpltCallback+0x14>
		go_for_next_chunk();
 8001384:	f7ff fdf6 	bl	8000f74 <go_for_next_chunk>
	}
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	200259bc 	.word	0x200259bc

08001394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800139a:	f000 fb7d 	bl	8001a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800139e:	f000 f833 	bl	8001408 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a2:	f7ff fa63 	bl	800086c <MX_GPIO_Init>
  MX_DMA_Init();
 80013a6:	f7ff f8ef 	bl	8000588 <MX_DMA_Init>
  MX_CRC_Init();
 80013aa:	f7ff f8b7 	bl	800051c <MX_CRC_Init>
  MX_DMA2D_Init();
 80013ae:	f7ff f90b 	bl	80005c8 <MX_DMA2D_Init>
  MX_FMC_Init();
 80013b2:	f7ff f963 	bl	800067c <MX_FMC_Init>
  MX_I2C3_Init();
 80013b6:	f7ff fb75 	bl	8000aa4 <MX_I2C3_Init>
  MX_LTDC_Init();
 80013ba:	f7ff fdf5 	bl	8000fa8 <MX_LTDC_Init>
  MX_SPI5_Init();
 80013be:	f000 f8a5 	bl	800150c <MX_SPI5_Init>
  MX_TIM1_Init();
 80013c2:	f000 fa5b 	bl	800187c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80013c6:	f000 facb 	bl	8001960 <MX_USART1_UART_Init>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  lcd_init();
 80013ca:	f7ff fc8f 	bl	8000cec <lcd_init>
  for (int y = 0; y < LCD_HEIGHT; y++) {
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	e010      	b.n	80013f6 <main+0x62>
    for (int x = 0; x < LCD_WIDTH; x++) {
 80013d4:	2300      	movs	r3, #0
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	e007      	b.n	80013ea <main+0x56>
      lcd_put_pixel(x, y, BLUE);
 80013da:	221f      	movs	r2, #31
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	6838      	ldr	r0, [r7, #0]
 80013e0:	f7ff fd0a 	bl	8000df8 <lcd_put_pixel>
    for (int x = 0; x < LCD_WIDTH; x++) {
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	3301      	adds	r3, #1
 80013e8:	603b      	str	r3, [r7, #0]
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	2bef      	cmp	r3, #239	@ 0xef
 80013ee:	ddf4      	ble.n	80013da <main+0x46>
  for (int y = 0; y < LCD_HEIGHT; y++) {
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3301      	adds	r3, #1
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80013fc:	dbea      	blt.n	80013d4 <main+0x40>
    }
  }
  lcd_update();
 80013fe:	f7ff fd1d 	bl	8000e3c <lcd_update>
  while (1)
  {
	  click_led();
 8001402:	f7ff ff81 	bl	8001308 <click_led>
 8001406:	e7fc      	b.n	8001402 <main+0x6e>

08001408 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b094      	sub	sp, #80	@ 0x50
 800140c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800140e:	f107 0320 	add.w	r3, r7, #32
 8001412:	2230      	movs	r2, #48	@ 0x30
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f007 fe8a 	bl	8009130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800142c:	2300      	movs	r3, #0
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	4b28      	ldr	r3, [pc, #160]	@ (80014d4 <SystemClock_Config+0xcc>)
 8001432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001434:	4a27      	ldr	r2, [pc, #156]	@ (80014d4 <SystemClock_Config+0xcc>)
 8001436:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800143a:	6413      	str	r3, [r2, #64]	@ 0x40
 800143c:	4b25      	ldr	r3, [pc, #148]	@ (80014d4 <SystemClock_Config+0xcc>)
 800143e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001440:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001448:	2300      	movs	r3, #0
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	4b22      	ldr	r3, [pc, #136]	@ (80014d8 <SystemClock_Config+0xd0>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001454:	4a20      	ldr	r2, [pc, #128]	@ (80014d8 <SystemClock_Config+0xd0>)
 8001456:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	4b1e      	ldr	r3, [pc, #120]	@ (80014d8 <SystemClock_Config+0xd0>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001468:	2301      	movs	r3, #1
 800146a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800146c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001470:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001472:	2302      	movs	r3, #2
 8001474:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001476:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800147a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800147c:	2304      	movs	r3, #4
 800147e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001480:	2348      	movs	r3, #72	@ 0x48
 8001482:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001484:	2302      	movs	r3, #2
 8001486:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001488:	2303      	movs	r3, #3
 800148a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800148c:	f107 0320 	add.w	r3, r7, #32
 8001490:	4618      	mov	r0, r3
 8001492:	f003 fe87 	bl	80051a4 <HAL_RCC_OscConfig>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800149c:	f000 f830 	bl	8001500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a0:	230f      	movs	r3, #15
 80014a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014a4:	2302      	movs	r3, #2
 80014a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014b6:	f107 030c 	add.w	r3, r7, #12
 80014ba:	2102      	movs	r1, #2
 80014bc:	4618      	mov	r0, r3
 80014be:	f004 f8e9 	bl	8005694 <HAL_RCC_ClockConfig>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80014c8:	f000 f81a 	bl	8001500 <Error_Handler>
  }
}
 80014cc:	bf00      	nop
 80014ce:	3750      	adds	r7, #80	@ 0x50
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40007000 	.word	0x40007000

080014dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a04      	ldr	r2, [pc, #16]	@ (80014fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d101      	bne.n	80014f2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80014ee:	f000 faf5 	bl	8001adc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40001000 	.word	0x40001000

08001500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001504:	b672      	cpsid	i
}
 8001506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <Error_Handler+0x8>

0800150c <MX_SPI5_Init>:
SPI_HandleTypeDef hspi5;
DMA_HandleTypeDef hdma_spi5_tx;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001510:	4b17      	ldr	r3, [pc, #92]	@ (8001570 <MX_SPI5_Init+0x64>)
 8001512:	4a18      	ldr	r2, [pc, #96]	@ (8001574 <MX_SPI5_Init+0x68>)
 8001514:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001516:	4b16      	ldr	r3, [pc, #88]	@ (8001570 <MX_SPI5_Init+0x64>)
 8001518:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800151c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800151e:	4b14      	ldr	r3, [pc, #80]	@ (8001570 <MX_SPI5_Init+0x64>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001524:	4b12      	ldr	r3, [pc, #72]	@ (8001570 <MX_SPI5_Init+0x64>)
 8001526:	2200      	movs	r2, #0
 8001528:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800152a:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <MX_SPI5_Init+0x64>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001530:	4b0f      	ldr	r3, [pc, #60]	@ (8001570 <MX_SPI5_Init+0x64>)
 8001532:	2200      	movs	r2, #0
 8001534:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001536:	4b0e      	ldr	r3, [pc, #56]	@ (8001570 <MX_SPI5_Init+0x64>)
 8001538:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800153c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800153e:	4b0c      	ldr	r3, [pc, #48]	@ (8001570 <MX_SPI5_Init+0x64>)
 8001540:	2218      	movs	r2, #24
 8001542:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001544:	4b0a      	ldr	r3, [pc, #40]	@ (8001570 <MX_SPI5_Init+0x64>)
 8001546:	2200      	movs	r2, #0
 8001548:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800154a:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <MX_SPI5_Init+0x64>)
 800154c:	2200      	movs	r2, #0
 800154e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001550:	4b07      	ldr	r3, [pc, #28]	@ (8001570 <MX_SPI5_Init+0x64>)
 8001552:	2200      	movs	r2, #0
 8001554:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001556:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <MX_SPI5_Init+0x64>)
 8001558:	220a      	movs	r2, #10
 800155a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800155c:	4804      	ldr	r0, [pc, #16]	@ (8001570 <MX_SPI5_Init+0x64>)
 800155e:	f004 fcdf 	bl	8005f20 <HAL_SPI_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001568:	f7ff ffca 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	200259bc 	.word	0x200259bc
 8001574:	40015000 	.word	0x40015000

08001578 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	@ 0x28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a30      	ldr	r2, [pc, #192]	@ (8001658 <HAL_SPI_MspInit+0xe0>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d15a      	bne.n	8001650 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	4b2f      	ldr	r3, [pc, #188]	@ (800165c <HAL_SPI_MspInit+0xe4>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a2:	4a2e      	ldr	r2, [pc, #184]	@ (800165c <HAL_SPI_MspInit+0xe4>)
 80015a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80015a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015aa:	4b2c      	ldr	r3, [pc, #176]	@ (800165c <HAL_SPI_MspInit+0xe4>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	4b28      	ldr	r3, [pc, #160]	@ (800165c <HAL_SPI_MspInit+0xe4>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	4a27      	ldr	r2, [pc, #156]	@ (800165c <HAL_SPI_MspInit+0xe4>)
 80015c0:	f043 0320 	orr.w	r3, r3, #32
 80015c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c6:	4b25      	ldr	r3, [pc, #148]	@ (800165c <HAL_SPI_MspInit+0xe4>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	f003 0320 	and.w	r3, r3, #32
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80015d2:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80015d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80015e4:	2305      	movs	r3, #5
 80015e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4619      	mov	r1, r3
 80015ee:	481c      	ldr	r0, [pc, #112]	@ (8001660 <HAL_SPI_MspInit+0xe8>)
 80015f0:	f001 f912 	bl	8002818 <HAL_GPIO_Init>

    /* SPI5 DMA Init */
    /* SPI5_TX Init */
    hdma_spi5_tx.Instance = DMA2_Stream4;
 80015f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001664 <HAL_SPI_MspInit+0xec>)
 80015f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001668 <HAL_SPI_MspInit+0xf0>)
 80015f8:	601a      	str	r2, [r3, #0]
    hdma_spi5_tx.Init.Channel = DMA_CHANNEL_2;
 80015fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001664 <HAL_SPI_MspInit+0xec>)
 80015fc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001600:	605a      	str	r2, [r3, #4]
    hdma_spi5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001602:	4b18      	ldr	r3, [pc, #96]	@ (8001664 <HAL_SPI_MspInit+0xec>)
 8001604:	2240      	movs	r2, #64	@ 0x40
 8001606:	609a      	str	r2, [r3, #8]
    hdma_spi5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001608:	4b16      	ldr	r3, [pc, #88]	@ (8001664 <HAL_SPI_MspInit+0xec>)
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
    hdma_spi5_tx.Init.MemInc = DMA_MINC_ENABLE;
 800160e:	4b15      	ldr	r3, [pc, #84]	@ (8001664 <HAL_SPI_MspInit+0xec>)
 8001610:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001614:	611a      	str	r2, [r3, #16]
    hdma_spi5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001616:	4b13      	ldr	r3, [pc, #76]	@ (8001664 <HAL_SPI_MspInit+0xec>)
 8001618:	2200      	movs	r2, #0
 800161a:	615a      	str	r2, [r3, #20]
    hdma_spi5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800161c:	4b11      	ldr	r3, [pc, #68]	@ (8001664 <HAL_SPI_MspInit+0xec>)
 800161e:	2200      	movs	r2, #0
 8001620:	619a      	str	r2, [r3, #24]
    hdma_spi5_tx.Init.Mode = DMA_NORMAL;
 8001622:	4b10      	ldr	r3, [pc, #64]	@ (8001664 <HAL_SPI_MspInit+0xec>)
 8001624:	2200      	movs	r2, #0
 8001626:	61da      	str	r2, [r3, #28]
    hdma_spi5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001628:	4b0e      	ldr	r3, [pc, #56]	@ (8001664 <HAL_SPI_MspInit+0xec>)
 800162a:	2200      	movs	r2, #0
 800162c:	621a      	str	r2, [r3, #32]
    hdma_spi5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800162e:	4b0d      	ldr	r3, [pc, #52]	@ (8001664 <HAL_SPI_MspInit+0xec>)
 8001630:	2200      	movs	r2, #0
 8001632:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi5_tx) != HAL_OK)
 8001634:	480b      	ldr	r0, [pc, #44]	@ (8001664 <HAL_SPI_MspInit+0xec>)
 8001636:	f000 fb93 	bl	8001d60 <HAL_DMA_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001640:	f7ff ff5e 	bl	8001500 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi5_tx);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a07      	ldr	r2, [pc, #28]	@ (8001664 <HAL_SPI_MspInit+0xec>)
 8001648:	649a      	str	r2, [r3, #72]	@ 0x48
 800164a:	4a06      	ldr	r2, [pc, #24]	@ (8001664 <HAL_SPI_MspInit+0xec>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001650:	bf00      	nop
 8001652:	3728      	adds	r7, #40	@ 0x28
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40015000 	.word	0x40015000
 800165c:	40023800 	.word	0x40023800
 8001660:	40021400 	.word	0x40021400
 8001664:	20025a14 	.word	0x20025a14
 8001668:	40026470 	.word	0x40026470

0800166c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	4b12      	ldr	r3, [pc, #72]	@ (80016c0 <HAL_MspInit+0x54>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167a:	4a11      	ldr	r2, [pc, #68]	@ (80016c0 <HAL_MspInit+0x54>)
 800167c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001680:	6453      	str	r3, [r2, #68]	@ 0x44
 8001682:	4b0f      	ldr	r3, [pc, #60]	@ (80016c0 <HAL_MspInit+0x54>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001686:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	603b      	str	r3, [r7, #0]
 8001692:	4b0b      	ldr	r3, [pc, #44]	@ (80016c0 <HAL_MspInit+0x54>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001696:	4a0a      	ldr	r2, [pc, #40]	@ (80016c0 <HAL_MspInit+0x54>)
 8001698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800169c:	6413      	str	r3, [r2, #64]	@ 0x40
 800169e:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <HAL_MspInit+0x54>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	210f      	movs	r1, #15
 80016ae:	f06f 0001 	mvn.w	r0, #1
 80016b2:	f000 fb0f 	bl	8001cd4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800

080016c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08e      	sub	sp, #56	@ 0x38
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	4b33      	ldr	r3, [pc, #204]	@ (80017a8 <HAL_InitTick+0xe4>)
 80016da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016dc:	4a32      	ldr	r2, [pc, #200]	@ (80017a8 <HAL_InitTick+0xe4>)
 80016de:	f043 0310 	orr.w	r3, r3, #16
 80016e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e4:	4b30      	ldr	r3, [pc, #192]	@ (80017a8 <HAL_InitTick+0xe4>)
 80016e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e8:	f003 0310 	and.w	r3, r3, #16
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016f0:	f107 0210 	add.w	r2, r7, #16
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	4611      	mov	r1, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f004 f9ea 	bl	8005ad4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001700:	6a3b      	ldr	r3, [r7, #32]
 8001702:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001706:	2b00      	cmp	r3, #0
 8001708:	d103      	bne.n	8001712 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800170a:	f004 f9bb 	bl	8005a84 <HAL_RCC_GetPCLK1Freq>
 800170e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001710:	e004      	b.n	800171c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001712:	f004 f9b7 	bl	8005a84 <HAL_RCC_GetPCLK1Freq>
 8001716:	4603      	mov	r3, r0
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800171c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800171e:	4a23      	ldr	r2, [pc, #140]	@ (80017ac <HAL_InitTick+0xe8>)
 8001720:	fba2 2303 	umull	r2, r3, r2, r3
 8001724:	0c9b      	lsrs	r3, r3, #18
 8001726:	3b01      	subs	r3, #1
 8001728:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800172a:	4b21      	ldr	r3, [pc, #132]	@ (80017b0 <HAL_InitTick+0xec>)
 800172c:	4a21      	ldr	r2, [pc, #132]	@ (80017b4 <HAL_InitTick+0xf0>)
 800172e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001730:	4b1f      	ldr	r3, [pc, #124]	@ (80017b0 <HAL_InitTick+0xec>)
 8001732:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001736:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001738:	4a1d      	ldr	r2, [pc, #116]	@ (80017b0 <HAL_InitTick+0xec>)
 800173a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800173c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800173e:	4b1c      	ldr	r3, [pc, #112]	@ (80017b0 <HAL_InitTick+0xec>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001744:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <HAL_InitTick+0xec>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174a:	4b19      	ldr	r3, [pc, #100]	@ (80017b0 <HAL_InitTick+0xec>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001750:	4817      	ldr	r0, [pc, #92]	@ (80017b0 <HAL_InitTick+0xec>)
 8001752:	f004 ffd7 	bl	8006704 <HAL_TIM_Base_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800175c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001760:	2b00      	cmp	r3, #0
 8001762:	d11b      	bne.n	800179c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001764:	4812      	ldr	r0, [pc, #72]	@ (80017b0 <HAL_InitTick+0xec>)
 8001766:	f005 f81d 	bl	80067a4 <HAL_TIM_Base_Start_IT>
 800176a:	4603      	mov	r3, r0
 800176c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001770:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001774:	2b00      	cmp	r3, #0
 8001776:	d111      	bne.n	800179c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001778:	2036      	movs	r0, #54	@ 0x36
 800177a:	f000 fac7 	bl	8001d0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b0f      	cmp	r3, #15
 8001782:	d808      	bhi.n	8001796 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001784:	2200      	movs	r2, #0
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	2036      	movs	r0, #54	@ 0x36
 800178a:	f000 faa3 	bl	8001cd4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800178e:	4a0a      	ldr	r2, [pc, #40]	@ (80017b8 <HAL_InitTick+0xf4>)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	e002      	b.n	800179c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800179c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3738      	adds	r7, #56	@ 0x38
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40023800 	.word	0x40023800
 80017ac:	431bde83 	.word	0x431bde83
 80017b0:	20025a74 	.word	0x20025a74
 80017b4:	40001000 	.word	0x40001000
 80017b8:	20000008 	.word	0x20000008

080017bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <NMI_Handler+0x4>

080017c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <HardFault_Handler+0x4>

080017cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d0:	bf00      	nop
 80017d2:	e7fd      	b.n	80017d0 <MemManage_Handler+0x4>

080017d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d8:	bf00      	nop
 80017da:	e7fd      	b.n	80017d8 <BusFault_Handler+0x4>

080017dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e0:	bf00      	nop
 80017e2:	e7fd      	b.n	80017e0 <UsageFault_Handler+0x4>

080017e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017f8:	4802      	ldr	r0, [pc, #8]	@ (8001804 <TIM6_DAC_IRQHandler+0x10>)
 80017fa:	f005 f843 	bl	8006884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20025a74 	.word	0x20025a74

08001808 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_tx);
 800180c:	4802      	ldr	r0, [pc, #8]	@ (8001818 <DMA2_Stream4_IRQHandler+0x10>)
 800180e:	f000 fbad 	bl	8001f6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20025a14 	.word	0x20025a14

0800181c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001820:	4802      	ldr	r0, [pc, #8]	@ (800182c <OTG_HS_IRQHandler+0x10>)
 8001822:	f001 f9f0 	bl	8002c06 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20025c3c 	.word	0x20025c3c

08001830 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001834:	4802      	ldr	r0, [pc, #8]	@ (8001840 <LTDC_IRQHandler+0x10>)
 8001836:	f003 fa1d 	bl	8004c74 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	2002590c 	.word	0x2002590c

08001844 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001848:	4802      	ldr	r0, [pc, #8]	@ (8001854 <DMA2D_IRQHandler+0x10>)
 800184a:	f000 fe42 	bl	80024d2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000038 	.word	0x20000038

08001858 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800185c:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <SystemInit+0x20>)
 800185e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001862:	4a05      	ldr	r2, [pc, #20]	@ (8001878 <SystemInit+0x20>)
 8001864:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001868:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001882:	f107 0308 	add.w	r3, r7, #8
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001890:	463b      	mov	r3, r7
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001898:	4b1e      	ldr	r3, [pc, #120]	@ (8001914 <MX_TIM1_Init+0x98>)
 800189a:	4a1f      	ldr	r2, [pc, #124]	@ (8001918 <MX_TIM1_Init+0x9c>)
 800189c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800189e:	4b1d      	ldr	r3, [pc, #116]	@ (8001914 <MX_TIM1_Init+0x98>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001914 <MX_TIM1_Init+0x98>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80018aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001914 <MX_TIM1_Init+0x98>)
 80018ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b2:	4b18      	ldr	r3, [pc, #96]	@ (8001914 <MX_TIM1_Init+0x98>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018b8:	4b16      	ldr	r3, [pc, #88]	@ (8001914 <MX_TIM1_Init+0x98>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018be:	4b15      	ldr	r3, [pc, #84]	@ (8001914 <MX_TIM1_Init+0x98>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018c4:	4813      	ldr	r0, [pc, #76]	@ (8001914 <MX_TIM1_Init+0x98>)
 80018c6:	f004 ff1d 	bl	8006704 <HAL_TIM_Base_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80018d0:	f7ff fe16 	bl	8001500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018da:	f107 0308 	add.w	r3, r7, #8
 80018de:	4619      	mov	r1, r3
 80018e0:	480c      	ldr	r0, [pc, #48]	@ (8001914 <MX_TIM1_Init+0x98>)
 80018e2:	f005 f8bf 	bl	8006a64 <HAL_TIM_ConfigClockSource>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80018ec:	f7ff fe08 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f0:	2300      	movs	r3, #0
 80018f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018f8:	463b      	mov	r3, r7
 80018fa:	4619      	mov	r1, r3
 80018fc:	4805      	ldr	r0, [pc, #20]	@ (8001914 <MX_TIM1_Init+0x98>)
 80018fe:	f005 fae7 	bl	8006ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001908:	f7ff fdfa 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800190c:	bf00      	nop
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20025abc 	.word	0x20025abc
 8001918:	40010000 	.word	0x40010000

0800191c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a0b      	ldr	r2, [pc, #44]	@ (8001958 <HAL_TIM_Base_MspInit+0x3c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d10d      	bne.n	800194a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	4b0a      	ldr	r3, [pc, #40]	@ (800195c <HAL_TIM_Base_MspInit+0x40>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001936:	4a09      	ldr	r2, [pc, #36]	@ (800195c <HAL_TIM_Base_MspInit+0x40>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6453      	str	r3, [r2, #68]	@ 0x44
 800193e:	4b07      	ldr	r3, [pc, #28]	@ (800195c <HAL_TIM_Base_MspInit+0x40>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800194a:	bf00      	nop
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40010000 	.word	0x40010000
 800195c:	40023800 	.word	0x40023800

08001960 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001964:	4b11      	ldr	r3, [pc, #68]	@ (80019ac <MX_USART1_UART_Init+0x4c>)
 8001966:	4a12      	ldr	r2, [pc, #72]	@ (80019b0 <MX_USART1_UART_Init+0x50>)
 8001968:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800196a:	4b10      	ldr	r3, [pc, #64]	@ (80019ac <MX_USART1_UART_Init+0x4c>)
 800196c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001970:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001972:	4b0e      	ldr	r3, [pc, #56]	@ (80019ac <MX_USART1_UART_Init+0x4c>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001978:	4b0c      	ldr	r3, [pc, #48]	@ (80019ac <MX_USART1_UART_Init+0x4c>)
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800197e:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <MX_USART1_UART_Init+0x4c>)
 8001980:	2200      	movs	r2, #0
 8001982:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001984:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <MX_USART1_UART_Init+0x4c>)
 8001986:	220c      	movs	r2, #12
 8001988:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198a:	4b08      	ldr	r3, [pc, #32]	@ (80019ac <MX_USART1_UART_Init+0x4c>)
 800198c:	2200      	movs	r2, #0
 800198e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001990:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <MX_USART1_UART_Init+0x4c>)
 8001992:	2200      	movs	r2, #0
 8001994:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001996:	4805      	ldr	r0, [pc, #20]	@ (80019ac <MX_USART1_UART_Init+0x4c>)
 8001998:	f005 fb2a 	bl	8006ff0 <HAL_UART_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019a2:	f7ff fdad 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20025b04 	.word	0x20025b04
 80019b0:	40011000 	.word	0x40011000

080019b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08a      	sub	sp, #40	@ 0x28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a19      	ldr	r2, [pc, #100]	@ (8001a38 <HAL_UART_MspInit+0x84>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d12c      	bne.n	8001a30 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	4b18      	ldr	r3, [pc, #96]	@ (8001a3c <HAL_UART_MspInit+0x88>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019de:	4a17      	ldr	r2, [pc, #92]	@ (8001a3c <HAL_UART_MspInit+0x88>)
 80019e0:	f043 0310 	orr.w	r3, r3, #16
 80019e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019e6:	4b15      	ldr	r3, [pc, #84]	@ (8001a3c <HAL_UART_MspInit+0x88>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ea:	f003 0310 	and.w	r3, r3, #16
 80019ee:	613b      	str	r3, [r7, #16]
 80019f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <HAL_UART_MspInit+0x88>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fa:	4a10      	ldr	r2, [pc, #64]	@ (8001a3c <HAL_UART_MspInit+0x88>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a02:	4b0e      	ldr	r3, [pc, #56]	@ (8001a3c <HAL_UART_MspInit+0x88>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001a0e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a14:	2302      	movs	r3, #2
 8001a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a20:	2307      	movs	r3, #7
 8001a22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4805      	ldr	r0, [pc, #20]	@ (8001a40 <HAL_UART_MspInit+0x8c>)
 8001a2c:	f000 fef4 	bl	8002818 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001a30:	bf00      	nop
 8001a32:	3728      	adds	r7, #40	@ 0x28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40011000 	.word	0x40011000
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40020000 	.word	0x40020000

08001a44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001a44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a48:	f7ff ff06 	bl	8001858 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a4c:	480c      	ldr	r0, [pc, #48]	@ (8001a80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a4e:	490d      	ldr	r1, [pc, #52]	@ (8001a84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a50:	4a0d      	ldr	r2, [pc, #52]	@ (8001a88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a54:	e002      	b.n	8001a5c <LoopCopyDataInit>

08001a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a5a:	3304      	adds	r3, #4

08001a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a60:	d3f9      	bcc.n	8001a56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a62:	4a0a      	ldr	r2, [pc, #40]	@ (8001a8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a64:	4c0a      	ldr	r4, [pc, #40]	@ (8001a90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a68:	e001      	b.n	8001a6e <LoopFillZerobss>

08001a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a6c:	3204      	adds	r2, #4

08001a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a70:	d3fb      	bcc.n	8001a6a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001a72:	f007 fb65 	bl	8009140 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a76:	f7ff fc8d 	bl	8001394 <main>
  bx  lr    
 8001a7a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001a7c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a84:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001a88:	08009258 	.word	0x08009258
  ldr r2, =_sbss
 8001a8c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001a90:	2002601c 	.word	0x2002601c

08001a94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a94:	e7fe      	b.n	8001a94 <ADC_IRQHandler>
	...

08001a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad8 <HAL_Init+0x40>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad8 <HAL_Init+0x40>)
 8001aa2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001aa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad8 <HAL_Init+0x40>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad8 <HAL_Init+0x40>)
 8001aae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ab2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ab4:	4b08      	ldr	r3, [pc, #32]	@ (8001ad8 <HAL_Init+0x40>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a07      	ldr	r2, [pc, #28]	@ (8001ad8 <HAL_Init+0x40>)
 8001aba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001abe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac0:	2003      	movs	r0, #3
 8001ac2:	f000 f8fc 	bl	8001cbe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ac6:	200f      	movs	r0, #15
 8001ac8:	f7ff fdfc 	bl	80016c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001acc:	f7ff fdce 	bl	800166c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40023c00 	.word	0x40023c00

08001adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <HAL_IncTick+0x20>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b06      	ldr	r3, [pc, #24]	@ (8001b00 <HAL_IncTick+0x24>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4413      	add	r3, r2
 8001aec:	4a04      	ldr	r2, [pc, #16]	@ (8001b00 <HAL_IncTick+0x24>)
 8001aee:	6013      	str	r3, [r2, #0]
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	2000000c 	.word	0x2000000c
 8001b00:	20025b4c 	.word	0x20025b4c

08001b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return uwTick;
 8001b08:	4b03      	ldr	r3, [pc, #12]	@ (8001b18 <HAL_GetTick+0x14>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20025b4c 	.word	0x20025b4c

08001b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b24:	f7ff ffee 	bl	8001b04 <HAL_GetTick>
 8001b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b34:	d005      	beq.n	8001b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b36:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <HAL_Delay+0x44>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4413      	add	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b42:	bf00      	nop
 8001b44:	f7ff ffde 	bl	8001b04 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d8f7      	bhi.n	8001b44 <HAL_Delay+0x28>
  {
  }
}
 8001b54:	bf00      	nop
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	2000000c 	.word	0x2000000c

08001b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b80:	4013      	ands	r3, r2
 8001b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b96:	4a04      	ldr	r2, [pc, #16]	@ (8001ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	60d3      	str	r3, [r2, #12]
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb0:	4b04      	ldr	r3, [pc, #16]	@ (8001bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	0a1b      	lsrs	r3, r3, #8
 8001bb6:	f003 0307 	and.w	r3, r3, #7
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	db0b      	blt.n	8001bf2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	f003 021f 	and.w	r2, r3, #31
 8001be0:	4907      	ldr	r1, [pc, #28]	@ (8001c00 <__NVIC_EnableIRQ+0x38>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	095b      	lsrs	r3, r3, #5
 8001be8:	2001      	movs	r0, #1
 8001bea:	fa00 f202 	lsl.w	r2, r0, r2
 8001bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000e100 	.word	0xe000e100

08001c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	6039      	str	r1, [r7, #0]
 8001c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	db0a      	blt.n	8001c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	490c      	ldr	r1, [pc, #48]	@ (8001c50 <__NVIC_SetPriority+0x4c>)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	0112      	lsls	r2, r2, #4
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	440b      	add	r3, r1
 8001c28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c2c:	e00a      	b.n	8001c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	4908      	ldr	r1, [pc, #32]	@ (8001c54 <__NVIC_SetPriority+0x50>)
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	3b04      	subs	r3, #4
 8001c3c:	0112      	lsls	r2, r2, #4
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	440b      	add	r3, r1
 8001c42:	761a      	strb	r2, [r3, #24]
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000e100 	.word	0xe000e100
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b089      	sub	sp, #36	@ 0x24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f1c3 0307 	rsb	r3, r3, #7
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	bf28      	it	cs
 8001c76:	2304      	movcs	r3, #4
 8001c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	2b06      	cmp	r3, #6
 8001c80:	d902      	bls.n	8001c88 <NVIC_EncodePriority+0x30>
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3b03      	subs	r3, #3
 8001c86:	e000      	b.n	8001c8a <NVIC_EncodePriority+0x32>
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43da      	mvns	r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	401a      	ands	r2, r3
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8001caa:	43d9      	mvns	r1, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb0:	4313      	orrs	r3, r2
         );
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3724      	adds	r7, #36	@ 0x24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff ff4c 	bl	8001b64 <__NVIC_SetPriorityGrouping>
}
 8001ccc:	bf00      	nop
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
 8001ce0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce6:	f7ff ff61 	bl	8001bac <__NVIC_GetPriorityGrouping>
 8001cea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	68b9      	ldr	r1, [r7, #8]
 8001cf0:	6978      	ldr	r0, [r7, #20]
 8001cf2:	f7ff ffb1 	bl	8001c58 <NVIC_EncodePriority>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfc:	4611      	mov	r1, r2
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff ff80 	bl	8001c04 <__NVIC_SetPriority>
}
 8001d04:	bf00      	nop
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff ff54 	bl	8001bc8 <__NVIC_EnableIRQ>
}
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e00e      	b.n	8001d58 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	795b      	ldrb	r3, [r3, #5]
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d105      	bne.n	8001d50 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7fe fbfa 	bl	8000544 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d6c:	f7ff feca 	bl	8001b04 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e099      	b.n	8001eb0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2202      	movs	r2, #2
 8001d80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 0201 	bic.w	r2, r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d9c:	e00f      	b.n	8001dbe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d9e:	f7ff feb1 	bl	8001b04 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b05      	cmp	r3, #5
 8001daa:	d908      	bls.n	8001dbe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2220      	movs	r2, #32
 8001db0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2203      	movs	r2, #3
 8001db6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e078      	b.n	8001eb0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1e8      	bne.n	8001d9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	4b38      	ldr	r3, [pc, #224]	@ (8001eb8 <HAL_DMA_Init+0x158>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	d107      	bne.n	8001e28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e20:	4313      	orrs	r3, r2
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	f023 0307 	bic.w	r3, r3, #7
 8001e3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d117      	bne.n	8001e82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00e      	beq.n	8001e82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 fa6f 	bl	8002348 <DMA_CheckFifoParam>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d008      	beq.n	8001e82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2240      	movs	r2, #64	@ 0x40
 8001e74:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e016      	b.n	8001eb0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 fa26 	bl	80022dc <DMA_CalcBaseAndBitshift>
 8001e90:	4603      	mov	r3, r0
 8001e92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e98:	223f      	movs	r2, #63	@ 0x3f
 8001e9a:	409a      	lsls	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	f010803f 	.word	0xf010803f

08001ebc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
 8001ec8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d101      	bne.n	8001ee2 <HAL_DMA_Start_IT+0x26>
 8001ede:	2302      	movs	r3, #2
 8001ee0:	e040      	b.n	8001f64 <HAL_DMA_Start_IT+0xa8>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d12f      	bne.n	8001f56 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2202      	movs	r2, #2
 8001efa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	68b9      	ldr	r1, [r7, #8]
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f000 f9b8 	bl	8002280 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f14:	223f      	movs	r2, #63	@ 0x3f
 8001f16:	409a      	lsls	r2, r3
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0216 	orr.w	r2, r2, #22
 8001f2a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d007      	beq.n	8001f44 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 0208 	orr.w	r2, r2, #8
 8001f42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0201 	orr.w	r2, r2, #1
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	e005      	b.n	8001f62 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f74:	2300      	movs	r3, #0
 8001f76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f78:	4b8e      	ldr	r3, [pc, #568]	@ (80021b4 <HAL_DMA_IRQHandler+0x248>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a8e      	ldr	r2, [pc, #568]	@ (80021b8 <HAL_DMA_IRQHandler+0x24c>)
 8001f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f82:	0a9b      	lsrs	r3, r3, #10
 8001f84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f96:	2208      	movs	r2, #8
 8001f98:	409a      	lsls	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d01a      	beq.n	8001fd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d013      	beq.n	8001fd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0204 	bic.w	r2, r2, #4
 8001fbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc4:	2208      	movs	r2, #8
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd0:	f043 0201 	orr.w	r2, r3, #1
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fdc:	2201      	movs	r2, #1
 8001fde:	409a      	lsls	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d012      	beq.n	800200e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00b      	beq.n	800200e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	409a      	lsls	r2, r3
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002006:	f043 0202 	orr.w	r2, r3, #2
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002012:	2204      	movs	r2, #4
 8002014:	409a      	lsls	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4013      	ands	r3, r2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d012      	beq.n	8002044 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00b      	beq.n	8002044 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002030:	2204      	movs	r2, #4
 8002032:	409a      	lsls	r2, r3
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800203c:	f043 0204 	orr.w	r2, r3, #4
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002048:	2210      	movs	r2, #16
 800204a:	409a      	lsls	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4013      	ands	r3, r2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d043      	beq.n	80020dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b00      	cmp	r3, #0
 8002060:	d03c      	beq.n	80020dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002066:	2210      	movs	r2, #16
 8002068:	409a      	lsls	r2, r3
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d018      	beq.n	80020ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d108      	bne.n	800209c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208e:	2b00      	cmp	r3, #0
 8002090:	d024      	beq.n	80020dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	4798      	blx	r3
 800209a:	e01f      	b.n	80020dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d01b      	beq.n	80020dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	4798      	blx	r3
 80020ac:	e016      	b.n	80020dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d107      	bne.n	80020cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0208 	bic.w	r2, r2, #8
 80020ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e0:	2220      	movs	r2, #32
 80020e2:	409a      	lsls	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 808f 	beq.w	800220c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 8087 	beq.w	800220c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002102:	2220      	movs	r2, #32
 8002104:	409a      	lsls	r2, r3
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b05      	cmp	r3, #5
 8002114:	d136      	bne.n	8002184 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 0216 	bic.w	r2, r2, #22
 8002124:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	695a      	ldr	r2, [r3, #20]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002134:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213a:	2b00      	cmp	r3, #0
 800213c:	d103      	bne.n	8002146 <HAL_DMA_IRQHandler+0x1da>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002142:	2b00      	cmp	r3, #0
 8002144:	d007      	beq.n	8002156 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0208 	bic.w	r2, r2, #8
 8002154:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800215a:	223f      	movs	r2, #63	@ 0x3f
 800215c:	409a      	lsls	r2, r3
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002176:	2b00      	cmp	r3, #0
 8002178:	d07e      	beq.n	8002278 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	4798      	blx	r3
        }
        return;
 8002182:	e079      	b.n	8002278 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d01d      	beq.n	80021ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10d      	bne.n	80021bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d031      	beq.n	800220c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	4798      	blx	r3
 80021b0:	e02c      	b.n	800220c <HAL_DMA_IRQHandler+0x2a0>
 80021b2:	bf00      	nop
 80021b4:	20000004 	.word	0x20000004
 80021b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d023      	beq.n	800220c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	4798      	blx	r3
 80021cc:	e01e      	b.n	800220c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10f      	bne.n	80021fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0210 	bic.w	r2, r2, #16
 80021ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002210:	2b00      	cmp	r3, #0
 8002212:	d032      	beq.n	800227a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b00      	cmp	r3, #0
 800221e:	d022      	beq.n	8002266 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2205      	movs	r2, #5
 8002224:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0201 	bic.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	3301      	adds	r3, #1
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	429a      	cmp	r2, r3
 8002242:	d307      	bcc.n	8002254 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f2      	bne.n	8002238 <HAL_DMA_IRQHandler+0x2cc>
 8002252:	e000      	b.n	8002256 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002254:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800226a:	2b00      	cmp	r3, #0
 800226c:	d005      	beq.n	800227a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	4798      	blx	r3
 8002276:	e000      	b.n	800227a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002278:	bf00      	nop
    }
  }
}
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
 800228c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800229c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b40      	cmp	r3, #64	@ 0x40
 80022ac:	d108      	bne.n	80022c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022be:	e007      	b.n	80022d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	60da      	str	r2, [r3, #12]
}
 80022d0:	bf00      	nop
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	3b10      	subs	r3, #16
 80022ec:	4a14      	ldr	r2, [pc, #80]	@ (8002340 <DMA_CalcBaseAndBitshift+0x64>)
 80022ee:	fba2 2303 	umull	r2, r3, r2, r3
 80022f2:	091b      	lsrs	r3, r3, #4
 80022f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022f6:	4a13      	ldr	r2, [pc, #76]	@ (8002344 <DMA_CalcBaseAndBitshift+0x68>)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4413      	add	r3, r2
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b03      	cmp	r3, #3
 8002308:	d909      	bls.n	800231e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002312:	f023 0303 	bic.w	r3, r3, #3
 8002316:	1d1a      	adds	r2, r3, #4
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	659a      	str	r2, [r3, #88]	@ 0x58
 800231c:	e007      	b.n	800232e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002326:	f023 0303 	bic.w	r3, r3, #3
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002332:	4618      	mov	r0, r3
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	aaaaaaab 	.word	0xaaaaaaab
 8002344:	08009240 	.word	0x08009240

08002348 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002350:	2300      	movs	r3, #0
 8002352:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002358:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d11f      	bne.n	80023a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b03      	cmp	r3, #3
 8002366:	d856      	bhi.n	8002416 <DMA_CheckFifoParam+0xce>
 8002368:	a201      	add	r2, pc, #4	@ (adr r2, 8002370 <DMA_CheckFifoParam+0x28>)
 800236a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236e:	bf00      	nop
 8002370:	08002381 	.word	0x08002381
 8002374:	08002393 	.word	0x08002393
 8002378:	08002381 	.word	0x08002381
 800237c:	08002417 	.word	0x08002417
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002384:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d046      	beq.n	800241a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002390:	e043      	b.n	800241a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002396:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800239a:	d140      	bne.n	800241e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023a0:	e03d      	b.n	800241e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023aa:	d121      	bne.n	80023f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	d837      	bhi.n	8002422 <DMA_CheckFifoParam+0xda>
 80023b2:	a201      	add	r2, pc, #4	@ (adr r2, 80023b8 <DMA_CheckFifoParam+0x70>)
 80023b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b8:	080023c9 	.word	0x080023c9
 80023bc:	080023cf 	.word	0x080023cf
 80023c0:	080023c9 	.word	0x080023c9
 80023c4:	080023e1 	.word	0x080023e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	73fb      	strb	r3, [r7, #15]
      break;
 80023cc:	e030      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d025      	beq.n	8002426 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023de:	e022      	b.n	8002426 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023e8:	d11f      	bne.n	800242a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023ee:	e01c      	b.n	800242a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d903      	bls.n	80023fe <DMA_CheckFifoParam+0xb6>
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d003      	beq.n	8002404 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023fc:	e018      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	73fb      	strb	r3, [r7, #15]
      break;
 8002402:	e015      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002408:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00e      	beq.n	800242e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	73fb      	strb	r3, [r7, #15]
      break;
 8002414:	e00b      	b.n	800242e <DMA_CheckFifoParam+0xe6>
      break;
 8002416:	bf00      	nop
 8002418:	e00a      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      break;
 800241a:	bf00      	nop
 800241c:	e008      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      break;
 800241e:	bf00      	nop
 8002420:	e006      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      break;
 8002422:	bf00      	nop
 8002424:	e004      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      break;
 8002426:	bf00      	nop
 8002428:	e002      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      break;   
 800242a:	bf00      	nop
 800242c:	e000      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      break;
 800242e:	bf00      	nop
    }
  } 
  
  return status; 
 8002430:	7bfb      	ldrb	r3, [r7, #15]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop

08002440 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e03b      	b.n	80024ca <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d106      	bne.n	800246c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7fe f8e0 	bl	800062c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002490:	f023 0107 	bic.w	r1, r3, #7
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80024aa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	68d1      	ldr	r1, [r2, #12]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6812      	ldr	r2, [r2, #0]
 80024b6:	430b      	orrs	r3, r1
 80024b8:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b084      	sub	sp, #16
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d026      	beq.n	8002542 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d021      	beq.n	8002542 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800250c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002512:	f043 0201 	orr.w	r2, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2201      	movs	r2, #1
 8002520:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2204      	movs	r2, #4
 8002526:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f003 0320 	and.w	r3, r3, #32
 8002548:	2b00      	cmp	r3, #0
 800254a:	d026      	beq.n	800259a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d021      	beq.n	800259a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002564:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2220      	movs	r2, #32
 800256c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002572:	f043 0202 	orr.w	r2, r3, #2
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2204      	movs	r2, #4
 800257e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f003 0308 	and.w	r3, r3, #8
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d026      	beq.n	80025f2 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d021      	beq.n	80025f2 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025bc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2208      	movs	r2, #8
 80025c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025ca:	f043 0204 	orr.w	r2, r3, #4
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2204      	movs	r2, #4
 80025d6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d013      	beq.n	8002624 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00e      	beq.n	8002624 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002614:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2204      	movs	r2, #4
 800261c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f853 	bl	80026ca <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d024      	beq.n	8002678 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002634:	2b00      	cmp	r3, #0
 8002636:	d01f      	beq.n	8002678 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002646:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2202      	movs	r2, #2
 800264e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	2b00      	cmp	r3, #0
 8002680:	d01f      	beq.n	80026c2 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d01a      	beq.n	80026c2 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800269a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2210      	movs	r2, #16
 80026a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 f80e 	bl	80026de <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80026c2:	bf00      	nop
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
	...

080026f4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b087      	sub	sp, #28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800270c:	2b01      	cmp	r3, #1
 800270e:	d101      	bne.n	8002714 <HAL_DMA2D_ConfigLayer+0x20>
 8002710:	2302      	movs	r3, #2
 8002712:	e079      	b.n	8002808 <HAL_DMA2D_ConfigLayer+0x114>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	011b      	lsls	r3, r3, #4
 8002728:	3318      	adds	r3, #24
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	4413      	add	r3, r2
 800272e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	041b      	lsls	r3, r3, #16
 800273a:	4313      	orrs	r3, r2
 800273c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800273e:	4b35      	ldr	r3, [pc, #212]	@ (8002814 <HAL_DMA2D_ConfigLayer+0x120>)
 8002740:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b0a      	cmp	r3, #10
 8002748:	d003      	beq.n	8002752 <HAL_DMA2D_ConfigLayer+0x5e>
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b09      	cmp	r3, #9
 8002750:	d107      	bne.n	8002762 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	4313      	orrs	r3, r2
 800275e:	617b      	str	r3, [r7, #20]
 8002760:	e005      	b.n	800276e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	061b      	lsls	r3, r3, #24
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	4313      	orrs	r3, r2
 800276c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d120      	bne.n	80027b6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	43db      	mvns	r3, r3
 800277e:	ea02 0103 	and.w	r1, r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	430a      	orrs	r2, r1
 800278a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	6812      	ldr	r2, [r2, #0]
 8002794:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b0a      	cmp	r3, #10
 800279c:	d003      	beq.n	80027a6 <HAL_DMA2D_ConfigLayer+0xb2>
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b09      	cmp	r3, #9
 80027a4:	d127      	bne.n	80027f6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	68da      	ldr	r2, [r3, #12]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80027b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80027b4:	e01f      	b.n	80027f6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	69da      	ldr	r2, [r3, #28]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	43db      	mvns	r3, r3
 80027c0:	ea02 0103 	and.w	r1, r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	6812      	ldr	r2, [r2, #0]
 80027d6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b0a      	cmp	r3, #10
 80027de:	d003      	beq.n	80027e8 <HAL_DMA2D_ConfigLayer+0xf4>
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b09      	cmp	r3, #9
 80027e6:	d106      	bne.n	80027f6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80027f4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	371c      	adds	r7, #28
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	ff03000f 	.word	0xff03000f

08002818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002818:	b480      	push	{r7}
 800281a:	b089      	sub	sp, #36	@ 0x24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002826:	2300      	movs	r3, #0
 8002828:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800282a:	2300      	movs	r3, #0
 800282c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800282e:	2300      	movs	r3, #0
 8002830:	61fb      	str	r3, [r7, #28]
 8002832:	e177      	b.n	8002b24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002834:	2201      	movs	r2, #1
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	4013      	ands	r3, r2
 8002846:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	429a      	cmp	r2, r3
 800284e:	f040 8166 	bne.w	8002b1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	2b01      	cmp	r3, #1
 800285c:	d005      	beq.n	800286a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002866:	2b02      	cmp	r3, #2
 8002868:	d130      	bne.n	80028cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	2203      	movs	r2, #3
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43db      	mvns	r3, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4013      	ands	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4313      	orrs	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028a0:	2201      	movs	r2, #1
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	091b      	lsrs	r3, r3, #4
 80028b6:	f003 0201 	and.w	r2, r3, #1
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 0303 	and.w	r3, r3, #3
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d017      	beq.n	8002908 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	2203      	movs	r2, #3
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4013      	ands	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 0303 	and.w	r3, r3, #3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d123      	bne.n	800295c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	08da      	lsrs	r2, r3, #3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3208      	adds	r2, #8
 800291c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002920:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	220f      	movs	r2, #15
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	691a      	ldr	r2, [r3, #16]
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	08da      	lsrs	r2, r3, #3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	3208      	adds	r2, #8
 8002956:	69b9      	ldr	r1, [r7, #24]
 8002958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	2203      	movs	r2, #3
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4013      	ands	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 0203 	and.w	r2, r3, #3
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4313      	orrs	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 80c0 	beq.w	8002b1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	4b66      	ldr	r3, [pc, #408]	@ (8002b3c <HAL_GPIO_Init+0x324>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a6:	4a65      	ldr	r2, [pc, #404]	@ (8002b3c <HAL_GPIO_Init+0x324>)
 80029a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80029ae:	4b63      	ldr	r3, [pc, #396]	@ (8002b3c <HAL_GPIO_Init+0x324>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ba:	4a61      	ldr	r2, [pc, #388]	@ (8002b40 <HAL_GPIO_Init+0x328>)
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	089b      	lsrs	r3, r3, #2
 80029c0:	3302      	adds	r3, #2
 80029c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	220f      	movs	r2, #15
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43db      	mvns	r3, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4013      	ands	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a58      	ldr	r2, [pc, #352]	@ (8002b44 <HAL_GPIO_Init+0x32c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d037      	beq.n	8002a56 <HAL_GPIO_Init+0x23e>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a57      	ldr	r2, [pc, #348]	@ (8002b48 <HAL_GPIO_Init+0x330>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d031      	beq.n	8002a52 <HAL_GPIO_Init+0x23a>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a56      	ldr	r2, [pc, #344]	@ (8002b4c <HAL_GPIO_Init+0x334>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d02b      	beq.n	8002a4e <HAL_GPIO_Init+0x236>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a55      	ldr	r2, [pc, #340]	@ (8002b50 <HAL_GPIO_Init+0x338>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d025      	beq.n	8002a4a <HAL_GPIO_Init+0x232>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a54      	ldr	r2, [pc, #336]	@ (8002b54 <HAL_GPIO_Init+0x33c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d01f      	beq.n	8002a46 <HAL_GPIO_Init+0x22e>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a53      	ldr	r2, [pc, #332]	@ (8002b58 <HAL_GPIO_Init+0x340>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d019      	beq.n	8002a42 <HAL_GPIO_Init+0x22a>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a52      	ldr	r2, [pc, #328]	@ (8002b5c <HAL_GPIO_Init+0x344>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d013      	beq.n	8002a3e <HAL_GPIO_Init+0x226>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a51      	ldr	r2, [pc, #324]	@ (8002b60 <HAL_GPIO_Init+0x348>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00d      	beq.n	8002a3a <HAL_GPIO_Init+0x222>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a50      	ldr	r2, [pc, #320]	@ (8002b64 <HAL_GPIO_Init+0x34c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d007      	beq.n	8002a36 <HAL_GPIO_Init+0x21e>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a4f      	ldr	r2, [pc, #316]	@ (8002b68 <HAL_GPIO_Init+0x350>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d101      	bne.n	8002a32 <HAL_GPIO_Init+0x21a>
 8002a2e:	2309      	movs	r3, #9
 8002a30:	e012      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a32:	230a      	movs	r3, #10
 8002a34:	e010      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a36:	2308      	movs	r3, #8
 8002a38:	e00e      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a3a:	2307      	movs	r3, #7
 8002a3c:	e00c      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a3e:	2306      	movs	r3, #6
 8002a40:	e00a      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a42:	2305      	movs	r3, #5
 8002a44:	e008      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a46:	2304      	movs	r3, #4
 8002a48:	e006      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e004      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e002      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a56:	2300      	movs	r3, #0
 8002a58:	69fa      	ldr	r2, [r7, #28]
 8002a5a:	f002 0203 	and.w	r2, r2, #3
 8002a5e:	0092      	lsls	r2, r2, #2
 8002a60:	4093      	lsls	r3, r2
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a68:	4935      	ldr	r1, [pc, #212]	@ (8002b40 <HAL_GPIO_Init+0x328>)
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	089b      	lsrs	r3, r3, #2
 8002a6e:	3302      	adds	r3, #2
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a76:	4b3d      	ldr	r3, [pc, #244]	@ (8002b6c <HAL_GPIO_Init+0x354>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4013      	ands	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a9a:	4a34      	ldr	r2, [pc, #208]	@ (8002b6c <HAL_GPIO_Init+0x354>)
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aa0:	4b32      	ldr	r3, [pc, #200]	@ (8002b6c <HAL_GPIO_Init+0x354>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4013      	ands	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ac4:	4a29      	ldr	r2, [pc, #164]	@ (8002b6c <HAL_GPIO_Init+0x354>)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002aca:	4b28      	ldr	r3, [pc, #160]	@ (8002b6c <HAL_GPIO_Init+0x354>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aee:	4a1f      	ldr	r2, [pc, #124]	@ (8002b6c <HAL_GPIO_Init+0x354>)
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002af4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b6c <HAL_GPIO_Init+0x354>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b18:	4a14      	ldr	r2, [pc, #80]	@ (8002b6c <HAL_GPIO_Init+0x354>)
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	3301      	adds	r3, #1
 8002b22:	61fb      	str	r3, [r7, #28]
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	2b0f      	cmp	r3, #15
 8002b28:	f67f ae84 	bls.w	8002834 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b2c:	bf00      	nop
 8002b2e:	bf00      	nop
 8002b30:	3724      	adds	r7, #36	@ 0x24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	40013800 	.word	0x40013800
 8002b44:	40020000 	.word	0x40020000
 8002b48:	40020400 	.word	0x40020400
 8002b4c:	40020800 	.word	0x40020800
 8002b50:	40020c00 	.word	0x40020c00
 8002b54:	40021000 	.word	0x40021000
 8002b58:	40021400 	.word	0x40021400
 8002b5c:	40021800 	.word	0x40021800
 8002b60:	40021c00 	.word	0x40021c00
 8002b64:	40022000 	.word	0x40022000
 8002b68:	40022400 	.word	0x40022400
 8002b6c:	40013c00 	.word	0x40013c00

08002b70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691a      	ldr	r2, [r3, #16]
 8002b80:	887b      	ldrh	r3, [r7, #2]
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d002      	beq.n	8002b8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	73fb      	strb	r3, [r7, #15]
 8002b8c:	e001      	b.n	8002b92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	807b      	strh	r3, [r7, #2]
 8002bac:	4613      	mov	r3, r2
 8002bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bb0:	787b      	ldrb	r3, [r7, #1]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bb6:	887a      	ldrh	r2, [r7, #2]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bbc:	e003      	b.n	8002bc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bbe:	887b      	ldrh	r3, [r7, #2]
 8002bc0:	041a      	lsls	r2, r3, #16
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	619a      	str	r2, [r3, #24]
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b085      	sub	sp, #20
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
 8002bda:	460b      	mov	r3, r1
 8002bdc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002be4:	887a      	ldrh	r2, [r7, #2]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4013      	ands	r3, r2
 8002bea:	041a      	lsls	r2, r3, #16
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	43d9      	mvns	r1, r3
 8002bf0:	887b      	ldrh	r3, [r7, #2]
 8002bf2:	400b      	ands	r3, r1
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	619a      	str	r2, [r3, #24]
}
 8002bfa:	bf00      	nop
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b086      	sub	sp, #24
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f004 fe7f 	bl	8007920 <USB_GetMode>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	f040 80fb 	bne.w	8002e20 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f004 fe42 	bl	80078b8 <USB_ReadInterrupts>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 80f1 	beq.w	8002e1e <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f004 fe39 	bl	80078b8 <USB_ReadInterrupts>
 8002c46:	4603      	mov	r3, r0
 8002c48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c50:	d104      	bne.n	8002c5c <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002c5a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f004 fe29 	bl	80078b8 <USB_ReadInterrupts>
 8002c66:	4603      	mov	r3, r0
 8002c68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c70:	d104      	bne.n	8002c7c <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002c7a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f004 fe19 	bl	80078b8 <USB_ReadInterrupts>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c90:	d104      	bne.n	8002c9c <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002c9a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f004 fe09 	bl	80078b8 <USB_ReadInterrupts>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d103      	bne.n	8002cb8 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f004 fdfb 	bl	80078b8 <USB_ReadInterrupts>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002cc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ccc:	d120      	bne.n	8002d10 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002cd6:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d113      	bne.n	8002d10 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002ce8:	2110      	movs	r1, #16
 8002cea:	6938      	ldr	r0, [r7, #16]
 8002cec:	f004 fd2c 	bl	8007748 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002cf0:	6938      	ldr	r0, [r7, #16]
 8002cf2:	f004 fd5b 	bl	80077ac <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	7a5b      	ldrb	r3, [r3, #9]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d105      	bne.n	8002d0a <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2101      	movs	r1, #1
 8002d04:	4618      	mov	r0, r3
 8002d06:	f004 fe19 	bl	800793c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f006 f98c 	bl	8009028 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f004 fdcf 	bl	80078b8 <USB_ReadInterrupts>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d24:	d102      	bne.n	8002d2c <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f001 fca1 	bl	800466e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f004 fdc1 	bl	80078b8 <USB_ReadInterrupts>
 8002d36:	4603      	mov	r3, r0
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	d106      	bne.n	8002d4e <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f006 f955 	bl	8008ff0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2208      	movs	r2, #8
 8002d4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f004 fdb0 	bl	80078b8 <USB_ReadInterrupts>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d62:	d139      	bne.n	8002dd8 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f004 fe24 	bl	80079b6 <USB_HC_ReadInterrupt>
 8002d6e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002d70:	2300      	movs	r3, #0
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	e025      	b.n	8002dc2 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f003 030f 	and.w	r3, r3, #15
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d018      	beq.n	8002dbc <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	015a      	lsls	r2, r3, #5
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4413      	add	r3, r2
 8002d92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002da0:	d106      	bne.n	8002db0 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	4619      	mov	r1, r3
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 f859 	bl	8002e60 <HCD_HC_IN_IRQHandler>
 8002dae:	e005      	b.n	8002dbc <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	4619      	mov	r1, r3
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 febb 	bl	8003b32 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	617b      	str	r3, [r7, #20]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	795b      	ldrb	r3, [r3, #5]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d3d3      	bcc.n	8002d76 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002dd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f004 fd6b 	bl	80078b8 <USB_ReadInterrupts>
 8002de2:	4603      	mov	r3, r0
 8002de4:	f003 0310 	and.w	r3, r3, #16
 8002de8:	2b10      	cmp	r3, #16
 8002dea:	d101      	bne.n	8002df0 <HAL_HCD_IRQHandler+0x1ea>
 8002dec:	2301      	movs	r3, #1
 8002dee:	e000      	b.n	8002df2 <HAL_HCD_IRQHandler+0x1ec>
 8002df0:	2300      	movs	r3, #0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d014      	beq.n	8002e20 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	699a      	ldr	r2, [r3, #24]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0210 	bic.w	r2, r2, #16
 8002e04:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f001 fb52 	bl	80044b0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699a      	ldr	r2, [r3, #24]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0210 	orr.w	r2, r2, #16
 8002e1a:	619a      	str	r2, [r3, #24]
 8002e1c:	e000      	b.n	8002e20 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002e1e:	bf00      	nop
    }
  }
}
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_HCD_Stop+0x16>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e00d      	b.n	8002e58 <HAL_HCD_Stop+0x32>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f004 fee5 	bl	8007c18 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	78fa      	ldrb	r2, [r7, #3]
 8002e7c:	4611      	mov	r1, r2
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f004 fd2d 	bl	80078de <USB_ReadChInterrupts>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f003 0304 	and.w	r3, r3, #4
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	d11a      	bne.n	8002ec4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002e8e:	78fb      	ldrb	r3, [r7, #3]
 8002e90:	015a      	lsls	r2, r3, #5
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	4413      	add	r3, r2
 8002e96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	2304      	movs	r3, #4
 8002e9e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002ea0:	78fa      	ldrb	r2, [r7, #3]
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	011b      	lsls	r3, r3, #4
 8002ea8:	1a9b      	subs	r3, r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	334d      	adds	r3, #77	@ 0x4d
 8002eb0:	2207      	movs	r2, #7
 8002eb2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f004 fd8b 	bl	80079d8 <USB_HC_Halt>
 8002ec2:	e09e      	b.n	8003002 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	78fa      	ldrb	r2, [r7, #3]
 8002eca:	4611      	mov	r1, r2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f004 fd06 	bl	80078de <USB_ReadChInterrupts>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ed8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002edc:	d11b      	bne.n	8002f16 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002ede:	78fb      	ldrb	r3, [r7, #3]
 8002ee0:	015a      	lsls	r2, r3, #5
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eea:	461a      	mov	r2, r3
 8002eec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ef0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002ef2:	78fa      	ldrb	r2, [r7, #3]
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	1a9b      	subs	r3, r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	334d      	adds	r3, #77	@ 0x4d
 8002f02:	2208      	movs	r2, #8
 8002f04:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	78fa      	ldrb	r2, [r7, #3]
 8002f0c:	4611      	mov	r1, r2
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f004 fd62 	bl	80079d8 <USB_HC_Halt>
 8002f14:	e075      	b.n	8003002 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	78fa      	ldrb	r2, [r7, #3]
 8002f1c:	4611      	mov	r1, r2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f004 fcdd 	bl	80078de <USB_ReadChInterrupts>
 8002f24:	4603      	mov	r3, r0
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d11a      	bne.n	8002f64 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002f2e:	78fb      	ldrb	r3, [r7, #3]
 8002f30:	015a      	lsls	r2, r3, #5
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	4413      	add	r3, r2
 8002f36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	2308      	movs	r3, #8
 8002f3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002f40:	78fa      	ldrb	r2, [r7, #3]
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	1a9b      	subs	r3, r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	334d      	adds	r3, #77	@ 0x4d
 8002f50:	2206      	movs	r2, #6
 8002f52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	78fa      	ldrb	r2, [r7, #3]
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f004 fd3b 	bl	80079d8 <USB_HC_Halt>
 8002f62:	e04e      	b.n	8003002 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	78fa      	ldrb	r2, [r7, #3]
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f004 fcb6 	bl	80078de <USB_ReadChInterrupts>
 8002f72:	4603      	mov	r3, r0
 8002f74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f7c:	d11b      	bne.n	8002fb6 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002f7e:	78fb      	ldrb	r3, [r7, #3]
 8002f80:	015a      	lsls	r2, r3, #5
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	4413      	add	r3, r2
 8002f86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f90:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002f92:	78fa      	ldrb	r2, [r7, #3]
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	1a9b      	subs	r3, r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	334d      	adds	r3, #77	@ 0x4d
 8002fa2:	2209      	movs	r2, #9
 8002fa4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	78fa      	ldrb	r2, [r7, #3]
 8002fac:	4611      	mov	r1, r2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f004 fd12 	bl	80079d8 <USB_HC_Halt>
 8002fb4:	e025      	b.n	8003002 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	78fa      	ldrb	r2, [r7, #3]
 8002fbc:	4611      	mov	r1, r2
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f004 fc8d 	bl	80078de <USB_ReadChInterrupts>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fca:	2b80      	cmp	r3, #128	@ 0x80
 8002fcc:	d119      	bne.n	8003002 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002fce:	78fb      	ldrb	r3, [r7, #3]
 8002fd0:	015a      	lsls	r2, r3, #5
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fda:	461a      	mov	r2, r3
 8002fdc:	2380      	movs	r3, #128	@ 0x80
 8002fde:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002fe0:	78fa      	ldrb	r2, [r7, #3]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	334d      	adds	r3, #77	@ 0x4d
 8002ff0:	2207      	movs	r2, #7
 8002ff2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	78fa      	ldrb	r2, [r7, #3]
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f004 fceb 	bl	80079d8 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	78fa      	ldrb	r2, [r7, #3]
 8003008:	4611      	mov	r1, r2
 800300a:	4618      	mov	r0, r3
 800300c:	f004 fc67 	bl	80078de <USB_ReadChInterrupts>
 8003010:	4603      	mov	r3, r0
 8003012:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003016:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800301a:	d112      	bne.n	8003042 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	78fa      	ldrb	r2, [r7, #3]
 8003022:	4611      	mov	r1, r2
 8003024:	4618      	mov	r0, r3
 8003026:	f004 fcd7 	bl	80079d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800302a:	78fb      	ldrb	r3, [r7, #3]
 800302c:	015a      	lsls	r2, r3, #5
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	4413      	add	r3, r2
 8003032:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003036:	461a      	mov	r2, r3
 8003038:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800303c:	6093      	str	r3, [r2, #8]
 800303e:	f000 bd75 	b.w	8003b2c <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	78fa      	ldrb	r2, [r7, #3]
 8003048:	4611      	mov	r1, r2
 800304a:	4618      	mov	r0, r3
 800304c:	f004 fc47 	bl	80078de <USB_ReadChInterrupts>
 8003050:	4603      	mov	r3, r0
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	f040 8128 	bne.w	80032ac <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800305c:	78fb      	ldrb	r3, [r7, #3]
 800305e:	015a      	lsls	r2, r3, #5
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4413      	add	r3, r2
 8003064:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003068:	461a      	mov	r2, r3
 800306a:	2320      	movs	r3, #32
 800306c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800306e:	78fa      	ldrb	r2, [r7, #3]
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	1a9b      	subs	r3, r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	440b      	add	r3, r1
 800307c:	331b      	adds	r3, #27
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d119      	bne.n	80030b8 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	1a9b      	subs	r3, r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	331b      	adds	r3, #27
 8003094:	2200      	movs	r2, #0
 8003096:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003098:	78fb      	ldrb	r3, [r7, #3]
 800309a:	015a      	lsls	r2, r3, #5
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	4413      	add	r3, r2
 80030a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	0151      	lsls	r1, r2, #5
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	440a      	add	r2, r1
 80030ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80030b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030b6:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	799b      	ldrb	r3, [r3, #6]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d01b      	beq.n	80030f8 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80030c0:	78fa      	ldrb	r2, [r7, #3]
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	4613      	mov	r3, r2
 80030c6:	011b      	lsls	r3, r3, #4
 80030c8:	1a9b      	subs	r3, r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	3330      	adds	r3, #48	@ 0x30
 80030d0:	6819      	ldr	r1, [r3, #0]
 80030d2:	78fb      	ldrb	r3, [r7, #3]
 80030d4:	015a      	lsls	r2, r3, #5
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	4413      	add	r3, r2
 80030da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e4:	78fa      	ldrb	r2, [r7, #3]
 80030e6:	1ac9      	subs	r1, r1, r3
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	1a9b      	subs	r3, r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4403      	add	r3, r0
 80030f4:	3338      	adds	r3, #56	@ 0x38
 80030f6:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80030f8:	78fa      	ldrb	r2, [r7, #3]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	1a9b      	subs	r3, r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	334d      	adds	r3, #77	@ 0x4d
 8003108:	2201      	movs	r2, #1
 800310a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800310c:	78fa      	ldrb	r2, [r7, #3]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	3344      	adds	r3, #68	@ 0x44
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003120:	78fb      	ldrb	r3, [r7, #3]
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	4413      	add	r3, r2
 8003128:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800312c:	461a      	mov	r2, r3
 800312e:	2301      	movs	r3, #1
 8003130:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003132:	78fa      	ldrb	r2, [r7, #3]
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	4613      	mov	r3, r2
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	1a9b      	subs	r3, r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	440b      	add	r3, r1
 8003140:	3326      	adds	r3, #38	@ 0x26
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003148:	78fa      	ldrb	r2, [r7, #3]
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	4613      	mov	r3, r2
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	1a9b      	subs	r3, r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	440b      	add	r3, r1
 8003156:	3326      	adds	r3, #38	@ 0x26
 8003158:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800315a:	2b02      	cmp	r3, #2
 800315c:	d110      	bne.n	8003180 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	78fa      	ldrb	r2, [r7, #3]
 8003164:	4611      	mov	r1, r2
 8003166:	4618      	mov	r0, r3
 8003168:	f004 fc36 	bl	80079d8 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800316c:	78fb      	ldrb	r3, [r7, #3]
 800316e:	015a      	lsls	r2, r3, #5
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	4413      	add	r3, r2
 8003174:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003178:	461a      	mov	r2, r3
 800317a:	2310      	movs	r3, #16
 800317c:	6093      	str	r3, [r2, #8]
 800317e:	e03d      	b.n	80031fc <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003180:	78fa      	ldrb	r2, [r7, #3]
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	1a9b      	subs	r3, r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	3326      	adds	r3, #38	@ 0x26
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b03      	cmp	r3, #3
 8003194:	d00a      	beq.n	80031ac <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003196:	78fa      	ldrb	r2, [r7, #3]
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	1a9b      	subs	r3, r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	3326      	adds	r3, #38	@ 0x26
 80031a6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d127      	bne.n	80031fc <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	78fa      	ldrb	r2, [r7, #3]
 80031bc:	0151      	lsls	r1, r2, #5
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	440a      	add	r2, r1
 80031c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80031c6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80031ca:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80031cc:	78fa      	ldrb	r2, [r7, #3]
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	4613      	mov	r3, r2
 80031d2:	011b      	lsls	r3, r3, #4
 80031d4:	1a9b      	subs	r3, r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	334c      	adds	r3, #76	@ 0x4c
 80031dc:	2201      	movs	r2, #1
 80031de:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80031e0:	78fa      	ldrb	r2, [r7, #3]
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	1a9b      	subs	r3, r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	334c      	adds	r3, #76	@ 0x4c
 80031f0:	781a      	ldrb	r2, [r3, #0]
 80031f2:	78fb      	ldrb	r3, [r7, #3]
 80031f4:	4619      	mov	r1, r3
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f005 ff24 	bl	8009044 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	799b      	ldrb	r3, [r3, #6]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d13b      	bne.n	800327c <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003204:	78fa      	ldrb	r2, [r7, #3]
 8003206:	6879      	ldr	r1, [r7, #4]
 8003208:	4613      	mov	r3, r2
 800320a:	011b      	lsls	r3, r3, #4
 800320c:	1a9b      	subs	r3, r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	440b      	add	r3, r1
 8003212:	3338      	adds	r3, #56	@ 0x38
 8003214:	6819      	ldr	r1, [r3, #0]
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4403      	add	r3, r0
 8003224:	3328      	adds	r3, #40	@ 0x28
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	440b      	add	r3, r1
 800322a:	1e59      	subs	r1, r3, #1
 800322c:	78fa      	ldrb	r2, [r7, #3]
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	4613      	mov	r3, r2
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4403      	add	r3, r0
 800323a:	3328      	adds	r3, #40	@ 0x28
 800323c:	881b      	ldrh	r3, [r3, #0]
 800323e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 8470 	beq.w	8003b2c <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800324c:	78fa      	ldrb	r2, [r7, #3]
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	1a9b      	subs	r3, r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	333c      	adds	r3, #60	@ 0x3c
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	78fa      	ldrb	r2, [r7, #3]
 8003260:	f083 0301 	eor.w	r3, r3, #1
 8003264:	b2d8      	uxtb	r0, r3
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	1a9b      	subs	r3, r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	333c      	adds	r3, #60	@ 0x3c
 8003274:	4602      	mov	r2, r0
 8003276:	701a      	strb	r2, [r3, #0]
 8003278:	f000 bc58 	b.w	8003b2c <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800327c:	78fa      	ldrb	r2, [r7, #3]
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	4613      	mov	r3, r2
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	1a9b      	subs	r3, r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	333c      	adds	r3, #60	@ 0x3c
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	78fa      	ldrb	r2, [r7, #3]
 8003290:	f083 0301 	eor.w	r3, r3, #1
 8003294:	b2d8      	uxtb	r0, r3
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	4613      	mov	r3, r2
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	1a9b      	subs	r3, r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	333c      	adds	r3, #60	@ 0x3c
 80032a4:	4602      	mov	r2, r0
 80032a6:	701a      	strb	r2, [r3, #0]
 80032a8:	f000 bc40 	b.w	8003b2c <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	78fa      	ldrb	r2, [r7, #3]
 80032b2:	4611      	mov	r1, r2
 80032b4:	4618      	mov	r0, r3
 80032b6:	f004 fb12 	bl	80078de <USB_ReadChInterrupts>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f003 0320 	and.w	r3, r3, #32
 80032c0:	2b20      	cmp	r3, #32
 80032c2:	d131      	bne.n	8003328 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80032c4:	78fb      	ldrb	r3, [r7, #3]
 80032c6:	015a      	lsls	r2, r3, #5
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	4413      	add	r3, r2
 80032cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032d0:	461a      	mov	r2, r3
 80032d2:	2320      	movs	r3, #32
 80032d4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80032d6:	78fa      	ldrb	r2, [r7, #3]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	331a      	adds	r3, #26
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	f040 841f 	bne.w	8003b2c <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80032ee:	78fa      	ldrb	r2, [r7, #3]
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	1a9b      	subs	r3, r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	440b      	add	r3, r1
 80032fc:	331b      	adds	r3, #27
 80032fe:	2201      	movs	r2, #1
 8003300:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003302:	78fa      	ldrb	r2, [r7, #3]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	1a9b      	subs	r3, r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	440b      	add	r3, r1
 8003310:	334d      	adds	r3, #77	@ 0x4d
 8003312:	2203      	movs	r2, #3
 8003314:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	78fa      	ldrb	r2, [r7, #3]
 800331c:	4611      	mov	r1, r2
 800331e:	4618      	mov	r0, r3
 8003320:	f004 fb5a 	bl	80079d8 <USB_HC_Halt>
 8003324:	f000 bc02 	b.w	8003b2c <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	78fa      	ldrb	r2, [r7, #3]
 800332e:	4611      	mov	r1, r2
 8003330:	4618      	mov	r0, r3
 8003332:	f004 fad4 	bl	80078de <USB_ReadChInterrupts>
 8003336:	4603      	mov	r3, r0
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b02      	cmp	r3, #2
 800333e:	f040 8305 	bne.w	800394c <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003342:	78fb      	ldrb	r3, [r7, #3]
 8003344:	015a      	lsls	r2, r3, #5
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	4413      	add	r3, r2
 800334a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800334e:	461a      	mov	r2, r3
 8003350:	2302      	movs	r3, #2
 8003352:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003354:	78fa      	ldrb	r2, [r7, #3]
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	4613      	mov	r3, r2
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	1a9b      	subs	r3, r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	334d      	adds	r3, #77	@ 0x4d
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d114      	bne.n	8003394 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800336a:	78fa      	ldrb	r2, [r7, #3]
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	1a9b      	subs	r3, r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	334d      	adds	r3, #77	@ 0x4d
 800337a:	2202      	movs	r2, #2
 800337c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800337e:	78fa      	ldrb	r2, [r7, #3]
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	4613      	mov	r3, r2
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	1a9b      	subs	r3, r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	440b      	add	r3, r1
 800338c:	334c      	adds	r3, #76	@ 0x4c
 800338e:	2201      	movs	r2, #1
 8003390:	701a      	strb	r2, [r3, #0]
 8003392:	e2cc      	b.n	800392e <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003394:	78fa      	ldrb	r2, [r7, #3]
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	4613      	mov	r3, r2
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	1a9b      	subs	r3, r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	334d      	adds	r3, #77	@ 0x4d
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b06      	cmp	r3, #6
 80033a8:	d114      	bne.n	80033d4 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033aa:	78fa      	ldrb	r2, [r7, #3]
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	1a9b      	subs	r3, r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	334d      	adds	r3, #77	@ 0x4d
 80033ba:	2202      	movs	r2, #2
 80033bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80033be:	78fa      	ldrb	r2, [r7, #3]
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	1a9b      	subs	r3, r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	440b      	add	r3, r1
 80033cc:	334c      	adds	r3, #76	@ 0x4c
 80033ce:	2205      	movs	r2, #5
 80033d0:	701a      	strb	r2, [r3, #0]
 80033d2:	e2ac      	b.n	800392e <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80033d4:	78fa      	ldrb	r2, [r7, #3]
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	334d      	adds	r3, #77	@ 0x4d
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b07      	cmp	r3, #7
 80033e8:	d00b      	beq.n	8003402 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80033ea:	78fa      	ldrb	r2, [r7, #3]
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	011b      	lsls	r3, r3, #4
 80033f2:	1a9b      	subs	r3, r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	440b      	add	r3, r1
 80033f8:	334d      	adds	r3, #77	@ 0x4d
 80033fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80033fc:	2b09      	cmp	r3, #9
 80033fe:	f040 80a6 	bne.w	800354e <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003402:	78fa      	ldrb	r2, [r7, #3]
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	1a9b      	subs	r3, r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	440b      	add	r3, r1
 8003410:	334d      	adds	r3, #77	@ 0x4d
 8003412:	2202      	movs	r2, #2
 8003414:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003416:	78fa      	ldrb	r2, [r7, #3]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	1a9b      	subs	r3, r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	3344      	adds	r3, #68	@ 0x44
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	1c59      	adds	r1, r3, #1
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4403      	add	r3, r0
 8003436:	3344      	adds	r3, #68	@ 0x44
 8003438:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800343a:	78fa      	ldrb	r2, [r7, #3]
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	1a9b      	subs	r3, r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	3344      	adds	r3, #68	@ 0x44
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b02      	cmp	r3, #2
 800344e:	d943      	bls.n	80034d8 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003450:	78fa      	ldrb	r2, [r7, #3]
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	3344      	adds	r3, #68	@ 0x44
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003464:	78fa      	ldrb	r2, [r7, #3]
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	4613      	mov	r3, r2
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	1a9b      	subs	r3, r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	331a      	adds	r3, #26
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d123      	bne.n	80034c2 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800347a:	78fa      	ldrb	r2, [r7, #3]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	1a9b      	subs	r3, r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	331b      	adds	r3, #27
 800348a:	2200      	movs	r2, #0
 800348c:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800348e:	78fa      	ldrb	r2, [r7, #3]
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	4613      	mov	r3, r2
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	1a9b      	subs	r3, r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	440b      	add	r3, r1
 800349c:	331c      	adds	r3, #28
 800349e:	2200      	movs	r2, #0
 80034a0:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80034a2:	78fb      	ldrb	r3, [r7, #3]
 80034a4:	015a      	lsls	r2, r3, #5
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	4413      	add	r3, r2
 80034aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	78fa      	ldrb	r2, [r7, #3]
 80034b2:	0151      	lsls	r1, r2, #5
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	440a      	add	r2, r1
 80034b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80034bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034c0:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80034c2:	78fa      	ldrb	r2, [r7, #3]
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	1a9b      	subs	r3, r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	334c      	adds	r3, #76	@ 0x4c
 80034d2:	2204      	movs	r2, #4
 80034d4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034d6:	e229      	b.n	800392c <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034d8:	78fa      	ldrb	r2, [r7, #3]
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	4613      	mov	r3, r2
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	1a9b      	subs	r3, r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	334c      	adds	r3, #76	@ 0x4c
 80034e8:	2202      	movs	r2, #2
 80034ea:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80034ec:	78fa      	ldrb	r2, [r7, #3]
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	1a9b      	subs	r3, r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	3326      	adds	r3, #38	@ 0x26
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00b      	beq.n	800351a <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003502:	78fa      	ldrb	r2, [r7, #3]
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	4613      	mov	r3, r2
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	1a9b      	subs	r3, r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	3326      	adds	r3, #38	@ 0x26
 8003512:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003514:	2b02      	cmp	r3, #2
 8003516:	f040 8209 	bne.w	800392c <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800351a:	78fb      	ldrb	r3, [r7, #3]
 800351c:	015a      	lsls	r2, r3, #5
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	4413      	add	r3, r2
 8003522:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003530:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003538:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800353a:	78fb      	ldrb	r3, [r7, #3]
 800353c:	015a      	lsls	r2, r3, #5
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	4413      	add	r3, r2
 8003542:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003546:	461a      	mov	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800354c:	e1ee      	b.n	800392c <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800354e:	78fa      	ldrb	r2, [r7, #3]
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	1a9b      	subs	r3, r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	334d      	adds	r3, #77	@ 0x4d
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b05      	cmp	r3, #5
 8003562:	f040 80c8 	bne.w	80036f6 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003566:	78fa      	ldrb	r2, [r7, #3]
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	334d      	adds	r3, #77	@ 0x4d
 8003576:	2202      	movs	r2, #2
 8003578:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800357a:	78fa      	ldrb	r2, [r7, #3]
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	1a9b      	subs	r3, r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	440b      	add	r3, r1
 8003588:	331b      	adds	r3, #27
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b01      	cmp	r3, #1
 800358e:	f040 81ce 	bne.w	800392e <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003592:	78fa      	ldrb	r2, [r7, #3]
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	4613      	mov	r3, r2
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	1a9b      	subs	r3, r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	3326      	adds	r3, #38	@ 0x26
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b03      	cmp	r3, #3
 80035a6:	d16b      	bne.n	8003680 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80035a8:	78fa      	ldrb	r2, [r7, #3]
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	1a9b      	subs	r3, r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	3348      	adds	r3, #72	@ 0x48
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	1c59      	adds	r1, r3, #1
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	1a9b      	subs	r3, r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4403      	add	r3, r0
 80035c8:	3348      	adds	r3, #72	@ 0x48
 80035ca:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80035cc:	78fa      	ldrb	r2, [r7, #3]
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	4613      	mov	r3, r2
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	1a9b      	subs	r3, r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	3348      	adds	r3, #72	@ 0x48
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d943      	bls.n	800366a <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80035e2:	78fa      	ldrb	r2, [r7, #3]
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	011b      	lsls	r3, r3, #4
 80035ea:	1a9b      	subs	r3, r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	440b      	add	r3, r1
 80035f0:	3348      	adds	r3, #72	@ 0x48
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80035f6:	78fa      	ldrb	r2, [r7, #3]
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	1a9b      	subs	r3, r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	440b      	add	r3, r1
 8003604:	331b      	adds	r3, #27
 8003606:	2200      	movs	r2, #0
 8003608:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800360a:	78fa      	ldrb	r2, [r7, #3]
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	3344      	adds	r3, #68	@ 0x44
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b02      	cmp	r3, #2
 800361e:	d809      	bhi.n	8003634 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003620:	78fa      	ldrb	r2, [r7, #3]
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	4613      	mov	r3, r2
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	1a9b      	subs	r3, r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	331c      	adds	r3, #28
 8003630:	2201      	movs	r2, #1
 8003632:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003634:	78fb      	ldrb	r3, [r7, #3]
 8003636:	015a      	lsls	r2, r3, #5
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	4413      	add	r3, r2
 800363c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	78fa      	ldrb	r2, [r7, #3]
 8003644:	0151      	lsls	r1, r2, #5
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	440a      	add	r2, r1
 800364a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800364e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003652:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003654:	78fa      	ldrb	r2, [r7, #3]
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	4613      	mov	r3, r2
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	1a9b      	subs	r3, r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	334c      	adds	r3, #76	@ 0x4c
 8003664:	2204      	movs	r2, #4
 8003666:	701a      	strb	r2, [r3, #0]
 8003668:	e014      	b.n	8003694 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800366a:	78fa      	ldrb	r2, [r7, #3]
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	4613      	mov	r3, r2
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	1a9b      	subs	r3, r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	440b      	add	r3, r1
 8003678:	334c      	adds	r3, #76	@ 0x4c
 800367a:	2202      	movs	r2, #2
 800367c:	701a      	strb	r2, [r3, #0]
 800367e:	e009      	b.n	8003694 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003680:	78fa      	ldrb	r2, [r7, #3]
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	1a9b      	subs	r3, r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	334c      	adds	r3, #76	@ 0x4c
 8003690:	2202      	movs	r2, #2
 8003692:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003694:	78fa      	ldrb	r2, [r7, #3]
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	4613      	mov	r3, r2
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	1a9b      	subs	r3, r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	3326      	adds	r3, #38	@ 0x26
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00b      	beq.n	80036c2 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80036aa:	78fa      	ldrb	r2, [r7, #3]
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	4613      	mov	r3, r2
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	1a9b      	subs	r3, r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	3326      	adds	r3, #38	@ 0x26
 80036ba:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80036bc:	2b02      	cmp	r3, #2
 80036be:	f040 8136 	bne.w	800392e <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80036c2:	78fb      	ldrb	r3, [r7, #3]
 80036c4:	015a      	lsls	r2, r3, #5
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	4413      	add	r3, r2
 80036ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80036d8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80036e0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80036e2:	78fb      	ldrb	r3, [r7, #3]
 80036e4:	015a      	lsls	r2, r3, #5
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	4413      	add	r3, r2
 80036ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036ee:	461a      	mov	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6013      	str	r3, [r2, #0]
 80036f4:	e11b      	b.n	800392e <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80036f6:	78fa      	ldrb	r2, [r7, #3]
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	4613      	mov	r3, r2
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	1a9b      	subs	r3, r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	334d      	adds	r3, #77	@ 0x4d
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	2b03      	cmp	r3, #3
 800370a:	f040 8081 	bne.w	8003810 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800370e:	78fa      	ldrb	r2, [r7, #3]
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	4613      	mov	r3, r2
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	1a9b      	subs	r3, r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	440b      	add	r3, r1
 800371c:	334d      	adds	r3, #77	@ 0x4d
 800371e:	2202      	movs	r2, #2
 8003720:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003722:	78fa      	ldrb	r2, [r7, #3]
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	4613      	mov	r3, r2
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	1a9b      	subs	r3, r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	440b      	add	r3, r1
 8003730:	331b      	adds	r3, #27
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	2b01      	cmp	r3, #1
 8003736:	f040 80fa 	bne.w	800392e <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800373a:	78fa      	ldrb	r2, [r7, #3]
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	4613      	mov	r3, r2
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	1a9b      	subs	r3, r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	440b      	add	r3, r1
 8003748:	334c      	adds	r3, #76	@ 0x4c
 800374a:	2202      	movs	r2, #2
 800374c:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800374e:	78fb      	ldrb	r3, [r7, #3]
 8003750:	015a      	lsls	r2, r3, #5
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	4413      	add	r3, r2
 8003756:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	78fa      	ldrb	r2, [r7, #3]
 800375e:	0151      	lsls	r1, r2, #5
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	440a      	add	r2, r1
 8003764:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800376c:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800376e:	78fb      	ldrb	r3, [r7, #3]
 8003770:	015a      	lsls	r2, r3, #5
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	4413      	add	r3, r2
 8003776:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	78fa      	ldrb	r2, [r7, #3]
 800377e:	0151      	lsls	r1, r2, #5
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	440a      	add	r2, r1
 8003784:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003788:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800378c:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800378e:	78fb      	ldrb	r3, [r7, #3]
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	4413      	add	r3, r2
 8003796:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	78fa      	ldrb	r2, [r7, #3]
 800379e:	0151      	lsls	r1, r2, #5
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	440a      	add	r2, r1
 80037a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80037a8:	f023 0320 	bic.w	r3, r3, #32
 80037ac:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037ae:	78fa      	ldrb	r2, [r7, #3]
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	4613      	mov	r3, r2
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	1a9b      	subs	r3, r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	440b      	add	r3, r1
 80037bc:	3326      	adds	r3, #38	@ 0x26
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00b      	beq.n	80037dc <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80037c4:	78fa      	ldrb	r2, [r7, #3]
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	4613      	mov	r3, r2
 80037ca:	011b      	lsls	r3, r3, #4
 80037cc:	1a9b      	subs	r3, r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	440b      	add	r3, r1
 80037d2:	3326      	adds	r3, #38	@ 0x26
 80037d4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	f040 80a9 	bne.w	800392e <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80037dc:	78fb      	ldrb	r3, [r7, #3]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80037f2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80037fa:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80037fc:	78fb      	ldrb	r3, [r7, #3]
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	4413      	add	r3, r2
 8003804:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003808:	461a      	mov	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6013      	str	r3, [r2, #0]
 800380e:	e08e      	b.n	800392e <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003810:	78fa      	ldrb	r2, [r7, #3]
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	4613      	mov	r3, r2
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	1a9b      	subs	r3, r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	440b      	add	r3, r1
 800381e:	334d      	adds	r3, #77	@ 0x4d
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b04      	cmp	r3, #4
 8003824:	d143      	bne.n	80038ae <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003826:	78fa      	ldrb	r2, [r7, #3]
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	1a9b      	subs	r3, r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	440b      	add	r3, r1
 8003834:	334d      	adds	r3, #77	@ 0x4d
 8003836:	2202      	movs	r2, #2
 8003838:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800383a:	78fa      	ldrb	r2, [r7, #3]
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	334c      	adds	r3, #76	@ 0x4c
 800384a:	2202      	movs	r2, #2
 800384c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800384e:	78fa      	ldrb	r2, [r7, #3]
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	4613      	mov	r3, r2
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	1a9b      	subs	r3, r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	440b      	add	r3, r1
 800385c:	3326      	adds	r3, #38	@ 0x26
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00a      	beq.n	800387a <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003864:	78fa      	ldrb	r2, [r7, #3]
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	4613      	mov	r3, r2
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	1a9b      	subs	r3, r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	3326      	adds	r3, #38	@ 0x26
 8003874:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003876:	2b02      	cmp	r3, #2
 8003878:	d159      	bne.n	800392e <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800387a:	78fb      	ldrb	r3, [r7, #3]
 800387c:	015a      	lsls	r2, r3, #5
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	4413      	add	r3, r2
 8003882:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003890:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003898:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800389a:	78fb      	ldrb	r3, [r7, #3]
 800389c:	015a      	lsls	r2, r3, #5
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038a6:	461a      	mov	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	e03f      	b.n	800392e <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80038ae:	78fa      	ldrb	r2, [r7, #3]
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	4613      	mov	r3, r2
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	1a9b      	subs	r3, r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	440b      	add	r3, r1
 80038bc:	334d      	adds	r3, #77	@ 0x4d
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d126      	bne.n	8003912 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038c4:	78fa      	ldrb	r2, [r7, #3]
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	1a9b      	subs	r3, r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	334d      	adds	r3, #77	@ 0x4d
 80038d4:	2202      	movs	r2, #2
 80038d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80038d8:	78fa      	ldrb	r2, [r7, #3]
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	011b      	lsls	r3, r3, #4
 80038e0:	1a9b      	subs	r3, r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	3344      	adds	r3, #68	@ 0x44
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	1c59      	adds	r1, r3, #1
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	1a9b      	subs	r3, r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4403      	add	r3, r0
 80038f8:	3344      	adds	r3, #68	@ 0x44
 80038fa:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80038fc:	78fa      	ldrb	r2, [r7, #3]
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	4613      	mov	r3, r2
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	1a9b      	subs	r3, r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	334c      	adds	r3, #76	@ 0x4c
 800390c:	2204      	movs	r2, #4
 800390e:	701a      	strb	r2, [r3, #0]
 8003910:	e00d      	b.n	800392e <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003912:	78fa      	ldrb	r2, [r7, #3]
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	4613      	mov	r3, r2
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	1a9b      	subs	r3, r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	440b      	add	r3, r1
 8003920:	334d      	adds	r3, #77	@ 0x4d
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	2b02      	cmp	r3, #2
 8003926:	f000 8100 	beq.w	8003b2a <HCD_HC_IN_IRQHandler+0xcca>
 800392a:	e000      	b.n	800392e <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800392c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800392e:	78fa      	ldrb	r2, [r7, #3]
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	4613      	mov	r3, r2
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	1a9b      	subs	r3, r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	334c      	adds	r3, #76	@ 0x4c
 800393e:	781a      	ldrb	r2, [r3, #0]
 8003940:	78fb      	ldrb	r3, [r7, #3]
 8003942:	4619      	mov	r1, r3
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f005 fb7d 	bl	8009044 <HAL_HCD_HC_NotifyURBChange_Callback>
 800394a:	e0ef      	b.n	8003b2c <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	78fa      	ldrb	r2, [r7, #3]
 8003952:	4611      	mov	r1, r2
 8003954:	4618      	mov	r0, r3
 8003956:	f003 ffc2 	bl	80078de <USB_ReadChInterrupts>
 800395a:	4603      	mov	r3, r0
 800395c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003960:	2b40      	cmp	r3, #64	@ 0x40
 8003962:	d12f      	bne.n	80039c4 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003964:	78fb      	ldrb	r3, [r7, #3]
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	4413      	add	r3, r2
 800396c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003970:	461a      	mov	r2, r3
 8003972:	2340      	movs	r3, #64	@ 0x40
 8003974:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003976:	78fa      	ldrb	r2, [r7, #3]
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	4613      	mov	r3, r2
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	1a9b      	subs	r3, r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	440b      	add	r3, r1
 8003984:	334d      	adds	r3, #77	@ 0x4d
 8003986:	2205      	movs	r2, #5
 8003988:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800398a:	78fa      	ldrb	r2, [r7, #3]
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	4613      	mov	r3, r2
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	1a9b      	subs	r3, r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	440b      	add	r3, r1
 8003998:	331a      	adds	r3, #26
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d109      	bne.n	80039b4 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80039a0:	78fa      	ldrb	r2, [r7, #3]
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	4613      	mov	r3, r2
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	1a9b      	subs	r3, r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	3344      	adds	r3, #68	@ 0x44
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	78fa      	ldrb	r2, [r7, #3]
 80039ba:	4611      	mov	r1, r2
 80039bc:	4618      	mov	r0, r3
 80039be:	f004 f80b 	bl	80079d8 <USB_HC_Halt>
 80039c2:	e0b3      	b.n	8003b2c <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	4611      	mov	r1, r2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f003 ff86 	bl	80078de <USB_ReadChInterrupts>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f003 0310 	and.w	r3, r3, #16
 80039d8:	2b10      	cmp	r3, #16
 80039da:	f040 80a7 	bne.w	8003b2c <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80039de:	78fa      	ldrb	r2, [r7, #3]
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	4613      	mov	r3, r2
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	1a9b      	subs	r3, r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	440b      	add	r3, r1
 80039ec:	3326      	adds	r3, #38	@ 0x26
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	d11b      	bne.n	8003a2c <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80039f4:	78fa      	ldrb	r2, [r7, #3]
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	4613      	mov	r3, r2
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	1a9b      	subs	r3, r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	3344      	adds	r3, #68	@ 0x44
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003a08:	78fa      	ldrb	r2, [r7, #3]
 8003a0a:	6879      	ldr	r1, [r7, #4]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	1a9b      	subs	r3, r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	334d      	adds	r3, #77	@ 0x4d
 8003a18:	2204      	movs	r2, #4
 8003a1a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	78fa      	ldrb	r2, [r7, #3]
 8003a22:	4611      	mov	r1, r2
 8003a24:	4618      	mov	r0, r3
 8003a26:	f003 ffd7 	bl	80079d8 <USB_HC_Halt>
 8003a2a:	e03f      	b.n	8003aac <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a2c:	78fa      	ldrb	r2, [r7, #3]
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	4613      	mov	r3, r2
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	1a9b      	subs	r3, r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	3326      	adds	r3, #38	@ 0x26
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00a      	beq.n	8003a58 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003a42:	78fa      	ldrb	r2, [r7, #3]
 8003a44:	6879      	ldr	r1, [r7, #4]
 8003a46:	4613      	mov	r3, r2
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	1a9b      	subs	r3, r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	440b      	add	r3, r1
 8003a50:	3326      	adds	r3, #38	@ 0x26
 8003a52:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d129      	bne.n	8003aac <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003a58:	78fa      	ldrb	r2, [r7, #3]
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	011b      	lsls	r3, r3, #4
 8003a60:	1a9b      	subs	r3, r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	3344      	adds	r3, #68	@ 0x44
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	799b      	ldrb	r3, [r3, #6]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00a      	beq.n	8003a8a <HCD_HC_IN_IRQHandler+0xc2a>
 8003a74:	78fa      	ldrb	r2, [r7, #3]
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	011b      	lsls	r3, r3, #4
 8003a7c:	1a9b      	subs	r3, r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	331b      	adds	r3, #27
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d110      	bne.n	8003aac <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003a8a:	78fa      	ldrb	r2, [r7, #3]
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	011b      	lsls	r3, r3, #4
 8003a92:	1a9b      	subs	r3, r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	440b      	add	r3, r1
 8003a98:	334d      	adds	r3, #77	@ 0x4d
 8003a9a:	2204      	movs	r2, #4
 8003a9c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	78fa      	ldrb	r2, [r7, #3]
 8003aa4:	4611      	mov	r1, r2
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f003 ff96 	bl	80079d8 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003aac:	78fa      	ldrb	r2, [r7, #3]
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	331b      	adds	r3, #27
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d129      	bne.n	8003b16 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003ac2:	78fa      	ldrb	r2, [r7, #3]
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	1a9b      	subs	r3, r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	331b      	adds	r3, #27
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003ad6:	78fb      	ldrb	r3, [r7, #3]
 8003ad8:	015a      	lsls	r2, r3, #5
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	78fa      	ldrb	r2, [r7, #3]
 8003ae6:	0151      	lsls	r1, r2, #5
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	440a      	add	r2, r1
 8003aec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003af0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003af4:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003af6:	78fb      	ldrb	r3, [r7, #3]
 8003af8:	015a      	lsls	r2, r3, #5
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	4413      	add	r3, r2
 8003afe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	78fa      	ldrb	r2, [r7, #3]
 8003b06:	0151      	lsls	r1, r2, #5
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	440a      	add	r2, r1
 8003b0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b10:	f043 0320 	orr.w	r3, r3, #32
 8003b14:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003b16:	78fb      	ldrb	r3, [r7, #3]
 8003b18:	015a      	lsls	r2, r3, #5
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b22:	461a      	mov	r2, r3
 8003b24:	2310      	movs	r3, #16
 8003b26:	6093      	str	r3, [r2, #8]
 8003b28:	e000      	b.n	8003b2c <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003b2a:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b086      	sub	sp, #24
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	78fa      	ldrb	r2, [r7, #3]
 8003b4e:	4611      	mov	r1, r2
 8003b50:	4618      	mov	r0, r3
 8003b52:	f003 fec4 	bl	80078de <USB_ReadChInterrupts>
 8003b56:	4603      	mov	r3, r0
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	d11b      	bne.n	8003b98 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003b60:	78fb      	ldrb	r3, [r7, #3]
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	2304      	movs	r3, #4
 8003b70:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003b72:	78fa      	ldrb	r2, [r7, #3]
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	4613      	mov	r3, r2
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	1a9b      	subs	r3, r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	440b      	add	r3, r1
 8003b80:	334d      	adds	r3, #77	@ 0x4d
 8003b82:	2207      	movs	r2, #7
 8003b84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	78fa      	ldrb	r2, [r7, #3]
 8003b8c:	4611      	mov	r1, r2
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f003 ff22 	bl	80079d8 <USB_HC_Halt>
 8003b94:	f000 bc89 	b.w	80044aa <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	78fa      	ldrb	r2, [r7, #3]
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f003 fe9c 	bl	80078de <USB_ReadChInterrupts>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	f003 0320 	and.w	r3, r3, #32
 8003bac:	2b20      	cmp	r3, #32
 8003bae:	f040 8082 	bne.w	8003cb6 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003bb2:	78fb      	ldrb	r3, [r7, #3]
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	2320      	movs	r3, #32
 8003bc2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003bc4:	78fa      	ldrb	r2, [r7, #3]
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	1a9b      	subs	r3, r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	3319      	adds	r3, #25
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d124      	bne.n	8003c24 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003bda:	78fa      	ldrb	r2, [r7, #3]
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	4613      	mov	r3, r2
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	1a9b      	subs	r3, r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	440b      	add	r3, r1
 8003be8:	3319      	adds	r3, #25
 8003bea:	2200      	movs	r2, #0
 8003bec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003bee:	78fa      	ldrb	r2, [r7, #3]
 8003bf0:	6879      	ldr	r1, [r7, #4]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	011b      	lsls	r3, r3, #4
 8003bf6:	1a9b      	subs	r3, r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	440b      	add	r3, r1
 8003bfc:	334c      	adds	r3, #76	@ 0x4c
 8003bfe:	2202      	movs	r2, #2
 8003c00:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003c02:	78fa      	ldrb	r2, [r7, #3]
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	4613      	mov	r3, r2
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	1a9b      	subs	r3, r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	440b      	add	r3, r1
 8003c10:	334d      	adds	r3, #77	@ 0x4d
 8003c12:	2203      	movs	r2, #3
 8003c14:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	78fa      	ldrb	r2, [r7, #3]
 8003c1c:	4611      	mov	r1, r2
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f003 feda 	bl	80079d8 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003c24:	78fa      	ldrb	r2, [r7, #3]
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	1a9b      	subs	r3, r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	440b      	add	r3, r1
 8003c32:	331a      	adds	r3, #26
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	f040 8437 	bne.w	80044aa <HCD_HC_OUT_IRQHandler+0x978>
 8003c3c:	78fa      	ldrb	r2, [r7, #3]
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	4613      	mov	r3, r2
 8003c42:	011b      	lsls	r3, r3, #4
 8003c44:	1a9b      	subs	r3, r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	440b      	add	r3, r1
 8003c4a:	331b      	adds	r3, #27
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f040 842b 	bne.w	80044aa <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003c54:	78fa      	ldrb	r2, [r7, #3]
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	1a9b      	subs	r3, r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	440b      	add	r3, r1
 8003c62:	3326      	adds	r3, #38	@ 0x26
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d009      	beq.n	8003c7e <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003c6a:	78fa      	ldrb	r2, [r7, #3]
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	011b      	lsls	r3, r3, #4
 8003c72:	1a9b      	subs	r3, r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	440b      	add	r3, r1
 8003c78:	331b      	adds	r3, #27
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003c7e:	78fa      	ldrb	r2, [r7, #3]
 8003c80:	6879      	ldr	r1, [r7, #4]
 8003c82:	4613      	mov	r3, r2
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	1a9b      	subs	r3, r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	334d      	adds	r3, #77	@ 0x4d
 8003c8e:	2203      	movs	r2, #3
 8003c90:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	78fa      	ldrb	r2, [r7, #3]
 8003c98:	4611      	mov	r1, r2
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f003 fe9c 	bl	80079d8 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003ca0:	78fa      	ldrb	r2, [r7, #3]
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	1a9b      	subs	r3, r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	3344      	adds	r3, #68	@ 0x44
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	e3f9      	b.n	80044aa <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	78fa      	ldrb	r2, [r7, #3]
 8003cbc:	4611      	mov	r1, r2
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f003 fe0d 	bl	80078de <USB_ReadChInterrupts>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cce:	d111      	bne.n	8003cf4 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003cd0:	78fb      	ldrb	r3, [r7, #3]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cdc:	461a      	mov	r2, r3
 8003cde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ce2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	78fa      	ldrb	r2, [r7, #3]
 8003cea:	4611      	mov	r1, r2
 8003cec:	4618      	mov	r0, r3
 8003cee:	f003 fe73 	bl	80079d8 <USB_HC_Halt>
 8003cf2:	e3da      	b.n	80044aa <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	78fa      	ldrb	r2, [r7, #3]
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f003 fdee 	bl	80078de <USB_ReadChInterrupts>
 8003d02:	4603      	mov	r3, r0
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d168      	bne.n	8003dde <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003d0c:	78fa      	ldrb	r2, [r7, #3]
 8003d0e:	6879      	ldr	r1, [r7, #4]
 8003d10:	4613      	mov	r3, r2
 8003d12:	011b      	lsls	r3, r3, #4
 8003d14:	1a9b      	subs	r3, r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	440b      	add	r3, r1
 8003d1a:	3344      	adds	r3, #68	@ 0x44
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	78fa      	ldrb	r2, [r7, #3]
 8003d26:	4611      	mov	r1, r2
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f003 fdd8 	bl	80078de <USB_ReadChInterrupts>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d34:	2b40      	cmp	r3, #64	@ 0x40
 8003d36:	d112      	bne.n	8003d5e <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003d38:	78fa      	ldrb	r2, [r7, #3]
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	1a9b      	subs	r3, r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	440b      	add	r3, r1
 8003d46:	3319      	adds	r3, #25
 8003d48:	2201      	movs	r2, #1
 8003d4a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003d4c:	78fb      	ldrb	r3, [r7, #3]
 8003d4e:	015a      	lsls	r2, r3, #5
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	4413      	add	r3, r2
 8003d54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d58:	461a      	mov	r2, r3
 8003d5a:	2340      	movs	r3, #64	@ 0x40
 8003d5c:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003d5e:	78fa      	ldrb	r2, [r7, #3]
 8003d60:	6879      	ldr	r1, [r7, #4]
 8003d62:	4613      	mov	r3, r2
 8003d64:	011b      	lsls	r3, r3, #4
 8003d66:	1a9b      	subs	r3, r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	440b      	add	r3, r1
 8003d6c:	331b      	adds	r3, #27
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d019      	beq.n	8003da8 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003d74:	78fa      	ldrb	r2, [r7, #3]
 8003d76:	6879      	ldr	r1, [r7, #4]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	1a9b      	subs	r3, r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	331b      	adds	r3, #27
 8003d84:	2200      	movs	r2, #0
 8003d86:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003d88:	78fb      	ldrb	r3, [r7, #3]
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	78fa      	ldrb	r2, [r7, #3]
 8003d98:	0151      	lsls	r1, r2, #5
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	440a      	add	r2, r1
 8003d9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003da2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003da6:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003da8:	78fb      	ldrb	r3, [r7, #3]
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003db4:	461a      	mov	r2, r3
 8003db6:	2301      	movs	r3, #1
 8003db8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003dba:	78fa      	ldrb	r2, [r7, #3]
 8003dbc:	6879      	ldr	r1, [r7, #4]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	011b      	lsls	r3, r3, #4
 8003dc2:	1a9b      	subs	r3, r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	440b      	add	r3, r1
 8003dc8:	334d      	adds	r3, #77	@ 0x4d
 8003dca:	2201      	movs	r2, #1
 8003dcc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	78fa      	ldrb	r2, [r7, #3]
 8003dd4:	4611      	mov	r1, r2
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f003 fdfe 	bl	80079d8 <USB_HC_Halt>
 8003ddc:	e365      	b.n	80044aa <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	78fa      	ldrb	r2, [r7, #3]
 8003de4:	4611      	mov	r1, r2
 8003de6:	4618      	mov	r0, r3
 8003de8:	f003 fd79 	bl	80078de <USB_ReadChInterrupts>
 8003dec:	4603      	mov	r3, r0
 8003dee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df2:	2b40      	cmp	r3, #64	@ 0x40
 8003df4:	d139      	bne.n	8003e6a <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003df6:	78fa      	ldrb	r2, [r7, #3]
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	1a9b      	subs	r3, r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	440b      	add	r3, r1
 8003e04:	334d      	adds	r3, #77	@ 0x4d
 8003e06:	2205      	movs	r2, #5
 8003e08:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003e0a:	78fa      	ldrb	r2, [r7, #3]
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	011b      	lsls	r3, r3, #4
 8003e12:	1a9b      	subs	r3, r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	440b      	add	r3, r1
 8003e18:	331a      	adds	r3, #26
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d109      	bne.n	8003e34 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003e20:	78fa      	ldrb	r2, [r7, #3]
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	4613      	mov	r3, r2
 8003e26:	011b      	lsls	r3, r3, #4
 8003e28:	1a9b      	subs	r3, r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	3319      	adds	r3, #25
 8003e30:	2201      	movs	r2, #1
 8003e32:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003e34:	78fa      	ldrb	r2, [r7, #3]
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	1a9b      	subs	r3, r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	3344      	adds	r3, #68	@ 0x44
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	78fa      	ldrb	r2, [r7, #3]
 8003e4e:	4611      	mov	r1, r2
 8003e50:	4618      	mov	r0, r3
 8003e52:	f003 fdc1 	bl	80079d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003e56:	78fb      	ldrb	r3, [r7, #3]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e62:	461a      	mov	r2, r3
 8003e64:	2340      	movs	r3, #64	@ 0x40
 8003e66:	6093      	str	r3, [r2, #8]
 8003e68:	e31f      	b.n	80044aa <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	78fa      	ldrb	r2, [r7, #3]
 8003e70:	4611      	mov	r1, r2
 8003e72:	4618      	mov	r0, r3
 8003e74:	f003 fd33 	bl	80078de <USB_ReadChInterrupts>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b08      	cmp	r3, #8
 8003e80:	d11a      	bne.n	8003eb8 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003e82:	78fb      	ldrb	r3, [r7, #3]
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e8e:	461a      	mov	r2, r3
 8003e90:	2308      	movs	r3, #8
 8003e92:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003e94:	78fa      	ldrb	r2, [r7, #3]
 8003e96:	6879      	ldr	r1, [r7, #4]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	011b      	lsls	r3, r3, #4
 8003e9c:	1a9b      	subs	r3, r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	334d      	adds	r3, #77	@ 0x4d
 8003ea4:	2206      	movs	r2, #6
 8003ea6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	78fa      	ldrb	r2, [r7, #3]
 8003eae:	4611      	mov	r1, r2
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f003 fd91 	bl	80079d8 <USB_HC_Halt>
 8003eb6:	e2f8      	b.n	80044aa <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	78fa      	ldrb	r2, [r7, #3]
 8003ebe:	4611      	mov	r1, r2
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f003 fd0c 	bl	80078de <USB_ReadChInterrupts>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	f003 0310 	and.w	r3, r3, #16
 8003ecc:	2b10      	cmp	r3, #16
 8003ece:	d144      	bne.n	8003f5a <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003ed0:	78fa      	ldrb	r2, [r7, #3]
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	1a9b      	subs	r3, r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	3344      	adds	r3, #68	@ 0x44
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003ee4:	78fa      	ldrb	r2, [r7, #3]
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	011b      	lsls	r3, r3, #4
 8003eec:	1a9b      	subs	r3, r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	334d      	adds	r3, #77	@ 0x4d
 8003ef4:	2204      	movs	r2, #4
 8003ef6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003ef8:	78fa      	ldrb	r2, [r7, #3]
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	1a9b      	subs	r3, r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	3319      	adds	r3, #25
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d114      	bne.n	8003f38 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003f0e:	78fa      	ldrb	r2, [r7, #3]
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	4613      	mov	r3, r2
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	1a9b      	subs	r3, r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	3318      	adds	r3, #24
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d109      	bne.n	8003f38 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003f24:	78fa      	ldrb	r2, [r7, #3]
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	011b      	lsls	r3, r3, #4
 8003f2c:	1a9b      	subs	r3, r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	3319      	adds	r3, #25
 8003f34:	2201      	movs	r2, #1
 8003f36:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	78fa      	ldrb	r2, [r7, #3]
 8003f3e:	4611      	mov	r1, r2
 8003f40:	4618      	mov	r0, r3
 8003f42:	f003 fd49 	bl	80079d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003f46:	78fb      	ldrb	r3, [r7, #3]
 8003f48:	015a      	lsls	r2, r3, #5
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f52:	461a      	mov	r2, r3
 8003f54:	2310      	movs	r3, #16
 8003f56:	6093      	str	r3, [r2, #8]
 8003f58:	e2a7      	b.n	80044aa <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	78fa      	ldrb	r2, [r7, #3]
 8003f60:	4611      	mov	r1, r2
 8003f62:	4618      	mov	r0, r3
 8003f64:	f003 fcbb 	bl	80078de <USB_ReadChInterrupts>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f6e:	2b80      	cmp	r3, #128	@ 0x80
 8003f70:	f040 8083 	bne.w	800407a <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	799b      	ldrb	r3, [r3, #6]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d111      	bne.n	8003fa0 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003f7c:	78fa      	ldrb	r2, [r7, #3]
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	4613      	mov	r3, r2
 8003f82:	011b      	lsls	r3, r3, #4
 8003f84:	1a9b      	subs	r3, r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	440b      	add	r3, r1
 8003f8a:	334d      	adds	r3, #77	@ 0x4d
 8003f8c:	2207      	movs	r2, #7
 8003f8e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	78fa      	ldrb	r2, [r7, #3]
 8003f96:	4611      	mov	r1, r2
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f003 fd1d 	bl	80079d8 <USB_HC_Halt>
 8003f9e:	e062      	b.n	8004066 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003fa0:	78fa      	ldrb	r2, [r7, #3]
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	1a9b      	subs	r3, r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	3344      	adds	r3, #68	@ 0x44
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	1c59      	adds	r1, r3, #1
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	1a9b      	subs	r3, r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4403      	add	r3, r0
 8003fc0:	3344      	adds	r3, #68	@ 0x44
 8003fc2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003fc4:	78fa      	ldrb	r2, [r7, #3]
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	1a9b      	subs	r3, r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	3344      	adds	r3, #68	@ 0x44
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d922      	bls.n	8004020 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003fda:	78fa      	ldrb	r2, [r7, #3]
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	1a9b      	subs	r3, r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	440b      	add	r3, r1
 8003fe8:	3344      	adds	r3, #68	@ 0x44
 8003fea:	2200      	movs	r2, #0
 8003fec:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003fee:	78fa      	ldrb	r2, [r7, #3]
 8003ff0:	6879      	ldr	r1, [r7, #4]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	011b      	lsls	r3, r3, #4
 8003ff6:	1a9b      	subs	r3, r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	440b      	add	r3, r1
 8003ffc:	334c      	adds	r3, #76	@ 0x4c
 8003ffe:	2204      	movs	r2, #4
 8004000:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004002:	78fa      	ldrb	r2, [r7, #3]
 8004004:	6879      	ldr	r1, [r7, #4]
 8004006:	4613      	mov	r3, r2
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	1a9b      	subs	r3, r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	440b      	add	r3, r1
 8004010:	334c      	adds	r3, #76	@ 0x4c
 8004012:	781a      	ldrb	r2, [r3, #0]
 8004014:	78fb      	ldrb	r3, [r7, #3]
 8004016:	4619      	mov	r1, r3
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f005 f813 	bl	8009044 <HAL_HCD_HC_NotifyURBChange_Callback>
 800401e:	e022      	b.n	8004066 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004020:	78fa      	ldrb	r2, [r7, #3]
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	4613      	mov	r3, r2
 8004026:	011b      	lsls	r3, r3, #4
 8004028:	1a9b      	subs	r3, r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	440b      	add	r3, r1
 800402e:	334c      	adds	r3, #76	@ 0x4c
 8004030:	2202      	movs	r2, #2
 8004032:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004034:	78fb      	ldrb	r3, [r7, #3]
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	4413      	add	r3, r2
 800403c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800404a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004052:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004054:	78fb      	ldrb	r3, [r7, #3]
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	4413      	add	r3, r2
 800405c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004060:	461a      	mov	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004066:	78fb      	ldrb	r3, [r7, #3]
 8004068:	015a      	lsls	r2, r3, #5
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	4413      	add	r3, r2
 800406e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004072:	461a      	mov	r2, r3
 8004074:	2380      	movs	r3, #128	@ 0x80
 8004076:	6093      	str	r3, [r2, #8]
 8004078:	e217      	b.n	80044aa <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	78fa      	ldrb	r2, [r7, #3]
 8004080:	4611      	mov	r1, r2
 8004082:	4618      	mov	r0, r3
 8004084:	f003 fc2b 	bl	80078de <USB_ReadChInterrupts>
 8004088:	4603      	mov	r3, r0
 800408a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800408e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004092:	d11b      	bne.n	80040cc <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004094:	78fa      	ldrb	r2, [r7, #3]
 8004096:	6879      	ldr	r1, [r7, #4]
 8004098:	4613      	mov	r3, r2
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	1a9b      	subs	r3, r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	440b      	add	r3, r1
 80040a2:	334d      	adds	r3, #77	@ 0x4d
 80040a4:	2209      	movs	r2, #9
 80040a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	78fa      	ldrb	r2, [r7, #3]
 80040ae:	4611      	mov	r1, r2
 80040b0:	4618      	mov	r0, r3
 80040b2:	f003 fc91 	bl	80079d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80040b6:	78fb      	ldrb	r3, [r7, #3]
 80040b8:	015a      	lsls	r2, r3, #5
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	4413      	add	r3, r2
 80040be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040c2:	461a      	mov	r2, r3
 80040c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040c8:	6093      	str	r3, [r2, #8]
 80040ca:	e1ee      	b.n	80044aa <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	78fa      	ldrb	r2, [r7, #3]
 80040d2:	4611      	mov	r1, r2
 80040d4:	4618      	mov	r0, r3
 80040d6:	f003 fc02 	bl	80078de <USB_ReadChInterrupts>
 80040da:	4603      	mov	r3, r0
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	f040 81df 	bne.w	80044a4 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80040e6:	78fb      	ldrb	r3, [r7, #3]
 80040e8:	015a      	lsls	r2, r3, #5
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040f2:	461a      	mov	r2, r3
 80040f4:	2302      	movs	r3, #2
 80040f6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80040f8:	78fa      	ldrb	r2, [r7, #3]
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	4613      	mov	r3, r2
 80040fe:	011b      	lsls	r3, r3, #4
 8004100:	1a9b      	subs	r3, r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	440b      	add	r3, r1
 8004106:	334d      	adds	r3, #77	@ 0x4d
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	2b01      	cmp	r3, #1
 800410c:	f040 8093 	bne.w	8004236 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004110:	78fa      	ldrb	r2, [r7, #3]
 8004112:	6879      	ldr	r1, [r7, #4]
 8004114:	4613      	mov	r3, r2
 8004116:	011b      	lsls	r3, r3, #4
 8004118:	1a9b      	subs	r3, r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	440b      	add	r3, r1
 800411e:	334d      	adds	r3, #77	@ 0x4d
 8004120:	2202      	movs	r2, #2
 8004122:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004124:	78fa      	ldrb	r2, [r7, #3]
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	4613      	mov	r3, r2
 800412a:	011b      	lsls	r3, r3, #4
 800412c:	1a9b      	subs	r3, r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	334c      	adds	r3, #76	@ 0x4c
 8004134:	2201      	movs	r2, #1
 8004136:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004138:	78fa      	ldrb	r2, [r7, #3]
 800413a:	6879      	ldr	r1, [r7, #4]
 800413c:	4613      	mov	r3, r2
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	1a9b      	subs	r3, r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	440b      	add	r3, r1
 8004146:	3326      	adds	r3, #38	@ 0x26
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	2b02      	cmp	r3, #2
 800414c:	d00b      	beq.n	8004166 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800414e:	78fa      	ldrb	r2, [r7, #3]
 8004150:	6879      	ldr	r1, [r7, #4]
 8004152:	4613      	mov	r3, r2
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	1a9b      	subs	r3, r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	440b      	add	r3, r1
 800415c:	3326      	adds	r3, #38	@ 0x26
 800415e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004160:	2b03      	cmp	r3, #3
 8004162:	f040 8190 	bne.w	8004486 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	799b      	ldrb	r3, [r3, #6]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d115      	bne.n	800419a <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800416e:	78fa      	ldrb	r2, [r7, #3]
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	4613      	mov	r3, r2
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	1a9b      	subs	r3, r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	440b      	add	r3, r1
 800417c:	333d      	adds	r3, #61	@ 0x3d
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	78fa      	ldrb	r2, [r7, #3]
 8004182:	f083 0301 	eor.w	r3, r3, #1
 8004186:	b2d8      	uxtb	r0, r3
 8004188:	6879      	ldr	r1, [r7, #4]
 800418a:	4613      	mov	r3, r2
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	1a9b      	subs	r3, r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	440b      	add	r3, r1
 8004194:	333d      	adds	r3, #61	@ 0x3d
 8004196:	4602      	mov	r2, r0
 8004198:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	799b      	ldrb	r3, [r3, #6]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	f040 8171 	bne.w	8004486 <HCD_HC_OUT_IRQHandler+0x954>
 80041a4:	78fa      	ldrb	r2, [r7, #3]
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	4613      	mov	r3, r2
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	1a9b      	subs	r3, r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	3334      	adds	r3, #52	@ 0x34
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 8165 	beq.w	8004486 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80041bc:	78fa      	ldrb	r2, [r7, #3]
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	4613      	mov	r3, r2
 80041c2:	011b      	lsls	r3, r3, #4
 80041c4:	1a9b      	subs	r3, r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	3334      	adds	r3, #52	@ 0x34
 80041cc:	6819      	ldr	r1, [r3, #0]
 80041ce:	78fa      	ldrb	r2, [r7, #3]
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	4613      	mov	r3, r2
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	1a9b      	subs	r3, r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4403      	add	r3, r0
 80041dc:	3328      	adds	r3, #40	@ 0x28
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	440b      	add	r3, r1
 80041e2:	1e59      	subs	r1, r3, #1
 80041e4:	78fa      	ldrb	r2, [r7, #3]
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	4613      	mov	r3, r2
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	1a9b      	subs	r3, r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4403      	add	r3, r0
 80041f2:	3328      	adds	r3, #40	@ 0x28
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80041fa:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 813f 	beq.w	8004486 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004208:	78fa      	ldrb	r2, [r7, #3]
 800420a:	6879      	ldr	r1, [r7, #4]
 800420c:	4613      	mov	r3, r2
 800420e:	011b      	lsls	r3, r3, #4
 8004210:	1a9b      	subs	r3, r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	440b      	add	r3, r1
 8004216:	333d      	adds	r3, #61	@ 0x3d
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	78fa      	ldrb	r2, [r7, #3]
 800421c:	f083 0301 	eor.w	r3, r3, #1
 8004220:	b2d8      	uxtb	r0, r3
 8004222:	6879      	ldr	r1, [r7, #4]
 8004224:	4613      	mov	r3, r2
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	1a9b      	subs	r3, r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	440b      	add	r3, r1
 800422e:	333d      	adds	r3, #61	@ 0x3d
 8004230:	4602      	mov	r2, r0
 8004232:	701a      	strb	r2, [r3, #0]
 8004234:	e127      	b.n	8004486 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004236:	78fa      	ldrb	r2, [r7, #3]
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	4613      	mov	r3, r2
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	1a9b      	subs	r3, r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	440b      	add	r3, r1
 8004244:	334d      	adds	r3, #77	@ 0x4d
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	2b03      	cmp	r3, #3
 800424a:	d120      	bne.n	800428e <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800424c:	78fa      	ldrb	r2, [r7, #3]
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	4613      	mov	r3, r2
 8004252:	011b      	lsls	r3, r3, #4
 8004254:	1a9b      	subs	r3, r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	440b      	add	r3, r1
 800425a:	334d      	adds	r3, #77	@ 0x4d
 800425c:	2202      	movs	r2, #2
 800425e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004260:	78fa      	ldrb	r2, [r7, #3]
 8004262:	6879      	ldr	r1, [r7, #4]
 8004264:	4613      	mov	r3, r2
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	1a9b      	subs	r3, r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	440b      	add	r3, r1
 800426e:	331b      	adds	r3, #27
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b01      	cmp	r3, #1
 8004274:	f040 8107 	bne.w	8004486 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004278:	78fa      	ldrb	r2, [r7, #3]
 800427a:	6879      	ldr	r1, [r7, #4]
 800427c:	4613      	mov	r3, r2
 800427e:	011b      	lsls	r3, r3, #4
 8004280:	1a9b      	subs	r3, r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	440b      	add	r3, r1
 8004286:	334c      	adds	r3, #76	@ 0x4c
 8004288:	2202      	movs	r2, #2
 800428a:	701a      	strb	r2, [r3, #0]
 800428c:	e0fb      	b.n	8004486 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800428e:	78fa      	ldrb	r2, [r7, #3]
 8004290:	6879      	ldr	r1, [r7, #4]
 8004292:	4613      	mov	r3, r2
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	1a9b      	subs	r3, r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	440b      	add	r3, r1
 800429c:	334d      	adds	r3, #77	@ 0x4d
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	2b04      	cmp	r3, #4
 80042a2:	d13a      	bne.n	800431a <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042a4:	78fa      	ldrb	r2, [r7, #3]
 80042a6:	6879      	ldr	r1, [r7, #4]
 80042a8:	4613      	mov	r3, r2
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	1a9b      	subs	r3, r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	334d      	adds	r3, #77	@ 0x4d
 80042b4:	2202      	movs	r2, #2
 80042b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042b8:	78fa      	ldrb	r2, [r7, #3]
 80042ba:	6879      	ldr	r1, [r7, #4]
 80042bc:	4613      	mov	r3, r2
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	1a9b      	subs	r3, r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	440b      	add	r3, r1
 80042c6:	334c      	adds	r3, #76	@ 0x4c
 80042c8:	2202      	movs	r2, #2
 80042ca:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80042cc:	78fa      	ldrb	r2, [r7, #3]
 80042ce:	6879      	ldr	r1, [r7, #4]
 80042d0:	4613      	mov	r3, r2
 80042d2:	011b      	lsls	r3, r3, #4
 80042d4:	1a9b      	subs	r3, r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	440b      	add	r3, r1
 80042da:	331b      	adds	r3, #27
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	f040 80d1 	bne.w	8004486 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80042e4:	78fa      	ldrb	r2, [r7, #3]
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	4613      	mov	r3, r2
 80042ea:	011b      	lsls	r3, r3, #4
 80042ec:	1a9b      	subs	r3, r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	331b      	adds	r3, #27
 80042f4:	2200      	movs	r2, #0
 80042f6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80042f8:	78fb      	ldrb	r3, [r7, #3]
 80042fa:	015a      	lsls	r2, r3, #5
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	4413      	add	r3, r2
 8004300:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	78fa      	ldrb	r2, [r7, #3]
 8004308:	0151      	lsls	r1, r2, #5
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	440a      	add	r2, r1
 800430e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004312:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004316:	6053      	str	r3, [r2, #4]
 8004318:	e0b5      	b.n	8004486 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800431a:	78fa      	ldrb	r2, [r7, #3]
 800431c:	6879      	ldr	r1, [r7, #4]
 800431e:	4613      	mov	r3, r2
 8004320:	011b      	lsls	r3, r3, #4
 8004322:	1a9b      	subs	r3, r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	440b      	add	r3, r1
 8004328:	334d      	adds	r3, #77	@ 0x4d
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b05      	cmp	r3, #5
 800432e:	d114      	bne.n	800435a <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004330:	78fa      	ldrb	r2, [r7, #3]
 8004332:	6879      	ldr	r1, [r7, #4]
 8004334:	4613      	mov	r3, r2
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	1a9b      	subs	r3, r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	440b      	add	r3, r1
 800433e:	334d      	adds	r3, #77	@ 0x4d
 8004340:	2202      	movs	r2, #2
 8004342:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004344:	78fa      	ldrb	r2, [r7, #3]
 8004346:	6879      	ldr	r1, [r7, #4]
 8004348:	4613      	mov	r3, r2
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	1a9b      	subs	r3, r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	440b      	add	r3, r1
 8004352:	334c      	adds	r3, #76	@ 0x4c
 8004354:	2202      	movs	r2, #2
 8004356:	701a      	strb	r2, [r3, #0]
 8004358:	e095      	b.n	8004486 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800435a:	78fa      	ldrb	r2, [r7, #3]
 800435c:	6879      	ldr	r1, [r7, #4]
 800435e:	4613      	mov	r3, r2
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	1a9b      	subs	r3, r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	440b      	add	r3, r1
 8004368:	334d      	adds	r3, #77	@ 0x4d
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	2b06      	cmp	r3, #6
 800436e:	d114      	bne.n	800439a <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004370:	78fa      	ldrb	r2, [r7, #3]
 8004372:	6879      	ldr	r1, [r7, #4]
 8004374:	4613      	mov	r3, r2
 8004376:	011b      	lsls	r3, r3, #4
 8004378:	1a9b      	subs	r3, r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	440b      	add	r3, r1
 800437e:	334d      	adds	r3, #77	@ 0x4d
 8004380:	2202      	movs	r2, #2
 8004382:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004384:	78fa      	ldrb	r2, [r7, #3]
 8004386:	6879      	ldr	r1, [r7, #4]
 8004388:	4613      	mov	r3, r2
 800438a:	011b      	lsls	r3, r3, #4
 800438c:	1a9b      	subs	r3, r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	440b      	add	r3, r1
 8004392:	334c      	adds	r3, #76	@ 0x4c
 8004394:	2205      	movs	r2, #5
 8004396:	701a      	strb	r2, [r3, #0]
 8004398:	e075      	b.n	8004486 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800439a:	78fa      	ldrb	r2, [r7, #3]
 800439c:	6879      	ldr	r1, [r7, #4]
 800439e:	4613      	mov	r3, r2
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	1a9b      	subs	r3, r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	440b      	add	r3, r1
 80043a8:	334d      	adds	r3, #77	@ 0x4d
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b07      	cmp	r3, #7
 80043ae:	d00a      	beq.n	80043c6 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80043b0:	78fa      	ldrb	r2, [r7, #3]
 80043b2:	6879      	ldr	r1, [r7, #4]
 80043b4:	4613      	mov	r3, r2
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	1a9b      	subs	r3, r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	440b      	add	r3, r1
 80043be:	334d      	adds	r3, #77	@ 0x4d
 80043c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80043c2:	2b09      	cmp	r3, #9
 80043c4:	d170      	bne.n	80044a8 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043c6:	78fa      	ldrb	r2, [r7, #3]
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	4613      	mov	r3, r2
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	1a9b      	subs	r3, r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	440b      	add	r3, r1
 80043d4:	334d      	adds	r3, #77	@ 0x4d
 80043d6:	2202      	movs	r2, #2
 80043d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80043da:	78fa      	ldrb	r2, [r7, #3]
 80043dc:	6879      	ldr	r1, [r7, #4]
 80043de:	4613      	mov	r3, r2
 80043e0:	011b      	lsls	r3, r3, #4
 80043e2:	1a9b      	subs	r3, r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	440b      	add	r3, r1
 80043e8:	3344      	adds	r3, #68	@ 0x44
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	1c59      	adds	r1, r3, #1
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	4613      	mov	r3, r2
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	1a9b      	subs	r3, r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4403      	add	r3, r0
 80043fa:	3344      	adds	r3, #68	@ 0x44
 80043fc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80043fe:	78fa      	ldrb	r2, [r7, #3]
 8004400:	6879      	ldr	r1, [r7, #4]
 8004402:	4613      	mov	r3, r2
 8004404:	011b      	lsls	r3, r3, #4
 8004406:	1a9b      	subs	r3, r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	440b      	add	r3, r1
 800440c:	3344      	adds	r3, #68	@ 0x44
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b02      	cmp	r3, #2
 8004412:	d914      	bls.n	800443e <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004414:	78fa      	ldrb	r2, [r7, #3]
 8004416:	6879      	ldr	r1, [r7, #4]
 8004418:	4613      	mov	r3, r2
 800441a:	011b      	lsls	r3, r3, #4
 800441c:	1a9b      	subs	r3, r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	440b      	add	r3, r1
 8004422:	3344      	adds	r3, #68	@ 0x44
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004428:	78fa      	ldrb	r2, [r7, #3]
 800442a:	6879      	ldr	r1, [r7, #4]
 800442c:	4613      	mov	r3, r2
 800442e:	011b      	lsls	r3, r3, #4
 8004430:	1a9b      	subs	r3, r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	440b      	add	r3, r1
 8004436:	334c      	adds	r3, #76	@ 0x4c
 8004438:	2204      	movs	r2, #4
 800443a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800443c:	e022      	b.n	8004484 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800443e:	78fa      	ldrb	r2, [r7, #3]
 8004440:	6879      	ldr	r1, [r7, #4]
 8004442:	4613      	mov	r3, r2
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	1a9b      	subs	r3, r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	440b      	add	r3, r1
 800444c:	334c      	adds	r3, #76	@ 0x4c
 800444e:	2202      	movs	r2, #2
 8004450:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004452:	78fb      	ldrb	r3, [r7, #3]
 8004454:	015a      	lsls	r2, r3, #5
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	4413      	add	r3, r2
 800445a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004468:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004470:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004472:	78fb      	ldrb	r3, [r7, #3]
 8004474:	015a      	lsls	r2, r3, #5
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	4413      	add	r3, r2
 800447a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800447e:	461a      	mov	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004484:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004486:	78fa      	ldrb	r2, [r7, #3]
 8004488:	6879      	ldr	r1, [r7, #4]
 800448a:	4613      	mov	r3, r2
 800448c:	011b      	lsls	r3, r3, #4
 800448e:	1a9b      	subs	r3, r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	440b      	add	r3, r1
 8004494:	334c      	adds	r3, #76	@ 0x4c
 8004496:	781a      	ldrb	r2, [r3, #0]
 8004498:	78fb      	ldrb	r3, [r7, #3]
 800449a:	4619      	mov	r1, r3
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f004 fdd1 	bl	8009044 <HAL_HCD_HC_NotifyURBChange_Callback>
 80044a2:	e002      	b.n	80044aa <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80044a4:	bf00      	nop
 80044a6:	e000      	b.n	80044aa <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80044a8:	bf00      	nop
  }
}
 80044aa:	3718      	adds	r7, #24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b08a      	sub	sp, #40	@ 0x28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c0:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	f003 030f 	and.w	r3, r3, #15
 80044d0:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	0c5b      	lsrs	r3, r3, #17
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	091b      	lsrs	r3, r3, #4
 80044e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044e4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d004      	beq.n	80044f6 <HCD_RXQLVL_IRQHandler+0x46>
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	2b05      	cmp	r3, #5
 80044f0:	f000 80b6 	beq.w	8004660 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80044f4:	e0b7      	b.n	8004666 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 80b3 	beq.w	8004664 <HCD_RXQLVL_IRQHandler+0x1b4>
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	4613      	mov	r3, r2
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	1a9b      	subs	r3, r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	440b      	add	r3, r1
 800450c:	332c      	adds	r3, #44	@ 0x2c
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 80a7 	beq.w	8004664 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	4613      	mov	r3, r2
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	1a9b      	subs	r3, r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	440b      	add	r3, r1
 8004524:	3338      	adds	r3, #56	@ 0x38
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	18d1      	adds	r1, r2, r3
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	4613      	mov	r3, r2
 8004532:	011b      	lsls	r3, r3, #4
 8004534:	1a9b      	subs	r3, r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4403      	add	r3, r0
 800453a:	3334      	adds	r3, #52	@ 0x34
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4299      	cmp	r1, r3
 8004540:	f200 8083 	bhi.w	800464a <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6818      	ldr	r0, [r3, #0]
 8004548:	6879      	ldr	r1, [r7, #4]
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	4613      	mov	r3, r2
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	1a9b      	subs	r3, r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	440b      	add	r3, r1
 8004556:	332c      	adds	r3, #44	@ 0x2c
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	b292      	uxth	r2, r2
 800455e:	4619      	mov	r1, r3
 8004560:	f003 f952 	bl	8007808 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004564:	6879      	ldr	r1, [r7, #4]
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	4613      	mov	r3, r2
 800456a:	011b      	lsls	r3, r3, #4
 800456c:	1a9b      	subs	r3, r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	440b      	add	r3, r1
 8004572:	332c      	adds	r3, #44	@ 0x2c
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	18d1      	adds	r1, r2, r3
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	4613      	mov	r3, r2
 8004580:	011b      	lsls	r3, r3, #4
 8004582:	1a9b      	subs	r3, r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4403      	add	r3, r0
 8004588:	332c      	adds	r3, #44	@ 0x2c
 800458a:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800458c:	6879      	ldr	r1, [r7, #4]
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	4613      	mov	r3, r2
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	1a9b      	subs	r3, r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	440b      	add	r3, r1
 800459a:	3338      	adds	r3, #56	@ 0x38
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	18d1      	adds	r1, r2, r3
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	4613      	mov	r3, r2
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	1a9b      	subs	r3, r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4403      	add	r3, r0
 80045b0:	3338      	adds	r3, #56	@ 0x38
 80045b2:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	6a3b      	ldr	r3, [r7, #32]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	0cdb      	lsrs	r3, r3, #19
 80045c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045c8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	4613      	mov	r3, r2
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	1a9b      	subs	r3, r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	440b      	add	r3, r1
 80045d8:	3328      	adds	r3, #40	@ 0x28
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	461a      	mov	r2, r3
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d13f      	bne.n	8004664 <HCD_RXQLVL_IRQHandler+0x1b4>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d03c      	beq.n	8004664 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	015a      	lsls	r2, r3, #5
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004600:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004608:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	015a      	lsls	r2, r3, #5
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	4413      	add	r3, r2
 8004612:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004616:	461a      	mov	r2, r3
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800461c:	6879      	ldr	r1, [r7, #4]
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4613      	mov	r3, r2
 8004622:	011b      	lsls	r3, r3, #4
 8004624:	1a9b      	subs	r3, r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	333c      	adds	r3, #60	@ 0x3c
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	f083 0301 	eor.w	r3, r3, #1
 8004632:	b2d8      	uxtb	r0, r3
 8004634:	6879      	ldr	r1, [r7, #4]
 8004636:	69ba      	ldr	r2, [r7, #24]
 8004638:	4613      	mov	r3, r2
 800463a:	011b      	lsls	r3, r3, #4
 800463c:	1a9b      	subs	r3, r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	333c      	adds	r3, #60	@ 0x3c
 8004644:	4602      	mov	r2, r0
 8004646:	701a      	strb	r2, [r3, #0]
      break;
 8004648:	e00c      	b.n	8004664 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	4613      	mov	r3, r2
 8004650:	011b      	lsls	r3, r3, #4
 8004652:	1a9b      	subs	r3, r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	440b      	add	r3, r1
 8004658:	334c      	adds	r3, #76	@ 0x4c
 800465a:	2204      	movs	r2, #4
 800465c:	701a      	strb	r2, [r3, #0]
      break;
 800465e:	e001      	b.n	8004664 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004660:	bf00      	nop
 8004662:	e000      	b.n	8004666 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004664:	bf00      	nop
  }
}
 8004666:	bf00      	nop
 8004668:	3728      	adds	r7, #40	@ 0x28
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b086      	sub	sp, #24
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800469a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d10b      	bne.n	80046be <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d102      	bne.n	80046b6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f004 fcab 	bl	800900c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	f043 0302 	orr.w	r3, r3, #2
 80046bc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f003 0308 	and.w	r3, r3, #8
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d132      	bne.n	800472e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	f043 0308 	orr.w	r3, r3, #8
 80046ce:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f003 0304 	and.w	r3, r3, #4
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d126      	bne.n	8004728 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	7a5b      	ldrb	r3, [r3, #9]
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d113      	bne.n	800470a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80046e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80046ec:	d106      	bne.n	80046fc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2102      	movs	r1, #2
 80046f4:	4618      	mov	r0, r3
 80046f6:	f003 f921 	bl	800793c <USB_InitFSLSPClkSel>
 80046fa:	e011      	b.n	8004720 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2101      	movs	r1, #1
 8004702:	4618      	mov	r0, r3
 8004704:	f003 f91a 	bl	800793c <USB_InitFSLSPClkSel>
 8004708:	e00a      	b.n	8004720 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	79db      	ldrb	r3, [r3, #7]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d106      	bne.n	8004720 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004718:	461a      	mov	r2, r3
 800471a:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800471e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f004 fca1 	bl	8009068 <HAL_HCD_PortEnabled_Callback>
 8004726:	e002      	b.n	800472e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f004 fcab 	bl	8009084 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f003 0320 	and.w	r3, r3, #32
 8004734:	2b20      	cmp	r3, #32
 8004736:	d103      	bne.n	8004740 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f043 0320 	orr.w	r3, r3, #32
 800473e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004746:	461a      	mov	r2, r3
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	6013      	str	r3, [r2, #0]
}
 800474c:	bf00      	nop
 800474e:	3718      	adds	r7, #24
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e12b      	b.n	80049be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d106      	bne.n	8004780 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7fc f9d2 	bl	8000b24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2224      	movs	r2, #36	@ 0x24
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0201 	bic.w	r2, r2, #1
 8004796:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80047b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047b8:	f001 f964 	bl	8005a84 <HAL_RCC_GetPCLK1Freq>
 80047bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	4a81      	ldr	r2, [pc, #516]	@ (80049c8 <HAL_I2C_Init+0x274>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d807      	bhi.n	80047d8 <HAL_I2C_Init+0x84>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4a80      	ldr	r2, [pc, #512]	@ (80049cc <HAL_I2C_Init+0x278>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	bf94      	ite	ls
 80047d0:	2301      	movls	r3, #1
 80047d2:	2300      	movhi	r3, #0
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	e006      	b.n	80047e6 <HAL_I2C_Init+0x92>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	4a7d      	ldr	r2, [pc, #500]	@ (80049d0 <HAL_I2C_Init+0x27c>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	bf94      	ite	ls
 80047e0:	2301      	movls	r3, #1
 80047e2:	2300      	movhi	r3, #0
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e0e7      	b.n	80049be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	4a78      	ldr	r2, [pc, #480]	@ (80049d4 <HAL_I2C_Init+0x280>)
 80047f2:	fba2 2303 	umull	r2, r3, r2, r3
 80047f6:	0c9b      	lsrs	r3, r3, #18
 80047f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	430a      	orrs	r2, r1
 800480c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	4a6a      	ldr	r2, [pc, #424]	@ (80049c8 <HAL_I2C_Init+0x274>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d802      	bhi.n	8004828 <HAL_I2C_Init+0xd4>
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	3301      	adds	r3, #1
 8004826:	e009      	b.n	800483c <HAL_I2C_Init+0xe8>
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800482e:	fb02 f303 	mul.w	r3, r2, r3
 8004832:	4a69      	ldr	r2, [pc, #420]	@ (80049d8 <HAL_I2C_Init+0x284>)
 8004834:	fba2 2303 	umull	r2, r3, r2, r3
 8004838:	099b      	lsrs	r3, r3, #6
 800483a:	3301      	adds	r3, #1
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6812      	ldr	r2, [r2, #0]
 8004840:	430b      	orrs	r3, r1
 8004842:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800484e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	495c      	ldr	r1, [pc, #368]	@ (80049c8 <HAL_I2C_Init+0x274>)
 8004858:	428b      	cmp	r3, r1
 800485a:	d819      	bhi.n	8004890 <HAL_I2C_Init+0x13c>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	1e59      	subs	r1, r3, #1
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	fbb1 f3f3 	udiv	r3, r1, r3
 800486a:	1c59      	adds	r1, r3, #1
 800486c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004870:	400b      	ands	r3, r1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00a      	beq.n	800488c <HAL_I2C_Init+0x138>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	1e59      	subs	r1, r3, #1
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	fbb1 f3f3 	udiv	r3, r1, r3
 8004884:	3301      	adds	r3, #1
 8004886:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800488a:	e051      	b.n	8004930 <HAL_I2C_Init+0x1dc>
 800488c:	2304      	movs	r3, #4
 800488e:	e04f      	b.n	8004930 <HAL_I2C_Init+0x1dc>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d111      	bne.n	80048bc <HAL_I2C_Init+0x168>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	1e58      	subs	r0, r3, #1
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6859      	ldr	r1, [r3, #4]
 80048a0:	460b      	mov	r3, r1
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	440b      	add	r3, r1
 80048a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80048aa:	3301      	adds	r3, #1
 80048ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	bf0c      	ite	eq
 80048b4:	2301      	moveq	r3, #1
 80048b6:	2300      	movne	r3, #0
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	e012      	b.n	80048e2 <HAL_I2C_Init+0x18e>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	1e58      	subs	r0, r3, #1
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6859      	ldr	r1, [r3, #4]
 80048c4:	460b      	mov	r3, r1
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	440b      	add	r3, r1
 80048ca:	0099      	lsls	r1, r3, #2
 80048cc:	440b      	add	r3, r1
 80048ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80048d2:	3301      	adds	r3, #1
 80048d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048d8:	2b00      	cmp	r3, #0
 80048da:	bf0c      	ite	eq
 80048dc:	2301      	moveq	r3, #1
 80048de:	2300      	movne	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <HAL_I2C_Init+0x196>
 80048e6:	2301      	movs	r3, #1
 80048e8:	e022      	b.n	8004930 <HAL_I2C_Init+0x1dc>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10e      	bne.n	8004910 <HAL_I2C_Init+0x1bc>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	1e58      	subs	r0, r3, #1
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6859      	ldr	r1, [r3, #4]
 80048fa:	460b      	mov	r3, r1
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	440b      	add	r3, r1
 8004900:	fbb0 f3f3 	udiv	r3, r0, r3
 8004904:	3301      	adds	r3, #1
 8004906:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800490a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800490e:	e00f      	b.n	8004930 <HAL_I2C_Init+0x1dc>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	1e58      	subs	r0, r3, #1
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6859      	ldr	r1, [r3, #4]
 8004918:	460b      	mov	r3, r1
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	440b      	add	r3, r1
 800491e:	0099      	lsls	r1, r3, #2
 8004920:	440b      	add	r3, r1
 8004922:	fbb0 f3f3 	udiv	r3, r0, r3
 8004926:	3301      	adds	r3, #1
 8004928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800492c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004930:	6879      	ldr	r1, [r7, #4]
 8004932:	6809      	ldr	r1, [r1, #0]
 8004934:	4313      	orrs	r3, r2
 8004936:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	69da      	ldr	r2, [r3, #28]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	431a      	orrs	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	430a      	orrs	r2, r1
 8004952:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800495e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6911      	ldr	r1, [r2, #16]
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	68d2      	ldr	r2, [r2, #12]
 800496a:	4311      	orrs	r1, r2
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6812      	ldr	r2, [r2, #0]
 8004970:	430b      	orrs	r3, r1
 8004972:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	695a      	ldr	r2, [r3, #20]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	431a      	orrs	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0201 	orr.w	r2, r2, #1
 800499e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2220      	movs	r2, #32
 80049aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	000186a0 	.word	0x000186a0
 80049cc:	001e847f 	.word	0x001e847f
 80049d0:	003d08ff 	.word	0x003d08ff
 80049d4:	431bde83 	.word	0x431bde83
 80049d8:	10624dd3 	.word	0x10624dd3

080049dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b20      	cmp	r3, #32
 80049f0:	d129      	bne.n	8004a46 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2224      	movs	r2, #36	@ 0x24
 80049f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 0201 	bic.w	r2, r2, #1
 8004a08:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 0210 	bic.w	r2, r2, #16
 8004a18:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f042 0201 	orr.w	r2, r2, #1
 8004a38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	e000      	b.n	8004a48 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004a46:	2302      	movs	r3, #2
  }
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b20      	cmp	r3, #32
 8004a6c:	d12a      	bne.n	8004ac4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2224      	movs	r2, #36	@ 0x24
 8004a72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 0201 	bic.w	r2, r2, #1
 8004a84:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004a8e:	89fb      	ldrh	r3, [r7, #14]
 8004a90:	f023 030f 	bic.w	r3, r3, #15
 8004a94:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	89fb      	ldrh	r3, [r7, #14]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	89fa      	ldrh	r2, [r7, #14]
 8004aa6:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f042 0201 	orr.w	r2, r2, #1
 8004ab6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2220      	movs	r2, #32
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	e000      	b.n	8004ac6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004ac4:	2302      	movs	r3, #2
  }
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
	...

08004ad4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e0bf      	b.n	8004c66 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d106      	bne.n	8004b00 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7fc fad4 	bl	80010a8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699a      	ldr	r2, [r3, #24]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004b16:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6999      	ldr	r1, [r3, #24]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004b2c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6899      	ldr	r1, [r3, #8]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	4b4a      	ldr	r3, [pc, #296]	@ (8004c70 <HAL_LTDC_Init+0x19c>)
 8004b48:	400b      	ands	r3, r1
 8004b4a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	041b      	lsls	r3, r3, #16
 8004b52:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6899      	ldr	r1, [r3, #8]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	699a      	ldr	r2, [r3, #24]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	431a      	orrs	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68d9      	ldr	r1, [r3, #12]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	4b3e      	ldr	r3, [pc, #248]	@ (8004c70 <HAL_LTDC_Init+0x19c>)
 8004b76:	400b      	ands	r3, r1
 8004b78:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	041b      	lsls	r3, r3, #16
 8004b80:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68d9      	ldr	r1, [r3, #12]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a1a      	ldr	r2, [r3, #32]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6919      	ldr	r1, [r3, #16]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	4b33      	ldr	r3, [pc, #204]	@ (8004c70 <HAL_LTDC_Init+0x19c>)
 8004ba4:	400b      	ands	r3, r1
 8004ba6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bac:	041b      	lsls	r3, r3, #16
 8004bae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6919      	ldr	r1, [r3, #16]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6959      	ldr	r1, [r3, #20]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	4b27      	ldr	r3, [pc, #156]	@ (8004c70 <HAL_LTDC_Init+0x19c>)
 8004bd2:	400b      	ands	r3, r1
 8004bd4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bda:	041b      	lsls	r3, r3, #16
 8004bdc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	6959      	ldr	r1, [r3, #20]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	431a      	orrs	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004bfa:	021b      	lsls	r3, r3, #8
 8004bfc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004c04:	041b      	lsls	r3, r3, #16
 8004c06:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004c16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 0206 	orr.w	r2, r2, #6
 8004c42:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	699a      	ldr	r2, [r3, #24]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0201 	orr.w	r2, r2, #1
 8004c52:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	f000f800 	.word	0xf000f800

08004c74 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c82:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c8a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f003 0304 	and.w	r3, r3, #4
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d023      	beq.n	8004cde <HAL_LTDC_IRQHandler+0x6a>
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d01e      	beq.n	8004cde <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 0204 	bic.w	r2, r2, #4
 8004cae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2204      	movs	r2, #4
 8004cb6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004cbe:	f043 0201 	orr.w	r2, r3, #1
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2204      	movs	r2, #4
 8004ccc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 f86f 	bl	8004dbc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d023      	beq.n	8004d30 <HAL_LTDC_IRQHandler+0xbc>
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d01e      	beq.n	8004d30 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 0202 	bic.w	r2, r2, #2
 8004d00:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2202      	movs	r2, #2
 8004d08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004d10:	f043 0202 	orr.w	r2, r3, #2
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2204      	movs	r2, #4
 8004d1e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f846 	bl	8004dbc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d01b      	beq.n	8004d72 <HAL_LTDC_IRQHandler+0xfe>
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d016      	beq.n	8004d72 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0201 	bic.w	r2, r2, #1
 8004d52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f82f 	bl	8004dd0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f003 0308 	and.w	r3, r3, #8
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d01b      	beq.n	8004db4 <HAL_LTDC_IRQHandler+0x140>
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	f003 0308 	and.w	r3, r3, #8
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d016      	beq.n	8004db4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 0208 	bic.w	r2, r2, #8
 8004d94:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2208      	movs	r2, #8
 8004d9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f818 	bl	8004de4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004db4:	bf00      	nop
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004df8:	b5b0      	push	{r4, r5, r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d101      	bne.n	8004e12 <HAL_LTDC_ConfigLayer+0x1a>
 8004e0e:	2302      	movs	r3, #2
 8004e10:	e02c      	b.n	8004e6c <HAL_LTDC_ConfigLayer+0x74>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2134      	movs	r1, #52	@ 0x34
 8004e28:	fb01 f303 	mul.w	r3, r1, r3
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	4614      	mov	r4, r2
 8004e36:	461d      	mov	r5, r3
 8004e38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e44:	682b      	ldr	r3, [r5, #0]
 8004e46:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	68b9      	ldr	r1, [r7, #8]
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f000 f811 	bl	8004e74 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2201      	movs	r2, #1
 8004e58:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bdb0      	pop	{r4, r5, r7, pc}

08004e74 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b089      	sub	sp, #36	@ 0x24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	685a      	ldr	r2, [r3, #4]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	0c1b      	lsrs	r3, r3, #16
 8004e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e90:	4413      	add	r3, r2
 8004e92:	041b      	lsls	r3, r3, #16
 8004e94:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	01db      	lsls	r3, r3, #7
 8004ea0:	4413      	add	r3, r2
 8004ea2:	3384      	adds	r3, #132	@ 0x84
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	6812      	ldr	r2, [r2, #0]
 8004eaa:	4611      	mov	r1, r2
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	01d2      	lsls	r2, r2, #7
 8004eb0:	440a      	add	r2, r1
 8004eb2:	3284      	adds	r2, #132	@ 0x84
 8004eb4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004eb8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	0c1b      	lsrs	r3, r3, #16
 8004ec6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004eca:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004ecc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	01db      	lsls	r3, r3, #7
 8004ed8:	440b      	add	r3, r1
 8004eda:	3384      	adds	r3, #132	@ 0x84
 8004edc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004ee2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	68da      	ldr	r2, [r3, #12]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ef2:	4413      	add	r3, r2
 8004ef4:	041b      	lsls	r3, r3, #16
 8004ef6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	461a      	mov	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	01db      	lsls	r3, r3, #7
 8004f02:	4413      	add	r3, r2
 8004f04:	3384      	adds	r3, #132	@ 0x84
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	6812      	ldr	r2, [r2, #0]
 8004f0c:	4611      	mov	r1, r2
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	01d2      	lsls	r2, r2, #7
 8004f12:	440a      	add	r2, r1
 8004f14:	3284      	adds	r2, #132	@ 0x84
 8004f16:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004f1a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	689a      	ldr	r2, [r3, #8]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f2a:	4413      	add	r3, r2
 8004f2c:	1c5a      	adds	r2, r3, #1
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4619      	mov	r1, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	01db      	lsls	r3, r3, #7
 8004f38:	440b      	add	r3, r1
 8004f3a:	3384      	adds	r3, #132	@ 0x84
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	461a      	mov	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	01db      	lsls	r3, r3, #7
 8004f4e:	4413      	add	r3, r2
 8004f50:	3384      	adds	r3, #132	@ 0x84
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	6812      	ldr	r2, [r2, #0]
 8004f58:	4611      	mov	r1, r2
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	01d2      	lsls	r2, r2, #7
 8004f5e:	440a      	add	r2, r1
 8004f60:	3284      	adds	r2, #132	@ 0x84
 8004f62:	f023 0307 	bic.w	r3, r3, #7
 8004f66:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	01db      	lsls	r3, r3, #7
 8004f72:	4413      	add	r3, r2
 8004f74:	3384      	adds	r3, #132	@ 0x84
 8004f76:	461a      	mov	r2, r3
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004f84:	021b      	lsls	r3, r3, #8
 8004f86:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004f8e:	041b      	lsls	r3, r3, #16
 8004f90:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	061b      	lsls	r3, r3, #24
 8004f98:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	01db      	lsls	r3, r3, #7
 8004fa4:	4413      	add	r3, r2
 8004fa6:	3384      	adds	r3, #132	@ 0x84
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	01db      	lsls	r3, r3, #7
 8004fb4:	4413      	add	r3, r2
 8004fb6:	3384      	adds	r3, #132	@ 0x84
 8004fb8:	461a      	mov	r2, r3
 8004fba:	2300      	movs	r3, #0
 8004fbc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	01db      	lsls	r3, r3, #7
 8004fd8:	440b      	add	r3, r1
 8004fda:	3384      	adds	r3, #132	@ 0x84
 8004fdc:	4619      	mov	r1, r3
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	01db      	lsls	r3, r3, #7
 8004fee:	4413      	add	r3, r2
 8004ff0:	3384      	adds	r3, #132	@ 0x84
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	6812      	ldr	r2, [r2, #0]
 8004ff8:	4611      	mov	r1, r2
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	01d2      	lsls	r2, r2, #7
 8004ffe:	440a      	add	r2, r1
 8005000:	3284      	adds	r2, #132	@ 0x84
 8005002:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005006:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	461a      	mov	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	01db      	lsls	r3, r3, #7
 8005012:	4413      	add	r3, r2
 8005014:	3384      	adds	r3, #132	@ 0x84
 8005016:	461a      	mov	r2, r3
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	461a      	mov	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	01db      	lsls	r3, r3, #7
 8005028:	4413      	add	r3, r2
 800502a:	3384      	adds	r3, #132	@ 0x84
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	6812      	ldr	r2, [r2, #0]
 8005032:	4611      	mov	r1, r2
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	01d2      	lsls	r2, r2, #7
 8005038:	440a      	add	r2, r1
 800503a:	3284      	adds	r2, #132	@ 0x84
 800503c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005040:	f023 0307 	bic.w	r3, r3, #7
 8005044:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	69da      	ldr	r2, [r3, #28]
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	68f9      	ldr	r1, [r7, #12]
 8005050:	6809      	ldr	r1, [r1, #0]
 8005052:	4608      	mov	r0, r1
 8005054:	6879      	ldr	r1, [r7, #4]
 8005056:	01c9      	lsls	r1, r1, #7
 8005058:	4401      	add	r1, r0
 800505a:	3184      	adds	r1, #132	@ 0x84
 800505c:	4313      	orrs	r3, r2
 800505e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	461a      	mov	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	01db      	lsls	r3, r3, #7
 800506a:	4413      	add	r3, r2
 800506c:	3384      	adds	r3, #132	@ 0x84
 800506e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	461a      	mov	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	01db      	lsls	r3, r3, #7
 800507a:	4413      	add	r3, r2
 800507c:	3384      	adds	r3, #132	@ 0x84
 800507e:	461a      	mov	r2, r3
 8005080:	2300      	movs	r3, #0
 8005082:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	461a      	mov	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	01db      	lsls	r3, r3, #7
 800508e:	4413      	add	r3, r2
 8005090:	3384      	adds	r3, #132	@ 0x84
 8005092:	461a      	mov	r2, r3
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005098:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d102      	bne.n	80050a8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80050a2:	2304      	movs	r3, #4
 80050a4:	61fb      	str	r3, [r7, #28]
 80050a6:	e01b      	b.n	80050e0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d102      	bne.n	80050b6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80050b0:	2303      	movs	r3, #3
 80050b2:	61fb      	str	r3, [r7, #28]
 80050b4:	e014      	b.n	80050e0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	2b04      	cmp	r3, #4
 80050bc:	d00b      	beq.n	80050d6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d007      	beq.n	80050d6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80050ca:	2b03      	cmp	r3, #3
 80050cc:	d003      	beq.n	80050d6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80050d2:	2b07      	cmp	r3, #7
 80050d4:	d102      	bne.n	80050dc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80050d6:	2302      	movs	r3, #2
 80050d8:	61fb      	str	r3, [r7, #28]
 80050da:	e001      	b.n	80050e0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80050dc:	2301      	movs	r3, #1
 80050de:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	461a      	mov	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	01db      	lsls	r3, r3, #7
 80050ea:	4413      	add	r3, r2
 80050ec:	3384      	adds	r3, #132	@ 0x84
 80050ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	6812      	ldr	r2, [r2, #0]
 80050f4:	4611      	mov	r1, r2
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	01d2      	lsls	r2, r2, #7
 80050fa:	440a      	add	r2, r1
 80050fc:	3284      	adds	r2, #132	@ 0x84
 80050fe:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005102:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005108:	69fa      	ldr	r2, [r7, #28]
 800510a:	fb02 f303 	mul.w	r3, r2, r3
 800510e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	6859      	ldr	r1, [r3, #4]
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	1acb      	subs	r3, r1, r3
 800511a:	69f9      	ldr	r1, [r7, #28]
 800511c:	fb01 f303 	mul.w	r3, r1, r3
 8005120:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005122:	68f9      	ldr	r1, [r7, #12]
 8005124:	6809      	ldr	r1, [r1, #0]
 8005126:	4608      	mov	r0, r1
 8005128:	6879      	ldr	r1, [r7, #4]
 800512a:	01c9      	lsls	r1, r1, #7
 800512c:	4401      	add	r1, r0
 800512e:	3184      	adds	r1, #132	@ 0x84
 8005130:	4313      	orrs	r3, r2
 8005132:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	461a      	mov	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	01db      	lsls	r3, r3, #7
 800513e:	4413      	add	r3, r2
 8005140:	3384      	adds	r3, #132	@ 0x84
 8005142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	6812      	ldr	r2, [r2, #0]
 8005148:	4611      	mov	r1, r2
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	01d2      	lsls	r2, r2, #7
 800514e:	440a      	add	r2, r1
 8005150:	3284      	adds	r2, #132	@ 0x84
 8005152:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005156:	f023 0307 	bic.w	r3, r3, #7
 800515a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	461a      	mov	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	01db      	lsls	r3, r3, #7
 8005166:	4413      	add	r3, r2
 8005168:	3384      	adds	r3, #132	@ 0x84
 800516a:	461a      	mov	r2, r3
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005170:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	01db      	lsls	r3, r3, #7
 800517c:	4413      	add	r3, r2
 800517e:	3384      	adds	r3, #132	@ 0x84
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	6812      	ldr	r2, [r2, #0]
 8005186:	4611      	mov	r1, r2
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	01d2      	lsls	r2, r2, #7
 800518c:	440a      	add	r2, r1
 800518e:	3284      	adds	r2, #132	@ 0x84
 8005190:	f043 0301 	orr.w	r3, r3, #1
 8005194:	6013      	str	r3, [r2, #0]
}
 8005196:	bf00      	nop
 8005198:	3724      	adds	r7, #36	@ 0x24
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
	...

080051a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e267      	b.n	8005686 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d075      	beq.n	80052ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80051c2:	4b88      	ldr	r3, [pc, #544]	@ (80053e4 <HAL_RCC_OscConfig+0x240>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f003 030c 	and.w	r3, r3, #12
 80051ca:	2b04      	cmp	r3, #4
 80051cc:	d00c      	beq.n	80051e8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051ce:	4b85      	ldr	r3, [pc, #532]	@ (80053e4 <HAL_RCC_OscConfig+0x240>)
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80051d6:	2b08      	cmp	r3, #8
 80051d8:	d112      	bne.n	8005200 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051da:	4b82      	ldr	r3, [pc, #520]	@ (80053e4 <HAL_RCC_OscConfig+0x240>)
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051e6:	d10b      	bne.n	8005200 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051e8:	4b7e      	ldr	r3, [pc, #504]	@ (80053e4 <HAL_RCC_OscConfig+0x240>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d05b      	beq.n	80052ac <HAL_RCC_OscConfig+0x108>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d157      	bne.n	80052ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e242      	b.n	8005686 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005208:	d106      	bne.n	8005218 <HAL_RCC_OscConfig+0x74>
 800520a:	4b76      	ldr	r3, [pc, #472]	@ (80053e4 <HAL_RCC_OscConfig+0x240>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a75      	ldr	r2, [pc, #468]	@ (80053e4 <HAL_RCC_OscConfig+0x240>)
 8005210:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005214:	6013      	str	r3, [r2, #0]
 8005216:	e01d      	b.n	8005254 <HAL_RCC_OscConfig+0xb0>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005220:	d10c      	bne.n	800523c <HAL_RCC_OscConfig+0x98>
 8005222:	4b70      	ldr	r3, [pc, #448]	@ (80053e4 <HAL_RCC_OscConfig+0x240>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a6f      	ldr	r2, [pc, #444]	@ (80053e4 <HAL_RCC_OscConfig+0x240>)
 8005228:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800522c:	6013      	str	r3, [r2, #0]
 800522e:	4b6d      	ldr	r3, [pc, #436]	@ (80053e4 <HAL_RCC_OscConfig+0x240>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a6c      	ldr	r2, [pc, #432]	@ (80053e4 <HAL_RCC_OscConfig+0x240>)
 8005234:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005238:	6013      	str	r3, [r2, #0]
 800523a:	e00b      	b.n	8005254 <HAL_RCC_OscConfig+0xb0>
 800523c:	4b69      	ldr	r3, [pc, #420]	@ (80053e4 <HAL_RCC_OscConfig+0x240>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a68      	ldr	r2, [pc, #416]	@ (80053e4 <HAL_RCC_OscConfig+0x240>)
 8005242:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005246:	6013      	str	r3, [r2, #0]
 8005248:	4b66      	ldr	r3, [pc, #408]	@ (80053e4 <HAL_RCC_OscConfig+0x240>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a65      	ldr	r2, [pc, #404]	@ (80053e4 <HAL_RCC_OscConfig+0x240>)
 800524e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005252:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d013      	beq.n	8005284 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800525c:	f7fc fc52 	bl	8001b04 <HAL_GetTick>
 8005260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005262:	e008      	b.n	8005276 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005264:	f7fc fc4e 	bl	8001b04 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	2b64      	cmp	r3, #100	@ 0x64
 8005270:	d901      	bls.n	8005276 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e207      	b.n	8005686 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005276:	4b5b      	ldr	r3, [pc, #364]	@ (80053e4 <HAL_RCC_OscConfig+0x240>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d0f0      	beq.n	8005264 <HAL_RCC_OscConfig+0xc0>
 8005282:	e014      	b.n	80052ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005284:	f7fc fc3e 	bl	8001b04 <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800528c:	f7fc fc3a 	bl	8001b04 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b64      	cmp	r3, #100	@ 0x64
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e1f3      	b.n	8005686 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800529e:	4b51      	ldr	r3, [pc, #324]	@ (80053e4 <HAL_RCC_OscConfig+0x240>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1f0      	bne.n	800528c <HAL_RCC_OscConfig+0xe8>
 80052aa:	e000      	b.n	80052ae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d063      	beq.n	8005382 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80052ba:	4b4a      	ldr	r3, [pc, #296]	@ (80053e4 <HAL_RCC_OscConfig+0x240>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f003 030c 	and.w	r3, r3, #12
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00b      	beq.n	80052de <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052c6:	4b47      	ldr	r3, [pc, #284]	@ (80053e4 <HAL_RCC_OscConfig+0x240>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80052ce:	2b08      	cmp	r3, #8
 80052d0:	d11c      	bne.n	800530c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052d2:	4b44      	ldr	r3, [pc, #272]	@ (80053e4 <HAL_RCC_OscConfig+0x240>)
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d116      	bne.n	800530c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052de:	4b41      	ldr	r3, [pc, #260]	@ (80053e4 <HAL_RCC_OscConfig+0x240>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d005      	beq.n	80052f6 <HAL_RCC_OscConfig+0x152>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d001      	beq.n	80052f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e1c7      	b.n	8005686 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052f6:	4b3b      	ldr	r3, [pc, #236]	@ (80053e4 <HAL_RCC_OscConfig+0x240>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	4937      	ldr	r1, [pc, #220]	@ (80053e4 <HAL_RCC_OscConfig+0x240>)
 8005306:	4313      	orrs	r3, r2
 8005308:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800530a:	e03a      	b.n	8005382 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d020      	beq.n	8005356 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005314:	4b34      	ldr	r3, [pc, #208]	@ (80053e8 <HAL_RCC_OscConfig+0x244>)
 8005316:	2201      	movs	r2, #1
 8005318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800531a:	f7fc fbf3 	bl	8001b04 <HAL_GetTick>
 800531e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005320:	e008      	b.n	8005334 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005322:	f7fc fbef 	bl	8001b04 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b02      	cmp	r3, #2
 800532e:	d901      	bls.n	8005334 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e1a8      	b.n	8005686 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005334:	4b2b      	ldr	r3, [pc, #172]	@ (80053e4 <HAL_RCC_OscConfig+0x240>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d0f0      	beq.n	8005322 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005340:	4b28      	ldr	r3, [pc, #160]	@ (80053e4 <HAL_RCC_OscConfig+0x240>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	00db      	lsls	r3, r3, #3
 800534e:	4925      	ldr	r1, [pc, #148]	@ (80053e4 <HAL_RCC_OscConfig+0x240>)
 8005350:	4313      	orrs	r3, r2
 8005352:	600b      	str	r3, [r1, #0]
 8005354:	e015      	b.n	8005382 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005356:	4b24      	ldr	r3, [pc, #144]	@ (80053e8 <HAL_RCC_OscConfig+0x244>)
 8005358:	2200      	movs	r2, #0
 800535a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800535c:	f7fc fbd2 	bl	8001b04 <HAL_GetTick>
 8005360:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005362:	e008      	b.n	8005376 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005364:	f7fc fbce 	bl	8001b04 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b02      	cmp	r3, #2
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e187      	b.n	8005686 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005376:	4b1b      	ldr	r3, [pc, #108]	@ (80053e4 <HAL_RCC_OscConfig+0x240>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1f0      	bne.n	8005364 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0308 	and.w	r3, r3, #8
 800538a:	2b00      	cmp	r3, #0
 800538c:	d036      	beq.n	80053fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d016      	beq.n	80053c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005396:	4b15      	ldr	r3, [pc, #84]	@ (80053ec <HAL_RCC_OscConfig+0x248>)
 8005398:	2201      	movs	r2, #1
 800539a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800539c:	f7fc fbb2 	bl	8001b04 <HAL_GetTick>
 80053a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053a2:	e008      	b.n	80053b6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053a4:	f7fc fbae 	bl	8001b04 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e167      	b.n	8005686 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053b6:	4b0b      	ldr	r3, [pc, #44]	@ (80053e4 <HAL_RCC_OscConfig+0x240>)
 80053b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d0f0      	beq.n	80053a4 <HAL_RCC_OscConfig+0x200>
 80053c2:	e01b      	b.n	80053fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053c4:	4b09      	ldr	r3, [pc, #36]	@ (80053ec <HAL_RCC_OscConfig+0x248>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053ca:	f7fc fb9b 	bl	8001b04 <HAL_GetTick>
 80053ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053d0:	e00e      	b.n	80053f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053d2:	f7fc fb97 	bl	8001b04 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d907      	bls.n	80053f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e150      	b.n	8005686 <HAL_RCC_OscConfig+0x4e2>
 80053e4:	40023800 	.word	0x40023800
 80053e8:	42470000 	.word	0x42470000
 80053ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053f0:	4b88      	ldr	r3, [pc, #544]	@ (8005614 <HAL_RCC_OscConfig+0x470>)
 80053f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1ea      	bne.n	80053d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 8097 	beq.w	8005538 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800540a:	2300      	movs	r3, #0
 800540c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800540e:	4b81      	ldr	r3, [pc, #516]	@ (8005614 <HAL_RCC_OscConfig+0x470>)
 8005410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005412:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10f      	bne.n	800543a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800541a:	2300      	movs	r3, #0
 800541c:	60bb      	str	r3, [r7, #8]
 800541e:	4b7d      	ldr	r3, [pc, #500]	@ (8005614 <HAL_RCC_OscConfig+0x470>)
 8005420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005422:	4a7c      	ldr	r2, [pc, #496]	@ (8005614 <HAL_RCC_OscConfig+0x470>)
 8005424:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005428:	6413      	str	r3, [r2, #64]	@ 0x40
 800542a:	4b7a      	ldr	r3, [pc, #488]	@ (8005614 <HAL_RCC_OscConfig+0x470>)
 800542c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800542e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005432:	60bb      	str	r3, [r7, #8]
 8005434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005436:	2301      	movs	r3, #1
 8005438:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800543a:	4b77      	ldr	r3, [pc, #476]	@ (8005618 <HAL_RCC_OscConfig+0x474>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005442:	2b00      	cmp	r3, #0
 8005444:	d118      	bne.n	8005478 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005446:	4b74      	ldr	r3, [pc, #464]	@ (8005618 <HAL_RCC_OscConfig+0x474>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a73      	ldr	r2, [pc, #460]	@ (8005618 <HAL_RCC_OscConfig+0x474>)
 800544c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005450:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005452:	f7fc fb57 	bl	8001b04 <HAL_GetTick>
 8005456:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005458:	e008      	b.n	800546c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800545a:	f7fc fb53 	bl	8001b04 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d901      	bls.n	800546c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e10c      	b.n	8005686 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800546c:	4b6a      	ldr	r3, [pc, #424]	@ (8005618 <HAL_RCC_OscConfig+0x474>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005474:	2b00      	cmp	r3, #0
 8005476:	d0f0      	beq.n	800545a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d106      	bne.n	800548e <HAL_RCC_OscConfig+0x2ea>
 8005480:	4b64      	ldr	r3, [pc, #400]	@ (8005614 <HAL_RCC_OscConfig+0x470>)
 8005482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005484:	4a63      	ldr	r2, [pc, #396]	@ (8005614 <HAL_RCC_OscConfig+0x470>)
 8005486:	f043 0301 	orr.w	r3, r3, #1
 800548a:	6713      	str	r3, [r2, #112]	@ 0x70
 800548c:	e01c      	b.n	80054c8 <HAL_RCC_OscConfig+0x324>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	2b05      	cmp	r3, #5
 8005494:	d10c      	bne.n	80054b0 <HAL_RCC_OscConfig+0x30c>
 8005496:	4b5f      	ldr	r3, [pc, #380]	@ (8005614 <HAL_RCC_OscConfig+0x470>)
 8005498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800549a:	4a5e      	ldr	r2, [pc, #376]	@ (8005614 <HAL_RCC_OscConfig+0x470>)
 800549c:	f043 0304 	orr.w	r3, r3, #4
 80054a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80054a2:	4b5c      	ldr	r3, [pc, #368]	@ (8005614 <HAL_RCC_OscConfig+0x470>)
 80054a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054a6:	4a5b      	ldr	r2, [pc, #364]	@ (8005614 <HAL_RCC_OscConfig+0x470>)
 80054a8:	f043 0301 	orr.w	r3, r3, #1
 80054ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80054ae:	e00b      	b.n	80054c8 <HAL_RCC_OscConfig+0x324>
 80054b0:	4b58      	ldr	r3, [pc, #352]	@ (8005614 <HAL_RCC_OscConfig+0x470>)
 80054b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054b4:	4a57      	ldr	r2, [pc, #348]	@ (8005614 <HAL_RCC_OscConfig+0x470>)
 80054b6:	f023 0301 	bic.w	r3, r3, #1
 80054ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80054bc:	4b55      	ldr	r3, [pc, #340]	@ (8005614 <HAL_RCC_OscConfig+0x470>)
 80054be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054c0:	4a54      	ldr	r2, [pc, #336]	@ (8005614 <HAL_RCC_OscConfig+0x470>)
 80054c2:	f023 0304 	bic.w	r3, r3, #4
 80054c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d015      	beq.n	80054fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d0:	f7fc fb18 	bl	8001b04 <HAL_GetTick>
 80054d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054d6:	e00a      	b.n	80054ee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054d8:	f7fc fb14 	bl	8001b04 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d901      	bls.n	80054ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e0cb      	b.n	8005686 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054ee:	4b49      	ldr	r3, [pc, #292]	@ (8005614 <HAL_RCC_OscConfig+0x470>)
 80054f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d0ee      	beq.n	80054d8 <HAL_RCC_OscConfig+0x334>
 80054fa:	e014      	b.n	8005526 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054fc:	f7fc fb02 	bl	8001b04 <HAL_GetTick>
 8005500:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005502:	e00a      	b.n	800551a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005504:	f7fc fafe 	bl	8001b04 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005512:	4293      	cmp	r3, r2
 8005514:	d901      	bls.n	800551a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e0b5      	b.n	8005686 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800551a:	4b3e      	ldr	r3, [pc, #248]	@ (8005614 <HAL_RCC_OscConfig+0x470>)
 800551c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1ee      	bne.n	8005504 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005526:	7dfb      	ldrb	r3, [r7, #23]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d105      	bne.n	8005538 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800552c:	4b39      	ldr	r3, [pc, #228]	@ (8005614 <HAL_RCC_OscConfig+0x470>)
 800552e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005530:	4a38      	ldr	r2, [pc, #224]	@ (8005614 <HAL_RCC_OscConfig+0x470>)
 8005532:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005536:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	2b00      	cmp	r3, #0
 800553e:	f000 80a1 	beq.w	8005684 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005542:	4b34      	ldr	r3, [pc, #208]	@ (8005614 <HAL_RCC_OscConfig+0x470>)
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f003 030c 	and.w	r3, r3, #12
 800554a:	2b08      	cmp	r3, #8
 800554c:	d05c      	beq.n	8005608 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	2b02      	cmp	r3, #2
 8005554:	d141      	bne.n	80055da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005556:	4b31      	ldr	r3, [pc, #196]	@ (800561c <HAL_RCC_OscConfig+0x478>)
 8005558:	2200      	movs	r2, #0
 800555a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800555c:	f7fc fad2 	bl	8001b04 <HAL_GetTick>
 8005560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005562:	e008      	b.n	8005576 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005564:	f7fc face 	bl	8001b04 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b02      	cmp	r3, #2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e087      	b.n	8005686 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005576:	4b27      	ldr	r3, [pc, #156]	@ (8005614 <HAL_RCC_OscConfig+0x470>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1f0      	bne.n	8005564 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	69da      	ldr	r2, [r3, #28]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	431a      	orrs	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005590:	019b      	lsls	r3, r3, #6
 8005592:	431a      	orrs	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005598:	085b      	lsrs	r3, r3, #1
 800559a:	3b01      	subs	r3, #1
 800559c:	041b      	lsls	r3, r3, #16
 800559e:	431a      	orrs	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a4:	061b      	lsls	r3, r3, #24
 80055a6:	491b      	ldr	r1, [pc, #108]	@ (8005614 <HAL_RCC_OscConfig+0x470>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055ac:	4b1b      	ldr	r3, [pc, #108]	@ (800561c <HAL_RCC_OscConfig+0x478>)
 80055ae:	2201      	movs	r2, #1
 80055b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b2:	f7fc faa7 	bl	8001b04 <HAL_GetTick>
 80055b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055b8:	e008      	b.n	80055cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ba:	f7fc faa3 	bl	8001b04 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d901      	bls.n	80055cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e05c      	b.n	8005686 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055cc:	4b11      	ldr	r3, [pc, #68]	@ (8005614 <HAL_RCC_OscConfig+0x470>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d0f0      	beq.n	80055ba <HAL_RCC_OscConfig+0x416>
 80055d8:	e054      	b.n	8005684 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055da:	4b10      	ldr	r3, [pc, #64]	@ (800561c <HAL_RCC_OscConfig+0x478>)
 80055dc:	2200      	movs	r2, #0
 80055de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e0:	f7fc fa90 	bl	8001b04 <HAL_GetTick>
 80055e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055e6:	e008      	b.n	80055fa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055e8:	f7fc fa8c 	bl	8001b04 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e045      	b.n	8005686 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055fa:	4b06      	ldr	r3, [pc, #24]	@ (8005614 <HAL_RCC_OscConfig+0x470>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1f0      	bne.n	80055e8 <HAL_RCC_OscConfig+0x444>
 8005606:	e03d      	b.n	8005684 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d107      	bne.n	8005620 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e038      	b.n	8005686 <HAL_RCC_OscConfig+0x4e2>
 8005614:	40023800 	.word	0x40023800
 8005618:	40007000 	.word	0x40007000
 800561c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005620:	4b1b      	ldr	r3, [pc, #108]	@ (8005690 <HAL_RCC_OscConfig+0x4ec>)
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d028      	beq.n	8005680 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005638:	429a      	cmp	r2, r3
 800563a:	d121      	bne.n	8005680 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005646:	429a      	cmp	r2, r3
 8005648:	d11a      	bne.n	8005680 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005650:	4013      	ands	r3, r2
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005656:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005658:	4293      	cmp	r3, r2
 800565a:	d111      	bne.n	8005680 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005666:	085b      	lsrs	r3, r3, #1
 8005668:	3b01      	subs	r3, #1
 800566a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800566c:	429a      	cmp	r2, r3
 800566e:	d107      	bne.n	8005680 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800567c:	429a      	cmp	r2, r3
 800567e:	d001      	beq.n	8005684 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e000      	b.n	8005686 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3718      	adds	r7, #24
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	40023800 	.word	0x40023800

08005694 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d101      	bne.n	80056a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e0cc      	b.n	8005842 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056a8:	4b68      	ldr	r3, [pc, #416]	@ (800584c <HAL_RCC_ClockConfig+0x1b8>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 030f 	and.w	r3, r3, #15
 80056b0:	683a      	ldr	r2, [r7, #0]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d90c      	bls.n	80056d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056b6:	4b65      	ldr	r3, [pc, #404]	@ (800584c <HAL_RCC_ClockConfig+0x1b8>)
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	b2d2      	uxtb	r2, r2
 80056bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056be:	4b63      	ldr	r3, [pc, #396]	@ (800584c <HAL_RCC_ClockConfig+0x1b8>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 030f 	and.w	r3, r3, #15
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d001      	beq.n	80056d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e0b8      	b.n	8005842 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0302 	and.w	r3, r3, #2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d020      	beq.n	800571e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0304 	and.w	r3, r3, #4
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d005      	beq.n	80056f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056e8:	4b59      	ldr	r3, [pc, #356]	@ (8005850 <HAL_RCC_ClockConfig+0x1bc>)
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	4a58      	ldr	r2, [pc, #352]	@ (8005850 <HAL_RCC_ClockConfig+0x1bc>)
 80056ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80056f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0308 	and.w	r3, r3, #8
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d005      	beq.n	800570c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005700:	4b53      	ldr	r3, [pc, #332]	@ (8005850 <HAL_RCC_ClockConfig+0x1bc>)
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	4a52      	ldr	r2, [pc, #328]	@ (8005850 <HAL_RCC_ClockConfig+0x1bc>)
 8005706:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800570a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800570c:	4b50      	ldr	r3, [pc, #320]	@ (8005850 <HAL_RCC_ClockConfig+0x1bc>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	494d      	ldr	r1, [pc, #308]	@ (8005850 <HAL_RCC_ClockConfig+0x1bc>)
 800571a:	4313      	orrs	r3, r2
 800571c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b00      	cmp	r3, #0
 8005728:	d044      	beq.n	80057b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d107      	bne.n	8005742 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005732:	4b47      	ldr	r3, [pc, #284]	@ (8005850 <HAL_RCC_ClockConfig+0x1bc>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d119      	bne.n	8005772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e07f      	b.n	8005842 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	2b02      	cmp	r3, #2
 8005748:	d003      	beq.n	8005752 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800574e:	2b03      	cmp	r3, #3
 8005750:	d107      	bne.n	8005762 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005752:	4b3f      	ldr	r3, [pc, #252]	@ (8005850 <HAL_RCC_ClockConfig+0x1bc>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d109      	bne.n	8005772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e06f      	b.n	8005842 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005762:	4b3b      	ldr	r3, [pc, #236]	@ (8005850 <HAL_RCC_ClockConfig+0x1bc>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e067      	b.n	8005842 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005772:	4b37      	ldr	r3, [pc, #220]	@ (8005850 <HAL_RCC_ClockConfig+0x1bc>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f023 0203 	bic.w	r2, r3, #3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	4934      	ldr	r1, [pc, #208]	@ (8005850 <HAL_RCC_ClockConfig+0x1bc>)
 8005780:	4313      	orrs	r3, r2
 8005782:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005784:	f7fc f9be 	bl	8001b04 <HAL_GetTick>
 8005788:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800578a:	e00a      	b.n	80057a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800578c:	f7fc f9ba 	bl	8001b04 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800579a:	4293      	cmp	r3, r2
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e04f      	b.n	8005842 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057a2:	4b2b      	ldr	r3, [pc, #172]	@ (8005850 <HAL_RCC_ClockConfig+0x1bc>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f003 020c 	and.w	r2, r3, #12
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d1eb      	bne.n	800578c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057b4:	4b25      	ldr	r3, [pc, #148]	@ (800584c <HAL_RCC_ClockConfig+0x1b8>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 030f 	and.w	r3, r3, #15
 80057bc:	683a      	ldr	r2, [r7, #0]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d20c      	bcs.n	80057dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057c2:	4b22      	ldr	r3, [pc, #136]	@ (800584c <HAL_RCC_ClockConfig+0x1b8>)
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	b2d2      	uxtb	r2, r2
 80057c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ca:	4b20      	ldr	r3, [pc, #128]	@ (800584c <HAL_RCC_ClockConfig+0x1b8>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 030f 	and.w	r3, r3, #15
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d001      	beq.n	80057dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e032      	b.n	8005842 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0304 	and.w	r3, r3, #4
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d008      	beq.n	80057fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057e8:	4b19      	ldr	r3, [pc, #100]	@ (8005850 <HAL_RCC_ClockConfig+0x1bc>)
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	4916      	ldr	r1, [pc, #88]	@ (8005850 <HAL_RCC_ClockConfig+0x1bc>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0308 	and.w	r3, r3, #8
 8005802:	2b00      	cmp	r3, #0
 8005804:	d009      	beq.n	800581a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005806:	4b12      	ldr	r3, [pc, #72]	@ (8005850 <HAL_RCC_ClockConfig+0x1bc>)
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	490e      	ldr	r1, [pc, #56]	@ (8005850 <HAL_RCC_ClockConfig+0x1bc>)
 8005816:	4313      	orrs	r3, r2
 8005818:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800581a:	f000 f821 	bl	8005860 <HAL_RCC_GetSysClockFreq>
 800581e:	4602      	mov	r2, r0
 8005820:	4b0b      	ldr	r3, [pc, #44]	@ (8005850 <HAL_RCC_ClockConfig+0x1bc>)
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	091b      	lsrs	r3, r3, #4
 8005826:	f003 030f 	and.w	r3, r3, #15
 800582a:	490a      	ldr	r1, [pc, #40]	@ (8005854 <HAL_RCC_ClockConfig+0x1c0>)
 800582c:	5ccb      	ldrb	r3, [r1, r3]
 800582e:	fa22 f303 	lsr.w	r3, r2, r3
 8005832:	4a09      	ldr	r2, [pc, #36]	@ (8005858 <HAL_RCC_ClockConfig+0x1c4>)
 8005834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005836:	4b09      	ldr	r3, [pc, #36]	@ (800585c <HAL_RCC_ClockConfig+0x1c8>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4618      	mov	r0, r3
 800583c:	f7fb ff42 	bl	80016c4 <HAL_InitTick>

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	40023c00 	.word	0x40023c00
 8005850:	40023800 	.word	0x40023800
 8005854:	08009228 	.word	0x08009228
 8005858:	20000004 	.word	0x20000004
 800585c:	20000008 	.word	0x20000008

08005860 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005864:	b094      	sub	sp, #80	@ 0x50
 8005866:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005868:	2300      	movs	r3, #0
 800586a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800586c:	2300      	movs	r3, #0
 800586e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005870:	2300      	movs	r3, #0
 8005872:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005874:	2300      	movs	r3, #0
 8005876:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005878:	4b79      	ldr	r3, [pc, #484]	@ (8005a60 <HAL_RCC_GetSysClockFreq+0x200>)
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f003 030c 	and.w	r3, r3, #12
 8005880:	2b08      	cmp	r3, #8
 8005882:	d00d      	beq.n	80058a0 <HAL_RCC_GetSysClockFreq+0x40>
 8005884:	2b08      	cmp	r3, #8
 8005886:	f200 80e1 	bhi.w	8005a4c <HAL_RCC_GetSysClockFreq+0x1ec>
 800588a:	2b00      	cmp	r3, #0
 800588c:	d002      	beq.n	8005894 <HAL_RCC_GetSysClockFreq+0x34>
 800588e:	2b04      	cmp	r3, #4
 8005890:	d003      	beq.n	800589a <HAL_RCC_GetSysClockFreq+0x3a>
 8005892:	e0db      	b.n	8005a4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005894:	4b73      	ldr	r3, [pc, #460]	@ (8005a64 <HAL_RCC_GetSysClockFreq+0x204>)
 8005896:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005898:	e0db      	b.n	8005a52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800589a:	4b73      	ldr	r3, [pc, #460]	@ (8005a68 <HAL_RCC_GetSysClockFreq+0x208>)
 800589c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800589e:	e0d8      	b.n	8005a52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058a0:	4b6f      	ldr	r3, [pc, #444]	@ (8005a60 <HAL_RCC_GetSysClockFreq+0x200>)
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058a8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058aa:	4b6d      	ldr	r3, [pc, #436]	@ (8005a60 <HAL_RCC_GetSysClockFreq+0x200>)
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d063      	beq.n	800597e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058b6:	4b6a      	ldr	r3, [pc, #424]	@ (8005a60 <HAL_RCC_GetSysClockFreq+0x200>)
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	099b      	lsrs	r3, r3, #6
 80058bc:	2200      	movs	r2, #0
 80058be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80058c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80058c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80058ca:	2300      	movs	r3, #0
 80058cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80058ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80058d2:	4622      	mov	r2, r4
 80058d4:	462b      	mov	r3, r5
 80058d6:	f04f 0000 	mov.w	r0, #0
 80058da:	f04f 0100 	mov.w	r1, #0
 80058de:	0159      	lsls	r1, r3, #5
 80058e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058e4:	0150      	lsls	r0, r2, #5
 80058e6:	4602      	mov	r2, r0
 80058e8:	460b      	mov	r3, r1
 80058ea:	4621      	mov	r1, r4
 80058ec:	1a51      	subs	r1, r2, r1
 80058ee:	6139      	str	r1, [r7, #16]
 80058f0:	4629      	mov	r1, r5
 80058f2:	eb63 0301 	sbc.w	r3, r3, r1
 80058f6:	617b      	str	r3, [r7, #20]
 80058f8:	f04f 0200 	mov.w	r2, #0
 80058fc:	f04f 0300 	mov.w	r3, #0
 8005900:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005904:	4659      	mov	r1, fp
 8005906:	018b      	lsls	r3, r1, #6
 8005908:	4651      	mov	r1, sl
 800590a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800590e:	4651      	mov	r1, sl
 8005910:	018a      	lsls	r2, r1, #6
 8005912:	4651      	mov	r1, sl
 8005914:	ebb2 0801 	subs.w	r8, r2, r1
 8005918:	4659      	mov	r1, fp
 800591a:	eb63 0901 	sbc.w	r9, r3, r1
 800591e:	f04f 0200 	mov.w	r2, #0
 8005922:	f04f 0300 	mov.w	r3, #0
 8005926:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800592a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800592e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005932:	4690      	mov	r8, r2
 8005934:	4699      	mov	r9, r3
 8005936:	4623      	mov	r3, r4
 8005938:	eb18 0303 	adds.w	r3, r8, r3
 800593c:	60bb      	str	r3, [r7, #8]
 800593e:	462b      	mov	r3, r5
 8005940:	eb49 0303 	adc.w	r3, r9, r3
 8005944:	60fb      	str	r3, [r7, #12]
 8005946:	f04f 0200 	mov.w	r2, #0
 800594a:	f04f 0300 	mov.w	r3, #0
 800594e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005952:	4629      	mov	r1, r5
 8005954:	024b      	lsls	r3, r1, #9
 8005956:	4621      	mov	r1, r4
 8005958:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800595c:	4621      	mov	r1, r4
 800595e:	024a      	lsls	r2, r1, #9
 8005960:	4610      	mov	r0, r2
 8005962:	4619      	mov	r1, r3
 8005964:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005966:	2200      	movs	r2, #0
 8005968:	62bb      	str	r3, [r7, #40]	@ 0x28
 800596a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800596c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005970:	f7fa fc3e 	bl	80001f0 <__aeabi_uldivmod>
 8005974:	4602      	mov	r2, r0
 8005976:	460b      	mov	r3, r1
 8005978:	4613      	mov	r3, r2
 800597a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800597c:	e058      	b.n	8005a30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800597e:	4b38      	ldr	r3, [pc, #224]	@ (8005a60 <HAL_RCC_GetSysClockFreq+0x200>)
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	099b      	lsrs	r3, r3, #6
 8005984:	2200      	movs	r2, #0
 8005986:	4618      	mov	r0, r3
 8005988:	4611      	mov	r1, r2
 800598a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800598e:	623b      	str	r3, [r7, #32]
 8005990:	2300      	movs	r3, #0
 8005992:	627b      	str	r3, [r7, #36]	@ 0x24
 8005994:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005998:	4642      	mov	r2, r8
 800599a:	464b      	mov	r3, r9
 800599c:	f04f 0000 	mov.w	r0, #0
 80059a0:	f04f 0100 	mov.w	r1, #0
 80059a4:	0159      	lsls	r1, r3, #5
 80059a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059aa:	0150      	lsls	r0, r2, #5
 80059ac:	4602      	mov	r2, r0
 80059ae:	460b      	mov	r3, r1
 80059b0:	4641      	mov	r1, r8
 80059b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80059b6:	4649      	mov	r1, r9
 80059b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80059bc:	f04f 0200 	mov.w	r2, #0
 80059c0:	f04f 0300 	mov.w	r3, #0
 80059c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80059c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80059cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80059d0:	ebb2 040a 	subs.w	r4, r2, sl
 80059d4:	eb63 050b 	sbc.w	r5, r3, fp
 80059d8:	f04f 0200 	mov.w	r2, #0
 80059dc:	f04f 0300 	mov.w	r3, #0
 80059e0:	00eb      	lsls	r3, r5, #3
 80059e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059e6:	00e2      	lsls	r2, r4, #3
 80059e8:	4614      	mov	r4, r2
 80059ea:	461d      	mov	r5, r3
 80059ec:	4643      	mov	r3, r8
 80059ee:	18e3      	adds	r3, r4, r3
 80059f0:	603b      	str	r3, [r7, #0]
 80059f2:	464b      	mov	r3, r9
 80059f4:	eb45 0303 	adc.w	r3, r5, r3
 80059f8:	607b      	str	r3, [r7, #4]
 80059fa:	f04f 0200 	mov.w	r2, #0
 80059fe:	f04f 0300 	mov.w	r3, #0
 8005a02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a06:	4629      	mov	r1, r5
 8005a08:	028b      	lsls	r3, r1, #10
 8005a0a:	4621      	mov	r1, r4
 8005a0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a10:	4621      	mov	r1, r4
 8005a12:	028a      	lsls	r2, r1, #10
 8005a14:	4610      	mov	r0, r2
 8005a16:	4619      	mov	r1, r3
 8005a18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	61bb      	str	r3, [r7, #24]
 8005a1e:	61fa      	str	r2, [r7, #28]
 8005a20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a24:	f7fa fbe4 	bl	80001f0 <__aeabi_uldivmod>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005a30:	4b0b      	ldr	r3, [pc, #44]	@ (8005a60 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	0c1b      	lsrs	r3, r3, #16
 8005a36:	f003 0303 	and.w	r3, r3, #3
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	005b      	lsls	r3, r3, #1
 8005a3e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005a40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a4a:	e002      	b.n	8005a52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a4c:	4b05      	ldr	r3, [pc, #20]	@ (8005a64 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3750      	adds	r7, #80	@ 0x50
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a5e:	bf00      	nop
 8005a60:	40023800 	.word	0x40023800
 8005a64:	00f42400 	.word	0x00f42400
 8005a68:	007a1200 	.word	0x007a1200

08005a6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a70:	4b03      	ldr	r3, [pc, #12]	@ (8005a80 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a72:	681b      	ldr	r3, [r3, #0]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	20000004 	.word	0x20000004

08005a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a88:	f7ff fff0 	bl	8005a6c <HAL_RCC_GetHCLKFreq>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	4b05      	ldr	r3, [pc, #20]	@ (8005aa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	0a9b      	lsrs	r3, r3, #10
 8005a94:	f003 0307 	and.w	r3, r3, #7
 8005a98:	4903      	ldr	r1, [pc, #12]	@ (8005aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a9a:	5ccb      	ldrb	r3, [r1, r3]
 8005a9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	40023800 	.word	0x40023800
 8005aa8:	08009238 	.word	0x08009238

08005aac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ab0:	f7ff ffdc 	bl	8005a6c <HAL_RCC_GetHCLKFreq>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	4b05      	ldr	r3, [pc, #20]	@ (8005acc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	0b5b      	lsrs	r3, r3, #13
 8005abc:	f003 0307 	and.w	r3, r3, #7
 8005ac0:	4903      	ldr	r1, [pc, #12]	@ (8005ad0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ac2:	5ccb      	ldrb	r3, [r1, r3]
 8005ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	40023800 	.word	0x40023800
 8005ad0:	08009238 	.word	0x08009238

08005ad4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	220f      	movs	r2, #15
 8005ae2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005ae4:	4b12      	ldr	r3, [pc, #72]	@ (8005b30 <HAL_RCC_GetClockConfig+0x5c>)
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f003 0203 	and.w	r2, r3, #3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005af0:	4b0f      	ldr	r3, [pc, #60]	@ (8005b30 <HAL_RCC_GetClockConfig+0x5c>)
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005afc:	4b0c      	ldr	r3, [pc, #48]	@ (8005b30 <HAL_RCC_GetClockConfig+0x5c>)
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005b08:	4b09      	ldr	r3, [pc, #36]	@ (8005b30 <HAL_RCC_GetClockConfig+0x5c>)
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	08db      	lsrs	r3, r3, #3
 8005b0e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005b16:	4b07      	ldr	r3, [pc, #28]	@ (8005b34 <HAL_RCC_GetClockConfig+0x60>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 020f 	and.w	r2, r3, #15
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	601a      	str	r2, [r3, #0]
}
 8005b22:	bf00      	nop
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	40023800 	.word	0x40023800
 8005b34:	40023c00 	.word	0x40023c00

08005b38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10b      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d105      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d075      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b6c:	4b91      	ldr	r3, [pc, #580]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b72:	f7fb ffc7 	bl	8001b04 <HAL_GetTick>
 8005b76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b78:	e008      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b7a:	f7fb ffc3 	bl	8001b04 <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d901      	bls.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e189      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b8c:	4b8a      	ldr	r3, [pc, #552]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1f0      	bne.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0301 	and.w	r3, r3, #1
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d009      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	019a      	lsls	r2, r3, #6
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	071b      	lsls	r3, r3, #28
 8005bb0:	4981      	ldr	r1, [pc, #516]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0302 	and.w	r3, r3, #2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d01f      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005bc4:	4b7c      	ldr	r3, [pc, #496]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bca:	0f1b      	lsrs	r3, r3, #28
 8005bcc:	f003 0307 	and.w	r3, r3, #7
 8005bd0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	019a      	lsls	r2, r3, #6
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	061b      	lsls	r3, r3, #24
 8005bde:	431a      	orrs	r2, r3
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	071b      	lsls	r3, r3, #28
 8005be4:	4974      	ldr	r1, [pc, #464]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005bec:	4b72      	ldr	r3, [pc, #456]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005bf2:	f023 021f 	bic.w	r2, r3, #31
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	69db      	ldr	r3, [r3, #28]
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	496e      	ldr	r1, [pc, #440]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00d      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	019a      	lsls	r2, r3, #6
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	061b      	lsls	r3, r3, #24
 8005c1c:	431a      	orrs	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	071b      	lsls	r3, r3, #28
 8005c24:	4964      	ldr	r1, [pc, #400]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c2c:	4b61      	ldr	r3, [pc, #388]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005c2e:	2201      	movs	r2, #1
 8005c30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c32:	f7fb ff67 	bl	8001b04 <HAL_GetTick>
 8005c36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c38:	e008      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c3a:	f7fb ff63 	bl	8001b04 <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d901      	bls.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e129      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c4c:	4b5a      	ldr	r3, [pc, #360]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d0f0      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0304 	and.w	r3, r3, #4
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d105      	bne.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d079      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005c70:	4b52      	ldr	r3, [pc, #328]	@ (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c76:	f7fb ff45 	bl	8001b04 <HAL_GetTick>
 8005c7a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c7c:	e008      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c7e:	f7fb ff41 	bl	8001b04 <HAL_GetTick>
 8005c82:	4602      	mov	r2, r0
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d901      	bls.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e107      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c90:	4b49      	ldr	r3, [pc, #292]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c9c:	d0ef      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0304 	and.w	r3, r3, #4
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d020      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005caa:	4b43      	ldr	r3, [pc, #268]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cb0:	0f1b      	lsrs	r3, r3, #28
 8005cb2:	f003 0307 	and.w	r3, r3, #7
 8005cb6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	019a      	lsls	r2, r3, #6
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	061b      	lsls	r3, r3, #24
 8005cc4:	431a      	orrs	r2, r3
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	071b      	lsls	r3, r3, #28
 8005cca:	493b      	ldr	r1, [pc, #236]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005cd2:	4b39      	ldr	r3, [pc, #228]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cd8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	021b      	lsls	r3, r3, #8
 8005ce4:	4934      	ldr	r1, [pc, #208]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0308 	and.w	r3, r3, #8
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d01e      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005cf8:	4b2f      	ldr	r3, [pc, #188]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cfe:	0e1b      	lsrs	r3, r3, #24
 8005d00:	f003 030f 	and.w	r3, r3, #15
 8005d04:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	019a      	lsls	r2, r3, #6
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	061b      	lsls	r3, r3, #24
 8005d10:	431a      	orrs	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	071b      	lsls	r3, r3, #28
 8005d18:	4927      	ldr	r1, [pc, #156]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005d20:	4b25      	ldr	r3, [pc, #148]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d26:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d2e:	4922      	ldr	r1, [pc, #136]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005d36:	4b21      	ldr	r3, [pc, #132]	@ (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005d38:	2201      	movs	r2, #1
 8005d3a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d3c:	f7fb fee2 	bl	8001b04 <HAL_GetTick>
 8005d40:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d42:	e008      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005d44:	f7fb fede 	bl	8001b04 <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d901      	bls.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e0a4      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d56:	4b18      	ldr	r3, [pc, #96]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d62:	d1ef      	bne.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0320 	and.w	r3, r3, #32
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f000 808b 	beq.w	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d72:	2300      	movs	r3, #0
 8005d74:	60fb      	str	r3, [r7, #12]
 8005d76:	4b10      	ldr	r3, [pc, #64]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d7a:	4a0f      	ldr	r2, [pc, #60]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d80:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d82:	4b0d      	ldr	r3, [pc, #52]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d8a:	60fb      	str	r3, [r7, #12]
 8005d8c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a0b      	ldr	r2, [pc, #44]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005d94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d98:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d9a:	f7fb feb3 	bl	8001b04 <HAL_GetTick>
 8005d9e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005da0:	e010      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005da2:	f7fb feaf 	bl	8001b04 <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d909      	bls.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e075      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005db4:	42470068 	.word	0x42470068
 8005db8:	40023800 	.word	0x40023800
 8005dbc:	42470070 	.word	0x42470070
 8005dc0:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005dc4:	4b38      	ldr	r3, [pc, #224]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d0e8      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005dd0:	4b36      	ldr	r3, [pc, #216]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dd8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d02f      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005de4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d028      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dee:	4b2f      	ldr	r3, [pc, #188]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005df2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005df6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005df8:	4b2d      	ldr	r3, [pc, #180]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005dfe:	4b2c      	ldr	r3, [pc, #176]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005e04:	4a29      	ldr	r2, [pc, #164]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e0a:	4b28      	ldr	r3, [pc, #160]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d114      	bne.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005e16:	f7fb fe75 	bl	8001b04 <HAL_GetTick>
 8005e1a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e1c:	e00a      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e1e:	f7fb fe71 	bl	8001b04 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d901      	bls.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e035      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e34:	4b1d      	ldr	r3, [pc, #116]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e38:	f003 0302 	and.w	r3, r3, #2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d0ee      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e4c:	d10d      	bne.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005e4e:	4b17      	ldr	r3, [pc, #92]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e5a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005e5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e62:	4912      	ldr	r1, [pc, #72]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	608b      	str	r3, [r1, #8]
 8005e68:	e005      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005e6a:	4b10      	ldr	r3, [pc, #64]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	4a0f      	ldr	r2, [pc, #60]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e70:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005e74:	6093      	str	r3, [r2, #8]
 8005e76:	4b0d      	ldr	r3, [pc, #52]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e78:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e82:	490a      	ldr	r1, [pc, #40]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e84:	4313      	orrs	r3, r2
 8005e86:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0310 	and.w	r3, r3, #16
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d004      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005e9a:	4b06      	ldr	r3, [pc, #24]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005e9c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3718      	adds	r7, #24
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	40007000 	.word	0x40007000
 8005eac:	40023800 	.word	0x40023800
 8005eb0:	42470e40 	.word	0x42470e40
 8005eb4:	424711e0 	.word	0x424711e0

08005eb8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d101      	bne.n	8005ecc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e025      	b.n	8005f18 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d106      	bne.n	8005ee6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f7fa fcad 	bl	8000840 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2202      	movs	r2, #2
 8005eea:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	4610      	mov	r0, r2
 8005efa:	f001 fb3d 	bl	8007578 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6818      	ldr	r0, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	461a      	mov	r2, r3
 8005f08:	6839      	ldr	r1, [r7, #0]
 8005f0a:	f001 fb92 	bl	8007632 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3708      	adds	r7, #8
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e07b      	b.n	800602a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d108      	bne.n	8005f4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f42:	d009      	beq.n	8005f58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	61da      	str	r2, [r3, #28]
 8005f4a:	e005      	b.n	8005f58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d106      	bne.n	8005f78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7fb fb00 	bl	8001578 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005fa0:	431a      	orrs	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005faa:	431a      	orrs	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	431a      	orrs	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fc8:	431a      	orrs	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a1b      	ldr	r3, [r3, #32]
 8005fd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fdc:	ea42 0103 	orr.w	r1, r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	430a      	orrs	r2, r1
 8005fee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	0c1b      	lsrs	r3, r3, #16
 8005ff6:	f003 0104 	and.w	r1, r3, #4
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ffe:	f003 0210 	and.w	r2, r3, #16
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	69da      	ldr	r2, [r3, #28]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006018:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b088      	sub	sp, #32
 8006036:	af00      	add	r7, sp, #0
 8006038:	60f8      	str	r0, [r7, #12]
 800603a:	60b9      	str	r1, [r7, #8]
 800603c:	603b      	str	r3, [r7, #0]
 800603e:	4613      	mov	r3, r2
 8006040:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006042:	f7fb fd5f 	bl	8001b04 <HAL_GetTick>
 8006046:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006048:	88fb      	ldrh	r3, [r7, #6]
 800604a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b01      	cmp	r3, #1
 8006056:	d001      	beq.n	800605c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006058:	2302      	movs	r3, #2
 800605a:	e12a      	b.n	80062b2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d002      	beq.n	8006068 <HAL_SPI_Transmit+0x36>
 8006062:	88fb      	ldrh	r3, [r7, #6]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d101      	bne.n	800606c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e122      	b.n	80062b2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006072:	2b01      	cmp	r3, #1
 8006074:	d101      	bne.n	800607a <HAL_SPI_Transmit+0x48>
 8006076:	2302      	movs	r3, #2
 8006078:	e11b      	b.n	80062b2 <HAL_SPI_Transmit+0x280>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2203      	movs	r2, #3
 8006086:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	88fa      	ldrh	r2, [r7, #6]
 800609a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	88fa      	ldrh	r2, [r7, #6]
 80060a0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060c8:	d10f      	bne.n	80060ea <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060f4:	2b40      	cmp	r3, #64	@ 0x40
 80060f6:	d007      	beq.n	8006108 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006106:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006110:	d152      	bne.n	80061b8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d002      	beq.n	8006120 <HAL_SPI_Transmit+0xee>
 800611a:	8b7b      	ldrh	r3, [r7, #26]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d145      	bne.n	80061ac <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006124:	881a      	ldrh	r2, [r3, #0]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006130:	1c9a      	adds	r2, r3, #2
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800613a:	b29b      	uxth	r3, r3
 800613c:	3b01      	subs	r3, #1
 800613e:	b29a      	uxth	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006144:	e032      	b.n	80061ac <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f003 0302 	and.w	r3, r3, #2
 8006150:	2b02      	cmp	r3, #2
 8006152:	d112      	bne.n	800617a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006158:	881a      	ldrh	r2, [r3, #0]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006164:	1c9a      	adds	r2, r3, #2
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800616e:	b29b      	uxth	r3, r3
 8006170:	3b01      	subs	r3, #1
 8006172:	b29a      	uxth	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006178:	e018      	b.n	80061ac <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800617a:	f7fb fcc3 	bl	8001b04 <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	683a      	ldr	r2, [r7, #0]
 8006186:	429a      	cmp	r2, r3
 8006188:	d803      	bhi.n	8006192 <HAL_SPI_Transmit+0x160>
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006190:	d102      	bne.n	8006198 <HAL_SPI_Transmit+0x166>
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d109      	bne.n	80061ac <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e082      	b.n	80062b2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1c7      	bne.n	8006146 <HAL_SPI_Transmit+0x114>
 80061b6:	e053      	b.n	8006260 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d002      	beq.n	80061c6 <HAL_SPI_Transmit+0x194>
 80061c0:	8b7b      	ldrh	r3, [r7, #26]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d147      	bne.n	8006256 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	330c      	adds	r3, #12
 80061d0:	7812      	ldrb	r2, [r2, #0]
 80061d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061d8:	1c5a      	adds	r2, r3, #1
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	3b01      	subs	r3, #1
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80061ec:	e033      	b.n	8006256 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f003 0302 	and.w	r3, r3, #2
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d113      	bne.n	8006224 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	330c      	adds	r3, #12
 8006206:	7812      	ldrb	r2, [r2, #0]
 8006208:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800620e:	1c5a      	adds	r2, r3, #1
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006218:	b29b      	uxth	r3, r3
 800621a:	3b01      	subs	r3, #1
 800621c:	b29a      	uxth	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006222:	e018      	b.n	8006256 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006224:	f7fb fc6e 	bl	8001b04 <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	429a      	cmp	r2, r3
 8006232:	d803      	bhi.n	800623c <HAL_SPI_Transmit+0x20a>
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800623a:	d102      	bne.n	8006242 <HAL_SPI_Transmit+0x210>
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d109      	bne.n	8006256 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e02d      	b.n	80062b2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800625a:	b29b      	uxth	r3, r3
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1c6      	bne.n	80061ee <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006260:	69fa      	ldr	r2, [r7, #28]
 8006262:	6839      	ldr	r1, [r7, #0]
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f000 f9f9 	bl	800665c <SPI_EndRxTxTransaction>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d002      	beq.n	8006276 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2220      	movs	r2, #32
 8006274:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10a      	bne.n	8006294 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800627e:	2300      	movs	r3, #0
 8006280:	617b      	str	r3, [r7, #20]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	617b      	str	r3, [r7, #20]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	617b      	str	r3, [r7, #20]
 8006292:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d001      	beq.n	80062b0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e000      	b.n	80062b2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80062b0:	2300      	movs	r3, #0
  }
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3720      	adds	r7, #32
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
	...

080062bc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	4613      	mov	r3, r2
 80062c8:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d001      	beq.n	80062da <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80062d6:	2302      	movs	r3, #2
 80062d8:	e097      	b.n	800640a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d002      	beq.n	80062e6 <HAL_SPI_Transmit_DMA+0x2a>
 80062e0:	88fb      	ldrh	r3, [r7, #6]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e08f      	b.n	800640a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d101      	bne.n	80062f8 <HAL_SPI_Transmit_DMA+0x3c>
 80062f4:	2302      	movs	r3, #2
 80062f6:	e088      	b.n	800640a <HAL_SPI_Transmit_DMA+0x14e>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2203      	movs	r2, #3
 8006304:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	88fa      	ldrh	r2, [r7, #6]
 8006318:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	88fa      	ldrh	r2, [r7, #6]
 800631e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006346:	d10f      	bne.n	8006368 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006356:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006366:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800636c:	4a29      	ldr	r2, [pc, #164]	@ (8006414 <HAL_SPI_Transmit_DMA+0x158>)
 800636e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006374:	4a28      	ldr	r2, [pc, #160]	@ (8006418 <HAL_SPI_Transmit_DMA+0x15c>)
 8006376:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800637c:	4a27      	ldr	r2, [pc, #156]	@ (800641c <HAL_SPI_Transmit_DMA+0x160>)
 800637e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006384:	2200      	movs	r2, #0
 8006386:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006390:	4619      	mov	r1, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	330c      	adds	r3, #12
 8006398:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800639e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80063a0:	f7fb fd8c 	bl	8001ebc <HAL_DMA_Start_IT>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00b      	beq.n	80063c2 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ae:	f043 0210 	orr.w	r2, r3, #16
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e023      	b.n	800640a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063cc:	2b40      	cmp	r3, #64	@ 0x40
 80063ce:	d007      	beq.n	80063e0 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063de:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f042 0220 	orr.w	r2, r2, #32
 80063f6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	685a      	ldr	r2, [r3, #4]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f042 0202 	orr.w	r2, r2, #2
 8006406:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	080064f1 	.word	0x080064f1
 8006418:	08006449 	.word	0x08006449
 800641c:	0800650d 	.word	0x0800650d

08006420 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006454:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006456:	f7fb fb55 	bl	8001b04 <HAL_GetTick>
 800645a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006466:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800646a:	d03b      	beq.n	80064e4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685a      	ldr	r2, [r3, #4]
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f022 0220 	bic.w	r2, r2, #32
 800647a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f022 0202 	bic.w	r2, r2, #2
 800648a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	2164      	movs	r1, #100	@ 0x64
 8006490:	6978      	ldr	r0, [r7, #20]
 8006492:	f000 f8e3 	bl	800665c <SPI_EndRxTxTransaction>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d005      	beq.n	80064a8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064a0:	f043 0220 	orr.w	r2, r3, #32
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10a      	bne.n	80064c6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064b0:	2300      	movs	r3, #0
 80064b2:	60fb      	str	r3, [r7, #12]
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	60fb      	str	r3, [r7, #12]
 80064c4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	2200      	movs	r2, #0
 80064ca:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d003      	beq.n	80064e4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80064dc:	6978      	ldr	r0, [r7, #20]
 80064de:	f7ff ffa9 	bl	8006434 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80064e2:	e002      	b.n	80064ea <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80064e4:	6978      	ldr	r0, [r7, #20]
 80064e6:	f7fa ff45 	bl	8001374 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80064ea:	3718      	adds	r7, #24
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064fc:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f7ff ff8e 	bl	8006420 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006504:	bf00      	nop
 8006506:	3710      	adds	r7, #16
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006518:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	685a      	ldr	r2, [r3, #4]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 0203 	bic.w	r2, r2, #3
 8006528:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800652e:	f043 0210 	orr.w	r2, r3, #16
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f7ff ff78 	bl	8006434 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006544:	bf00      	nop
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b088      	sub	sp, #32
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	603b      	str	r3, [r7, #0]
 8006558:	4613      	mov	r3, r2
 800655a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800655c:	f7fb fad2 	bl	8001b04 <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006564:	1a9b      	subs	r3, r3, r2
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	4413      	add	r3, r2
 800656a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800656c:	f7fb faca 	bl	8001b04 <HAL_GetTick>
 8006570:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006572:	4b39      	ldr	r3, [pc, #228]	@ (8006658 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	015b      	lsls	r3, r3, #5
 8006578:	0d1b      	lsrs	r3, r3, #20
 800657a:	69fa      	ldr	r2, [r7, #28]
 800657c:	fb02 f303 	mul.w	r3, r2, r3
 8006580:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006582:	e054      	b.n	800662e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800658a:	d050      	beq.n	800662e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800658c:	f7fb faba 	bl	8001b04 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	69fa      	ldr	r2, [r7, #28]
 8006598:	429a      	cmp	r2, r3
 800659a:	d902      	bls.n	80065a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d13d      	bne.n	800661e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	685a      	ldr	r2, [r3, #4]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80065b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80065ba:	d111      	bne.n	80065e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065c4:	d004      	beq.n	80065d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065ce:	d107      	bne.n	80065e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065e8:	d10f      	bne.n	800660a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80065f8:	601a      	str	r2, [r3, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006608:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	e017      	b.n	800664e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d101      	bne.n	8006628 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006624:	2300      	movs	r3, #0
 8006626:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	3b01      	subs	r3, #1
 800662c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689a      	ldr	r2, [r3, #8]
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	4013      	ands	r3, r2
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	429a      	cmp	r2, r3
 800663c:	bf0c      	ite	eq
 800663e:	2301      	moveq	r3, #1
 8006640:	2300      	movne	r3, #0
 8006642:	b2db      	uxtb	r3, r3
 8006644:	461a      	mov	r2, r3
 8006646:	79fb      	ldrb	r3, [r7, #7]
 8006648:	429a      	cmp	r2, r3
 800664a:	d19b      	bne.n	8006584 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3720      	adds	r7, #32
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	20000004 	.word	0x20000004

0800665c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b088      	sub	sp, #32
 8006660:	af02      	add	r7, sp, #8
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	2201      	movs	r2, #1
 8006670:	2102      	movs	r1, #2
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f7ff ff6a 	bl	800654c <SPI_WaitFlagStateUntilTimeout>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d007      	beq.n	800668e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006682:	f043 0220 	orr.w	r2, r3, #32
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e032      	b.n	80066f4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800668e:	4b1b      	ldr	r3, [pc, #108]	@ (80066fc <SPI_EndRxTxTransaction+0xa0>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a1b      	ldr	r2, [pc, #108]	@ (8006700 <SPI_EndRxTxTransaction+0xa4>)
 8006694:	fba2 2303 	umull	r2, r3, r2, r3
 8006698:	0d5b      	lsrs	r3, r3, #21
 800669a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800669e:	fb02 f303 	mul.w	r3, r2, r3
 80066a2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066ac:	d112      	bne.n	80066d4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	2200      	movs	r2, #0
 80066b6:	2180      	movs	r1, #128	@ 0x80
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f7ff ff47 	bl	800654c <SPI_WaitFlagStateUntilTimeout>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d016      	beq.n	80066f2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066c8:	f043 0220 	orr.w	r2, r3, #32
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e00f      	b.n	80066f4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00a      	beq.n	80066f0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	3b01      	subs	r3, #1
 80066de:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066ea:	2b80      	cmp	r3, #128	@ 0x80
 80066ec:	d0f2      	beq.n	80066d4 <SPI_EndRxTxTransaction+0x78>
 80066ee:	e000      	b.n	80066f2 <SPI_EndRxTxTransaction+0x96>
        break;
 80066f0:	bf00      	nop
  }

  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3718      	adds	r7, #24
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	20000004 	.word	0x20000004
 8006700:	165e9f81 	.word	0x165e9f81

08006704 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e041      	b.n	800679a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800671c:	b2db      	uxtb	r3, r3
 800671e:	2b00      	cmp	r3, #0
 8006720:	d106      	bne.n	8006730 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f7fb f8f6 	bl	800191c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2202      	movs	r2, #2
 8006734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	3304      	adds	r3, #4
 8006740:	4619      	mov	r1, r3
 8006742:	4610      	mov	r0, r2
 8006744:	f000 fa7e 	bl	8006c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
	...

080067a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d001      	beq.n	80067bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e04e      	b.n	800685a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2202      	movs	r2, #2
 80067c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68da      	ldr	r2, [r3, #12]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f042 0201 	orr.w	r2, r2, #1
 80067d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a23      	ldr	r2, [pc, #140]	@ (8006868 <HAL_TIM_Base_Start_IT+0xc4>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d022      	beq.n	8006824 <HAL_TIM_Base_Start_IT+0x80>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067e6:	d01d      	beq.n	8006824 <HAL_TIM_Base_Start_IT+0x80>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a1f      	ldr	r2, [pc, #124]	@ (800686c <HAL_TIM_Base_Start_IT+0xc8>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d018      	beq.n	8006824 <HAL_TIM_Base_Start_IT+0x80>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a1e      	ldr	r2, [pc, #120]	@ (8006870 <HAL_TIM_Base_Start_IT+0xcc>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d013      	beq.n	8006824 <HAL_TIM_Base_Start_IT+0x80>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a1c      	ldr	r2, [pc, #112]	@ (8006874 <HAL_TIM_Base_Start_IT+0xd0>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d00e      	beq.n	8006824 <HAL_TIM_Base_Start_IT+0x80>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a1b      	ldr	r2, [pc, #108]	@ (8006878 <HAL_TIM_Base_Start_IT+0xd4>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d009      	beq.n	8006824 <HAL_TIM_Base_Start_IT+0x80>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a19      	ldr	r2, [pc, #100]	@ (800687c <HAL_TIM_Base_Start_IT+0xd8>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d004      	beq.n	8006824 <HAL_TIM_Base_Start_IT+0x80>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a18      	ldr	r2, [pc, #96]	@ (8006880 <HAL_TIM_Base_Start_IT+0xdc>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d111      	bne.n	8006848 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f003 0307 	and.w	r3, r3, #7
 800682e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2b06      	cmp	r3, #6
 8006834:	d010      	beq.n	8006858 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f042 0201 	orr.w	r2, r2, #1
 8006844:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006846:	e007      	b.n	8006858 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f042 0201 	orr.w	r2, r2, #1
 8006856:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	40010000 	.word	0x40010000
 800686c:	40000400 	.word	0x40000400
 8006870:	40000800 	.word	0x40000800
 8006874:	40000c00 	.word	0x40000c00
 8006878:	40010400 	.word	0x40010400
 800687c:	40014000 	.word	0x40014000
 8006880:	40001800 	.word	0x40001800

08006884 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	f003 0302 	and.w	r3, r3, #2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d020      	beq.n	80068e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f003 0302 	and.w	r3, r3, #2
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d01b      	beq.n	80068e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f06f 0202 	mvn.w	r2, #2
 80068b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	f003 0303 	and.w	r3, r3, #3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d003      	beq.n	80068d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f999 	bl	8006c06 <HAL_TIM_IC_CaptureCallback>
 80068d4:	e005      	b.n	80068e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f98b 	bl	8006bf2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f99c 	bl	8006c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	f003 0304 	and.w	r3, r3, #4
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d020      	beq.n	8006934 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f003 0304 	and.w	r3, r3, #4
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d01b      	beq.n	8006934 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f06f 0204 	mvn.w	r2, #4
 8006904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2202      	movs	r2, #2
 800690a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006916:	2b00      	cmp	r3, #0
 8006918:	d003      	beq.n	8006922 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f973 	bl	8006c06 <HAL_TIM_IC_CaptureCallback>
 8006920:	e005      	b.n	800692e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f965 	bl	8006bf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 f976 	bl	8006c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	f003 0308 	and.w	r3, r3, #8
 800693a:	2b00      	cmp	r3, #0
 800693c:	d020      	beq.n	8006980 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f003 0308 	and.w	r3, r3, #8
 8006944:	2b00      	cmp	r3, #0
 8006946:	d01b      	beq.n	8006980 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f06f 0208 	mvn.w	r2, #8
 8006950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2204      	movs	r2, #4
 8006956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	69db      	ldr	r3, [r3, #28]
 800695e:	f003 0303 	and.w	r3, r3, #3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d003      	beq.n	800696e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f94d 	bl	8006c06 <HAL_TIM_IC_CaptureCallback>
 800696c:	e005      	b.n	800697a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f93f 	bl	8006bf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f950 	bl	8006c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	f003 0310 	and.w	r3, r3, #16
 8006986:	2b00      	cmp	r3, #0
 8006988:	d020      	beq.n	80069cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f003 0310 	and.w	r3, r3, #16
 8006990:	2b00      	cmp	r3, #0
 8006992:	d01b      	beq.n	80069cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f06f 0210 	mvn.w	r2, #16
 800699c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2208      	movs	r2, #8
 80069a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d003      	beq.n	80069ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f927 	bl	8006c06 <HAL_TIM_IC_CaptureCallback>
 80069b8:	e005      	b.n	80069c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 f919 	bl	8006bf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 f92a 	bl	8006c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	f003 0301 	and.w	r3, r3, #1
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00c      	beq.n	80069f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d007      	beq.n	80069f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f06f 0201 	mvn.w	r2, #1
 80069e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7fa fd76 	bl	80014dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00c      	beq.n	8006a14 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d007      	beq.n	8006a14 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fae4 	bl	8006fdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00c      	beq.n	8006a38 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d007      	beq.n	8006a38 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f8fb 	bl	8006c2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	f003 0320 	and.w	r3, r3, #32
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00c      	beq.n	8006a5c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f003 0320 	and.w	r3, r3, #32
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d007      	beq.n	8006a5c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f06f 0220 	mvn.w	r2, #32
 8006a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fab6 	bl	8006fc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a5c:	bf00      	nop
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d101      	bne.n	8006a80 <HAL_TIM_ConfigClockSource+0x1c>
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	e0b4      	b.n	8006bea <HAL_TIM_ConfigClockSource+0x186>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006a9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006aa6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ab8:	d03e      	beq.n	8006b38 <HAL_TIM_ConfigClockSource+0xd4>
 8006aba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006abe:	f200 8087 	bhi.w	8006bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ac2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ac6:	f000 8086 	beq.w	8006bd6 <HAL_TIM_ConfigClockSource+0x172>
 8006aca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ace:	d87f      	bhi.n	8006bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ad0:	2b70      	cmp	r3, #112	@ 0x70
 8006ad2:	d01a      	beq.n	8006b0a <HAL_TIM_ConfigClockSource+0xa6>
 8006ad4:	2b70      	cmp	r3, #112	@ 0x70
 8006ad6:	d87b      	bhi.n	8006bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ad8:	2b60      	cmp	r3, #96	@ 0x60
 8006ada:	d050      	beq.n	8006b7e <HAL_TIM_ConfigClockSource+0x11a>
 8006adc:	2b60      	cmp	r3, #96	@ 0x60
 8006ade:	d877      	bhi.n	8006bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ae0:	2b50      	cmp	r3, #80	@ 0x50
 8006ae2:	d03c      	beq.n	8006b5e <HAL_TIM_ConfigClockSource+0xfa>
 8006ae4:	2b50      	cmp	r3, #80	@ 0x50
 8006ae6:	d873      	bhi.n	8006bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ae8:	2b40      	cmp	r3, #64	@ 0x40
 8006aea:	d058      	beq.n	8006b9e <HAL_TIM_ConfigClockSource+0x13a>
 8006aec:	2b40      	cmp	r3, #64	@ 0x40
 8006aee:	d86f      	bhi.n	8006bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006af0:	2b30      	cmp	r3, #48	@ 0x30
 8006af2:	d064      	beq.n	8006bbe <HAL_TIM_ConfigClockSource+0x15a>
 8006af4:	2b30      	cmp	r3, #48	@ 0x30
 8006af6:	d86b      	bhi.n	8006bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006af8:	2b20      	cmp	r3, #32
 8006afa:	d060      	beq.n	8006bbe <HAL_TIM_ConfigClockSource+0x15a>
 8006afc:	2b20      	cmp	r3, #32
 8006afe:	d867      	bhi.n	8006bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d05c      	beq.n	8006bbe <HAL_TIM_ConfigClockSource+0x15a>
 8006b04:	2b10      	cmp	r3, #16
 8006b06:	d05a      	beq.n	8006bbe <HAL_TIM_ConfigClockSource+0x15a>
 8006b08:	e062      	b.n	8006bd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b1a:	f000 f9b9 	bl	8006e90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006b2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	609a      	str	r2, [r3, #8]
      break;
 8006b36:	e04f      	b.n	8006bd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b48:	f000 f9a2 	bl	8006e90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	689a      	ldr	r2, [r3, #8]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b5a:	609a      	str	r2, [r3, #8]
      break;
 8006b5c:	e03c      	b.n	8006bd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	f000 f916 	bl	8006d9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2150      	movs	r1, #80	@ 0x50
 8006b76:	4618      	mov	r0, r3
 8006b78:	f000 f96f 	bl	8006e5a <TIM_ITRx_SetConfig>
      break;
 8006b7c:	e02c      	b.n	8006bd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	f000 f935 	bl	8006dfa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2160      	movs	r1, #96	@ 0x60
 8006b96:	4618      	mov	r0, r3
 8006b98:	f000 f95f 	bl	8006e5a <TIM_ITRx_SetConfig>
      break;
 8006b9c:	e01c      	b.n	8006bd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006baa:	461a      	mov	r2, r3
 8006bac:	f000 f8f6 	bl	8006d9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2140      	movs	r1, #64	@ 0x40
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f000 f94f 	bl	8006e5a <TIM_ITRx_SetConfig>
      break;
 8006bbc:	e00c      	b.n	8006bd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	4610      	mov	r0, r2
 8006bca:	f000 f946 	bl	8006e5a <TIM_ITRx_SetConfig>
      break;
 8006bce:	e003      	b.n	8006bd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8006bd4:	e000      	b.n	8006bd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006bd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b083      	sub	sp, #12
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006bfa:	bf00      	nop
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b083      	sub	sp, #12
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c0e:	bf00      	nop
 8006c10:	370c      	adds	r7, #12
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b083      	sub	sp, #12
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c22:	bf00      	nop
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b083      	sub	sp, #12
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c36:	bf00      	nop
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
	...

08006c44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a46      	ldr	r2, [pc, #280]	@ (8006d70 <TIM_Base_SetConfig+0x12c>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d013      	beq.n	8006c84 <TIM_Base_SetConfig+0x40>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c62:	d00f      	beq.n	8006c84 <TIM_Base_SetConfig+0x40>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a43      	ldr	r2, [pc, #268]	@ (8006d74 <TIM_Base_SetConfig+0x130>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d00b      	beq.n	8006c84 <TIM_Base_SetConfig+0x40>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a42      	ldr	r2, [pc, #264]	@ (8006d78 <TIM_Base_SetConfig+0x134>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d007      	beq.n	8006c84 <TIM_Base_SetConfig+0x40>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a41      	ldr	r2, [pc, #260]	@ (8006d7c <TIM_Base_SetConfig+0x138>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d003      	beq.n	8006c84 <TIM_Base_SetConfig+0x40>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a40      	ldr	r2, [pc, #256]	@ (8006d80 <TIM_Base_SetConfig+0x13c>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d108      	bne.n	8006c96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a35      	ldr	r2, [pc, #212]	@ (8006d70 <TIM_Base_SetConfig+0x12c>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d02b      	beq.n	8006cf6 <TIM_Base_SetConfig+0xb2>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ca4:	d027      	beq.n	8006cf6 <TIM_Base_SetConfig+0xb2>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a32      	ldr	r2, [pc, #200]	@ (8006d74 <TIM_Base_SetConfig+0x130>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d023      	beq.n	8006cf6 <TIM_Base_SetConfig+0xb2>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a31      	ldr	r2, [pc, #196]	@ (8006d78 <TIM_Base_SetConfig+0x134>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d01f      	beq.n	8006cf6 <TIM_Base_SetConfig+0xb2>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a30      	ldr	r2, [pc, #192]	@ (8006d7c <TIM_Base_SetConfig+0x138>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d01b      	beq.n	8006cf6 <TIM_Base_SetConfig+0xb2>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a2f      	ldr	r2, [pc, #188]	@ (8006d80 <TIM_Base_SetConfig+0x13c>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d017      	beq.n	8006cf6 <TIM_Base_SetConfig+0xb2>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a2e      	ldr	r2, [pc, #184]	@ (8006d84 <TIM_Base_SetConfig+0x140>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d013      	beq.n	8006cf6 <TIM_Base_SetConfig+0xb2>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a2d      	ldr	r2, [pc, #180]	@ (8006d88 <TIM_Base_SetConfig+0x144>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d00f      	beq.n	8006cf6 <TIM_Base_SetConfig+0xb2>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a2c      	ldr	r2, [pc, #176]	@ (8006d8c <TIM_Base_SetConfig+0x148>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d00b      	beq.n	8006cf6 <TIM_Base_SetConfig+0xb2>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a2b      	ldr	r2, [pc, #172]	@ (8006d90 <TIM_Base_SetConfig+0x14c>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d007      	beq.n	8006cf6 <TIM_Base_SetConfig+0xb2>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a2a      	ldr	r2, [pc, #168]	@ (8006d94 <TIM_Base_SetConfig+0x150>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d003      	beq.n	8006cf6 <TIM_Base_SetConfig+0xb2>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a29      	ldr	r2, [pc, #164]	@ (8006d98 <TIM_Base_SetConfig+0x154>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d108      	bne.n	8006d08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	689a      	ldr	r2, [r3, #8]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a10      	ldr	r2, [pc, #64]	@ (8006d70 <TIM_Base_SetConfig+0x12c>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d003      	beq.n	8006d3c <TIM_Base_SetConfig+0xf8>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a12      	ldr	r2, [pc, #72]	@ (8006d80 <TIM_Base_SetConfig+0x13c>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d103      	bne.n	8006d44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	691a      	ldr	r2, [r3, #16]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d105      	bne.n	8006d62 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	f023 0201 	bic.w	r2, r3, #1
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	611a      	str	r2, [r3, #16]
  }
}
 8006d62:	bf00      	nop
 8006d64:	3714      	adds	r7, #20
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	40010000 	.word	0x40010000
 8006d74:	40000400 	.word	0x40000400
 8006d78:	40000800 	.word	0x40000800
 8006d7c:	40000c00 	.word	0x40000c00
 8006d80:	40010400 	.word	0x40010400
 8006d84:	40014000 	.word	0x40014000
 8006d88:	40014400 	.word	0x40014400
 8006d8c:	40014800 	.word	0x40014800
 8006d90:	40001800 	.word	0x40001800
 8006d94:	40001c00 	.word	0x40001c00
 8006d98:	40002000 	.word	0x40002000

08006d9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b087      	sub	sp, #28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6a1b      	ldr	r3, [r3, #32]
 8006dac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6a1b      	ldr	r3, [r3, #32]
 8006db2:	f023 0201 	bic.w	r2, r3, #1
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	011b      	lsls	r3, r3, #4
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	f023 030a 	bic.w	r3, r3, #10
 8006dd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	621a      	str	r2, [r3, #32]
}
 8006dee:	bf00      	nop
 8006df0:	371c      	adds	r7, #28
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b087      	sub	sp, #28
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	60f8      	str	r0, [r7, #12]
 8006e02:	60b9      	str	r1, [r7, #8]
 8006e04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6a1b      	ldr	r3, [r3, #32]
 8006e10:	f023 0210 	bic.w	r2, r3, #16
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	699b      	ldr	r3, [r3, #24]
 8006e1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	031b      	lsls	r3, r3, #12
 8006e2a:	693a      	ldr	r2, [r7, #16]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e36:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	011b      	lsls	r3, r3, #4
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	693a      	ldr	r2, [r7, #16]
 8006e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	621a      	str	r2, [r3, #32]
}
 8006e4e:	bf00      	nop
 8006e50:	371c      	adds	r7, #28
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b085      	sub	sp, #20
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
 8006e62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e72:	683a      	ldr	r2, [r7, #0]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	f043 0307 	orr.w	r3, r3, #7
 8006e7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	609a      	str	r2, [r3, #8]
}
 8006e84:	bf00      	nop
 8006e86:	3714      	adds	r7, #20
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b087      	sub	sp, #28
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
 8006e9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006eaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	021a      	lsls	r2, r3, #8
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	431a      	orrs	r2, r3
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	697a      	ldr	r2, [r7, #20]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	697a      	ldr	r2, [r7, #20]
 8006ec2:	609a      	str	r2, [r3, #8]
}
 8006ec4:	bf00      	nop
 8006ec6:	371c      	adds	r7, #28
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d101      	bne.n	8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	e05a      	b.n	8006f9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2202      	movs	r2, #2
 8006ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a21      	ldr	r2, [pc, #132]	@ (8006fac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d022      	beq.n	8006f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f34:	d01d      	beq.n	8006f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a1d      	ldr	r2, [pc, #116]	@ (8006fb0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d018      	beq.n	8006f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a1b      	ldr	r2, [pc, #108]	@ (8006fb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d013      	beq.n	8006f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a1a      	ldr	r2, [pc, #104]	@ (8006fb8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d00e      	beq.n	8006f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a18      	ldr	r2, [pc, #96]	@ (8006fbc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d009      	beq.n	8006f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a17      	ldr	r2, [pc, #92]	@ (8006fc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d004      	beq.n	8006f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a15      	ldr	r2, [pc, #84]	@ (8006fc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d10c      	bne.n	8006f8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3714      	adds	r7, #20
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	40010000 	.word	0x40010000
 8006fb0:	40000400 	.word	0x40000400
 8006fb4:	40000800 	.word	0x40000800
 8006fb8:	40000c00 	.word	0x40000c00
 8006fbc:	40010400 	.word	0x40010400
 8006fc0:	40014000 	.word	0x40014000
 8006fc4:	40001800 	.word	0x40001800

08006fc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d101      	bne.n	8007002 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e042      	b.n	8007088 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007008:	b2db      	uxtb	r3, r3
 800700a:	2b00      	cmp	r3, #0
 800700c:	d106      	bne.n	800701c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f7fa fccc 	bl	80019b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2224      	movs	r2, #36	@ 0x24
 8007020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68da      	ldr	r2, [r3, #12]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007032:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 f82b 	bl	8007090 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	691a      	ldr	r2, [r3, #16]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007048:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	695a      	ldr	r2, [r3, #20]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007058:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68da      	ldr	r2, [r3, #12]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007068:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2220      	movs	r2, #32
 8007074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2220      	movs	r2, #32
 800707c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3708      	adds	r7, #8
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007094:	b0c0      	sub	sp, #256	@ 0x100
 8007096:	af00      	add	r7, sp, #0
 8007098:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800709c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80070a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070ac:	68d9      	ldr	r1, [r3, #12]
 80070ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	ea40 0301 	orr.w	r3, r0, r1
 80070b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80070ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070be:	689a      	ldr	r2, [r3, #8]
 80070c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	431a      	orrs	r2, r3
 80070c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070cc:	695b      	ldr	r3, [r3, #20]
 80070ce:	431a      	orrs	r2, r3
 80070d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070d4:	69db      	ldr	r3, [r3, #28]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80070dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80070e8:	f021 010c 	bic.w	r1, r1, #12
 80070ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80070f6:	430b      	orrs	r3, r1
 80070f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80070fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800710a:	6999      	ldr	r1, [r3, #24]
 800710c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	ea40 0301 	orr.w	r3, r0, r1
 8007116:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	4b8f      	ldr	r3, [pc, #572]	@ (800735c <UART_SetConfig+0x2cc>)
 8007120:	429a      	cmp	r2, r3
 8007122:	d005      	beq.n	8007130 <UART_SetConfig+0xa0>
 8007124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	4b8d      	ldr	r3, [pc, #564]	@ (8007360 <UART_SetConfig+0x2d0>)
 800712c:	429a      	cmp	r2, r3
 800712e:	d104      	bne.n	800713a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007130:	f7fe fcbc 	bl	8005aac <HAL_RCC_GetPCLK2Freq>
 8007134:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007138:	e003      	b.n	8007142 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800713a:	f7fe fca3 	bl	8005a84 <HAL_RCC_GetPCLK1Freq>
 800713e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007146:	69db      	ldr	r3, [r3, #28]
 8007148:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800714c:	f040 810c 	bne.w	8007368 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007154:	2200      	movs	r2, #0
 8007156:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800715a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800715e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007162:	4622      	mov	r2, r4
 8007164:	462b      	mov	r3, r5
 8007166:	1891      	adds	r1, r2, r2
 8007168:	65b9      	str	r1, [r7, #88]	@ 0x58
 800716a:	415b      	adcs	r3, r3
 800716c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800716e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007172:	4621      	mov	r1, r4
 8007174:	eb12 0801 	adds.w	r8, r2, r1
 8007178:	4629      	mov	r1, r5
 800717a:	eb43 0901 	adc.w	r9, r3, r1
 800717e:	f04f 0200 	mov.w	r2, #0
 8007182:	f04f 0300 	mov.w	r3, #0
 8007186:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800718a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800718e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007192:	4690      	mov	r8, r2
 8007194:	4699      	mov	r9, r3
 8007196:	4623      	mov	r3, r4
 8007198:	eb18 0303 	adds.w	r3, r8, r3
 800719c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80071a0:	462b      	mov	r3, r5
 80071a2:	eb49 0303 	adc.w	r3, r9, r3
 80071a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80071aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80071b6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80071ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80071be:	460b      	mov	r3, r1
 80071c0:	18db      	adds	r3, r3, r3
 80071c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80071c4:	4613      	mov	r3, r2
 80071c6:	eb42 0303 	adc.w	r3, r2, r3
 80071ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80071cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80071d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80071d4:	f7f9 f80c 	bl	80001f0 <__aeabi_uldivmod>
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	4b61      	ldr	r3, [pc, #388]	@ (8007364 <UART_SetConfig+0x2d4>)
 80071de:	fba3 2302 	umull	r2, r3, r3, r2
 80071e2:	095b      	lsrs	r3, r3, #5
 80071e4:	011c      	lsls	r4, r3, #4
 80071e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071ea:	2200      	movs	r2, #0
 80071ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80071f0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80071f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80071f8:	4642      	mov	r2, r8
 80071fa:	464b      	mov	r3, r9
 80071fc:	1891      	adds	r1, r2, r2
 80071fe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007200:	415b      	adcs	r3, r3
 8007202:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007204:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007208:	4641      	mov	r1, r8
 800720a:	eb12 0a01 	adds.w	sl, r2, r1
 800720e:	4649      	mov	r1, r9
 8007210:	eb43 0b01 	adc.w	fp, r3, r1
 8007214:	f04f 0200 	mov.w	r2, #0
 8007218:	f04f 0300 	mov.w	r3, #0
 800721c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007220:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007224:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007228:	4692      	mov	sl, r2
 800722a:	469b      	mov	fp, r3
 800722c:	4643      	mov	r3, r8
 800722e:	eb1a 0303 	adds.w	r3, sl, r3
 8007232:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007236:	464b      	mov	r3, r9
 8007238:	eb4b 0303 	adc.w	r3, fp, r3
 800723c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800724c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007250:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007254:	460b      	mov	r3, r1
 8007256:	18db      	adds	r3, r3, r3
 8007258:	643b      	str	r3, [r7, #64]	@ 0x40
 800725a:	4613      	mov	r3, r2
 800725c:	eb42 0303 	adc.w	r3, r2, r3
 8007260:	647b      	str	r3, [r7, #68]	@ 0x44
 8007262:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007266:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800726a:	f7f8 ffc1 	bl	80001f0 <__aeabi_uldivmod>
 800726e:	4602      	mov	r2, r0
 8007270:	460b      	mov	r3, r1
 8007272:	4611      	mov	r1, r2
 8007274:	4b3b      	ldr	r3, [pc, #236]	@ (8007364 <UART_SetConfig+0x2d4>)
 8007276:	fba3 2301 	umull	r2, r3, r3, r1
 800727a:	095b      	lsrs	r3, r3, #5
 800727c:	2264      	movs	r2, #100	@ 0x64
 800727e:	fb02 f303 	mul.w	r3, r2, r3
 8007282:	1acb      	subs	r3, r1, r3
 8007284:	00db      	lsls	r3, r3, #3
 8007286:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800728a:	4b36      	ldr	r3, [pc, #216]	@ (8007364 <UART_SetConfig+0x2d4>)
 800728c:	fba3 2302 	umull	r2, r3, r3, r2
 8007290:	095b      	lsrs	r3, r3, #5
 8007292:	005b      	lsls	r3, r3, #1
 8007294:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007298:	441c      	add	r4, r3
 800729a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800729e:	2200      	movs	r2, #0
 80072a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072a4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80072a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80072ac:	4642      	mov	r2, r8
 80072ae:	464b      	mov	r3, r9
 80072b0:	1891      	adds	r1, r2, r2
 80072b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80072b4:	415b      	adcs	r3, r3
 80072b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80072bc:	4641      	mov	r1, r8
 80072be:	1851      	adds	r1, r2, r1
 80072c0:	6339      	str	r1, [r7, #48]	@ 0x30
 80072c2:	4649      	mov	r1, r9
 80072c4:	414b      	adcs	r3, r1
 80072c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80072c8:	f04f 0200 	mov.w	r2, #0
 80072cc:	f04f 0300 	mov.w	r3, #0
 80072d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80072d4:	4659      	mov	r1, fp
 80072d6:	00cb      	lsls	r3, r1, #3
 80072d8:	4651      	mov	r1, sl
 80072da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072de:	4651      	mov	r1, sl
 80072e0:	00ca      	lsls	r2, r1, #3
 80072e2:	4610      	mov	r0, r2
 80072e4:	4619      	mov	r1, r3
 80072e6:	4603      	mov	r3, r0
 80072e8:	4642      	mov	r2, r8
 80072ea:	189b      	adds	r3, r3, r2
 80072ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80072f0:	464b      	mov	r3, r9
 80072f2:	460a      	mov	r2, r1
 80072f4:	eb42 0303 	adc.w	r3, r2, r3
 80072f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80072fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007308:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800730c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007310:	460b      	mov	r3, r1
 8007312:	18db      	adds	r3, r3, r3
 8007314:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007316:	4613      	mov	r3, r2
 8007318:	eb42 0303 	adc.w	r3, r2, r3
 800731c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800731e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007322:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007326:	f7f8 ff63 	bl	80001f0 <__aeabi_uldivmod>
 800732a:	4602      	mov	r2, r0
 800732c:	460b      	mov	r3, r1
 800732e:	4b0d      	ldr	r3, [pc, #52]	@ (8007364 <UART_SetConfig+0x2d4>)
 8007330:	fba3 1302 	umull	r1, r3, r3, r2
 8007334:	095b      	lsrs	r3, r3, #5
 8007336:	2164      	movs	r1, #100	@ 0x64
 8007338:	fb01 f303 	mul.w	r3, r1, r3
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	00db      	lsls	r3, r3, #3
 8007340:	3332      	adds	r3, #50	@ 0x32
 8007342:	4a08      	ldr	r2, [pc, #32]	@ (8007364 <UART_SetConfig+0x2d4>)
 8007344:	fba2 2303 	umull	r2, r3, r2, r3
 8007348:	095b      	lsrs	r3, r3, #5
 800734a:	f003 0207 	and.w	r2, r3, #7
 800734e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4422      	add	r2, r4
 8007356:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007358:	e106      	b.n	8007568 <UART_SetConfig+0x4d8>
 800735a:	bf00      	nop
 800735c:	40011000 	.word	0x40011000
 8007360:	40011400 	.word	0x40011400
 8007364:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007368:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800736c:	2200      	movs	r2, #0
 800736e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007372:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007376:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800737a:	4642      	mov	r2, r8
 800737c:	464b      	mov	r3, r9
 800737e:	1891      	adds	r1, r2, r2
 8007380:	6239      	str	r1, [r7, #32]
 8007382:	415b      	adcs	r3, r3
 8007384:	627b      	str	r3, [r7, #36]	@ 0x24
 8007386:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800738a:	4641      	mov	r1, r8
 800738c:	1854      	adds	r4, r2, r1
 800738e:	4649      	mov	r1, r9
 8007390:	eb43 0501 	adc.w	r5, r3, r1
 8007394:	f04f 0200 	mov.w	r2, #0
 8007398:	f04f 0300 	mov.w	r3, #0
 800739c:	00eb      	lsls	r3, r5, #3
 800739e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073a2:	00e2      	lsls	r2, r4, #3
 80073a4:	4614      	mov	r4, r2
 80073a6:	461d      	mov	r5, r3
 80073a8:	4643      	mov	r3, r8
 80073aa:	18e3      	adds	r3, r4, r3
 80073ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80073b0:	464b      	mov	r3, r9
 80073b2:	eb45 0303 	adc.w	r3, r5, r3
 80073b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80073ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80073c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80073ca:	f04f 0200 	mov.w	r2, #0
 80073ce:	f04f 0300 	mov.w	r3, #0
 80073d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80073d6:	4629      	mov	r1, r5
 80073d8:	008b      	lsls	r3, r1, #2
 80073da:	4621      	mov	r1, r4
 80073dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073e0:	4621      	mov	r1, r4
 80073e2:	008a      	lsls	r2, r1, #2
 80073e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80073e8:	f7f8 ff02 	bl	80001f0 <__aeabi_uldivmod>
 80073ec:	4602      	mov	r2, r0
 80073ee:	460b      	mov	r3, r1
 80073f0:	4b60      	ldr	r3, [pc, #384]	@ (8007574 <UART_SetConfig+0x4e4>)
 80073f2:	fba3 2302 	umull	r2, r3, r3, r2
 80073f6:	095b      	lsrs	r3, r3, #5
 80073f8:	011c      	lsls	r4, r3, #4
 80073fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073fe:	2200      	movs	r2, #0
 8007400:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007404:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007408:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800740c:	4642      	mov	r2, r8
 800740e:	464b      	mov	r3, r9
 8007410:	1891      	adds	r1, r2, r2
 8007412:	61b9      	str	r1, [r7, #24]
 8007414:	415b      	adcs	r3, r3
 8007416:	61fb      	str	r3, [r7, #28]
 8007418:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800741c:	4641      	mov	r1, r8
 800741e:	1851      	adds	r1, r2, r1
 8007420:	6139      	str	r1, [r7, #16]
 8007422:	4649      	mov	r1, r9
 8007424:	414b      	adcs	r3, r1
 8007426:	617b      	str	r3, [r7, #20]
 8007428:	f04f 0200 	mov.w	r2, #0
 800742c:	f04f 0300 	mov.w	r3, #0
 8007430:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007434:	4659      	mov	r1, fp
 8007436:	00cb      	lsls	r3, r1, #3
 8007438:	4651      	mov	r1, sl
 800743a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800743e:	4651      	mov	r1, sl
 8007440:	00ca      	lsls	r2, r1, #3
 8007442:	4610      	mov	r0, r2
 8007444:	4619      	mov	r1, r3
 8007446:	4603      	mov	r3, r0
 8007448:	4642      	mov	r2, r8
 800744a:	189b      	adds	r3, r3, r2
 800744c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007450:	464b      	mov	r3, r9
 8007452:	460a      	mov	r2, r1
 8007454:	eb42 0303 	adc.w	r3, r2, r3
 8007458:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800745c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007466:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007468:	f04f 0200 	mov.w	r2, #0
 800746c:	f04f 0300 	mov.w	r3, #0
 8007470:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007474:	4649      	mov	r1, r9
 8007476:	008b      	lsls	r3, r1, #2
 8007478:	4641      	mov	r1, r8
 800747a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800747e:	4641      	mov	r1, r8
 8007480:	008a      	lsls	r2, r1, #2
 8007482:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007486:	f7f8 feb3 	bl	80001f0 <__aeabi_uldivmod>
 800748a:	4602      	mov	r2, r0
 800748c:	460b      	mov	r3, r1
 800748e:	4611      	mov	r1, r2
 8007490:	4b38      	ldr	r3, [pc, #224]	@ (8007574 <UART_SetConfig+0x4e4>)
 8007492:	fba3 2301 	umull	r2, r3, r3, r1
 8007496:	095b      	lsrs	r3, r3, #5
 8007498:	2264      	movs	r2, #100	@ 0x64
 800749a:	fb02 f303 	mul.w	r3, r2, r3
 800749e:	1acb      	subs	r3, r1, r3
 80074a0:	011b      	lsls	r3, r3, #4
 80074a2:	3332      	adds	r3, #50	@ 0x32
 80074a4:	4a33      	ldr	r2, [pc, #204]	@ (8007574 <UART_SetConfig+0x4e4>)
 80074a6:	fba2 2303 	umull	r2, r3, r2, r3
 80074aa:	095b      	lsrs	r3, r3, #5
 80074ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80074b0:	441c      	add	r4, r3
 80074b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074b6:	2200      	movs	r2, #0
 80074b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80074ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80074bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80074c0:	4642      	mov	r2, r8
 80074c2:	464b      	mov	r3, r9
 80074c4:	1891      	adds	r1, r2, r2
 80074c6:	60b9      	str	r1, [r7, #8]
 80074c8:	415b      	adcs	r3, r3
 80074ca:	60fb      	str	r3, [r7, #12]
 80074cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80074d0:	4641      	mov	r1, r8
 80074d2:	1851      	adds	r1, r2, r1
 80074d4:	6039      	str	r1, [r7, #0]
 80074d6:	4649      	mov	r1, r9
 80074d8:	414b      	adcs	r3, r1
 80074da:	607b      	str	r3, [r7, #4]
 80074dc:	f04f 0200 	mov.w	r2, #0
 80074e0:	f04f 0300 	mov.w	r3, #0
 80074e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80074e8:	4659      	mov	r1, fp
 80074ea:	00cb      	lsls	r3, r1, #3
 80074ec:	4651      	mov	r1, sl
 80074ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074f2:	4651      	mov	r1, sl
 80074f4:	00ca      	lsls	r2, r1, #3
 80074f6:	4610      	mov	r0, r2
 80074f8:	4619      	mov	r1, r3
 80074fa:	4603      	mov	r3, r0
 80074fc:	4642      	mov	r2, r8
 80074fe:	189b      	adds	r3, r3, r2
 8007500:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007502:	464b      	mov	r3, r9
 8007504:	460a      	mov	r2, r1
 8007506:	eb42 0303 	adc.w	r3, r2, r3
 800750a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800750c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	663b      	str	r3, [r7, #96]	@ 0x60
 8007516:	667a      	str	r2, [r7, #100]	@ 0x64
 8007518:	f04f 0200 	mov.w	r2, #0
 800751c:	f04f 0300 	mov.w	r3, #0
 8007520:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007524:	4649      	mov	r1, r9
 8007526:	008b      	lsls	r3, r1, #2
 8007528:	4641      	mov	r1, r8
 800752a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800752e:	4641      	mov	r1, r8
 8007530:	008a      	lsls	r2, r1, #2
 8007532:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007536:	f7f8 fe5b 	bl	80001f0 <__aeabi_uldivmod>
 800753a:	4602      	mov	r2, r0
 800753c:	460b      	mov	r3, r1
 800753e:	4b0d      	ldr	r3, [pc, #52]	@ (8007574 <UART_SetConfig+0x4e4>)
 8007540:	fba3 1302 	umull	r1, r3, r3, r2
 8007544:	095b      	lsrs	r3, r3, #5
 8007546:	2164      	movs	r1, #100	@ 0x64
 8007548:	fb01 f303 	mul.w	r3, r1, r3
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	011b      	lsls	r3, r3, #4
 8007550:	3332      	adds	r3, #50	@ 0x32
 8007552:	4a08      	ldr	r2, [pc, #32]	@ (8007574 <UART_SetConfig+0x4e4>)
 8007554:	fba2 2303 	umull	r2, r3, r2, r3
 8007558:	095b      	lsrs	r3, r3, #5
 800755a:	f003 020f 	and.w	r2, r3, #15
 800755e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4422      	add	r2, r4
 8007566:	609a      	str	r2, [r3, #8]
}
 8007568:	bf00      	nop
 800756a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800756e:	46bd      	mov	sp, r7
 8007570:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007574:	51eb851f 	.word	0x51eb851f

08007578 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d123      	bne.n	80075d2 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007592:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007596:	683a      	ldr	r2, [r7, #0]
 8007598:	6851      	ldr	r1, [r2, #4]
 800759a:	683a      	ldr	r2, [r7, #0]
 800759c:	6892      	ldr	r2, [r2, #8]
 800759e:	4311      	orrs	r1, r2
 80075a0:	683a      	ldr	r2, [r7, #0]
 80075a2:	68d2      	ldr	r2, [r2, #12]
 80075a4:	4311      	orrs	r1, r2
 80075a6:	683a      	ldr	r2, [r7, #0]
 80075a8:	6912      	ldr	r2, [r2, #16]
 80075aa:	4311      	orrs	r1, r2
 80075ac:	683a      	ldr	r2, [r7, #0]
 80075ae:	6952      	ldr	r2, [r2, #20]
 80075b0:	4311      	orrs	r1, r2
 80075b2:	683a      	ldr	r2, [r7, #0]
 80075b4:	6992      	ldr	r2, [r2, #24]
 80075b6:	4311      	orrs	r1, r2
 80075b8:	683a      	ldr	r2, [r7, #0]
 80075ba:	69d2      	ldr	r2, [r2, #28]
 80075bc:	4311      	orrs	r1, r2
 80075be:	683a      	ldr	r2, [r7, #0]
 80075c0:	6a12      	ldr	r2, [r2, #32]
 80075c2:	4311      	orrs	r1, r2
 80075c4:	683a      	ldr	r2, [r7, #0]
 80075c6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80075c8:	430a      	orrs	r2, r1
 80075ca:	431a      	orrs	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	601a      	str	r2, [r3, #0]
 80075d0:	e028      	b.n	8007624 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	69d9      	ldr	r1, [r3, #28]
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	4319      	orrs	r1, r3
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e8:	430b      	orrs	r3, r1
 80075ea:	431a      	orrs	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80075f8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80075fc:	683a      	ldr	r2, [r7, #0]
 80075fe:	6851      	ldr	r1, [r2, #4]
 8007600:	683a      	ldr	r2, [r7, #0]
 8007602:	6892      	ldr	r2, [r2, #8]
 8007604:	4311      	orrs	r1, r2
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	68d2      	ldr	r2, [r2, #12]
 800760a:	4311      	orrs	r1, r2
 800760c:	683a      	ldr	r2, [r7, #0]
 800760e:	6912      	ldr	r2, [r2, #16]
 8007610:	4311      	orrs	r1, r2
 8007612:	683a      	ldr	r2, [r7, #0]
 8007614:	6952      	ldr	r2, [r2, #20]
 8007616:	4311      	orrs	r1, r2
 8007618:	683a      	ldr	r2, [r7, #0]
 800761a:	6992      	ldr	r2, [r2, #24]
 800761c:	430a      	orrs	r2, r1
 800761e:	431a      	orrs	r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	370c      	adds	r7, #12
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007632:	b480      	push	{r7}
 8007634:	b085      	sub	sp, #20
 8007636:	af00      	add	r7, sp, #0
 8007638:	60f8      	str	r0, [r7, #12]
 800763a:	60b9      	str	r1, [r7, #8]
 800763c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d128      	bne.n	8007696 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	1e59      	subs	r1, r3, #1
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	3b01      	subs	r3, #1
 8007658:	011b      	lsls	r3, r3, #4
 800765a:	4319      	orrs	r1, r3
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	3b01      	subs	r3, #1
 8007662:	021b      	lsls	r3, r3, #8
 8007664:	4319      	orrs	r1, r3
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	3b01      	subs	r3, #1
 800766c:	031b      	lsls	r3, r3, #12
 800766e:	4319      	orrs	r1, r3
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	3b01      	subs	r3, #1
 8007676:	041b      	lsls	r3, r3, #16
 8007678:	4319      	orrs	r1, r3
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	695b      	ldr	r3, [r3, #20]
 800767e:	3b01      	subs	r3, #1
 8007680:	051b      	lsls	r3, r3, #20
 8007682:	4319      	orrs	r1, r3
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	699b      	ldr	r3, [r3, #24]
 8007688:	3b01      	subs	r3, #1
 800768a:	061b      	lsls	r3, r3, #24
 800768c:	430b      	orrs	r3, r1
 800768e:	431a      	orrs	r2, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	609a      	str	r2, [r3, #8]
 8007694:	e02f      	b.n	80076f6 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800769e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80076a2:	68ba      	ldr	r2, [r7, #8]
 80076a4:	68d2      	ldr	r2, [r2, #12]
 80076a6:	3a01      	subs	r2, #1
 80076a8:	0311      	lsls	r1, r2, #12
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	6952      	ldr	r2, [r2, #20]
 80076ae:	3a01      	subs	r2, #1
 80076b0:	0512      	lsls	r2, r2, #20
 80076b2:	430a      	orrs	r2, r1
 80076b4:	431a      	orrs	r2, r3
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	1e59      	subs	r1, r3, #1
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	3b01      	subs	r3, #1
 80076ce:	011b      	lsls	r3, r3, #4
 80076d0:	4319      	orrs	r1, r3
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	3b01      	subs	r3, #1
 80076d8:	021b      	lsls	r3, r3, #8
 80076da:	4319      	orrs	r1, r3
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	3b01      	subs	r3, #1
 80076e2:	041b      	lsls	r3, r3, #16
 80076e4:	4319      	orrs	r1, r3
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	3b01      	subs	r3, #1
 80076ec:	061b      	lsls	r3, r3, #24
 80076ee:	430b      	orrs	r3, r1
 80076f0:	431a      	orrs	r2, r3
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3714      	adds	r7, #20
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	f043 0201 	orr.w	r2, r3, #1
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	370c      	adds	r7, #12
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007726:	b480      	push	{r7}
 8007728:	b083      	sub	sp, #12
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	f023 0201 	bic.w	r2, r3, #1
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007752:	2300      	movs	r3, #0
 8007754:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	3301      	adds	r3, #1
 800775a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007762:	d901      	bls.n	8007768 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e01b      	b.n	80077a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	2b00      	cmp	r3, #0
 800776e:	daf2      	bge.n	8007756 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007770:	2300      	movs	r3, #0
 8007772:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	019b      	lsls	r3, r3, #6
 8007778:	f043 0220 	orr.w	r2, r3, #32
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	3301      	adds	r3, #1
 8007784:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800778c:	d901      	bls.n	8007792 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e006      	b.n	80077a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	f003 0320 	and.w	r3, r3, #32
 800779a:	2b20      	cmp	r3, #32
 800779c:	d0f0      	beq.n	8007780 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077b4:	2300      	movs	r3, #0
 80077b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	3301      	adds	r3, #1
 80077bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077c4:	d901      	bls.n	80077ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80077c6:	2303      	movs	r3, #3
 80077c8:	e018      	b.n	80077fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	daf2      	bge.n	80077b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80077d2:	2300      	movs	r3, #0
 80077d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2210      	movs	r2, #16
 80077da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	3301      	adds	r3, #1
 80077e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077e8:	d901      	bls.n	80077ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80077ea:	2303      	movs	r3, #3
 80077ec:	e006      	b.n	80077fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	f003 0310 	and.w	r3, r3, #16
 80077f6:	2b10      	cmp	r3, #16
 80077f8:	d0f0      	beq.n	80077dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3714      	adds	r7, #20
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007808:	b480      	push	{r7}
 800780a:	b08b      	sub	sp, #44	@ 0x2c
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	4613      	mov	r3, r2
 8007814:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800781e:	88fb      	ldrh	r3, [r7, #6]
 8007820:	089b      	lsrs	r3, r3, #2
 8007822:	b29b      	uxth	r3, r3
 8007824:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007826:	88fb      	ldrh	r3, [r7, #6]
 8007828:	f003 0303 	and.w	r3, r3, #3
 800782c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800782e:	2300      	movs	r3, #0
 8007830:	623b      	str	r3, [r7, #32]
 8007832:	e014      	b.n	800785e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007842:	3301      	adds	r3, #1
 8007844:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007848:	3301      	adds	r3, #1
 800784a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800784c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784e:	3301      	adds	r3, #1
 8007850:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007854:	3301      	adds	r3, #1
 8007856:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007858:	6a3b      	ldr	r3, [r7, #32]
 800785a:	3301      	adds	r3, #1
 800785c:	623b      	str	r3, [r7, #32]
 800785e:	6a3a      	ldr	r2, [r7, #32]
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	429a      	cmp	r2, r3
 8007864:	d3e6      	bcc.n	8007834 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007866:	8bfb      	ldrh	r3, [r7, #30]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d01e      	beq.n	80078aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800786c:	2300      	movs	r3, #0
 800786e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007876:	461a      	mov	r2, r3
 8007878:	f107 0310 	add.w	r3, r7, #16
 800787c:	6812      	ldr	r2, [r2, #0]
 800787e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	6a3b      	ldr	r3, [r7, #32]
 8007884:	b2db      	uxtb	r3, r3
 8007886:	00db      	lsls	r3, r3, #3
 8007888:	fa22 f303 	lsr.w	r3, r2, r3
 800788c:	b2da      	uxtb	r2, r3
 800788e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007890:	701a      	strb	r2, [r3, #0]
      i++;
 8007892:	6a3b      	ldr	r3, [r7, #32]
 8007894:	3301      	adds	r3, #1
 8007896:	623b      	str	r3, [r7, #32]
      pDest++;
 8007898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789a:	3301      	adds	r3, #1
 800789c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800789e:	8bfb      	ldrh	r3, [r7, #30]
 80078a0:	3b01      	subs	r3, #1
 80078a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80078a4:	8bfb      	ldrh	r3, [r7, #30]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1ea      	bne.n	8007880 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80078aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	372c      	adds	r7, #44	@ 0x2c
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	695b      	ldr	r3, [r3, #20]
 80078c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	4013      	ands	r3, r2
 80078ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80078d0:	68fb      	ldr	r3, [r7, #12]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3714      	adds	r7, #20
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80078de:	b480      	push	{r7}
 80078e0:	b085      	sub	sp, #20
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
 80078e6:	460b      	mov	r3, r1
 80078e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80078ee:	78fb      	ldrb	r3, [r7, #3]
 80078f0:	015a      	lsls	r2, r3, #5
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	4413      	add	r3, r2
 80078f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80078fe:	78fb      	ldrb	r3, [r7, #3]
 8007900:	015a      	lsls	r2, r3, #5
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	4413      	add	r3, r2
 8007906:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	4013      	ands	r3, r2
 8007910:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007912:	68bb      	ldr	r3, [r7, #8]
}
 8007914:	4618      	mov	r0, r3
 8007916:	3714      	adds	r7, #20
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	f003 0301 	and.w	r3, r3, #1
}
 8007930:	4618      	mov	r0, r3
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800793c:	b480      	push	{r7}
 800793e:	b085      	sub	sp, #20
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	460b      	mov	r3, r1
 8007946:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800795a:	f023 0303 	bic.w	r3, r3, #3
 800795e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	78fb      	ldrb	r3, [r7, #3]
 800796a:	f003 0303 	and.w	r3, r3, #3
 800796e:	68f9      	ldr	r1, [r7, #12]
 8007970:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007974:	4313      	orrs	r3, r2
 8007976:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007978:	78fb      	ldrb	r3, [r7, #3]
 800797a:	2b01      	cmp	r3, #1
 800797c:	d107      	bne.n	800798e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007984:	461a      	mov	r2, r3
 8007986:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800798a:	6053      	str	r3, [r2, #4]
 800798c:	e00c      	b.n	80079a8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800798e:	78fb      	ldrb	r3, [r7, #3]
 8007990:	2b02      	cmp	r3, #2
 8007992:	d107      	bne.n	80079a4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800799a:	461a      	mov	r2, r3
 800799c:	f241 7370 	movw	r3, #6000	@ 0x1770
 80079a0:	6053      	str	r3, [r2, #4]
 80079a2:	e001      	b.n	80079a8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e000      	b.n	80079aa <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3714      	adds	r7, #20
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b085      	sub	sp, #20
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079c8:	695b      	ldr	r3, [r3, #20]
 80079ca:	b29b      	uxth	r3, r3
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3714      	adds	r7, #20
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80079d8:	b480      	push	{r7}
 80079da:	b089      	sub	sp, #36	@ 0x24
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	460b      	mov	r3, r1
 80079e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80079e8:	78fb      	ldrb	r3, [r7, #3]
 80079ea:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80079ec:	2300      	movs	r3, #0
 80079ee:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	015a      	lsls	r2, r3, #5
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	4413      	add	r3, r2
 80079f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	0c9b      	lsrs	r3, r3, #18
 8007a00:	f003 0303 	and.w	r3, r3, #3
 8007a04:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	015a      	lsls	r2, r3, #5
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	0fdb      	lsrs	r3, r3, #31
 8007a16:	f003 0301 	and.w	r3, r3, #1
 8007a1a:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	015a      	lsls	r2, r3, #5
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	4413      	add	r3, r2
 8007a24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	0fdb      	lsrs	r3, r3, #31
 8007a2c:	f003 0301 	and.w	r3, r3, #1
 8007a30:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	f003 0320 	and.w	r3, r3, #32
 8007a3a:	2b20      	cmp	r3, #32
 8007a3c:	d10d      	bne.n	8007a5a <USB_HC_Halt+0x82>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d10a      	bne.n	8007a5a <USB_HC_Halt+0x82>
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d005      	beq.n	8007a56 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d002      	beq.n	8007a56 <USB_HC_Halt+0x7e>
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	2b03      	cmp	r3, #3
 8007a54:	d101      	bne.n	8007a5a <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007a56:	2300      	movs	r3, #0
 8007a58:	e0d8      	b.n	8007c0c <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d002      	beq.n	8007a66 <USB_HC_Halt+0x8e>
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d173      	bne.n	8007b4e <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	015a      	lsls	r2, r3, #5
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	69ba      	ldr	r2, [r7, #24]
 8007a76:	0151      	lsls	r1, r2, #5
 8007a78:	69fa      	ldr	r2, [r7, #28]
 8007a7a:	440a      	add	r2, r1
 8007a7c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a80:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a84:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	f003 0320 	and.w	r3, r3, #32
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d14a      	bne.n	8007b28 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a96:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d133      	bne.n	8007b06 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	015a      	lsls	r2, r3, #5
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	69ba      	ldr	r2, [r7, #24]
 8007aae:	0151      	lsls	r1, r2, #5
 8007ab0:	69fa      	ldr	r2, [r7, #28]
 8007ab2:	440a      	add	r2, r1
 8007ab4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ab8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007abc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	015a      	lsls	r2, r3, #5
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	69ba      	ldr	r2, [r7, #24]
 8007ace:	0151      	lsls	r1, r2, #5
 8007ad0:	69fa      	ldr	r2, [r7, #28]
 8007ad2:	440a      	add	r2, r1
 8007ad4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ad8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007adc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007aea:	d82e      	bhi.n	8007b4a <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	015a      	lsls	r2, r3, #5
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	4413      	add	r3, r2
 8007af4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007afe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b02:	d0ec      	beq.n	8007ade <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b04:	e081      	b.n	8007c0a <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	015a      	lsls	r2, r3, #5
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	69ba      	ldr	r2, [r7, #24]
 8007b16:	0151      	lsls	r1, r2, #5
 8007b18:	69fa      	ldr	r2, [r7, #28]
 8007b1a:	440a      	add	r2, r1
 8007b1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b20:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b24:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b26:	e070      	b.n	8007c0a <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	015a      	lsls	r2, r3, #5
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	4413      	add	r3, r2
 8007b30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	69ba      	ldr	r2, [r7, #24]
 8007b38:	0151      	lsls	r1, r2, #5
 8007b3a:	69fa      	ldr	r2, [r7, #28]
 8007b3c:	440a      	add	r2, r1
 8007b3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b46:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b48:	e05f      	b.n	8007c0a <USB_HC_Halt+0x232>
            break;
 8007b4a:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b4c:	e05d      	b.n	8007c0a <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	015a      	lsls	r2, r3, #5
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	4413      	add	r3, r2
 8007b56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	69ba      	ldr	r2, [r7, #24]
 8007b5e:	0151      	lsls	r1, r2, #5
 8007b60:	69fa      	ldr	r2, [r7, #28]
 8007b62:	440a      	add	r2, r1
 8007b64:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b68:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b6c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d133      	bne.n	8007be6 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	015a      	lsls	r2, r3, #5
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	4413      	add	r3, r2
 8007b86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	69ba      	ldr	r2, [r7, #24]
 8007b8e:	0151      	lsls	r1, r2, #5
 8007b90:	69fa      	ldr	r2, [r7, #28]
 8007b92:	440a      	add	r2, r1
 8007b94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007b9c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	015a      	lsls	r2, r3, #5
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	69ba      	ldr	r2, [r7, #24]
 8007bae:	0151      	lsls	r1, r2, #5
 8007bb0:	69fa      	ldr	r2, [r7, #28]
 8007bb2:	440a      	add	r2, r1
 8007bb4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bb8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007bbc:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007bca:	d81d      	bhi.n	8007c08 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	015a      	lsls	r2, r3, #5
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007bde:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007be2:	d0ec      	beq.n	8007bbe <USB_HC_Halt+0x1e6>
 8007be4:	e011      	b.n	8007c0a <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007be6:	69bb      	ldr	r3, [r7, #24]
 8007be8:	015a      	lsls	r2, r3, #5
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	4413      	add	r3, r2
 8007bee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	69ba      	ldr	r2, [r7, #24]
 8007bf6:	0151      	lsls	r1, r2, #5
 8007bf8:	69fa      	ldr	r2, [r7, #28]
 8007bfa:	440a      	add	r2, r1
 8007bfc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c00:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c04:	6013      	str	r3, [r2, #0]
 8007c06:	e000      	b.n	8007c0a <USB_HC_Halt+0x232>
          break;
 8007c08:	bf00      	nop
    }
  }

  return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3724      	adds	r7, #36	@ 0x24
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b088      	sub	sp, #32
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007c20:	2300      	movs	r3, #0
 8007c22:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f7ff fd7a 	bl	8007726 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007c32:	2110      	movs	r1, #16
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f7ff fd87 	bl	8007748 <USB_FlushTxFifo>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d001      	beq.n	8007c44 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f7ff fdb1 	bl	80077ac <USB_FlushRxFifo>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d001      	beq.n	8007c54 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007c54:	2300      	movs	r3, #0
 8007c56:	61bb      	str	r3, [r7, #24]
 8007c58:	e01f      	b.n	8007c9a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	015a      	lsls	r2, r3, #5
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	4413      	add	r3, r2
 8007c62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c70:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007c78:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007c80:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	015a      	lsls	r2, r3, #5
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	4413      	add	r3, r2
 8007c8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c8e:	461a      	mov	r2, r3
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	3301      	adds	r3, #1
 8007c98:	61bb      	str	r3, [r7, #24]
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	2b0f      	cmp	r3, #15
 8007c9e:	d9dc      	bls.n	8007c5a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	61bb      	str	r3, [r7, #24]
 8007ca4:	e034      	b.n	8007d10 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	015a      	lsls	r2, r3, #5
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	4413      	add	r3, r2
 8007cae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007cbc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007cc4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007ccc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	015a      	lsls	r2, r3, #5
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cda:	461a      	mov	r2, r3
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007cec:	d80c      	bhi.n	8007d08 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	015a      	lsls	r2, r3, #5
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	4413      	add	r3, r2
 8007cf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d04:	d0ec      	beq.n	8007ce0 <USB_StopHost+0xc8>
 8007d06:	e000      	b.n	8007d0a <USB_StopHost+0xf2>
        break;
 8007d08:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	61bb      	str	r3, [r7, #24]
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	2b0f      	cmp	r3, #15
 8007d14:	d9c7      	bls.n	8007ca6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007d22:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007d2a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f7ff fce9 	bl	8007704 <USB_EnableGlobalInt>

  return ret;
 8007d32:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3720      	adds	r7, #32
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007d4a:	1c5a      	adds	r2, r3, #1
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 f804 	bl	8007d60 <USBH_HandleSof>
}
 8007d58:	bf00      	nop
 8007d5a:	3708      	adds	r7, #8
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	2b0b      	cmp	r3, #11
 8007d70:	d10a      	bne.n	8007d88 <USBH_HandleSof+0x28>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d005      	beq.n	8007d88 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d82:	699b      	ldr	r3, [r3, #24]
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	4798      	blx	r3
  }
}
 8007d88:	bf00      	nop
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007db4:	2200      	movs	r2, #0
 8007db6:	4619      	mov	r1, r3
 8007db8:	f000 f8ae 	bl	8007f18 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007dbc:	bf00      	nop
}
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007dd4:	bf00      	nop
}
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007e14:	2200      	movs	r2, #0
 8007e16:	4619      	mov	r1, r3
 8007e18:	f000 f87e 	bl	8007f18 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3708      	adds	r7, #8
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b082      	sub	sp, #8
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2201      	movs	r2, #1
 8007e32:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f001 f92a 	bl	80090a0 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	791b      	ldrb	r3, [r3, #4]
 8007e50:	4619      	mov	r1, r3
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f830 	bl	8007eb8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	795b      	ldrb	r3, [r3, #5]
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f82a 	bl	8007eb8 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007e78:	2200      	movs	r2, #0
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	f000 f84c 	bl	8007f18 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3708      	adds	r7, #8
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b082      	sub	sp, #8
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	f000 f835 	bl	8007f18 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8007eae:	2300      	movs	r3, #0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3708      	adds	r7, #8
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007ec4:	78fb      	ldrb	r3, [r7, #3]
 8007ec6:	2b0f      	cmp	r3, #15
 8007ec8:	d80d      	bhi.n	8007ee6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007eca:	78fb      	ldrb	r3, [r7, #3]
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	33e0      	adds	r3, #224	@ 0xe0
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	4413      	add	r3, r2
 8007ed4:	685a      	ldr	r2, [r3, #4]
 8007ed6:	78fb      	ldrb	r3, [r7, #3]
 8007ed8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007edc:	6879      	ldr	r1, [r7, #4]
 8007ede:	33e0      	adds	r3, #224	@ 0xe0
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	440b      	add	r3, r1
 8007ee4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007efa:	f3ef 8305 	mrs	r3, IPSR
 8007efe:	607b      	str	r3, [r7, #4]
  return(result);
 8007f00:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	bf14      	ite	ne
 8007f06:	2301      	movne	r3, #1
 8007f08:	2300      	moveq	r3, #0
 8007f0a:	b2db      	uxtb	r3, r3
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b086      	sub	sp, #24
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007f24:	2300      	movs	r3, #0
 8007f26:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d101      	bne.n	8007f36 <osMessagePut+0x1e>
    ticks = 1;
 8007f32:	2301      	movs	r3, #1
 8007f34:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007f36:	f7ff ffdd 	bl	8007ef4 <inHandlerMode>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d018      	beq.n	8007f72 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007f40:	f107 0210 	add.w	r2, r7, #16
 8007f44:	f107 0108 	add.w	r1, r7, #8
 8007f48:	2300      	movs	r3, #0
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f000 f9ae 	bl	80082ac <xQueueGenericSendFromISR>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d001      	beq.n	8007f5a <osMessagePut+0x42>
      return osErrorOS;
 8007f56:	23ff      	movs	r3, #255	@ 0xff
 8007f58:	e018      	b.n	8007f8c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d014      	beq.n	8007f8a <osMessagePut+0x72>
 8007f60:	4b0c      	ldr	r3, [pc, #48]	@ (8007f94 <osMessagePut+0x7c>)
 8007f62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f66:	601a      	str	r2, [r3, #0]
 8007f68:	f3bf 8f4f 	dsb	sy
 8007f6c:	f3bf 8f6f 	isb	sy
 8007f70:	e00b      	b.n	8007f8a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007f72:	f107 0108 	add.w	r1, r7, #8
 8007f76:	2300      	movs	r3, #0
 8007f78:	697a      	ldr	r2, [r7, #20]
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f000 f894 	bl	80080a8 <xQueueGenericSend>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d001      	beq.n	8007f8a <osMessagePut+0x72>
      return osErrorOS;
 8007f86:	23ff      	movs	r3, #255	@ 0xff
 8007f88:	e000      	b.n	8007f8c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3718      	adds	r7, #24
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	e000ed04 	.word	0xe000ed04

08007f98 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	689a      	ldr	r2, [r3, #8]
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	683a      	ldr	r2, [r7, #0]
 8007fbc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	683a      	ldr	r2, [r7, #0]
 8007fc2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	1c5a      	adds	r2, r3, #1
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	601a      	str	r2, [r3, #0]
}
 8007fd4:	bf00      	nop
 8007fd6:	3714      	adds	r7, #20
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ff6:	d103      	bne.n	8008000 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	60fb      	str	r3, [r7, #12]
 8007ffe:	e00c      	b.n	800801a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	3308      	adds	r3, #8
 8008004:	60fb      	str	r3, [r7, #12]
 8008006:	e002      	b.n	800800e <vListInsert+0x2e>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	60fb      	str	r3, [r7, #12]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68ba      	ldr	r2, [r7, #8]
 8008016:	429a      	cmp	r2, r3
 8008018:	d2f6      	bcs.n	8008008 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	685a      	ldr	r2, [r3, #4]
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	683a      	ldr	r2, [r7, #0]
 8008028:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	683a      	ldr	r2, [r7, #0]
 8008034:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	1c5a      	adds	r2, r3, #1
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	601a      	str	r2, [r3, #0]
}
 8008046:	bf00      	nop
 8008048:	3714      	adds	r7, #20
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr

08008052 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008052:	b480      	push	{r7}
 8008054:	b085      	sub	sp, #20
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	6892      	ldr	r2, [r2, #8]
 8008068:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	6852      	ldr	r2, [r2, #4]
 8008072:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	429a      	cmp	r2, r3
 800807c:	d103      	bne.n	8008086 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	689a      	ldr	r2, [r3, #8]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	1e5a      	subs	r2, r3, #1
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
}
 800809a:	4618      	mov	r0, r3
 800809c:	3714      	adds	r7, #20
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
	...

080080a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b08e      	sub	sp, #56	@ 0x38
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
 80080b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80080b6:	2300      	movs	r3, #0
 80080b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80080be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d10b      	bne.n	80080dc <xQueueGenericSend+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80080c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080c8:	f383 8811 	msr	BASEPRI, r3
 80080cc:	f3bf 8f6f 	isb	sy
 80080d0:	f3bf 8f4f 	dsb	sy
 80080d4:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80080d6:	bf00      	nop
 80080d8:	bf00      	nop
 80080da:	e7fd      	b.n	80080d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d103      	bne.n	80080ea <xQueueGenericSend+0x42>
 80080e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d101      	bne.n	80080ee <xQueueGenericSend+0x46>
 80080ea:	2301      	movs	r3, #1
 80080ec:	e000      	b.n	80080f0 <xQueueGenericSend+0x48>
 80080ee:	2300      	movs	r3, #0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10b      	bne.n	800810c <xQueueGenericSend+0x64>
	__asm volatile
 80080f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f8:	f383 8811 	msr	BASEPRI, r3
 80080fc:	f3bf 8f6f 	isb	sy
 8008100:	f3bf 8f4f 	dsb	sy
 8008104:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008106:	bf00      	nop
 8008108:	bf00      	nop
 800810a:	e7fd      	b.n	8008108 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	2b02      	cmp	r3, #2
 8008110:	d103      	bne.n	800811a <xQueueGenericSend+0x72>
 8008112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008116:	2b01      	cmp	r3, #1
 8008118:	d101      	bne.n	800811e <xQueueGenericSend+0x76>
 800811a:	2301      	movs	r3, #1
 800811c:	e000      	b.n	8008120 <xQueueGenericSend+0x78>
 800811e:	2300      	movs	r3, #0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10b      	bne.n	800813c <xQueueGenericSend+0x94>
	__asm volatile
 8008124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008128:	f383 8811 	msr	BASEPRI, r3
 800812c:	f3bf 8f6f 	isb	sy
 8008130:	f3bf 8f4f 	dsb	sy
 8008134:	623b      	str	r3, [r7, #32]
}
 8008136:	bf00      	nop
 8008138:	bf00      	nop
 800813a:	e7fd      	b.n	8008138 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800813c:	f000 fd40 	bl	8008bc0 <xTaskGetSchedulerState>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d102      	bne.n	800814c <xQueueGenericSend+0xa4>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d101      	bne.n	8008150 <xQueueGenericSend+0xa8>
 800814c:	2301      	movs	r3, #1
 800814e:	e000      	b.n	8008152 <xQueueGenericSend+0xaa>
 8008150:	2300      	movs	r3, #0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d10b      	bne.n	800816e <xQueueGenericSend+0xc6>
	__asm volatile
 8008156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800815a:	f383 8811 	msr	BASEPRI, r3
 800815e:	f3bf 8f6f 	isb	sy
 8008162:	f3bf 8f4f 	dsb	sy
 8008166:	61fb      	str	r3, [r7, #28]
}
 8008168:	bf00      	nop
 800816a:	bf00      	nop
 800816c:	e7fd      	b.n	800816a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800816e:	f000 fe4b 	bl	8008e08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008174:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800817a:	429a      	cmp	r2, r3
 800817c:	d302      	bcc.n	8008184 <xQueueGenericSend+0xdc>
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	2b02      	cmp	r3, #2
 8008182:	d129      	bne.n	80081d8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008184:	683a      	ldr	r2, [r7, #0]
 8008186:	68b9      	ldr	r1, [r7, #8]
 8008188:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800818a:	f000 f92d 	bl	80083e8 <prvCopyDataToQueue>
 800818e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008194:	2b00      	cmp	r3, #0
 8008196:	d010      	beq.n	80081ba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800819a:	3324      	adds	r3, #36	@ 0x24
 800819c:	4618      	mov	r0, r3
 800819e:	f000 fc05 	bl	80089ac <xTaskRemoveFromEventList>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d013      	beq.n	80081d0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80081a8:	4b3f      	ldr	r3, [pc, #252]	@ (80082a8 <xQueueGenericSend+0x200>)
 80081aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081ae:	601a      	str	r2, [r3, #0]
 80081b0:	f3bf 8f4f 	dsb	sy
 80081b4:	f3bf 8f6f 	isb	sy
 80081b8:	e00a      	b.n	80081d0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80081ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d007      	beq.n	80081d0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80081c0:	4b39      	ldr	r3, [pc, #228]	@ (80082a8 <xQueueGenericSend+0x200>)
 80081c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081c6:	601a      	str	r2, [r3, #0]
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80081d0:	f000 fe4c 	bl	8008e6c <vPortExitCritical>
				return pdPASS;
 80081d4:	2301      	movs	r3, #1
 80081d6:	e063      	b.n	80082a0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d103      	bne.n	80081e6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80081de:	f000 fe45 	bl	8008e6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80081e2:	2300      	movs	r3, #0
 80081e4:	e05c      	b.n	80082a0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d106      	bne.n	80081fa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80081ec:	f107 0314 	add.w	r3, r7, #20
 80081f0:	4618      	mov	r0, r3
 80081f2:	f000 fc3f 	bl	8008a74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081f6:	2301      	movs	r3, #1
 80081f8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081fa:	f000 fe37 	bl	8008e6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081fe:	f000 f9c7 	bl	8008590 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008202:	f000 fe01 	bl	8008e08 <vPortEnterCritical>
 8008206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008208:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800820c:	b25b      	sxtb	r3, r3
 800820e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008212:	d103      	bne.n	800821c <xQueueGenericSend+0x174>
 8008214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008216:	2200      	movs	r2, #0
 8008218:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800821c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800821e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008222:	b25b      	sxtb	r3, r3
 8008224:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008228:	d103      	bne.n	8008232 <xQueueGenericSend+0x18a>
 800822a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800822c:	2200      	movs	r2, #0
 800822e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008232:	f000 fe1b 	bl	8008e6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008236:	1d3a      	adds	r2, r7, #4
 8008238:	f107 0314 	add.w	r3, r7, #20
 800823c:	4611      	mov	r1, r2
 800823e:	4618      	mov	r0, r3
 8008240:	f000 fc2e 	bl	8008aa0 <xTaskCheckForTimeOut>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d124      	bne.n	8008294 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800824a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800824c:	f000 f988 	bl	8008560 <prvIsQueueFull>
 8008250:	4603      	mov	r3, r0
 8008252:	2b00      	cmp	r3, #0
 8008254:	d018      	beq.n	8008288 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008258:	3310      	adds	r3, #16
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	4611      	mov	r1, r2
 800825e:	4618      	mov	r0, r3
 8008260:	f000 fb7e 	bl	8008960 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008264:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008266:	f000 f929 	bl	80084bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800826a:	f000 f99f 	bl	80085ac <xTaskResumeAll>
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	f47f af7c 	bne.w	800816e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008276:	4b0c      	ldr	r3, [pc, #48]	@ (80082a8 <xQueueGenericSend+0x200>)
 8008278:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800827c:	601a      	str	r2, [r3, #0]
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	f3bf 8f6f 	isb	sy
 8008286:	e772      	b.n	800816e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008288:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800828a:	f000 f917 	bl	80084bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800828e:	f000 f98d 	bl	80085ac <xTaskResumeAll>
 8008292:	e76c      	b.n	800816e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008294:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008296:	f000 f911 	bl	80084bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800829a:	f000 f987 	bl	80085ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800829e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3738      	adds	r7, #56	@ 0x38
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	e000ed04 	.word	0xe000ed04

080082ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b090      	sub	sp, #64	@ 0x40
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	607a      	str	r2, [r7, #4]
 80082b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80082be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d10b      	bne.n	80082dc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80082c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c8:	f383 8811 	msr	BASEPRI, r3
 80082cc:	f3bf 8f6f 	isb	sy
 80082d0:	f3bf 8f4f 	dsb	sy
 80082d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80082d6:	bf00      	nop
 80082d8:	bf00      	nop
 80082da:	e7fd      	b.n	80082d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d103      	bne.n	80082ea <xQueueGenericSendFromISR+0x3e>
 80082e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d101      	bne.n	80082ee <xQueueGenericSendFromISR+0x42>
 80082ea:	2301      	movs	r3, #1
 80082ec:	e000      	b.n	80082f0 <xQueueGenericSendFromISR+0x44>
 80082ee:	2300      	movs	r3, #0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d10b      	bne.n	800830c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80082f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f8:	f383 8811 	msr	BASEPRI, r3
 80082fc:	f3bf 8f6f 	isb	sy
 8008300:	f3bf 8f4f 	dsb	sy
 8008304:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008306:	bf00      	nop
 8008308:	bf00      	nop
 800830a:	e7fd      	b.n	8008308 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	2b02      	cmp	r3, #2
 8008310:	d103      	bne.n	800831a <xQueueGenericSendFromISR+0x6e>
 8008312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008316:	2b01      	cmp	r3, #1
 8008318:	d101      	bne.n	800831e <xQueueGenericSendFromISR+0x72>
 800831a:	2301      	movs	r3, #1
 800831c:	e000      	b.n	8008320 <xQueueGenericSendFromISR+0x74>
 800831e:	2300      	movs	r3, #0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10b      	bne.n	800833c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008328:	f383 8811 	msr	BASEPRI, r3
 800832c:	f3bf 8f6f 	isb	sy
 8008330:	f3bf 8f4f 	dsb	sy
 8008334:	623b      	str	r3, [r7, #32]
}
 8008336:	bf00      	nop
 8008338:	bf00      	nop
 800833a:	e7fd      	b.n	8008338 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800833c:	f000 fe16 	bl	8008f6c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008340:	f3ef 8211 	mrs	r2, BASEPRI
 8008344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008348:	f383 8811 	msr	BASEPRI, r3
 800834c:	f3bf 8f6f 	isb	sy
 8008350:	f3bf 8f4f 	dsb	sy
 8008354:	61fa      	str	r2, [r7, #28]
 8008356:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008358:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800835a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800835c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800835e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008364:	429a      	cmp	r2, r3
 8008366:	d302      	bcc.n	800836e <xQueueGenericSendFromISR+0xc2>
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	2b02      	cmp	r3, #2
 800836c:	d12f      	bne.n	80083ce <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800836e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008370:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008374:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800837a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800837c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800837e:	683a      	ldr	r2, [r7, #0]
 8008380:	68b9      	ldr	r1, [r7, #8]
 8008382:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008384:	f000 f830 	bl	80083e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008388:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800838c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008390:	d112      	bne.n	80083b8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008396:	2b00      	cmp	r3, #0
 8008398:	d016      	beq.n	80083c8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800839a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800839c:	3324      	adds	r3, #36	@ 0x24
 800839e:	4618      	mov	r0, r3
 80083a0:	f000 fb04 	bl	80089ac <xTaskRemoveFromEventList>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00e      	beq.n	80083c8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00b      	beq.n	80083c8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	601a      	str	r2, [r3, #0]
 80083b6:	e007      	b.n	80083c8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80083b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80083bc:	3301      	adds	r3, #1
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	b25a      	sxtb	r2, r3
 80083c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80083c8:	2301      	movs	r3, #1
 80083ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80083cc:	e001      	b.n	80083d2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80083ce:	2300      	movs	r3, #0
 80083d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083d4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80083dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80083de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3740      	adds	r7, #64	@ 0x40
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b086      	sub	sp, #24
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80083f4:	2300      	movs	r3, #0
 80083f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10d      	bne.n	8008422 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d14d      	bne.n	80084aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	4618      	mov	r0, r3
 8008414:	f000 fbf2 	bl	8008bfc <xTaskPriorityDisinherit>
 8008418:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2200      	movs	r2, #0
 800841e:	609a      	str	r2, [r3, #8]
 8008420:	e043      	b.n	80084aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d119      	bne.n	800845c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6858      	ldr	r0, [r3, #4]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008430:	461a      	mov	r2, r3
 8008432:	68b9      	ldr	r1, [r7, #8]
 8008434:	f000 fea8 	bl	8009188 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	685a      	ldr	r2, [r3, #4]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008440:	441a      	add	r2, r3
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	685a      	ldr	r2, [r3, #4]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	429a      	cmp	r2, r3
 8008450:	d32b      	bcc.n	80084aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	605a      	str	r2, [r3, #4]
 800845a:	e026      	b.n	80084aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	68d8      	ldr	r0, [r3, #12]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008464:	461a      	mov	r2, r3
 8008466:	68b9      	ldr	r1, [r7, #8]
 8008468:	f000 fe8e 	bl	8009188 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	68da      	ldr	r2, [r3, #12]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008474:	425b      	negs	r3, r3
 8008476:	441a      	add	r2, r3
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	68da      	ldr	r2, [r3, #12]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	429a      	cmp	r2, r3
 8008486:	d207      	bcs.n	8008498 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	689a      	ldr	r2, [r3, #8]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008490:	425b      	negs	r3, r3
 8008492:	441a      	add	r2, r3
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2b02      	cmp	r3, #2
 800849c:	d105      	bne.n	80084aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d002      	beq.n	80084aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	3b01      	subs	r3, #1
 80084a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	1c5a      	adds	r2, r3, #1
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80084b2:	697b      	ldr	r3, [r7, #20]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3718      	adds	r7, #24
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80084c4:	f000 fca0 	bl	8008e08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084d0:	e011      	b.n	80084f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d012      	beq.n	8008500 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	3324      	adds	r3, #36	@ 0x24
 80084de:	4618      	mov	r0, r3
 80084e0:	f000 fa64 	bl	80089ac <xTaskRemoveFromEventList>
 80084e4:	4603      	mov	r3, r0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d001      	beq.n	80084ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80084ea:	f000 fb3d 	bl	8008b68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80084ee:	7bfb      	ldrb	r3, [r7, #15]
 80084f0:	3b01      	subs	r3, #1
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	dce9      	bgt.n	80084d2 <prvUnlockQueue+0x16>
 80084fe:	e000      	b.n	8008502 <prvUnlockQueue+0x46>
					break;
 8008500:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	22ff      	movs	r2, #255	@ 0xff
 8008506:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800850a:	f000 fcaf 	bl	8008e6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800850e:	f000 fc7b 	bl	8008e08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008518:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800851a:	e011      	b.n	8008540 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d012      	beq.n	800854a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	3310      	adds	r3, #16
 8008528:	4618      	mov	r0, r3
 800852a:	f000 fa3f 	bl	80089ac <xTaskRemoveFromEventList>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d001      	beq.n	8008538 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008534:	f000 fb18 	bl	8008b68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008538:	7bbb      	ldrb	r3, [r7, #14]
 800853a:	3b01      	subs	r3, #1
 800853c:	b2db      	uxtb	r3, r3
 800853e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008540:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008544:	2b00      	cmp	r3, #0
 8008546:	dce9      	bgt.n	800851c <prvUnlockQueue+0x60>
 8008548:	e000      	b.n	800854c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800854a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	22ff      	movs	r2, #255	@ 0xff
 8008550:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008554:	f000 fc8a 	bl	8008e6c <vPortExitCritical>
}
 8008558:	bf00      	nop
 800855a:	3710      	adds	r7, #16
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008568:	f000 fc4e 	bl	8008e08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008574:	429a      	cmp	r2, r3
 8008576:	d102      	bne.n	800857e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008578:	2301      	movs	r3, #1
 800857a:	60fb      	str	r3, [r7, #12]
 800857c:	e001      	b.n	8008582 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800857e:	2300      	movs	r3, #0
 8008580:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008582:	f000 fc73 	bl	8008e6c <vPortExitCritical>

	return xReturn;
 8008586:	68fb      	ldr	r3, [r7, #12]
}
 8008588:	4618      	mov	r0, r3
 800858a:	3710      	adds	r7, #16
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008590:	b480      	push	{r7}
 8008592:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008594:	4b04      	ldr	r3, [pc, #16]	@ (80085a8 <vTaskSuspendAll+0x18>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	3301      	adds	r3, #1
 800859a:	4a03      	ldr	r2, [pc, #12]	@ (80085a8 <vTaskSuspendAll+0x18>)
 800859c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800859e:	bf00      	nop
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr
 80085a8:	20025c30 	.word	0x20025c30

080085ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80085b2:	2300      	movs	r3, #0
 80085b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80085b6:	2300      	movs	r3, #0
 80085b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80085ba:	4b42      	ldr	r3, [pc, #264]	@ (80086c4 <xTaskResumeAll+0x118>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d10b      	bne.n	80085da <xTaskResumeAll+0x2e>
	__asm volatile
 80085c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c6:	f383 8811 	msr	BASEPRI, r3
 80085ca:	f3bf 8f6f 	isb	sy
 80085ce:	f3bf 8f4f 	dsb	sy
 80085d2:	603b      	str	r3, [r7, #0]
}
 80085d4:	bf00      	nop
 80085d6:	bf00      	nop
 80085d8:	e7fd      	b.n	80085d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80085da:	f000 fc15 	bl	8008e08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80085de:	4b39      	ldr	r3, [pc, #228]	@ (80086c4 <xTaskResumeAll+0x118>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	3b01      	subs	r3, #1
 80085e4:	4a37      	ldr	r2, [pc, #220]	@ (80086c4 <xTaskResumeAll+0x118>)
 80085e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085e8:	4b36      	ldr	r3, [pc, #216]	@ (80086c4 <xTaskResumeAll+0x118>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d161      	bne.n	80086b4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80085f0:	4b35      	ldr	r3, [pc, #212]	@ (80086c8 <xTaskResumeAll+0x11c>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d05d      	beq.n	80086b4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085f8:	e02e      	b.n	8008658 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085fa:	4b34      	ldr	r3, [pc, #208]	@ (80086cc <xTaskResumeAll+0x120>)
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	3318      	adds	r3, #24
 8008606:	4618      	mov	r0, r3
 8008608:	f7ff fd23 	bl	8008052 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	3304      	adds	r3, #4
 8008610:	4618      	mov	r0, r3
 8008612:	f7ff fd1e 	bl	8008052 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800861a:	2201      	movs	r2, #1
 800861c:	409a      	lsls	r2, r3
 800861e:	4b2c      	ldr	r3, [pc, #176]	@ (80086d0 <xTaskResumeAll+0x124>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4313      	orrs	r3, r2
 8008624:	4a2a      	ldr	r2, [pc, #168]	@ (80086d0 <xTaskResumeAll+0x124>)
 8008626:	6013      	str	r3, [r2, #0]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800862c:	4613      	mov	r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	4413      	add	r3, r2
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4a27      	ldr	r2, [pc, #156]	@ (80086d4 <xTaskResumeAll+0x128>)
 8008636:	441a      	add	r2, r3
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	3304      	adds	r3, #4
 800863c:	4619      	mov	r1, r3
 800863e:	4610      	mov	r0, r2
 8008640:	f7ff fcaa 	bl	8007f98 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008648:	4b23      	ldr	r3, [pc, #140]	@ (80086d8 <xTaskResumeAll+0x12c>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800864e:	429a      	cmp	r2, r3
 8008650:	d302      	bcc.n	8008658 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008652:	4b22      	ldr	r3, [pc, #136]	@ (80086dc <xTaskResumeAll+0x130>)
 8008654:	2201      	movs	r2, #1
 8008656:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008658:	4b1c      	ldr	r3, [pc, #112]	@ (80086cc <xTaskResumeAll+0x120>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1cc      	bne.n	80085fa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d001      	beq.n	800866a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008666:	f000 fa8b 	bl	8008b80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800866a:	4b1d      	ldr	r3, [pc, #116]	@ (80086e0 <xTaskResumeAll+0x134>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d010      	beq.n	8008698 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008676:	f000 f837 	bl	80086e8 <xTaskIncrementTick>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d002      	beq.n	8008686 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008680:	4b16      	ldr	r3, [pc, #88]	@ (80086dc <xTaskResumeAll+0x130>)
 8008682:	2201      	movs	r2, #1
 8008684:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	3b01      	subs	r3, #1
 800868a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1f1      	bne.n	8008676 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008692:	4b13      	ldr	r3, [pc, #76]	@ (80086e0 <xTaskResumeAll+0x134>)
 8008694:	2200      	movs	r2, #0
 8008696:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008698:	4b10      	ldr	r3, [pc, #64]	@ (80086dc <xTaskResumeAll+0x130>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d009      	beq.n	80086b4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80086a0:	2301      	movs	r3, #1
 80086a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80086a4:	4b0f      	ldr	r3, [pc, #60]	@ (80086e4 <xTaskResumeAll+0x138>)
 80086a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086aa:	601a      	str	r2, [r3, #0]
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80086b4:	f000 fbda 	bl	8008e6c <vPortExitCritical>

	return xAlreadyYielded;
 80086b8:	68bb      	ldr	r3, [r7, #8]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	20025c30 	.word	0x20025c30
 80086c8:	20025c10 	.word	0x20025c10
 80086cc:	20025be8 	.word	0x20025be8
 80086d0:	20025c18 	.word	0x20025c18
 80086d4:	20025b54 	.word	0x20025b54
 80086d8:	20025b50 	.word	0x20025b50
 80086dc:	20025c24 	.word	0x20025c24
 80086e0:	20025c20 	.word	0x20025c20
 80086e4:	e000ed04 	.word	0xe000ed04

080086e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b086      	sub	sp, #24
 80086ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80086ee:	2300      	movs	r3, #0
 80086f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086f2:	4b4f      	ldr	r3, [pc, #316]	@ (8008830 <xTaskIncrementTick+0x148>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	f040 808f 	bne.w	800881a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80086fc:	4b4d      	ldr	r3, [pc, #308]	@ (8008834 <xTaskIncrementTick+0x14c>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	3301      	adds	r3, #1
 8008702:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008704:	4a4b      	ldr	r2, [pc, #300]	@ (8008834 <xTaskIncrementTick+0x14c>)
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d121      	bne.n	8008754 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008710:	4b49      	ldr	r3, [pc, #292]	@ (8008838 <xTaskIncrementTick+0x150>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00b      	beq.n	8008732 <xTaskIncrementTick+0x4a>
	__asm volatile
 800871a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800871e:	f383 8811 	msr	BASEPRI, r3
 8008722:	f3bf 8f6f 	isb	sy
 8008726:	f3bf 8f4f 	dsb	sy
 800872a:	603b      	str	r3, [r7, #0]
}
 800872c:	bf00      	nop
 800872e:	bf00      	nop
 8008730:	e7fd      	b.n	800872e <xTaskIncrementTick+0x46>
 8008732:	4b41      	ldr	r3, [pc, #260]	@ (8008838 <xTaskIncrementTick+0x150>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	60fb      	str	r3, [r7, #12]
 8008738:	4b40      	ldr	r3, [pc, #256]	@ (800883c <xTaskIncrementTick+0x154>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a3e      	ldr	r2, [pc, #248]	@ (8008838 <xTaskIncrementTick+0x150>)
 800873e:	6013      	str	r3, [r2, #0]
 8008740:	4a3e      	ldr	r2, [pc, #248]	@ (800883c <xTaskIncrementTick+0x154>)
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	6013      	str	r3, [r2, #0]
 8008746:	4b3e      	ldr	r3, [pc, #248]	@ (8008840 <xTaskIncrementTick+0x158>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	3301      	adds	r3, #1
 800874c:	4a3c      	ldr	r2, [pc, #240]	@ (8008840 <xTaskIncrementTick+0x158>)
 800874e:	6013      	str	r3, [r2, #0]
 8008750:	f000 fa16 	bl	8008b80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008754:	4b3b      	ldr	r3, [pc, #236]	@ (8008844 <xTaskIncrementTick+0x15c>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	693a      	ldr	r2, [r7, #16]
 800875a:	429a      	cmp	r2, r3
 800875c:	d348      	bcc.n	80087f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800875e:	4b36      	ldr	r3, [pc, #216]	@ (8008838 <xTaskIncrementTick+0x150>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d104      	bne.n	8008772 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008768:	4b36      	ldr	r3, [pc, #216]	@ (8008844 <xTaskIncrementTick+0x15c>)
 800876a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800876e:	601a      	str	r2, [r3, #0]
					break;
 8008770:	e03e      	b.n	80087f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008772:	4b31      	ldr	r3, [pc, #196]	@ (8008838 <xTaskIncrementTick+0x150>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008782:	693a      	ldr	r2, [r7, #16]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	429a      	cmp	r2, r3
 8008788:	d203      	bcs.n	8008792 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800878a:	4a2e      	ldr	r2, [pc, #184]	@ (8008844 <xTaskIncrementTick+0x15c>)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008790:	e02e      	b.n	80087f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	3304      	adds	r3, #4
 8008796:	4618      	mov	r0, r3
 8008798:	f7ff fc5b 	bl	8008052 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d004      	beq.n	80087ae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	3318      	adds	r3, #24
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7ff fc52 	bl	8008052 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087b2:	2201      	movs	r2, #1
 80087b4:	409a      	lsls	r2, r3
 80087b6:	4b24      	ldr	r3, [pc, #144]	@ (8008848 <xTaskIncrementTick+0x160>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4313      	orrs	r3, r2
 80087bc:	4a22      	ldr	r2, [pc, #136]	@ (8008848 <xTaskIncrementTick+0x160>)
 80087be:	6013      	str	r3, [r2, #0]
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087c4:	4613      	mov	r3, r2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	4413      	add	r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	4a1f      	ldr	r2, [pc, #124]	@ (800884c <xTaskIncrementTick+0x164>)
 80087ce:	441a      	add	r2, r3
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	3304      	adds	r3, #4
 80087d4:	4619      	mov	r1, r3
 80087d6:	4610      	mov	r0, r2
 80087d8:	f7ff fbde 	bl	8007f98 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087e0:	4b1b      	ldr	r3, [pc, #108]	@ (8008850 <xTaskIncrementTick+0x168>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d3b9      	bcc.n	800875e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80087ea:	2301      	movs	r3, #1
 80087ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087ee:	e7b6      	b.n	800875e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80087f0:	4b17      	ldr	r3, [pc, #92]	@ (8008850 <xTaskIncrementTick+0x168>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087f6:	4915      	ldr	r1, [pc, #84]	@ (800884c <xTaskIncrementTick+0x164>)
 80087f8:	4613      	mov	r3, r2
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	4413      	add	r3, r2
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	440b      	add	r3, r1
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2b01      	cmp	r3, #1
 8008806:	d901      	bls.n	800880c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008808:	2301      	movs	r3, #1
 800880a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800880c:	4b11      	ldr	r3, [pc, #68]	@ (8008854 <xTaskIncrementTick+0x16c>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d007      	beq.n	8008824 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008814:	2301      	movs	r3, #1
 8008816:	617b      	str	r3, [r7, #20]
 8008818:	e004      	b.n	8008824 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800881a:	4b0f      	ldr	r3, [pc, #60]	@ (8008858 <xTaskIncrementTick+0x170>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	3301      	adds	r3, #1
 8008820:	4a0d      	ldr	r2, [pc, #52]	@ (8008858 <xTaskIncrementTick+0x170>)
 8008822:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008824:	697b      	ldr	r3, [r7, #20]
}
 8008826:	4618      	mov	r0, r3
 8008828:	3718      	adds	r7, #24
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	20025c30 	.word	0x20025c30
 8008834:	20025c14 	.word	0x20025c14
 8008838:	20025be0 	.word	0x20025be0
 800883c:	20025be4 	.word	0x20025be4
 8008840:	20025c28 	.word	0x20025c28
 8008844:	20025c2c 	.word	0x20025c2c
 8008848:	20025c18 	.word	0x20025c18
 800884c:	20025b54 	.word	0x20025b54
 8008850:	20025b50 	.word	0x20025b50
 8008854:	20025c24 	.word	0x20025c24
 8008858:	20025c20 	.word	0x20025c20

0800885c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b088      	sub	sp, #32
 8008860:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008862:	4b3a      	ldr	r3, [pc, #232]	@ (800894c <vTaskSwitchContext+0xf0>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d003      	beq.n	8008872 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800886a:	4b39      	ldr	r3, [pc, #228]	@ (8008950 <vTaskSwitchContext+0xf4>)
 800886c:	2201      	movs	r2, #1
 800886e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008870:	e067      	b.n	8008942 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 8008872:	4b37      	ldr	r3, [pc, #220]	@ (8008950 <vTaskSwitchContext+0xf4>)
 8008874:	2200      	movs	r2, #0
 8008876:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8008878:	4b36      	ldr	r3, [pc, #216]	@ (8008954 <vTaskSwitchContext+0xf8>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800887e:	61fb      	str	r3, [r7, #28]
 8008880:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8008884:	61bb      	str	r3, [r7, #24]
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	69ba      	ldr	r2, [r7, #24]
 800888c:	429a      	cmp	r2, r3
 800888e:	d111      	bne.n	80088b4 <vTaskSwitchContext+0x58>
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	3304      	adds	r3, #4
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	69ba      	ldr	r2, [r7, #24]
 8008898:	429a      	cmp	r2, r3
 800889a:	d10b      	bne.n	80088b4 <vTaskSwitchContext+0x58>
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	3308      	adds	r3, #8
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	69ba      	ldr	r2, [r7, #24]
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d105      	bne.n	80088b4 <vTaskSwitchContext+0x58>
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	330c      	adds	r3, #12
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	69ba      	ldr	r2, [r7, #24]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d008      	beq.n	80088c6 <vTaskSwitchContext+0x6a>
 80088b4:	4b27      	ldr	r3, [pc, #156]	@ (8008954 <vTaskSwitchContext+0xf8>)
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	4b26      	ldr	r3, [pc, #152]	@ (8008954 <vTaskSwitchContext+0xf8>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	3334      	adds	r3, #52	@ 0x34
 80088be:	4619      	mov	r1, r3
 80088c0:	4610      	mov	r0, r2
 80088c2:	f7f7 ffc7 	bl	8000854 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088c6:	4b24      	ldr	r3, [pc, #144]	@ (8008958 <vTaskSwitchContext+0xfc>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	fab3 f383 	clz	r3, r3
 80088d2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80088d4:	7afb      	ldrb	r3, [r7, #11]
 80088d6:	f1c3 031f 	rsb	r3, r3, #31
 80088da:	617b      	str	r3, [r7, #20]
 80088dc:	491f      	ldr	r1, [pc, #124]	@ (800895c <vTaskSwitchContext+0x100>)
 80088de:	697a      	ldr	r2, [r7, #20]
 80088e0:	4613      	mov	r3, r2
 80088e2:	009b      	lsls	r3, r3, #2
 80088e4:	4413      	add	r3, r2
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	440b      	add	r3, r1
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d10b      	bne.n	8008908 <vTaskSwitchContext+0xac>
	__asm volatile
 80088f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	607b      	str	r3, [r7, #4]
}
 8008902:	bf00      	nop
 8008904:	bf00      	nop
 8008906:	e7fd      	b.n	8008904 <vTaskSwitchContext+0xa8>
 8008908:	697a      	ldr	r2, [r7, #20]
 800890a:	4613      	mov	r3, r2
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	4413      	add	r3, r2
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	4a12      	ldr	r2, [pc, #72]	@ (800895c <vTaskSwitchContext+0x100>)
 8008914:	4413      	add	r3, r2
 8008916:	613b      	str	r3, [r7, #16]
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	685a      	ldr	r2, [r3, #4]
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	605a      	str	r2, [r3, #4]
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	685a      	ldr	r2, [r3, #4]
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	3308      	adds	r3, #8
 800892a:	429a      	cmp	r2, r3
 800892c:	d104      	bne.n	8008938 <vTaskSwitchContext+0xdc>
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	685a      	ldr	r2, [r3, #4]
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	605a      	str	r2, [r3, #4]
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	4a05      	ldr	r2, [pc, #20]	@ (8008954 <vTaskSwitchContext+0xf8>)
 8008940:	6013      	str	r3, [r2, #0]
}
 8008942:	bf00      	nop
 8008944:	3720      	adds	r7, #32
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	20025c30 	.word	0x20025c30
 8008950:	20025c24 	.word	0x20025c24
 8008954:	20025b50 	.word	0x20025b50
 8008958:	20025c18 	.word	0x20025c18
 800895c:	20025b54 	.word	0x20025b54

08008960 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10b      	bne.n	8008988 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008974:	f383 8811 	msr	BASEPRI, r3
 8008978:	f3bf 8f6f 	isb	sy
 800897c:	f3bf 8f4f 	dsb	sy
 8008980:	60fb      	str	r3, [r7, #12]
}
 8008982:	bf00      	nop
 8008984:	bf00      	nop
 8008986:	e7fd      	b.n	8008984 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008988:	4b07      	ldr	r3, [pc, #28]	@ (80089a8 <vTaskPlaceOnEventList+0x48>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	3318      	adds	r3, #24
 800898e:	4619      	mov	r1, r3
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f7ff fb25 	bl	8007fe0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008996:	2101      	movs	r1, #1
 8008998:	6838      	ldr	r0, [r7, #0]
 800899a:	f000 f9b7 	bl	8008d0c <prvAddCurrentTaskToDelayedList>
}
 800899e:	bf00      	nop
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	20025b50 	.word	0x20025b50

080089ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b086      	sub	sp, #24
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d10b      	bne.n	80089da <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80089c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c6:	f383 8811 	msr	BASEPRI, r3
 80089ca:	f3bf 8f6f 	isb	sy
 80089ce:	f3bf 8f4f 	dsb	sy
 80089d2:	60fb      	str	r3, [r7, #12]
}
 80089d4:	bf00      	nop
 80089d6:	bf00      	nop
 80089d8:	e7fd      	b.n	80089d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	3318      	adds	r3, #24
 80089de:	4618      	mov	r0, r3
 80089e0:	f7ff fb37 	bl	8008052 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089e4:	4b1d      	ldr	r3, [pc, #116]	@ (8008a5c <xTaskRemoveFromEventList+0xb0>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d11c      	bne.n	8008a26 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	3304      	adds	r3, #4
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7ff fb2e 	bl	8008052 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089fa:	2201      	movs	r2, #1
 80089fc:	409a      	lsls	r2, r3
 80089fe:	4b18      	ldr	r3, [pc, #96]	@ (8008a60 <xTaskRemoveFromEventList+0xb4>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4313      	orrs	r3, r2
 8008a04:	4a16      	ldr	r2, [pc, #88]	@ (8008a60 <xTaskRemoveFromEventList+0xb4>)
 8008a06:	6013      	str	r3, [r2, #0]
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	4413      	add	r3, r2
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	4a13      	ldr	r2, [pc, #76]	@ (8008a64 <xTaskRemoveFromEventList+0xb8>)
 8008a16:	441a      	add	r2, r3
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	3304      	adds	r3, #4
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	4610      	mov	r0, r2
 8008a20:	f7ff faba 	bl	8007f98 <vListInsertEnd>
 8008a24:	e005      	b.n	8008a32 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	3318      	adds	r3, #24
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	480e      	ldr	r0, [pc, #56]	@ (8008a68 <xTaskRemoveFromEventList+0xbc>)
 8008a2e:	f7ff fab3 	bl	8007f98 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a36:	4b0d      	ldr	r3, [pc, #52]	@ (8008a6c <xTaskRemoveFromEventList+0xc0>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d905      	bls.n	8008a4c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008a40:	2301      	movs	r3, #1
 8008a42:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008a44:	4b0a      	ldr	r3, [pc, #40]	@ (8008a70 <xTaskRemoveFromEventList+0xc4>)
 8008a46:	2201      	movs	r2, #1
 8008a48:	601a      	str	r2, [r3, #0]
 8008a4a:	e001      	b.n	8008a50 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008a50:	697b      	ldr	r3, [r7, #20]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3718      	adds	r7, #24
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	20025c30 	.word	0x20025c30
 8008a60:	20025c18 	.word	0x20025c18
 8008a64:	20025b54 	.word	0x20025b54
 8008a68:	20025be8 	.word	0x20025be8
 8008a6c:	20025b50 	.word	0x20025b50
 8008a70:	20025c24 	.word	0x20025c24

08008a74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008a7c:	4b06      	ldr	r3, [pc, #24]	@ (8008a98 <vTaskInternalSetTimeOutState+0x24>)
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008a84:	4b05      	ldr	r3, [pc, #20]	@ (8008a9c <vTaskInternalSetTimeOutState+0x28>)
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	605a      	str	r2, [r3, #4]
}
 8008a8c:	bf00      	nop
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr
 8008a98:	20025c28 	.word	0x20025c28
 8008a9c:	20025c14 	.word	0x20025c14

08008aa0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b088      	sub	sp, #32
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d10b      	bne.n	8008ac8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab4:	f383 8811 	msr	BASEPRI, r3
 8008ab8:	f3bf 8f6f 	isb	sy
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	613b      	str	r3, [r7, #16]
}
 8008ac2:	bf00      	nop
 8008ac4:	bf00      	nop
 8008ac6:	e7fd      	b.n	8008ac4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d10b      	bne.n	8008ae6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad2:	f383 8811 	msr	BASEPRI, r3
 8008ad6:	f3bf 8f6f 	isb	sy
 8008ada:	f3bf 8f4f 	dsb	sy
 8008ade:	60fb      	str	r3, [r7, #12]
}
 8008ae0:	bf00      	nop
 8008ae2:	bf00      	nop
 8008ae4:	e7fd      	b.n	8008ae2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008ae6:	f000 f98f 	bl	8008e08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008aea:	4b1d      	ldr	r3, [pc, #116]	@ (8008b60 <xTaskCheckForTimeOut+0xc0>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	69ba      	ldr	r2, [r7, #24]
 8008af6:	1ad3      	subs	r3, r2, r3
 8008af8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b02:	d102      	bne.n	8008b0a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008b04:	2300      	movs	r3, #0
 8008b06:	61fb      	str	r3, [r7, #28]
 8008b08:	e023      	b.n	8008b52 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	4b15      	ldr	r3, [pc, #84]	@ (8008b64 <xTaskCheckForTimeOut+0xc4>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d007      	beq.n	8008b26 <xTaskCheckForTimeOut+0x86>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	69ba      	ldr	r2, [r7, #24]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d302      	bcc.n	8008b26 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008b20:	2301      	movs	r3, #1
 8008b22:	61fb      	str	r3, [r7, #28]
 8008b24:	e015      	b.n	8008b52 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	697a      	ldr	r2, [r7, #20]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d20b      	bcs.n	8008b48 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	1ad2      	subs	r2, r2, r3
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f7ff ff99 	bl	8008a74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008b42:	2300      	movs	r3, #0
 8008b44:	61fb      	str	r3, [r7, #28]
 8008b46:	e004      	b.n	8008b52 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008b52:	f000 f98b 	bl	8008e6c <vPortExitCritical>

	return xReturn;
 8008b56:	69fb      	ldr	r3, [r7, #28]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3720      	adds	r7, #32
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	20025c14 	.word	0x20025c14
 8008b64:	20025c28 	.word	0x20025c28

08008b68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008b68:	b480      	push	{r7}
 8008b6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008b6c:	4b03      	ldr	r3, [pc, #12]	@ (8008b7c <vTaskMissedYield+0x14>)
 8008b6e:	2201      	movs	r2, #1
 8008b70:	601a      	str	r2, [r3, #0]
}
 8008b72:	bf00      	nop
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr
 8008b7c:	20025c24 	.word	0x20025c24

08008b80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b86:	4b0c      	ldr	r3, [pc, #48]	@ (8008bb8 <prvResetNextTaskUnblockTime+0x38>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d104      	bne.n	8008b9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008b90:	4b0a      	ldr	r3, [pc, #40]	@ (8008bbc <prvResetNextTaskUnblockTime+0x3c>)
 8008b92:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008b96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008b98:	e008      	b.n	8008bac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b9a:	4b07      	ldr	r3, [pc, #28]	@ (8008bb8 <prvResetNextTaskUnblockTime+0x38>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	68db      	ldr	r3, [r3, #12]
 8008ba2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	4a04      	ldr	r2, [pc, #16]	@ (8008bbc <prvResetNextTaskUnblockTime+0x3c>)
 8008baa:	6013      	str	r3, [r2, #0]
}
 8008bac:	bf00      	nop
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr
 8008bb8:	20025be0 	.word	0x20025be0
 8008bbc:	20025c2c 	.word	0x20025c2c

08008bc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8008bf4 <xTaskGetSchedulerState+0x34>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d102      	bne.n	8008bd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	607b      	str	r3, [r7, #4]
 8008bd2:	e008      	b.n	8008be6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bd4:	4b08      	ldr	r3, [pc, #32]	@ (8008bf8 <xTaskGetSchedulerState+0x38>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d102      	bne.n	8008be2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008bdc:	2302      	movs	r3, #2
 8008bde:	607b      	str	r3, [r7, #4]
 8008be0:	e001      	b.n	8008be6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008be2:	2300      	movs	r3, #0
 8008be4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008be6:	687b      	ldr	r3, [r7, #4]
	}
 8008be8:	4618      	mov	r0, r3
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr
 8008bf4:	20025c1c 	.word	0x20025c1c
 8008bf8:	20025c30 	.word	0x20025c30

08008bfc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b086      	sub	sp, #24
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d070      	beq.n	8008cf4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c12:	4b3b      	ldr	r3, [pc, #236]	@ (8008d00 <xTaskPriorityDisinherit+0x104>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	693a      	ldr	r2, [r7, #16]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d00b      	beq.n	8008c34 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c20:	f383 8811 	msr	BASEPRI, r3
 8008c24:	f3bf 8f6f 	isb	sy
 8008c28:	f3bf 8f4f 	dsb	sy
 8008c2c:	60fb      	str	r3, [r7, #12]
}
 8008c2e:	bf00      	nop
 8008c30:	bf00      	nop
 8008c32:	e7fd      	b.n	8008c30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d10b      	bne.n	8008c54 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c40:	f383 8811 	msr	BASEPRI, r3
 8008c44:	f3bf 8f6f 	isb	sy
 8008c48:	f3bf 8f4f 	dsb	sy
 8008c4c:	60bb      	str	r3, [r7, #8]
}
 8008c4e:	bf00      	nop
 8008c50:	bf00      	nop
 8008c52:	e7fd      	b.n	8008c50 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c58:	1e5a      	subs	r2, r3, #1
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d044      	beq.n	8008cf4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d140      	bne.n	8008cf4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	3304      	adds	r3, #4
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7ff f9eb 	bl	8008052 <uxListRemove>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d115      	bne.n	8008cae <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c86:	491f      	ldr	r1, [pc, #124]	@ (8008d04 <xTaskPriorityDisinherit+0x108>)
 8008c88:	4613      	mov	r3, r2
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	4413      	add	r3, r2
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	440b      	add	r3, r1
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d10a      	bne.n	8008cae <xTaskPriorityDisinherit+0xb2>
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca2:	43da      	mvns	r2, r3
 8008ca4:	4b18      	ldr	r3, [pc, #96]	@ (8008d08 <xTaskPriorityDisinherit+0x10c>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4013      	ands	r3, r2
 8008caa:	4a17      	ldr	r2, [pc, #92]	@ (8008d08 <xTaskPriorityDisinherit+0x10c>)
 8008cac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cba:	f1c3 0207 	rsb	r2, r3, #7
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	409a      	lsls	r2, r3
 8008cca:	4b0f      	ldr	r3, [pc, #60]	@ (8008d08 <xTaskPriorityDisinherit+0x10c>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8008d08 <xTaskPriorityDisinherit+0x10c>)
 8008cd2:	6013      	str	r3, [r2, #0]
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cd8:	4613      	mov	r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	4413      	add	r3, r2
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	4a08      	ldr	r2, [pc, #32]	@ (8008d04 <xTaskPriorityDisinherit+0x108>)
 8008ce2:	441a      	add	r2, r3
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	3304      	adds	r3, #4
 8008ce8:	4619      	mov	r1, r3
 8008cea:	4610      	mov	r0, r2
 8008cec:	f7ff f954 	bl	8007f98 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008cf4:	697b      	ldr	r3, [r7, #20]
	}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3718      	adds	r7, #24
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	20025b50 	.word	0x20025b50
 8008d04:	20025b54 	.word	0x20025b54
 8008d08:	20025c18 	.word	0x20025c18

08008d0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d16:	4b29      	ldr	r3, [pc, #164]	@ (8008dbc <prvAddCurrentTaskToDelayedList+0xb0>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d1c:	4b28      	ldr	r3, [pc, #160]	@ (8008dc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	3304      	adds	r3, #4
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7ff f995 	bl	8008052 <uxListRemove>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d10b      	bne.n	8008d46 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008d2e:	4b24      	ldr	r3, [pc, #144]	@ (8008dc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d34:	2201      	movs	r2, #1
 8008d36:	fa02 f303 	lsl.w	r3, r2, r3
 8008d3a:	43da      	mvns	r2, r3
 8008d3c:	4b21      	ldr	r3, [pc, #132]	@ (8008dc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4013      	ands	r3, r2
 8008d42:	4a20      	ldr	r2, [pc, #128]	@ (8008dc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008d44:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d4c:	d10a      	bne.n	8008d64 <prvAddCurrentTaskToDelayedList+0x58>
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d007      	beq.n	8008d64 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d54:	4b1a      	ldr	r3, [pc, #104]	@ (8008dc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	3304      	adds	r3, #4
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	481a      	ldr	r0, [pc, #104]	@ (8008dc8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008d5e:	f7ff f91b 	bl	8007f98 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d62:	e026      	b.n	8008db2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d64:	68fa      	ldr	r2, [r7, #12]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4413      	add	r3, r2
 8008d6a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d6c:	4b14      	ldr	r3, [pc, #80]	@ (8008dc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	68ba      	ldr	r2, [r7, #8]
 8008d72:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d74:	68ba      	ldr	r2, [r7, #8]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d209      	bcs.n	8008d90 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d7c:	4b13      	ldr	r3, [pc, #76]	@ (8008dcc <prvAddCurrentTaskToDelayedList+0xc0>)
 8008d7e:	681a      	ldr	r2, [r3, #0]
 8008d80:	4b0f      	ldr	r3, [pc, #60]	@ (8008dc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	3304      	adds	r3, #4
 8008d86:	4619      	mov	r1, r3
 8008d88:	4610      	mov	r0, r2
 8008d8a:	f7ff f929 	bl	8007fe0 <vListInsert>
}
 8008d8e:	e010      	b.n	8008db2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d90:	4b0f      	ldr	r3, [pc, #60]	@ (8008dd0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	4b0a      	ldr	r3, [pc, #40]	@ (8008dc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	3304      	adds	r3, #4
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	4610      	mov	r0, r2
 8008d9e:	f7ff f91f 	bl	8007fe0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008da2:	4b0c      	ldr	r3, [pc, #48]	@ (8008dd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	68ba      	ldr	r2, [r7, #8]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d202      	bcs.n	8008db2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008dac:	4a09      	ldr	r2, [pc, #36]	@ (8008dd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	6013      	str	r3, [r2, #0]
}
 8008db2:	bf00      	nop
 8008db4:	3710      	adds	r7, #16
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
 8008dba:	bf00      	nop
 8008dbc:	20025c14 	.word	0x20025c14
 8008dc0:	20025b50 	.word	0x20025b50
 8008dc4:	20025c18 	.word	0x20025c18
 8008dc8:	20025bfc 	.word	0x20025bfc
 8008dcc:	20025be4 	.word	0x20025be4
 8008dd0:	20025be0 	.word	0x20025be0
 8008dd4:	20025c2c 	.word	0x20025c2c
	...

08008de0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008de0:	4b07      	ldr	r3, [pc, #28]	@ (8008e00 <pxCurrentTCBConst2>)
 8008de2:	6819      	ldr	r1, [r3, #0]
 8008de4:	6808      	ldr	r0, [r1, #0]
 8008de6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dea:	f380 8809 	msr	PSP, r0
 8008dee:	f3bf 8f6f 	isb	sy
 8008df2:	f04f 0000 	mov.w	r0, #0
 8008df6:	f380 8811 	msr	BASEPRI, r0
 8008dfa:	4770      	bx	lr
 8008dfc:	f3af 8000 	nop.w

08008e00 <pxCurrentTCBConst2>:
 8008e00:	20025b50 	.word	0x20025b50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008e04:	bf00      	nop
 8008e06:	bf00      	nop

08008e08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e12:	f383 8811 	msr	BASEPRI, r3
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	607b      	str	r3, [r7, #4]
}
 8008e20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008e22:	4b10      	ldr	r3, [pc, #64]	@ (8008e64 <vPortEnterCritical+0x5c>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	3301      	adds	r3, #1
 8008e28:	4a0e      	ldr	r2, [pc, #56]	@ (8008e64 <vPortEnterCritical+0x5c>)
 8008e2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8008e64 <vPortEnterCritical+0x5c>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d110      	bne.n	8008e56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008e34:	4b0c      	ldr	r3, [pc, #48]	@ (8008e68 <vPortEnterCritical+0x60>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d00b      	beq.n	8008e56 <vPortEnterCritical+0x4e>
	__asm volatile
 8008e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e42:	f383 8811 	msr	BASEPRI, r3
 8008e46:	f3bf 8f6f 	isb	sy
 8008e4a:	f3bf 8f4f 	dsb	sy
 8008e4e:	603b      	str	r3, [r7, #0]
}
 8008e50:	bf00      	nop
 8008e52:	bf00      	nop
 8008e54:	e7fd      	b.n	8008e52 <vPortEnterCritical+0x4a>
	}
}
 8008e56:	bf00      	nop
 8008e58:	370c      	adds	r7, #12
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	20000010 	.word	0x20000010
 8008e68:	e000ed04 	.word	0xe000ed04

08008e6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008e72:	4b12      	ldr	r3, [pc, #72]	@ (8008ebc <vPortExitCritical+0x50>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10b      	bne.n	8008e92 <vPortExitCritical+0x26>
	__asm volatile
 8008e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e7e:	f383 8811 	msr	BASEPRI, r3
 8008e82:	f3bf 8f6f 	isb	sy
 8008e86:	f3bf 8f4f 	dsb	sy
 8008e8a:	607b      	str	r3, [r7, #4]
}
 8008e8c:	bf00      	nop
 8008e8e:	bf00      	nop
 8008e90:	e7fd      	b.n	8008e8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008e92:	4b0a      	ldr	r3, [pc, #40]	@ (8008ebc <vPortExitCritical+0x50>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	3b01      	subs	r3, #1
 8008e98:	4a08      	ldr	r2, [pc, #32]	@ (8008ebc <vPortExitCritical+0x50>)
 8008e9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008e9c:	4b07      	ldr	r3, [pc, #28]	@ (8008ebc <vPortExitCritical+0x50>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d105      	bne.n	8008eb0 <vPortExitCritical+0x44>
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	f383 8811 	msr	BASEPRI, r3
}
 8008eae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008eb0:	bf00      	nop
 8008eb2:	370c      	adds	r7, #12
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr
 8008ebc:	20000010 	.word	0x20000010

08008ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ec0:	f3ef 8009 	mrs	r0, PSP
 8008ec4:	f3bf 8f6f 	isb	sy
 8008ec8:	4b15      	ldr	r3, [pc, #84]	@ (8008f20 <pxCurrentTCBConst>)
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	f01e 0f10 	tst.w	lr, #16
 8008ed0:	bf08      	it	eq
 8008ed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eda:	6010      	str	r0, [r2, #0]
 8008edc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ee0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008ee4:	f380 8811 	msr	BASEPRI, r0
 8008ee8:	f3bf 8f4f 	dsb	sy
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	f7ff fcb4 	bl	800885c <vTaskSwitchContext>
 8008ef4:	f04f 0000 	mov.w	r0, #0
 8008ef8:	f380 8811 	msr	BASEPRI, r0
 8008efc:	bc09      	pop	{r0, r3}
 8008efe:	6819      	ldr	r1, [r3, #0]
 8008f00:	6808      	ldr	r0, [r1, #0]
 8008f02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f06:	f01e 0f10 	tst.w	lr, #16
 8008f0a:	bf08      	it	eq
 8008f0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008f10:	f380 8809 	msr	PSP, r0
 8008f14:	f3bf 8f6f 	isb	sy
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	f3af 8000 	nop.w

08008f20 <pxCurrentTCBConst>:
 8008f20:	20025b50 	.word	0x20025b50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008f24:	bf00      	nop
 8008f26:	bf00      	nop

08008f28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	607b      	str	r3, [r7, #4]
}
 8008f40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008f42:	f7ff fbd1 	bl	80086e8 <xTaskIncrementTick>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d003      	beq.n	8008f54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008f4c:	4b06      	ldr	r3, [pc, #24]	@ (8008f68 <SysTick_Handler+0x40>)
 8008f4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f52:	601a      	str	r2, [r3, #0]
 8008f54:	2300      	movs	r3, #0
 8008f56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	f383 8811 	msr	BASEPRI, r3
}
 8008f5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008f60:	bf00      	nop
 8008f62:	3708      	adds	r7, #8
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	e000ed04 	.word	0xe000ed04

08008f6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b085      	sub	sp, #20
 8008f70:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008f72:	f3ef 8305 	mrs	r3, IPSR
 8008f76:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2b0f      	cmp	r3, #15
 8008f7c:	d915      	bls.n	8008faa <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008f7e:	4a18      	ldr	r2, [pc, #96]	@ (8008fe0 <vPortValidateInterruptPriority+0x74>)
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	4413      	add	r3, r2
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008f88:	4b16      	ldr	r3, [pc, #88]	@ (8008fe4 <vPortValidateInterruptPriority+0x78>)
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	7afa      	ldrb	r2, [r7, #11]
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d20b      	bcs.n	8008faa <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f96:	f383 8811 	msr	BASEPRI, r3
 8008f9a:	f3bf 8f6f 	isb	sy
 8008f9e:	f3bf 8f4f 	dsb	sy
 8008fa2:	607b      	str	r3, [r7, #4]
}
 8008fa4:	bf00      	nop
 8008fa6:	bf00      	nop
 8008fa8:	e7fd      	b.n	8008fa6 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008faa:	4b0f      	ldr	r3, [pc, #60]	@ (8008fe8 <vPortValidateInterruptPriority+0x7c>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8008fec <vPortValidateInterruptPriority+0x80>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d90b      	bls.n	8008fd2 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fbe:	f383 8811 	msr	BASEPRI, r3
 8008fc2:	f3bf 8f6f 	isb	sy
 8008fc6:	f3bf 8f4f 	dsb	sy
 8008fca:	603b      	str	r3, [r7, #0]
}
 8008fcc:	bf00      	nop
 8008fce:	bf00      	nop
 8008fd0:	e7fd      	b.n	8008fce <vPortValidateInterruptPriority+0x62>
	}
 8008fd2:	bf00      	nop
 8008fd4:	3714      	adds	r7, #20
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop
 8008fe0:	e000e3f0 	.word	0xe000e3f0
 8008fe4:	20025c34 	.word	0x20025c34
 8008fe8:	e000ed0c 	.word	0xe000ed0c
 8008fec:	20025c38 	.word	0x20025c38

08008ff0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7fe fe9c 	bl	8007d3c <USBH_LL_IncTimer>
}
 8009004:	bf00      	nop
 8009006:	3708      	adds	r7, #8
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800901a:	4618      	mov	r0, r3
 800901c:	f7fe fee0 	bl	8007de0 <USBH_LL_Connect>
}
 8009020:	bf00      	nop
 8009022:	3708      	adds	r7, #8
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009036:	4618      	mov	r0, r3
 8009038:	f7fe fef5 	bl	8007e26 <USBH_LL_Disconnect>
}
 800903c:	bf00      	nop
 800903e:	3708      	adds	r7, #8
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	460b      	mov	r3, r1
 800904e:	70fb      	strb	r3, [r7, #3]
 8009050:	4613      	mov	r3, r2
 8009052:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800905a:	4618      	mov	r0, r3
 800905c:	f7fe ff15 	bl	8007e8a <USBH_LL_NotifyURBChange>
#endif
}
 8009060:	bf00      	nop
 8009062:	3708      	adds	r7, #8
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009076:	4618      	mov	r0, r3
 8009078:	f7fe fe8a 	bl	8007d90 <USBH_LL_PortEnabled>
}
 800907c:	bf00      	nop
 800907e:	3708      	adds	r7, #8
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009092:	4618      	mov	r0, r3
 8009094:	f7fe fe96 	bl	8007dc4 <USBH_LL_PortDisabled>
}
 8009098:	bf00      	nop
 800909a:	3708      	adds	r7, #8
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090a8:	2300      	movs	r3, #0
 80090aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090ac:	2300      	movs	r3, #0
 80090ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7f9 feb5 	bl	8002e26 <HAL_HCD_Stop>
 80090bc:	4603      	mov	r3, r0
 80090be:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80090c0:	7bfb      	ldrb	r3, [r7, #15]
 80090c2:	4618      	mov	r0, r3
 80090c4:	f000 f808 	bl	80090d8 <USBH_Get_USB_Status>
 80090c8:	4603      	mov	r3, r0
 80090ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3710      	adds	r7, #16
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
	...

080090d8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80090d8:	b480      	push	{r7}
 80090da:	b085      	sub	sp, #20
 80090dc:	af00      	add	r7, sp, #0
 80090de:	4603      	mov	r3, r0
 80090e0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090e2:	2300      	movs	r3, #0
 80090e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80090e6:	79fb      	ldrb	r3, [r7, #7]
 80090e8:	2b03      	cmp	r3, #3
 80090ea:	d817      	bhi.n	800911c <USBH_Get_USB_Status+0x44>
 80090ec:	a201      	add	r2, pc, #4	@ (adr r2, 80090f4 <USBH_Get_USB_Status+0x1c>)
 80090ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f2:	bf00      	nop
 80090f4:	08009105 	.word	0x08009105
 80090f8:	0800910b 	.word	0x0800910b
 80090fc:	08009111 	.word	0x08009111
 8009100:	08009117 	.word	0x08009117
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009104:	2300      	movs	r3, #0
 8009106:	73fb      	strb	r3, [r7, #15]
    break;
 8009108:	e00b      	b.n	8009122 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800910a:	2302      	movs	r3, #2
 800910c:	73fb      	strb	r3, [r7, #15]
    break;
 800910e:	e008      	b.n	8009122 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009110:	2301      	movs	r3, #1
 8009112:	73fb      	strb	r3, [r7, #15]
    break;
 8009114:	e005      	b.n	8009122 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009116:	2302      	movs	r3, #2
 8009118:	73fb      	strb	r3, [r7, #15]
    break;
 800911a:	e002      	b.n	8009122 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800911c:	2302      	movs	r3, #2
 800911e:	73fb      	strb	r3, [r7, #15]
    break;
 8009120:	bf00      	nop
  }
  return usb_status;
 8009122:	7bfb      	ldrb	r3, [r7, #15]
}
 8009124:	4618      	mov	r0, r3
 8009126:	3714      	adds	r7, #20
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <memset>:
 8009130:	4402      	add	r2, r0
 8009132:	4603      	mov	r3, r0
 8009134:	4293      	cmp	r3, r2
 8009136:	d100      	bne.n	800913a <memset+0xa>
 8009138:	4770      	bx	lr
 800913a:	f803 1b01 	strb.w	r1, [r3], #1
 800913e:	e7f9      	b.n	8009134 <memset+0x4>

08009140 <__libc_init_array>:
 8009140:	b570      	push	{r4, r5, r6, lr}
 8009142:	4d0d      	ldr	r5, [pc, #52]	@ (8009178 <__libc_init_array+0x38>)
 8009144:	4c0d      	ldr	r4, [pc, #52]	@ (800917c <__libc_init_array+0x3c>)
 8009146:	1b64      	subs	r4, r4, r5
 8009148:	10a4      	asrs	r4, r4, #2
 800914a:	2600      	movs	r6, #0
 800914c:	42a6      	cmp	r6, r4
 800914e:	d109      	bne.n	8009164 <__libc_init_array+0x24>
 8009150:	4d0b      	ldr	r5, [pc, #44]	@ (8009180 <__libc_init_array+0x40>)
 8009152:	4c0c      	ldr	r4, [pc, #48]	@ (8009184 <__libc_init_array+0x44>)
 8009154:	f000 f826 	bl	80091a4 <_init>
 8009158:	1b64      	subs	r4, r4, r5
 800915a:	10a4      	asrs	r4, r4, #2
 800915c:	2600      	movs	r6, #0
 800915e:	42a6      	cmp	r6, r4
 8009160:	d105      	bne.n	800916e <__libc_init_array+0x2e>
 8009162:	bd70      	pop	{r4, r5, r6, pc}
 8009164:	f855 3b04 	ldr.w	r3, [r5], #4
 8009168:	4798      	blx	r3
 800916a:	3601      	adds	r6, #1
 800916c:	e7ee      	b.n	800914c <__libc_init_array+0xc>
 800916e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009172:	4798      	blx	r3
 8009174:	3601      	adds	r6, #1
 8009176:	e7f2      	b.n	800915e <__libc_init_array+0x1e>
 8009178:	08009250 	.word	0x08009250
 800917c:	08009250 	.word	0x08009250
 8009180:	08009250 	.word	0x08009250
 8009184:	08009254 	.word	0x08009254

08009188 <memcpy>:
 8009188:	440a      	add	r2, r1
 800918a:	4291      	cmp	r1, r2
 800918c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009190:	d100      	bne.n	8009194 <memcpy+0xc>
 8009192:	4770      	bx	lr
 8009194:	b510      	push	{r4, lr}
 8009196:	f811 4b01 	ldrb.w	r4, [r1], #1
 800919a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800919e:	4291      	cmp	r1, r2
 80091a0:	d1f9      	bne.n	8009196 <memcpy+0xe>
 80091a2:	bd10      	pop	{r4, pc}

080091a4 <_init>:
 80091a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a6:	bf00      	nop
 80091a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091aa:	bc08      	pop	{r3}
 80091ac:	469e      	mov	lr, r3
 80091ae:	4770      	bx	lr

080091b0 <_fini>:
 80091b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b2:	bf00      	nop
 80091b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091b6:	bc08      	pop	{r3}
 80091b8:	469e      	mov	lr, r3
 80091ba:	4770      	bx	lr
