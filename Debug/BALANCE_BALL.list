
BALANCE_BALL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d0c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08007ebc  08007ebc  00008ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ed4  08007ed4  00009010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007ed4  08007ed4  00008ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007edc  08007edc  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007edc  08007edc  00008edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ee0  08007ee0  00008ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08007ee4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009010  2**0
                  CONTENTS
 10 .bss          00000798  20000010  20000010  00009010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200007a8  200007a8  00009010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 13 .debug_info   000269db  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005c84  00000000  00000000  0002fa1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002148  00000000  00000000  000356a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000019b8  00000000  00000000  000377e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a1da  00000000  00000000  000391a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028ee8  00000000  00000000  0006337a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f414a  00000000  00000000  0008c262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001803ac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008c3c  00000000  00000000  001803f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0018902c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007ea4 	.word	0x08007ea4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08007ea4 	.word	0x08007ea4

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000204:	f000 b988 	b.w	8000518 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	468e      	mov	lr, r1
 8000228:	4604      	mov	r4, r0
 800022a:	4688      	mov	r8, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d962      	bls.n	80002fc <__udivmoddi4+0xdc>
 8000236:	fab2 f682 	clz	r6, r2
 800023a:	b14e      	cbz	r6, 8000250 <__udivmoddi4+0x30>
 800023c:	f1c6 0320 	rsb	r3, r6, #32
 8000240:	fa01 f806 	lsl.w	r8, r1, r6
 8000244:	fa20 f303 	lsr.w	r3, r0, r3
 8000248:	40b7      	lsls	r7, r6
 800024a:	ea43 0808 	orr.w	r8, r3, r8
 800024e:	40b4      	lsls	r4, r6
 8000250:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000254:	fa1f fc87 	uxth.w	ip, r7
 8000258:	fbb8 f1fe 	udiv	r1, r8, lr
 800025c:	0c23      	lsrs	r3, r4, #16
 800025e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000262:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000266:	fb01 f20c 	mul.w	r2, r1, ip
 800026a:	429a      	cmp	r2, r3
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0x62>
 800026e:	18fb      	adds	r3, r7, r3
 8000270:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000274:	f080 80ea 	bcs.w	800044c <__udivmoddi4+0x22c>
 8000278:	429a      	cmp	r2, r3
 800027a:	f240 80e7 	bls.w	800044c <__udivmoddi4+0x22c>
 800027e:	3902      	subs	r1, #2
 8000280:	443b      	add	r3, r7
 8000282:	1a9a      	subs	r2, r3, r2
 8000284:	b2a3      	uxth	r3, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000292:	fb00 fc0c 	mul.w	ip, r0, ip
 8000296:	459c      	cmp	ip, r3
 8000298:	d909      	bls.n	80002ae <__udivmoddi4+0x8e>
 800029a:	18fb      	adds	r3, r7, r3
 800029c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002a0:	f080 80d6 	bcs.w	8000450 <__udivmoddi4+0x230>
 80002a4:	459c      	cmp	ip, r3
 80002a6:	f240 80d3 	bls.w	8000450 <__udivmoddi4+0x230>
 80002aa:	443b      	add	r3, r7
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b2:	eba3 030c 	sub.w	r3, r3, ip
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40f3      	lsrs	r3, r6
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xb6>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb0>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x14c>
 80002de:	4573      	cmp	r3, lr
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xc8>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 8105 	bhi.w	80004f2 <__udivmoddi4+0x2d2>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4690      	mov	r8, r2
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e5      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002f6:	e9c5 4800 	strd	r4, r8, [r5]
 80002fa:	e7e2      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f000 8090 	beq.w	8000422 <__udivmoddi4+0x202>
 8000302:	fab2 f682 	clz	r6, r2
 8000306:	2e00      	cmp	r6, #0
 8000308:	f040 80a4 	bne.w	8000454 <__udivmoddi4+0x234>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	0c03      	lsrs	r3, r0, #16
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	b280      	uxth	r0, r0
 8000316:	b2bc      	uxth	r4, r7
 8000318:	2101      	movs	r1, #1
 800031a:	fbb2 fcfe 	udiv	ip, r2, lr
 800031e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000326:	fb04 f20c 	mul.w	r2, r4, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d907      	bls.n	800033e <__udivmoddi4+0x11e>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0x11c>
 8000336:	429a      	cmp	r2, r3
 8000338:	f200 80e0 	bhi.w	80004fc <__udivmoddi4+0x2dc>
 800033c:	46c4      	mov	ip, r8
 800033e:	1a9b      	subs	r3, r3, r2
 8000340:	fbb3 f2fe 	udiv	r2, r3, lr
 8000344:	fb0e 3312 	mls	r3, lr, r2, r3
 8000348:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800034c:	fb02 f404 	mul.w	r4, r2, r4
 8000350:	429c      	cmp	r4, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x144>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x142>
 800035c:	429c      	cmp	r4, r3
 800035e:	f200 80ca 	bhi.w	80004f6 <__udivmoddi4+0x2d6>
 8000362:	4602      	mov	r2, r0
 8000364:	1b1b      	subs	r3, r3, r4
 8000366:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x98>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa0e f401 	lsl.w	r4, lr, r1
 800037c:	fa20 f306 	lsr.w	r3, r0, r6
 8000380:	fa2e fe06 	lsr.w	lr, lr, r6
 8000384:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000388:	4323      	orrs	r3, r4
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	fa1f fc87 	uxth.w	ip, r7
 8000392:	fbbe f0f9 	udiv	r0, lr, r9
 8000396:	0c1c      	lsrs	r4, r3, #16
 8000398:	fb09 ee10 	mls	lr, r9, r0, lr
 800039c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a4:	45a6      	cmp	lr, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1a0>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003b2:	f080 809c 	bcs.w	80004ee <__udivmoddi4+0x2ce>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f240 8099 	bls.w	80004ee <__udivmoddi4+0x2ce>
 80003bc:	3802      	subs	r0, #2
 80003be:	443c      	add	r4, r7
 80003c0:	eba4 040e 	sub.w	r4, r4, lr
 80003c4:	fa1f fe83 	uxth.w	lr, r3
 80003c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003cc:	fb09 4413 	mls	r4, r9, r3, r4
 80003d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d8:	45a4      	cmp	ip, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1ce>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003e2:	f080 8082 	bcs.w	80004ea <__udivmoddi4+0x2ca>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d97f      	bls.n	80004ea <__udivmoddi4+0x2ca>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003fa:	4564      	cmp	r4, ip
 80003fc:	4673      	mov	r3, lr
 80003fe:	46e1      	mov	r9, ip
 8000400:	d362      	bcc.n	80004c8 <__udivmoddi4+0x2a8>
 8000402:	d05f      	beq.n	80004c4 <__udivmoddi4+0x2a4>
 8000404:	b15d      	cbz	r5, 800041e <__udivmoddi4+0x1fe>
 8000406:	ebb8 0203 	subs.w	r2, r8, r3
 800040a:	eb64 0409 	sbc.w	r4, r4, r9
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	fa22 f301 	lsr.w	r3, r2, r1
 8000416:	431e      	orrs	r6, r3
 8000418:	40cc      	lsrs	r4, r1
 800041a:	e9c5 6400 	strd	r6, r4, [r5]
 800041e:	2100      	movs	r1, #0
 8000420:	e74f      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000422:	fbb1 fcf2 	udiv	ip, r1, r2
 8000426:	0c01      	lsrs	r1, r0, #16
 8000428:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800042c:	b280      	uxth	r0, r0
 800042e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000432:	463b      	mov	r3, r7
 8000434:	4638      	mov	r0, r7
 8000436:	463c      	mov	r4, r7
 8000438:	46b8      	mov	r8, r7
 800043a:	46be      	mov	lr, r7
 800043c:	2620      	movs	r6, #32
 800043e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000442:	eba2 0208 	sub.w	r2, r2, r8
 8000446:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800044a:	e766      	b.n	800031a <__udivmoddi4+0xfa>
 800044c:	4601      	mov	r1, r0
 800044e:	e718      	b.n	8000282 <__udivmoddi4+0x62>
 8000450:	4610      	mov	r0, r2
 8000452:	e72c      	b.n	80002ae <__udivmoddi4+0x8e>
 8000454:	f1c6 0220 	rsb	r2, r6, #32
 8000458:	fa2e f302 	lsr.w	r3, lr, r2
 800045c:	40b7      	lsls	r7, r6
 800045e:	40b1      	lsls	r1, r6
 8000460:	fa20 f202 	lsr.w	r2, r0, r2
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	430a      	orrs	r2, r1
 800046a:	fbb3 f8fe 	udiv	r8, r3, lr
 800046e:	b2bc      	uxth	r4, r7
 8000470:	fb0e 3318 	mls	r3, lr, r8, r3
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb08 f904 	mul.w	r9, r8, r4
 800047e:	40b0      	lsls	r0, r6
 8000480:	4589      	cmp	r9, r1
 8000482:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000486:	b280      	uxth	r0, r0
 8000488:	d93e      	bls.n	8000508 <__udivmoddi4+0x2e8>
 800048a:	1879      	adds	r1, r7, r1
 800048c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x276>
 8000492:	4589      	cmp	r9, r1
 8000494:	d81f      	bhi.n	80004d6 <__udivmoddi4+0x2b6>
 8000496:	eba1 0109 	sub.w	r1, r1, r9
 800049a:	fbb1 f9fe 	udiv	r9, r1, lr
 800049e:	fb09 f804 	mul.w	r8, r9, r4
 80004a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a6:	b292      	uxth	r2, r2
 80004a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ac:	4542      	cmp	r2, r8
 80004ae:	d229      	bcs.n	8000504 <__udivmoddi4+0x2e4>
 80004b0:	18ba      	adds	r2, r7, r2
 80004b2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004b6:	d2c4      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d2c2      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004bc:	f1a9 0102 	sub.w	r1, r9, #2
 80004c0:	443a      	add	r2, r7
 80004c2:	e7be      	b.n	8000442 <__udivmoddi4+0x222>
 80004c4:	45f0      	cmp	r8, lr
 80004c6:	d29d      	bcs.n	8000404 <__udivmoddi4+0x1e4>
 80004c8:	ebbe 0302 	subs.w	r3, lr, r2
 80004cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004d0:	3801      	subs	r0, #1
 80004d2:	46e1      	mov	r9, ip
 80004d4:	e796      	b.n	8000404 <__udivmoddi4+0x1e4>
 80004d6:	eba7 0909 	sub.w	r9, r7, r9
 80004da:	4449      	add	r1, r9
 80004dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e4:	fb09 f804 	mul.w	r8, r9, r4
 80004e8:	e7db      	b.n	80004a2 <__udivmoddi4+0x282>
 80004ea:	4673      	mov	r3, lr
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1ce>
 80004ee:	4650      	mov	r0, sl
 80004f0:	e766      	b.n	80003c0 <__udivmoddi4+0x1a0>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e6fd      	b.n	80002f2 <__udivmoddi4+0xd2>
 80004f6:	443b      	add	r3, r7
 80004f8:	3a02      	subs	r2, #2
 80004fa:	e733      	b.n	8000364 <__udivmoddi4+0x144>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	443b      	add	r3, r7
 8000502:	e71c      	b.n	800033e <__udivmoddi4+0x11e>
 8000504:	4649      	mov	r1, r9
 8000506:	e79c      	b.n	8000442 <__udivmoddi4+0x222>
 8000508:	eba1 0109 	sub.w	r1, r1, r9
 800050c:	46c4      	mov	ip, r8
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fb09 f804 	mul.w	r8, r9, r4
 8000516:	e7c4      	b.n	80004a2 <__udivmoddi4+0x282>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000520:	4b06      	ldr	r3, [pc, #24]	@ (800053c <MX_CRC_Init+0x20>)
 8000522:	4a07      	ldr	r2, [pc, #28]	@ (8000540 <MX_CRC_Init+0x24>)
 8000524:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000526:	4805      	ldr	r0, [pc, #20]	@ (800053c <MX_CRC_Init+0x20>)
 8000528:	f001 f974 	bl	8001814 <HAL_CRC_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000532:	f000 fd97 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	2000002c 	.word	0x2000002c
 8000540:	40023000 	.word	0x40023000

08000544 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a0b      	ldr	r2, [pc, #44]	@ (8000580 <HAL_CRC_MspInit+0x3c>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d10d      	bne.n	8000572 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	4b0a      	ldr	r3, [pc, #40]	@ (8000584 <HAL_CRC_MspInit+0x40>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055e:	4a09      	ldr	r2, [pc, #36]	@ (8000584 <HAL_CRC_MspInit+0x40>)
 8000560:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000564:	6313      	str	r3, [r2, #48]	@ 0x30
 8000566:	4b07      	ldr	r3, [pc, #28]	@ (8000584 <HAL_CRC_MspInit+0x40>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000572:	bf00      	nop
 8000574:	3714      	adds	r7, #20
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40023000 	.word	0x40023000
 8000584:	40023800 	.word	0x40023800

08000588 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800058c:	4b15      	ldr	r3, [pc, #84]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 800058e:	4a16      	ldr	r2, [pc, #88]	@ (80005e8 <MX_DMA2D_Init+0x60>)
 8000590:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000592:	4b14      	ldr	r3, [pc, #80]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 8000594:	2200      	movs	r2, #0
 8000596:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000598:	4b12      	ldr	r3, [pc, #72]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800059e:	4b11      	ldr	r3, [pc, #68]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80005a4:	4b0f      	ldr	r3, [pc, #60]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80005aa:	4b0e      	ldr	r3, [pc, #56]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80005b0:	4b0c      	ldr	r3, [pc, #48]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80005b6:	4b0b      	ldr	r3, [pc, #44]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80005bc:	4809      	ldr	r0, [pc, #36]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 80005be:	f001 f945 	bl	800184c <HAL_DMA2D_Init>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80005c8:	f000 fd4c 	bl	8001064 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80005cc:	2101      	movs	r1, #1
 80005ce:	4805      	ldr	r0, [pc, #20]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 80005d0:	f001 fa96 	bl	8001b00 <HAL_DMA2D_ConfigLayer>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80005da:	f000 fd43 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000034 	.word	0x20000034
 80005e8:	4002b000 	.word	0x4002b000

080005ec <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a0e      	ldr	r2, [pc, #56]	@ (8000634 <HAL_DMA2D_MspInit+0x48>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d115      	bne.n	800062a <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	4b0d      	ldr	r3, [pc, #52]	@ (8000638 <HAL_DMA2D_MspInit+0x4c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	4a0c      	ldr	r2, [pc, #48]	@ (8000638 <HAL_DMA2D_MspInit+0x4c>)
 8000608:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800060c:	6313      	str	r3, [r2, #48]	@ 0x30
 800060e:	4b0a      	ldr	r3, [pc, #40]	@ (8000638 <HAL_DMA2D_MspInit+0x4c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2105      	movs	r1, #5
 800061e:	205a      	movs	r0, #90	@ 0x5a
 8000620:	f001 f8ce 	bl	80017c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000624:	205a      	movs	r0, #90	@ 0x5a
 8000626:	f001 f8e7 	bl	80017f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	4002b000 	.word	0x4002b000
 8000638:	40023800 	.word	0x40023800

0800063c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
 8000650:	615a      	str	r2, [r3, #20]
 8000652:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000654:	4b1f      	ldr	r3, [pc, #124]	@ (80006d4 <MX_FMC_Init+0x98>)
 8000656:	4a20      	ldr	r2, [pc, #128]	@ (80006d8 <MX_FMC_Init+0x9c>)
 8000658:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800065a:	4b1e      	ldr	r3, [pc, #120]	@ (80006d4 <MX_FMC_Init+0x98>)
 800065c:	2201      	movs	r2, #1
 800065e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000660:	4b1c      	ldr	r3, [pc, #112]	@ (80006d4 <MX_FMC_Init+0x98>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000666:	4b1b      	ldr	r3, [pc, #108]	@ (80006d4 <MX_FMC_Init+0x98>)
 8000668:	2204      	movs	r2, #4
 800066a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800066c:	4b19      	ldr	r3, [pc, #100]	@ (80006d4 <MX_FMC_Init+0x98>)
 800066e:	2210      	movs	r2, #16
 8000670:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000672:	4b18      	ldr	r3, [pc, #96]	@ (80006d4 <MX_FMC_Init+0x98>)
 8000674:	2240      	movs	r2, #64	@ 0x40
 8000676:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000678:	4b16      	ldr	r3, [pc, #88]	@ (80006d4 <MX_FMC_Init+0x98>)
 800067a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800067e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000680:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <MX_FMC_Init+0x98>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000686:	4b13      	ldr	r3, [pc, #76]	@ (80006d4 <MX_FMC_Init+0x98>)
 8000688:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800068c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800068e:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <MX_FMC_Init+0x98>)
 8000690:	2200      	movs	r2, #0
 8000692:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000694:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <MX_FMC_Init+0x98>)
 8000696:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800069a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800069c:	2302      	movs	r3, #2
 800069e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80006a0:	2307      	movs	r3, #7
 80006a2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80006a4:	2304      	movs	r3, #4
 80006a6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80006a8:	2307      	movs	r3, #7
 80006aa:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80006ac:	2303      	movs	r3, #3
 80006ae:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	4619      	mov	r1, r3
 80006bc:	4805      	ldr	r0, [pc, #20]	@ (80006d4 <MX_FMC_Init+0x98>)
 80006be:	f004 fde9 	bl	8005294 <HAL_SDRAM_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80006c8:	f000 fccc 	bl	8001064 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80006cc:	bf00      	nop
 80006ce:	3720      	adds	r7, #32
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000074 	.word	0x20000074
 80006d8:	a0000140 	.word	0xa0000140

080006dc <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80006f0:	4b3b      	ldr	r3, [pc, #236]	@ (80007e0 <HAL_FMC_MspInit+0x104>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d16f      	bne.n	80007d8 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80006f8:	4b39      	ldr	r3, [pc, #228]	@ (80007e0 <HAL_FMC_MspInit+0x104>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	4b38      	ldr	r3, [pc, #224]	@ (80007e4 <HAL_FMC_MspInit+0x108>)
 8000704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000706:	4a37      	ldr	r2, [pc, #220]	@ (80007e4 <HAL_FMC_MspInit+0x108>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6393      	str	r3, [r2, #56]	@ 0x38
 800070e:	4b35      	ldr	r3, [pc, #212]	@ (80007e4 <HAL_FMC_MspInit+0x108>)
 8000710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800071a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800071e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000720:	2302      	movs	r3, #2
 8000722:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000728:	2303      	movs	r3, #3
 800072a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800072c:	230c      	movs	r3, #12
 800072e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	4619      	mov	r1, r3
 8000734:	482c      	ldr	r0, [pc, #176]	@ (80007e8 <HAL_FMC_MspInit+0x10c>)
 8000736:	f001 fa75 	bl	8001c24 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800073a:	2301      	movs	r3, #1
 800073c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073e:	2302      	movs	r3, #2
 8000740:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000746:	2303      	movs	r3, #3
 8000748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800074a:	230c      	movs	r3, #12
 800074c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	4619      	mov	r1, r3
 8000752:	4826      	ldr	r0, [pc, #152]	@ (80007ec <HAL_FMC_MspInit+0x110>)
 8000754:	f001 fa66 	bl	8001c24 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000758:	f248 1333 	movw	r3, #33075	@ 0x8133
 800075c:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075e:	2302      	movs	r3, #2
 8000760:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000766:	2303      	movs	r3, #3
 8000768:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800076a:	230c      	movs	r3, #12
 800076c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	4619      	mov	r1, r3
 8000772:	481f      	ldr	r0, [pc, #124]	@ (80007f0 <HAL_FMC_MspInit+0x114>)
 8000774:	f001 fa56 	bl	8001c24 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000778:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800077c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077e:	2302      	movs	r3, #2
 8000780:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000786:	2303      	movs	r3, #3
 8000788:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800078a:	230c      	movs	r3, #12
 800078c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	4619      	mov	r1, r3
 8000792:	4818      	ldr	r0, [pc, #96]	@ (80007f4 <HAL_FMC_MspInit+0x118>)
 8000794:	f001 fa46 	bl	8001c24 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000798:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800079c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079e:	2302      	movs	r3, #2
 80007a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a6:	2303      	movs	r3, #3
 80007a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007aa:	230c      	movs	r3, #12
 80007ac:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	4619      	mov	r1, r3
 80007b2:	4811      	ldr	r0, [pc, #68]	@ (80007f8 <HAL_FMC_MspInit+0x11c>)
 80007b4:	f001 fa36 	bl	8001c24 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80007b8:	2360      	movs	r3, #96	@ 0x60
 80007ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007bc:	2302      	movs	r3, #2
 80007be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c4:	2303      	movs	r3, #3
 80007c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007c8:	230c      	movs	r3, #12
 80007ca:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	4619      	mov	r1, r3
 80007d0:	480a      	ldr	r0, [pc, #40]	@ (80007fc <HAL_FMC_MspInit+0x120>)
 80007d2:	f001 fa27 	bl	8001c24 <HAL_GPIO_Init>
 80007d6:	e000      	b.n	80007da <HAL_FMC_MspInit+0xfe>
    return;
 80007d8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	200000a8 	.word	0x200000a8
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40021400 	.word	0x40021400
 80007ec:	40020800 	.word	0x40020800
 80007f0:	40021800 	.word	0x40021800
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40020c00 	.word	0x40020c00
 80007fc:	40020400 	.word	0x40020400

08000800 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000808:	f7ff ff68 	bl	80006dc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
	...

0800082c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08e      	sub	sp, #56	@ 0x38
 8000830:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	623b      	str	r3, [r7, #32]
 8000846:	4b7b      	ldr	r3, [pc, #492]	@ (8000a34 <MX_GPIO_Init+0x208>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a7a      	ldr	r2, [pc, #488]	@ (8000a34 <MX_GPIO_Init+0x208>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b78      	ldr	r3, [pc, #480]	@ (8000a34 <MX_GPIO_Init+0x208>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	623b      	str	r3, [r7, #32]
 800085c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
 8000862:	4b74      	ldr	r3, [pc, #464]	@ (8000a34 <MX_GPIO_Init+0x208>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a73      	ldr	r2, [pc, #460]	@ (8000a34 <MX_GPIO_Init+0x208>)
 8000868:	f043 0320 	orr.w	r3, r3, #32
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b71      	ldr	r3, [pc, #452]	@ (8000a34 <MX_GPIO_Init+0x208>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0320 	and.w	r3, r3, #32
 8000876:	61fb      	str	r3, [r7, #28]
 8000878:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	61bb      	str	r3, [r7, #24]
 800087e:	4b6d      	ldr	r3, [pc, #436]	@ (8000a34 <MX_GPIO_Init+0x208>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a6c      	ldr	r2, [pc, #432]	@ (8000a34 <MX_GPIO_Init+0x208>)
 8000884:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b6a      	ldr	r3, [pc, #424]	@ (8000a34 <MX_GPIO_Init+0x208>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000892:	61bb      	str	r3, [r7, #24]
 8000894:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	4b66      	ldr	r3, [pc, #408]	@ (8000a34 <MX_GPIO_Init+0x208>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	4a65      	ldr	r2, [pc, #404]	@ (8000a34 <MX_GPIO_Init+0x208>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a6:	4b63      	ldr	r3, [pc, #396]	@ (8000a34 <MX_GPIO_Init+0x208>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
 80008b6:	4b5f      	ldr	r3, [pc, #380]	@ (8000a34 <MX_GPIO_Init+0x208>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a5e      	ldr	r2, [pc, #376]	@ (8000a34 <MX_GPIO_Init+0x208>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b5c      	ldr	r3, [pc, #368]	@ (8000a34 <MX_GPIO_Init+0x208>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	4b58      	ldr	r3, [pc, #352]	@ (8000a34 <MX_GPIO_Init+0x208>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a57      	ldr	r2, [pc, #348]	@ (8000a34 <MX_GPIO_Init+0x208>)
 80008d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b55      	ldr	r3, [pc, #340]	@ (8000a34 <MX_GPIO_Init+0x208>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	4b51      	ldr	r3, [pc, #324]	@ (8000a34 <MX_GPIO_Init+0x208>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a50      	ldr	r2, [pc, #320]	@ (8000a34 <MX_GPIO_Init+0x208>)
 80008f4:	f043 0310 	orr.w	r3, r3, #16
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b4e      	ldr	r3, [pc, #312]	@ (8000a34 <MX_GPIO_Init+0x208>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0310 	and.w	r3, r3, #16
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b4a      	ldr	r3, [pc, #296]	@ (8000a34 <MX_GPIO_Init+0x208>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a49      	ldr	r2, [pc, #292]	@ (8000a34 <MX_GPIO_Init+0x208>)
 8000910:	f043 0308 	orr.w	r3, r3, #8
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b47      	ldr	r3, [pc, #284]	@ (8000a34 <MX_GPIO_Init+0x208>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0308 	and.w	r3, r3, #8
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2116      	movs	r1, #22
 8000926:	4844      	ldr	r0, [pc, #272]	@ (8000a38 <MX_GPIO_Init+0x20c>)
 8000928:	f001 fb28 	bl	8001f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	2180      	movs	r1, #128	@ 0x80
 8000930:	4842      	ldr	r0, [pc, #264]	@ (8000a3c <MX_GPIO_Init+0x210>)
 8000932:	f001 fb23 	bl	8001f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800093c:	4840      	ldr	r0, [pc, #256]	@ (8000a40 <MX_GPIO_Init+0x214>)
 800093e:	f001 fb1d 	bl	8001f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000948:	483e      	ldr	r0, [pc, #248]	@ (8000a44 <MX_GPIO_Init+0x218>)
 800094a:	f001 fb17 	bl	8001f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800094e:	2316      	movs	r3, #22
 8000950:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000962:	4619      	mov	r1, r3
 8000964:	4834      	ldr	r0, [pc, #208]	@ (8000a38 <MX_GPIO_Init+0x20c>)
 8000966:	f001 f95d 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800096a:	f248 0307 	movw	r3, #32775	@ 0x8007
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000970:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000974:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800097e:	4619      	mov	r1, r3
 8000980:	482e      	ldr	r0, [pc, #184]	@ (8000a3c <MX_GPIO_Init+0x210>)
 8000982:	f001 f94f 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000986:	2380      	movs	r3, #128	@ 0x80
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800099a:	4619      	mov	r1, r3
 800099c:	4827      	ldr	r0, [pc, #156]	@ (8000a3c <MX_GPIO_Init+0x210>)
 800099e:	f001 f941 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80009a2:	2320      	movs	r3, #32
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009a6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009b4:	4619      	mov	r1, r3
 80009b6:	4820      	ldr	r0, [pc, #128]	@ (8000a38 <MX_GPIO_Init+0x20c>)
 80009b8:	f001 f934 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009bc:	2304      	movs	r3, #4
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009cc:	4619      	mov	r1, r3
 80009ce:	481e      	ldr	r0, [pc, #120]	@ (8000a48 <MX_GPIO_Init+0x21c>)
 80009d0:	f001 f928 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80009d4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80009d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009da:	2300      	movs	r3, #0
 80009dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e6:	4619      	mov	r1, r3
 80009e8:	4815      	ldr	r0, [pc, #84]	@ (8000a40 <MX_GPIO_Init+0x214>)
 80009ea:	f001 f91b 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80009ee:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80009f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a04:	4619      	mov	r1, r3
 8000a06:	480e      	ldr	r0, [pc, #56]	@ (8000a40 <MX_GPIO_Init+0x214>)
 8000a08:	f001 f90c 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000a0c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000a10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a22:	4619      	mov	r1, r3
 8000a24:	4807      	ldr	r0, [pc, #28]	@ (8000a44 <MX_GPIO_Init+0x218>)
 8000a26:	f001 f8fd 	bl	8001c24 <HAL_GPIO_Init>

}
 8000a2a:	bf00      	nop
 8000a2c:	3738      	adds	r7, #56	@ 0x38
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40020800 	.word	0x40020800
 8000a3c:	40020000 	.word	0x40020000
 8000a40:	40020c00 	.word	0x40020c00
 8000a44:	40021800 	.word	0x40021800
 8000a48:	40020400 	.word	0x40020400

08000a4c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a50:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac0 <MX_I2C3_Init+0x74>)
 8000a52:	4a1c      	ldr	r2, [pc, #112]	@ (8000ac4 <MX_I2C3_Init+0x78>)
 8000a54:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000a56:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac0 <MX_I2C3_Init+0x74>)
 8000a58:	4a1b      	ldr	r2, [pc, #108]	@ (8000ac8 <MX_I2C3_Init+0x7c>)
 8000a5a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a5c:	4b18      	ldr	r3, [pc, #96]	@ (8000ac0 <MX_I2C3_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000a62:	4b17      	ldr	r3, [pc, #92]	@ (8000ac0 <MX_I2C3_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a68:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <MX_I2C3_Init+0x74>)
 8000a6a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a6e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a70:	4b13      	ldr	r3, [pc, #76]	@ (8000ac0 <MX_I2C3_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000a76:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <MX_I2C3_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a7c:	4b10      	ldr	r3, [pc, #64]	@ (8000ac0 <MX_I2C3_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a82:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac0 <MX_I2C3_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a88:	480d      	ldr	r0, [pc, #52]	@ (8000ac0 <MX_I2C3_Init+0x74>)
 8000a8a:	f003 f851 	bl	8003b30 <HAL_I2C_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000a94:	f000 fae6 	bl	8001064 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4809      	ldr	r0, [pc, #36]	@ (8000ac0 <MX_I2C3_Init+0x74>)
 8000a9c:	f003 f98c 	bl	8003db8 <HAL_I2CEx_ConfigAnalogFilter>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000aa6:	f000 fadd 	bl	8001064 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4804      	ldr	r0, [pc, #16]	@ (8000ac0 <MX_I2C3_Init+0x74>)
 8000aae:	f003 f9bf 	bl	8003e30 <HAL_I2CEx_ConfigDigitalFilter>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000ab8:	f000 fad4 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	200000ac 	.word	0x200000ac
 8000ac4:	40005c00 	.word	0x40005c00
 8000ac8:	000186a0 	.word	0x000186a0

08000acc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	@ 0x28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a29      	ldr	r2, [pc, #164]	@ (8000b90 <HAL_I2C_MspInit+0xc4>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d14b      	bne.n	8000b86 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	4b28      	ldr	r3, [pc, #160]	@ (8000b94 <HAL_I2C_MspInit+0xc8>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	4a27      	ldr	r2, [pc, #156]	@ (8000b94 <HAL_I2C_MspInit+0xc8>)
 8000af8:	f043 0304 	orr.w	r3, r3, #4
 8000afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afe:	4b25      	ldr	r3, [pc, #148]	@ (8000b94 <HAL_I2C_MspInit+0xc8>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	f003 0304 	and.w	r3, r3, #4
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	4b21      	ldr	r3, [pc, #132]	@ (8000b94 <HAL_I2C_MspInit+0xc8>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	4a20      	ldr	r2, [pc, #128]	@ (8000b94 <HAL_I2C_MspInit+0xc8>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b94 <HAL_I2C_MspInit+0xc8>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000b26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b2c:	2312      	movs	r3, #18
 8000b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b38:	2304      	movs	r3, #4
 8000b3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	4815      	ldr	r0, [pc, #84]	@ (8000b98 <HAL_I2C_MspInit+0xcc>)
 8000b44:	f001 f86e 	bl	8001c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000b48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b4e:	2312      	movs	r3, #18
 8000b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b52:	2301      	movs	r3, #1
 8000b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b5a:	2304      	movs	r3, #4
 8000b5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	480d      	ldr	r0, [pc, #52]	@ (8000b9c <HAL_I2C_MspInit+0xd0>)
 8000b66:	f001 f85d 	bl	8001c24 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <HAL_I2C_MspInit+0xc8>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b72:	4a08      	ldr	r2, [pc, #32]	@ (8000b94 <HAL_I2C_MspInit+0xc8>)
 8000b74:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000b78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b7a:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <HAL_I2C_MspInit+0xc8>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000b86:	bf00      	nop
 8000b88:	3728      	adds	r7, #40	@ 0x28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40005c00 	.word	0x40005c00
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020800 	.word	0x40020800
 8000b9c:	40020000 	.word	0x40020000

08000ba0 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08e      	sub	sp, #56	@ 0x38
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	2234      	movs	r2, #52	@ 0x34
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f007 f93f 	bl	8007e30 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000bb2:	4b39      	ldr	r3, [pc, #228]	@ (8000c98 <MX_LTDC_Init+0xf8>)
 8000bb4:	4a39      	ldr	r2, [pc, #228]	@ (8000c9c <MX_LTDC_Init+0xfc>)
 8000bb6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000bb8:	4b37      	ldr	r3, [pc, #220]	@ (8000c98 <MX_LTDC_Init+0xf8>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000bbe:	4b36      	ldr	r3, [pc, #216]	@ (8000c98 <MX_LTDC_Init+0xf8>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000bc4:	4b34      	ldr	r3, [pc, #208]	@ (8000c98 <MX_LTDC_Init+0xf8>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000bca:	4b33      	ldr	r3, [pc, #204]	@ (8000c98 <MX_LTDC_Init+0xf8>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000bd0:	4b31      	ldr	r3, [pc, #196]	@ (8000c98 <MX_LTDC_Init+0xf8>)
 8000bd2:	2209      	movs	r2, #9
 8000bd4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000bd6:	4b30      	ldr	r3, [pc, #192]	@ (8000c98 <MX_LTDC_Init+0xf8>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000bdc:	4b2e      	ldr	r3, [pc, #184]	@ (8000c98 <MX_LTDC_Init+0xf8>)
 8000bde:	221d      	movs	r2, #29
 8000be0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000be2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c98 <MX_LTDC_Init+0xf8>)
 8000be4:	2203      	movs	r2, #3
 8000be6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000be8:	4b2b      	ldr	r3, [pc, #172]	@ (8000c98 <MX_LTDC_Init+0xf8>)
 8000bea:	f240 120d 	movw	r2, #269	@ 0x10d
 8000bee:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000bf0:	4b29      	ldr	r3, [pc, #164]	@ (8000c98 <MX_LTDC_Init+0xf8>)
 8000bf2:	f240 1243 	movw	r2, #323	@ 0x143
 8000bf6:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 8000bf8:	4b27      	ldr	r3, [pc, #156]	@ (8000c98 <MX_LTDC_Init+0xf8>)
 8000bfa:	f240 1217 	movw	r2, #279	@ 0x117
 8000bfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000c00:	4b25      	ldr	r3, [pc, #148]	@ (8000c98 <MX_LTDC_Init+0xf8>)
 8000c02:	f240 1247 	movw	r2, #327	@ 0x147
 8000c06:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000c08:	4b23      	ldr	r3, [pc, #140]	@ (8000c98 <MX_LTDC_Init+0xf8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000c10:	4b21      	ldr	r3, [pc, #132]	@ (8000c98 <MX_LTDC_Init+0xf8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000c18:	4b1f      	ldr	r3, [pc, #124]	@ (8000c98 <MX_LTDC_Init+0xf8>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c20:	481d      	ldr	r0, [pc, #116]	@ (8000c98 <MX_LTDC_Init+0xf8>)
 8000c22:	f003 f945 	bl	8003eb0 <HAL_LTDC_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000c2c:	f000 fa1a 	bl	8001064 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000c34:	23f0      	movs	r3, #240	@ 0xf0
 8000c36:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000c3c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000c40:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000c42:	2302      	movs	r3, #2
 8000c44:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000c46:	23ff      	movs	r3, #255	@ 0xff
 8000c48:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000c4e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c52:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000c54:	2307      	movs	r3, #7
 8000c56:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000c58:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 8000c5e:	23f0      	movs	r3, #240	@ 0xf0
 8000c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 8000c62:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000c66:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4805      	ldr	r0, [pc, #20]	@ (8000c98 <MX_LTDC_Init+0xf8>)
 8000c82:	f003 faa7 	bl	80041d4 <HAL_LTDC_ConfigLayer>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000c8c:	f000 f9ea 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	3738      	adds	r7, #56	@ 0x38
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000100 	.word	0x20000100
 8000c9c:	40016800 	.word	0x40016800

08000ca0 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b09a      	sub	sp, #104	@ 0x68
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cbc:	2230      	movs	r2, #48	@ 0x30
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f007 f8b5 	bl	8007e30 <memset>
  if(ltdcHandle->Instance==LTDC)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a85      	ldr	r2, [pc, #532]	@ (8000ee0 <HAL_LTDC_MspInit+0x240>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	f040 8102 	bne.w	8000ed6 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000cd2:	2308      	movs	r3, #8
 8000cd4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000cd6:	2332      	movs	r3, #50	@ 0x32
 8000cd8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ce2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f004 f914 	bl	8004f14 <HAL_RCCEx_PeriphCLKConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000cf2:	f000 f9b7 	bl	8001064 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	623b      	str	r3, [r7, #32]
 8000cfa:	4b7a      	ldr	r3, [pc, #488]	@ (8000ee4 <HAL_LTDC_MspInit+0x244>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfe:	4a79      	ldr	r2, [pc, #484]	@ (8000ee4 <HAL_LTDC_MspInit+0x244>)
 8000d00:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d06:	4b77      	ldr	r3, [pc, #476]	@ (8000ee4 <HAL_LTDC_MspInit+0x244>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d0e:	623b      	str	r3, [r7, #32]
 8000d10:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
 8000d16:	4b73      	ldr	r3, [pc, #460]	@ (8000ee4 <HAL_LTDC_MspInit+0x244>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	4a72      	ldr	r2, [pc, #456]	@ (8000ee4 <HAL_LTDC_MspInit+0x244>)
 8000d1c:	f043 0320 	orr.w	r3, r3, #32
 8000d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d22:	4b70      	ldr	r3, [pc, #448]	@ (8000ee4 <HAL_LTDC_MspInit+0x244>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	f003 0320 	and.w	r3, r3, #32
 8000d2a:	61fb      	str	r3, [r7, #28]
 8000d2c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61bb      	str	r3, [r7, #24]
 8000d32:	4b6c      	ldr	r3, [pc, #432]	@ (8000ee4 <HAL_LTDC_MspInit+0x244>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	4a6b      	ldr	r2, [pc, #428]	@ (8000ee4 <HAL_LTDC_MspInit+0x244>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3e:	4b69      	ldr	r3, [pc, #420]	@ (8000ee4 <HAL_LTDC_MspInit+0x244>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	61bb      	str	r3, [r7, #24]
 8000d48:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	4b65      	ldr	r3, [pc, #404]	@ (8000ee4 <HAL_LTDC_MspInit+0x244>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	4a64      	ldr	r2, [pc, #400]	@ (8000ee4 <HAL_LTDC_MspInit+0x244>)
 8000d54:	f043 0302 	orr.w	r3, r3, #2
 8000d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5a:	4b62      	ldr	r3, [pc, #392]	@ (8000ee4 <HAL_LTDC_MspInit+0x244>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	4b5e      	ldr	r3, [pc, #376]	@ (8000ee4 <HAL_LTDC_MspInit+0x244>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	4a5d      	ldr	r2, [pc, #372]	@ (8000ee4 <HAL_LTDC_MspInit+0x244>)
 8000d70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d76:	4b5b      	ldr	r3, [pc, #364]	@ (8000ee4 <HAL_LTDC_MspInit+0x244>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b57      	ldr	r3, [pc, #348]	@ (8000ee4 <HAL_LTDC_MspInit+0x244>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	4a56      	ldr	r2, [pc, #344]	@ (8000ee4 <HAL_LTDC_MspInit+0x244>)
 8000d8c:	f043 0304 	orr.w	r3, r3, #4
 8000d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d92:	4b54      	ldr	r3, [pc, #336]	@ (8000ee4 <HAL_LTDC_MspInit+0x244>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	f003 0304 	and.w	r3, r3, #4
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	4b50      	ldr	r3, [pc, #320]	@ (8000ee4 <HAL_LTDC_MspInit+0x244>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	4a4f      	ldr	r2, [pc, #316]	@ (8000ee4 <HAL_LTDC_MspInit+0x244>)
 8000da8:	f043 0308 	orr.w	r3, r3, #8
 8000dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dae:	4b4d      	ldr	r3, [pc, #308]	@ (8000ee4 <HAL_LTDC_MspInit+0x244>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	f003 0308 	and.w	r3, r3, #8
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000dba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dbe:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000dcc:	230e      	movs	r3, #14
 8000dce:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000dd0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4844      	ldr	r0, [pc, #272]	@ (8000ee8 <HAL_LTDC_MspInit+0x248>)
 8000dd8:	f000 ff24 	bl	8001c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000ddc:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000de0:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000dee:	230e      	movs	r3, #14
 8000df0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000df6:	4619      	mov	r1, r3
 8000df8:	483c      	ldr	r0, [pc, #240]	@ (8000eec <HAL_LTDC_MspInit+0x24c>)
 8000dfa:	f000 ff13 	bl	8001c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000e0e:	2309      	movs	r3, #9
 8000e10:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e12:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e16:	4619      	mov	r1, r3
 8000e18:	4835      	ldr	r0, [pc, #212]	@ (8000ef0 <HAL_LTDC_MspInit+0x250>)
 8000e1a:	f000 ff03 	bl	8001c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000e1e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000e22:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e30:	230e      	movs	r3, #14
 8000e32:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e34:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e38:	4619      	mov	r1, r3
 8000e3a:	482d      	ldr	r0, [pc, #180]	@ (8000ef0 <HAL_LTDC_MspInit+0x250>)
 8000e3c:	f000 fef2 	bl	8001c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000e40:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000e44:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e52:	230e      	movs	r3, #14
 8000e54:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e56:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4825      	ldr	r0, [pc, #148]	@ (8000ef4 <HAL_LTDC_MspInit+0x254>)
 8000e5e:	f000 fee1 	bl	8001c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000e62:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000e66:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2300      	movs	r3, #0
 8000e72:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e74:	230e      	movs	r3, #14
 8000e76:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e78:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	481e      	ldr	r0, [pc, #120]	@ (8000ef8 <HAL_LTDC_MspInit+0x258>)
 8000e80:	f000 fed0 	bl	8001c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000e84:	2348      	movs	r3, #72	@ 0x48
 8000e86:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	2300      	movs	r3, #0
 8000e92:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e94:	230e      	movs	r3, #14
 8000e96:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e98:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4817      	ldr	r0, [pc, #92]	@ (8000efc <HAL_LTDC_MspInit+0x25c>)
 8000ea0:	f000 fec0 	bl	8001c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000ea4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ea8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000eb6:	2309      	movs	r3, #9
 8000eb8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	480c      	ldr	r0, [pc, #48]	@ (8000ef4 <HAL_LTDC_MspInit+0x254>)
 8000ec2:	f000 feaf 	bl	8001c24 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2105      	movs	r1, #5
 8000eca:	2058      	movs	r0, #88	@ 0x58
 8000ecc:	f000 fc78 	bl	80017c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000ed0:	2058      	movs	r0, #88	@ 0x58
 8000ed2:	f000 fc91 	bl	80017f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	3768      	adds	r7, #104	@ 0x68
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40016800 	.word	0x40016800
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40021400 	.word	0x40021400
 8000eec:	40020000 	.word	0x40020000
 8000ef0:	40020400 	.word	0x40020400
 8000ef4:	40021800 	.word	0x40021800
 8000ef8:	40020800 	.word	0x40020800
 8000efc:	40020c00 	.word	0x40020c00

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f04:	f000 fb3e 	bl	8001584 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f08:	f000 f830 	bl	8000f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0c:	f7ff fc8e 	bl	800082c <MX_GPIO_Init>
  MX_CRC_Init();
 8000f10:	f7ff fb04 	bl	800051c <MX_CRC_Init>
  MX_DMA2D_Init();
 8000f14:	f7ff fb38 	bl	8000588 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000f18:	f7ff fb90 	bl	800063c <MX_FMC_Init>
  MX_I2C3_Init();
 8000f1c:	f7ff fd96 	bl	8000a4c <MX_I2C3_Init>
  MX_LTDC_Init();
 8000f20:	f7ff fe3e 	bl	8000ba0 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000f24:	f000 f8a4 	bl	8001070 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000f28:	f000 fa1e 	bl	8001368 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000f2c:	f000 fa8e 	bl	800144c <MX_USART1_UART_Init>
//  lcd_put_rectangle(0, 48, 160, 16, YELLOW);
//  lcd_put_rectangle(0, 64, 160, 16, MAGENTA);
//  lcd_put_rectangle(0, 80, 160, 16, CYAN);
//  lcd_put_rectangle(0, 96, 160, 16, WHITE);
//  lcd_put_rectangle(0, 112, 160, 16, BLACK);
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000f30:	2201      	movs	r2, #1
 8000f32:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f36:	480c      	ldr	r0, [pc, #48]	@ (8000f68 <main+0x68>)
 8000f38:	f001 f820 	bl	8001f7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f42:	4809      	ldr	r0, [pc, #36]	@ (8000f68 <main+0x68>)
 8000f44:	f001 f81a 	bl	8001f7c <HAL_GPIO_WritePin>
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8000f48:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f4c:	4806      	ldr	r0, [pc, #24]	@ (8000f68 <main+0x68>)
 8000f4e:	f001 f82e 	bl	8001fae <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 8000f52:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f56:	4804      	ldr	r0, [pc, #16]	@ (8000f68 <main+0x68>)
 8000f58:	f001 f829 	bl	8001fae <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000f5c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f60:	f000 fb52 	bl	8001608 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8000f64:	bf00      	nop
 8000f66:	e7ef      	b.n	8000f48 <main+0x48>
 8000f68:	40021800 	.word	0x40021800

08000f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b094      	sub	sp, #80	@ 0x50
 8000f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f72:	f107 0320 	add.w	r3, r7, #32
 8000f76:	2230      	movs	r2, #48	@ 0x30
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f006 ff58 	bl	8007e30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f90:	2300      	movs	r3, #0
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	4b28      	ldr	r3, [pc, #160]	@ (8001038 <SystemClock_Config+0xcc>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f98:	4a27      	ldr	r2, [pc, #156]	@ (8001038 <SystemClock_Config+0xcc>)
 8000f9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fa0:	4b25      	ldr	r3, [pc, #148]	@ (8001038 <SystemClock_Config+0xcc>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	4b22      	ldr	r3, [pc, #136]	@ (800103c <SystemClock_Config+0xd0>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000fb8:	4a20      	ldr	r2, [pc, #128]	@ (800103c <SystemClock_Config+0xd0>)
 8000fba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	4b1e      	ldr	r3, [pc, #120]	@ (800103c <SystemClock_Config+0xd0>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fd0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fda:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fe0:	2304      	movs	r3, #4
 8000fe2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000fe4:	2348      	movs	r3, #72	@ 0x48
 8000fe6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000fec:	2303      	movs	r3, #3
 8000fee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff0:	f107 0320 	add.w	r3, r7, #32
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f003 fac3 	bl	8004580 <HAL_RCC_OscConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001000:	f000 f830 	bl	8001064 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001004:	230f      	movs	r3, #15
 8001006:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001008:	2302      	movs	r3, #2
 800100a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001010:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001014:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	2102      	movs	r1, #2
 8001020:	4618      	mov	r0, r3
 8001022:	f003 fd25 	bl	8004a70 <HAL_RCC_ClockConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800102c:	f000 f81a 	bl	8001064 <Error_Handler>
  }
}
 8001030:	bf00      	nop
 8001032:	3750      	adds	r7, #80	@ 0x50
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40023800 	.word	0x40023800
 800103c:	40007000 	.word	0x40007000

08001040 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a04      	ldr	r2, [pc, #16]	@ (8001060 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d101      	bne.n	8001056 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001052:	f000 fab9 	bl	80015c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40001000 	.word	0x40001000

08001064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001068:	b672      	cpsid	i
}
 800106a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <Error_Handler+0x8>

08001070 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001074:	4b17      	ldr	r3, [pc, #92]	@ (80010d4 <MX_SPI5_Init+0x64>)
 8001076:	4a18      	ldr	r2, [pc, #96]	@ (80010d8 <MX_SPI5_Init+0x68>)
 8001078:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800107a:	4b16      	ldr	r3, [pc, #88]	@ (80010d4 <MX_SPI5_Init+0x64>)
 800107c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001080:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001082:	4b14      	ldr	r3, [pc, #80]	@ (80010d4 <MX_SPI5_Init+0x64>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001088:	4b12      	ldr	r3, [pc, #72]	@ (80010d4 <MX_SPI5_Init+0x64>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800108e:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <MX_SPI5_Init+0x64>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001094:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <MX_SPI5_Init+0x64>)
 8001096:	2200      	movs	r2, #0
 8001098:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800109a:	4b0e      	ldr	r3, [pc, #56]	@ (80010d4 <MX_SPI5_Init+0x64>)
 800109c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010a0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010a2:	4b0c      	ldr	r3, [pc, #48]	@ (80010d4 <MX_SPI5_Init+0x64>)
 80010a4:	2218      	movs	r2, #24
 80010a6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010a8:	4b0a      	ldr	r3, [pc, #40]	@ (80010d4 <MX_SPI5_Init+0x64>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ae:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <MX_SPI5_Init+0x64>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010b4:	4b07      	ldr	r3, [pc, #28]	@ (80010d4 <MX_SPI5_Init+0x64>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80010ba:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <MX_SPI5_Init+0x64>)
 80010bc:	220a      	movs	r2, #10
 80010be:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80010c0:	4804      	ldr	r0, [pc, #16]	@ (80010d4 <MX_SPI5_Init+0x64>)
 80010c2:	f004 f91b 	bl	80052fc <HAL_SPI_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80010cc:	f7ff ffca 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200001a8 	.word	0x200001a8
 80010d8:	40015000 	.word	0x40015000

080010dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	@ 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a19      	ldr	r2, [pc, #100]	@ (8001160 <HAL_SPI_MspInit+0x84>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d12c      	bne.n	8001158 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	4b18      	ldr	r3, [pc, #96]	@ (8001164 <HAL_SPI_MspInit+0x88>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001106:	4a17      	ldr	r2, [pc, #92]	@ (8001164 <HAL_SPI_MspInit+0x88>)
 8001108:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800110c:	6453      	str	r3, [r2, #68]	@ 0x44
 800110e:	4b15      	ldr	r3, [pc, #84]	@ (8001164 <HAL_SPI_MspInit+0x88>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001112:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b11      	ldr	r3, [pc, #68]	@ (8001164 <HAL_SPI_MspInit+0x88>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	4a10      	ldr	r2, [pc, #64]	@ (8001164 <HAL_SPI_MspInit+0x88>)
 8001124:	f043 0320 	orr.w	r3, r3, #32
 8001128:	6313      	str	r3, [r2, #48]	@ 0x30
 800112a:	4b0e      	ldr	r3, [pc, #56]	@ (8001164 <HAL_SPI_MspInit+0x88>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	f003 0320 	and.w	r3, r3, #32
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001136:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800113a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001148:	2305      	movs	r3, #5
 800114a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	4805      	ldr	r0, [pc, #20]	@ (8001168 <HAL_SPI_MspInit+0x8c>)
 8001154:	f000 fd66 	bl	8001c24 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001158:	bf00      	nop
 800115a:	3728      	adds	r7, #40	@ 0x28
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40015000 	.word	0x40015000
 8001164:	40023800 	.word	0x40023800
 8001168:	40021400 	.word	0x40021400

0800116c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <HAL_MspInit+0x54>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117a:	4a11      	ldr	r2, [pc, #68]	@ (80011c0 <HAL_MspInit+0x54>)
 800117c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001180:	6453      	str	r3, [r2, #68]	@ 0x44
 8001182:	4b0f      	ldr	r3, [pc, #60]	@ (80011c0 <HAL_MspInit+0x54>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001186:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	603b      	str	r3, [r7, #0]
 8001192:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <HAL_MspInit+0x54>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001196:	4a0a      	ldr	r2, [pc, #40]	@ (80011c0 <HAL_MspInit+0x54>)
 8001198:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800119c:	6413      	str	r3, [r2, #64]	@ 0x40
 800119e:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <HAL_MspInit+0x54>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	210f      	movs	r1, #15
 80011ae:	f06f 0001 	mvn.w	r0, #1
 80011b2:	f000 fb05 	bl	80017c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800

080011c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08e      	sub	sp, #56	@ 0x38
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	4b33      	ldr	r3, [pc, #204]	@ (80012a8 <HAL_InitTick+0xe4>)
 80011da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011dc:	4a32      	ldr	r2, [pc, #200]	@ (80012a8 <HAL_InitTick+0xe4>)
 80011de:	f043 0310 	orr.w	r3, r3, #16
 80011e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011e4:	4b30      	ldr	r3, [pc, #192]	@ (80012a8 <HAL_InitTick+0xe4>)
 80011e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e8:	f003 0310 	and.w	r3, r3, #16
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011f0:	f107 0210 	add.w	r2, r7, #16
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4611      	mov	r1, r2
 80011fa:	4618      	mov	r0, r3
 80011fc:	f003 fe58 	bl	8004eb0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001200:	6a3b      	ldr	r3, [r7, #32]
 8001202:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001206:	2b00      	cmp	r3, #0
 8001208:	d103      	bne.n	8001212 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800120a:	f003 fe29 	bl	8004e60 <HAL_RCC_GetPCLK1Freq>
 800120e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001210:	e004      	b.n	800121c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001212:	f003 fe25 	bl	8004e60 <HAL_RCC_GetPCLK1Freq>
 8001216:	4603      	mov	r3, r0
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800121c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800121e:	4a23      	ldr	r2, [pc, #140]	@ (80012ac <HAL_InitTick+0xe8>)
 8001220:	fba2 2303 	umull	r2, r3, r2, r3
 8001224:	0c9b      	lsrs	r3, r3, #18
 8001226:	3b01      	subs	r3, #1
 8001228:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800122a:	4b21      	ldr	r3, [pc, #132]	@ (80012b0 <HAL_InitTick+0xec>)
 800122c:	4a21      	ldr	r2, [pc, #132]	@ (80012b4 <HAL_InitTick+0xf0>)
 800122e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001230:	4b1f      	ldr	r3, [pc, #124]	@ (80012b0 <HAL_InitTick+0xec>)
 8001232:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001236:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001238:	4a1d      	ldr	r2, [pc, #116]	@ (80012b0 <HAL_InitTick+0xec>)
 800123a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800123c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800123e:	4b1c      	ldr	r3, [pc, #112]	@ (80012b0 <HAL_InitTick+0xec>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001244:	4b1a      	ldr	r3, [pc, #104]	@ (80012b0 <HAL_InitTick+0xec>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124a:	4b19      	ldr	r3, [pc, #100]	@ (80012b0 <HAL_InitTick+0xec>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001250:	4817      	ldr	r0, [pc, #92]	@ (80012b0 <HAL_InitTick+0xec>)
 8001252:	f004 f8dc 	bl	800540e <HAL_TIM_Base_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800125c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001260:	2b00      	cmp	r3, #0
 8001262:	d11b      	bne.n	800129c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001264:	4812      	ldr	r0, [pc, #72]	@ (80012b0 <HAL_InitTick+0xec>)
 8001266:	f004 f921 	bl	80054ac <HAL_TIM_Base_Start_IT>
 800126a:	4603      	mov	r3, r0
 800126c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001270:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001274:	2b00      	cmp	r3, #0
 8001276:	d111      	bne.n	800129c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001278:	2036      	movs	r0, #54	@ 0x36
 800127a:	f000 fabd 	bl	80017f8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b0f      	cmp	r3, #15
 8001282:	d808      	bhi.n	8001296 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001284:	2200      	movs	r2, #0
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	2036      	movs	r0, #54	@ 0x36
 800128a:	f000 fa99 	bl	80017c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800128e:	4a0a      	ldr	r2, [pc, #40]	@ (80012b8 <HAL_InitTick+0xf4>)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	e002      	b.n	800129c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800129c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3738      	adds	r7, #56	@ 0x38
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40023800 	.word	0x40023800
 80012ac:	431bde83 	.word	0x431bde83
 80012b0:	20000200 	.word	0x20000200
 80012b4:	40001000 	.word	0x40001000
 80012b8:	20000004 	.word	0x20000004

080012bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <NMI_Handler+0x4>

080012c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <HardFault_Handler+0x4>

080012cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <MemManage_Handler+0x4>

080012d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <BusFault_Handler+0x4>

080012dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <UsageFault_Handler+0x4>

080012e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012f8:	4802      	ldr	r0, [pc, #8]	@ (8001304 <TIM6_DAC_IRQHandler+0x10>)
 80012fa:	f004 f947 	bl	800558c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000200 	.word	0x20000200

08001308 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 800130c:	4802      	ldr	r0, [pc, #8]	@ (8001318 <OTG_HS_IRQHandler+0x10>)
 800130e:	f000 fe68 	bl	8001fe2 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200003c8 	.word	0x200003c8

0800131c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001320:	4802      	ldr	r0, [pc, #8]	@ (800132c <LTDC_IRQHandler+0x10>)
 8001322:	f002 fe95 	bl	8004050 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000100 	.word	0x20000100

08001330 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001334:	4802      	ldr	r0, [pc, #8]	@ (8001340 <DMA2D_IRQHandler+0x10>)
 8001336:	f000 fad2 	bl	80018de <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000034 	.word	0x20000034

08001344 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001348:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <SystemInit+0x20>)
 800134a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800134e:	4a05      	ldr	r2, [pc, #20]	@ (8001364 <SystemInit+0x20>)
 8001350:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001354:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800137c:	463b      	mov	r3, r7
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001384:	4b1e      	ldr	r3, [pc, #120]	@ (8001400 <MX_TIM1_Init+0x98>)
 8001386:	4a1f      	ldr	r2, [pc, #124]	@ (8001404 <MX_TIM1_Init+0x9c>)
 8001388:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800138a:	4b1d      	ldr	r3, [pc, #116]	@ (8001400 <MX_TIM1_Init+0x98>)
 800138c:	2200      	movs	r2, #0
 800138e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001390:	4b1b      	ldr	r3, [pc, #108]	@ (8001400 <MX_TIM1_Init+0x98>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001396:	4b1a      	ldr	r3, [pc, #104]	@ (8001400 <MX_TIM1_Init+0x98>)
 8001398:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800139c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139e:	4b18      	ldr	r3, [pc, #96]	@ (8001400 <MX_TIM1_Init+0x98>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013a4:	4b16      	ldr	r3, [pc, #88]	@ (8001400 <MX_TIM1_Init+0x98>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013aa:	4b15      	ldr	r3, [pc, #84]	@ (8001400 <MX_TIM1_Init+0x98>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013b0:	4813      	ldr	r0, [pc, #76]	@ (8001400 <MX_TIM1_Init+0x98>)
 80013b2:	f004 f82c 	bl	800540e <HAL_TIM_Base_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80013bc:	f7ff fe52 	bl	8001064 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013c6:	f107 0308 	add.w	r3, r7, #8
 80013ca:	4619      	mov	r1, r3
 80013cc:	480c      	ldr	r0, [pc, #48]	@ (8001400 <MX_TIM1_Init+0x98>)
 80013ce:	f004 f9cd 	bl	800576c <HAL_TIM_ConfigClockSource>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80013d8:	f7ff fe44 	bl	8001064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013dc:	2300      	movs	r3, #0
 80013de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013e4:	463b      	mov	r3, r7
 80013e6:	4619      	mov	r1, r3
 80013e8:	4805      	ldr	r0, [pc, #20]	@ (8001400 <MX_TIM1_Init+0x98>)
 80013ea:	f004 fbf5 	bl	8005bd8 <HAL_TIMEx_MasterConfigSynchronization>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80013f4:	f7ff fe36 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013f8:	bf00      	nop
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000248 	.word	0x20000248
 8001404:	40010000 	.word	0x40010000

08001408 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a0b      	ldr	r2, [pc, #44]	@ (8001444 <HAL_TIM_Base_MspInit+0x3c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d10d      	bne.n	8001436 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	4b0a      	ldr	r3, [pc, #40]	@ (8001448 <HAL_TIM_Base_MspInit+0x40>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001422:	4a09      	ldr	r2, [pc, #36]	@ (8001448 <HAL_TIM_Base_MspInit+0x40>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6453      	str	r3, [r2, #68]	@ 0x44
 800142a:	4b07      	ldr	r3, [pc, #28]	@ (8001448 <HAL_TIM_Base_MspInit+0x40>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40010000 	.word	0x40010000
 8001448:	40023800 	.word	0x40023800

0800144c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001450:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <MX_USART1_UART_Init+0x4c>)
 8001452:	4a12      	ldr	r2, [pc, #72]	@ (800149c <MX_USART1_UART_Init+0x50>)
 8001454:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001456:	4b10      	ldr	r3, [pc, #64]	@ (8001498 <MX_USART1_UART_Init+0x4c>)
 8001458:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800145c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800145e:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <MX_USART1_UART_Init+0x4c>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001464:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <MX_USART1_UART_Init+0x4c>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800146a:	4b0b      	ldr	r3, [pc, #44]	@ (8001498 <MX_USART1_UART_Init+0x4c>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001470:	4b09      	ldr	r3, [pc, #36]	@ (8001498 <MX_USART1_UART_Init+0x4c>)
 8001472:	220c      	movs	r2, #12
 8001474:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001476:	4b08      	ldr	r3, [pc, #32]	@ (8001498 <MX_USART1_UART_Init+0x4c>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800147c:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <MX_USART1_UART_Init+0x4c>)
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001482:	4805      	ldr	r0, [pc, #20]	@ (8001498 <MX_USART1_UART_Init+0x4c>)
 8001484:	f004 fc38 	bl	8005cf8 <HAL_UART_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800148e:	f7ff fde9 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000290 	.word	0x20000290
 800149c:	40011000 	.word	0x40011000

080014a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	@ 0x28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a19      	ldr	r2, [pc, #100]	@ (8001524 <HAL_UART_MspInit+0x84>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d12c      	bne.n	800151c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	4b18      	ldr	r3, [pc, #96]	@ (8001528 <HAL_UART_MspInit+0x88>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ca:	4a17      	ldr	r2, [pc, #92]	@ (8001528 <HAL_UART_MspInit+0x88>)
 80014cc:	f043 0310 	orr.w	r3, r3, #16
 80014d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014d2:	4b15      	ldr	r3, [pc, #84]	@ (8001528 <HAL_UART_MspInit+0x88>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d6:	f003 0310 	and.w	r3, r3, #16
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <HAL_UART_MspInit+0x88>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	4a10      	ldr	r2, [pc, #64]	@ (8001528 <HAL_UART_MspInit+0x88>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001528 <HAL_UART_MspInit+0x88>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80014fa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80014fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001508:	2303      	movs	r3, #3
 800150a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800150c:	2307      	movs	r3, #7
 800150e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4619      	mov	r1, r3
 8001516:	4805      	ldr	r0, [pc, #20]	@ (800152c <HAL_UART_MspInit+0x8c>)
 8001518:	f000 fb84 	bl	8001c24 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800151c:	bf00      	nop
 800151e:	3728      	adds	r7, #40	@ 0x28
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40011000 	.word	0x40011000
 8001528:	40023800 	.word	0x40023800
 800152c:	40020000 	.word	0x40020000

08001530 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001530:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001568 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001534:	f7ff ff06 	bl	8001344 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001538:	480c      	ldr	r0, [pc, #48]	@ (800156c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800153a:	490d      	ldr	r1, [pc, #52]	@ (8001570 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800153c:	4a0d      	ldr	r2, [pc, #52]	@ (8001574 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800153e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001540:	e002      	b.n	8001548 <LoopCopyDataInit>

08001542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001546:	3304      	adds	r3, #4

08001548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800154a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800154c:	d3f9      	bcc.n	8001542 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800154e:	4a0a      	ldr	r2, [pc, #40]	@ (8001578 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001550:	4c0a      	ldr	r4, [pc, #40]	@ (800157c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001554:	e001      	b.n	800155a <LoopFillZerobss>

08001556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001558:	3204      	adds	r2, #4

0800155a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800155a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800155c:	d3fb      	bcc.n	8001556 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800155e:	f006 fc6f 	bl	8007e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001562:	f7ff fccd 	bl	8000f00 <main>
  bx  lr    
 8001566:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001568:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800156c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001570:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001574:	08007ee4 	.word	0x08007ee4
  ldr r2, =_sbss
 8001578:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800157c:	200007a8 	.word	0x200007a8

08001580 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001580:	e7fe      	b.n	8001580 <ADC_IRQHandler>
	...

08001584 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001588:	4b0e      	ldr	r3, [pc, #56]	@ (80015c4 <HAL_Init+0x40>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a0d      	ldr	r2, [pc, #52]	@ (80015c4 <HAL_Init+0x40>)
 800158e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001592:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001594:	4b0b      	ldr	r3, [pc, #44]	@ (80015c4 <HAL_Init+0x40>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0a      	ldr	r2, [pc, #40]	@ (80015c4 <HAL_Init+0x40>)
 800159a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800159e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a0:	4b08      	ldr	r3, [pc, #32]	@ (80015c4 <HAL_Init+0x40>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a07      	ldr	r2, [pc, #28]	@ (80015c4 <HAL_Init+0x40>)
 80015a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ac:	2003      	movs	r0, #3
 80015ae:	f000 f8fc 	bl	80017aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015b2:	2000      	movs	r0, #0
 80015b4:	f7ff fe06 	bl	80011c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b8:	f7ff fdd8 	bl	800116c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40023c00 	.word	0x40023c00

080015c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015cc:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <HAL_IncTick+0x20>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <HAL_IncTick+0x24>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4413      	add	r3, r2
 80015d8:	4a04      	ldr	r2, [pc, #16]	@ (80015ec <HAL_IncTick+0x24>)
 80015da:	6013      	str	r3, [r2, #0]
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	20000008 	.word	0x20000008
 80015ec:	200002d8 	.word	0x200002d8

080015f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return uwTick;
 80015f4:	4b03      	ldr	r3, [pc, #12]	@ (8001604 <HAL_GetTick+0x14>)
 80015f6:	681b      	ldr	r3, [r3, #0]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	200002d8 	.word	0x200002d8

08001608 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001610:	f7ff ffee 	bl	80015f0 <HAL_GetTick>
 8001614:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001620:	d005      	beq.n	800162e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001622:	4b0a      	ldr	r3, [pc, #40]	@ (800164c <HAL_Delay+0x44>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	461a      	mov	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4413      	add	r3, r2
 800162c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800162e:	bf00      	nop
 8001630:	f7ff ffde 	bl	80015f0 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	429a      	cmp	r2, r3
 800163e:	d8f7      	bhi.n	8001630 <HAL_Delay+0x28>
  {
  }
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000008 	.word	0x20000008

08001650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001660:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <__NVIC_SetPriorityGrouping+0x44>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800166c:	4013      	ands	r3, r2
 800166e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001678:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800167c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001682:	4a04      	ldr	r2, [pc, #16]	@ (8001694 <__NVIC_SetPriorityGrouping+0x44>)
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	60d3      	str	r3, [r2, #12]
}
 8001688:	bf00      	nop
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800169c:	4b04      	ldr	r3, [pc, #16]	@ (80016b0 <__NVIC_GetPriorityGrouping+0x18>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	0a1b      	lsrs	r3, r3, #8
 80016a2:	f003 0307 	and.w	r3, r3, #7
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	db0b      	blt.n	80016de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	f003 021f 	and.w	r2, r3, #31
 80016cc:	4907      	ldr	r1, [pc, #28]	@ (80016ec <__NVIC_EnableIRQ+0x38>)
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	095b      	lsrs	r3, r3, #5
 80016d4:	2001      	movs	r0, #1
 80016d6:	fa00 f202 	lsl.w	r2, r0, r2
 80016da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000e100 	.word	0xe000e100

080016f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	6039      	str	r1, [r7, #0]
 80016fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001700:	2b00      	cmp	r3, #0
 8001702:	db0a      	blt.n	800171a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	b2da      	uxtb	r2, r3
 8001708:	490c      	ldr	r1, [pc, #48]	@ (800173c <__NVIC_SetPriority+0x4c>)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	0112      	lsls	r2, r2, #4
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	440b      	add	r3, r1
 8001714:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001718:	e00a      	b.n	8001730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	b2da      	uxtb	r2, r3
 800171e:	4908      	ldr	r1, [pc, #32]	@ (8001740 <__NVIC_SetPriority+0x50>)
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	3b04      	subs	r3, #4
 8001728:	0112      	lsls	r2, r2, #4
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	440b      	add	r3, r1
 800172e:	761a      	strb	r2, [r3, #24]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000e100 	.word	0xe000e100
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001744:	b480      	push	{r7}
 8001746:	b089      	sub	sp, #36	@ 0x24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f1c3 0307 	rsb	r3, r3, #7
 800175e:	2b04      	cmp	r3, #4
 8001760:	bf28      	it	cs
 8001762:	2304      	movcs	r3, #4
 8001764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3304      	adds	r3, #4
 800176a:	2b06      	cmp	r3, #6
 800176c:	d902      	bls.n	8001774 <NVIC_EncodePriority+0x30>
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	3b03      	subs	r3, #3
 8001772:	e000      	b.n	8001776 <NVIC_EncodePriority+0x32>
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001778:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43da      	mvns	r2, r3
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	401a      	ands	r2, r3
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800178c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	fa01 f303 	lsl.w	r3, r1, r3
 8001796:	43d9      	mvns	r1, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	4313      	orrs	r3, r2
         );
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3724      	adds	r7, #36	@ 0x24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff ff4c 	bl	8001650 <__NVIC_SetPriorityGrouping>
}
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
 80017cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017d2:	f7ff ff61 	bl	8001698 <__NVIC_GetPriorityGrouping>
 80017d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	68b9      	ldr	r1, [r7, #8]
 80017dc:	6978      	ldr	r0, [r7, #20]
 80017de:	f7ff ffb1 	bl	8001744 <NVIC_EncodePriority>
 80017e2:	4602      	mov	r2, r0
 80017e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e8:	4611      	mov	r1, r2
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff ff80 	bl	80016f0 <__NVIC_SetPriority>
}
 80017f0:	bf00      	nop
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff ff54 	bl	80016b4 <__NVIC_EnableIRQ>
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e00e      	b.n	8001844 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	795b      	ldrb	r3, [r3, #5]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d105      	bne.n	800183c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7fe fe84 	bl	8000544 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e03b      	b.n	80018d6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d106      	bne.n	8001878 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7fe feba 	bl	80005ec <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2202      	movs	r2, #2
 800187c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685a      	ldr	r2, [r3, #4]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800189c:	f023 0107 	bic.w	r1, r3, #7
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80018b6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	68d1      	ldr	r1, [r2, #12]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	6812      	ldr	r2, [r2, #0]
 80018c2:	430b      	orrs	r3, r1
 80018c4:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b084      	sub	sp, #16
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d026      	beq.n	800194e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001906:	2b00      	cmp	r3, #0
 8001908:	d021      	beq.n	800194e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001918:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800191e:	f043 0201 	orr.w	r2, r3, #1
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2201      	movs	r2, #1
 800192c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2204      	movs	r2, #4
 8001932:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f003 0320 	and.w	r3, r3, #32
 8001954:	2b00      	cmp	r3, #0
 8001956:	d026      	beq.n	80019a6 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d021      	beq.n	80019a6 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001970:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2220      	movs	r2, #32
 8001978:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800197e:	f043 0202 	orr.w	r2, r3, #2
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2204      	movs	r2, #4
 800198a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f003 0308 	and.w	r3, r3, #8
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d026      	beq.n	80019fe <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d021      	beq.n	80019fe <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019c8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2208      	movs	r2, #8
 80019d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019d6:	f043 0204 	orr.w	r2, r3, #4
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2204      	movs	r2, #4
 80019e2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d013      	beq.n	8001a30 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00e      	beq.n	8001a30 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a20:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2204      	movs	r2, #4
 8001a28:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f853 	bl	8001ad6 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d024      	beq.n	8001a84 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d01f      	beq.n	8001a84 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001a52:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2202      	movs	r2, #2
 8001a5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f003 0310 	and.w	r3, r3, #16
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d01f      	beq.n	8001ace <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d01a      	beq.n	8001ace <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001aa6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2210      	movs	r2, #16
 8001aae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f80e 	bl	8001aea <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b087      	sub	sp, #28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d101      	bne.n	8001b20 <HAL_DMA2D_ConfigLayer+0x20>
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	e079      	b.n	8001c14 <HAL_DMA2D_ConfigLayer+0x114>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	011b      	lsls	r3, r3, #4
 8001b34:	3318      	adds	r3, #24
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	041b      	lsls	r3, r3, #16
 8001b46:	4313      	orrs	r3, r2
 8001b48:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001b4a:	4b35      	ldr	r3, [pc, #212]	@ (8001c20 <HAL_DMA2D_ConfigLayer+0x120>)
 8001b4c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b0a      	cmp	r3, #10
 8001b54:	d003      	beq.n	8001b5e <HAL_DMA2D_ConfigLayer+0x5e>
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b09      	cmp	r3, #9
 8001b5c:	d107      	bne.n	8001b6e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	e005      	b.n	8001b7a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	061b      	lsls	r3, r3, #24
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d120      	bne.n	8001bc2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	ea02 0103 	and.w	r1, r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	6812      	ldr	r2, [r2, #0]
 8001ba0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b0a      	cmp	r3, #10
 8001ba8:	d003      	beq.n	8001bb2 <HAL_DMA2D_ConfigLayer+0xb2>
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b09      	cmp	r3, #9
 8001bb0:	d127      	bne.n	8001c02 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	68da      	ldr	r2, [r3, #12]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001bbe:	629a      	str	r2, [r3, #40]	@ 0x28
 8001bc0:	e01f      	b.n	8001c02 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	69da      	ldr	r2, [r3, #28]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	ea02 0103 	and.w	r1, r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b0a      	cmp	r3, #10
 8001bea:	d003      	beq.n	8001bf4 <HAL_DMA2D_ConfigLayer+0xf4>
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b09      	cmp	r3, #9
 8001bf2:	d106      	bne.n	8001c02 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001c00:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	371c      	adds	r7, #28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	ff03000f 	.word	0xff03000f

08001c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b089      	sub	sp, #36	@ 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
 8001c3e:	e177      	b.n	8001f30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c40:	2201      	movs	r2, #1
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	f040 8166 	bne.w	8001f2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d005      	beq.n	8001c76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d130      	bne.n	8001cd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	2203      	movs	r2, #3
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	68da      	ldr	r2, [r3, #12]
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cac:	2201      	movs	r2, #1
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	091b      	lsrs	r3, r3, #4
 8001cc2:	f003 0201 	and.w	r2, r3, #1
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	2b03      	cmp	r3, #3
 8001ce2:	d017      	beq.n	8001d14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	2203      	movs	r2, #3
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d123      	bne.n	8001d68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	08da      	lsrs	r2, r3, #3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3208      	adds	r2, #8
 8001d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	220f      	movs	r2, #15
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	08da      	lsrs	r2, r3, #3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3208      	adds	r2, #8
 8001d62:	69b9      	ldr	r1, [r7, #24]
 8001d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	2203      	movs	r2, #3
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0203 	and.w	r2, r3, #3
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 80c0 	beq.w	8001f2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	4b66      	ldr	r3, [pc, #408]	@ (8001f48 <HAL_GPIO_Init+0x324>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db2:	4a65      	ldr	r2, [pc, #404]	@ (8001f48 <HAL_GPIO_Init+0x324>)
 8001db4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001db8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dba:	4b63      	ldr	r3, [pc, #396]	@ (8001f48 <HAL_GPIO_Init+0x324>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dc6:	4a61      	ldr	r2, [pc, #388]	@ (8001f4c <HAL_GPIO_Init+0x328>)
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	089b      	lsrs	r3, r3, #2
 8001dcc:	3302      	adds	r3, #2
 8001dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	220f      	movs	r2, #15
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4013      	ands	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a58      	ldr	r2, [pc, #352]	@ (8001f50 <HAL_GPIO_Init+0x32c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d037      	beq.n	8001e62 <HAL_GPIO_Init+0x23e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a57      	ldr	r2, [pc, #348]	@ (8001f54 <HAL_GPIO_Init+0x330>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d031      	beq.n	8001e5e <HAL_GPIO_Init+0x23a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a56      	ldr	r2, [pc, #344]	@ (8001f58 <HAL_GPIO_Init+0x334>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d02b      	beq.n	8001e5a <HAL_GPIO_Init+0x236>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a55      	ldr	r2, [pc, #340]	@ (8001f5c <HAL_GPIO_Init+0x338>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d025      	beq.n	8001e56 <HAL_GPIO_Init+0x232>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a54      	ldr	r2, [pc, #336]	@ (8001f60 <HAL_GPIO_Init+0x33c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d01f      	beq.n	8001e52 <HAL_GPIO_Init+0x22e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a53      	ldr	r2, [pc, #332]	@ (8001f64 <HAL_GPIO_Init+0x340>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d019      	beq.n	8001e4e <HAL_GPIO_Init+0x22a>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a52      	ldr	r2, [pc, #328]	@ (8001f68 <HAL_GPIO_Init+0x344>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d013      	beq.n	8001e4a <HAL_GPIO_Init+0x226>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a51      	ldr	r2, [pc, #324]	@ (8001f6c <HAL_GPIO_Init+0x348>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d00d      	beq.n	8001e46 <HAL_GPIO_Init+0x222>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a50      	ldr	r2, [pc, #320]	@ (8001f70 <HAL_GPIO_Init+0x34c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d007      	beq.n	8001e42 <HAL_GPIO_Init+0x21e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a4f      	ldr	r2, [pc, #316]	@ (8001f74 <HAL_GPIO_Init+0x350>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d101      	bne.n	8001e3e <HAL_GPIO_Init+0x21a>
 8001e3a:	2309      	movs	r3, #9
 8001e3c:	e012      	b.n	8001e64 <HAL_GPIO_Init+0x240>
 8001e3e:	230a      	movs	r3, #10
 8001e40:	e010      	b.n	8001e64 <HAL_GPIO_Init+0x240>
 8001e42:	2308      	movs	r3, #8
 8001e44:	e00e      	b.n	8001e64 <HAL_GPIO_Init+0x240>
 8001e46:	2307      	movs	r3, #7
 8001e48:	e00c      	b.n	8001e64 <HAL_GPIO_Init+0x240>
 8001e4a:	2306      	movs	r3, #6
 8001e4c:	e00a      	b.n	8001e64 <HAL_GPIO_Init+0x240>
 8001e4e:	2305      	movs	r3, #5
 8001e50:	e008      	b.n	8001e64 <HAL_GPIO_Init+0x240>
 8001e52:	2304      	movs	r3, #4
 8001e54:	e006      	b.n	8001e64 <HAL_GPIO_Init+0x240>
 8001e56:	2303      	movs	r3, #3
 8001e58:	e004      	b.n	8001e64 <HAL_GPIO_Init+0x240>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e002      	b.n	8001e64 <HAL_GPIO_Init+0x240>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <HAL_GPIO_Init+0x240>
 8001e62:	2300      	movs	r3, #0
 8001e64:	69fa      	ldr	r2, [r7, #28]
 8001e66:	f002 0203 	and.w	r2, r2, #3
 8001e6a:	0092      	lsls	r2, r2, #2
 8001e6c:	4093      	lsls	r3, r2
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e74:	4935      	ldr	r1, [pc, #212]	@ (8001f4c <HAL_GPIO_Init+0x328>)
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	089b      	lsrs	r3, r3, #2
 8001e7a:	3302      	adds	r3, #2
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e82:	4b3d      	ldr	r3, [pc, #244]	@ (8001f78 <HAL_GPIO_Init+0x354>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ea6:	4a34      	ldr	r2, [pc, #208]	@ (8001f78 <HAL_GPIO_Init+0x354>)
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eac:	4b32      	ldr	r3, [pc, #200]	@ (8001f78 <HAL_GPIO_Init+0x354>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ed0:	4a29      	ldr	r2, [pc, #164]	@ (8001f78 <HAL_GPIO_Init+0x354>)
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ed6:	4b28      	ldr	r3, [pc, #160]	@ (8001f78 <HAL_GPIO_Init+0x354>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001efa:	4a1f      	ldr	r2, [pc, #124]	@ (8001f78 <HAL_GPIO_Init+0x354>)
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f00:	4b1d      	ldr	r3, [pc, #116]	@ (8001f78 <HAL_GPIO_Init+0x354>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f24:	4a14      	ldr	r2, [pc, #80]	@ (8001f78 <HAL_GPIO_Init+0x354>)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	61fb      	str	r3, [r7, #28]
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	2b0f      	cmp	r3, #15
 8001f34:	f67f ae84 	bls.w	8001c40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f38:	bf00      	nop
 8001f3a:	bf00      	nop
 8001f3c:	3724      	adds	r7, #36	@ 0x24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40013800 	.word	0x40013800
 8001f50:	40020000 	.word	0x40020000
 8001f54:	40020400 	.word	0x40020400
 8001f58:	40020800 	.word	0x40020800
 8001f5c:	40020c00 	.word	0x40020c00
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40021400 	.word	0x40021400
 8001f68:	40021800 	.word	0x40021800
 8001f6c:	40021c00 	.word	0x40021c00
 8001f70:	40022000 	.word	0x40022000
 8001f74:	40022400 	.word	0x40022400
 8001f78:	40013c00 	.word	0x40013c00

08001f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	807b      	strh	r3, [r7, #2]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f8c:	787b      	ldrb	r3, [r7, #1]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f92:	887a      	ldrh	r2, [r7, #2]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f98:	e003      	b.n	8001fa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f9a:	887b      	ldrh	r3, [r7, #2]
 8001f9c:	041a      	lsls	r2, r3, #16
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	619a      	str	r2, [r3, #24]
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b085      	sub	sp, #20
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fc0:	887a      	ldrh	r2, [r7, #2]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	041a      	lsls	r2, r3, #16
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	43d9      	mvns	r1, r3
 8001fcc:	887b      	ldrh	r3, [r7, #2]
 8001fce:	400b      	ands	r3, r1
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	619a      	str	r2, [r3, #24]
}
 8001fd6:	bf00      	nop
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b086      	sub	sp, #24
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f004 fb15 	bl	8006628 <USB_GetMode>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b01      	cmp	r3, #1
 8002002:	f040 80fb 	bne.w	80021fc <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f004 fad8 	bl	80065c0 <USB_ReadInterrupts>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 80f1 	beq.w	80021fa <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f004 facf 	bl	80065c0 <USB_ReadInterrupts>
 8002022:	4603      	mov	r3, r0
 8002024:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002028:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800202c:	d104      	bne.n	8002038 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002036:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f004 fabf 	bl	80065c0 <USB_ReadInterrupts>
 8002042:	4603      	mov	r3, r0
 8002044:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002048:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800204c:	d104      	bne.n	8002058 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002056:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f004 faaf 	bl	80065c0 <USB_ReadInterrupts>
 8002062:	4603      	mov	r3, r0
 8002064:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002068:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800206c:	d104      	bne.n	8002078 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002076:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f004 fa9f 	bl	80065c0 <USB_ReadInterrupts>
 8002082:	4603      	mov	r3, r0
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b02      	cmp	r3, #2
 800208a:	d103      	bne.n	8002094 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2202      	movs	r2, #2
 8002092:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f004 fa91 	bl	80065c0 <USB_ReadInterrupts>
 800209e:	4603      	mov	r3, r0
 80020a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80020a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80020a8:	d120      	bne.n	80020ec <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80020b2:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d113      	bne.n	80020ec <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80020c4:	2110      	movs	r1, #16
 80020c6:	6938      	ldr	r0, [r7, #16]
 80020c8:	f004 f9c2 	bl	8006450 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80020cc:	6938      	ldr	r0, [r7, #16]
 80020ce:	f004 f9f1 	bl	80064b4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	7a5b      	ldrb	r3, [r3, #9]
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d105      	bne.n	80020e6 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2101      	movs	r1, #1
 80020e0:	4618      	mov	r0, r3
 80020e2:	f004 faaf 	bl	8006644 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f005 fe1e 	bl	8007d28 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f004 fa65 	bl	80065c0 <USB_ReadInterrupts>
 80020f6:	4603      	mov	r3, r0
 80020f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002100:	d102      	bne.n	8002108 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f001 fca1 	bl	8003a4a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f004 fa57 	bl	80065c0 <USB_ReadInterrupts>
 8002112:	4603      	mov	r3, r0
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b08      	cmp	r3, #8
 800211a:	d106      	bne.n	800212a <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f005 fde7 	bl	8007cf0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2208      	movs	r2, #8
 8002128:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f004 fa46 	bl	80065c0 <USB_ReadInterrupts>
 8002134:	4603      	mov	r3, r0
 8002136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800213a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800213e:	d139      	bne.n	80021b4 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f004 faba 	bl	80066be <USB_HC_ReadInterrupt>
 800214a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	e025      	b.n	800219e <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	fa22 f303 	lsr.w	r3, r2, r3
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d018      	beq.n	8002198 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	015a      	lsls	r2, r3, #5
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4413      	add	r3, r2
 800216e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002178:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800217c:	d106      	bne.n	800218c <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	4619      	mov	r1, r3
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f859 	bl	800223c <HCD_HC_IN_IRQHandler>
 800218a:	e005      	b.n	8002198 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	b2db      	uxtb	r3, r3
 8002190:	4619      	mov	r1, r3
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 febb 	bl	8002f0e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	3301      	adds	r3, #1
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	795b      	ldrb	r3, [r3, #5]
 80021a2:	461a      	mov	r2, r3
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d3d3      	bcc.n	8002152 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f004 fa01 	bl	80065c0 <USB_ReadInterrupts>
 80021be:	4603      	mov	r3, r0
 80021c0:	f003 0310 	and.w	r3, r3, #16
 80021c4:	2b10      	cmp	r3, #16
 80021c6:	d101      	bne.n	80021cc <HAL_HCD_IRQHandler+0x1ea>
 80021c8:	2301      	movs	r3, #1
 80021ca:	e000      	b.n	80021ce <HAL_HCD_IRQHandler+0x1ec>
 80021cc:	2300      	movs	r3, #0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d014      	beq.n	80021fc <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	699a      	ldr	r2, [r3, #24]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0210 	bic.w	r2, r2, #16
 80021e0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f001 fb52 	bl	800388c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	699a      	ldr	r2, [r3, #24]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0210 	orr.w	r2, r2, #16
 80021f6:	619a      	str	r2, [r3, #24]
 80021f8:	e000      	b.n	80021fc <HAL_HCD_IRQHandler+0x21a>
      return;
 80021fa:	bf00      	nop
    }
  }
}
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002210:	2b01      	cmp	r3, #1
 8002212:	d101      	bne.n	8002218 <HAL_HCD_Stop+0x16>
 8002214:	2302      	movs	r3, #2
 8002216:	e00d      	b.n	8002234 <HAL_HCD_Stop+0x32>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f004 fb7b 	bl	8006920 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	78fa      	ldrb	r2, [r7, #3]
 8002258:	4611      	mov	r1, r2
 800225a:	4618      	mov	r0, r3
 800225c:	f004 f9c3 	bl	80065e6 <USB_ReadChInterrupts>
 8002260:	4603      	mov	r3, r0
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	2b04      	cmp	r3, #4
 8002268:	d11a      	bne.n	80022a0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800226a:	78fb      	ldrb	r3, [r7, #3]
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4413      	add	r3, r2
 8002272:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002276:	461a      	mov	r2, r3
 8002278:	2304      	movs	r3, #4
 800227a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800227c:	78fa      	ldrb	r2, [r7, #3]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	1a9b      	subs	r3, r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	334d      	adds	r3, #77	@ 0x4d
 800228c:	2207      	movs	r2, #7
 800228e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	78fa      	ldrb	r2, [r7, #3]
 8002296:	4611      	mov	r1, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f004 fa21 	bl	80066e0 <USB_HC_Halt>
 800229e:	e09e      	b.n	80023de <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	78fa      	ldrb	r2, [r7, #3]
 80022a6:	4611      	mov	r1, r2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f004 f99c 	bl	80065e6 <USB_ReadChInterrupts>
 80022ae:	4603      	mov	r3, r0
 80022b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022b8:	d11b      	bne.n	80022f2 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80022ba:	78fb      	ldrb	r3, [r7, #3]
 80022bc:	015a      	lsls	r2, r3, #5
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4413      	add	r3, r2
 80022c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022c6:	461a      	mov	r2, r3
 80022c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80022ce:	78fa      	ldrb	r2, [r7, #3]
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	011b      	lsls	r3, r3, #4
 80022d6:	1a9b      	subs	r3, r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	440b      	add	r3, r1
 80022dc:	334d      	adds	r3, #77	@ 0x4d
 80022de:	2208      	movs	r2, #8
 80022e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	78fa      	ldrb	r2, [r7, #3]
 80022e8:	4611      	mov	r1, r2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f004 f9f8 	bl	80066e0 <USB_HC_Halt>
 80022f0:	e075      	b.n	80023de <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	78fa      	ldrb	r2, [r7, #3]
 80022f8:	4611      	mov	r1, r2
 80022fa:	4618      	mov	r0, r3
 80022fc:	f004 f973 	bl	80065e6 <USB_ReadChInterrupts>
 8002300:	4603      	mov	r3, r0
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b08      	cmp	r3, #8
 8002308:	d11a      	bne.n	8002340 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800230a:	78fb      	ldrb	r3, [r7, #3]
 800230c:	015a      	lsls	r2, r3, #5
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4413      	add	r3, r2
 8002312:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002316:	461a      	mov	r2, r3
 8002318:	2308      	movs	r3, #8
 800231a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800231c:	78fa      	ldrb	r2, [r7, #3]
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	011b      	lsls	r3, r3, #4
 8002324:	1a9b      	subs	r3, r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	334d      	adds	r3, #77	@ 0x4d
 800232c:	2206      	movs	r2, #6
 800232e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	78fa      	ldrb	r2, [r7, #3]
 8002336:	4611      	mov	r1, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f004 f9d1 	bl	80066e0 <USB_HC_Halt>
 800233e:	e04e      	b.n	80023de <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	78fa      	ldrb	r2, [r7, #3]
 8002346:	4611      	mov	r1, r2
 8002348:	4618      	mov	r0, r3
 800234a:	f004 f94c 	bl	80065e6 <USB_ReadChInterrupts>
 800234e:	4603      	mov	r3, r0
 8002350:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002354:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002358:	d11b      	bne.n	8002392 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800235a:	78fb      	ldrb	r3, [r7, #3]
 800235c:	015a      	lsls	r2, r3, #5
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	4413      	add	r3, r2
 8002362:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002366:	461a      	mov	r2, r3
 8002368:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800236c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800236e:	78fa      	ldrb	r2, [r7, #3]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	1a9b      	subs	r3, r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	334d      	adds	r3, #77	@ 0x4d
 800237e:	2209      	movs	r2, #9
 8002380:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	78fa      	ldrb	r2, [r7, #3]
 8002388:	4611      	mov	r1, r2
 800238a:	4618      	mov	r0, r3
 800238c:	f004 f9a8 	bl	80066e0 <USB_HC_Halt>
 8002390:	e025      	b.n	80023de <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	78fa      	ldrb	r2, [r7, #3]
 8002398:	4611      	mov	r1, r2
 800239a:	4618      	mov	r0, r3
 800239c:	f004 f923 	bl	80065e6 <USB_ReadChInterrupts>
 80023a0:	4603      	mov	r3, r0
 80023a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023a6:	2b80      	cmp	r3, #128	@ 0x80
 80023a8:	d119      	bne.n	80023de <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80023aa:	78fb      	ldrb	r3, [r7, #3]
 80023ac:	015a      	lsls	r2, r3, #5
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023b6:	461a      	mov	r2, r3
 80023b8:	2380      	movs	r3, #128	@ 0x80
 80023ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80023bc:	78fa      	ldrb	r2, [r7, #3]
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	011b      	lsls	r3, r3, #4
 80023c4:	1a9b      	subs	r3, r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	334d      	adds	r3, #77	@ 0x4d
 80023cc:	2207      	movs	r2, #7
 80023ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	78fa      	ldrb	r2, [r7, #3]
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f004 f981 	bl	80066e0 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	78fa      	ldrb	r2, [r7, #3]
 80023e4:	4611      	mov	r1, r2
 80023e6:	4618      	mov	r0, r3
 80023e8:	f004 f8fd 	bl	80065e6 <USB_ReadChInterrupts>
 80023ec:	4603      	mov	r3, r0
 80023ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023f6:	d112      	bne.n	800241e <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	78fa      	ldrb	r2, [r7, #3]
 80023fe:	4611      	mov	r1, r2
 8002400:	4618      	mov	r0, r3
 8002402:	f004 f96d 	bl	80066e0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002406:	78fb      	ldrb	r3, [r7, #3]
 8002408:	015a      	lsls	r2, r3, #5
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	4413      	add	r3, r2
 800240e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002412:	461a      	mov	r2, r3
 8002414:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002418:	6093      	str	r3, [r2, #8]
 800241a:	f000 bd75 	b.w	8002f08 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	78fa      	ldrb	r2, [r7, #3]
 8002424:	4611      	mov	r1, r2
 8002426:	4618      	mov	r0, r3
 8002428:	f004 f8dd 	bl	80065e6 <USB_ReadChInterrupts>
 800242c:	4603      	mov	r3, r0
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b01      	cmp	r3, #1
 8002434:	f040 8128 	bne.w	8002688 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002438:	78fb      	ldrb	r3, [r7, #3]
 800243a:	015a      	lsls	r2, r3, #5
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4413      	add	r3, r2
 8002440:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002444:	461a      	mov	r2, r3
 8002446:	2320      	movs	r3, #32
 8002448:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800244a:	78fa      	ldrb	r2, [r7, #3]
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	4613      	mov	r3, r2
 8002450:	011b      	lsls	r3, r3, #4
 8002452:	1a9b      	subs	r3, r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	440b      	add	r3, r1
 8002458:	331b      	adds	r3, #27
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d119      	bne.n	8002494 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002460:	78fa      	ldrb	r2, [r7, #3]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	1a9b      	subs	r3, r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	331b      	adds	r3, #27
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002474:	78fb      	ldrb	r3, [r7, #3]
 8002476:	015a      	lsls	r2, r3, #5
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4413      	add	r3, r2
 800247c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	78fa      	ldrb	r2, [r7, #3]
 8002484:	0151      	lsls	r1, r2, #5
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	440a      	add	r2, r1
 800248a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800248e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002492:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	799b      	ldrb	r3, [r3, #6]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d01b      	beq.n	80024d4 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800249c:	78fa      	ldrb	r2, [r7, #3]
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	1a9b      	subs	r3, r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	3330      	adds	r3, #48	@ 0x30
 80024ac:	6819      	ldr	r1, [r3, #0]
 80024ae:	78fb      	ldrb	r3, [r7, #3]
 80024b0:	015a      	lsls	r2, r3, #5
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4413      	add	r3, r2
 80024b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c0:	78fa      	ldrb	r2, [r7, #3]
 80024c2:	1ac9      	subs	r1, r1, r3
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	1a9b      	subs	r3, r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4403      	add	r3, r0
 80024d0:	3338      	adds	r3, #56	@ 0x38
 80024d2:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80024d4:	78fa      	ldrb	r2, [r7, #3]
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	011b      	lsls	r3, r3, #4
 80024dc:	1a9b      	subs	r3, r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	334d      	adds	r3, #77	@ 0x4d
 80024e4:	2201      	movs	r2, #1
 80024e6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80024e8:	78fa      	ldrb	r2, [r7, #3]
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	1a9b      	subs	r3, r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	3344      	adds	r3, #68	@ 0x44
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80024fc:	78fb      	ldrb	r3, [r7, #3]
 80024fe:	015a      	lsls	r2, r3, #5
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	4413      	add	r3, r2
 8002504:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002508:	461a      	mov	r2, r3
 800250a:	2301      	movs	r3, #1
 800250c:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800250e:	78fa      	ldrb	r2, [r7, #3]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	1a9b      	subs	r3, r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	3326      	adds	r3, #38	@ 0x26
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00a      	beq.n	800253a <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	3326      	adds	r3, #38	@ 0x26
 8002534:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002536:	2b02      	cmp	r3, #2
 8002538:	d110      	bne.n	800255c <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	78fa      	ldrb	r2, [r7, #3]
 8002540:	4611      	mov	r1, r2
 8002542:	4618      	mov	r0, r3
 8002544:	f004 f8cc 	bl	80066e0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002548:	78fb      	ldrb	r3, [r7, #3]
 800254a:	015a      	lsls	r2, r3, #5
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	4413      	add	r3, r2
 8002550:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002554:	461a      	mov	r2, r3
 8002556:	2310      	movs	r3, #16
 8002558:	6093      	str	r3, [r2, #8]
 800255a:	e03d      	b.n	80025d8 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800255c:	78fa      	ldrb	r2, [r7, #3]
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	1a9b      	subs	r3, r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	3326      	adds	r3, #38	@ 0x26
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b03      	cmp	r3, #3
 8002570:	d00a      	beq.n	8002588 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002572:	78fa      	ldrb	r2, [r7, #3]
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	4613      	mov	r3, r2
 8002578:	011b      	lsls	r3, r3, #4
 800257a:	1a9b      	subs	r3, r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	440b      	add	r3, r1
 8002580:	3326      	adds	r3, #38	@ 0x26
 8002582:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002584:	2b01      	cmp	r3, #1
 8002586:	d127      	bne.n	80025d8 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002588:	78fb      	ldrb	r3, [r7, #3]
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4413      	add	r3, r2
 8002590:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	78fa      	ldrb	r2, [r7, #3]
 8002598:	0151      	lsls	r1, r2, #5
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	440a      	add	r2, r1
 800259e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80025a2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80025a6:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80025a8:	78fa      	ldrb	r2, [r7, #3]
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	1a9b      	subs	r3, r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	334c      	adds	r3, #76	@ 0x4c
 80025b8:	2201      	movs	r2, #1
 80025ba:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80025bc:	78fa      	ldrb	r2, [r7, #3]
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	1a9b      	subs	r3, r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	334c      	adds	r3, #76	@ 0x4c
 80025cc:	781a      	ldrb	r2, [r3, #0]
 80025ce:	78fb      	ldrb	r3, [r7, #3]
 80025d0:	4619      	mov	r1, r3
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f005 fbb6 	bl	8007d44 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	799b      	ldrb	r3, [r3, #6]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d13b      	bne.n	8002658 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	1a9b      	subs	r3, r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	3338      	adds	r3, #56	@ 0x38
 80025f0:	6819      	ldr	r1, [r3, #0]
 80025f2:	78fa      	ldrb	r2, [r7, #3]
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	4613      	mov	r3, r2
 80025f8:	011b      	lsls	r3, r3, #4
 80025fa:	1a9b      	subs	r3, r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4403      	add	r3, r0
 8002600:	3328      	adds	r3, #40	@ 0x28
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	440b      	add	r3, r1
 8002606:	1e59      	subs	r1, r3, #1
 8002608:	78fa      	ldrb	r2, [r7, #3]
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4403      	add	r3, r0
 8002616:	3328      	adds	r3, #40	@ 0x28
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	fbb1 f3f3 	udiv	r3, r1, r3
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 8470 	beq.w	8002f08 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	333c      	adds	r3, #60	@ 0x3c
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	78fa      	ldrb	r2, [r7, #3]
 800263c:	f083 0301 	eor.w	r3, r3, #1
 8002640:	b2d8      	uxtb	r0, r3
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	1a9b      	subs	r3, r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	333c      	adds	r3, #60	@ 0x3c
 8002650:	4602      	mov	r2, r0
 8002652:	701a      	strb	r2, [r3, #0]
 8002654:	f000 bc58 	b.w	8002f08 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002658:	78fa      	ldrb	r2, [r7, #3]
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	1a9b      	subs	r3, r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	333c      	adds	r3, #60	@ 0x3c
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	78fa      	ldrb	r2, [r7, #3]
 800266c:	f083 0301 	eor.w	r3, r3, #1
 8002670:	b2d8      	uxtb	r0, r3
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	333c      	adds	r3, #60	@ 0x3c
 8002680:	4602      	mov	r2, r0
 8002682:	701a      	strb	r2, [r3, #0]
 8002684:	f000 bc40 	b.w	8002f08 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	78fa      	ldrb	r2, [r7, #3]
 800268e:	4611      	mov	r1, r2
 8002690:	4618      	mov	r0, r3
 8002692:	f003 ffa8 	bl	80065e6 <USB_ReadChInterrupts>
 8002696:	4603      	mov	r3, r0
 8002698:	f003 0320 	and.w	r3, r3, #32
 800269c:	2b20      	cmp	r3, #32
 800269e:	d131      	bne.n	8002704 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80026a0:	78fb      	ldrb	r3, [r7, #3]
 80026a2:	015a      	lsls	r2, r3, #5
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4413      	add	r3, r2
 80026a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026ac:	461a      	mov	r2, r3
 80026ae:	2320      	movs	r3, #32
 80026b0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80026b2:	78fa      	ldrb	r2, [r7, #3]
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	1a9b      	subs	r3, r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	331a      	adds	r3, #26
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	f040 841f 	bne.w	8002f08 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80026ca:	78fa      	ldrb	r2, [r7, #3]
 80026cc:	6879      	ldr	r1, [r7, #4]
 80026ce:	4613      	mov	r3, r2
 80026d0:	011b      	lsls	r3, r3, #4
 80026d2:	1a9b      	subs	r3, r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	440b      	add	r3, r1
 80026d8:	331b      	adds	r3, #27
 80026da:	2201      	movs	r2, #1
 80026dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80026de:	78fa      	ldrb	r2, [r7, #3]
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	1a9b      	subs	r3, r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	440b      	add	r3, r1
 80026ec:	334d      	adds	r3, #77	@ 0x4d
 80026ee:	2203      	movs	r2, #3
 80026f0:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	78fa      	ldrb	r2, [r7, #3]
 80026f8:	4611      	mov	r1, r2
 80026fa:	4618      	mov	r0, r3
 80026fc:	f003 fff0 	bl	80066e0 <USB_HC_Halt>
 8002700:	f000 bc02 	b.w	8002f08 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	78fa      	ldrb	r2, [r7, #3]
 800270a:	4611      	mov	r1, r2
 800270c:	4618      	mov	r0, r3
 800270e:	f003 ff6a 	bl	80065e6 <USB_ReadChInterrupts>
 8002712:	4603      	mov	r3, r0
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b02      	cmp	r3, #2
 800271a:	f040 8305 	bne.w	8002d28 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800271e:	78fb      	ldrb	r3, [r7, #3]
 8002720:	015a      	lsls	r2, r3, #5
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4413      	add	r3, r2
 8002726:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800272a:	461a      	mov	r2, r3
 800272c:	2302      	movs	r3, #2
 800272e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002730:	78fa      	ldrb	r2, [r7, #3]
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	4613      	mov	r3, r2
 8002736:	011b      	lsls	r3, r3, #4
 8002738:	1a9b      	subs	r3, r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	334d      	adds	r3, #77	@ 0x4d
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d114      	bne.n	8002770 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002746:	78fa      	ldrb	r2, [r7, #3]
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	4613      	mov	r3, r2
 800274c:	011b      	lsls	r3, r3, #4
 800274e:	1a9b      	subs	r3, r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	440b      	add	r3, r1
 8002754:	334d      	adds	r3, #77	@ 0x4d
 8002756:	2202      	movs	r2, #2
 8002758:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800275a:	78fa      	ldrb	r2, [r7, #3]
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	011b      	lsls	r3, r3, #4
 8002762:	1a9b      	subs	r3, r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	440b      	add	r3, r1
 8002768:	334c      	adds	r3, #76	@ 0x4c
 800276a:	2201      	movs	r2, #1
 800276c:	701a      	strb	r2, [r3, #0]
 800276e:	e2cc      	b.n	8002d0a <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002770:	78fa      	ldrb	r2, [r7, #3]
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	1a9b      	subs	r3, r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	334d      	adds	r3, #77	@ 0x4d
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b06      	cmp	r3, #6
 8002784:	d114      	bne.n	80027b0 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002786:	78fa      	ldrb	r2, [r7, #3]
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	1a9b      	subs	r3, r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	334d      	adds	r3, #77	@ 0x4d
 8002796:	2202      	movs	r2, #2
 8002798:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800279a:	78fa      	ldrb	r2, [r7, #3]
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	1a9b      	subs	r3, r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	440b      	add	r3, r1
 80027a8:	334c      	adds	r3, #76	@ 0x4c
 80027aa:	2205      	movs	r2, #5
 80027ac:	701a      	strb	r2, [r3, #0]
 80027ae:	e2ac      	b.n	8002d0a <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80027b0:	78fa      	ldrb	r2, [r7, #3]
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	1a9b      	subs	r3, r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	334d      	adds	r3, #77	@ 0x4d
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b07      	cmp	r3, #7
 80027c4:	d00b      	beq.n	80027de <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80027c6:	78fa      	ldrb	r2, [r7, #3]
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	1a9b      	subs	r3, r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	334d      	adds	r3, #77	@ 0x4d
 80027d6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80027d8:	2b09      	cmp	r3, #9
 80027da:	f040 80a6 	bne.w	800292a <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027de:	78fa      	ldrb	r2, [r7, #3]
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	1a9b      	subs	r3, r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	334d      	adds	r3, #77	@ 0x4d
 80027ee:	2202      	movs	r2, #2
 80027f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80027f2:	78fa      	ldrb	r2, [r7, #3]
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	4613      	mov	r3, r2
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	1a9b      	subs	r3, r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	440b      	add	r3, r1
 8002800:	3344      	adds	r3, #68	@ 0x44
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	1c59      	adds	r1, r3, #1
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	1a9b      	subs	r3, r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4403      	add	r3, r0
 8002812:	3344      	adds	r3, #68	@ 0x44
 8002814:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002816:	78fa      	ldrb	r2, [r7, #3]
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	4613      	mov	r3, r2
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	1a9b      	subs	r3, r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	3344      	adds	r3, #68	@ 0x44
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d943      	bls.n	80028b4 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800282c:	78fa      	ldrb	r2, [r7, #3]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	011b      	lsls	r3, r3, #4
 8002834:	1a9b      	subs	r3, r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	3344      	adds	r3, #68	@ 0x44
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002840:	78fa      	ldrb	r2, [r7, #3]
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	1a9b      	subs	r3, r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	331a      	adds	r3, #26
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d123      	bne.n	800289e <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002856:	78fa      	ldrb	r2, [r7, #3]
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	4613      	mov	r3, r2
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	1a9b      	subs	r3, r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	440b      	add	r3, r1
 8002864:	331b      	adds	r3, #27
 8002866:	2200      	movs	r2, #0
 8002868:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800286a:	78fa      	ldrb	r2, [r7, #3]
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	1a9b      	subs	r3, r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	440b      	add	r3, r1
 8002878:	331c      	adds	r3, #28
 800287a:	2200      	movs	r2, #0
 800287c:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800287e:	78fb      	ldrb	r3, [r7, #3]
 8002880:	015a      	lsls	r2, r3, #5
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4413      	add	r3, r2
 8002886:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	78fa      	ldrb	r2, [r7, #3]
 800288e:	0151      	lsls	r1, r2, #5
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	440a      	add	r2, r1
 8002894:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002898:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800289c:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800289e:	78fa      	ldrb	r2, [r7, #3]
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	4613      	mov	r3, r2
 80028a4:	011b      	lsls	r3, r3, #4
 80028a6:	1a9b      	subs	r3, r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	440b      	add	r3, r1
 80028ac:	334c      	adds	r3, #76	@ 0x4c
 80028ae:	2204      	movs	r2, #4
 80028b0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80028b2:	e229      	b.n	8002d08 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80028b4:	78fa      	ldrb	r2, [r7, #3]
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	1a9b      	subs	r3, r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	334c      	adds	r3, #76	@ 0x4c
 80028c4:	2202      	movs	r2, #2
 80028c6:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028c8:	78fa      	ldrb	r2, [r7, #3]
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	1a9b      	subs	r3, r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	3326      	adds	r3, #38	@ 0x26
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00b      	beq.n	80028f6 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80028de:	78fa      	ldrb	r2, [r7, #3]
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	4613      	mov	r3, r2
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	1a9b      	subs	r3, r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	440b      	add	r3, r1
 80028ec:	3326      	adds	r3, #38	@ 0x26
 80028ee:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	f040 8209 	bne.w	8002d08 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80028f6:	78fb      	ldrb	r3, [r7, #3]
 80028f8:	015a      	lsls	r2, r3, #5
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	4413      	add	r3, r2
 80028fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800290c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002914:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002916:	78fb      	ldrb	r3, [r7, #3]
 8002918:	015a      	lsls	r2, r3, #5
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4413      	add	r3, r2
 800291e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002922:	461a      	mov	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002928:	e1ee      	b.n	8002d08 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800292a:	78fa      	ldrb	r2, [r7, #3]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	1a9b      	subs	r3, r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	334d      	adds	r3, #77	@ 0x4d
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b05      	cmp	r3, #5
 800293e:	f040 80c8 	bne.w	8002ad2 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002942:	78fa      	ldrb	r2, [r7, #3]
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	4613      	mov	r3, r2
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	1a9b      	subs	r3, r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	440b      	add	r3, r1
 8002950:	334d      	adds	r3, #77	@ 0x4d
 8002952:	2202      	movs	r2, #2
 8002954:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002956:	78fa      	ldrb	r2, [r7, #3]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	1a9b      	subs	r3, r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	331b      	adds	r3, #27
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b01      	cmp	r3, #1
 800296a:	f040 81ce 	bne.w	8002d0a <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800296e:	78fa      	ldrb	r2, [r7, #3]
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	1a9b      	subs	r3, r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	3326      	adds	r3, #38	@ 0x26
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b03      	cmp	r3, #3
 8002982:	d16b      	bne.n	8002a5c <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002984:	78fa      	ldrb	r2, [r7, #3]
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	4613      	mov	r3, r2
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	1a9b      	subs	r3, r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	3348      	adds	r3, #72	@ 0x48
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	1c59      	adds	r1, r3, #1
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	011b      	lsls	r3, r3, #4
 800299e:	1a9b      	subs	r3, r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4403      	add	r3, r0
 80029a4:	3348      	adds	r3, #72	@ 0x48
 80029a6:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	3348      	adds	r3, #72	@ 0x48
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d943      	bls.n	8002a46 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80029be:	78fa      	ldrb	r2, [r7, #3]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	3348      	adds	r3, #72	@ 0x48
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80029d2:	78fa      	ldrb	r2, [r7, #3]
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	011b      	lsls	r3, r3, #4
 80029da:	1a9b      	subs	r3, r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	440b      	add	r3, r1
 80029e0:	331b      	adds	r3, #27
 80029e2:	2200      	movs	r2, #0
 80029e4:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80029e6:	78fa      	ldrb	r2, [r7, #3]
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	4613      	mov	r3, r2
 80029ec:	011b      	lsls	r3, r3, #4
 80029ee:	1a9b      	subs	r3, r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	440b      	add	r3, r1
 80029f4:	3344      	adds	r3, #68	@ 0x44
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d809      	bhi.n	8002a10 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80029fc:	78fa      	ldrb	r2, [r7, #3]
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	011b      	lsls	r3, r3, #4
 8002a04:	1a9b      	subs	r3, r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	331c      	adds	r3, #28
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002a10:	78fb      	ldrb	r3, [r7, #3]
 8002a12:	015a      	lsls	r2, r3, #5
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	78fa      	ldrb	r2, [r7, #3]
 8002a20:	0151      	lsls	r1, r2, #5
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	440a      	add	r2, r1
 8002a26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a2e:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002a30:	78fa      	ldrb	r2, [r7, #3]
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	1a9b      	subs	r3, r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	334c      	adds	r3, #76	@ 0x4c
 8002a40:	2204      	movs	r2, #4
 8002a42:	701a      	strb	r2, [r3, #0]
 8002a44:	e014      	b.n	8002a70 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a46:	78fa      	ldrb	r2, [r7, #3]
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	1a9b      	subs	r3, r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	440b      	add	r3, r1
 8002a54:	334c      	adds	r3, #76	@ 0x4c
 8002a56:	2202      	movs	r2, #2
 8002a58:	701a      	strb	r2, [r3, #0]
 8002a5a:	e009      	b.n	8002a70 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a5c:	78fa      	ldrb	r2, [r7, #3]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	1a9b      	subs	r3, r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	334c      	adds	r3, #76	@ 0x4c
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a70:	78fa      	ldrb	r2, [r7, #3]
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	011b      	lsls	r3, r3, #4
 8002a78:	1a9b      	subs	r3, r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	3326      	adds	r3, #38	@ 0x26
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00b      	beq.n	8002a9e <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a86:	78fa      	ldrb	r2, [r7, #3]
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	1a9b      	subs	r3, r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	440b      	add	r3, r1
 8002a94:	3326      	adds	r3, #38	@ 0x26
 8002a96:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	f040 8136 	bne.w	8002d0a <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a9e:	78fb      	ldrb	r3, [r7, #3]
 8002aa0:	015a      	lsls	r2, r3, #5
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002ab4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002abc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	015a      	lsls	r2, r3, #5
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aca:	461a      	mov	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	e11b      	b.n	8002d0a <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002ad2:	78fa      	ldrb	r2, [r7, #3]
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	1a9b      	subs	r3, r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	440b      	add	r3, r1
 8002ae0:	334d      	adds	r3, #77	@ 0x4d
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	f040 8081 	bne.w	8002bec <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002aea:	78fa      	ldrb	r2, [r7, #3]
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	4613      	mov	r3, r2
 8002af0:	011b      	lsls	r3, r3, #4
 8002af2:	1a9b      	subs	r3, r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	440b      	add	r3, r1
 8002af8:	334d      	adds	r3, #77	@ 0x4d
 8002afa:	2202      	movs	r2, #2
 8002afc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002afe:	78fa      	ldrb	r2, [r7, #3]
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	4613      	mov	r3, r2
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	1a9b      	subs	r3, r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	331b      	adds	r3, #27
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	f040 80fa 	bne.w	8002d0a <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b16:	78fa      	ldrb	r2, [r7, #3]
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	011b      	lsls	r3, r3, #4
 8002b1e:	1a9b      	subs	r3, r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	440b      	add	r3, r1
 8002b24:	334c      	adds	r3, #76	@ 0x4c
 8002b26:	2202      	movs	r2, #2
 8002b28:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002b2a:	78fb      	ldrb	r3, [r7, #3]
 8002b2c:	015a      	lsls	r2, r3, #5
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	4413      	add	r3, r2
 8002b32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	78fa      	ldrb	r2, [r7, #3]
 8002b3a:	0151      	lsls	r1, r2, #5
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	440a      	add	r2, r1
 8002b40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b48:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002b4a:	78fb      	ldrb	r3, [r7, #3]
 8002b4c:	015a      	lsls	r2, r3, #5
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	4413      	add	r3, r2
 8002b52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	78fa      	ldrb	r2, [r7, #3]
 8002b5a:	0151      	lsls	r1, r2, #5
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	440a      	add	r2, r1
 8002b60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b68:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002b6a:	78fb      	ldrb	r3, [r7, #3]
 8002b6c:	015a      	lsls	r2, r3, #5
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4413      	add	r3, r2
 8002b72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	78fa      	ldrb	r2, [r7, #3]
 8002b7a:	0151      	lsls	r1, r2, #5
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	440a      	add	r2, r1
 8002b80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b84:	f023 0320 	bic.w	r3, r3, #32
 8002b88:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b8a:	78fa      	ldrb	r2, [r7, #3]
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	1a9b      	subs	r3, r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	3326      	adds	r3, #38	@ 0x26
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00b      	beq.n	8002bb8 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002ba0:	78fa      	ldrb	r2, [r7, #3]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	1a9b      	subs	r3, r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	3326      	adds	r3, #38	@ 0x26
 8002bb0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	f040 80a9 	bne.w	8002d0a <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002bb8:	78fb      	ldrb	r3, [r7, #3]
 8002bba:	015a      	lsls	r2, r3, #5
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002bce:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002bd6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002bd8:	78fb      	ldrb	r3, [r7, #3]
 8002bda:	015a      	lsls	r2, r3, #5
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	4413      	add	r3, r2
 8002be0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002be4:	461a      	mov	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e08e      	b.n	8002d0a <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002bec:	78fa      	ldrb	r2, [r7, #3]
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	1a9b      	subs	r3, r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	334d      	adds	r3, #77	@ 0x4d
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d143      	bne.n	8002c8a <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c02:	78fa      	ldrb	r2, [r7, #3]
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	011b      	lsls	r3, r3, #4
 8002c0a:	1a9b      	subs	r3, r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	440b      	add	r3, r1
 8002c10:	334d      	adds	r3, #77	@ 0x4d
 8002c12:	2202      	movs	r2, #2
 8002c14:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c16:	78fa      	ldrb	r2, [r7, #3]
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	011b      	lsls	r3, r3, #4
 8002c1e:	1a9b      	subs	r3, r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	440b      	add	r3, r1
 8002c24:	334c      	adds	r3, #76	@ 0x4c
 8002c26:	2202      	movs	r2, #2
 8002c28:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c2a:	78fa      	ldrb	r2, [r7, #3]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	1a9b      	subs	r3, r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	3326      	adds	r3, #38	@ 0x26
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00a      	beq.n	8002c56 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c40:	78fa      	ldrb	r2, [r7, #3]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	3326      	adds	r3, #38	@ 0x26
 8002c50:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d159      	bne.n	8002d0a <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002c56:	78fb      	ldrb	r3, [r7, #3]
 8002c58:	015a      	lsls	r2, r3, #5
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002c6c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002c74:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002c76:	78fb      	ldrb	r3, [r7, #3]
 8002c78:	015a      	lsls	r2, r3, #5
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c82:	461a      	mov	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6013      	str	r3, [r2, #0]
 8002c88:	e03f      	b.n	8002d0a <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002c8a:	78fa      	ldrb	r2, [r7, #3]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	1a9b      	subs	r3, r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	334d      	adds	r3, #77	@ 0x4d
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d126      	bne.n	8002cee <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ca0:	78fa      	ldrb	r2, [r7, #3]
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	1a9b      	subs	r3, r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	334d      	adds	r3, #77	@ 0x4d
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002cb4:	78fa      	ldrb	r2, [r7, #3]
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	011b      	lsls	r3, r3, #4
 8002cbc:	1a9b      	subs	r3, r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	3344      	adds	r3, #68	@ 0x44
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	1c59      	adds	r1, r3, #1
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	1a9b      	subs	r3, r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4403      	add	r3, r0
 8002cd4:	3344      	adds	r3, #68	@ 0x44
 8002cd6:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002cd8:	78fa      	ldrb	r2, [r7, #3]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	1a9b      	subs	r3, r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	334c      	adds	r3, #76	@ 0x4c
 8002ce8:	2204      	movs	r2, #4
 8002cea:	701a      	strb	r2, [r3, #0]
 8002cec:	e00d      	b.n	8002d0a <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002cee:	78fa      	ldrb	r2, [r7, #3]
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	1a9b      	subs	r3, r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	334d      	adds	r3, #77	@ 0x4d
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	f000 8100 	beq.w	8002f06 <HCD_HC_IN_IRQHandler+0xcca>
 8002d06:	e000      	b.n	8002d0a <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d08:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002d0a:	78fa      	ldrb	r2, [r7, #3]
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	011b      	lsls	r3, r3, #4
 8002d12:	1a9b      	subs	r3, r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	440b      	add	r3, r1
 8002d18:	334c      	adds	r3, #76	@ 0x4c
 8002d1a:	781a      	ldrb	r2, [r3, #0]
 8002d1c:	78fb      	ldrb	r3, [r7, #3]
 8002d1e:	4619      	mov	r1, r3
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f005 f80f 	bl	8007d44 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002d26:	e0ef      	b.n	8002f08 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	78fa      	ldrb	r2, [r7, #3]
 8002d2e:	4611      	mov	r1, r2
 8002d30:	4618      	mov	r0, r3
 8002d32:	f003 fc58 	bl	80065e6 <USB_ReadChInterrupts>
 8002d36:	4603      	mov	r3, r0
 8002d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d3c:	2b40      	cmp	r3, #64	@ 0x40
 8002d3e:	d12f      	bne.n	8002da0 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d40:	78fb      	ldrb	r3, [r7, #3]
 8002d42:	015a      	lsls	r2, r3, #5
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	4413      	add	r3, r2
 8002d48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	2340      	movs	r3, #64	@ 0x40
 8002d50:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002d52:	78fa      	ldrb	r2, [r7, #3]
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	4613      	mov	r3, r2
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	1a9b      	subs	r3, r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	440b      	add	r3, r1
 8002d60:	334d      	adds	r3, #77	@ 0x4d
 8002d62:	2205      	movs	r2, #5
 8002d64:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002d66:	78fa      	ldrb	r2, [r7, #3]
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	1a9b      	subs	r3, r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	440b      	add	r3, r1
 8002d74:	331a      	adds	r3, #26
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d109      	bne.n	8002d90 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d7c:	78fa      	ldrb	r2, [r7, #3]
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	4613      	mov	r3, r2
 8002d82:	011b      	lsls	r3, r3, #4
 8002d84:	1a9b      	subs	r3, r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	3344      	adds	r3, #68	@ 0x44
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	78fa      	ldrb	r2, [r7, #3]
 8002d96:	4611      	mov	r1, r2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f003 fca1 	bl	80066e0 <USB_HC_Halt>
 8002d9e:	e0b3      	b.n	8002f08 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	78fa      	ldrb	r2, [r7, #3]
 8002da6:	4611      	mov	r1, r2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f003 fc1c 	bl	80065e6 <USB_ReadChInterrupts>
 8002dae:	4603      	mov	r3, r0
 8002db0:	f003 0310 	and.w	r3, r3, #16
 8002db4:	2b10      	cmp	r3, #16
 8002db6:	f040 80a7 	bne.w	8002f08 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002dba:	78fa      	ldrb	r2, [r7, #3]
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	011b      	lsls	r3, r3, #4
 8002dc2:	1a9b      	subs	r3, r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	3326      	adds	r3, #38	@ 0x26
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b03      	cmp	r3, #3
 8002dce:	d11b      	bne.n	8002e08 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002dd0:	78fa      	ldrb	r2, [r7, #3]
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	011b      	lsls	r3, r3, #4
 8002dd8:	1a9b      	subs	r3, r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	3344      	adds	r3, #68	@ 0x44
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002de4:	78fa      	ldrb	r2, [r7, #3]
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	4613      	mov	r3, r2
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	1a9b      	subs	r3, r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	334d      	adds	r3, #77	@ 0x4d
 8002df4:	2204      	movs	r2, #4
 8002df6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f003 fc6d 	bl	80066e0 <USB_HC_Halt>
 8002e06:	e03f      	b.n	8002e88 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e08:	78fa      	ldrb	r2, [r7, #3]
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	1a9b      	subs	r3, r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	3326      	adds	r3, #38	@ 0x26
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00a      	beq.n	8002e34 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002e1e:	78fa      	ldrb	r2, [r7, #3]
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	4613      	mov	r3, r2
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	1a9b      	subs	r3, r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	3326      	adds	r3, #38	@ 0x26
 8002e2e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d129      	bne.n	8002e88 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002e34:	78fa      	ldrb	r2, [r7, #3]
 8002e36:	6879      	ldr	r1, [r7, #4]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	1a9b      	subs	r3, r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	3344      	adds	r3, #68	@ 0x44
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	799b      	ldrb	r3, [r3, #6]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00a      	beq.n	8002e66 <HCD_HC_IN_IRQHandler+0xc2a>
 8002e50:	78fa      	ldrb	r2, [r7, #3]
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	1a9b      	subs	r3, r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	331b      	adds	r3, #27
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d110      	bne.n	8002e88 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002e66:	78fa      	ldrb	r2, [r7, #3]
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	1a9b      	subs	r3, r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	334d      	adds	r3, #77	@ 0x4d
 8002e76:	2204      	movs	r2, #4
 8002e78:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	78fa      	ldrb	r2, [r7, #3]
 8002e80:	4611      	mov	r1, r2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f003 fc2c 	bl	80066e0 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002e88:	78fa      	ldrb	r2, [r7, #3]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	1a9b      	subs	r3, r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	331b      	adds	r3, #27
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d129      	bne.n	8002ef2 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002e9e:	78fa      	ldrb	r2, [r7, #3]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	1a9b      	subs	r3, r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	331b      	adds	r3, #27
 8002eae:	2200      	movs	r2, #0
 8002eb0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002eb2:	78fb      	ldrb	r3, [r7, #3]
 8002eb4:	015a      	lsls	r2, r3, #5
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	78fa      	ldrb	r2, [r7, #3]
 8002ec2:	0151      	lsls	r1, r2, #5
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	440a      	add	r2, r1
 8002ec8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ecc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ed0:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002ed2:	78fb      	ldrb	r3, [r7, #3]
 8002ed4:	015a      	lsls	r2, r3, #5
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	4413      	add	r3, r2
 8002eda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	78fa      	ldrb	r2, [r7, #3]
 8002ee2:	0151      	lsls	r1, r2, #5
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	440a      	add	r2, r1
 8002ee8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002eec:	f043 0320 	orr.w	r3, r3, #32
 8002ef0:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002ef2:	78fb      	ldrb	r3, [r7, #3]
 8002ef4:	015a      	lsls	r2, r3, #5
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	4413      	add	r3, r2
 8002efa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002efe:	461a      	mov	r2, r3
 8002f00:	2310      	movs	r3, #16
 8002f02:	6093      	str	r3, [r2, #8]
 8002f04:	e000      	b.n	8002f08 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002f06:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002f08:	3718      	adds	r7, #24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b086      	sub	sp, #24
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	460b      	mov	r3, r1
 8002f18:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	78fa      	ldrb	r2, [r7, #3]
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f003 fb5a 	bl	80065e6 <USB_ReadChInterrupts>
 8002f32:	4603      	mov	r3, r0
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d11b      	bne.n	8002f74 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002f3c:	78fb      	ldrb	r3, [r7, #3]
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f48:	461a      	mov	r2, r3
 8002f4a:	2304      	movs	r3, #4
 8002f4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002f4e:	78fa      	ldrb	r2, [r7, #3]
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	011b      	lsls	r3, r3, #4
 8002f56:	1a9b      	subs	r3, r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	334d      	adds	r3, #77	@ 0x4d
 8002f5e:	2207      	movs	r2, #7
 8002f60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	78fa      	ldrb	r2, [r7, #3]
 8002f68:	4611      	mov	r1, r2
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f003 fbb8 	bl	80066e0 <USB_HC_Halt>
 8002f70:	f000 bc89 	b.w	8003886 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	78fa      	ldrb	r2, [r7, #3]
 8002f7a:	4611      	mov	r1, r2
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f003 fb32 	bl	80065e6 <USB_ReadChInterrupts>
 8002f82:	4603      	mov	r3, r0
 8002f84:	f003 0320 	and.w	r3, r3, #32
 8002f88:	2b20      	cmp	r3, #32
 8002f8a:	f040 8082 	bne.w	8003092 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002f8e:	78fb      	ldrb	r3, [r7, #3]
 8002f90:	015a      	lsls	r2, r3, #5
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	4413      	add	r3, r2
 8002f96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	2320      	movs	r3, #32
 8002f9e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002fa0:	78fa      	ldrb	r2, [r7, #3]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	3319      	adds	r3, #25
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d124      	bne.n	8003000 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002fb6:	78fa      	ldrb	r2, [r7, #3]
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	1a9b      	subs	r3, r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	3319      	adds	r3, #25
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002fca:	78fa      	ldrb	r2, [r7, #3]
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	1a9b      	subs	r3, r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	334c      	adds	r3, #76	@ 0x4c
 8002fda:	2202      	movs	r2, #2
 8002fdc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002fde:	78fa      	ldrb	r2, [r7, #3]
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	1a9b      	subs	r3, r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	334d      	adds	r3, #77	@ 0x4d
 8002fee:	2203      	movs	r2, #3
 8002ff0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	78fa      	ldrb	r2, [r7, #3]
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f003 fb70 	bl	80066e0 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003000:	78fa      	ldrb	r2, [r7, #3]
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	1a9b      	subs	r3, r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	331a      	adds	r3, #26
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	2b01      	cmp	r3, #1
 8003014:	f040 8437 	bne.w	8003886 <HCD_HC_OUT_IRQHandler+0x978>
 8003018:	78fa      	ldrb	r2, [r7, #3]
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	1a9b      	subs	r3, r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	331b      	adds	r3, #27
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	f040 842b 	bne.w	8003886 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003030:	78fa      	ldrb	r2, [r7, #3]
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	4613      	mov	r3, r2
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	1a9b      	subs	r3, r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	440b      	add	r3, r1
 800303e:	3326      	adds	r3, #38	@ 0x26
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d009      	beq.n	800305a <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003046:	78fa      	ldrb	r2, [r7, #3]
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	1a9b      	subs	r3, r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	440b      	add	r3, r1
 8003054:	331b      	adds	r3, #27
 8003056:	2201      	movs	r2, #1
 8003058:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800305a:	78fa      	ldrb	r2, [r7, #3]
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	1a9b      	subs	r3, r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	334d      	adds	r3, #77	@ 0x4d
 800306a:	2203      	movs	r2, #3
 800306c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	4611      	mov	r1, r2
 8003076:	4618      	mov	r0, r3
 8003078:	f003 fb32 	bl	80066e0 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800307c:	78fa      	ldrb	r2, [r7, #3]
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	1a9b      	subs	r3, r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	3344      	adds	r3, #68	@ 0x44
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	e3f9      	b.n	8003886 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	4611      	mov	r1, r2
 800309a:	4618      	mov	r0, r3
 800309c:	f003 faa3 	bl	80065e6 <USB_ReadChInterrupts>
 80030a0:	4603      	mov	r3, r0
 80030a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030aa:	d111      	bne.n	80030d0 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80030ac:	78fb      	ldrb	r3, [r7, #3]
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030b8:	461a      	mov	r2, r3
 80030ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80030be:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	78fa      	ldrb	r2, [r7, #3]
 80030c6:	4611      	mov	r1, r2
 80030c8:	4618      	mov	r0, r3
 80030ca:	f003 fb09 	bl	80066e0 <USB_HC_Halt>
 80030ce:	e3da      	b.n	8003886 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	78fa      	ldrb	r2, [r7, #3]
 80030d6:	4611      	mov	r1, r2
 80030d8:	4618      	mov	r0, r3
 80030da:	f003 fa84 	bl	80065e6 <USB_ReadChInterrupts>
 80030de:	4603      	mov	r3, r0
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d168      	bne.n	80031ba <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80030e8:	78fa      	ldrb	r2, [r7, #3]
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	1a9b      	subs	r3, r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	3344      	adds	r3, #68	@ 0x44
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	78fa      	ldrb	r2, [r7, #3]
 8003102:	4611      	mov	r1, r2
 8003104:	4618      	mov	r0, r3
 8003106:	f003 fa6e 	bl	80065e6 <USB_ReadChInterrupts>
 800310a:	4603      	mov	r3, r0
 800310c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003110:	2b40      	cmp	r3, #64	@ 0x40
 8003112:	d112      	bne.n	800313a <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003114:	78fa      	ldrb	r2, [r7, #3]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	3319      	adds	r3, #25
 8003124:	2201      	movs	r2, #1
 8003126:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003128:	78fb      	ldrb	r3, [r7, #3]
 800312a:	015a      	lsls	r2, r3, #5
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	4413      	add	r3, r2
 8003130:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003134:	461a      	mov	r2, r3
 8003136:	2340      	movs	r3, #64	@ 0x40
 8003138:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800313a:	78fa      	ldrb	r2, [r7, #3]
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	1a9b      	subs	r3, r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	440b      	add	r3, r1
 8003148:	331b      	adds	r3, #27
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d019      	beq.n	8003184 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003150:	78fa      	ldrb	r2, [r7, #3]
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	1a9b      	subs	r3, r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	331b      	adds	r3, #27
 8003160:	2200      	movs	r2, #0
 8003162:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	015a      	lsls	r2, r3, #5
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	4413      	add	r3, r2
 800316c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	78fa      	ldrb	r2, [r7, #3]
 8003174:	0151      	lsls	r1, r2, #5
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	440a      	add	r2, r1
 800317a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800317e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003182:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003184:	78fb      	ldrb	r3, [r7, #3]
 8003186:	015a      	lsls	r2, r3, #5
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	4413      	add	r3, r2
 800318c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003190:	461a      	mov	r2, r3
 8003192:	2301      	movs	r3, #1
 8003194:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003196:	78fa      	ldrb	r2, [r7, #3]
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	1a9b      	subs	r3, r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	334d      	adds	r3, #77	@ 0x4d
 80031a6:	2201      	movs	r2, #1
 80031a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	78fa      	ldrb	r2, [r7, #3]
 80031b0:	4611      	mov	r1, r2
 80031b2:	4618      	mov	r0, r3
 80031b4:	f003 fa94 	bl	80066e0 <USB_HC_Halt>
 80031b8:	e365      	b.n	8003886 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	78fa      	ldrb	r2, [r7, #3]
 80031c0:	4611      	mov	r1, r2
 80031c2:	4618      	mov	r0, r3
 80031c4:	f003 fa0f 	bl	80065e6 <USB_ReadChInterrupts>
 80031c8:	4603      	mov	r3, r0
 80031ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ce:	2b40      	cmp	r3, #64	@ 0x40
 80031d0:	d139      	bne.n	8003246 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80031d2:	78fa      	ldrb	r2, [r7, #3]
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	1a9b      	subs	r3, r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	440b      	add	r3, r1
 80031e0:	334d      	adds	r3, #77	@ 0x4d
 80031e2:	2205      	movs	r2, #5
 80031e4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80031e6:	78fa      	ldrb	r2, [r7, #3]
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	4613      	mov	r3, r2
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	1a9b      	subs	r3, r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	331a      	adds	r3, #26
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d109      	bne.n	8003210 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80031fc:	78fa      	ldrb	r2, [r7, #3]
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	1a9b      	subs	r3, r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	3319      	adds	r3, #25
 800320c:	2201      	movs	r2, #1
 800320e:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003210:	78fa      	ldrb	r2, [r7, #3]
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	1a9b      	subs	r3, r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	3344      	adds	r3, #68	@ 0x44
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	78fa      	ldrb	r2, [r7, #3]
 800322a:	4611      	mov	r1, r2
 800322c:	4618      	mov	r0, r3
 800322e:	f003 fa57 	bl	80066e0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003232:	78fb      	ldrb	r3, [r7, #3]
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4413      	add	r3, r2
 800323a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800323e:	461a      	mov	r2, r3
 8003240:	2340      	movs	r3, #64	@ 0x40
 8003242:	6093      	str	r3, [r2, #8]
 8003244:	e31f      	b.n	8003886 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	78fa      	ldrb	r2, [r7, #3]
 800324c:	4611      	mov	r1, r2
 800324e:	4618      	mov	r0, r3
 8003250:	f003 f9c9 	bl	80065e6 <USB_ReadChInterrupts>
 8003254:	4603      	mov	r3, r0
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b08      	cmp	r3, #8
 800325c:	d11a      	bne.n	8003294 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800325e:	78fb      	ldrb	r3, [r7, #3]
 8003260:	015a      	lsls	r2, r3, #5
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	4413      	add	r3, r2
 8003266:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800326a:	461a      	mov	r2, r3
 800326c:	2308      	movs	r3, #8
 800326e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003270:	78fa      	ldrb	r2, [r7, #3]
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	1a9b      	subs	r3, r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	334d      	adds	r3, #77	@ 0x4d
 8003280:	2206      	movs	r2, #6
 8003282:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	78fa      	ldrb	r2, [r7, #3]
 800328a:	4611      	mov	r1, r2
 800328c:	4618      	mov	r0, r3
 800328e:	f003 fa27 	bl	80066e0 <USB_HC_Halt>
 8003292:	e2f8      	b.n	8003886 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	78fa      	ldrb	r2, [r7, #3]
 800329a:	4611      	mov	r1, r2
 800329c:	4618      	mov	r0, r3
 800329e:	f003 f9a2 	bl	80065e6 <USB_ReadChInterrupts>
 80032a2:	4603      	mov	r3, r0
 80032a4:	f003 0310 	and.w	r3, r3, #16
 80032a8:	2b10      	cmp	r3, #16
 80032aa:	d144      	bne.n	8003336 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80032ac:	78fa      	ldrb	r2, [r7, #3]
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	1a9b      	subs	r3, r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	3344      	adds	r3, #68	@ 0x44
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80032c0:	78fa      	ldrb	r2, [r7, #3]
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	4613      	mov	r3, r2
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	1a9b      	subs	r3, r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	334d      	adds	r3, #77	@ 0x4d
 80032d0:	2204      	movs	r2, #4
 80032d2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80032d4:	78fa      	ldrb	r2, [r7, #3]
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	4613      	mov	r3, r2
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	3319      	adds	r3, #25
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d114      	bne.n	8003314 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80032ea:	78fa      	ldrb	r2, [r7, #3]
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	3318      	adds	r3, #24
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d109      	bne.n	8003314 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003300:	78fa      	ldrb	r2, [r7, #3]
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	4613      	mov	r3, r2
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	3319      	adds	r3, #25
 8003310:	2201      	movs	r2, #1
 8003312:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	78fa      	ldrb	r2, [r7, #3]
 800331a:	4611      	mov	r1, r2
 800331c:	4618      	mov	r0, r3
 800331e:	f003 f9df 	bl	80066e0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003322:	78fb      	ldrb	r3, [r7, #3]
 8003324:	015a      	lsls	r2, r3, #5
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	4413      	add	r3, r2
 800332a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800332e:	461a      	mov	r2, r3
 8003330:	2310      	movs	r3, #16
 8003332:	6093      	str	r3, [r2, #8]
 8003334:	e2a7      	b.n	8003886 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	78fa      	ldrb	r2, [r7, #3]
 800333c:	4611      	mov	r1, r2
 800333e:	4618      	mov	r0, r3
 8003340:	f003 f951 	bl	80065e6 <USB_ReadChInterrupts>
 8003344:	4603      	mov	r3, r0
 8003346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800334a:	2b80      	cmp	r3, #128	@ 0x80
 800334c:	f040 8083 	bne.w	8003456 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	799b      	ldrb	r3, [r3, #6]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d111      	bne.n	800337c <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003358:	78fa      	ldrb	r2, [r7, #3]
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	1a9b      	subs	r3, r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	334d      	adds	r3, #77	@ 0x4d
 8003368:	2207      	movs	r2, #7
 800336a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	78fa      	ldrb	r2, [r7, #3]
 8003372:	4611      	mov	r1, r2
 8003374:	4618      	mov	r0, r3
 8003376:	f003 f9b3 	bl	80066e0 <USB_HC_Halt>
 800337a:	e062      	b.n	8003442 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800337c:	78fa      	ldrb	r2, [r7, #3]
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	1a9b      	subs	r3, r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	3344      	adds	r3, #68	@ 0x44
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	1c59      	adds	r1, r3, #1
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4403      	add	r3, r0
 800339c:	3344      	adds	r3, #68	@ 0x44
 800339e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033a0:	78fa      	ldrb	r2, [r7, #3]
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	4613      	mov	r3, r2
 80033a6:	011b      	lsls	r3, r3, #4
 80033a8:	1a9b      	subs	r3, r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	440b      	add	r3, r1
 80033ae:	3344      	adds	r3, #68	@ 0x44
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d922      	bls.n	80033fc <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80033b6:	78fa      	ldrb	r2, [r7, #3]
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	1a9b      	subs	r3, r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	440b      	add	r3, r1
 80033c4:	3344      	adds	r3, #68	@ 0x44
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80033ca:	78fa      	ldrb	r2, [r7, #3]
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	1a9b      	subs	r3, r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	440b      	add	r3, r1
 80033d8:	334c      	adds	r3, #76	@ 0x4c
 80033da:	2204      	movs	r2, #4
 80033dc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80033de:	78fa      	ldrb	r2, [r7, #3]
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	1a9b      	subs	r3, r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	440b      	add	r3, r1
 80033ec:	334c      	adds	r3, #76	@ 0x4c
 80033ee:	781a      	ldrb	r2, [r3, #0]
 80033f0:	78fb      	ldrb	r3, [r7, #3]
 80033f2:	4619      	mov	r1, r3
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f004 fca5 	bl	8007d44 <HAL_HCD_HC_NotifyURBChange_Callback>
 80033fa:	e022      	b.n	8003442 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	334c      	adds	r3, #76	@ 0x4c
 800340c:	2202      	movs	r2, #2
 800340e:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003410:	78fb      	ldrb	r3, [r7, #3]
 8003412:	015a      	lsls	r2, r3, #5
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	4413      	add	r3, r2
 8003418:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003426:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800342e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	4413      	add	r3, r2
 8003438:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800343c:	461a      	mov	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003442:	78fb      	ldrb	r3, [r7, #3]
 8003444:	015a      	lsls	r2, r3, #5
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	4413      	add	r3, r2
 800344a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800344e:	461a      	mov	r2, r3
 8003450:	2380      	movs	r3, #128	@ 0x80
 8003452:	6093      	str	r3, [r2, #8]
 8003454:	e217      	b.n	8003886 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	4611      	mov	r1, r2
 800345e:	4618      	mov	r0, r3
 8003460:	f003 f8c1 	bl	80065e6 <USB_ReadChInterrupts>
 8003464:	4603      	mov	r3, r0
 8003466:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800346a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800346e:	d11b      	bne.n	80034a8 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003470:	78fa      	ldrb	r2, [r7, #3]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	334d      	adds	r3, #77	@ 0x4d
 8003480:	2209      	movs	r2, #9
 8003482:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	78fa      	ldrb	r2, [r7, #3]
 800348a:	4611      	mov	r1, r2
 800348c:	4618      	mov	r0, r3
 800348e:	f003 f927 	bl	80066e0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003492:	78fb      	ldrb	r3, [r7, #3]
 8003494:	015a      	lsls	r2, r3, #5
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	4413      	add	r3, r2
 800349a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800349e:	461a      	mov	r2, r3
 80034a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034a4:	6093      	str	r3, [r2, #8]
 80034a6:	e1ee      	b.n	8003886 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	78fa      	ldrb	r2, [r7, #3]
 80034ae:	4611      	mov	r1, r2
 80034b0:	4618      	mov	r0, r3
 80034b2:	f003 f898 	bl	80065e6 <USB_ReadChInterrupts>
 80034b6:	4603      	mov	r3, r0
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b02      	cmp	r3, #2
 80034be:	f040 81df 	bne.w	8003880 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80034c2:	78fb      	ldrb	r3, [r7, #3]
 80034c4:	015a      	lsls	r2, r3, #5
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	4413      	add	r3, r2
 80034ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034ce:	461a      	mov	r2, r3
 80034d0:	2302      	movs	r3, #2
 80034d2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80034d4:	78fa      	ldrb	r2, [r7, #3]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	1a9b      	subs	r3, r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	334d      	adds	r3, #77	@ 0x4d
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	f040 8093 	bne.w	8003612 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034ec:	78fa      	ldrb	r2, [r7, #3]
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	1a9b      	subs	r3, r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	334d      	adds	r3, #77	@ 0x4d
 80034fc:	2202      	movs	r2, #2
 80034fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	334c      	adds	r3, #76	@ 0x4c
 8003510:	2201      	movs	r2, #1
 8003512:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003514:	78fa      	ldrb	r2, [r7, #3]
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	1a9b      	subs	r3, r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	3326      	adds	r3, #38	@ 0x26
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d00b      	beq.n	8003542 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800352a:	78fa      	ldrb	r2, [r7, #3]
 800352c:	6879      	ldr	r1, [r7, #4]
 800352e:	4613      	mov	r3, r2
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	1a9b      	subs	r3, r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	440b      	add	r3, r1
 8003538:	3326      	adds	r3, #38	@ 0x26
 800353a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800353c:	2b03      	cmp	r3, #3
 800353e:	f040 8190 	bne.w	8003862 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	799b      	ldrb	r3, [r3, #6]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d115      	bne.n	8003576 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800354a:	78fa      	ldrb	r2, [r7, #3]
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	4613      	mov	r3, r2
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	1a9b      	subs	r3, r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	440b      	add	r3, r1
 8003558:	333d      	adds	r3, #61	@ 0x3d
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	78fa      	ldrb	r2, [r7, #3]
 800355e:	f083 0301 	eor.w	r3, r3, #1
 8003562:	b2d8      	uxtb	r0, r3
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	4613      	mov	r3, r2
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	333d      	adds	r3, #61	@ 0x3d
 8003572:	4602      	mov	r2, r0
 8003574:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	799b      	ldrb	r3, [r3, #6]
 800357a:	2b01      	cmp	r3, #1
 800357c:	f040 8171 	bne.w	8003862 <HCD_HC_OUT_IRQHandler+0x954>
 8003580:	78fa      	ldrb	r2, [r7, #3]
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	1a9b      	subs	r3, r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	3334      	adds	r3, #52	@ 0x34
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 8165 	beq.w	8003862 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003598:	78fa      	ldrb	r2, [r7, #3]
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	4613      	mov	r3, r2
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	1a9b      	subs	r3, r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	440b      	add	r3, r1
 80035a6:	3334      	adds	r3, #52	@ 0x34
 80035a8:	6819      	ldr	r1, [r3, #0]
 80035aa:	78fa      	ldrb	r2, [r7, #3]
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	1a9b      	subs	r3, r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4403      	add	r3, r0
 80035b8:	3328      	adds	r3, #40	@ 0x28
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	440b      	add	r3, r1
 80035be:	1e59      	subs	r1, r3, #1
 80035c0:	78fa      	ldrb	r2, [r7, #3]
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	4613      	mov	r3, r2
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	1a9b      	subs	r3, r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4403      	add	r3, r0
 80035ce:	3328      	adds	r3, #40	@ 0x28
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80035d6:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 813f 	beq.w	8003862 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80035e4:	78fa      	ldrb	r2, [r7, #3]
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	1a9b      	subs	r3, r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	333d      	adds	r3, #61	@ 0x3d
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	78fa      	ldrb	r2, [r7, #3]
 80035f8:	f083 0301 	eor.w	r3, r3, #1
 80035fc:	b2d8      	uxtb	r0, r3
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	1a9b      	subs	r3, r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	333d      	adds	r3, #61	@ 0x3d
 800360c:	4602      	mov	r2, r0
 800360e:	701a      	strb	r2, [r3, #0]
 8003610:	e127      	b.n	8003862 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003612:	78fa      	ldrb	r2, [r7, #3]
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	4613      	mov	r3, r2
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	1a9b      	subs	r3, r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	440b      	add	r3, r1
 8003620:	334d      	adds	r3, #77	@ 0x4d
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b03      	cmp	r3, #3
 8003626:	d120      	bne.n	800366a <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003628:	78fa      	ldrb	r2, [r7, #3]
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	1a9b      	subs	r3, r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	334d      	adds	r3, #77	@ 0x4d
 8003638:	2202      	movs	r2, #2
 800363a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800363c:	78fa      	ldrb	r2, [r7, #3]
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	4613      	mov	r3, r2
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	1a9b      	subs	r3, r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	331b      	adds	r3, #27
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	2b01      	cmp	r3, #1
 8003650:	f040 8107 	bne.w	8003862 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003654:	78fa      	ldrb	r2, [r7, #3]
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	4613      	mov	r3, r2
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	1a9b      	subs	r3, r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	334c      	adds	r3, #76	@ 0x4c
 8003664:	2202      	movs	r2, #2
 8003666:	701a      	strb	r2, [r3, #0]
 8003668:	e0fb      	b.n	8003862 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800366a:	78fa      	ldrb	r2, [r7, #3]
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	4613      	mov	r3, r2
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	1a9b      	subs	r3, r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	440b      	add	r3, r1
 8003678:	334d      	adds	r3, #77	@ 0x4d
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b04      	cmp	r3, #4
 800367e:	d13a      	bne.n	80036f6 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003680:	78fa      	ldrb	r2, [r7, #3]
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	1a9b      	subs	r3, r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	334d      	adds	r3, #77	@ 0x4d
 8003690:	2202      	movs	r2, #2
 8003692:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003694:	78fa      	ldrb	r2, [r7, #3]
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	4613      	mov	r3, r2
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	1a9b      	subs	r3, r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	334c      	adds	r3, #76	@ 0x4c
 80036a4:	2202      	movs	r2, #2
 80036a6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80036a8:	78fa      	ldrb	r2, [r7, #3]
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	1a9b      	subs	r3, r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	331b      	adds	r3, #27
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	f040 80d1 	bne.w	8003862 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80036c0:	78fa      	ldrb	r2, [r7, #3]
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	4613      	mov	r3, r2
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	1a9b      	subs	r3, r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	331b      	adds	r3, #27
 80036d0:	2200      	movs	r2, #0
 80036d2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80036d4:	78fb      	ldrb	r3, [r7, #3]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	78fa      	ldrb	r2, [r7, #3]
 80036e4:	0151      	lsls	r1, r2, #5
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	440a      	add	r2, r1
 80036ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036f2:	6053      	str	r3, [r2, #4]
 80036f4:	e0b5      	b.n	8003862 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80036f6:	78fa      	ldrb	r2, [r7, #3]
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	4613      	mov	r3, r2
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	1a9b      	subs	r3, r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	334d      	adds	r3, #77	@ 0x4d
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	2b05      	cmp	r3, #5
 800370a:	d114      	bne.n	8003736 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800370c:	78fa      	ldrb	r2, [r7, #3]
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	4613      	mov	r3, r2
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	1a9b      	subs	r3, r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	440b      	add	r3, r1
 800371a:	334d      	adds	r3, #77	@ 0x4d
 800371c:	2202      	movs	r2, #2
 800371e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003720:	78fa      	ldrb	r2, [r7, #3]
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	4613      	mov	r3, r2
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	1a9b      	subs	r3, r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	334c      	adds	r3, #76	@ 0x4c
 8003730:	2202      	movs	r2, #2
 8003732:	701a      	strb	r2, [r3, #0]
 8003734:	e095      	b.n	8003862 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003736:	78fa      	ldrb	r2, [r7, #3]
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	4613      	mov	r3, r2
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	1a9b      	subs	r3, r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	440b      	add	r3, r1
 8003744:	334d      	adds	r3, #77	@ 0x4d
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b06      	cmp	r3, #6
 800374a:	d114      	bne.n	8003776 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800374c:	78fa      	ldrb	r2, [r7, #3]
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	4613      	mov	r3, r2
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	1a9b      	subs	r3, r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	334d      	adds	r3, #77	@ 0x4d
 800375c:	2202      	movs	r2, #2
 800375e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003760:	78fa      	ldrb	r2, [r7, #3]
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	4613      	mov	r3, r2
 8003766:	011b      	lsls	r3, r3, #4
 8003768:	1a9b      	subs	r3, r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	440b      	add	r3, r1
 800376e:	334c      	adds	r3, #76	@ 0x4c
 8003770:	2205      	movs	r2, #5
 8003772:	701a      	strb	r2, [r3, #0]
 8003774:	e075      	b.n	8003862 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003776:	78fa      	ldrb	r2, [r7, #3]
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	4613      	mov	r3, r2
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	1a9b      	subs	r3, r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	440b      	add	r3, r1
 8003784:	334d      	adds	r3, #77	@ 0x4d
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b07      	cmp	r3, #7
 800378a:	d00a      	beq.n	80037a2 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800378c:	78fa      	ldrb	r2, [r7, #3]
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	4613      	mov	r3, r2
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	1a9b      	subs	r3, r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	334d      	adds	r3, #77	@ 0x4d
 800379c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800379e:	2b09      	cmp	r3, #9
 80037a0:	d170      	bne.n	8003884 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037a2:	78fa      	ldrb	r2, [r7, #3]
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	4613      	mov	r3, r2
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	1a9b      	subs	r3, r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	334d      	adds	r3, #77	@ 0x4d
 80037b2:	2202      	movs	r2, #2
 80037b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80037b6:	78fa      	ldrb	r2, [r7, #3]
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	1a9b      	subs	r3, r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	3344      	adds	r3, #68	@ 0x44
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	1c59      	adds	r1, r3, #1
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	4613      	mov	r3, r2
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	1a9b      	subs	r3, r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4403      	add	r3, r0
 80037d6:	3344      	adds	r3, #68	@ 0x44
 80037d8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80037da:	78fa      	ldrb	r2, [r7, #3]
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	4613      	mov	r3, r2
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	1a9b      	subs	r3, r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	3344      	adds	r3, #68	@ 0x44
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d914      	bls.n	800381a <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80037f0:	78fa      	ldrb	r2, [r7, #3]
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	1a9b      	subs	r3, r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	3344      	adds	r3, #68	@ 0x44
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003804:	78fa      	ldrb	r2, [r7, #3]
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	4613      	mov	r3, r2
 800380a:	011b      	lsls	r3, r3, #4
 800380c:	1a9b      	subs	r3, r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	334c      	adds	r3, #76	@ 0x4c
 8003814:	2204      	movs	r2, #4
 8003816:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003818:	e022      	b.n	8003860 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800381a:	78fa      	ldrb	r2, [r7, #3]
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	4613      	mov	r3, r2
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	1a9b      	subs	r3, r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	334c      	adds	r3, #76	@ 0x4c
 800382a:	2202      	movs	r2, #2
 800382c:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800382e:	78fb      	ldrb	r3, [r7, #3]
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	4413      	add	r3, r2
 8003836:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003844:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800384c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800384e:	78fb      	ldrb	r3, [r7, #3]
 8003850:	015a      	lsls	r2, r3, #5
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	4413      	add	r3, r2
 8003856:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800385a:	461a      	mov	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003860:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003862:	78fa      	ldrb	r2, [r7, #3]
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	4613      	mov	r3, r2
 8003868:	011b      	lsls	r3, r3, #4
 800386a:	1a9b      	subs	r3, r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	440b      	add	r3, r1
 8003870:	334c      	adds	r3, #76	@ 0x4c
 8003872:	781a      	ldrb	r2, [r3, #0]
 8003874:	78fb      	ldrb	r3, [r7, #3]
 8003876:	4619      	mov	r1, r3
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f004 fa63 	bl	8007d44 <HAL_HCD_HC_NotifyURBChange_Callback>
 800387e:	e002      	b.n	8003886 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003880:	bf00      	nop
 8003882:	e000      	b.n	8003886 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003884:	bf00      	nop
  }
}
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b08a      	sub	sp, #40	@ 0x28
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800389a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	f003 030f 	and.w	r3, r3, #15
 80038ac:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	0c5b      	lsrs	r3, r3, #17
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	091b      	lsrs	r3, r3, #4
 80038bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038c0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d004      	beq.n	80038d2 <HCD_RXQLVL_IRQHandler+0x46>
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	2b05      	cmp	r3, #5
 80038cc:	f000 80b6 	beq.w	8003a3c <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80038d0:	e0b7      	b.n	8003a42 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 80b3 	beq.w	8003a40 <HCD_RXQLVL_IRQHandler+0x1b4>
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4613      	mov	r3, r2
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	1a9b      	subs	r3, r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	332c      	adds	r3, #44	@ 0x2c
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 80a7 	beq.w	8003a40 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4613      	mov	r3, r2
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	1a9b      	subs	r3, r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	440b      	add	r3, r1
 8003900:	3338      	adds	r3, #56	@ 0x38
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	18d1      	adds	r1, r2, r3
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	4613      	mov	r3, r2
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	1a9b      	subs	r3, r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4403      	add	r3, r0
 8003916:	3334      	adds	r3, #52	@ 0x34
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4299      	cmp	r1, r3
 800391c:	f200 8083 	bhi.w	8003a26 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6818      	ldr	r0, [r3, #0]
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4613      	mov	r3, r2
 800392a:	011b      	lsls	r3, r3, #4
 800392c:	1a9b      	subs	r3, r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	440b      	add	r3, r1
 8003932:	332c      	adds	r3, #44	@ 0x2c
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	b292      	uxth	r2, r2
 800393a:	4619      	mov	r1, r3
 800393c:	f002 fde8 	bl	8006510 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4613      	mov	r3, r2
 8003946:	011b      	lsls	r3, r3, #4
 8003948:	1a9b      	subs	r3, r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	440b      	add	r3, r1
 800394e:	332c      	adds	r3, #44	@ 0x2c
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	18d1      	adds	r1, r2, r3
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	4613      	mov	r3, r2
 800395c:	011b      	lsls	r3, r3, #4
 800395e:	1a9b      	subs	r3, r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4403      	add	r3, r0
 8003964:	332c      	adds	r3, #44	@ 0x2c
 8003966:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	4613      	mov	r3, r2
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	1a9b      	subs	r3, r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	3338      	adds	r3, #56	@ 0x38
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	18d1      	adds	r1, r2, r3
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	4613      	mov	r3, r2
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	1a9b      	subs	r3, r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4403      	add	r3, r0
 800398c:	3338      	adds	r3, #56	@ 0x38
 800398e:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	015a      	lsls	r2, r3, #5
 8003994:	6a3b      	ldr	r3, [r7, #32]
 8003996:	4413      	add	r3, r2
 8003998:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	0cdb      	lsrs	r3, r3, #19
 80039a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039a4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4613      	mov	r3, r2
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	1a9b      	subs	r3, r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	440b      	add	r3, r1
 80039b4:	3328      	adds	r3, #40	@ 0x28
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	461a      	mov	r2, r3
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	4293      	cmp	r3, r2
 80039be:	d13f      	bne.n	8003a40 <HCD_RXQLVL_IRQHandler+0x1b4>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d03c      	beq.n	8003a40 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	015a      	lsls	r2, r3, #5
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80039dc:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80039e4:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	015a      	lsls	r2, r3, #5
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	4413      	add	r3, r2
 80039ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039f2:	461a      	mov	r2, r3
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	4613      	mov	r3, r2
 80039fe:	011b      	lsls	r3, r3, #4
 8003a00:	1a9b      	subs	r3, r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	333c      	adds	r3, #60	@ 0x3c
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	f083 0301 	eor.w	r3, r3, #1
 8003a0e:	b2d8      	uxtb	r0, r3
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	4613      	mov	r3, r2
 8003a16:	011b      	lsls	r3, r3, #4
 8003a18:	1a9b      	subs	r3, r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	333c      	adds	r3, #60	@ 0x3c
 8003a20:	4602      	mov	r2, r0
 8003a22:	701a      	strb	r2, [r3, #0]
      break;
 8003a24:	e00c      	b.n	8003a40 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	1a9b      	subs	r3, r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	440b      	add	r3, r1
 8003a34:	334c      	adds	r3, #76	@ 0x4c
 8003a36:	2204      	movs	r2, #4
 8003a38:	701a      	strb	r2, [r3, #0]
      break;
 8003a3a:	e001      	b.n	8003a40 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003a3c:	bf00      	nop
 8003a3e:	e000      	b.n	8003a42 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003a40:	bf00      	nop
  }
}
 8003a42:	bf00      	nop
 8003a44:	3728      	adds	r7, #40	@ 0x28
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b086      	sub	sp, #24
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003a76:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d10b      	bne.n	8003a9a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d102      	bne.n	8003a92 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f004 f93d 	bl	8007d0c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	f043 0302 	orr.w	r3, r3, #2
 8003a98:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d132      	bne.n	8003b0a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f043 0308 	orr.w	r3, r3, #8
 8003aaa:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d126      	bne.n	8003b04 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	7a5b      	ldrb	r3, [r3, #9]
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d113      	bne.n	8003ae6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003ac4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ac8:	d106      	bne.n	8003ad8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2102      	movs	r1, #2
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f002 fdb7 	bl	8006644 <USB_InitFSLSPClkSel>
 8003ad6:	e011      	b.n	8003afc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2101      	movs	r1, #1
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f002 fdb0 	bl	8006644 <USB_InitFSLSPClkSel>
 8003ae4:	e00a      	b.n	8003afc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	79db      	ldrb	r3, [r3, #7]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d106      	bne.n	8003afc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003af4:	461a      	mov	r2, r3
 8003af6:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003afa:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f004 f933 	bl	8007d68 <HAL_HCD_PortEnabled_Callback>
 8003b02:	e002      	b.n	8003b0a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f004 f93d 	bl	8007d84 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f003 0320 	and.w	r3, r3, #32
 8003b10:	2b20      	cmp	r3, #32
 8003b12:	d103      	bne.n	8003b1c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	f043 0320 	orr.w	r3, r3, #32
 8003b1a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003b22:	461a      	mov	r2, r3
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	6013      	str	r3, [r2, #0]
}
 8003b28:	bf00      	nop
 8003b2a:	3718      	adds	r7, #24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e12b      	b.n	8003d9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d106      	bne.n	8003b5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7fc ffb8 	bl	8000acc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2224      	movs	r2, #36	@ 0x24
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0201 	bic.w	r2, r2, #1
 8003b72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b94:	f001 f964 	bl	8004e60 <HAL_RCC_GetPCLK1Freq>
 8003b98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	4a81      	ldr	r2, [pc, #516]	@ (8003da4 <HAL_I2C_Init+0x274>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d807      	bhi.n	8003bb4 <HAL_I2C_Init+0x84>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4a80      	ldr	r2, [pc, #512]	@ (8003da8 <HAL_I2C_Init+0x278>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	bf94      	ite	ls
 8003bac:	2301      	movls	r3, #1
 8003bae:	2300      	movhi	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	e006      	b.n	8003bc2 <HAL_I2C_Init+0x92>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4a7d      	ldr	r2, [pc, #500]	@ (8003dac <HAL_I2C_Init+0x27c>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	bf94      	ite	ls
 8003bbc:	2301      	movls	r3, #1
 8003bbe:	2300      	movhi	r3, #0
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e0e7      	b.n	8003d9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	4a78      	ldr	r2, [pc, #480]	@ (8003db0 <HAL_I2C_Init+0x280>)
 8003bce:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd2:	0c9b      	lsrs	r3, r3, #18
 8003bd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68ba      	ldr	r2, [r7, #8]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	4a6a      	ldr	r2, [pc, #424]	@ (8003da4 <HAL_I2C_Init+0x274>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d802      	bhi.n	8003c04 <HAL_I2C_Init+0xd4>
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	3301      	adds	r3, #1
 8003c02:	e009      	b.n	8003c18 <HAL_I2C_Init+0xe8>
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c0a:	fb02 f303 	mul.w	r3, r2, r3
 8003c0e:	4a69      	ldr	r2, [pc, #420]	@ (8003db4 <HAL_I2C_Init+0x284>)
 8003c10:	fba2 2303 	umull	r2, r3, r2, r3
 8003c14:	099b      	lsrs	r3, r3, #6
 8003c16:	3301      	adds	r3, #1
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	6812      	ldr	r2, [r2, #0]
 8003c1c:	430b      	orrs	r3, r1
 8003c1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003c2a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	495c      	ldr	r1, [pc, #368]	@ (8003da4 <HAL_I2C_Init+0x274>)
 8003c34:	428b      	cmp	r3, r1
 8003c36:	d819      	bhi.n	8003c6c <HAL_I2C_Init+0x13c>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	1e59      	subs	r1, r3, #1
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c46:	1c59      	adds	r1, r3, #1
 8003c48:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003c4c:	400b      	ands	r3, r1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00a      	beq.n	8003c68 <HAL_I2C_Init+0x138>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	1e59      	subs	r1, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c60:	3301      	adds	r3, #1
 8003c62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c66:	e051      	b.n	8003d0c <HAL_I2C_Init+0x1dc>
 8003c68:	2304      	movs	r3, #4
 8003c6a:	e04f      	b.n	8003d0c <HAL_I2C_Init+0x1dc>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d111      	bne.n	8003c98 <HAL_I2C_Init+0x168>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	1e58      	subs	r0, r3, #1
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6859      	ldr	r1, [r3, #4]
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	440b      	add	r3, r1
 8003c82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c86:	3301      	adds	r3, #1
 8003c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	bf0c      	ite	eq
 8003c90:	2301      	moveq	r3, #1
 8003c92:	2300      	movne	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	e012      	b.n	8003cbe <HAL_I2C_Init+0x18e>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	1e58      	subs	r0, r3, #1
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6859      	ldr	r1, [r3, #4]
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	440b      	add	r3, r1
 8003ca6:	0099      	lsls	r1, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cae:	3301      	adds	r3, #1
 8003cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	bf0c      	ite	eq
 8003cb8:	2301      	moveq	r3, #1
 8003cba:	2300      	movne	r3, #0
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <HAL_I2C_Init+0x196>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e022      	b.n	8003d0c <HAL_I2C_Init+0x1dc>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10e      	bne.n	8003cec <HAL_I2C_Init+0x1bc>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	1e58      	subs	r0, r3, #1
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6859      	ldr	r1, [r3, #4]
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	440b      	add	r3, r1
 8003cdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cea:	e00f      	b.n	8003d0c <HAL_I2C_Init+0x1dc>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	1e58      	subs	r0, r3, #1
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6859      	ldr	r1, [r3, #4]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	0099      	lsls	r1, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d02:	3301      	adds	r3, #1
 8003d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	6809      	ldr	r1, [r1, #0]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	69da      	ldr	r2, [r3, #28]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d3a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6911      	ldr	r1, [r2, #16]
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	68d2      	ldr	r2, [r2, #12]
 8003d46:	4311      	orrs	r1, r2
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	6812      	ldr	r2, [r2, #0]
 8003d4c:	430b      	orrs	r3, r1
 8003d4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	695a      	ldr	r2, [r3, #20]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 0201 	orr.w	r2, r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2220      	movs	r2, #32
 8003d86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	000186a0 	.word	0x000186a0
 8003da8:	001e847f 	.word	0x001e847f
 8003dac:	003d08ff 	.word	0x003d08ff
 8003db0:	431bde83 	.word	0x431bde83
 8003db4:	10624dd3 	.word	0x10624dd3

08003db8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b20      	cmp	r3, #32
 8003dcc:	d129      	bne.n	8003e22 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2224      	movs	r2, #36	@ 0x24
 8003dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 0201 	bic.w	r2, r2, #1
 8003de4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0210 	bic.w	r2, r2, #16
 8003df4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f042 0201 	orr.w	r2, r2, #1
 8003e14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	e000      	b.n	8003e24 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003e22:	2302      	movs	r3, #2
  }
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b20      	cmp	r3, #32
 8003e48:	d12a      	bne.n	8003ea0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2224      	movs	r2, #36	@ 0x24
 8003e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0201 	bic.w	r2, r2, #1
 8003e60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e68:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003e6a:	89fb      	ldrh	r3, [r7, #14]
 8003e6c:	f023 030f 	bic.w	r3, r3, #15
 8003e70:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	89fb      	ldrh	r3, [r7, #14]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	89fa      	ldrh	r2, [r7, #14]
 8003e82:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f042 0201 	orr.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	e000      	b.n	8003ea2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003ea0:	2302      	movs	r3, #2
  }
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
	...

08003eb0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e0bf      	b.n	8004042 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7fc fee2 	bl	8000ca0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	699a      	ldr	r2, [r3, #24]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8003ef2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6999      	ldr	r1, [r3, #24]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003f08:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6899      	ldr	r1, [r3, #8]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	4b4a      	ldr	r3, [pc, #296]	@ (800404c <HAL_LTDC_Init+0x19c>)
 8003f24:	400b      	ands	r3, r1
 8003f26:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	041b      	lsls	r3, r3, #16
 8003f2e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6899      	ldr	r1, [r3, #8]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699a      	ldr	r2, [r3, #24]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68d9      	ldr	r1, [r3, #12]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	4b3e      	ldr	r3, [pc, #248]	@ (800404c <HAL_LTDC_Init+0x19c>)
 8003f52:	400b      	ands	r3, r1
 8003f54:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	041b      	lsls	r3, r3, #16
 8003f5c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68d9      	ldr	r1, [r3, #12]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a1a      	ldr	r2, [r3, #32]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6919      	ldr	r1, [r3, #16]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	4b33      	ldr	r3, [pc, #204]	@ (800404c <HAL_LTDC_Init+0x19c>)
 8003f80:	400b      	ands	r3, r1
 8003f82:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f88:	041b      	lsls	r3, r3, #16
 8003f8a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6919      	ldr	r1, [r3, #16]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6959      	ldr	r1, [r3, #20]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	4b27      	ldr	r3, [pc, #156]	@ (800404c <HAL_LTDC_Init+0x19c>)
 8003fae:	400b      	ands	r3, r1
 8003fb0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb6:	041b      	lsls	r3, r3, #16
 8003fb8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6959      	ldr	r1, [r3, #20]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fd6:	021b      	lsls	r3, r3, #8
 8003fd8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003fe0:	041b      	lsls	r3, r3, #16
 8003fe2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8003ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004006:	431a      	orrs	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0206 	orr.w	r2, r2, #6
 800401e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	699a      	ldr	r2, [r3, #24]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0201 	orr.w	r2, r2, #1
 800402e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	f000f800 	.word	0xf000f800

08004050 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800405e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004066:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f003 0304 	and.w	r3, r3, #4
 800406e:	2b00      	cmp	r3, #0
 8004070:	d023      	beq.n	80040ba <HAL_LTDC_IRQHandler+0x6a>
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	d01e      	beq.n	80040ba <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0204 	bic.w	r2, r2, #4
 800408a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2204      	movs	r2, #4
 8004092:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800409a:	f043 0201 	orr.w	r2, r3, #1
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2204      	movs	r2, #4
 80040a8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 f86f 	bl	8004198 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d023      	beq.n	800410c <HAL_LTDC_IRQHandler+0xbc>
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d01e      	beq.n	800410c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0202 	bic.w	r2, r2, #2
 80040dc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2202      	movs	r2, #2
 80040e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80040ec:	f043 0202 	orr.w	r2, r3, #2
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2204      	movs	r2, #4
 80040fa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f846 	bl	8004198 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d01b      	beq.n	800414e <HAL_LTDC_IRQHandler+0xfe>
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b00      	cmp	r3, #0
 800411e:	d016      	beq.n	800414e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0201 	bic.w	r2, r2, #1
 800412e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2201      	movs	r2, #1
 8004136:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f82f 	bl	80041ac <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f003 0308 	and.w	r3, r3, #8
 8004154:	2b00      	cmp	r3, #0
 8004156:	d01b      	beq.n	8004190 <HAL_LTDC_IRQHandler+0x140>
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b00      	cmp	r3, #0
 8004160:	d016      	beq.n	8004190 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0208 	bic.w	r2, r2, #8
 8004170:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2208      	movs	r2, #8
 8004178:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f818 	bl	80041c0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004190:	bf00      	nop
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80041d4:	b5b0      	push	{r4, r5, r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d101      	bne.n	80041ee <HAL_LTDC_ConfigLayer+0x1a>
 80041ea:	2302      	movs	r3, #2
 80041ec:	e02c      	b.n	8004248 <HAL_LTDC_ConfigLayer+0x74>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2202      	movs	r2, #2
 80041fa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2134      	movs	r1, #52	@ 0x34
 8004204:	fb01 f303 	mul.w	r3, r1, r3
 8004208:	4413      	add	r3, r2
 800420a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	4614      	mov	r4, r2
 8004212:	461d      	mov	r5, r3
 8004214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004216:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800421a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800421c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800421e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004220:	682b      	ldr	r3, [r5, #0]
 8004222:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	68b9      	ldr	r1, [r7, #8]
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 f811 	bl	8004250 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2201      	movs	r2, #1
 8004234:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bdb0      	pop	{r4, r5, r7, pc}

08004250 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004250:	b480      	push	{r7}
 8004252:	b089      	sub	sp, #36	@ 0x24
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	0c1b      	lsrs	r3, r3, #16
 8004268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800426c:	4413      	add	r3, r2
 800426e:	041b      	lsls	r3, r3, #16
 8004270:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	01db      	lsls	r3, r3, #7
 800427c:	4413      	add	r3, r2
 800427e:	3384      	adds	r3, #132	@ 0x84
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	6812      	ldr	r2, [r2, #0]
 8004286:	4611      	mov	r1, r2
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	01d2      	lsls	r2, r2, #7
 800428c:	440a      	add	r2, r1
 800428e:	3284      	adds	r2, #132	@ 0x84
 8004290:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004294:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	0c1b      	lsrs	r3, r3, #16
 80042a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80042a6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80042a8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4619      	mov	r1, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	01db      	lsls	r3, r3, #7
 80042b4:	440b      	add	r3, r1
 80042b6:	3384      	adds	r3, #132	@ 0x84
 80042b8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80042be:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	68da      	ldr	r2, [r3, #12]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042ce:	4413      	add	r3, r2
 80042d0:	041b      	lsls	r3, r3, #16
 80042d2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	461a      	mov	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	01db      	lsls	r3, r3, #7
 80042de:	4413      	add	r3, r2
 80042e0:	3384      	adds	r3, #132	@ 0x84
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	6812      	ldr	r2, [r2, #0]
 80042e8:	4611      	mov	r1, r2
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	01d2      	lsls	r2, r2, #7
 80042ee:	440a      	add	r2, r1
 80042f0:	3284      	adds	r2, #132	@ 0x84
 80042f2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80042f6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004306:	4413      	add	r3, r2
 8004308:	1c5a      	adds	r2, r3, #1
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4619      	mov	r1, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	01db      	lsls	r3, r3, #7
 8004314:	440b      	add	r3, r1
 8004316:	3384      	adds	r3, #132	@ 0x84
 8004318:	4619      	mov	r1, r3
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	4313      	orrs	r3, r2
 800431e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	461a      	mov	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	01db      	lsls	r3, r3, #7
 800432a:	4413      	add	r3, r2
 800432c:	3384      	adds	r3, #132	@ 0x84
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	6812      	ldr	r2, [r2, #0]
 8004334:	4611      	mov	r1, r2
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	01d2      	lsls	r2, r2, #7
 800433a:	440a      	add	r2, r1
 800433c:	3284      	adds	r2, #132	@ 0x84
 800433e:	f023 0307 	bic.w	r3, r3, #7
 8004342:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	461a      	mov	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	01db      	lsls	r3, r3, #7
 800434e:	4413      	add	r3, r2
 8004350:	3384      	adds	r3, #132	@ 0x84
 8004352:	461a      	mov	r2, r3
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004360:	021b      	lsls	r3, r3, #8
 8004362:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800436a:	041b      	lsls	r3, r3, #16
 800436c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	061b      	lsls	r3, r3, #24
 8004374:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	461a      	mov	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	01db      	lsls	r3, r3, #7
 8004380:	4413      	add	r3, r2
 8004382:	3384      	adds	r3, #132	@ 0x84
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	461a      	mov	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	01db      	lsls	r3, r3, #7
 8004390:	4413      	add	r3, r2
 8004392:	3384      	adds	r3, #132	@ 0x84
 8004394:	461a      	mov	r2, r3
 8004396:	2300      	movs	r3, #0
 8004398:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80043a0:	461a      	mov	r2, r3
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	431a      	orrs	r2, r3
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	431a      	orrs	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4619      	mov	r1, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	01db      	lsls	r3, r3, #7
 80043b4:	440b      	add	r3, r1
 80043b6:	3384      	adds	r3, #132	@ 0x84
 80043b8:	4619      	mov	r1, r3
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	4313      	orrs	r3, r2
 80043be:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	461a      	mov	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	01db      	lsls	r3, r3, #7
 80043ca:	4413      	add	r3, r2
 80043cc:	3384      	adds	r3, #132	@ 0x84
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	6812      	ldr	r2, [r2, #0]
 80043d4:	4611      	mov	r1, r2
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	01d2      	lsls	r2, r2, #7
 80043da:	440a      	add	r2, r1
 80043dc:	3284      	adds	r2, #132	@ 0x84
 80043de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80043e2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	461a      	mov	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	01db      	lsls	r3, r3, #7
 80043ee:	4413      	add	r3, r2
 80043f0:	3384      	adds	r3, #132	@ 0x84
 80043f2:	461a      	mov	r2, r3
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	461a      	mov	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	01db      	lsls	r3, r3, #7
 8004404:	4413      	add	r3, r2
 8004406:	3384      	adds	r3, #132	@ 0x84
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	6812      	ldr	r2, [r2, #0]
 800440e:	4611      	mov	r1, r2
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	01d2      	lsls	r2, r2, #7
 8004414:	440a      	add	r2, r1
 8004416:	3284      	adds	r2, #132	@ 0x84
 8004418:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800441c:	f023 0307 	bic.w	r3, r3, #7
 8004420:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	69da      	ldr	r2, [r3, #28]
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	68f9      	ldr	r1, [r7, #12]
 800442c:	6809      	ldr	r1, [r1, #0]
 800442e:	4608      	mov	r0, r1
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	01c9      	lsls	r1, r1, #7
 8004434:	4401      	add	r1, r0
 8004436:	3184      	adds	r1, #132	@ 0x84
 8004438:	4313      	orrs	r3, r2
 800443a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	461a      	mov	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	01db      	lsls	r3, r3, #7
 8004446:	4413      	add	r3, r2
 8004448:	3384      	adds	r3, #132	@ 0x84
 800444a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	461a      	mov	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	01db      	lsls	r3, r3, #7
 8004456:	4413      	add	r3, r2
 8004458:	3384      	adds	r3, #132	@ 0x84
 800445a:	461a      	mov	r2, r3
 800445c:	2300      	movs	r3, #0
 800445e:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	461a      	mov	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	01db      	lsls	r3, r3, #7
 800446a:	4413      	add	r3, r2
 800446c:	3384      	adds	r3, #132	@ 0x84
 800446e:	461a      	mov	r2, r3
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004474:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d102      	bne.n	8004484 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800447e:	2304      	movs	r3, #4
 8004480:	61fb      	str	r3, [r7, #28]
 8004482:	e01b      	b.n	80044bc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d102      	bne.n	8004492 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800448c:	2303      	movs	r3, #3
 800448e:	61fb      	str	r3, [r7, #28]
 8004490:	e014      	b.n	80044bc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	2b04      	cmp	r3, #4
 8004498:	d00b      	beq.n	80044b2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d007      	beq.n	80044b2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	d003      	beq.n	80044b2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80044ae:	2b07      	cmp	r3, #7
 80044b0:	d102      	bne.n	80044b8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80044b2:	2302      	movs	r3, #2
 80044b4:	61fb      	str	r3, [r7, #28]
 80044b6:	e001      	b.n	80044bc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80044b8:	2301      	movs	r3, #1
 80044ba:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	461a      	mov	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	01db      	lsls	r3, r3, #7
 80044c6:	4413      	add	r3, r2
 80044c8:	3384      	adds	r3, #132	@ 0x84
 80044ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	6812      	ldr	r2, [r2, #0]
 80044d0:	4611      	mov	r1, r2
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	01d2      	lsls	r2, r2, #7
 80044d6:	440a      	add	r2, r1
 80044d8:	3284      	adds	r2, #132	@ 0x84
 80044da:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80044de:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e4:	69fa      	ldr	r2, [r7, #28]
 80044e6:	fb02 f303 	mul.w	r3, r2, r3
 80044ea:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	6859      	ldr	r1, [r3, #4]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	1acb      	subs	r3, r1, r3
 80044f6:	69f9      	ldr	r1, [r7, #28]
 80044f8:	fb01 f303 	mul.w	r3, r1, r3
 80044fc:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80044fe:	68f9      	ldr	r1, [r7, #12]
 8004500:	6809      	ldr	r1, [r1, #0]
 8004502:	4608      	mov	r0, r1
 8004504:	6879      	ldr	r1, [r7, #4]
 8004506:	01c9      	lsls	r1, r1, #7
 8004508:	4401      	add	r1, r0
 800450a:	3184      	adds	r1, #132	@ 0x84
 800450c:	4313      	orrs	r3, r2
 800450e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	01db      	lsls	r3, r3, #7
 800451a:	4413      	add	r3, r2
 800451c:	3384      	adds	r3, #132	@ 0x84
 800451e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	6812      	ldr	r2, [r2, #0]
 8004524:	4611      	mov	r1, r2
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	01d2      	lsls	r2, r2, #7
 800452a:	440a      	add	r2, r1
 800452c:	3284      	adds	r2, #132	@ 0x84
 800452e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004532:	f023 0307 	bic.w	r3, r3, #7
 8004536:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	461a      	mov	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	01db      	lsls	r3, r3, #7
 8004542:	4413      	add	r3, r2
 8004544:	3384      	adds	r3, #132	@ 0x84
 8004546:	461a      	mov	r2, r3
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	461a      	mov	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	01db      	lsls	r3, r3, #7
 8004558:	4413      	add	r3, r2
 800455a:	3384      	adds	r3, #132	@ 0x84
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	6812      	ldr	r2, [r2, #0]
 8004562:	4611      	mov	r1, r2
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	01d2      	lsls	r2, r2, #7
 8004568:	440a      	add	r2, r1
 800456a:	3284      	adds	r2, #132	@ 0x84
 800456c:	f043 0301 	orr.w	r3, r3, #1
 8004570:	6013      	str	r3, [r2, #0]
}
 8004572:	bf00      	nop
 8004574:	3724      	adds	r7, #36	@ 0x24
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
	...

08004580 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e267      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d075      	beq.n	800468a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800459e:	4b88      	ldr	r3, [pc, #544]	@ (80047c0 <HAL_RCC_OscConfig+0x240>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 030c 	and.w	r3, r3, #12
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d00c      	beq.n	80045c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045aa:	4b85      	ldr	r3, [pc, #532]	@ (80047c0 <HAL_RCC_OscConfig+0x240>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80045b2:	2b08      	cmp	r3, #8
 80045b4:	d112      	bne.n	80045dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045b6:	4b82      	ldr	r3, [pc, #520]	@ (80047c0 <HAL_RCC_OscConfig+0x240>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045c2:	d10b      	bne.n	80045dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045c4:	4b7e      	ldr	r3, [pc, #504]	@ (80047c0 <HAL_RCC_OscConfig+0x240>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d05b      	beq.n	8004688 <HAL_RCC_OscConfig+0x108>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d157      	bne.n	8004688 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e242      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045e4:	d106      	bne.n	80045f4 <HAL_RCC_OscConfig+0x74>
 80045e6:	4b76      	ldr	r3, [pc, #472]	@ (80047c0 <HAL_RCC_OscConfig+0x240>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a75      	ldr	r2, [pc, #468]	@ (80047c0 <HAL_RCC_OscConfig+0x240>)
 80045ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045f0:	6013      	str	r3, [r2, #0]
 80045f2:	e01d      	b.n	8004630 <HAL_RCC_OscConfig+0xb0>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045fc:	d10c      	bne.n	8004618 <HAL_RCC_OscConfig+0x98>
 80045fe:	4b70      	ldr	r3, [pc, #448]	@ (80047c0 <HAL_RCC_OscConfig+0x240>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a6f      	ldr	r2, [pc, #444]	@ (80047c0 <HAL_RCC_OscConfig+0x240>)
 8004604:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	4b6d      	ldr	r3, [pc, #436]	@ (80047c0 <HAL_RCC_OscConfig+0x240>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a6c      	ldr	r2, [pc, #432]	@ (80047c0 <HAL_RCC_OscConfig+0x240>)
 8004610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004614:	6013      	str	r3, [r2, #0]
 8004616:	e00b      	b.n	8004630 <HAL_RCC_OscConfig+0xb0>
 8004618:	4b69      	ldr	r3, [pc, #420]	@ (80047c0 <HAL_RCC_OscConfig+0x240>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a68      	ldr	r2, [pc, #416]	@ (80047c0 <HAL_RCC_OscConfig+0x240>)
 800461e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004622:	6013      	str	r3, [r2, #0]
 8004624:	4b66      	ldr	r3, [pc, #408]	@ (80047c0 <HAL_RCC_OscConfig+0x240>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a65      	ldr	r2, [pc, #404]	@ (80047c0 <HAL_RCC_OscConfig+0x240>)
 800462a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800462e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d013      	beq.n	8004660 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004638:	f7fc ffda 	bl	80015f0 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004640:	f7fc ffd6 	bl	80015f0 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b64      	cmp	r3, #100	@ 0x64
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e207      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004652:	4b5b      	ldr	r3, [pc, #364]	@ (80047c0 <HAL_RCC_OscConfig+0x240>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0f0      	beq.n	8004640 <HAL_RCC_OscConfig+0xc0>
 800465e:	e014      	b.n	800468a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004660:	f7fc ffc6 	bl	80015f0 <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004666:	e008      	b.n	800467a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004668:	f7fc ffc2 	bl	80015f0 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b64      	cmp	r3, #100	@ 0x64
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e1f3      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800467a:	4b51      	ldr	r3, [pc, #324]	@ (80047c0 <HAL_RCC_OscConfig+0x240>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1f0      	bne.n	8004668 <HAL_RCC_OscConfig+0xe8>
 8004686:	e000      	b.n	800468a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d063      	beq.n	800475e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004696:	4b4a      	ldr	r3, [pc, #296]	@ (80047c0 <HAL_RCC_OscConfig+0x240>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 030c 	and.w	r3, r3, #12
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00b      	beq.n	80046ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046a2:	4b47      	ldr	r3, [pc, #284]	@ (80047c0 <HAL_RCC_OscConfig+0x240>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80046aa:	2b08      	cmp	r3, #8
 80046ac:	d11c      	bne.n	80046e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046ae:	4b44      	ldr	r3, [pc, #272]	@ (80047c0 <HAL_RCC_OscConfig+0x240>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d116      	bne.n	80046e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ba:	4b41      	ldr	r3, [pc, #260]	@ (80047c0 <HAL_RCC_OscConfig+0x240>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d005      	beq.n	80046d2 <HAL_RCC_OscConfig+0x152>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d001      	beq.n	80046d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e1c7      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046d2:	4b3b      	ldr	r3, [pc, #236]	@ (80047c0 <HAL_RCC_OscConfig+0x240>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	4937      	ldr	r1, [pc, #220]	@ (80047c0 <HAL_RCC_OscConfig+0x240>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046e6:	e03a      	b.n	800475e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d020      	beq.n	8004732 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046f0:	4b34      	ldr	r3, [pc, #208]	@ (80047c4 <HAL_RCC_OscConfig+0x244>)
 80046f2:	2201      	movs	r2, #1
 80046f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f6:	f7fc ff7b 	bl	80015f0 <HAL_GetTick>
 80046fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046fc:	e008      	b.n	8004710 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046fe:	f7fc ff77 	bl	80015f0 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e1a8      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004710:	4b2b      	ldr	r3, [pc, #172]	@ (80047c0 <HAL_RCC_OscConfig+0x240>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0f0      	beq.n	80046fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800471c:	4b28      	ldr	r3, [pc, #160]	@ (80047c0 <HAL_RCC_OscConfig+0x240>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	00db      	lsls	r3, r3, #3
 800472a:	4925      	ldr	r1, [pc, #148]	@ (80047c0 <HAL_RCC_OscConfig+0x240>)
 800472c:	4313      	orrs	r3, r2
 800472e:	600b      	str	r3, [r1, #0]
 8004730:	e015      	b.n	800475e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004732:	4b24      	ldr	r3, [pc, #144]	@ (80047c4 <HAL_RCC_OscConfig+0x244>)
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004738:	f7fc ff5a 	bl	80015f0 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004740:	f7fc ff56 	bl	80015f0 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e187      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004752:	4b1b      	ldr	r3, [pc, #108]	@ (80047c0 <HAL_RCC_OscConfig+0x240>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f0      	bne.n	8004740 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0308 	and.w	r3, r3, #8
 8004766:	2b00      	cmp	r3, #0
 8004768:	d036      	beq.n	80047d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d016      	beq.n	80047a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004772:	4b15      	ldr	r3, [pc, #84]	@ (80047c8 <HAL_RCC_OscConfig+0x248>)
 8004774:	2201      	movs	r2, #1
 8004776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004778:	f7fc ff3a 	bl	80015f0 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004780:	f7fc ff36 	bl	80015f0 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e167      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004792:	4b0b      	ldr	r3, [pc, #44]	@ (80047c0 <HAL_RCC_OscConfig+0x240>)
 8004794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0f0      	beq.n	8004780 <HAL_RCC_OscConfig+0x200>
 800479e:	e01b      	b.n	80047d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047a0:	4b09      	ldr	r3, [pc, #36]	@ (80047c8 <HAL_RCC_OscConfig+0x248>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047a6:	f7fc ff23 	bl	80015f0 <HAL_GetTick>
 80047aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047ac:	e00e      	b.n	80047cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047ae:	f7fc ff1f 	bl	80015f0 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d907      	bls.n	80047cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e150      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
 80047c0:	40023800 	.word	0x40023800
 80047c4:	42470000 	.word	0x42470000
 80047c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047cc:	4b88      	ldr	r3, [pc, #544]	@ (80049f0 <HAL_RCC_OscConfig+0x470>)
 80047ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1ea      	bne.n	80047ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 8097 	beq.w	8004914 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047e6:	2300      	movs	r3, #0
 80047e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ea:	4b81      	ldr	r3, [pc, #516]	@ (80049f0 <HAL_RCC_OscConfig+0x470>)
 80047ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10f      	bne.n	8004816 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047f6:	2300      	movs	r3, #0
 80047f8:	60bb      	str	r3, [r7, #8]
 80047fa:	4b7d      	ldr	r3, [pc, #500]	@ (80049f0 <HAL_RCC_OscConfig+0x470>)
 80047fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fe:	4a7c      	ldr	r2, [pc, #496]	@ (80049f0 <HAL_RCC_OscConfig+0x470>)
 8004800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004804:	6413      	str	r3, [r2, #64]	@ 0x40
 8004806:	4b7a      	ldr	r3, [pc, #488]	@ (80049f0 <HAL_RCC_OscConfig+0x470>)
 8004808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800480e:	60bb      	str	r3, [r7, #8]
 8004810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004812:	2301      	movs	r3, #1
 8004814:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004816:	4b77      	ldr	r3, [pc, #476]	@ (80049f4 <HAL_RCC_OscConfig+0x474>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800481e:	2b00      	cmp	r3, #0
 8004820:	d118      	bne.n	8004854 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004822:	4b74      	ldr	r3, [pc, #464]	@ (80049f4 <HAL_RCC_OscConfig+0x474>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a73      	ldr	r2, [pc, #460]	@ (80049f4 <HAL_RCC_OscConfig+0x474>)
 8004828:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800482c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800482e:	f7fc fedf 	bl	80015f0 <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004834:	e008      	b.n	8004848 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004836:	f7fc fedb 	bl	80015f0 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e10c      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004848:	4b6a      	ldr	r3, [pc, #424]	@ (80049f4 <HAL_RCC_OscConfig+0x474>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004850:	2b00      	cmp	r3, #0
 8004852:	d0f0      	beq.n	8004836 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d106      	bne.n	800486a <HAL_RCC_OscConfig+0x2ea>
 800485c:	4b64      	ldr	r3, [pc, #400]	@ (80049f0 <HAL_RCC_OscConfig+0x470>)
 800485e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004860:	4a63      	ldr	r2, [pc, #396]	@ (80049f0 <HAL_RCC_OscConfig+0x470>)
 8004862:	f043 0301 	orr.w	r3, r3, #1
 8004866:	6713      	str	r3, [r2, #112]	@ 0x70
 8004868:	e01c      	b.n	80048a4 <HAL_RCC_OscConfig+0x324>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	2b05      	cmp	r3, #5
 8004870:	d10c      	bne.n	800488c <HAL_RCC_OscConfig+0x30c>
 8004872:	4b5f      	ldr	r3, [pc, #380]	@ (80049f0 <HAL_RCC_OscConfig+0x470>)
 8004874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004876:	4a5e      	ldr	r2, [pc, #376]	@ (80049f0 <HAL_RCC_OscConfig+0x470>)
 8004878:	f043 0304 	orr.w	r3, r3, #4
 800487c:	6713      	str	r3, [r2, #112]	@ 0x70
 800487e:	4b5c      	ldr	r3, [pc, #368]	@ (80049f0 <HAL_RCC_OscConfig+0x470>)
 8004880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004882:	4a5b      	ldr	r2, [pc, #364]	@ (80049f0 <HAL_RCC_OscConfig+0x470>)
 8004884:	f043 0301 	orr.w	r3, r3, #1
 8004888:	6713      	str	r3, [r2, #112]	@ 0x70
 800488a:	e00b      	b.n	80048a4 <HAL_RCC_OscConfig+0x324>
 800488c:	4b58      	ldr	r3, [pc, #352]	@ (80049f0 <HAL_RCC_OscConfig+0x470>)
 800488e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004890:	4a57      	ldr	r2, [pc, #348]	@ (80049f0 <HAL_RCC_OscConfig+0x470>)
 8004892:	f023 0301 	bic.w	r3, r3, #1
 8004896:	6713      	str	r3, [r2, #112]	@ 0x70
 8004898:	4b55      	ldr	r3, [pc, #340]	@ (80049f0 <HAL_RCC_OscConfig+0x470>)
 800489a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800489c:	4a54      	ldr	r2, [pc, #336]	@ (80049f0 <HAL_RCC_OscConfig+0x470>)
 800489e:	f023 0304 	bic.w	r3, r3, #4
 80048a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d015      	beq.n	80048d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ac:	f7fc fea0 	bl	80015f0 <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b2:	e00a      	b.n	80048ca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b4:	f7fc fe9c 	bl	80015f0 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e0cb      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ca:	4b49      	ldr	r3, [pc, #292]	@ (80049f0 <HAL_RCC_OscConfig+0x470>)
 80048cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0ee      	beq.n	80048b4 <HAL_RCC_OscConfig+0x334>
 80048d6:	e014      	b.n	8004902 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048d8:	f7fc fe8a 	bl	80015f0 <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048de:	e00a      	b.n	80048f6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e0:	f7fc fe86 	bl	80015f0 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e0b5      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048f6:	4b3e      	ldr	r3, [pc, #248]	@ (80049f0 <HAL_RCC_OscConfig+0x470>)
 80048f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1ee      	bne.n	80048e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004902:	7dfb      	ldrb	r3, [r7, #23]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d105      	bne.n	8004914 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004908:	4b39      	ldr	r3, [pc, #228]	@ (80049f0 <HAL_RCC_OscConfig+0x470>)
 800490a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490c:	4a38      	ldr	r2, [pc, #224]	@ (80049f0 <HAL_RCC_OscConfig+0x470>)
 800490e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004912:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 80a1 	beq.w	8004a60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800491e:	4b34      	ldr	r3, [pc, #208]	@ (80049f0 <HAL_RCC_OscConfig+0x470>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 030c 	and.w	r3, r3, #12
 8004926:	2b08      	cmp	r3, #8
 8004928:	d05c      	beq.n	80049e4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	2b02      	cmp	r3, #2
 8004930:	d141      	bne.n	80049b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004932:	4b31      	ldr	r3, [pc, #196]	@ (80049f8 <HAL_RCC_OscConfig+0x478>)
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004938:	f7fc fe5a 	bl	80015f0 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004940:	f7fc fe56 	bl	80015f0 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e087      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004952:	4b27      	ldr	r3, [pc, #156]	@ (80049f0 <HAL_RCC_OscConfig+0x470>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1f0      	bne.n	8004940 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	69da      	ldr	r2, [r3, #28]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496c:	019b      	lsls	r3, r3, #6
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004974:	085b      	lsrs	r3, r3, #1
 8004976:	3b01      	subs	r3, #1
 8004978:	041b      	lsls	r3, r3, #16
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004980:	061b      	lsls	r3, r3, #24
 8004982:	491b      	ldr	r1, [pc, #108]	@ (80049f0 <HAL_RCC_OscConfig+0x470>)
 8004984:	4313      	orrs	r3, r2
 8004986:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004988:	4b1b      	ldr	r3, [pc, #108]	@ (80049f8 <HAL_RCC_OscConfig+0x478>)
 800498a:	2201      	movs	r2, #1
 800498c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498e:	f7fc fe2f 	bl	80015f0 <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004994:	e008      	b.n	80049a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004996:	f7fc fe2b 	bl	80015f0 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e05c      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049a8:	4b11      	ldr	r3, [pc, #68]	@ (80049f0 <HAL_RCC_OscConfig+0x470>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d0f0      	beq.n	8004996 <HAL_RCC_OscConfig+0x416>
 80049b4:	e054      	b.n	8004a60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049b6:	4b10      	ldr	r3, [pc, #64]	@ (80049f8 <HAL_RCC_OscConfig+0x478>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049bc:	f7fc fe18 	bl	80015f0 <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049c2:	e008      	b.n	80049d6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c4:	f7fc fe14 	bl	80015f0 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e045      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049d6:	4b06      	ldr	r3, [pc, #24]	@ (80049f0 <HAL_RCC_OscConfig+0x470>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1f0      	bne.n	80049c4 <HAL_RCC_OscConfig+0x444>
 80049e2:	e03d      	b.n	8004a60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d107      	bne.n	80049fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e038      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
 80049f0:	40023800 	.word	0x40023800
 80049f4:	40007000 	.word	0x40007000
 80049f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049fc:	4b1b      	ldr	r3, [pc, #108]	@ (8004a6c <HAL_RCC_OscConfig+0x4ec>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d028      	beq.n	8004a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d121      	bne.n	8004a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d11a      	bne.n	8004a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d111      	bne.n	8004a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a42:	085b      	lsrs	r3, r3, #1
 8004a44:	3b01      	subs	r3, #1
 8004a46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d107      	bne.n	8004a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d001      	beq.n	8004a60 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e000      	b.n	8004a62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3718      	adds	r7, #24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	40023800 	.word	0x40023800

08004a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e0cc      	b.n	8004c1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a84:	4b68      	ldr	r3, [pc, #416]	@ (8004c28 <HAL_RCC_ClockConfig+0x1b8>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 030f 	and.w	r3, r3, #15
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d90c      	bls.n	8004aac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a92:	4b65      	ldr	r3, [pc, #404]	@ (8004c28 <HAL_RCC_ClockConfig+0x1b8>)
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	b2d2      	uxtb	r2, r2
 8004a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a9a:	4b63      	ldr	r3, [pc, #396]	@ (8004c28 <HAL_RCC_ClockConfig+0x1b8>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d001      	beq.n	8004aac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e0b8      	b.n	8004c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d020      	beq.n	8004afa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d005      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ac4:	4b59      	ldr	r3, [pc, #356]	@ (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	4a58      	ldr	r2, [pc, #352]	@ (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004aca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004ace:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0308 	and.w	r3, r3, #8
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d005      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004adc:	4b53      	ldr	r3, [pc, #332]	@ (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	4a52      	ldr	r2, [pc, #328]	@ (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ae2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004ae6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ae8:	4b50      	ldr	r3, [pc, #320]	@ (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	494d      	ldr	r1, [pc, #308]	@ (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d044      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d107      	bne.n	8004b1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b0e:	4b47      	ldr	r3, [pc, #284]	@ (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d119      	bne.n	8004b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e07f      	b.n	8004c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d003      	beq.n	8004b2e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	d107      	bne.n	8004b3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b2e:	4b3f      	ldr	r3, [pc, #252]	@ (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d109      	bne.n	8004b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e06f      	b.n	8004c1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b3e:	4b3b      	ldr	r3, [pc, #236]	@ (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e067      	b.n	8004c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b4e:	4b37      	ldr	r3, [pc, #220]	@ (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f023 0203 	bic.w	r2, r3, #3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	4934      	ldr	r1, [pc, #208]	@ (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b60:	f7fc fd46 	bl	80015f0 <HAL_GetTick>
 8004b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b66:	e00a      	b.n	8004b7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b68:	f7fc fd42 	bl	80015f0 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e04f      	b.n	8004c1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b7e:	4b2b      	ldr	r3, [pc, #172]	@ (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 020c 	and.w	r2, r3, #12
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d1eb      	bne.n	8004b68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b90:	4b25      	ldr	r3, [pc, #148]	@ (8004c28 <HAL_RCC_ClockConfig+0x1b8>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 030f 	and.w	r3, r3, #15
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d20c      	bcs.n	8004bb8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b9e:	4b22      	ldr	r3, [pc, #136]	@ (8004c28 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ba6:	4b20      	ldr	r3, [pc, #128]	@ (8004c28 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 030f 	and.w	r3, r3, #15
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d001      	beq.n	8004bb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e032      	b.n	8004c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0304 	and.w	r3, r3, #4
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d008      	beq.n	8004bd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bc4:	4b19      	ldr	r3, [pc, #100]	@ (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	4916      	ldr	r1, [pc, #88]	@ (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0308 	and.w	r3, r3, #8
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d009      	beq.n	8004bf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004be2:	4b12      	ldr	r3, [pc, #72]	@ (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	490e      	ldr	r1, [pc, #56]	@ (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004bf6:	f000 f821 	bl	8004c3c <HAL_RCC_GetSysClockFreq>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8004c2c <HAL_RCC_ClockConfig+0x1bc>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	091b      	lsrs	r3, r3, #4
 8004c02:	f003 030f 	and.w	r3, r3, #15
 8004c06:	490a      	ldr	r1, [pc, #40]	@ (8004c30 <HAL_RCC_ClockConfig+0x1c0>)
 8004c08:	5ccb      	ldrb	r3, [r1, r3]
 8004c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c0e:	4a09      	ldr	r2, [pc, #36]	@ (8004c34 <HAL_RCC_ClockConfig+0x1c4>)
 8004c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004c12:	4b09      	ldr	r3, [pc, #36]	@ (8004c38 <HAL_RCC_ClockConfig+0x1c8>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7fc fad4 	bl	80011c4 <HAL_InitTick>

  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	40023c00 	.word	0x40023c00
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	08007ebc 	.word	0x08007ebc
 8004c34:	20000000 	.word	0x20000000
 8004c38:	20000004 	.word	0x20000004

08004c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c40:	b094      	sub	sp, #80	@ 0x50
 8004c42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c54:	4b79      	ldr	r3, [pc, #484]	@ (8004e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f003 030c 	and.w	r3, r3, #12
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	d00d      	beq.n	8004c7c <HAL_RCC_GetSysClockFreq+0x40>
 8004c60:	2b08      	cmp	r3, #8
 8004c62:	f200 80e1 	bhi.w	8004e28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d002      	beq.n	8004c70 <HAL_RCC_GetSysClockFreq+0x34>
 8004c6a:	2b04      	cmp	r3, #4
 8004c6c:	d003      	beq.n	8004c76 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c6e:	e0db      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c70:	4b73      	ldr	r3, [pc, #460]	@ (8004e40 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c72:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c74:	e0db      	b.n	8004e2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c76:	4b73      	ldr	r3, [pc, #460]	@ (8004e44 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c7a:	e0d8      	b.n	8004e2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c7c:	4b6f      	ldr	r3, [pc, #444]	@ (8004e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c84:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c86:	4b6d      	ldr	r3, [pc, #436]	@ (8004e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d063      	beq.n	8004d5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c92:	4b6a      	ldr	r3, [pc, #424]	@ (8004e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	099b      	lsrs	r3, r3, #6
 8004c98:	2200      	movs	r2, #0
 8004c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004caa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004cae:	4622      	mov	r2, r4
 8004cb0:	462b      	mov	r3, r5
 8004cb2:	f04f 0000 	mov.w	r0, #0
 8004cb6:	f04f 0100 	mov.w	r1, #0
 8004cba:	0159      	lsls	r1, r3, #5
 8004cbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cc0:	0150      	lsls	r0, r2, #5
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	4621      	mov	r1, r4
 8004cc8:	1a51      	subs	r1, r2, r1
 8004cca:	6139      	str	r1, [r7, #16]
 8004ccc:	4629      	mov	r1, r5
 8004cce:	eb63 0301 	sbc.w	r3, r3, r1
 8004cd2:	617b      	str	r3, [r7, #20]
 8004cd4:	f04f 0200 	mov.w	r2, #0
 8004cd8:	f04f 0300 	mov.w	r3, #0
 8004cdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ce0:	4659      	mov	r1, fp
 8004ce2:	018b      	lsls	r3, r1, #6
 8004ce4:	4651      	mov	r1, sl
 8004ce6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cea:	4651      	mov	r1, sl
 8004cec:	018a      	lsls	r2, r1, #6
 8004cee:	4651      	mov	r1, sl
 8004cf0:	ebb2 0801 	subs.w	r8, r2, r1
 8004cf4:	4659      	mov	r1, fp
 8004cf6:	eb63 0901 	sbc.w	r9, r3, r1
 8004cfa:	f04f 0200 	mov.w	r2, #0
 8004cfe:	f04f 0300 	mov.w	r3, #0
 8004d02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d0e:	4690      	mov	r8, r2
 8004d10:	4699      	mov	r9, r3
 8004d12:	4623      	mov	r3, r4
 8004d14:	eb18 0303 	adds.w	r3, r8, r3
 8004d18:	60bb      	str	r3, [r7, #8]
 8004d1a:	462b      	mov	r3, r5
 8004d1c:	eb49 0303 	adc.w	r3, r9, r3
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	f04f 0200 	mov.w	r2, #0
 8004d26:	f04f 0300 	mov.w	r3, #0
 8004d2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d2e:	4629      	mov	r1, r5
 8004d30:	024b      	lsls	r3, r1, #9
 8004d32:	4621      	mov	r1, r4
 8004d34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d38:	4621      	mov	r1, r4
 8004d3a:	024a      	lsls	r2, r1, #9
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	4619      	mov	r1, r3
 8004d40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d42:	2200      	movs	r2, #0
 8004d44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d4c:	f7fb fa50 	bl	80001f0 <__aeabi_uldivmod>
 8004d50:	4602      	mov	r2, r0
 8004d52:	460b      	mov	r3, r1
 8004d54:	4613      	mov	r3, r2
 8004d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d58:	e058      	b.n	8004e0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d5a:	4b38      	ldr	r3, [pc, #224]	@ (8004e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	099b      	lsrs	r3, r3, #6
 8004d60:	2200      	movs	r2, #0
 8004d62:	4618      	mov	r0, r3
 8004d64:	4611      	mov	r1, r2
 8004d66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d6a:	623b      	str	r3, [r7, #32]
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d74:	4642      	mov	r2, r8
 8004d76:	464b      	mov	r3, r9
 8004d78:	f04f 0000 	mov.w	r0, #0
 8004d7c:	f04f 0100 	mov.w	r1, #0
 8004d80:	0159      	lsls	r1, r3, #5
 8004d82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d86:	0150      	lsls	r0, r2, #5
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4641      	mov	r1, r8
 8004d8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d92:	4649      	mov	r1, r9
 8004d94:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d98:	f04f 0200 	mov.w	r2, #0
 8004d9c:	f04f 0300 	mov.w	r3, #0
 8004da0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004da4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004da8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004dac:	ebb2 040a 	subs.w	r4, r2, sl
 8004db0:	eb63 050b 	sbc.w	r5, r3, fp
 8004db4:	f04f 0200 	mov.w	r2, #0
 8004db8:	f04f 0300 	mov.w	r3, #0
 8004dbc:	00eb      	lsls	r3, r5, #3
 8004dbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dc2:	00e2      	lsls	r2, r4, #3
 8004dc4:	4614      	mov	r4, r2
 8004dc6:	461d      	mov	r5, r3
 8004dc8:	4643      	mov	r3, r8
 8004dca:	18e3      	adds	r3, r4, r3
 8004dcc:	603b      	str	r3, [r7, #0]
 8004dce:	464b      	mov	r3, r9
 8004dd0:	eb45 0303 	adc.w	r3, r5, r3
 8004dd4:	607b      	str	r3, [r7, #4]
 8004dd6:	f04f 0200 	mov.w	r2, #0
 8004dda:	f04f 0300 	mov.w	r3, #0
 8004dde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004de2:	4629      	mov	r1, r5
 8004de4:	028b      	lsls	r3, r1, #10
 8004de6:	4621      	mov	r1, r4
 8004de8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004dec:	4621      	mov	r1, r4
 8004dee:	028a      	lsls	r2, r1, #10
 8004df0:	4610      	mov	r0, r2
 8004df2:	4619      	mov	r1, r3
 8004df4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004df6:	2200      	movs	r2, #0
 8004df8:	61bb      	str	r3, [r7, #24]
 8004dfa:	61fa      	str	r2, [r7, #28]
 8004dfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e00:	f7fb f9f6 	bl	80001f0 <__aeabi_uldivmod>
 8004e04:	4602      	mov	r2, r0
 8004e06:	460b      	mov	r3, r1
 8004e08:	4613      	mov	r3, r2
 8004e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	0c1b      	lsrs	r3, r3, #16
 8004e12:	f003 0303 	and.w	r3, r3, #3
 8004e16:	3301      	adds	r3, #1
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004e1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e26:	e002      	b.n	8004e2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e28:	4b05      	ldr	r3, [pc, #20]	@ (8004e40 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3750      	adds	r7, #80	@ 0x50
 8004e34:	46bd      	mov	sp, r7
 8004e36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e3a:	bf00      	nop
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	00f42400 	.word	0x00f42400
 8004e44:	007a1200 	.word	0x007a1200

08004e48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e4c:	4b03      	ldr	r3, [pc, #12]	@ (8004e5c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	20000000 	.word	0x20000000

08004e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e64:	f7ff fff0 	bl	8004e48 <HAL_RCC_GetHCLKFreq>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	4b05      	ldr	r3, [pc, #20]	@ (8004e80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	0a9b      	lsrs	r3, r3, #10
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	4903      	ldr	r1, [pc, #12]	@ (8004e84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e76:	5ccb      	ldrb	r3, [r1, r3]
 8004e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	40023800 	.word	0x40023800
 8004e84:	08007ecc 	.word	0x08007ecc

08004e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e8c:	f7ff ffdc 	bl	8004e48 <HAL_RCC_GetHCLKFreq>
 8004e90:	4602      	mov	r2, r0
 8004e92:	4b05      	ldr	r3, [pc, #20]	@ (8004ea8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	0b5b      	lsrs	r3, r3, #13
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	4903      	ldr	r1, [pc, #12]	@ (8004eac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	40023800 	.word	0x40023800
 8004eac:	08007ecc 	.word	0x08007ecc

08004eb0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	220f      	movs	r2, #15
 8004ebe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ec0:	4b12      	ldr	r3, [pc, #72]	@ (8004f0c <HAL_RCC_GetClockConfig+0x5c>)
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f003 0203 	and.w	r2, r3, #3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8004f0c <HAL_RCC_GetClockConfig+0x5c>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8004f0c <HAL_RCC_GetClockConfig+0x5c>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004ee4:	4b09      	ldr	r3, [pc, #36]	@ (8004f0c <HAL_RCC_GetClockConfig+0x5c>)
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	08db      	lsrs	r3, r3, #3
 8004eea:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004ef2:	4b07      	ldr	r3, [pc, #28]	@ (8004f10 <HAL_RCC_GetClockConfig+0x60>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 020f 	and.w	r2, r3, #15
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	601a      	str	r2, [r3, #0]
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	40023800 	.word	0x40023800
 8004f10:	40023c00 	.word	0x40023c00

08004f14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10b      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d105      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d075      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f48:	4b91      	ldr	r3, [pc, #580]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f4e:	f7fc fb4f 	bl	80015f0 <HAL_GetTick>
 8004f52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f54:	e008      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f56:	f7fc fb4b 	bl	80015f0 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d901      	bls.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e189      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f68:	4b8a      	ldr	r3, [pc, #552]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1f0      	bne.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d009      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	019a      	lsls	r2, r3, #6
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	071b      	lsls	r3, r3, #28
 8004f8c:	4981      	ldr	r1, [pc, #516]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d01f      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fa0:	4b7c      	ldr	r3, [pc, #496]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fa6:	0f1b      	lsrs	r3, r3, #28
 8004fa8:	f003 0307 	and.w	r3, r3, #7
 8004fac:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	019a      	lsls	r2, r3, #6
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	061b      	lsls	r3, r3, #24
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	071b      	lsls	r3, r3, #28
 8004fc0:	4974      	ldr	r1, [pc, #464]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004fc8:	4b72      	ldr	r3, [pc, #456]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fce:	f023 021f 	bic.w	r2, r3, #31
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	496e      	ldr	r1, [pc, #440]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00d      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	019a      	lsls	r2, r3, #6
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	061b      	lsls	r3, r3, #24
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	071b      	lsls	r3, r3, #28
 8005000:	4964      	ldr	r1, [pc, #400]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005002:	4313      	orrs	r3, r2
 8005004:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005008:	4b61      	ldr	r3, [pc, #388]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800500a:	2201      	movs	r2, #1
 800500c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800500e:	f7fc faef 	bl	80015f0 <HAL_GetTick>
 8005012:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005014:	e008      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005016:	f7fc faeb 	bl	80015f0 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d901      	bls.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e129      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005028:	4b5a      	ldr	r3, [pc, #360]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d0f0      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0304 	and.w	r3, r3, #4
 800503c:	2b00      	cmp	r3, #0
 800503e:	d105      	bne.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005048:	2b00      	cmp	r3, #0
 800504a:	d079      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800504c:	4b52      	ldr	r3, [pc, #328]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800504e:	2200      	movs	r2, #0
 8005050:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005052:	f7fc facd 	bl	80015f0 <HAL_GetTick>
 8005056:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005058:	e008      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800505a:	f7fc fac9 	bl	80015f0 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d901      	bls.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e107      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800506c:	4b49      	ldr	r3, [pc, #292]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005074:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005078:	d0ef      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0304 	and.w	r3, r3, #4
 8005082:	2b00      	cmp	r3, #0
 8005084:	d020      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005086:	4b43      	ldr	r3, [pc, #268]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800508c:	0f1b      	lsrs	r3, r3, #28
 800508e:	f003 0307 	and.w	r3, r3, #7
 8005092:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	019a      	lsls	r2, r3, #6
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	061b      	lsls	r3, r3, #24
 80050a0:	431a      	orrs	r2, r3
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	071b      	lsls	r3, r3, #28
 80050a6:	493b      	ldr	r1, [pc, #236]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80050ae:	4b39      	ldr	r3, [pc, #228]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050b4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a1b      	ldr	r3, [r3, #32]
 80050bc:	3b01      	subs	r3, #1
 80050be:	021b      	lsls	r3, r3, #8
 80050c0:	4934      	ldr	r1, [pc, #208]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0308 	and.w	r3, r3, #8
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d01e      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80050d4:	4b2f      	ldr	r3, [pc, #188]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050da:	0e1b      	lsrs	r3, r3, #24
 80050dc:	f003 030f 	and.w	r3, r3, #15
 80050e0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	019a      	lsls	r2, r3, #6
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	061b      	lsls	r3, r3, #24
 80050ec:	431a      	orrs	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	071b      	lsls	r3, r3, #28
 80050f4:	4927      	ldr	r1, [pc, #156]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80050fc:	4b25      	ldr	r3, [pc, #148]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005102:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510a:	4922      	ldr	r1, [pc, #136]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800510c:	4313      	orrs	r3, r2
 800510e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005112:	4b21      	ldr	r3, [pc, #132]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005114:	2201      	movs	r2, #1
 8005116:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005118:	f7fc fa6a 	bl	80015f0 <HAL_GetTick>
 800511c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800511e:	e008      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005120:	f7fc fa66 	bl	80015f0 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d901      	bls.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e0a4      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005132:	4b18      	ldr	r3, [pc, #96]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800513a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800513e:	d1ef      	bne.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0320 	and.w	r3, r3, #32
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 808b 	beq.w	8005264 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800514e:	2300      	movs	r3, #0
 8005150:	60fb      	str	r3, [r7, #12]
 8005152:	4b10      	ldr	r3, [pc, #64]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005156:	4a0f      	ldr	r2, [pc, #60]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005158:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800515c:	6413      	str	r3, [r2, #64]	@ 0x40
 800515e:	4b0d      	ldr	r3, [pc, #52]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005166:	60fb      	str	r3, [r7, #12]
 8005168:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800516a:	4b0c      	ldr	r3, [pc, #48]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a0b      	ldr	r2, [pc, #44]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005170:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005174:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005176:	f7fc fa3b 	bl	80015f0 <HAL_GetTick>
 800517a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800517c:	e010      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800517e:	f7fc fa37 	bl	80015f0 <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	2b02      	cmp	r3, #2
 800518a:	d909      	bls.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e075      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005190:	42470068 	.word	0x42470068
 8005194:	40023800 	.word	0x40023800
 8005198:	42470070 	.word	0x42470070
 800519c:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80051a0:	4b38      	ldr	r3, [pc, #224]	@ (8005284 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d0e8      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051ac:	4b36      	ldr	r3, [pc, #216]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051b4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d02f      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d028      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051ca:	4b2f      	ldr	r3, [pc, #188]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051d2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051d4:	4b2d      	ldr	r3, [pc, #180]	@ (800528c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80051d6:	2201      	movs	r2, #1
 80051d8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051da:	4b2c      	ldr	r3, [pc, #176]	@ (800528c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80051dc:	2200      	movs	r2, #0
 80051de:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80051e0:	4a29      	ldr	r2, [pc, #164]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80051e6:	4b28      	ldr	r3, [pc, #160]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d114      	bne.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80051f2:	f7fc f9fd 	bl	80015f0 <HAL_GetTick>
 80051f6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f8:	e00a      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051fa:	f7fc f9f9 	bl	80015f0 <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005208:	4293      	cmp	r3, r2
 800520a:	d901      	bls.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e035      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005210:	4b1d      	ldr	r3, [pc, #116]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005214:	f003 0302 	and.w	r3, r3, #2
 8005218:	2b00      	cmp	r3, #0
 800521a:	d0ee      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005220:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005224:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005228:	d10d      	bne.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800522a:	4b17      	ldr	r3, [pc, #92]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005236:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800523a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800523e:	4912      	ldr	r1, [pc, #72]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005240:	4313      	orrs	r3, r2
 8005242:	608b      	str	r3, [r1, #8]
 8005244:	e005      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005246:	4b10      	ldr	r3, [pc, #64]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	4a0f      	ldr	r2, [pc, #60]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800524c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005250:	6093      	str	r3, [r2, #8]
 8005252:	4b0d      	ldr	r3, [pc, #52]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005254:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800525a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800525e:	490a      	ldr	r1, [pc, #40]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005260:	4313      	orrs	r3, r2
 8005262:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0310 	and.w	r3, r3, #16
 800526c:	2b00      	cmp	r3, #0
 800526e:	d004      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005276:	4b06      	ldr	r3, [pc, #24]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005278:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3718      	adds	r7, #24
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	40007000 	.word	0x40007000
 8005288:	40023800 	.word	0x40023800
 800528c:	42470e40 	.word	0x42470e40
 8005290:	424711e0 	.word	0x424711e0

08005294 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e025      	b.n	80052f4 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d106      	bne.n	80052c2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f7fb fa9f 	bl	8000800 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2202      	movs	r2, #2
 80052c6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	3304      	adds	r3, #4
 80052d2:	4619      	mov	r1, r3
 80052d4:	4610      	mov	r0, r2
 80052d6:	f000 ffd3 	bl	8006280 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6818      	ldr	r0, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	461a      	mov	r2, r3
 80052e4:	6839      	ldr	r1, [r7, #0]
 80052e6:	f001 f828 	bl	800633a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3708      	adds	r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e07b      	b.n	8005406 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005312:	2b00      	cmp	r3, #0
 8005314:	d108      	bne.n	8005328 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800531e:	d009      	beq.n	8005334 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	61da      	str	r2, [r3, #28]
 8005326:	e005      	b.n	8005334 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d106      	bne.n	8005354 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7fb fec4 	bl	80010dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2202      	movs	r2, #2
 8005358:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800536a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800537c:	431a      	orrs	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005386:	431a      	orrs	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	431a      	orrs	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	431a      	orrs	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053a4:	431a      	orrs	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053ae:	431a      	orrs	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053b8:	ea42 0103 	orr.w	r1, r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	430a      	orrs	r2, r1
 80053ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	0c1b      	lsrs	r3, r3, #16
 80053d2:	f003 0104 	and.w	r1, r3, #4
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053da:	f003 0210 	and.w	r2, r3, #16
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	69da      	ldr	r2, [r3, #28]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b082      	sub	sp, #8
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e041      	b.n	80054a4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d106      	bne.n	800543a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f7fb ffe7 	bl	8001408 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2202      	movs	r2, #2
 800543e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	3304      	adds	r3, #4
 800544a:	4619      	mov	r1, r3
 800544c:	4610      	mov	r0, r2
 800544e:	f000 fa7d 	bl	800594c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3708      	adds	r7, #8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d001      	beq.n	80054c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e04e      	b.n	8005562 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 0201 	orr.w	r2, r2, #1
 80054da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a23      	ldr	r2, [pc, #140]	@ (8005570 <HAL_TIM_Base_Start_IT+0xc4>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d022      	beq.n	800552c <HAL_TIM_Base_Start_IT+0x80>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ee:	d01d      	beq.n	800552c <HAL_TIM_Base_Start_IT+0x80>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a1f      	ldr	r2, [pc, #124]	@ (8005574 <HAL_TIM_Base_Start_IT+0xc8>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d018      	beq.n	800552c <HAL_TIM_Base_Start_IT+0x80>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a1e      	ldr	r2, [pc, #120]	@ (8005578 <HAL_TIM_Base_Start_IT+0xcc>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d013      	beq.n	800552c <HAL_TIM_Base_Start_IT+0x80>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a1c      	ldr	r2, [pc, #112]	@ (800557c <HAL_TIM_Base_Start_IT+0xd0>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d00e      	beq.n	800552c <HAL_TIM_Base_Start_IT+0x80>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a1b      	ldr	r2, [pc, #108]	@ (8005580 <HAL_TIM_Base_Start_IT+0xd4>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d009      	beq.n	800552c <HAL_TIM_Base_Start_IT+0x80>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a19      	ldr	r2, [pc, #100]	@ (8005584 <HAL_TIM_Base_Start_IT+0xd8>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d004      	beq.n	800552c <HAL_TIM_Base_Start_IT+0x80>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a18      	ldr	r2, [pc, #96]	@ (8005588 <HAL_TIM_Base_Start_IT+0xdc>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d111      	bne.n	8005550 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f003 0307 	and.w	r3, r3, #7
 8005536:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2b06      	cmp	r3, #6
 800553c:	d010      	beq.n	8005560 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f042 0201 	orr.w	r2, r2, #1
 800554c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800554e:	e007      	b.n	8005560 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f042 0201 	orr.w	r2, r2, #1
 800555e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	40010000 	.word	0x40010000
 8005574:	40000400 	.word	0x40000400
 8005578:	40000800 	.word	0x40000800
 800557c:	40000c00 	.word	0x40000c00
 8005580:	40010400 	.word	0x40010400
 8005584:	40014000 	.word	0x40014000
 8005588:	40001800 	.word	0x40001800

0800558c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d020      	beq.n	80055f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d01b      	beq.n	80055f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f06f 0202 	mvn.w	r2, #2
 80055c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	f003 0303 	and.w	r3, r3, #3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f999 	bl	800590e <HAL_TIM_IC_CaptureCallback>
 80055dc:	e005      	b.n	80055ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f98b 	bl	80058fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 f99c 	bl	8005922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f003 0304 	and.w	r3, r3, #4
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d020      	beq.n	800563c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	2b00      	cmp	r3, #0
 8005602:	d01b      	beq.n	800563c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f06f 0204 	mvn.w	r2, #4
 800560c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2202      	movs	r2, #2
 8005612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f973 	bl	800590e <HAL_TIM_IC_CaptureCallback>
 8005628:	e005      	b.n	8005636 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f965 	bl	80058fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f976 	bl	8005922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	2b00      	cmp	r3, #0
 8005644:	d020      	beq.n	8005688 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f003 0308 	and.w	r3, r3, #8
 800564c:	2b00      	cmp	r3, #0
 800564e:	d01b      	beq.n	8005688 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f06f 0208 	mvn.w	r2, #8
 8005658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2204      	movs	r2, #4
 800565e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f94d 	bl	800590e <HAL_TIM_IC_CaptureCallback>
 8005674:	e005      	b.n	8005682 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f93f 	bl	80058fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f950 	bl	8005922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	f003 0310 	and.w	r3, r3, #16
 800568e:	2b00      	cmp	r3, #0
 8005690:	d020      	beq.n	80056d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f003 0310 	and.w	r3, r3, #16
 8005698:	2b00      	cmp	r3, #0
 800569a:	d01b      	beq.n	80056d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f06f 0210 	mvn.w	r2, #16
 80056a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2208      	movs	r2, #8
 80056aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f927 	bl	800590e <HAL_TIM_IC_CaptureCallback>
 80056c0:	e005      	b.n	80056ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f919 	bl	80058fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 f92a 	bl	8005922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00c      	beq.n	80056f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d007      	beq.n	80056f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f06f 0201 	mvn.w	r2, #1
 80056f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7fb fca4 	bl	8001040 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00c      	beq.n	800571c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005708:	2b00      	cmp	r3, #0
 800570a:	d007      	beq.n	800571c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 fae4 	bl	8005ce4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00c      	beq.n	8005740 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800572c:	2b00      	cmp	r3, #0
 800572e:	d007      	beq.n	8005740 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f8fb 	bl	8005936 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	f003 0320 	and.w	r3, r3, #32
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00c      	beq.n	8005764 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f003 0320 	and.w	r3, r3, #32
 8005750:	2b00      	cmp	r3, #0
 8005752:	d007      	beq.n	8005764 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f06f 0220 	mvn.w	r2, #32
 800575c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fab6 	bl	8005cd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005764:	bf00      	nop
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005776:	2300      	movs	r3, #0
 8005778:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005780:	2b01      	cmp	r3, #1
 8005782:	d101      	bne.n	8005788 <HAL_TIM_ConfigClockSource+0x1c>
 8005784:	2302      	movs	r3, #2
 8005786:	e0b4      	b.n	80058f2 <HAL_TIM_ConfigClockSource+0x186>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80057a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057c0:	d03e      	beq.n	8005840 <HAL_TIM_ConfigClockSource+0xd4>
 80057c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057c6:	f200 8087 	bhi.w	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
 80057ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057ce:	f000 8086 	beq.w	80058de <HAL_TIM_ConfigClockSource+0x172>
 80057d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057d6:	d87f      	bhi.n	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
 80057d8:	2b70      	cmp	r3, #112	@ 0x70
 80057da:	d01a      	beq.n	8005812 <HAL_TIM_ConfigClockSource+0xa6>
 80057dc:	2b70      	cmp	r3, #112	@ 0x70
 80057de:	d87b      	bhi.n	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
 80057e0:	2b60      	cmp	r3, #96	@ 0x60
 80057e2:	d050      	beq.n	8005886 <HAL_TIM_ConfigClockSource+0x11a>
 80057e4:	2b60      	cmp	r3, #96	@ 0x60
 80057e6:	d877      	bhi.n	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
 80057e8:	2b50      	cmp	r3, #80	@ 0x50
 80057ea:	d03c      	beq.n	8005866 <HAL_TIM_ConfigClockSource+0xfa>
 80057ec:	2b50      	cmp	r3, #80	@ 0x50
 80057ee:	d873      	bhi.n	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
 80057f0:	2b40      	cmp	r3, #64	@ 0x40
 80057f2:	d058      	beq.n	80058a6 <HAL_TIM_ConfigClockSource+0x13a>
 80057f4:	2b40      	cmp	r3, #64	@ 0x40
 80057f6:	d86f      	bhi.n	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
 80057f8:	2b30      	cmp	r3, #48	@ 0x30
 80057fa:	d064      	beq.n	80058c6 <HAL_TIM_ConfigClockSource+0x15a>
 80057fc:	2b30      	cmp	r3, #48	@ 0x30
 80057fe:	d86b      	bhi.n	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005800:	2b20      	cmp	r3, #32
 8005802:	d060      	beq.n	80058c6 <HAL_TIM_ConfigClockSource+0x15a>
 8005804:	2b20      	cmp	r3, #32
 8005806:	d867      	bhi.n	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005808:	2b00      	cmp	r3, #0
 800580a:	d05c      	beq.n	80058c6 <HAL_TIM_ConfigClockSource+0x15a>
 800580c:	2b10      	cmp	r3, #16
 800580e:	d05a      	beq.n	80058c6 <HAL_TIM_ConfigClockSource+0x15a>
 8005810:	e062      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005822:	f000 f9b9 	bl	8005b98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005834:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	609a      	str	r2, [r3, #8]
      break;
 800583e:	e04f      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005850:	f000 f9a2 	bl	8005b98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689a      	ldr	r2, [r3, #8]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005862:	609a      	str	r2, [r3, #8]
      break;
 8005864:	e03c      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005872:	461a      	mov	r2, r3
 8005874:	f000 f916 	bl	8005aa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2150      	movs	r1, #80	@ 0x50
 800587e:	4618      	mov	r0, r3
 8005880:	f000 f96f 	bl	8005b62 <TIM_ITRx_SetConfig>
      break;
 8005884:	e02c      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005892:	461a      	mov	r2, r3
 8005894:	f000 f935 	bl	8005b02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2160      	movs	r1, #96	@ 0x60
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 f95f 	bl	8005b62 <TIM_ITRx_SetConfig>
      break;
 80058a4:	e01c      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058b2:	461a      	mov	r2, r3
 80058b4:	f000 f8f6 	bl	8005aa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2140      	movs	r1, #64	@ 0x40
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 f94f 	bl	8005b62 <TIM_ITRx_SetConfig>
      break;
 80058c4:	e00c      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4619      	mov	r1, r3
 80058d0:	4610      	mov	r0, r2
 80058d2:	f000 f946 	bl	8005b62 <TIM_ITRx_SetConfig>
      break;
 80058d6:	e003      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	73fb      	strb	r3, [r7, #15]
      break;
 80058dc:	e000      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b083      	sub	sp, #12
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005902:	bf00      	nop
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800590e:	b480      	push	{r7}
 8005910:	b083      	sub	sp, #12
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005916:	bf00      	nop
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005922:	b480      	push	{r7}
 8005924:	b083      	sub	sp, #12
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800592a:	bf00      	nop
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005936:	b480      	push	{r7}
 8005938:	b083      	sub	sp, #12
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800593e:	bf00      	nop
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
	...

0800594c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a46      	ldr	r2, [pc, #280]	@ (8005a78 <TIM_Base_SetConfig+0x12c>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d013      	beq.n	800598c <TIM_Base_SetConfig+0x40>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800596a:	d00f      	beq.n	800598c <TIM_Base_SetConfig+0x40>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a43      	ldr	r2, [pc, #268]	@ (8005a7c <TIM_Base_SetConfig+0x130>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d00b      	beq.n	800598c <TIM_Base_SetConfig+0x40>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a42      	ldr	r2, [pc, #264]	@ (8005a80 <TIM_Base_SetConfig+0x134>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d007      	beq.n	800598c <TIM_Base_SetConfig+0x40>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a41      	ldr	r2, [pc, #260]	@ (8005a84 <TIM_Base_SetConfig+0x138>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d003      	beq.n	800598c <TIM_Base_SetConfig+0x40>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a40      	ldr	r2, [pc, #256]	@ (8005a88 <TIM_Base_SetConfig+0x13c>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d108      	bne.n	800599e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005992:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	4313      	orrs	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a35      	ldr	r2, [pc, #212]	@ (8005a78 <TIM_Base_SetConfig+0x12c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d02b      	beq.n	80059fe <TIM_Base_SetConfig+0xb2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ac:	d027      	beq.n	80059fe <TIM_Base_SetConfig+0xb2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a32      	ldr	r2, [pc, #200]	@ (8005a7c <TIM_Base_SetConfig+0x130>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d023      	beq.n	80059fe <TIM_Base_SetConfig+0xb2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a31      	ldr	r2, [pc, #196]	@ (8005a80 <TIM_Base_SetConfig+0x134>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d01f      	beq.n	80059fe <TIM_Base_SetConfig+0xb2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a30      	ldr	r2, [pc, #192]	@ (8005a84 <TIM_Base_SetConfig+0x138>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d01b      	beq.n	80059fe <TIM_Base_SetConfig+0xb2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a2f      	ldr	r2, [pc, #188]	@ (8005a88 <TIM_Base_SetConfig+0x13c>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d017      	beq.n	80059fe <TIM_Base_SetConfig+0xb2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a2e      	ldr	r2, [pc, #184]	@ (8005a8c <TIM_Base_SetConfig+0x140>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d013      	beq.n	80059fe <TIM_Base_SetConfig+0xb2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a2d      	ldr	r2, [pc, #180]	@ (8005a90 <TIM_Base_SetConfig+0x144>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d00f      	beq.n	80059fe <TIM_Base_SetConfig+0xb2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a2c      	ldr	r2, [pc, #176]	@ (8005a94 <TIM_Base_SetConfig+0x148>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d00b      	beq.n	80059fe <TIM_Base_SetConfig+0xb2>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a2b      	ldr	r2, [pc, #172]	@ (8005a98 <TIM_Base_SetConfig+0x14c>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d007      	beq.n	80059fe <TIM_Base_SetConfig+0xb2>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a2a      	ldr	r2, [pc, #168]	@ (8005a9c <TIM_Base_SetConfig+0x150>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d003      	beq.n	80059fe <TIM_Base_SetConfig+0xb2>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a29      	ldr	r2, [pc, #164]	@ (8005aa0 <TIM_Base_SetConfig+0x154>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d108      	bne.n	8005a10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	689a      	ldr	r2, [r3, #8]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a10      	ldr	r2, [pc, #64]	@ (8005a78 <TIM_Base_SetConfig+0x12c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d003      	beq.n	8005a44 <TIM_Base_SetConfig+0xf8>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a12      	ldr	r2, [pc, #72]	@ (8005a88 <TIM_Base_SetConfig+0x13c>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d103      	bne.n	8005a4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	691a      	ldr	r2, [r3, #16]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d105      	bne.n	8005a6a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	f023 0201 	bic.w	r2, r3, #1
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	611a      	str	r2, [r3, #16]
  }
}
 8005a6a:	bf00      	nop
 8005a6c:	3714      	adds	r7, #20
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	40010000 	.word	0x40010000
 8005a7c:	40000400 	.word	0x40000400
 8005a80:	40000800 	.word	0x40000800
 8005a84:	40000c00 	.word	0x40000c00
 8005a88:	40010400 	.word	0x40010400
 8005a8c:	40014000 	.word	0x40014000
 8005a90:	40014400 	.word	0x40014400
 8005a94:	40014800 	.word	0x40014800
 8005a98:	40001800 	.word	0x40001800
 8005a9c:	40001c00 	.word	0x40001c00
 8005aa0:	40002000 	.word	0x40002000

08005aa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	f023 0201 	bic.w	r2, r3, #1
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ace:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	011b      	lsls	r3, r3, #4
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f023 030a 	bic.w	r3, r3, #10
 8005ae0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	621a      	str	r2, [r3, #32]
}
 8005af6:	bf00      	nop
 8005af8:	371c      	adds	r7, #28
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b087      	sub	sp, #28
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	60f8      	str	r0, [r7, #12]
 8005b0a:	60b9      	str	r1, [r7, #8]
 8005b0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6a1b      	ldr	r3, [r3, #32]
 8005b18:	f023 0210 	bic.w	r2, r3, #16
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005b2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	031b      	lsls	r3, r3, #12
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005b3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	011b      	lsls	r3, r3, #4
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	621a      	str	r2, [r3, #32]
}
 8005b56:	bf00      	nop
 8005b58:	371c      	adds	r7, #28
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b085      	sub	sp, #20
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
 8005b6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	f043 0307 	orr.w	r3, r3, #7
 8005b84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	609a      	str	r2, [r3, #8]
}
 8005b8c:	bf00      	nop
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b087      	sub	sp, #28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
 8005ba4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005bb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	021a      	lsls	r2, r3, #8
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	431a      	orrs	r2, r3
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	609a      	str	r2, [r3, #8]
}
 8005bcc:	bf00      	nop
 8005bce:	371c      	adds	r7, #28
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d101      	bne.n	8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bec:	2302      	movs	r3, #2
 8005bee:	e05a      	b.n	8005ca6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a21      	ldr	r2, [pc, #132]	@ (8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d022      	beq.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c3c:	d01d      	beq.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a1d      	ldr	r2, [pc, #116]	@ (8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d018      	beq.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8005cbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d013      	beq.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a1a      	ldr	r2, [pc, #104]	@ (8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d00e      	beq.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a18      	ldr	r2, [pc, #96]	@ (8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d009      	beq.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a17      	ldr	r2, [pc, #92]	@ (8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d004      	beq.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a15      	ldr	r2, [pc, #84]	@ (8005ccc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d10c      	bne.n	8005c94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	40010000 	.word	0x40010000
 8005cb8:	40000400 	.word	0x40000400
 8005cbc:	40000800 	.word	0x40000800
 8005cc0:	40000c00 	.word	0x40000c00
 8005cc4:	40010400 	.word	0x40010400
 8005cc8:	40014000 	.word	0x40014000
 8005ccc:	40001800 	.word	0x40001800

08005cd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e042      	b.n	8005d90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d106      	bne.n	8005d24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7fb fbbe 	bl	80014a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2224      	movs	r2, #36	@ 0x24
 8005d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68da      	ldr	r2, [r3, #12]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 f82b 	bl	8005d98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	691a      	ldr	r2, [r3, #16]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	695a      	ldr	r2, [r3, #20]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68da      	ldr	r2, [r3, #12]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2220      	movs	r2, #32
 8005d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2220      	movs	r2, #32
 8005d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3708      	adds	r7, #8
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d9c:	b0c0      	sub	sp, #256	@ 0x100
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db4:	68d9      	ldr	r1, [r3, #12]
 8005db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	ea40 0301 	orr.w	r3, r0, r1
 8005dc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc6:	689a      	ldr	r2, [r3, #8]
 8005dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	431a      	orrs	r2, r3
 8005dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005df0:	f021 010c 	bic.w	r1, r1, #12
 8005df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005dfe:	430b      	orrs	r3, r1
 8005e00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e12:	6999      	ldr	r1, [r3, #24]
 8005e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	ea40 0301 	orr.w	r3, r0, r1
 8005e1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	4b8f      	ldr	r3, [pc, #572]	@ (8006064 <UART_SetConfig+0x2cc>)
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d005      	beq.n	8005e38 <UART_SetConfig+0xa0>
 8005e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	4b8d      	ldr	r3, [pc, #564]	@ (8006068 <UART_SetConfig+0x2d0>)
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d104      	bne.n	8005e42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e38:	f7ff f826 	bl	8004e88 <HAL_RCC_GetPCLK2Freq>
 8005e3c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005e40:	e003      	b.n	8005e4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e42:	f7ff f80d 	bl	8004e60 <HAL_RCC_GetPCLK1Freq>
 8005e46:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e4e:	69db      	ldr	r3, [r3, #28]
 8005e50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e54:	f040 810c 	bne.w	8006070 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e62:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005e66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005e6a:	4622      	mov	r2, r4
 8005e6c:	462b      	mov	r3, r5
 8005e6e:	1891      	adds	r1, r2, r2
 8005e70:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005e72:	415b      	adcs	r3, r3
 8005e74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e7a:	4621      	mov	r1, r4
 8005e7c:	eb12 0801 	adds.w	r8, r2, r1
 8005e80:	4629      	mov	r1, r5
 8005e82:	eb43 0901 	adc.w	r9, r3, r1
 8005e86:	f04f 0200 	mov.w	r2, #0
 8005e8a:	f04f 0300 	mov.w	r3, #0
 8005e8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e9a:	4690      	mov	r8, r2
 8005e9c:	4699      	mov	r9, r3
 8005e9e:	4623      	mov	r3, r4
 8005ea0:	eb18 0303 	adds.w	r3, r8, r3
 8005ea4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ea8:	462b      	mov	r3, r5
 8005eaa:	eb49 0303 	adc.w	r3, r9, r3
 8005eae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005ebe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005ec2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	18db      	adds	r3, r3, r3
 8005eca:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ecc:	4613      	mov	r3, r2
 8005ece:	eb42 0303 	adc.w	r3, r2, r3
 8005ed2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ed4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005ed8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005edc:	f7fa f988 	bl	80001f0 <__aeabi_uldivmod>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	4b61      	ldr	r3, [pc, #388]	@ (800606c <UART_SetConfig+0x2d4>)
 8005ee6:	fba3 2302 	umull	r2, r3, r3, r2
 8005eea:	095b      	lsrs	r3, r3, #5
 8005eec:	011c      	lsls	r4, r3, #4
 8005eee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ef8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005efc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005f00:	4642      	mov	r2, r8
 8005f02:	464b      	mov	r3, r9
 8005f04:	1891      	adds	r1, r2, r2
 8005f06:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005f08:	415b      	adcs	r3, r3
 8005f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005f10:	4641      	mov	r1, r8
 8005f12:	eb12 0a01 	adds.w	sl, r2, r1
 8005f16:	4649      	mov	r1, r9
 8005f18:	eb43 0b01 	adc.w	fp, r3, r1
 8005f1c:	f04f 0200 	mov.w	r2, #0
 8005f20:	f04f 0300 	mov.w	r3, #0
 8005f24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f30:	4692      	mov	sl, r2
 8005f32:	469b      	mov	fp, r3
 8005f34:	4643      	mov	r3, r8
 8005f36:	eb1a 0303 	adds.w	r3, sl, r3
 8005f3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f3e:	464b      	mov	r3, r9
 8005f40:	eb4b 0303 	adc.w	r3, fp, r3
 8005f44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f54:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005f58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	18db      	adds	r3, r3, r3
 8005f60:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f62:	4613      	mov	r3, r2
 8005f64:	eb42 0303 	adc.w	r3, r2, r3
 8005f68:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005f6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005f72:	f7fa f93d 	bl	80001f0 <__aeabi_uldivmod>
 8005f76:	4602      	mov	r2, r0
 8005f78:	460b      	mov	r3, r1
 8005f7a:	4611      	mov	r1, r2
 8005f7c:	4b3b      	ldr	r3, [pc, #236]	@ (800606c <UART_SetConfig+0x2d4>)
 8005f7e:	fba3 2301 	umull	r2, r3, r3, r1
 8005f82:	095b      	lsrs	r3, r3, #5
 8005f84:	2264      	movs	r2, #100	@ 0x64
 8005f86:	fb02 f303 	mul.w	r3, r2, r3
 8005f8a:	1acb      	subs	r3, r1, r3
 8005f8c:	00db      	lsls	r3, r3, #3
 8005f8e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005f92:	4b36      	ldr	r3, [pc, #216]	@ (800606c <UART_SetConfig+0x2d4>)
 8005f94:	fba3 2302 	umull	r2, r3, r3, r2
 8005f98:	095b      	lsrs	r3, r3, #5
 8005f9a:	005b      	lsls	r3, r3, #1
 8005f9c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005fa0:	441c      	add	r4, r3
 8005fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005fac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005fb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005fb4:	4642      	mov	r2, r8
 8005fb6:	464b      	mov	r3, r9
 8005fb8:	1891      	adds	r1, r2, r2
 8005fba:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005fbc:	415b      	adcs	r3, r3
 8005fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005fc4:	4641      	mov	r1, r8
 8005fc6:	1851      	adds	r1, r2, r1
 8005fc8:	6339      	str	r1, [r7, #48]	@ 0x30
 8005fca:	4649      	mov	r1, r9
 8005fcc:	414b      	adcs	r3, r1
 8005fce:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fd0:	f04f 0200 	mov.w	r2, #0
 8005fd4:	f04f 0300 	mov.w	r3, #0
 8005fd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005fdc:	4659      	mov	r1, fp
 8005fde:	00cb      	lsls	r3, r1, #3
 8005fe0:	4651      	mov	r1, sl
 8005fe2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fe6:	4651      	mov	r1, sl
 8005fe8:	00ca      	lsls	r2, r1, #3
 8005fea:	4610      	mov	r0, r2
 8005fec:	4619      	mov	r1, r3
 8005fee:	4603      	mov	r3, r0
 8005ff0:	4642      	mov	r2, r8
 8005ff2:	189b      	adds	r3, r3, r2
 8005ff4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ff8:	464b      	mov	r3, r9
 8005ffa:	460a      	mov	r2, r1
 8005ffc:	eb42 0303 	adc.w	r3, r2, r3
 8006000:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006010:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006014:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006018:	460b      	mov	r3, r1
 800601a:	18db      	adds	r3, r3, r3
 800601c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800601e:	4613      	mov	r3, r2
 8006020:	eb42 0303 	adc.w	r3, r2, r3
 8006024:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006026:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800602a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800602e:	f7fa f8df 	bl	80001f0 <__aeabi_uldivmod>
 8006032:	4602      	mov	r2, r0
 8006034:	460b      	mov	r3, r1
 8006036:	4b0d      	ldr	r3, [pc, #52]	@ (800606c <UART_SetConfig+0x2d4>)
 8006038:	fba3 1302 	umull	r1, r3, r3, r2
 800603c:	095b      	lsrs	r3, r3, #5
 800603e:	2164      	movs	r1, #100	@ 0x64
 8006040:	fb01 f303 	mul.w	r3, r1, r3
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	00db      	lsls	r3, r3, #3
 8006048:	3332      	adds	r3, #50	@ 0x32
 800604a:	4a08      	ldr	r2, [pc, #32]	@ (800606c <UART_SetConfig+0x2d4>)
 800604c:	fba2 2303 	umull	r2, r3, r2, r3
 8006050:	095b      	lsrs	r3, r3, #5
 8006052:	f003 0207 	and.w	r2, r3, #7
 8006056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4422      	add	r2, r4
 800605e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006060:	e106      	b.n	8006270 <UART_SetConfig+0x4d8>
 8006062:	bf00      	nop
 8006064:	40011000 	.word	0x40011000
 8006068:	40011400 	.word	0x40011400
 800606c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006070:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006074:	2200      	movs	r2, #0
 8006076:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800607a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800607e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006082:	4642      	mov	r2, r8
 8006084:	464b      	mov	r3, r9
 8006086:	1891      	adds	r1, r2, r2
 8006088:	6239      	str	r1, [r7, #32]
 800608a:	415b      	adcs	r3, r3
 800608c:	627b      	str	r3, [r7, #36]	@ 0x24
 800608e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006092:	4641      	mov	r1, r8
 8006094:	1854      	adds	r4, r2, r1
 8006096:	4649      	mov	r1, r9
 8006098:	eb43 0501 	adc.w	r5, r3, r1
 800609c:	f04f 0200 	mov.w	r2, #0
 80060a0:	f04f 0300 	mov.w	r3, #0
 80060a4:	00eb      	lsls	r3, r5, #3
 80060a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060aa:	00e2      	lsls	r2, r4, #3
 80060ac:	4614      	mov	r4, r2
 80060ae:	461d      	mov	r5, r3
 80060b0:	4643      	mov	r3, r8
 80060b2:	18e3      	adds	r3, r4, r3
 80060b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80060b8:	464b      	mov	r3, r9
 80060ba:	eb45 0303 	adc.w	r3, r5, r3
 80060be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80060c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80060ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80060d2:	f04f 0200 	mov.w	r2, #0
 80060d6:	f04f 0300 	mov.w	r3, #0
 80060da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80060de:	4629      	mov	r1, r5
 80060e0:	008b      	lsls	r3, r1, #2
 80060e2:	4621      	mov	r1, r4
 80060e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060e8:	4621      	mov	r1, r4
 80060ea:	008a      	lsls	r2, r1, #2
 80060ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80060f0:	f7fa f87e 	bl	80001f0 <__aeabi_uldivmod>
 80060f4:	4602      	mov	r2, r0
 80060f6:	460b      	mov	r3, r1
 80060f8:	4b60      	ldr	r3, [pc, #384]	@ (800627c <UART_SetConfig+0x4e4>)
 80060fa:	fba3 2302 	umull	r2, r3, r3, r2
 80060fe:	095b      	lsrs	r3, r3, #5
 8006100:	011c      	lsls	r4, r3, #4
 8006102:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006106:	2200      	movs	r2, #0
 8006108:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800610c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006110:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006114:	4642      	mov	r2, r8
 8006116:	464b      	mov	r3, r9
 8006118:	1891      	adds	r1, r2, r2
 800611a:	61b9      	str	r1, [r7, #24]
 800611c:	415b      	adcs	r3, r3
 800611e:	61fb      	str	r3, [r7, #28]
 8006120:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006124:	4641      	mov	r1, r8
 8006126:	1851      	adds	r1, r2, r1
 8006128:	6139      	str	r1, [r7, #16]
 800612a:	4649      	mov	r1, r9
 800612c:	414b      	adcs	r3, r1
 800612e:	617b      	str	r3, [r7, #20]
 8006130:	f04f 0200 	mov.w	r2, #0
 8006134:	f04f 0300 	mov.w	r3, #0
 8006138:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800613c:	4659      	mov	r1, fp
 800613e:	00cb      	lsls	r3, r1, #3
 8006140:	4651      	mov	r1, sl
 8006142:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006146:	4651      	mov	r1, sl
 8006148:	00ca      	lsls	r2, r1, #3
 800614a:	4610      	mov	r0, r2
 800614c:	4619      	mov	r1, r3
 800614e:	4603      	mov	r3, r0
 8006150:	4642      	mov	r2, r8
 8006152:	189b      	adds	r3, r3, r2
 8006154:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006158:	464b      	mov	r3, r9
 800615a:	460a      	mov	r2, r1
 800615c:	eb42 0303 	adc.w	r3, r2, r3
 8006160:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800616e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006170:	f04f 0200 	mov.w	r2, #0
 8006174:	f04f 0300 	mov.w	r3, #0
 8006178:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800617c:	4649      	mov	r1, r9
 800617e:	008b      	lsls	r3, r1, #2
 8006180:	4641      	mov	r1, r8
 8006182:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006186:	4641      	mov	r1, r8
 8006188:	008a      	lsls	r2, r1, #2
 800618a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800618e:	f7fa f82f 	bl	80001f0 <__aeabi_uldivmod>
 8006192:	4602      	mov	r2, r0
 8006194:	460b      	mov	r3, r1
 8006196:	4611      	mov	r1, r2
 8006198:	4b38      	ldr	r3, [pc, #224]	@ (800627c <UART_SetConfig+0x4e4>)
 800619a:	fba3 2301 	umull	r2, r3, r3, r1
 800619e:	095b      	lsrs	r3, r3, #5
 80061a0:	2264      	movs	r2, #100	@ 0x64
 80061a2:	fb02 f303 	mul.w	r3, r2, r3
 80061a6:	1acb      	subs	r3, r1, r3
 80061a8:	011b      	lsls	r3, r3, #4
 80061aa:	3332      	adds	r3, #50	@ 0x32
 80061ac:	4a33      	ldr	r2, [pc, #204]	@ (800627c <UART_SetConfig+0x4e4>)
 80061ae:	fba2 2303 	umull	r2, r3, r2, r3
 80061b2:	095b      	lsrs	r3, r3, #5
 80061b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061b8:	441c      	add	r4, r3
 80061ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061be:	2200      	movs	r2, #0
 80061c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80061c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80061c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80061c8:	4642      	mov	r2, r8
 80061ca:	464b      	mov	r3, r9
 80061cc:	1891      	adds	r1, r2, r2
 80061ce:	60b9      	str	r1, [r7, #8]
 80061d0:	415b      	adcs	r3, r3
 80061d2:	60fb      	str	r3, [r7, #12]
 80061d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061d8:	4641      	mov	r1, r8
 80061da:	1851      	adds	r1, r2, r1
 80061dc:	6039      	str	r1, [r7, #0]
 80061de:	4649      	mov	r1, r9
 80061e0:	414b      	adcs	r3, r1
 80061e2:	607b      	str	r3, [r7, #4]
 80061e4:	f04f 0200 	mov.w	r2, #0
 80061e8:	f04f 0300 	mov.w	r3, #0
 80061ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80061f0:	4659      	mov	r1, fp
 80061f2:	00cb      	lsls	r3, r1, #3
 80061f4:	4651      	mov	r1, sl
 80061f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061fa:	4651      	mov	r1, sl
 80061fc:	00ca      	lsls	r2, r1, #3
 80061fe:	4610      	mov	r0, r2
 8006200:	4619      	mov	r1, r3
 8006202:	4603      	mov	r3, r0
 8006204:	4642      	mov	r2, r8
 8006206:	189b      	adds	r3, r3, r2
 8006208:	66bb      	str	r3, [r7, #104]	@ 0x68
 800620a:	464b      	mov	r3, r9
 800620c:	460a      	mov	r2, r1
 800620e:	eb42 0303 	adc.w	r3, r2, r3
 8006212:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	663b      	str	r3, [r7, #96]	@ 0x60
 800621e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006220:	f04f 0200 	mov.w	r2, #0
 8006224:	f04f 0300 	mov.w	r3, #0
 8006228:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800622c:	4649      	mov	r1, r9
 800622e:	008b      	lsls	r3, r1, #2
 8006230:	4641      	mov	r1, r8
 8006232:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006236:	4641      	mov	r1, r8
 8006238:	008a      	lsls	r2, r1, #2
 800623a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800623e:	f7f9 ffd7 	bl	80001f0 <__aeabi_uldivmod>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	4b0d      	ldr	r3, [pc, #52]	@ (800627c <UART_SetConfig+0x4e4>)
 8006248:	fba3 1302 	umull	r1, r3, r3, r2
 800624c:	095b      	lsrs	r3, r3, #5
 800624e:	2164      	movs	r1, #100	@ 0x64
 8006250:	fb01 f303 	mul.w	r3, r1, r3
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	011b      	lsls	r3, r3, #4
 8006258:	3332      	adds	r3, #50	@ 0x32
 800625a:	4a08      	ldr	r2, [pc, #32]	@ (800627c <UART_SetConfig+0x4e4>)
 800625c:	fba2 2303 	umull	r2, r3, r2, r3
 8006260:	095b      	lsrs	r3, r3, #5
 8006262:	f003 020f 	and.w	r2, r3, #15
 8006266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4422      	add	r2, r4
 800626e:	609a      	str	r2, [r3, #8]
}
 8006270:	bf00      	nop
 8006272:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006276:	46bd      	mov	sp, r7
 8006278:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800627c:	51eb851f 	.word	0x51eb851f

08006280 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d123      	bne.n	80062da <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800629a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800629e:	683a      	ldr	r2, [r7, #0]
 80062a0:	6851      	ldr	r1, [r2, #4]
 80062a2:	683a      	ldr	r2, [r7, #0]
 80062a4:	6892      	ldr	r2, [r2, #8]
 80062a6:	4311      	orrs	r1, r2
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	68d2      	ldr	r2, [r2, #12]
 80062ac:	4311      	orrs	r1, r2
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	6912      	ldr	r2, [r2, #16]
 80062b2:	4311      	orrs	r1, r2
 80062b4:	683a      	ldr	r2, [r7, #0]
 80062b6:	6952      	ldr	r2, [r2, #20]
 80062b8:	4311      	orrs	r1, r2
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	6992      	ldr	r2, [r2, #24]
 80062be:	4311      	orrs	r1, r2
 80062c0:	683a      	ldr	r2, [r7, #0]
 80062c2:	69d2      	ldr	r2, [r2, #28]
 80062c4:	4311      	orrs	r1, r2
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	6a12      	ldr	r2, [r2, #32]
 80062ca:	4311      	orrs	r1, r2
 80062cc:	683a      	ldr	r2, [r7, #0]
 80062ce:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80062d0:	430a      	orrs	r2, r1
 80062d2:	431a      	orrs	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	601a      	str	r2, [r3, #0]
 80062d8:	e028      	b.n	800632c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	69d9      	ldr	r1, [r3, #28]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	4319      	orrs	r1, r3
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f0:	430b      	orrs	r3, r1
 80062f2:	431a      	orrs	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006300:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006304:	683a      	ldr	r2, [r7, #0]
 8006306:	6851      	ldr	r1, [r2, #4]
 8006308:	683a      	ldr	r2, [r7, #0]
 800630a:	6892      	ldr	r2, [r2, #8]
 800630c:	4311      	orrs	r1, r2
 800630e:	683a      	ldr	r2, [r7, #0]
 8006310:	68d2      	ldr	r2, [r2, #12]
 8006312:	4311      	orrs	r1, r2
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	6912      	ldr	r2, [r2, #16]
 8006318:	4311      	orrs	r1, r2
 800631a:	683a      	ldr	r2, [r7, #0]
 800631c:	6952      	ldr	r2, [r2, #20]
 800631e:	4311      	orrs	r1, r2
 8006320:	683a      	ldr	r2, [r7, #0]
 8006322:	6992      	ldr	r2, [r2, #24]
 8006324:	430a      	orrs	r2, r1
 8006326:	431a      	orrs	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	370c      	adds	r7, #12
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800633a:	b480      	push	{r7}
 800633c:	b085      	sub	sp, #20
 800633e:	af00      	add	r7, sp, #0
 8006340:	60f8      	str	r0, [r7, #12]
 8006342:	60b9      	str	r1, [r7, #8]
 8006344:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d128      	bne.n	800639e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	1e59      	subs	r1, r3, #1
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	3b01      	subs	r3, #1
 8006360:	011b      	lsls	r3, r3, #4
 8006362:	4319      	orrs	r1, r3
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	3b01      	subs	r3, #1
 800636a:	021b      	lsls	r3, r3, #8
 800636c:	4319      	orrs	r1, r3
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	3b01      	subs	r3, #1
 8006374:	031b      	lsls	r3, r3, #12
 8006376:	4319      	orrs	r1, r3
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	3b01      	subs	r3, #1
 800637e:	041b      	lsls	r3, r3, #16
 8006380:	4319      	orrs	r1, r3
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	3b01      	subs	r3, #1
 8006388:	051b      	lsls	r3, r3, #20
 800638a:	4319      	orrs	r1, r3
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	3b01      	subs	r3, #1
 8006392:	061b      	lsls	r3, r3, #24
 8006394:	430b      	orrs	r3, r1
 8006396:	431a      	orrs	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	609a      	str	r2, [r3, #8]
 800639c:	e02f      	b.n	80063fe <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80063a6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	68d2      	ldr	r2, [r2, #12]
 80063ae:	3a01      	subs	r2, #1
 80063b0:	0311      	lsls	r1, r2, #12
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	6952      	ldr	r2, [r2, #20]
 80063b6:	3a01      	subs	r2, #1
 80063b8:	0512      	lsls	r2, r2, #20
 80063ba:	430a      	orrs	r2, r1
 80063bc:	431a      	orrs	r2, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	1e59      	subs	r1, r3, #1
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	3b01      	subs	r3, #1
 80063d6:	011b      	lsls	r3, r3, #4
 80063d8:	4319      	orrs	r1, r3
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	3b01      	subs	r3, #1
 80063e0:	021b      	lsls	r3, r3, #8
 80063e2:	4319      	orrs	r1, r3
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	3b01      	subs	r3, #1
 80063ea:	041b      	lsls	r3, r3, #16
 80063ec:	4319      	orrs	r1, r3
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	3b01      	subs	r3, #1
 80063f4:	061b      	lsls	r3, r3, #24
 80063f6:	430b      	orrs	r3, r1
 80063f8:	431a      	orrs	r2, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f043 0201 	orr.w	r2, r3, #1
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	370c      	adds	r7, #12
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800642e:	b480      	push	{r7}
 8006430:	b083      	sub	sp, #12
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f023 0201 	bic.w	r2, r3, #1
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800645a:	2300      	movs	r3, #0
 800645c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	3301      	adds	r3, #1
 8006462:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800646a:	d901      	bls.n	8006470 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e01b      	b.n	80064a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	2b00      	cmp	r3, #0
 8006476:	daf2      	bge.n	800645e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006478:	2300      	movs	r3, #0
 800647a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	019b      	lsls	r3, r3, #6
 8006480:	f043 0220 	orr.w	r2, r3, #32
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	3301      	adds	r3, #1
 800648c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006494:	d901      	bls.n	800649a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e006      	b.n	80064a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	f003 0320 	and.w	r3, r3, #32
 80064a2:	2b20      	cmp	r3, #32
 80064a4:	d0f0      	beq.n	8006488 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064bc:	2300      	movs	r3, #0
 80064be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	3301      	adds	r3, #1
 80064c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064cc:	d901      	bls.n	80064d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e018      	b.n	8006504 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	daf2      	bge.n	80064c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80064da:	2300      	movs	r3, #0
 80064dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2210      	movs	r2, #16
 80064e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	3301      	adds	r3, #1
 80064e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064f0:	d901      	bls.n	80064f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e006      	b.n	8006504 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	f003 0310 	and.w	r3, r3, #16
 80064fe:	2b10      	cmp	r3, #16
 8006500:	d0f0      	beq.n	80064e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3714      	adds	r7, #20
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006510:	b480      	push	{r7}
 8006512:	b08b      	sub	sp, #44	@ 0x2c
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	4613      	mov	r3, r2
 800651c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006526:	88fb      	ldrh	r3, [r7, #6]
 8006528:	089b      	lsrs	r3, r3, #2
 800652a:	b29b      	uxth	r3, r3
 800652c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800652e:	88fb      	ldrh	r3, [r7, #6]
 8006530:	f003 0303 	and.w	r3, r3, #3
 8006534:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006536:	2300      	movs	r3, #0
 8006538:	623b      	str	r3, [r7, #32]
 800653a:	e014      	b.n	8006566 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006546:	601a      	str	r2, [r3, #0]
    pDest++;
 8006548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654a:	3301      	adds	r3, #1
 800654c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800654e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006550:	3301      	adds	r3, #1
 8006552:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006556:	3301      	adds	r3, #1
 8006558:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800655a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655c:	3301      	adds	r3, #1
 800655e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006560:	6a3b      	ldr	r3, [r7, #32]
 8006562:	3301      	adds	r3, #1
 8006564:	623b      	str	r3, [r7, #32]
 8006566:	6a3a      	ldr	r2, [r7, #32]
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	429a      	cmp	r2, r3
 800656c:	d3e6      	bcc.n	800653c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800656e:	8bfb      	ldrh	r3, [r7, #30]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d01e      	beq.n	80065b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006574:	2300      	movs	r3, #0
 8006576:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800657e:	461a      	mov	r2, r3
 8006580:	f107 0310 	add.w	r3, r7, #16
 8006584:	6812      	ldr	r2, [r2, #0]
 8006586:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	6a3b      	ldr	r3, [r7, #32]
 800658c:	b2db      	uxtb	r3, r3
 800658e:	00db      	lsls	r3, r3, #3
 8006590:	fa22 f303 	lsr.w	r3, r2, r3
 8006594:	b2da      	uxtb	r2, r3
 8006596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006598:	701a      	strb	r2, [r3, #0]
      i++;
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	3301      	adds	r3, #1
 800659e:	623b      	str	r3, [r7, #32]
      pDest++;
 80065a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a2:	3301      	adds	r3, #1
 80065a4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80065a6:	8bfb      	ldrh	r3, [r7, #30]
 80065a8:	3b01      	subs	r3, #1
 80065aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80065ac:	8bfb      	ldrh	r3, [r7, #30]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1ea      	bne.n	8006588 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80065b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	372c      	adds	r7, #44	@ 0x2c
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	695b      	ldr	r3, [r3, #20]
 80065cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	4013      	ands	r3, r2
 80065d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80065d8:	68fb      	ldr	r3, [r7, #12]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3714      	adds	r7, #20
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr

080065e6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b085      	sub	sp, #20
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
 80065ee:	460b      	mov	r3, r1
 80065f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80065f6:	78fb      	ldrb	r3, [r7, #3]
 80065f8:	015a      	lsls	r2, r3, #5
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	4413      	add	r3, r2
 80065fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006606:	78fb      	ldrb	r3, [r7, #3]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	4413      	add	r3, r2
 800660e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	4013      	ands	r3, r2
 8006618:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800661a:	68bb      	ldr	r3, [r7, #8]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3714      	adds	r7, #20
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	f003 0301 	and.w	r3, r3, #1
}
 8006638:	4618      	mov	r0, r3
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	460b      	mov	r3, r1
 800664e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006662:	f023 0303 	bic.w	r3, r3, #3
 8006666:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	78fb      	ldrb	r3, [r7, #3]
 8006672:	f003 0303 	and.w	r3, r3, #3
 8006676:	68f9      	ldr	r1, [r7, #12]
 8006678:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800667c:	4313      	orrs	r3, r2
 800667e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006680:	78fb      	ldrb	r3, [r7, #3]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d107      	bne.n	8006696 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800668c:	461a      	mov	r2, r3
 800668e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006692:	6053      	str	r3, [r2, #4]
 8006694:	e00c      	b.n	80066b0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8006696:	78fb      	ldrb	r3, [r7, #3]
 8006698:	2b02      	cmp	r3, #2
 800669a:	d107      	bne.n	80066ac <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80066a2:	461a      	mov	r2, r3
 80066a4:	f241 7370 	movw	r3, #6000	@ 0x1770
 80066a8:	6053      	str	r3, [r2, #4]
 80066aa:	e001      	b.n	80066b0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e000      	b.n	80066b2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80066be:	b480      	push	{r7}
 80066c0:	b085      	sub	sp, #20
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	b29b      	uxth	r3, r3
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b089      	sub	sp, #36	@ 0x24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	460b      	mov	r3, r1
 80066ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80066f0:	78fb      	ldrb	r3, [r7, #3]
 80066f2:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80066f4:	2300      	movs	r3, #0
 80066f6:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	015a      	lsls	r2, r3, #5
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	4413      	add	r3, r2
 8006700:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	0c9b      	lsrs	r3, r3, #18
 8006708:	f003 0303 	and.w	r3, r3, #3
 800670c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	4413      	add	r3, r2
 8006716:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	0fdb      	lsrs	r3, r3, #31
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	015a      	lsls	r2, r3, #5
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	4413      	add	r3, r2
 800672c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	0fdb      	lsrs	r3, r3, #31
 8006734:	f003 0301 	and.w	r3, r3, #1
 8006738:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f003 0320 	and.w	r3, r3, #32
 8006742:	2b20      	cmp	r3, #32
 8006744:	d10d      	bne.n	8006762 <USB_HC_Halt+0x82>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10a      	bne.n	8006762 <USB_HC_Halt+0x82>
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d005      	beq.n	800675e <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d002      	beq.n	800675e <USB_HC_Halt+0x7e>
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	2b03      	cmp	r3, #3
 800675c:	d101      	bne.n	8006762 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	e0d8      	b.n	8006914 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d002      	beq.n	800676e <USB_HC_Halt+0x8e>
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	2b02      	cmp	r3, #2
 800676c:	d173      	bne.n	8006856 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	015a      	lsls	r2, r3, #5
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	4413      	add	r3, r2
 8006776:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	0151      	lsls	r1, r2, #5
 8006780:	69fa      	ldr	r2, [r7, #28]
 8006782:	440a      	add	r2, r1
 8006784:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006788:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800678c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f003 0320 	and.w	r3, r3, #32
 8006796:	2b00      	cmp	r3, #0
 8006798:	d14a      	bne.n	8006830 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800679e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d133      	bne.n	800680e <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	015a      	lsls	r2, r3, #5
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	69ba      	ldr	r2, [r7, #24]
 80067b6:	0151      	lsls	r1, r2, #5
 80067b8:	69fa      	ldr	r2, [r7, #28]
 80067ba:	440a      	add	r2, r1
 80067bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80067c4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	69ba      	ldr	r2, [r7, #24]
 80067d6:	0151      	lsls	r1, r2, #5
 80067d8:	69fa      	ldr	r2, [r7, #28]
 80067da:	440a      	add	r2, r1
 80067dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80067e4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	3301      	adds	r3, #1
 80067ea:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80067f2:	d82e      	bhi.n	8006852 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	015a      	lsls	r2, r3, #5
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	4413      	add	r3, r2
 80067fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006806:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800680a:	d0ec      	beq.n	80067e6 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800680c:	e081      	b.n	8006912 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	015a      	lsls	r2, r3, #5
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	4413      	add	r3, r2
 8006816:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	69ba      	ldr	r2, [r7, #24]
 800681e:	0151      	lsls	r1, r2, #5
 8006820:	69fa      	ldr	r2, [r7, #28]
 8006822:	440a      	add	r2, r1
 8006824:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006828:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800682c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800682e:	e070      	b.n	8006912 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	4413      	add	r3, r2
 8006838:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	69ba      	ldr	r2, [r7, #24]
 8006840:	0151      	lsls	r1, r2, #5
 8006842:	69fa      	ldr	r2, [r7, #28]
 8006844:	440a      	add	r2, r1
 8006846:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800684a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800684e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006850:	e05f      	b.n	8006912 <USB_HC_Halt+0x232>
            break;
 8006852:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006854:	e05d      	b.n	8006912 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	015a      	lsls	r2, r3, #5
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	4413      	add	r3, r2
 800685e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	69ba      	ldr	r2, [r7, #24]
 8006866:	0151      	lsls	r1, r2, #5
 8006868:	69fa      	ldr	r2, [r7, #28]
 800686a:	440a      	add	r2, r1
 800686c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006870:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006874:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d133      	bne.n	80068ee <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	015a      	lsls	r2, r3, #5
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	4413      	add	r3, r2
 800688e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	69ba      	ldr	r2, [r7, #24]
 8006896:	0151      	lsls	r1, r2, #5
 8006898:	69fa      	ldr	r2, [r7, #28]
 800689a:	440a      	add	r2, r1
 800689c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80068a4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	015a      	lsls	r2, r3, #5
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	69ba      	ldr	r2, [r7, #24]
 80068b6:	0151      	lsls	r1, r2, #5
 80068b8:	69fa      	ldr	r2, [r7, #28]
 80068ba:	440a      	add	r2, r1
 80068bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80068c4:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	3301      	adds	r3, #1
 80068ca:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80068d2:	d81d      	bhi.n	8006910 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	015a      	lsls	r2, r3, #5
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	4413      	add	r3, r2
 80068dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068ea:	d0ec      	beq.n	80068c6 <USB_HC_Halt+0x1e6>
 80068ec:	e011      	b.n	8006912 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	69ba      	ldr	r2, [r7, #24]
 80068fe:	0151      	lsls	r1, r2, #5
 8006900:	69fa      	ldr	r2, [r7, #28]
 8006902:	440a      	add	r2, r1
 8006904:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006908:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800690c:	6013      	str	r3, [r2, #0]
 800690e:	e000      	b.n	8006912 <USB_HC_Halt+0x232>
          break;
 8006910:	bf00      	nop
    }
  }

  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3724      	adds	r7, #36	@ 0x24
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b088      	sub	sp, #32
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006928:	2300      	movs	r3, #0
 800692a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006930:	2300      	movs	r3, #0
 8006932:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f7ff fd7a 	bl	800642e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800693a:	2110      	movs	r1, #16
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f7ff fd87 	bl	8006450 <USB_FlushTxFifo>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d001      	beq.n	800694c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f7ff fdb1 	bl	80064b4 <USB_FlushRxFifo>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d001      	beq.n	800695c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800695c:	2300      	movs	r3, #0
 800695e:	61bb      	str	r3, [r7, #24]
 8006960:	e01f      	b.n	80069a2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	015a      	lsls	r2, r3, #5
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	4413      	add	r3, r2
 800696a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006978:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006980:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006988:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	015a      	lsls	r2, r3, #5
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	4413      	add	r3, r2
 8006992:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006996:	461a      	mov	r2, r3
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	3301      	adds	r3, #1
 80069a0:	61bb      	str	r3, [r7, #24]
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	2b0f      	cmp	r3, #15
 80069a6:	d9dc      	bls.n	8006962 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80069a8:	2300      	movs	r3, #0
 80069aa:	61bb      	str	r3, [r7, #24]
 80069ac:	e034      	b.n	8006a18 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	015a      	lsls	r2, r3, #5
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80069c4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80069cc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80069d4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	015a      	lsls	r2, r3, #5
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	4413      	add	r3, r2
 80069de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069e2:	461a      	mov	r2, r3
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	3301      	adds	r3, #1
 80069ec:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80069f4:	d80c      	bhi.n	8006a10 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	015a      	lsls	r2, r3, #5
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	4413      	add	r3, r2
 80069fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a0c:	d0ec      	beq.n	80069e8 <USB_StopHost+0xc8>
 8006a0e:	e000      	b.n	8006a12 <USB_StopHost+0xf2>
        break;
 8006a10:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	3301      	adds	r3, #1
 8006a16:	61bb      	str	r3, [r7, #24]
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	2b0f      	cmp	r3, #15
 8006a1c:	d9c7      	bls.n	80069ae <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a24:	461a      	mov	r2, r3
 8006a26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006a2a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a32:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f7ff fce9 	bl	800640c <USB_EnableGlobalInt>

  return ret;
 8006a3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3720      	adds	r7, #32
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006a52:	1c5a      	adds	r2, r3, #1
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f804 	bl	8006a68 <USBH_HandleSof>
}
 8006a60:	bf00      	nop
 8006a62:	3708      	adds	r7, #8
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b0b      	cmp	r3, #11
 8006a78:	d10a      	bne.n	8006a90 <USBH_HandleSof+0x28>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d005      	beq.n	8006a90 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006a8a:	699b      	ldr	r3, [r3, #24]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	4798      	blx	r3
  }
}
 8006a90:	bf00      	nop
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8006abc:	2200      	movs	r2, #0
 8006abe:	4619      	mov	r1, r3
 8006ac0:	f000 f8ae 	bl	8006c20 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006ac4:	bf00      	nop
}
 8006ac6:	3708      	adds	r7, #8
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8006adc:	bf00      	nop
}
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	4619      	mov	r1, r3
 8006b20:	f000 f87e 	bl	8006c20 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3708      	adds	r7, #8
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b082      	sub	sp, #8
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f001 f926 	bl	8007da0 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	791b      	ldrb	r3, [r3, #4]
 8006b58:	4619      	mov	r1, r3
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f830 	bl	8006bc0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	795b      	ldrb	r3, [r3, #5]
 8006b64:	4619      	mov	r1, r3
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f82a 	bl	8006bc0 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8006b80:	2200      	movs	r2, #0
 8006b82:	4619      	mov	r1, r3
 8006b84:	f000 f84c 	bl	8006c20 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b082      	sub	sp, #8
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8006bae:	2200      	movs	r2, #0
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	f000 f835 	bl	8006c20 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3708      	adds	r7, #8
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	460b      	mov	r3, r1
 8006bca:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006bcc:	78fb      	ldrb	r3, [r7, #3]
 8006bce:	2b0f      	cmp	r3, #15
 8006bd0:	d80d      	bhi.n	8006bee <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006bd2:	78fb      	ldrb	r3, [r7, #3]
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	33e0      	adds	r3, #224	@ 0xe0
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4413      	add	r3, r2
 8006bdc:	685a      	ldr	r2, [r3, #4]
 8006bde:	78fb      	ldrb	r3, [r7, #3]
 8006be0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006be4:	6879      	ldr	r1, [r7, #4]
 8006be6:	33e0      	adds	r3, #224	@ 0xe0
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	440b      	add	r3, r1
 8006bec:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c02:	f3ef 8305 	mrs	r3, IPSR
 8006c06:	607b      	str	r3, [r7, #4]
  return(result);
 8006c08:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	bf14      	ite	ne
 8006c0e:	2301      	movne	r3, #1
 8006c10:	2300      	moveq	r3, #0
 8006c12:	b2db      	uxtb	r3, r3
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d101      	bne.n	8006c3e <osMessagePut+0x1e>
    ticks = 1;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006c3e:	f7ff ffdd 	bl	8006bfc <inHandlerMode>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d018      	beq.n	8006c7a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006c48:	f107 0210 	add.w	r2, r7, #16
 8006c4c:	f107 0108 	add.w	r1, r7, #8
 8006c50:	2300      	movs	r3, #0
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f000 f9ae 	bl	8006fb4 <xQueueGenericSendFromISR>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d001      	beq.n	8006c62 <osMessagePut+0x42>
      return osErrorOS;
 8006c5e:	23ff      	movs	r3, #255	@ 0xff
 8006c60:	e018      	b.n	8006c94 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d014      	beq.n	8006c92 <osMessagePut+0x72>
 8006c68:	4b0c      	ldr	r3, [pc, #48]	@ (8006c9c <osMessagePut+0x7c>)
 8006c6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c6e:	601a      	str	r2, [r3, #0]
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	f3bf 8f6f 	isb	sy
 8006c78:	e00b      	b.n	8006c92 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006c7a:	f107 0108 	add.w	r1, r7, #8
 8006c7e:	2300      	movs	r3, #0
 8006c80:	697a      	ldr	r2, [r7, #20]
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f000 f894 	bl	8006db0 <xQueueGenericSend>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d001      	beq.n	8006c92 <osMessagePut+0x72>
      return osErrorOS;
 8006c8e:	23ff      	movs	r3, #255	@ 0xff
 8006c90:	e000      	b.n	8006c94 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3718      	adds	r7, #24
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	e000ed04 	.word	0xe000ed04

08006ca0 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	689a      	ldr	r2, [r3, #8]
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	683a      	ldr	r2, [r7, #0]
 8006cc4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	683a      	ldr	r2, [r7, #0]
 8006cca:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	1c5a      	adds	r2, r3, #1
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	601a      	str	r2, [r3, #0]
}
 8006cdc:	bf00      	nop
 8006cde:	3714      	adds	r7, #20
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006cfe:	d103      	bne.n	8006d08 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	60fb      	str	r3, [r7, #12]
 8006d06:	e00c      	b.n	8006d22 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	3308      	adds	r3, #8
 8006d0c:	60fb      	str	r3, [r7, #12]
 8006d0e:	e002      	b.n	8006d16 <vListInsert+0x2e>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	60fb      	str	r3, [r7, #12]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d2f6      	bcs.n	8006d10 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	685a      	ldr	r2, [r3, #4]
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	683a      	ldr	r2, [r7, #0]
 8006d3c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	1c5a      	adds	r2, r3, #1
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	601a      	str	r2, [r3, #0]
}
 8006d4e:	bf00      	nop
 8006d50:	3714      	adds	r7, #20
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b085      	sub	sp, #20
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	6892      	ldr	r2, [r2, #8]
 8006d70:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	6852      	ldr	r2, [r2, #4]
 8006d7a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d103      	bne.n	8006d8e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	689a      	ldr	r2, [r3, #8]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	1e5a      	subs	r2, r3, #1
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3714      	adds	r7, #20
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
	...

08006db0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b08e      	sub	sp, #56	@ 0x38
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
 8006dbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d10b      	bne.n	8006de4 <xQueueGenericSend+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd0:	f383 8811 	msr	BASEPRI, r3
 8006dd4:	f3bf 8f6f 	isb	sy
 8006dd8:	f3bf 8f4f 	dsb	sy
 8006ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006dde:	bf00      	nop
 8006de0:	bf00      	nop
 8006de2:	e7fd      	b.n	8006de0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d103      	bne.n	8006df2 <xQueueGenericSend+0x42>
 8006dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <xQueueGenericSend+0x46>
 8006df2:	2301      	movs	r3, #1
 8006df4:	e000      	b.n	8006df8 <xQueueGenericSend+0x48>
 8006df6:	2300      	movs	r3, #0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10b      	bne.n	8006e14 <xQueueGenericSend+0x64>
	__asm volatile
 8006dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006e0e:	bf00      	nop
 8006e10:	bf00      	nop
 8006e12:	e7fd      	b.n	8006e10 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d103      	bne.n	8006e22 <xQueueGenericSend+0x72>
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d101      	bne.n	8006e26 <xQueueGenericSend+0x76>
 8006e22:	2301      	movs	r3, #1
 8006e24:	e000      	b.n	8006e28 <xQueueGenericSend+0x78>
 8006e26:	2300      	movs	r3, #0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10b      	bne.n	8006e44 <xQueueGenericSend+0x94>
	__asm volatile
 8006e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e30:	f383 8811 	msr	BASEPRI, r3
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	623b      	str	r3, [r7, #32]
}
 8006e3e:	bf00      	nop
 8006e40:	bf00      	nop
 8006e42:	e7fd      	b.n	8006e40 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e44:	f000 fd40 	bl	80078c8 <xTaskGetSchedulerState>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d102      	bne.n	8006e54 <xQueueGenericSend+0xa4>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <xQueueGenericSend+0xa8>
 8006e54:	2301      	movs	r3, #1
 8006e56:	e000      	b.n	8006e5a <xQueueGenericSend+0xaa>
 8006e58:	2300      	movs	r3, #0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10b      	bne.n	8006e76 <xQueueGenericSend+0xc6>
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	61fb      	str	r3, [r7, #28]
}
 8006e70:	bf00      	nop
 8006e72:	bf00      	nop
 8006e74:	e7fd      	b.n	8006e72 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e76:	f000 fe47 	bl	8007b08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d302      	bcc.n	8006e8c <xQueueGenericSend+0xdc>
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d129      	bne.n	8006ee0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e8c:	683a      	ldr	r2, [r7, #0]
 8006e8e:	68b9      	ldr	r1, [r7, #8]
 8006e90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e92:	f000 f92d 	bl	80070f0 <prvCopyDataToQueue>
 8006e96:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d010      	beq.n	8006ec2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea2:	3324      	adds	r3, #36	@ 0x24
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f000 fc05 	bl	80076b4 <xTaskRemoveFromEventList>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d013      	beq.n	8006ed8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006eb0:	4b3f      	ldr	r3, [pc, #252]	@ (8006fb0 <xQueueGenericSend+0x200>)
 8006eb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006eb6:	601a      	str	r2, [r3, #0]
 8006eb8:	f3bf 8f4f 	dsb	sy
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	e00a      	b.n	8006ed8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d007      	beq.n	8006ed8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006ec8:	4b39      	ldr	r3, [pc, #228]	@ (8006fb0 <xQueueGenericSend+0x200>)
 8006eca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ece:	601a      	str	r2, [r3, #0]
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006ed8:	f000 fe48 	bl	8007b6c <vPortExitCritical>
				return pdPASS;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e063      	b.n	8006fa8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d103      	bne.n	8006eee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ee6:	f000 fe41 	bl	8007b6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006eea:	2300      	movs	r3, #0
 8006eec:	e05c      	b.n	8006fa8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d106      	bne.n	8006f02 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ef4:	f107 0314 	add.w	r3, r7, #20
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f000 fc3f 	bl	800777c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006efe:	2301      	movs	r3, #1
 8006f00:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f02:	f000 fe33 	bl	8007b6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f06:	f000 f9c7 	bl	8007298 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f0a:	f000 fdfd 	bl	8007b08 <vPortEnterCritical>
 8006f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f14:	b25b      	sxtb	r3, r3
 8006f16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f1a:	d103      	bne.n	8006f24 <xQueueGenericSend+0x174>
 8006f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f2a:	b25b      	sxtb	r3, r3
 8006f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f30:	d103      	bne.n	8006f3a <xQueueGenericSend+0x18a>
 8006f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f3a:	f000 fe17 	bl	8007b6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f3e:	1d3a      	adds	r2, r7, #4
 8006f40:	f107 0314 	add.w	r3, r7, #20
 8006f44:	4611      	mov	r1, r2
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 fc2e 	bl	80077a8 <xTaskCheckForTimeOut>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d124      	bne.n	8006f9c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006f52:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f54:	f000 f988 	bl	8007268 <prvIsQueueFull>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d018      	beq.n	8006f90 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f60:	3310      	adds	r3, #16
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	4611      	mov	r1, r2
 8006f66:	4618      	mov	r0, r3
 8006f68:	f000 fb7e 	bl	8007668 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006f6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f6e:	f000 f929 	bl	80071c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006f72:	f000 f99f 	bl	80072b4 <xTaskResumeAll>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f47f af7c 	bne.w	8006e76 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8006fb0 <xQueueGenericSend+0x200>)
 8006f80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f84:	601a      	str	r2, [r3, #0]
 8006f86:	f3bf 8f4f 	dsb	sy
 8006f8a:	f3bf 8f6f 	isb	sy
 8006f8e:	e772      	b.n	8006e76 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006f90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f92:	f000 f917 	bl	80071c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f96:	f000 f98d 	bl	80072b4 <xTaskResumeAll>
 8006f9a:	e76c      	b.n	8006e76 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006f9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f9e:	f000 f911 	bl	80071c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006fa2:	f000 f987 	bl	80072b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006fa6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3738      	adds	r7, #56	@ 0x38
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	e000ed04 	.word	0xe000ed04

08006fb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b090      	sub	sp, #64	@ 0x40
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	607a      	str	r2, [r7, #4]
 8006fc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10b      	bne.n	8006fe4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd0:	f383 8811 	msr	BASEPRI, r3
 8006fd4:	f3bf 8f6f 	isb	sy
 8006fd8:	f3bf 8f4f 	dsb	sy
 8006fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006fde:	bf00      	nop
 8006fe0:	bf00      	nop
 8006fe2:	e7fd      	b.n	8006fe0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d103      	bne.n	8006ff2 <xQueueGenericSendFromISR+0x3e>
 8006fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d101      	bne.n	8006ff6 <xQueueGenericSendFromISR+0x42>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e000      	b.n	8006ff8 <xQueueGenericSendFromISR+0x44>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10b      	bne.n	8007014 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007000:	f383 8811 	msr	BASEPRI, r3
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800700e:	bf00      	nop
 8007010:	bf00      	nop
 8007012:	e7fd      	b.n	8007010 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	2b02      	cmp	r3, #2
 8007018:	d103      	bne.n	8007022 <xQueueGenericSendFromISR+0x6e>
 800701a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800701c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800701e:	2b01      	cmp	r3, #1
 8007020:	d101      	bne.n	8007026 <xQueueGenericSendFromISR+0x72>
 8007022:	2301      	movs	r3, #1
 8007024:	e000      	b.n	8007028 <xQueueGenericSendFromISR+0x74>
 8007026:	2300      	movs	r3, #0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10b      	bne.n	8007044 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800702c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	623b      	str	r3, [r7, #32]
}
 800703e:	bf00      	nop
 8007040:	bf00      	nop
 8007042:	e7fd      	b.n	8007040 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007044:	f000 fe12 	bl	8007c6c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007048:	f3ef 8211 	mrs	r2, BASEPRI
 800704c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007050:	f383 8811 	msr	BASEPRI, r3
 8007054:	f3bf 8f6f 	isb	sy
 8007058:	f3bf 8f4f 	dsb	sy
 800705c:	61fa      	str	r2, [r7, #28]
 800705e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007060:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007062:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007066:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800706a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800706c:	429a      	cmp	r2, r3
 800706e:	d302      	bcc.n	8007076 <xQueueGenericSendFromISR+0xc2>
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	2b02      	cmp	r3, #2
 8007074:	d12f      	bne.n	80070d6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007078:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800707c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007084:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007086:	683a      	ldr	r2, [r7, #0]
 8007088:	68b9      	ldr	r1, [r7, #8]
 800708a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800708c:	f000 f830 	bl	80070f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007090:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007094:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007098:	d112      	bne.n	80070c0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800709a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800709c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d016      	beq.n	80070d0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a4:	3324      	adds	r3, #36	@ 0x24
 80070a6:	4618      	mov	r0, r3
 80070a8:	f000 fb04 	bl	80076b4 <xTaskRemoveFromEventList>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00e      	beq.n	80070d0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00b      	beq.n	80070d0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	601a      	str	r2, [r3, #0]
 80070be:	e007      	b.n	80070d0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80070c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80070c4:	3301      	adds	r3, #1
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	b25a      	sxtb	r2, r3
 80070ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80070d0:	2301      	movs	r3, #1
 80070d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80070d4:	e001      	b.n	80070da <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80070d6:	2300      	movs	r3, #0
 80070d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070dc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80070e4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80070e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3740      	adds	r7, #64	@ 0x40
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80070fc:	2300      	movs	r3, #0
 80070fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007104:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10d      	bne.n	800712a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d14d      	bne.n	80071b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	4618      	mov	r0, r3
 800711c:	f000 fbf2 	bl	8007904 <xTaskPriorityDisinherit>
 8007120:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	609a      	str	r2, [r3, #8]
 8007128:	e043      	b.n	80071b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d119      	bne.n	8007164 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6858      	ldr	r0, [r3, #4]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007138:	461a      	mov	r2, r3
 800713a:	68b9      	ldr	r1, [r7, #8]
 800713c:	f000 fea4 	bl	8007e88 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007148:	441a      	add	r2, r3
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	685a      	ldr	r2, [r3, #4]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	429a      	cmp	r2, r3
 8007158:	d32b      	bcc.n	80071b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	605a      	str	r2, [r3, #4]
 8007162:	e026      	b.n	80071b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	68d8      	ldr	r0, [r3, #12]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800716c:	461a      	mov	r2, r3
 800716e:	68b9      	ldr	r1, [r7, #8]
 8007170:	f000 fe8a 	bl	8007e88 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	68da      	ldr	r2, [r3, #12]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800717c:	425b      	negs	r3, r3
 800717e:	441a      	add	r2, r3
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	68da      	ldr	r2, [r3, #12]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	429a      	cmp	r2, r3
 800718e:	d207      	bcs.n	80071a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	689a      	ldr	r2, [r3, #8]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007198:	425b      	negs	r3, r3
 800719a:	441a      	add	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	d105      	bne.n	80071b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d002      	beq.n	80071b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	3b01      	subs	r3, #1
 80071b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	1c5a      	adds	r2, r3, #1
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80071ba:	697b      	ldr	r3, [r7, #20]
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3718      	adds	r7, #24
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80071cc:	f000 fc9c 	bl	8007b08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071d8:	e011      	b.n	80071fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d012      	beq.n	8007208 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	3324      	adds	r3, #36	@ 0x24
 80071e6:	4618      	mov	r0, r3
 80071e8:	f000 fa64 	bl	80076b4 <xTaskRemoveFromEventList>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d001      	beq.n	80071f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80071f2:	f000 fb3d 	bl	8007870 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80071f6:	7bfb      	ldrb	r3, [r7, #15]
 80071f8:	3b01      	subs	r3, #1
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007202:	2b00      	cmp	r3, #0
 8007204:	dce9      	bgt.n	80071da <prvUnlockQueue+0x16>
 8007206:	e000      	b.n	800720a <prvUnlockQueue+0x46>
					break;
 8007208:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	22ff      	movs	r2, #255	@ 0xff
 800720e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007212:	f000 fcab 	bl	8007b6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007216:	f000 fc77 	bl	8007b08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007220:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007222:	e011      	b.n	8007248 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d012      	beq.n	8007252 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	3310      	adds	r3, #16
 8007230:	4618      	mov	r0, r3
 8007232:	f000 fa3f 	bl	80076b4 <xTaskRemoveFromEventList>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d001      	beq.n	8007240 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800723c:	f000 fb18 	bl	8007870 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007240:	7bbb      	ldrb	r3, [r7, #14]
 8007242:	3b01      	subs	r3, #1
 8007244:	b2db      	uxtb	r3, r3
 8007246:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007248:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800724c:	2b00      	cmp	r3, #0
 800724e:	dce9      	bgt.n	8007224 <prvUnlockQueue+0x60>
 8007250:	e000      	b.n	8007254 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007252:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	22ff      	movs	r2, #255	@ 0xff
 8007258:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800725c:	f000 fc86 	bl	8007b6c <vPortExitCritical>
}
 8007260:	bf00      	nop
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007270:	f000 fc4a 	bl	8007b08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800727c:	429a      	cmp	r2, r3
 800727e:	d102      	bne.n	8007286 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007280:	2301      	movs	r3, #1
 8007282:	60fb      	str	r3, [r7, #12]
 8007284:	e001      	b.n	800728a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007286:	2300      	movs	r3, #0
 8007288:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800728a:	f000 fc6f 	bl	8007b6c <vPortExitCritical>

	return xReturn;
 800728e:	68fb      	ldr	r3, [r7, #12]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007298:	b480      	push	{r7}
 800729a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800729c:	4b04      	ldr	r3, [pc, #16]	@ (80072b0 <vTaskSuspendAll+0x18>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	3301      	adds	r3, #1
 80072a2:	4a03      	ldr	r2, [pc, #12]	@ (80072b0 <vTaskSuspendAll+0x18>)
 80072a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80072a6:	bf00      	nop
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr
 80072b0:	200003bc 	.word	0x200003bc

080072b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80072ba:	2300      	movs	r3, #0
 80072bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80072be:	2300      	movs	r3, #0
 80072c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80072c2:	4b42      	ldr	r3, [pc, #264]	@ (80073cc <xTaskResumeAll+0x118>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10b      	bne.n	80072e2 <xTaskResumeAll+0x2e>
	__asm volatile
 80072ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ce:	f383 8811 	msr	BASEPRI, r3
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	603b      	str	r3, [r7, #0]
}
 80072dc:	bf00      	nop
 80072de:	bf00      	nop
 80072e0:	e7fd      	b.n	80072de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80072e2:	f000 fc11 	bl	8007b08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80072e6:	4b39      	ldr	r3, [pc, #228]	@ (80073cc <xTaskResumeAll+0x118>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	3b01      	subs	r3, #1
 80072ec:	4a37      	ldr	r2, [pc, #220]	@ (80073cc <xTaskResumeAll+0x118>)
 80072ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072f0:	4b36      	ldr	r3, [pc, #216]	@ (80073cc <xTaskResumeAll+0x118>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d161      	bne.n	80073bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80072f8:	4b35      	ldr	r3, [pc, #212]	@ (80073d0 <xTaskResumeAll+0x11c>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d05d      	beq.n	80073bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007300:	e02e      	b.n	8007360 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007302:	4b34      	ldr	r3, [pc, #208]	@ (80073d4 <xTaskResumeAll+0x120>)
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	3318      	adds	r3, #24
 800730e:	4618      	mov	r0, r3
 8007310:	f7ff fd23 	bl	8006d5a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	3304      	adds	r3, #4
 8007318:	4618      	mov	r0, r3
 800731a:	f7ff fd1e 	bl	8006d5a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007322:	2201      	movs	r2, #1
 8007324:	409a      	lsls	r2, r3
 8007326:	4b2c      	ldr	r3, [pc, #176]	@ (80073d8 <xTaskResumeAll+0x124>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4313      	orrs	r3, r2
 800732c:	4a2a      	ldr	r2, [pc, #168]	@ (80073d8 <xTaskResumeAll+0x124>)
 800732e:	6013      	str	r3, [r2, #0]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007334:	4613      	mov	r3, r2
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	4413      	add	r3, r2
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	4a27      	ldr	r2, [pc, #156]	@ (80073dc <xTaskResumeAll+0x128>)
 800733e:	441a      	add	r2, r3
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	3304      	adds	r3, #4
 8007344:	4619      	mov	r1, r3
 8007346:	4610      	mov	r0, r2
 8007348:	f7ff fcaa 	bl	8006ca0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007350:	4b23      	ldr	r3, [pc, #140]	@ (80073e0 <xTaskResumeAll+0x12c>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007356:	429a      	cmp	r2, r3
 8007358:	d302      	bcc.n	8007360 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800735a:	4b22      	ldr	r3, [pc, #136]	@ (80073e4 <xTaskResumeAll+0x130>)
 800735c:	2201      	movs	r2, #1
 800735e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007360:	4b1c      	ldr	r3, [pc, #112]	@ (80073d4 <xTaskResumeAll+0x120>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1cc      	bne.n	8007302 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800736e:	f000 fa8b 	bl	8007888 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007372:	4b1d      	ldr	r3, [pc, #116]	@ (80073e8 <xTaskResumeAll+0x134>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d010      	beq.n	80073a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800737e:	f000 f837 	bl	80073f0 <xTaskIncrementTick>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d002      	beq.n	800738e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007388:	4b16      	ldr	r3, [pc, #88]	@ (80073e4 <xTaskResumeAll+0x130>)
 800738a:	2201      	movs	r2, #1
 800738c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	3b01      	subs	r3, #1
 8007392:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1f1      	bne.n	800737e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800739a:	4b13      	ldr	r3, [pc, #76]	@ (80073e8 <xTaskResumeAll+0x134>)
 800739c:	2200      	movs	r2, #0
 800739e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80073a0:	4b10      	ldr	r3, [pc, #64]	@ (80073e4 <xTaskResumeAll+0x130>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d009      	beq.n	80073bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80073a8:	2301      	movs	r3, #1
 80073aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80073ac:	4b0f      	ldr	r3, [pc, #60]	@ (80073ec <xTaskResumeAll+0x138>)
 80073ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073b2:	601a      	str	r2, [r3, #0]
 80073b4:	f3bf 8f4f 	dsb	sy
 80073b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073bc:	f000 fbd6 	bl	8007b6c <vPortExitCritical>

	return xAlreadyYielded;
 80073c0:	68bb      	ldr	r3, [r7, #8]
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	200003bc 	.word	0x200003bc
 80073d0:	2000039c 	.word	0x2000039c
 80073d4:	20000374 	.word	0x20000374
 80073d8:	200003a4 	.word	0x200003a4
 80073dc:	200002e0 	.word	0x200002e0
 80073e0:	200002dc 	.word	0x200002dc
 80073e4:	200003b0 	.word	0x200003b0
 80073e8:	200003ac 	.word	0x200003ac
 80073ec:	e000ed04 	.word	0xe000ed04

080073f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b086      	sub	sp, #24
 80073f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80073f6:	2300      	movs	r3, #0
 80073f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073fa:	4b4f      	ldr	r3, [pc, #316]	@ (8007538 <xTaskIncrementTick+0x148>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	f040 808f 	bne.w	8007522 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007404:	4b4d      	ldr	r3, [pc, #308]	@ (800753c <xTaskIncrementTick+0x14c>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	3301      	adds	r3, #1
 800740a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800740c:	4a4b      	ldr	r2, [pc, #300]	@ (800753c <xTaskIncrementTick+0x14c>)
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d121      	bne.n	800745c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007418:	4b49      	ldr	r3, [pc, #292]	@ (8007540 <xTaskIncrementTick+0x150>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00b      	beq.n	800743a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007426:	f383 8811 	msr	BASEPRI, r3
 800742a:	f3bf 8f6f 	isb	sy
 800742e:	f3bf 8f4f 	dsb	sy
 8007432:	603b      	str	r3, [r7, #0]
}
 8007434:	bf00      	nop
 8007436:	bf00      	nop
 8007438:	e7fd      	b.n	8007436 <xTaskIncrementTick+0x46>
 800743a:	4b41      	ldr	r3, [pc, #260]	@ (8007540 <xTaskIncrementTick+0x150>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	60fb      	str	r3, [r7, #12]
 8007440:	4b40      	ldr	r3, [pc, #256]	@ (8007544 <xTaskIncrementTick+0x154>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a3e      	ldr	r2, [pc, #248]	@ (8007540 <xTaskIncrementTick+0x150>)
 8007446:	6013      	str	r3, [r2, #0]
 8007448:	4a3e      	ldr	r2, [pc, #248]	@ (8007544 <xTaskIncrementTick+0x154>)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6013      	str	r3, [r2, #0]
 800744e:	4b3e      	ldr	r3, [pc, #248]	@ (8007548 <xTaskIncrementTick+0x158>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	3301      	adds	r3, #1
 8007454:	4a3c      	ldr	r2, [pc, #240]	@ (8007548 <xTaskIncrementTick+0x158>)
 8007456:	6013      	str	r3, [r2, #0]
 8007458:	f000 fa16 	bl	8007888 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800745c:	4b3b      	ldr	r3, [pc, #236]	@ (800754c <xTaskIncrementTick+0x15c>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	693a      	ldr	r2, [r7, #16]
 8007462:	429a      	cmp	r2, r3
 8007464:	d348      	bcc.n	80074f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007466:	4b36      	ldr	r3, [pc, #216]	@ (8007540 <xTaskIncrementTick+0x150>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d104      	bne.n	800747a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007470:	4b36      	ldr	r3, [pc, #216]	@ (800754c <xTaskIncrementTick+0x15c>)
 8007472:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007476:	601a      	str	r2, [r3, #0]
					break;
 8007478:	e03e      	b.n	80074f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800747a:	4b31      	ldr	r3, [pc, #196]	@ (8007540 <xTaskIncrementTick+0x150>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	429a      	cmp	r2, r3
 8007490:	d203      	bcs.n	800749a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007492:	4a2e      	ldr	r2, [pc, #184]	@ (800754c <xTaskIncrementTick+0x15c>)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007498:	e02e      	b.n	80074f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	3304      	adds	r3, #4
 800749e:	4618      	mov	r0, r3
 80074a0:	f7ff fc5b 	bl	8006d5a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d004      	beq.n	80074b6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	3318      	adds	r3, #24
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7ff fc52 	bl	8006d5a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ba:	2201      	movs	r2, #1
 80074bc:	409a      	lsls	r2, r3
 80074be:	4b24      	ldr	r3, [pc, #144]	@ (8007550 <xTaskIncrementTick+0x160>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	4a22      	ldr	r2, [pc, #136]	@ (8007550 <xTaskIncrementTick+0x160>)
 80074c6:	6013      	str	r3, [r2, #0]
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074cc:	4613      	mov	r3, r2
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	4413      	add	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	4a1f      	ldr	r2, [pc, #124]	@ (8007554 <xTaskIncrementTick+0x164>)
 80074d6:	441a      	add	r2, r3
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	3304      	adds	r3, #4
 80074dc:	4619      	mov	r1, r3
 80074de:	4610      	mov	r0, r2
 80074e0:	f7ff fbde 	bl	8006ca0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074e8:	4b1b      	ldr	r3, [pc, #108]	@ (8007558 <xTaskIncrementTick+0x168>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d3b9      	bcc.n	8007466 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80074f2:	2301      	movs	r3, #1
 80074f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074f6:	e7b6      	b.n	8007466 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80074f8:	4b17      	ldr	r3, [pc, #92]	@ (8007558 <xTaskIncrementTick+0x168>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074fe:	4915      	ldr	r1, [pc, #84]	@ (8007554 <xTaskIncrementTick+0x164>)
 8007500:	4613      	mov	r3, r2
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	4413      	add	r3, r2
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	440b      	add	r3, r1
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d901      	bls.n	8007514 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007510:	2301      	movs	r3, #1
 8007512:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007514:	4b11      	ldr	r3, [pc, #68]	@ (800755c <xTaskIncrementTick+0x16c>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d007      	beq.n	800752c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800751c:	2301      	movs	r3, #1
 800751e:	617b      	str	r3, [r7, #20]
 8007520:	e004      	b.n	800752c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007522:	4b0f      	ldr	r3, [pc, #60]	@ (8007560 <xTaskIncrementTick+0x170>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	3301      	adds	r3, #1
 8007528:	4a0d      	ldr	r2, [pc, #52]	@ (8007560 <xTaskIncrementTick+0x170>)
 800752a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800752c:	697b      	ldr	r3, [r7, #20]
}
 800752e:	4618      	mov	r0, r3
 8007530:	3718      	adds	r7, #24
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	200003bc 	.word	0x200003bc
 800753c:	200003a0 	.word	0x200003a0
 8007540:	2000036c 	.word	0x2000036c
 8007544:	20000370 	.word	0x20000370
 8007548:	200003b4 	.word	0x200003b4
 800754c:	200003b8 	.word	0x200003b8
 8007550:	200003a4 	.word	0x200003a4
 8007554:	200002e0 	.word	0x200002e0
 8007558:	200002dc 	.word	0x200002dc
 800755c:	200003b0 	.word	0x200003b0
 8007560:	200003ac 	.word	0x200003ac

08007564 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b088      	sub	sp, #32
 8007568:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800756a:	4b3a      	ldr	r3, [pc, #232]	@ (8007654 <vTaskSwitchContext+0xf0>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d003      	beq.n	800757a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007572:	4b39      	ldr	r3, [pc, #228]	@ (8007658 <vTaskSwitchContext+0xf4>)
 8007574:	2201      	movs	r2, #1
 8007576:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007578:	e067      	b.n	800764a <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800757a:	4b37      	ldr	r3, [pc, #220]	@ (8007658 <vTaskSwitchContext+0xf4>)
 800757c:	2200      	movs	r2, #0
 800757e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8007580:	4b36      	ldr	r3, [pc, #216]	@ (800765c <vTaskSwitchContext+0xf8>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007586:	61fb      	str	r3, [r7, #28]
 8007588:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800758c:	61bb      	str	r3, [r7, #24]
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	69ba      	ldr	r2, [r7, #24]
 8007594:	429a      	cmp	r2, r3
 8007596:	d111      	bne.n	80075bc <vTaskSwitchContext+0x58>
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	3304      	adds	r3, #4
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	69ba      	ldr	r2, [r7, #24]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d10b      	bne.n	80075bc <vTaskSwitchContext+0x58>
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	3308      	adds	r3, #8
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	69ba      	ldr	r2, [r7, #24]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d105      	bne.n	80075bc <vTaskSwitchContext+0x58>
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	330c      	adds	r3, #12
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	69ba      	ldr	r2, [r7, #24]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d008      	beq.n	80075ce <vTaskSwitchContext+0x6a>
 80075bc:	4b27      	ldr	r3, [pc, #156]	@ (800765c <vTaskSwitchContext+0xf8>)
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	4b26      	ldr	r3, [pc, #152]	@ (800765c <vTaskSwitchContext+0xf8>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	3334      	adds	r3, #52	@ 0x34
 80075c6:	4619      	mov	r1, r3
 80075c8:	4610      	mov	r0, r2
 80075ca:	f7f9 f923 	bl	8000814 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075ce:	4b24      	ldr	r3, [pc, #144]	@ (8007660 <vTaskSwitchContext+0xfc>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	fab3 f383 	clz	r3, r3
 80075da:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80075dc:	7afb      	ldrb	r3, [r7, #11]
 80075de:	f1c3 031f 	rsb	r3, r3, #31
 80075e2:	617b      	str	r3, [r7, #20]
 80075e4:	491f      	ldr	r1, [pc, #124]	@ (8007664 <vTaskSwitchContext+0x100>)
 80075e6:	697a      	ldr	r2, [r7, #20]
 80075e8:	4613      	mov	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4413      	add	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	440b      	add	r3, r1
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10b      	bne.n	8007610 <vTaskSwitchContext+0xac>
	__asm volatile
 80075f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075fc:	f383 8811 	msr	BASEPRI, r3
 8007600:	f3bf 8f6f 	isb	sy
 8007604:	f3bf 8f4f 	dsb	sy
 8007608:	607b      	str	r3, [r7, #4]
}
 800760a:	bf00      	nop
 800760c:	bf00      	nop
 800760e:	e7fd      	b.n	800760c <vTaskSwitchContext+0xa8>
 8007610:	697a      	ldr	r2, [r7, #20]
 8007612:	4613      	mov	r3, r2
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	4413      	add	r3, r2
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	4a12      	ldr	r2, [pc, #72]	@ (8007664 <vTaskSwitchContext+0x100>)
 800761c:	4413      	add	r3, r2
 800761e:	613b      	str	r3, [r7, #16]
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	685a      	ldr	r2, [r3, #4]
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	605a      	str	r2, [r3, #4]
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	685a      	ldr	r2, [r3, #4]
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	3308      	adds	r3, #8
 8007632:	429a      	cmp	r2, r3
 8007634:	d104      	bne.n	8007640 <vTaskSwitchContext+0xdc>
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	685a      	ldr	r2, [r3, #4]
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	605a      	str	r2, [r3, #4]
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	4a05      	ldr	r2, [pc, #20]	@ (800765c <vTaskSwitchContext+0xf8>)
 8007648:	6013      	str	r3, [r2, #0]
}
 800764a:	bf00      	nop
 800764c:	3720      	adds	r7, #32
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	200003bc 	.word	0x200003bc
 8007658:	200003b0 	.word	0x200003b0
 800765c:	200002dc 	.word	0x200002dc
 8007660:	200003a4 	.word	0x200003a4
 8007664:	200002e0 	.word	0x200002e0

08007668 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d10b      	bne.n	8007690 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767c:	f383 8811 	msr	BASEPRI, r3
 8007680:	f3bf 8f6f 	isb	sy
 8007684:	f3bf 8f4f 	dsb	sy
 8007688:	60fb      	str	r3, [r7, #12]
}
 800768a:	bf00      	nop
 800768c:	bf00      	nop
 800768e:	e7fd      	b.n	800768c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007690:	4b07      	ldr	r3, [pc, #28]	@ (80076b0 <vTaskPlaceOnEventList+0x48>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	3318      	adds	r3, #24
 8007696:	4619      	mov	r1, r3
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f7ff fb25 	bl	8006ce8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800769e:	2101      	movs	r1, #1
 80076a0:	6838      	ldr	r0, [r7, #0]
 80076a2:	f000 f9b7 	bl	8007a14 <prvAddCurrentTaskToDelayedList>
}
 80076a6:	bf00      	nop
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	200002dc 	.word	0x200002dc

080076b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10b      	bne.n	80076e2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80076ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ce:	f383 8811 	msr	BASEPRI, r3
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	f3bf 8f4f 	dsb	sy
 80076da:	60fb      	str	r3, [r7, #12]
}
 80076dc:	bf00      	nop
 80076de:	bf00      	nop
 80076e0:	e7fd      	b.n	80076de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	3318      	adds	r3, #24
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7ff fb37 	bl	8006d5a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076ec:	4b1d      	ldr	r3, [pc, #116]	@ (8007764 <xTaskRemoveFromEventList+0xb0>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d11c      	bne.n	800772e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	3304      	adds	r3, #4
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7ff fb2e 	bl	8006d5a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007702:	2201      	movs	r2, #1
 8007704:	409a      	lsls	r2, r3
 8007706:	4b18      	ldr	r3, [pc, #96]	@ (8007768 <xTaskRemoveFromEventList+0xb4>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4313      	orrs	r3, r2
 800770c:	4a16      	ldr	r2, [pc, #88]	@ (8007768 <xTaskRemoveFromEventList+0xb4>)
 800770e:	6013      	str	r3, [r2, #0]
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007714:	4613      	mov	r3, r2
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	4413      	add	r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	4a13      	ldr	r2, [pc, #76]	@ (800776c <xTaskRemoveFromEventList+0xb8>)
 800771e:	441a      	add	r2, r3
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	3304      	adds	r3, #4
 8007724:	4619      	mov	r1, r3
 8007726:	4610      	mov	r0, r2
 8007728:	f7ff faba 	bl	8006ca0 <vListInsertEnd>
 800772c:	e005      	b.n	800773a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	3318      	adds	r3, #24
 8007732:	4619      	mov	r1, r3
 8007734:	480e      	ldr	r0, [pc, #56]	@ (8007770 <xTaskRemoveFromEventList+0xbc>)
 8007736:	f7ff fab3 	bl	8006ca0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800773e:	4b0d      	ldr	r3, [pc, #52]	@ (8007774 <xTaskRemoveFromEventList+0xc0>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007744:	429a      	cmp	r2, r3
 8007746:	d905      	bls.n	8007754 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007748:	2301      	movs	r3, #1
 800774a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800774c:	4b0a      	ldr	r3, [pc, #40]	@ (8007778 <xTaskRemoveFromEventList+0xc4>)
 800774e:	2201      	movs	r2, #1
 8007750:	601a      	str	r2, [r3, #0]
 8007752:	e001      	b.n	8007758 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007754:	2300      	movs	r3, #0
 8007756:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007758:	697b      	ldr	r3, [r7, #20]
}
 800775a:	4618      	mov	r0, r3
 800775c:	3718      	adds	r7, #24
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	200003bc 	.word	0x200003bc
 8007768:	200003a4 	.word	0x200003a4
 800776c:	200002e0 	.word	0x200002e0
 8007770:	20000374 	.word	0x20000374
 8007774:	200002dc 	.word	0x200002dc
 8007778:	200003b0 	.word	0x200003b0

0800777c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007784:	4b06      	ldr	r3, [pc, #24]	@ (80077a0 <vTaskInternalSetTimeOutState+0x24>)
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800778c:	4b05      	ldr	r3, [pc, #20]	@ (80077a4 <vTaskInternalSetTimeOutState+0x28>)
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	605a      	str	r2, [r3, #4]
}
 8007794:	bf00      	nop
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr
 80077a0:	200003b4 	.word	0x200003b4
 80077a4:	200003a0 	.word	0x200003a0

080077a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b088      	sub	sp, #32
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d10b      	bne.n	80077d0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80077b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077bc:	f383 8811 	msr	BASEPRI, r3
 80077c0:	f3bf 8f6f 	isb	sy
 80077c4:	f3bf 8f4f 	dsb	sy
 80077c8:	613b      	str	r3, [r7, #16]
}
 80077ca:	bf00      	nop
 80077cc:	bf00      	nop
 80077ce:	e7fd      	b.n	80077cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d10b      	bne.n	80077ee <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80077d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077da:	f383 8811 	msr	BASEPRI, r3
 80077de:	f3bf 8f6f 	isb	sy
 80077e2:	f3bf 8f4f 	dsb	sy
 80077e6:	60fb      	str	r3, [r7, #12]
}
 80077e8:	bf00      	nop
 80077ea:	bf00      	nop
 80077ec:	e7fd      	b.n	80077ea <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80077ee:	f000 f98b 	bl	8007b08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80077f2:	4b1d      	ldr	r3, [pc, #116]	@ (8007868 <xTaskCheckForTimeOut+0xc0>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	69ba      	ldr	r2, [r7, #24]
 80077fe:	1ad3      	subs	r3, r2, r3
 8007800:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800780a:	d102      	bne.n	8007812 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800780c:	2300      	movs	r3, #0
 800780e:	61fb      	str	r3, [r7, #28]
 8007810:	e023      	b.n	800785a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	4b15      	ldr	r3, [pc, #84]	@ (800786c <xTaskCheckForTimeOut+0xc4>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	429a      	cmp	r2, r3
 800781c:	d007      	beq.n	800782e <xTaskCheckForTimeOut+0x86>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	69ba      	ldr	r2, [r7, #24]
 8007824:	429a      	cmp	r2, r3
 8007826:	d302      	bcc.n	800782e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007828:	2301      	movs	r3, #1
 800782a:	61fb      	str	r3, [r7, #28]
 800782c:	e015      	b.n	800785a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	697a      	ldr	r2, [r7, #20]
 8007834:	429a      	cmp	r2, r3
 8007836:	d20b      	bcs.n	8007850 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	1ad2      	subs	r2, r2, r3
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f7ff ff99 	bl	800777c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800784a:	2300      	movs	r3, #0
 800784c:	61fb      	str	r3, [r7, #28]
 800784e:	e004      	b.n	800785a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	2200      	movs	r2, #0
 8007854:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007856:	2301      	movs	r3, #1
 8007858:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800785a:	f000 f987 	bl	8007b6c <vPortExitCritical>

	return xReturn;
 800785e:	69fb      	ldr	r3, [r7, #28]
}
 8007860:	4618      	mov	r0, r3
 8007862:	3720      	adds	r7, #32
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	200003a0 	.word	0x200003a0
 800786c:	200003b4 	.word	0x200003b4

08007870 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007870:	b480      	push	{r7}
 8007872:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007874:	4b03      	ldr	r3, [pc, #12]	@ (8007884 <vTaskMissedYield+0x14>)
 8007876:	2201      	movs	r2, #1
 8007878:	601a      	str	r2, [r3, #0]
}
 800787a:	bf00      	nop
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr
 8007884:	200003b0 	.word	0x200003b0

08007888 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800788e:	4b0c      	ldr	r3, [pc, #48]	@ (80078c0 <prvResetNextTaskUnblockTime+0x38>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d104      	bne.n	80078a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007898:	4b0a      	ldr	r3, [pc, #40]	@ (80078c4 <prvResetNextTaskUnblockTime+0x3c>)
 800789a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800789e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80078a0:	e008      	b.n	80078b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078a2:	4b07      	ldr	r3, [pc, #28]	@ (80078c0 <prvResetNextTaskUnblockTime+0x38>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	4a04      	ldr	r2, [pc, #16]	@ (80078c4 <prvResetNextTaskUnblockTime+0x3c>)
 80078b2:	6013      	str	r3, [r2, #0]
}
 80078b4:	bf00      	nop
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	2000036c 	.word	0x2000036c
 80078c4:	200003b8 	.word	0x200003b8

080078c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80078ce:	4b0b      	ldr	r3, [pc, #44]	@ (80078fc <xTaskGetSchedulerState+0x34>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d102      	bne.n	80078dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80078d6:	2301      	movs	r3, #1
 80078d8:	607b      	str	r3, [r7, #4]
 80078da:	e008      	b.n	80078ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078dc:	4b08      	ldr	r3, [pc, #32]	@ (8007900 <xTaskGetSchedulerState+0x38>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d102      	bne.n	80078ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80078e4:	2302      	movs	r3, #2
 80078e6:	607b      	str	r3, [r7, #4]
 80078e8:	e001      	b.n	80078ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80078ea:	2300      	movs	r3, #0
 80078ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80078ee:	687b      	ldr	r3, [r7, #4]
	}
 80078f0:	4618      	mov	r0, r3
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr
 80078fc:	200003a8 	.word	0x200003a8
 8007900:	200003bc 	.word	0x200003bc

08007904 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007904:	b580      	push	{r7, lr}
 8007906:	b086      	sub	sp, #24
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007910:	2300      	movs	r3, #0
 8007912:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d070      	beq.n	80079fc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800791a:	4b3b      	ldr	r3, [pc, #236]	@ (8007a08 <xTaskPriorityDisinherit+0x104>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	693a      	ldr	r2, [r7, #16]
 8007920:	429a      	cmp	r2, r3
 8007922:	d00b      	beq.n	800793c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007928:	f383 8811 	msr	BASEPRI, r3
 800792c:	f3bf 8f6f 	isb	sy
 8007930:	f3bf 8f4f 	dsb	sy
 8007934:	60fb      	str	r3, [r7, #12]
}
 8007936:	bf00      	nop
 8007938:	bf00      	nop
 800793a:	e7fd      	b.n	8007938 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10b      	bne.n	800795c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007948:	f383 8811 	msr	BASEPRI, r3
 800794c:	f3bf 8f6f 	isb	sy
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	60bb      	str	r3, [r7, #8]
}
 8007956:	bf00      	nop
 8007958:	bf00      	nop
 800795a:	e7fd      	b.n	8007958 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007960:	1e5a      	subs	r2, r3, #1
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800796e:	429a      	cmp	r2, r3
 8007970:	d044      	beq.n	80079fc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007976:	2b00      	cmp	r3, #0
 8007978:	d140      	bne.n	80079fc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	3304      	adds	r3, #4
 800797e:	4618      	mov	r0, r3
 8007980:	f7ff f9eb 	bl	8006d5a <uxListRemove>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d115      	bne.n	80079b6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800798e:	491f      	ldr	r1, [pc, #124]	@ (8007a0c <xTaskPriorityDisinherit+0x108>)
 8007990:	4613      	mov	r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4413      	add	r3, r2
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	440b      	add	r3, r1
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10a      	bne.n	80079b6 <xTaskPriorityDisinherit+0xb2>
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a4:	2201      	movs	r2, #1
 80079a6:	fa02 f303 	lsl.w	r3, r2, r3
 80079aa:	43da      	mvns	r2, r3
 80079ac:	4b18      	ldr	r3, [pc, #96]	@ (8007a10 <xTaskPriorityDisinherit+0x10c>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4013      	ands	r3, r2
 80079b2:	4a17      	ldr	r2, [pc, #92]	@ (8007a10 <xTaskPriorityDisinherit+0x10c>)
 80079b4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c2:	f1c3 0207 	rsb	r2, r3, #7
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ce:	2201      	movs	r2, #1
 80079d0:	409a      	lsls	r2, r3
 80079d2:	4b0f      	ldr	r3, [pc, #60]	@ (8007a10 <xTaskPriorityDisinherit+0x10c>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	4a0d      	ldr	r2, [pc, #52]	@ (8007a10 <xTaskPriorityDisinherit+0x10c>)
 80079da:	6013      	str	r3, [r2, #0]
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079e0:	4613      	mov	r3, r2
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	4413      	add	r3, r2
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	4a08      	ldr	r2, [pc, #32]	@ (8007a0c <xTaskPriorityDisinherit+0x108>)
 80079ea:	441a      	add	r2, r3
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	3304      	adds	r3, #4
 80079f0:	4619      	mov	r1, r3
 80079f2:	4610      	mov	r0, r2
 80079f4:	f7ff f954 	bl	8006ca0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80079f8:	2301      	movs	r3, #1
 80079fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079fc:	697b      	ldr	r3, [r7, #20]
	}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3718      	adds	r7, #24
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	200002dc 	.word	0x200002dc
 8007a0c:	200002e0 	.word	0x200002e0
 8007a10:	200003a4 	.word	0x200003a4

08007a14 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a1e:	4b29      	ldr	r3, [pc, #164]	@ (8007ac4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a24:	4b28      	ldr	r3, [pc, #160]	@ (8007ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	3304      	adds	r3, #4
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7ff f995 	bl	8006d5a <uxListRemove>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10b      	bne.n	8007a4e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007a36:	4b24      	ldr	r3, [pc, #144]	@ (8007ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a42:	43da      	mvns	r2, r3
 8007a44:	4b21      	ldr	r3, [pc, #132]	@ (8007acc <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4013      	ands	r3, r2
 8007a4a:	4a20      	ldr	r2, [pc, #128]	@ (8007acc <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a4c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a54:	d10a      	bne.n	8007a6c <prvAddCurrentTaskToDelayedList+0x58>
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d007      	beq.n	8007a6c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8007ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	3304      	adds	r3, #4
 8007a62:	4619      	mov	r1, r3
 8007a64:	481a      	ldr	r0, [pc, #104]	@ (8007ad0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007a66:	f7ff f91b 	bl	8006ca0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007a6a:	e026      	b.n	8007aba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4413      	add	r3, r2
 8007a72:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a74:	4b14      	ldr	r3, [pc, #80]	@ (8007ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68ba      	ldr	r2, [r7, #8]
 8007a7a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d209      	bcs.n	8007a98 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a84:	4b13      	ldr	r3, [pc, #76]	@ (8007ad4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	4b0f      	ldr	r3, [pc, #60]	@ (8007ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	3304      	adds	r3, #4
 8007a8e:	4619      	mov	r1, r3
 8007a90:	4610      	mov	r0, r2
 8007a92:	f7ff f929 	bl	8006ce8 <vListInsert>
}
 8007a96:	e010      	b.n	8007aba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a98:	4b0f      	ldr	r3, [pc, #60]	@ (8007ad8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8007ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	3304      	adds	r3, #4
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	4610      	mov	r0, r2
 8007aa6:	f7ff f91f 	bl	8006ce8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8007adc <prvAddCurrentTaskToDelayedList+0xc8>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d202      	bcs.n	8007aba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007ab4:	4a09      	ldr	r2, [pc, #36]	@ (8007adc <prvAddCurrentTaskToDelayedList+0xc8>)
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	6013      	str	r3, [r2, #0]
}
 8007aba:	bf00      	nop
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	200003a0 	.word	0x200003a0
 8007ac8:	200002dc 	.word	0x200002dc
 8007acc:	200003a4 	.word	0x200003a4
 8007ad0:	20000388 	.word	0x20000388
 8007ad4:	20000370 	.word	0x20000370
 8007ad8:	2000036c 	.word	0x2000036c
 8007adc:	200003b8 	.word	0x200003b8

08007ae0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ae0:	4b07      	ldr	r3, [pc, #28]	@ (8007b00 <pxCurrentTCBConst2>)
 8007ae2:	6819      	ldr	r1, [r3, #0]
 8007ae4:	6808      	ldr	r0, [r1, #0]
 8007ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aea:	f380 8809 	msr	PSP, r0
 8007aee:	f3bf 8f6f 	isb	sy
 8007af2:	f04f 0000 	mov.w	r0, #0
 8007af6:	f380 8811 	msr	BASEPRI, r0
 8007afa:	4770      	bx	lr
 8007afc:	f3af 8000 	nop.w

08007b00 <pxCurrentTCBConst2>:
 8007b00:	200002dc 	.word	0x200002dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b04:	bf00      	nop
 8007b06:	bf00      	nop

08007b08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	607b      	str	r3, [r7, #4]
}
 8007b20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b22:	4b10      	ldr	r3, [pc, #64]	@ (8007b64 <vPortEnterCritical+0x5c>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	3301      	adds	r3, #1
 8007b28:	4a0e      	ldr	r2, [pc, #56]	@ (8007b64 <vPortEnterCritical+0x5c>)
 8007b2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8007b64 <vPortEnterCritical+0x5c>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d110      	bne.n	8007b56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b34:	4b0c      	ldr	r3, [pc, #48]	@ (8007b68 <vPortEnterCritical+0x60>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00b      	beq.n	8007b56 <vPortEnterCritical+0x4e>
	__asm volatile
 8007b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b42:	f383 8811 	msr	BASEPRI, r3
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	603b      	str	r3, [r7, #0]
}
 8007b50:	bf00      	nop
 8007b52:	bf00      	nop
 8007b54:	e7fd      	b.n	8007b52 <vPortEnterCritical+0x4a>
	}
}
 8007b56:	bf00      	nop
 8007b58:	370c      	adds	r7, #12
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	2000000c 	.word	0x2000000c
 8007b68:	e000ed04 	.word	0xe000ed04

08007b6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b72:	4b12      	ldr	r3, [pc, #72]	@ (8007bbc <vPortExitCritical+0x50>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d10b      	bne.n	8007b92 <vPortExitCritical+0x26>
	__asm volatile
 8007b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b7e:	f383 8811 	msr	BASEPRI, r3
 8007b82:	f3bf 8f6f 	isb	sy
 8007b86:	f3bf 8f4f 	dsb	sy
 8007b8a:	607b      	str	r3, [r7, #4]
}
 8007b8c:	bf00      	nop
 8007b8e:	bf00      	nop
 8007b90:	e7fd      	b.n	8007b8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007b92:	4b0a      	ldr	r3, [pc, #40]	@ (8007bbc <vPortExitCritical+0x50>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	3b01      	subs	r3, #1
 8007b98:	4a08      	ldr	r2, [pc, #32]	@ (8007bbc <vPortExitCritical+0x50>)
 8007b9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b9c:	4b07      	ldr	r3, [pc, #28]	@ (8007bbc <vPortExitCritical+0x50>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d105      	bne.n	8007bb0 <vPortExitCritical+0x44>
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	f383 8811 	msr	BASEPRI, r3
}
 8007bae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007bb0:	bf00      	nop
 8007bb2:	370c      	adds	r7, #12
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr
 8007bbc:	2000000c 	.word	0x2000000c

08007bc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007bc0:	f3ef 8009 	mrs	r0, PSP
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	4b15      	ldr	r3, [pc, #84]	@ (8007c20 <pxCurrentTCBConst>)
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	f01e 0f10 	tst.w	lr, #16
 8007bd0:	bf08      	it	eq
 8007bd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007bd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bda:	6010      	str	r0, [r2, #0]
 8007bdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007be0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007be4:	f380 8811 	msr	BASEPRI, r0
 8007be8:	f3bf 8f4f 	dsb	sy
 8007bec:	f3bf 8f6f 	isb	sy
 8007bf0:	f7ff fcb8 	bl	8007564 <vTaskSwitchContext>
 8007bf4:	f04f 0000 	mov.w	r0, #0
 8007bf8:	f380 8811 	msr	BASEPRI, r0
 8007bfc:	bc09      	pop	{r0, r3}
 8007bfe:	6819      	ldr	r1, [r3, #0]
 8007c00:	6808      	ldr	r0, [r1, #0]
 8007c02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c06:	f01e 0f10 	tst.w	lr, #16
 8007c0a:	bf08      	it	eq
 8007c0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c10:	f380 8809 	msr	PSP, r0
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop
 8007c1c:	f3af 8000 	nop.w

08007c20 <pxCurrentTCBConst>:
 8007c20:	200002dc 	.word	0x200002dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c24:	bf00      	nop
 8007c26:	bf00      	nop

08007c28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c32:	f383 8811 	msr	BASEPRI, r3
 8007c36:	f3bf 8f6f 	isb	sy
 8007c3a:	f3bf 8f4f 	dsb	sy
 8007c3e:	607b      	str	r3, [r7, #4]
}
 8007c40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c42:	f7ff fbd5 	bl	80073f0 <xTaskIncrementTick>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d003      	beq.n	8007c54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c4c:	4b06      	ldr	r3, [pc, #24]	@ (8007c68 <SysTick_Handler+0x40>)
 8007c4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c52:	601a      	str	r2, [r3, #0]
 8007c54:	2300      	movs	r3, #0
 8007c56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	f383 8811 	msr	BASEPRI, r3
}
 8007c5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c60:	bf00      	nop
 8007c62:	3708      	adds	r7, #8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	e000ed04 	.word	0xe000ed04

08007c6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007c72:	f3ef 8305 	mrs	r3, IPSR
 8007c76:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2b0f      	cmp	r3, #15
 8007c7c:	d915      	bls.n	8007caa <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c7e:	4a18      	ldr	r2, [pc, #96]	@ (8007ce0 <vPortValidateInterruptPriority+0x74>)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	4413      	add	r3, r2
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c88:	4b16      	ldr	r3, [pc, #88]	@ (8007ce4 <vPortValidateInterruptPriority+0x78>)
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	7afa      	ldrb	r2, [r7, #11]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d20b      	bcs.n	8007caa <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c96:	f383 8811 	msr	BASEPRI, r3
 8007c9a:	f3bf 8f6f 	isb	sy
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	607b      	str	r3, [r7, #4]
}
 8007ca4:	bf00      	nop
 8007ca6:	bf00      	nop
 8007ca8:	e7fd      	b.n	8007ca6 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007caa:	4b0f      	ldr	r3, [pc, #60]	@ (8007ce8 <vPortValidateInterruptPriority+0x7c>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8007cec <vPortValidateInterruptPriority+0x80>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d90b      	bls.n	8007cd2 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cbe:	f383 8811 	msr	BASEPRI, r3
 8007cc2:	f3bf 8f6f 	isb	sy
 8007cc6:	f3bf 8f4f 	dsb	sy
 8007cca:	603b      	str	r3, [r7, #0]
}
 8007ccc:	bf00      	nop
 8007cce:	bf00      	nop
 8007cd0:	e7fd      	b.n	8007cce <vPortValidateInterruptPriority+0x62>
	}
 8007cd2:	bf00      	nop
 8007cd4:	3714      	adds	r7, #20
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	e000e3f0 	.word	0xe000e3f0
 8007ce4:	200003c0 	.word	0x200003c0
 8007ce8:	e000ed0c 	.word	0xe000ed0c
 8007cec:	200003c4 	.word	0x200003c4

08007cf0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7fe fea0 	bl	8006a44 <USBH_LL_IncTimer>
}
 8007d04:	bf00      	nop
 8007d06:	3708      	adds	r7, #8
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7fe fee4 	bl	8006ae8 <USBH_LL_Connect>
}
 8007d20:	bf00      	nop
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7fe fef9 	bl	8006b2e <USBH_LL_Disconnect>
}
 8007d3c:	bf00      	nop
 8007d3e:	3708      	adds	r7, #8
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	70fb      	strb	r3, [r7, #3]
 8007d50:	4613      	mov	r3, r2
 8007d52:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7fe ff19 	bl	8006b92 <USBH_LL_NotifyURBChange>
#endif
}
 8007d60:	bf00      	nop
 8007d62:	3708      	adds	r7, #8
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7fe fe8e 	bl	8006a98 <USBH_LL_PortEnabled>
}
 8007d7c:	bf00      	nop
 8007d7e:	3708      	adds	r7, #8
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7fe fe9a 	bl	8006acc <USBH_LL_PortDisabled>
}
 8007d98:	bf00      	nop
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007da8:	2300      	movs	r3, #0
 8007daa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007dac:	2300      	movs	r3, #0
 8007dae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7fa fa23 	bl	8002202 <HAL_HCD_Stop>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007dc0:	7bfb      	ldrb	r3, [r7, #15]
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f000 f808 	bl	8007dd8 <USBH_Get_USB_Status>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
	...

08007dd8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	4603      	mov	r3, r0
 8007de0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007de2:	2300      	movs	r3, #0
 8007de4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007de6:	79fb      	ldrb	r3, [r7, #7]
 8007de8:	2b03      	cmp	r3, #3
 8007dea:	d817      	bhi.n	8007e1c <USBH_Get_USB_Status+0x44>
 8007dec:	a201      	add	r2, pc, #4	@ (adr r2, 8007df4 <USBH_Get_USB_Status+0x1c>)
 8007dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df2:	bf00      	nop
 8007df4:	08007e05 	.word	0x08007e05
 8007df8:	08007e0b 	.word	0x08007e0b
 8007dfc:	08007e11 	.word	0x08007e11
 8007e00:	08007e17 	.word	0x08007e17
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007e04:	2300      	movs	r3, #0
 8007e06:	73fb      	strb	r3, [r7, #15]
    break;
 8007e08:	e00b      	b.n	8007e22 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007e0a:	2302      	movs	r3, #2
 8007e0c:	73fb      	strb	r3, [r7, #15]
    break;
 8007e0e:	e008      	b.n	8007e22 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007e10:	2301      	movs	r3, #1
 8007e12:	73fb      	strb	r3, [r7, #15]
    break;
 8007e14:	e005      	b.n	8007e22 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007e16:	2302      	movs	r3, #2
 8007e18:	73fb      	strb	r3, [r7, #15]
    break;
 8007e1a:	e002      	b.n	8007e22 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007e1c:	2302      	movs	r3, #2
 8007e1e:	73fb      	strb	r3, [r7, #15]
    break;
 8007e20:	bf00      	nop
  }
  return usb_status;
 8007e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <memset>:
 8007e30:	4402      	add	r2, r0
 8007e32:	4603      	mov	r3, r0
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d100      	bne.n	8007e3a <memset+0xa>
 8007e38:	4770      	bx	lr
 8007e3a:	f803 1b01 	strb.w	r1, [r3], #1
 8007e3e:	e7f9      	b.n	8007e34 <memset+0x4>

08007e40 <__libc_init_array>:
 8007e40:	b570      	push	{r4, r5, r6, lr}
 8007e42:	4d0d      	ldr	r5, [pc, #52]	@ (8007e78 <__libc_init_array+0x38>)
 8007e44:	4c0d      	ldr	r4, [pc, #52]	@ (8007e7c <__libc_init_array+0x3c>)
 8007e46:	1b64      	subs	r4, r4, r5
 8007e48:	10a4      	asrs	r4, r4, #2
 8007e4a:	2600      	movs	r6, #0
 8007e4c:	42a6      	cmp	r6, r4
 8007e4e:	d109      	bne.n	8007e64 <__libc_init_array+0x24>
 8007e50:	4d0b      	ldr	r5, [pc, #44]	@ (8007e80 <__libc_init_array+0x40>)
 8007e52:	4c0c      	ldr	r4, [pc, #48]	@ (8007e84 <__libc_init_array+0x44>)
 8007e54:	f000 f826 	bl	8007ea4 <_init>
 8007e58:	1b64      	subs	r4, r4, r5
 8007e5a:	10a4      	asrs	r4, r4, #2
 8007e5c:	2600      	movs	r6, #0
 8007e5e:	42a6      	cmp	r6, r4
 8007e60:	d105      	bne.n	8007e6e <__libc_init_array+0x2e>
 8007e62:	bd70      	pop	{r4, r5, r6, pc}
 8007e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e68:	4798      	blx	r3
 8007e6a:	3601      	adds	r6, #1
 8007e6c:	e7ee      	b.n	8007e4c <__libc_init_array+0xc>
 8007e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e72:	4798      	blx	r3
 8007e74:	3601      	adds	r6, #1
 8007e76:	e7f2      	b.n	8007e5e <__libc_init_array+0x1e>
 8007e78:	08007edc 	.word	0x08007edc
 8007e7c:	08007edc 	.word	0x08007edc
 8007e80:	08007edc 	.word	0x08007edc
 8007e84:	08007ee0 	.word	0x08007ee0

08007e88 <memcpy>:
 8007e88:	440a      	add	r2, r1
 8007e8a:	4291      	cmp	r1, r2
 8007e8c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007e90:	d100      	bne.n	8007e94 <memcpy+0xc>
 8007e92:	4770      	bx	lr
 8007e94:	b510      	push	{r4, lr}
 8007e96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e9e:	4291      	cmp	r1, r2
 8007ea0:	d1f9      	bne.n	8007e96 <memcpy+0xe>
 8007ea2:	bd10      	pop	{r4, pc}

08007ea4 <_init>:
 8007ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ea6:	bf00      	nop
 8007ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eaa:	bc08      	pop	{r3}
 8007eac:	469e      	mov	lr, r3
 8007eae:	4770      	bx	lr

08007eb0 <_fini>:
 8007eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eb2:	bf00      	nop
 8007eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eb6:	bc08      	pop	{r3}
 8007eb8:	469e      	mov	lr, r3
 8007eba:	4770      	bx	lr
